
usbandfreertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b670  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002dc  0800b800  0800b800  0001b800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800badc  0800badc  00020164  2**0
                  CONTENTS
  4 .ARM          00000008  0800badc  0800badc  0001badc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bae4  0800bae4  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bae4  0800bae4  0001bae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bae8  0800bae8  0001bae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  0800baec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020164  2**0
                  CONTENTS
 10 .bss          00006708  20000164  20000164  00020164  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000686c  2000686c  00020164  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002e485  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000058bb  00000000  00000000  0004e619  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001bd8  00000000  00000000  00053ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000019c0  00000000  00000000  00055ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000b1f5  00000000  00000000  00057470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021a0f  00000000  00000000  00062665  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd0a9  00000000  00000000  00084074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016111d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008d14  00000000  00000000  00161170  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000164 	.word	0x20000164
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b7e8 	.word	0x0800b7e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000168 	.word	0x20000168
 80001cc:	0800b7e8 	.word	0x0800b7e8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <_ZNSt7__cxx119to_stringEi>:

  // DR 1261. Insufficent overloads for to_string / to_wstring

  inline string
  to_string(int __val)
  {
 80004e4:	b590      	push	{r4, r7, lr}
 80004e6:	b087      	sub	sp, #28
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
 80004ec:	6039      	str	r1, [r7, #0]
    const bool __neg = __val < 0;
 80004ee:	683b      	ldr	r3, [r7, #0]
 80004f0:	0fdb      	lsrs	r3, r3, #31
 80004f2:	75fb      	strb	r3, [r7, #23]
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
 80004f4:	7dfb      	ldrb	r3, [r7, #23]
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d002      	beq.n	8000500 <_ZNSt7__cxx119to_stringEi+0x1c>
 80004fa:	683b      	ldr	r3, [r7, #0]
 80004fc:	425b      	negs	r3, r3
 80004fe:	e000      	b.n	8000502 <_ZNSt7__cxx119to_stringEi+0x1e>
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	613b      	str	r3, [r7, #16]
    const auto __len = __detail::__to_chars_len(__uval);
 8000504:	210a      	movs	r1, #10
 8000506:	6938      	ldr	r0, [r7, #16]
 8000508:	f000 fa8d 	bl	8000a26 <_ZNSt8__detail14__to_chars_lenIjEEjT_i>
 800050c:	60f8      	str	r0, [r7, #12]
    string __str(__neg + __len, '-');
 800050e:	7dfa      	ldrb	r2, [r7, #23]
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	18d4      	adds	r4, r2, r3
 8000514:	f107 0308 	add.w	r3, r7, #8
 8000518:	4618      	mov	r0, r3
 800051a:	f00a fe81 	bl	800b220 <_ZNSaIcEC1Ev>
 800051e:	f107 0308 	add.w	r3, r7, #8
 8000522:	222d      	movs	r2, #45	; 0x2d
 8000524:	4621      	mov	r1, r4
 8000526:	6878      	ldr	r0, [r7, #4]
 8000528:	f00a fee6 	bl	800b2f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EjcRKS3_>
 800052c:	f107 0308 	add.w	r3, r7, #8
 8000530:	4618      	mov	r0, r3
 8000532:	f00a fe76 	bl	800b222 <_ZNSaIcED1Ev>
    __detail::__to_chars_10_impl(&__str[__neg], __len, __uval);
 8000536:	7dfb      	ldrb	r3, [r7, #23]
 8000538:	4619      	mov	r1, r3
 800053a:	6878      	ldr	r0, [r7, #4]
 800053c:	f00a feed 	bl	800b31a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8000540:	4603      	mov	r3, r0
 8000542:	693a      	ldr	r2, [r7, #16]
 8000544:	68f9      	ldr	r1, [r7, #12]
 8000546:	4618      	mov	r0, r3
 8000548:	f000 faac 	bl	8000aa4 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_>
    return __str;
 800054c:	bf00      	nop
  }
 800054e:	6878      	ldr	r0, [r7, #4]
 8000550:	371c      	adds	r7, #28
 8000552:	46bd      	mov	sp, r7
 8000554:	bd90      	pop	{r4, r7, pc}
	...

08000558 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055c:	f000 fcd0 	bl	8000f00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000560:	f000 f844 	bl	80005ec <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000564:	f000 f8b8 	bl	80006d8 <_ZL12MX_GPIO_Initv>
  /* USER CODE BEGIN 2 */
  MX_SPI1_Init();
 8000568:	f000 f906 	bl	8000778 <_ZL12MX_SPI1_Initv>
  MX_USB_DEVICE_Init();
 800056c:	f00a f93e 	bl	800a7ec <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000570:	f007 fbc0 	bl	8007cf4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000574:	4a11      	ldr	r2, [pc, #68]	; (80005bc <main+0x64>)
 8000576:	2100      	movs	r1, #0
 8000578:	4811      	ldr	r0, [pc, #68]	; (80005c0 <main+0x68>)
 800057a:	f007 fc05 	bl	8007d88 <osThreadNew>
 800057e:	4603      	mov	r3, r0
 8000580:	4a10      	ldr	r2, [pc, #64]	; (80005c4 <main+0x6c>)
 8000582:	6013      	str	r3, [r2, #0]

  /* creation of ledtoggle */
  ledtoggleHandle = osThreadNew(ledstatustoggle, NULL, &ledtoggle_attributes);
 8000584:	4a10      	ldr	r2, [pc, #64]	; (80005c8 <main+0x70>)
 8000586:	2100      	movs	r1, #0
 8000588:	4810      	ldr	r0, [pc, #64]	; (80005cc <main+0x74>)
 800058a:	f007 fbfd 	bl	8007d88 <osThreadNew>
 800058e:	4603      	mov	r3, r0
 8000590:	4a0f      	ldr	r2, [pc, #60]	; (80005d0 <main+0x78>)
 8000592:	6013      	str	r3, [r2, #0]

  /* creation of usbcomunication */
  usbcomunicationHandle = osThreadNew(usbcomunicationserial, NULL, &usbcomunication_attributes);
 8000594:	4a0f      	ldr	r2, [pc, #60]	; (80005d4 <main+0x7c>)
 8000596:	2100      	movs	r1, #0
 8000598:	480f      	ldr	r0, [pc, #60]	; (80005d8 <main+0x80>)
 800059a:	f007 fbf5 	bl	8007d88 <osThreadNew>
 800059e:	4603      	mov	r3, r0
 80005a0:	4a0e      	ldr	r2, [pc, #56]	; (80005dc <main+0x84>)
 80005a2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  gyroreadingsHandle = osThreadNew(gyroreadings, NULL, &gyroreadings_attributes);
 80005a4:	4a0e      	ldr	r2, [pc, #56]	; (80005e0 <main+0x88>)
 80005a6:	2100      	movs	r1, #0
 80005a8:	480e      	ldr	r0, [pc, #56]	; (80005e4 <main+0x8c>)
 80005aa:	f007 fbed 	bl	8007d88 <osThreadNew>
 80005ae:	4603      	mov	r3, r0
 80005b0:	4a0d      	ldr	r2, [pc, #52]	; (80005e8 <main+0x90>)
 80005b2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005b4:	f007 fbc2 	bl	8007d3c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005b8:	e7fe      	b.n	80005b8 <main+0x60>
 80005ba:	bf00      	nop
 80005bc:	0800b8c4 	.word	0x0800b8c4
 80005c0:	080009b1 	.word	0x080009b1
 80005c4:	20000180 	.word	0x20000180
 80005c8:	0800b8e8 	.word	0x0800b8e8
 80005cc:	080009c5 	.word	0x080009c5
 80005d0:	20000184 	.word	0x20000184
 80005d4:	0800b90c 	.word	0x0800b90c
 80005d8:	080009e5 	.word	0x080009e5
 80005dc:	20000188 	.word	0x20000188
 80005e0:	0800b930 	.word	0x0800b930
 80005e4:	080007f1 	.word	0x080007f1
 80005e8:	200001e4 	.word	0x200001e4

080005ec <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b094      	sub	sp, #80	; 0x50
 80005f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f2:	f107 0320 	add.w	r3, r7, #32
 80005f6:	2230      	movs	r2, #48	; 0x30
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f00a ff42 	bl	800b484 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000600:	f107 030c 	add.w	r3, r7, #12
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000610:	2300      	movs	r3, #0
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	4b2e      	ldr	r3, [pc, #184]	; (80006d0 <_Z18SystemClock_Configv+0xe4>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000618:	4a2d      	ldr	r2, [pc, #180]	; (80006d0 <_Z18SystemClock_Configv+0xe4>)
 800061a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800061e:	6413      	str	r3, [r2, #64]	; 0x40
 8000620:	4b2b      	ldr	r3, [pc, #172]	; (80006d0 <_Z18SystemClock_Configv+0xe4>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000628:	60bb      	str	r3, [r7, #8]
 800062a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800062c:	2300      	movs	r3, #0
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	4b28      	ldr	r3, [pc, #160]	; (80006d4 <_Z18SystemClock_Configv+0xe8>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a27      	ldr	r2, [pc, #156]	; (80006d4 <_Z18SystemClock_Configv+0xe8>)
 8000636:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800063a:	6013      	str	r3, [r2, #0]
 800063c:	4b25      	ldr	r3, [pc, #148]	; (80006d4 <_Z18SystemClock_Configv+0xe8>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000648:	2303      	movs	r3, #3
 800064a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800064c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000650:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000652:	2301      	movs	r3, #1
 8000654:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000656:	2310      	movs	r3, #16
 8000658:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065a:	2302      	movs	r3, #2
 800065c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800065e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000662:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000664:	2304      	movs	r3, #4
 8000666:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000668:	2348      	movs	r3, #72	; 0x48
 800066a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800066c:	2302      	movs	r3, #2
 800066e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000670:	2303      	movs	r3, #3
 8000672:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000674:	f107 0320 	add.w	r3, r7, #32
 8000678:	4618      	mov	r0, r3
 800067a:	f002 f9d5 	bl	8002a28 <HAL_RCC_OscConfig>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	bf14      	ite	ne
 8000684:	2301      	movne	r3, #1
 8000686:	2300      	moveq	r3, #0
 8000688:	b2db      	uxtb	r3, r3
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 800068e:	f000 f9c5 	bl	8000a1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000692:	230f      	movs	r3, #15
 8000694:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000696:	2300      	movs	r3, #0
 8000698:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069a:	2300      	movs	r3, #0
 800069c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800069e:	2300      	movs	r3, #0
 80006a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a2:	2300      	movs	r3, #0
 80006a4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006a6:	f107 030c 	add.w	r3, r7, #12
 80006aa:	2100      	movs	r1, #0
 80006ac:	4618      	mov	r0, r3
 80006ae:	f002 fc33 	bl	8002f18 <HAL_RCC_ClockConfig>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	bf14      	ite	ne
 80006b8:	2301      	movne	r3, #1
 80006ba:	2300      	moveq	r3, #0
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 80006c2:	f000 f9ab 	bl	8000a1c <Error_Handler>
  }
}
 80006c6:	bf00      	nop
 80006c8:	3750      	adds	r7, #80	; 0x50
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40023800 	.word	0x40023800
 80006d4:	40007000 	.word	0x40007000

080006d8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b088      	sub	sp, #32
 80006dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006de:	f107 030c 	add.w	r3, r7, #12
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	605a      	str	r2, [r3, #4]
 80006e8:	609a      	str	r2, [r3, #8]
 80006ea:	60da      	str	r2, [r3, #12]
 80006ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	60bb      	str	r3, [r7, #8]
 80006f2:	4b1f      	ldr	r3, [pc, #124]	; (8000770 <_ZL12MX_GPIO_Initv+0x98>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	4a1e      	ldr	r2, [pc, #120]	; (8000770 <_ZL12MX_GPIO_Initv+0x98>)
 80006f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006fc:	6313      	str	r3, [r2, #48]	; 0x30
 80006fe:	4b1c      	ldr	r3, [pc, #112]	; (8000770 <_ZL12MX_GPIO_Initv+0x98>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000706:	60bb      	str	r3, [r7, #8]
 8000708:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	4b18      	ldr	r3, [pc, #96]	; (8000770 <_ZL12MX_GPIO_Initv+0x98>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	4a17      	ldr	r2, [pc, #92]	; (8000770 <_ZL12MX_GPIO_Initv+0x98>)
 8000714:	f043 0301 	orr.w	r3, r3, #1
 8000718:	6313      	str	r3, [r2, #48]	; 0x30
 800071a:	4b15      	ldr	r3, [pc, #84]	; (8000770 <_ZL12MX_GPIO_Initv+0x98>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	f003 0301 	and.w	r3, r3, #1
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	603b      	str	r3, [r7, #0]
 800072a:	4b11      	ldr	r3, [pc, #68]	; (8000770 <_ZL12MX_GPIO_Initv+0x98>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a10      	ldr	r2, [pc, #64]	; (8000770 <_ZL12MX_GPIO_Initv+0x98>)
 8000730:	f043 0302 	orr.w	r3, r3, #2
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <_ZL12MX_GPIO_Initv+0x98>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f003 0302 	and.w	r3, r3, #2
 800073e:	603b      	str	r3, [r7, #0]
 8000740:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 8000742:	2200      	movs	r2, #0
 8000744:	2120      	movs	r1, #32
 8000746:	480b      	ldr	r0, [pc, #44]	; (8000774 <_ZL12MX_GPIO_Initv+0x9c>)
 8000748:	f000 febe 	bl	80014c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : led_Pin */
  GPIO_InitStruct.Pin = led_Pin;
 800074c:	2320      	movs	r3, #32
 800074e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000750:	2301      	movs	r3, #1
 8000752:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	2300      	movs	r3, #0
 8000756:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000758:	2300      	movs	r3, #0
 800075a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 800075c:	f107 030c 	add.w	r3, r7, #12
 8000760:	4619      	mov	r1, r3
 8000762:	4804      	ldr	r0, [pc, #16]	; (8000774 <_ZL12MX_GPIO_Initv+0x9c>)
 8000764:	f000 fd14 	bl	8001190 <HAL_GPIO_Init>

}
 8000768:	bf00      	nop
 800076a:	3720      	adds	r7, #32
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	40023800 	.word	0x40023800
 8000774:	40020400 	.word	0x40020400

08000778 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800077c:	4b1a      	ldr	r3, [pc, #104]	; (80007e8 <_ZL12MX_SPI1_Initv+0x70>)
 800077e:	4a1b      	ldr	r2, [pc, #108]	; (80007ec <_ZL12MX_SPI1_Initv+0x74>)
 8000780:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000782:	4b19      	ldr	r3, [pc, #100]	; (80007e8 <_ZL12MX_SPI1_Initv+0x70>)
 8000784:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000788:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800078a:	4b17      	ldr	r3, [pc, #92]	; (80007e8 <_ZL12MX_SPI1_Initv+0x70>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000790:	4b15      	ldr	r3, [pc, #84]	; (80007e8 <_ZL12MX_SPI1_Initv+0x70>)
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000796:	4b14      	ldr	r3, [pc, #80]	; (80007e8 <_ZL12MX_SPI1_Initv+0x70>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800079c:	4b12      	ldr	r3, [pc, #72]	; (80007e8 <_ZL12MX_SPI1_Initv+0x70>)
 800079e:	2200      	movs	r2, #0
 80007a0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007a2:	4b11      	ldr	r3, [pc, #68]	; (80007e8 <_ZL12MX_SPI1_Initv+0x70>)
 80007a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007a8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007aa:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <_ZL12MX_SPI1_Initv+0x70>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007b0:	4b0d      	ldr	r3, [pc, #52]	; (80007e8 <_ZL12MX_SPI1_Initv+0x70>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007b6:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <_ZL12MX_SPI1_Initv+0x70>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007bc:	4b0a      	ldr	r3, [pc, #40]	; (80007e8 <_ZL12MX_SPI1_Initv+0x70>)
 80007be:	2200      	movs	r2, #0
 80007c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007c2:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <_ZL12MX_SPI1_Initv+0x70>)
 80007c4:	220a      	movs	r2, #10
 80007c6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007c8:	4807      	ldr	r0, [pc, #28]	; (80007e8 <_ZL12MX_SPI1_Initv+0x70>)
 80007ca:	f002 fde3 	bl	8003394 <HAL_SPI_Init>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	bf14      	ite	ne
 80007d4:	2301      	movne	r3, #1
 80007d6:	2300      	moveq	r3, #0
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 80007de:	f000 f91d 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	2000018c 	.word	0x2000018c
 80007ec:	40013000 	.word	0x40013000

080007f0 <_Z12gyroreadingsPv>:

void gyroreadings(void *argument){
 80007f0:	b590      	push	{r4, r7, lr}
 80007f2:	b0a9      	sub	sp, #164	; 0xa4
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
	// gyro setup
	char received[6];
	static const uint8_t ACCEL_XOUT_H       = 0x3B;
	uint8_t addr = ACCEL_XOUT_H;
 80007f8:	233b      	movs	r3, #59	; 0x3b
 80007fa:	72fb      	strb	r3, [r7, #11]
	for(;;){
		HAL_SPI_Transmit(&hspi1, &addr, 1, 10);
 80007fc:	f107 010b 	add.w	r1, r7, #11
 8000800:	230a      	movs	r3, #10
 8000802:	2201      	movs	r2, #1
 8000804:	4865      	ldr	r0, [pc, #404]	; (800099c <_Z12gyroreadingsPv+0x1ac>)
 8000806:	f002 fe4e 	bl	80034a6 <HAL_SPI_Transmit>
		HAL_StatusTypeDef ret = HAL_SPI_Receive(&hspi1, (uint8_t*)received, 6, 3000);
 800080a:	f107 010c 	add.w	r1, r7, #12
 800080e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000812:	2206      	movs	r2, #6
 8000814:	4861      	ldr	r0, [pc, #388]	; (800099c <_Z12gyroreadingsPv+0x1ac>)
 8000816:	f002 ff82 	bl	800371e <HAL_SPI_Receive>
 800081a:	4603      	mov	r3, r0
 800081c:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b

		if(ret == HAL_TIMEOUT){
 8000820:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8000824:	2b03      	cmp	r3, #3
 8000826:	d120      	bne.n	800086a <_Z12gyroreadingsPv+0x7a>
			Vesp::getprinter().log("timeout\n");
 8000828:	f000 f9b4 	bl	8000b94 <_ZN4Vesp10getprinterEv>
 800082c:	4604      	mov	r4, r0
 800082e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000832:	4618      	mov	r0, r3
 8000834:	f00a fcf4 	bl	800b220 <_ZNSaIcEC1Ev>
 8000838:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	4957      	ldr	r1, [pc, #348]	; (80009a0 <_Z12gyroreadingsPv+0x1b0>)
 8000842:	4618      	mov	r0, r3
 8000844:	f00a fd92 	bl	800b36c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8000848:	f107 0314 	add.w	r3, r7, #20
 800084c:	4619      	mov	r1, r3
 800084e:	4620      	mov	r0, r4
 8000850:	f000 f98a 	bl	8000b68 <_ZN7printer3logENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8000854:	f107 0314 	add.w	r3, r7, #20
 8000858:	4618      	mov	r0, r3
 800085a:	f00a fd56 	bl	800b30a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800085e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000862:	4618      	mov	r0, r3
 8000864:	f00a fcdd 	bl	800b222 <_ZNSaIcED1Ev>
 8000868:	e092      	b.n	8000990 <_Z12gyroreadingsPv+0x1a0>

		}else if(ret == HAL_OK){
 800086a:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 800086e:	2b00      	cmp	r3, #0
 8000870:	d16e      	bne.n	8000950 <_Z12gyroreadingsPv+0x160>
			for(int i = 0; i < 6; i++){
 8000872:	2300      	movs	r3, #0
 8000874:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000878:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800087c:	2b05      	cmp	r3, #5
 800087e:	dc46      	bgt.n	800090e <_Z12gyroreadingsPv+0x11e>

				Vesp::getprinter().log(std::to_string((int)received[i]));
 8000880:	f000 f988 	bl	8000b94 <_ZN4Vesp10getprinterEv>
 8000884:	4604      	mov	r4, r0
 8000886:	f107 020c 	add.w	r2, r7, #12
 800088a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800088e:	4413      	add	r3, r2
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	461a      	mov	r2, r3
 8000894:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000898:	4611      	mov	r1, r2
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff fe22 	bl	80004e4 <_ZNSt7__cxx119to_stringEi>
 80008a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008a4:	4619      	mov	r1, r3
 80008a6:	4620      	mov	r0, r4
 80008a8:	f000 f95e 	bl	8000b68 <_ZN7printer3logENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80008ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008b0:	4618      	mov	r0, r3
 80008b2:	f00a fd2a 	bl	800b30a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				if(i % 2){
 80008b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d01f      	beq.n	8000902 <_Z12gyroreadingsPv+0x112>
					Vesp::getprinter().log(" ");
 80008c2:	f000 f967 	bl	8000b94 <_ZN4Vesp10getprinterEv>
 80008c6:	4604      	mov	r4, r0
 80008c8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80008cc:	4618      	mov	r0, r3
 80008ce:	f00a fca7 	bl	800b220 <_ZNSaIcEC1Ev>
 80008d2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80008d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80008da:	4932      	ldr	r1, [pc, #200]	; (80009a4 <_Z12gyroreadingsPv+0x1b4>)
 80008dc:	4618      	mov	r0, r3
 80008de:	f00a fd45 	bl	800b36c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80008e2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80008e6:	4619      	mov	r1, r3
 80008e8:	4620      	mov	r0, r4
 80008ea:	f000 f93d 	bl	8000b68 <_ZN7printer3logENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80008ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80008f2:	4618      	mov	r0, r3
 80008f4:	f00a fd09 	bl	800b30a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80008f8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80008fc:	4618      	mov	r0, r3
 80008fe:	f00a fc90 	bl	800b222 <_ZNSaIcED1Ev>
			for(int i = 0; i < 6; i++){
 8000902:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000906:	3301      	adds	r3, #1
 8000908:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800090c:	e7b4      	b.n	8000878 <_Z12gyroreadingsPv+0x88>
				}
			}
			Vesp::getprinter().log("\n");
 800090e:	f000 f941 	bl	8000b94 <_ZN4Vesp10getprinterEv>
 8000912:	4604      	mov	r4, r0
 8000914:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000918:	4618      	mov	r0, r3
 800091a:	f00a fc81 	bl	800b220 <_ZNSaIcEC1Ev>
 800091e:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8000922:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000926:	4920      	ldr	r1, [pc, #128]	; (80009a8 <_Z12gyroreadingsPv+0x1b8>)
 8000928:	4618      	mov	r0, r3
 800092a:	f00a fd1f 	bl	800b36c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800092e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000932:	4619      	mov	r1, r3
 8000934:	4620      	mov	r0, r4
 8000936:	f000 f917 	bl	8000b68 <_ZN7printer3logENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800093a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800093e:	4618      	mov	r0, r3
 8000940:	f00a fce3 	bl	800b30a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000944:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000948:	4618      	mov	r0, r3
 800094a:	f00a fc6a 	bl	800b222 <_ZNSaIcED1Ev>
 800094e:	e01f      	b.n	8000990 <_Z12gyroreadingsPv+0x1a0>

		}else{
			Vesp::getprinter().log("No data or error\n");
 8000950:	f000 f920 	bl	8000b94 <_ZN4Vesp10getprinterEv>
 8000954:	4604      	mov	r4, r0
 8000956:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800095a:	4618      	mov	r0, r3
 800095c:	f00a fc60 	bl	800b220 <_ZNSaIcEC1Ev>
 8000960:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8000964:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000968:	4910      	ldr	r1, [pc, #64]	; (80009ac <_Z12gyroreadingsPv+0x1bc>)
 800096a:	4618      	mov	r0, r3
 800096c:	f00a fcfe 	bl	800b36c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8000970:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000974:	4619      	mov	r1, r3
 8000976:	4620      	mov	r0, r4
 8000978:	f000 f8f6 	bl	8000b68 <_ZN7printer3logENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800097c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000980:	4618      	mov	r0, r3
 8000982:	f00a fcc2 	bl	800b30a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000986:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800098a:	4618      	mov	r0, r3
 800098c:	f00a fc49 	bl	800b222 <_ZNSaIcED1Ev>

		}

		osDelay(1000);
 8000990:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000994:	f007 fa8a 	bl	8007eac <osDelay>
	}
 8000998:	e730      	b.n	80007fc <_Z12gyroreadingsPv+0xc>
 800099a:	bf00      	nop
 800099c:	2000018c 	.word	0x2000018c
 80009a0:	0800b848 	.word	0x0800b848
 80009a4:	0800b854 	.word	0x0800b854
 80009a8:	0800b858 	.word	0x0800b858
 80009ac:	0800b85c 	.word	0x0800b85c

080009b0 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  //MX_USB_DEVICE_Init();
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 80009b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009bc:	f007 fa76 	bl	8007eac <osDelay>
 80009c0:	e7fa      	b.n	80009b8 <_Z16StartDefaultTaskPv+0x8>
	...

080009c4 <_Z15ledstatustogglePv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ledstatustoggle */
void ledstatustoggle(void *argument)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ledstatustoggle */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(led_GPIO_Port, led_Pin);
 80009cc:	2120      	movs	r1, #32
 80009ce:	4804      	ldr	r0, [pc, #16]	; (80009e0 <_Z15ledstatustogglePv+0x1c>)
 80009d0:	f000 fd93 	bl	80014fa <HAL_GPIO_TogglePin>
	  osDelay(1000);
 80009d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009d8:	f007 fa68 	bl	8007eac <osDelay>
	  HAL_GPIO_TogglePin(led_GPIO_Port, led_Pin);
 80009dc:	e7f6      	b.n	80009cc <_Z15ledstatustogglePv+0x8>
 80009de:	bf00      	nop
 80009e0:	40020400 	.word	0x40020400

080009e4 <_Z21usbcomunicationserialPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_usbcomunicationserial */
void usbcomunicationserial(void *argument)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  for(;;)
  {

	//Vesp::getprinter().log("Ciao come stai ?\n");
	//Vesp::getprinter().log(tosend);
	osDelay(2000);
 80009ec:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80009f0:	f007 fa5c 	bl	8007eac <osDelay>
 80009f4:	e7fa      	b.n	80009ec <_Z21usbcomunicationserialPv+0x8>
	...

080009f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a04      	ldr	r2, [pc, #16]	; (8000a18 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d101      	bne.n	8000a0e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a0a:	f000 fa9b 	bl	8000f44 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40001000 	.word	0x40001000

08000a1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a20:	b672      	cpsid	i
}
 8000a22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <Error_Handler+0x8>

08000a26 <_ZNSt8__detail14__to_chars_lenIjEEjT_i>:
namespace __detail
{
  // Generic implementation for arbitrary bases.
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR unsigned
    __to_chars_len(_Tp __value, int __base = 10) noexcept
 8000a26:	b480      	push	{r7}
 8000a28:	b087      	sub	sp, #28
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	6078      	str	r0, [r7, #4]
 8000a2e:	6039      	str	r1, [r7, #0]
    {
      static_assert(is_integral<_Tp>::value, "implementation bug");
      static_assert(is_unsigned<_Tp>::value, "implementation bug");

      unsigned __n = 1;
 8000a30:	2301      	movs	r3, #1
 8000a32:	617b      	str	r3, [r7, #20]
      const unsigned __b2 = __base  * __base;
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	fb03 f303 	mul.w	r3, r3, r3
 8000a3a:	613b      	str	r3, [r7, #16]
      const unsigned __b3 = __b2 * __base;
 8000a3c:	683a      	ldr	r2, [r7, #0]
 8000a3e:	693b      	ldr	r3, [r7, #16]
 8000a40:	fb02 f303 	mul.w	r3, r2, r3
 8000a44:	60fb      	str	r3, [r7, #12]
      const unsigned long __b4 = __b3 * __base;
 8000a46:	683a      	ldr	r2, [r7, #0]
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	fb02 f303 	mul.w	r3, r2, r3
 8000a4e:	60bb      	str	r3, [r7, #8]
      for (;;)
	{
	  if (__value < (unsigned)__base) return __n;
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	687a      	ldr	r2, [r7, #4]
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d201      	bcs.n	8000a5c <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x36>
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	e01d      	b.n	8000a98 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  if (__value < __b2) return __n + 1;
 8000a5c:	687a      	ldr	r2, [r7, #4]
 8000a5e:	693b      	ldr	r3, [r7, #16]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	d202      	bcs.n	8000a6a <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x44>
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	3301      	adds	r3, #1
 8000a68:	e016      	b.n	8000a98 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  if (__value < __b3) return __n + 2;
 8000a6a:	687a      	ldr	r2, [r7, #4]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	429a      	cmp	r2, r3
 8000a70:	d202      	bcs.n	8000a78 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x52>
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	3302      	adds	r3, #2
 8000a76:	e00f      	b.n	8000a98 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  if (__value < __b4) return __n + 3;
 8000a78:	687a      	ldr	r2, [r7, #4]
 8000a7a:	68bb      	ldr	r3, [r7, #8]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	d202      	bcs.n	8000a86 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x60>
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	3303      	adds	r3, #3
 8000a84:	e008      	b.n	8000a98 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  __value /= __b4;
 8000a86:	687a      	ldr	r2, [r7, #4]
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a8e:	607b      	str	r3, [r7, #4]
	  __n += 4;
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	3304      	adds	r3, #4
 8000a94:	617b      	str	r3, [r7, #20]
	  if (__value < (unsigned)__base) return __n;
 8000a96:	e7db      	b.n	8000a50 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x2a>
	}
    }
 8000a98:	4618      	mov	r0, r3
 8000a9a:	371c      	adds	r7, #28
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr

08000aa4 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_>:
  // Write an unsigned integer value to the range [first,first+len).
  // The caller is required to provide a buffer of exactly the right size
  // (which can be determined by the __to_chars_len function).
  template<typename _Tp>
    void
    __to_chars_10_impl(char* __first, unsigned __len, _Tp __val) noexcept
 8000aa4:	b480      	push	{r7}
 8000aa6:	b089      	sub	sp, #36	; 0x24
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	60f8      	str	r0, [r7, #12]
 8000aac:	60b9      	str	r1, [r7, #8]
 8000aae:	607a      	str	r2, [r7, #4]
	"0001020304050607080910111213141516171819"
	"2021222324252627282930313233343536373839"
	"4041424344454647484950515253545556575859"
	"6061626364656667686970717273747576777879"
	"8081828384858687888990919293949596979899";
      unsigned __pos = __len - 1;
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	3b01      	subs	r3, #1
 8000ab4:	61fb      	str	r3, [r7, #28]
      while (__val >= 100)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2b63      	cmp	r3, #99	; 0x63
 8000aba:	d925      	bls.n	8000b08 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x64>
	{
	  auto const __num = (__val % 100) * 2;
 8000abc:	687a      	ldr	r2, [r7, #4]
 8000abe:	4b22      	ldr	r3, [pc, #136]	; (8000b48 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa4>)
 8000ac0:	fba3 1302 	umull	r1, r3, r3, r2
 8000ac4:	095b      	lsrs	r3, r3, #5
 8000ac6:	2164      	movs	r1, #100	; 0x64
 8000ac8:	fb01 f303 	mul.w	r3, r1, r3
 8000acc:	1ad3      	subs	r3, r2, r3
 8000ace:	005b      	lsls	r3, r3, #1
 8000ad0:	61bb      	str	r3, [r7, #24]
	  __val /= 100;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	4a1c      	ldr	r2, [pc, #112]	; (8000b48 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa4>)
 8000ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8000ada:	095b      	lsrs	r3, r3, #5
 8000adc:	607b      	str	r3, [r7, #4]
	  __first[__pos] = __digits[__num + 1];
 8000ade:	69bb      	ldr	r3, [r7, #24]
 8000ae0:	1c5a      	adds	r2, r3, #1
 8000ae2:	68f9      	ldr	r1, [r7, #12]
 8000ae4:	69fb      	ldr	r3, [r7, #28]
 8000ae6:	440b      	add	r3, r1
 8000ae8:	4918      	ldr	r1, [pc, #96]	; (8000b4c <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 8000aea:	5c8a      	ldrb	r2, [r1, r2]
 8000aec:	701a      	strb	r2, [r3, #0]
	  __first[__pos - 1] = __digits[__num];
 8000aee:	69fb      	ldr	r3, [r7, #28]
 8000af0:	3b01      	subs	r3, #1
 8000af2:	68fa      	ldr	r2, [r7, #12]
 8000af4:	4413      	add	r3, r2
 8000af6:	4915      	ldr	r1, [pc, #84]	; (8000b4c <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 8000af8:	69ba      	ldr	r2, [r7, #24]
 8000afa:	440a      	add	r2, r1
 8000afc:	7812      	ldrb	r2, [r2, #0]
 8000afe:	701a      	strb	r2, [r3, #0]
	  __pos -= 2;
 8000b00:	69fb      	ldr	r3, [r7, #28]
 8000b02:	3b02      	subs	r3, #2
 8000b04:	61fb      	str	r3, [r7, #28]
      while (__val >= 100)
 8000b06:	e7d6      	b.n	8000ab6 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x12>
	}
      if (__val >= 10)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2b09      	cmp	r3, #9
 8000b0c:	d910      	bls.n	8000b30 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x8c>
	{
	  auto const __num = __val * 2;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	005b      	lsls	r3, r3, #1
 8000b12:	617b      	str	r3, [r7, #20]
	  __first[1] = __digits[__num + 1];
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	1c5a      	adds	r2, r3, #1
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	490b      	ldr	r1, [pc, #44]	; (8000b4c <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 8000b1e:	5c8a      	ldrb	r2, [r1, r2]
 8000b20:	701a      	strb	r2, [r3, #0]
	  __first[0] = __digits[__num];
 8000b22:	4a0a      	ldr	r2, [pc, #40]	; (8000b4c <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	4413      	add	r3, r2
 8000b28:	781a      	ldrb	r2, [r3, #0]
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	701a      	strb	r2, [r3, #0]
	}
      else
	__first[0] = '0' + __val;
    }
 8000b2e:	e005      	b.n	8000b3c <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x98>
	__first[0] = '0' + __val;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	3330      	adds	r3, #48	; 0x30
 8000b36:	b2da      	uxtb	r2, r3
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	701a      	strb	r2, [r3, #0]
    }
 8000b3c:	bf00      	nop
 8000b3e:	3724      	adds	r7, #36	; 0x24
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	51eb851f 	.word	0x51eb851f
 8000b4c:	0800b954 	.word	0x0800b954

08000b50 <_ZN7printer13get_singletonEv>:
	printer() = default;
    printer(const printer &) = delete;
    printer& operator=(const printer &) = delete;

public:
	static printer *get_singleton(void){
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
		static printer *singleton;
		return singleton;
 8000b54:	4b03      	ldr	r3, [pc, #12]	; (8000b64 <_ZN7printer13get_singletonEv+0x14>)
 8000b56:	681b      	ldr	r3, [r3, #0]
	}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	200001e8 	.word	0x200001e8

08000b68 <_ZN7printer3logENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
 *      Author: giovannirasera
 */

#include "printer.h"

void printer::log(std::string toprint){
 8000b68:	b590      	push	{r4, r7, lr}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	6039      	str	r1, [r7, #0]
	CDC_Transmit_FS((uint8_t *)toprint.c_str(), toprint.length());
 8000b72:	6838      	ldr	r0, [r7, #0]
 8000b74:	f00a fbd4 	bl	800b320 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8000b78:	4604      	mov	r4, r0
 8000b7a:	6838      	ldr	r0, [r7, #0]
 8000b7c:	f00a fbcb 	bl	800b316 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8000b80:	4603      	mov	r3, r0
 8000b82:	b29b      	uxth	r3, r3
 8000b84:	4619      	mov	r1, r3
 8000b86:	4620      	mov	r0, r4
 8000b88:	f009 feee 	bl	800a968 <CDC_Transmit_FS>
}
 8000b8c:	bf00      	nop
 8000b8e:	370c      	adds	r7, #12
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd90      	pop	{r4, r7, pc}

08000b94 <_ZN4Vesp10getprinterEv>:

namespace Vesp{
	printer &getprinter(){
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
		return *printer::get_singleton();
 8000b98:	f7ff ffda 	bl	8000b50 <_ZN7printer13get_singletonEv>
 8000b9c:	4603      	mov	r3, r0
	}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	bd80      	pop	{r7, pc}
	...

08000ba4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	607b      	str	r3, [r7, #4]
 8000bae:	4b12      	ldr	r3, [pc, #72]	; (8000bf8 <HAL_MspInit+0x54>)
 8000bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb2:	4a11      	ldr	r2, [pc, #68]	; (8000bf8 <HAL_MspInit+0x54>)
 8000bb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bb8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bba:	4b0f      	ldr	r3, [pc, #60]	; (8000bf8 <HAL_MspInit+0x54>)
 8000bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bc2:	607b      	str	r3, [r7, #4]
 8000bc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	603b      	str	r3, [r7, #0]
 8000bca:	4b0b      	ldr	r3, [pc, #44]	; (8000bf8 <HAL_MspInit+0x54>)
 8000bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bce:	4a0a      	ldr	r2, [pc, #40]	; (8000bf8 <HAL_MspInit+0x54>)
 8000bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd6:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <HAL_MspInit+0x54>)
 8000bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bde:	603b      	str	r3, [r7, #0]
 8000be0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000be2:	2200      	movs	r2, #0
 8000be4:	210f      	movs	r1, #15
 8000be6:	f06f 0001 	mvn.w	r0, #1
 8000bea:	f000 faa7 	bl	800113c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40023800 	.word	0x40023800

08000bfc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08a      	sub	sp, #40	; 0x28
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a19      	ldr	r2, [pc, #100]	; (8000c80 <HAL_SPI_MspInit+0x84>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d12b      	bne.n	8000c76 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	4b18      	ldr	r3, [pc, #96]	; (8000c84 <HAL_SPI_MspInit+0x88>)
 8000c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c26:	4a17      	ldr	r2, [pc, #92]	; (8000c84 <HAL_SPI_MspInit+0x88>)
 8000c28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c2e:	4b15      	ldr	r3, [pc, #84]	; (8000c84 <HAL_SPI_MspInit+0x88>)
 8000c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c36:	613b      	str	r3, [r7, #16]
 8000c38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <HAL_SPI_MspInit+0x88>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	4a10      	ldr	r2, [pc, #64]	; (8000c84 <HAL_SPI_MspInit+0x88>)
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <HAL_SPI_MspInit+0x88>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000c56:	23e0      	movs	r3, #224	; 0xe0
 8000c58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c62:	2303      	movs	r3, #3
 8000c64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c66:	2305      	movs	r3, #5
 8000c68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6a:	f107 0314 	add.w	r3, r7, #20
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4805      	ldr	r0, [pc, #20]	; (8000c88 <HAL_SPI_MspInit+0x8c>)
 8000c72:	f000 fa8d 	bl	8001190 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c76:	bf00      	nop
 8000c78:	3728      	adds	r7, #40	; 0x28
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40013000 	.word	0x40013000
 8000c84:	40023800 	.word	0x40023800
 8000c88:	40020000 	.word	0x40020000

08000c8c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08e      	sub	sp, #56	; 0x38
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000c94:	2300      	movs	r3, #0
 8000c96:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	4b33      	ldr	r3, [pc, #204]	; (8000d70 <HAL_InitTick+0xe4>)
 8000ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca4:	4a32      	ldr	r2, [pc, #200]	; (8000d70 <HAL_InitTick+0xe4>)
 8000ca6:	f043 0310 	orr.w	r3, r3, #16
 8000caa:	6413      	str	r3, [r2, #64]	; 0x40
 8000cac:	4b30      	ldr	r3, [pc, #192]	; (8000d70 <HAL_InitTick+0xe4>)
 8000cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb0:	f003 0310 	and.w	r3, r3, #16
 8000cb4:	60fb      	str	r3, [r7, #12]
 8000cb6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cb8:	f107 0210 	add.w	r2, r7, #16
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	4611      	mov	r1, r2
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f002 fb34 	bl	8003330 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000cc8:	6a3b      	ldr	r3, [r7, #32]
 8000cca:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d103      	bne.n	8000cda <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000cd2:	f002 fb19 	bl	8003308 <HAL_RCC_GetPCLK1Freq>
 8000cd6:	6378      	str	r0, [r7, #52]	; 0x34
 8000cd8:	e004      	b.n	8000ce4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000cda:	f002 fb15 	bl	8003308 <HAL_RCC_GetPCLK1Freq>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	005b      	lsls	r3, r3, #1
 8000ce2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ce6:	4a23      	ldr	r2, [pc, #140]	; (8000d74 <HAL_InitTick+0xe8>)
 8000ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8000cec:	0c9b      	lsrs	r3, r3, #18
 8000cee:	3b01      	subs	r3, #1
 8000cf0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000cf2:	4b21      	ldr	r3, [pc, #132]	; (8000d78 <HAL_InitTick+0xec>)
 8000cf4:	4a21      	ldr	r2, [pc, #132]	; (8000d7c <HAL_InitTick+0xf0>)
 8000cf6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000cf8:	4b1f      	ldr	r3, [pc, #124]	; (8000d78 <HAL_InitTick+0xec>)
 8000cfa:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cfe:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d00:	4a1d      	ldr	r2, [pc, #116]	; (8000d78 <HAL_InitTick+0xec>)
 8000d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d04:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d06:	4b1c      	ldr	r3, [pc, #112]	; (8000d78 <HAL_InitTick+0xec>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d0c:	4b1a      	ldr	r3, [pc, #104]	; (8000d78 <HAL_InitTick+0xec>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d12:	4b19      	ldr	r3, [pc, #100]	; (8000d78 <HAL_InitTick+0xec>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000d18:	4817      	ldr	r0, [pc, #92]	; (8000d78 <HAL_InitTick+0xec>)
 8000d1a:	f003 f8e3 	bl	8003ee4 <HAL_TIM_Base_Init>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000d24:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d11b      	bne.n	8000d64 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000d2c:	4812      	ldr	r0, [pc, #72]	; (8000d78 <HAL_InitTick+0xec>)
 8000d2e:	f003 f933 	bl	8003f98 <HAL_TIM_Base_Start_IT>
 8000d32:	4603      	mov	r3, r0
 8000d34:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000d38:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d111      	bne.n	8000d64 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d40:	2036      	movs	r0, #54	; 0x36
 8000d42:	f000 fa17 	bl	8001174 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2b0f      	cmp	r3, #15
 8000d4a:	d808      	bhi.n	8000d5e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	6879      	ldr	r1, [r7, #4]
 8000d50:	2036      	movs	r0, #54	; 0x36
 8000d52:	f000 f9f3 	bl	800113c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d56:	4a0a      	ldr	r2, [pc, #40]	; (8000d80 <HAL_InitTick+0xf4>)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6013      	str	r3, [r2, #0]
 8000d5c:	e002      	b.n	8000d64 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000d64:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3738      	adds	r7, #56	; 0x38
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40023800 	.word	0x40023800
 8000d74:	431bde83 	.word	0x431bde83
 8000d78:	200001ec 	.word	0x200001ec
 8000d7c:	40001000 	.word	0x40001000
 8000d80:	20000004 	.word	0x20000004

08000d84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <NMI_Handler+0x4>

08000d8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d8e:	e7fe      	b.n	8000d8e <HardFault_Handler+0x4>

08000d90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <MemManage_Handler+0x4>

08000d96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d9a:	e7fe      	b.n	8000d9a <BusFault_Handler+0x4>

08000d9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da0:	e7fe      	b.n	8000da0 <UsageFault_Handler+0x4>

08000da2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000db4:	4802      	ldr	r0, [pc, #8]	; (8000dc0 <TIM6_DAC_IRQHandler+0x10>)
 8000db6:	f003 f95f 	bl	8004078 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	200001ec 	.word	0x200001ec

08000dc4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000dc8:	4802      	ldr	r0, [pc, #8]	; (8000dd4 <OTG_FS_IRQHandler+0x10>)
 8000dca:	f000 fd00 	bl	80017ce <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	2000612c 	.word	0x2000612c

08000dd8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
	return 1;
 8000ddc:	2301      	movs	r3, #1
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr

08000de8 <_kill>:

int _kill(int pid, int sig)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000df2:	f00a fafd 	bl	800b3f0 <__errno>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2216      	movs	r2, #22
 8000dfa:	601a      	str	r2, [r3, #0]
	return -1;
 8000dfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3708      	adds	r7, #8
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <_exit>:

void _exit (int status)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000e10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e14:	6878      	ldr	r0, [r7, #4]
 8000e16:	f7ff ffe7 	bl	8000de8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000e1a:	e7fe      	b.n	8000e1a <_exit+0x12>

08000e1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b086      	sub	sp, #24
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e24:	4a14      	ldr	r2, [pc, #80]	; (8000e78 <_sbrk+0x5c>)
 8000e26:	4b15      	ldr	r3, [pc, #84]	; (8000e7c <_sbrk+0x60>)
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e30:	4b13      	ldr	r3, [pc, #76]	; (8000e80 <_sbrk+0x64>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d102      	bne.n	8000e3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e38:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <_sbrk+0x64>)
 8000e3a:	4a12      	ldr	r2, [pc, #72]	; (8000e84 <_sbrk+0x68>)
 8000e3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e3e:	4b10      	ldr	r3, [pc, #64]	; (8000e80 <_sbrk+0x64>)
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4413      	add	r3, r2
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d207      	bcs.n	8000e5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e4c:	f00a fad0 	bl	800b3f0 <__errno>
 8000e50:	4603      	mov	r3, r0
 8000e52:	220c      	movs	r2, #12
 8000e54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e5a:	e009      	b.n	8000e70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e5c:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <_sbrk+0x64>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e62:	4b07      	ldr	r3, [pc, #28]	; (8000e80 <_sbrk+0x64>)
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4413      	add	r3, r2
 8000e6a:	4a05      	ldr	r2, [pc, #20]	; (8000e80 <_sbrk+0x64>)
 8000e6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e6e:	68fb      	ldr	r3, [r7, #12]
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3718      	adds	r7, #24
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20020000 	.word	0x20020000
 8000e7c:	00000400 	.word	0x00000400
 8000e80:	20000234 	.word	0x20000234
 8000e84:	20006870 	.word	0x20006870

08000e88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e8c:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <SystemInit+0x20>)
 8000e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e92:	4a05      	ldr	r2, [pc, #20]	; (8000ea8 <SystemInit+0x20>)
 8000e94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e9c:	bf00      	nop
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000eac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ee4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000eb0:	480d      	ldr	r0, [pc, #52]	; (8000ee8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000eb2:	490e      	ldr	r1, [pc, #56]	; (8000eec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000eb4:	4a0e      	ldr	r2, [pc, #56]	; (8000ef0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000eb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eb8:	e002      	b.n	8000ec0 <LoopCopyDataInit>

08000eba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ebc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ebe:	3304      	adds	r3, #4

08000ec0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ec0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ec2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ec4:	d3f9      	bcc.n	8000eba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ec6:	4a0b      	ldr	r2, [pc, #44]	; (8000ef4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ec8:	4c0b      	ldr	r4, [pc, #44]	; (8000ef8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000eca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ecc:	e001      	b.n	8000ed2 <LoopFillZerobss>

08000ece <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ece:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ed0:	3204      	adds	r2, #4

08000ed2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ed2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ed4:	d3fb      	bcc.n	8000ece <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ed6:	f7ff ffd7 	bl	8000e88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eda:	f00a fa8f 	bl	800b3fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ede:	f7ff fb3b 	bl	8000558 <main>
  bx  lr    
 8000ee2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ee4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ee8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eec:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 8000ef0:	0800baec 	.word	0x0800baec
  ldr r2, =_sbss
 8000ef4:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 8000ef8:	2000686c 	.word	0x2000686c

08000efc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000efc:	e7fe      	b.n	8000efc <ADC_IRQHandler>
	...

08000f00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f04:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <HAL_Init+0x40>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a0d      	ldr	r2, [pc, #52]	; (8000f40 <HAL_Init+0x40>)
 8000f0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f10:	4b0b      	ldr	r3, [pc, #44]	; (8000f40 <HAL_Init+0x40>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a0a      	ldr	r2, [pc, #40]	; (8000f40 <HAL_Init+0x40>)
 8000f16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f1c:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <HAL_Init+0x40>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a07      	ldr	r2, [pc, #28]	; (8000f40 <HAL_Init+0x40>)
 8000f22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f28:	2003      	movs	r0, #3
 8000f2a:	f000 f8fc 	bl	8001126 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f2e:	200f      	movs	r0, #15
 8000f30:	f7ff feac 	bl	8000c8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f34:	f7ff fe36 	bl	8000ba4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f38:	2300      	movs	r3, #0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40023c00 	.word	0x40023c00

08000f44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f48:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <HAL_IncTick+0x20>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <HAL_IncTick+0x24>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4413      	add	r3, r2
 8000f54:	4a04      	ldr	r2, [pc, #16]	; (8000f68 <HAL_IncTick+0x24>)
 8000f56:	6013      	str	r3, [r2, #0]
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	20000008 	.word	0x20000008
 8000f68:	20000238 	.word	0x20000238

08000f6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f70:	4b03      	ldr	r3, [pc, #12]	; (8000f80 <HAL_GetTick+0x14>)
 8000f72:	681b      	ldr	r3, [r3, #0]
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	20000238 	.word	0x20000238

08000f84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f8c:	f7ff ffee 	bl	8000f6c <HAL_GetTick>
 8000f90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f9c:	d005      	beq.n	8000faa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f9e:	4b0a      	ldr	r3, [pc, #40]	; (8000fc8 <HAL_Delay+0x44>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000faa:	bf00      	nop
 8000fac:	f7ff ffde 	bl	8000f6c <HAL_GetTick>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	68fa      	ldr	r2, [r7, #12]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d8f7      	bhi.n	8000fac <HAL_Delay+0x28>
  {
  }
}
 8000fbc:	bf00      	nop
 8000fbe:	bf00      	nop
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000008 	.word	0x20000008

08000fcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f003 0307 	and.w	r3, r3, #7
 8000fda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fdc:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <__NVIC_SetPriorityGrouping+0x44>)
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fe2:	68ba      	ldr	r2, [r7, #8]
 8000fe4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fe8:	4013      	ands	r3, r2
 8000fea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ff4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ff8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ffc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ffe:	4a04      	ldr	r2, [pc, #16]	; (8001010 <__NVIC_SetPriorityGrouping+0x44>)
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	60d3      	str	r3, [r2, #12]
}
 8001004:	bf00      	nop
 8001006:	3714      	adds	r7, #20
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001018:	4b04      	ldr	r3, [pc, #16]	; (800102c <__NVIC_GetPriorityGrouping+0x18>)
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	0a1b      	lsrs	r3, r3, #8
 800101e:	f003 0307 	and.w	r3, r3, #7
}
 8001022:	4618      	mov	r0, r3
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103e:	2b00      	cmp	r3, #0
 8001040:	db0b      	blt.n	800105a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	f003 021f 	and.w	r2, r3, #31
 8001048:	4907      	ldr	r1, [pc, #28]	; (8001068 <__NVIC_EnableIRQ+0x38>)
 800104a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104e:	095b      	lsrs	r3, r3, #5
 8001050:	2001      	movs	r0, #1
 8001052:	fa00 f202 	lsl.w	r2, r0, r2
 8001056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800105a:	bf00      	nop
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	e000e100 	.word	0xe000e100

0800106c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	6039      	str	r1, [r7, #0]
 8001076:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107c:	2b00      	cmp	r3, #0
 800107e:	db0a      	blt.n	8001096 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	b2da      	uxtb	r2, r3
 8001084:	490c      	ldr	r1, [pc, #48]	; (80010b8 <__NVIC_SetPriority+0x4c>)
 8001086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108a:	0112      	lsls	r2, r2, #4
 800108c:	b2d2      	uxtb	r2, r2
 800108e:	440b      	add	r3, r1
 8001090:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001094:	e00a      	b.n	80010ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	b2da      	uxtb	r2, r3
 800109a:	4908      	ldr	r1, [pc, #32]	; (80010bc <__NVIC_SetPriority+0x50>)
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	f003 030f 	and.w	r3, r3, #15
 80010a2:	3b04      	subs	r3, #4
 80010a4:	0112      	lsls	r2, r2, #4
 80010a6:	b2d2      	uxtb	r2, r2
 80010a8:	440b      	add	r3, r1
 80010aa:	761a      	strb	r2, [r3, #24]
}
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	e000e100 	.word	0xe000e100
 80010bc:	e000ed00 	.word	0xe000ed00

080010c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b089      	sub	sp, #36	; 0x24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	f003 0307 	and.w	r3, r3, #7
 80010d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	f1c3 0307 	rsb	r3, r3, #7
 80010da:	2b04      	cmp	r3, #4
 80010dc:	bf28      	it	cs
 80010de:	2304      	movcs	r3, #4
 80010e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	3304      	adds	r3, #4
 80010e6:	2b06      	cmp	r3, #6
 80010e8:	d902      	bls.n	80010f0 <NVIC_EncodePriority+0x30>
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	3b03      	subs	r3, #3
 80010ee:	e000      	b.n	80010f2 <NVIC_EncodePriority+0x32>
 80010f0:	2300      	movs	r3, #0
 80010f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	43da      	mvns	r2, r3
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	401a      	ands	r2, r3
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001108:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	fa01 f303 	lsl.w	r3, r1, r3
 8001112:	43d9      	mvns	r1, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001118:	4313      	orrs	r3, r2
         );
}
 800111a:	4618      	mov	r0, r3
 800111c:	3724      	adds	r7, #36	; 0x24
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr

08001126 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b082      	sub	sp, #8
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f7ff ff4c 	bl	8000fcc <__NVIC_SetPriorityGrouping>
}
 8001134:	bf00      	nop
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800113c:	b580      	push	{r7, lr}
 800113e:	b086      	sub	sp, #24
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	607a      	str	r2, [r7, #4]
 8001148:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800114a:	2300      	movs	r3, #0
 800114c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800114e:	f7ff ff61 	bl	8001014 <__NVIC_GetPriorityGrouping>
 8001152:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	68b9      	ldr	r1, [r7, #8]
 8001158:	6978      	ldr	r0, [r7, #20]
 800115a:	f7ff ffb1 	bl	80010c0 <NVIC_EncodePriority>
 800115e:	4602      	mov	r2, r0
 8001160:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001164:	4611      	mov	r1, r2
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff ff80 	bl	800106c <__NVIC_SetPriority>
}
 800116c:	bf00      	nop
 800116e:	3718      	adds	r7, #24
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800117e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff ff54 	bl	8001030 <__NVIC_EnableIRQ>
}
 8001188:	bf00      	nop
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001190:	b480      	push	{r7}
 8001192:	b089      	sub	sp, #36	; 0x24
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800119a:	2300      	movs	r3, #0
 800119c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800119e:	2300      	movs	r3, #0
 80011a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011a2:	2300      	movs	r3, #0
 80011a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011a6:	2300      	movs	r3, #0
 80011a8:	61fb      	str	r3, [r7, #28]
 80011aa:	e16b      	b.n	8001484 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011ac:	2201      	movs	r2, #1
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	697a      	ldr	r2, [r7, #20]
 80011bc:	4013      	ands	r3, r2
 80011be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	f040 815a 	bne.w	800147e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f003 0303 	and.w	r3, r3, #3
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d005      	beq.n	80011e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d130      	bne.n	8001244 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	2203      	movs	r2, #3
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	43db      	mvns	r3, r3
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	4013      	ands	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	68da      	ldr	r2, [r3, #12]
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	4313      	orrs	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001218:	2201      	movs	r2, #1
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	43db      	mvns	r3, r3
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	4013      	ands	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	091b      	lsrs	r3, r3, #4
 800122e:	f003 0201 	and.w	r2, r3, #1
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	4313      	orrs	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f003 0303 	and.w	r3, r3, #3
 800124c:	2b03      	cmp	r3, #3
 800124e:	d017      	beq.n	8001280 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	2203      	movs	r2, #3
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	43db      	mvns	r3, r3
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	4013      	ands	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	689a      	ldr	r2, [r3, #8]
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4313      	orrs	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f003 0303 	and.w	r3, r3, #3
 8001288:	2b02      	cmp	r3, #2
 800128a:	d123      	bne.n	80012d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	08da      	lsrs	r2, r3, #3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	3208      	adds	r2, #8
 8001294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001298:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	f003 0307 	and.w	r3, r3, #7
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	220f      	movs	r2, #15
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	43db      	mvns	r3, r3
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4013      	ands	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	691a      	ldr	r2, [r3, #16]
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	08da      	lsrs	r2, r3, #3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	3208      	adds	r2, #8
 80012ce:	69b9      	ldr	r1, [r7, #24]
 80012d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	2203      	movs	r2, #3
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	43db      	mvns	r3, r3
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	4013      	ands	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f003 0203 	and.w	r2, r3, #3
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4313      	orrs	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001310:	2b00      	cmp	r3, #0
 8001312:	f000 80b4 	beq.w	800147e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	4b60      	ldr	r3, [pc, #384]	; (800149c <HAL_GPIO_Init+0x30c>)
 800131c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131e:	4a5f      	ldr	r2, [pc, #380]	; (800149c <HAL_GPIO_Init+0x30c>)
 8001320:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001324:	6453      	str	r3, [r2, #68]	; 0x44
 8001326:	4b5d      	ldr	r3, [pc, #372]	; (800149c <HAL_GPIO_Init+0x30c>)
 8001328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001332:	4a5b      	ldr	r2, [pc, #364]	; (80014a0 <HAL_GPIO_Init+0x310>)
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	089b      	lsrs	r3, r3, #2
 8001338:	3302      	adds	r3, #2
 800133a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800133e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	f003 0303 	and.w	r3, r3, #3
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	220f      	movs	r2, #15
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	43db      	mvns	r3, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4013      	ands	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a52      	ldr	r2, [pc, #328]	; (80014a4 <HAL_GPIO_Init+0x314>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d02b      	beq.n	80013b6 <HAL_GPIO_Init+0x226>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a51      	ldr	r2, [pc, #324]	; (80014a8 <HAL_GPIO_Init+0x318>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d025      	beq.n	80013b2 <HAL_GPIO_Init+0x222>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a50      	ldr	r2, [pc, #320]	; (80014ac <HAL_GPIO_Init+0x31c>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d01f      	beq.n	80013ae <HAL_GPIO_Init+0x21e>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a4f      	ldr	r2, [pc, #316]	; (80014b0 <HAL_GPIO_Init+0x320>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d019      	beq.n	80013aa <HAL_GPIO_Init+0x21a>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a4e      	ldr	r2, [pc, #312]	; (80014b4 <HAL_GPIO_Init+0x324>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d013      	beq.n	80013a6 <HAL_GPIO_Init+0x216>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a4d      	ldr	r2, [pc, #308]	; (80014b8 <HAL_GPIO_Init+0x328>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d00d      	beq.n	80013a2 <HAL_GPIO_Init+0x212>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a4c      	ldr	r2, [pc, #304]	; (80014bc <HAL_GPIO_Init+0x32c>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d007      	beq.n	800139e <HAL_GPIO_Init+0x20e>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a4b      	ldr	r2, [pc, #300]	; (80014c0 <HAL_GPIO_Init+0x330>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d101      	bne.n	800139a <HAL_GPIO_Init+0x20a>
 8001396:	2307      	movs	r3, #7
 8001398:	e00e      	b.n	80013b8 <HAL_GPIO_Init+0x228>
 800139a:	2308      	movs	r3, #8
 800139c:	e00c      	b.n	80013b8 <HAL_GPIO_Init+0x228>
 800139e:	2306      	movs	r3, #6
 80013a0:	e00a      	b.n	80013b8 <HAL_GPIO_Init+0x228>
 80013a2:	2305      	movs	r3, #5
 80013a4:	e008      	b.n	80013b8 <HAL_GPIO_Init+0x228>
 80013a6:	2304      	movs	r3, #4
 80013a8:	e006      	b.n	80013b8 <HAL_GPIO_Init+0x228>
 80013aa:	2303      	movs	r3, #3
 80013ac:	e004      	b.n	80013b8 <HAL_GPIO_Init+0x228>
 80013ae:	2302      	movs	r3, #2
 80013b0:	e002      	b.n	80013b8 <HAL_GPIO_Init+0x228>
 80013b2:	2301      	movs	r3, #1
 80013b4:	e000      	b.n	80013b8 <HAL_GPIO_Init+0x228>
 80013b6:	2300      	movs	r3, #0
 80013b8:	69fa      	ldr	r2, [r7, #28]
 80013ba:	f002 0203 	and.w	r2, r2, #3
 80013be:	0092      	lsls	r2, r2, #2
 80013c0:	4093      	lsls	r3, r2
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013c8:	4935      	ldr	r1, [pc, #212]	; (80014a0 <HAL_GPIO_Init+0x310>)
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	089b      	lsrs	r3, r3, #2
 80013ce:	3302      	adds	r3, #2
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013d6:	4b3b      	ldr	r3, [pc, #236]	; (80014c4 <HAL_GPIO_Init+0x334>)
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	43db      	mvns	r3, r3
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	4013      	ands	r3, r2
 80013e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d003      	beq.n	80013fa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013fa:	4a32      	ldr	r2, [pc, #200]	; (80014c4 <HAL_GPIO_Init+0x334>)
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001400:	4b30      	ldr	r3, [pc, #192]	; (80014c4 <HAL_GPIO_Init+0x334>)
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	43db      	mvns	r3, r3
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	4013      	ands	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001418:	2b00      	cmp	r3, #0
 800141a:	d003      	beq.n	8001424 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	4313      	orrs	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001424:	4a27      	ldr	r2, [pc, #156]	; (80014c4 <HAL_GPIO_Init+0x334>)
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800142a:	4b26      	ldr	r3, [pc, #152]	; (80014c4 <HAL_GPIO_Init+0x334>)
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	43db      	mvns	r3, r3
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	4013      	ands	r3, r2
 8001438:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d003      	beq.n	800144e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001446:	69ba      	ldr	r2, [r7, #24]
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	4313      	orrs	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800144e:	4a1d      	ldr	r2, [pc, #116]	; (80014c4 <HAL_GPIO_Init+0x334>)
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001454:	4b1b      	ldr	r3, [pc, #108]	; (80014c4 <HAL_GPIO_Init+0x334>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	43db      	mvns	r3, r3
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	4013      	ands	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800146c:	2b00      	cmp	r3, #0
 800146e:	d003      	beq.n	8001478 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	4313      	orrs	r3, r2
 8001476:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001478:	4a12      	ldr	r2, [pc, #72]	; (80014c4 <HAL_GPIO_Init+0x334>)
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	3301      	adds	r3, #1
 8001482:	61fb      	str	r3, [r7, #28]
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	2b0f      	cmp	r3, #15
 8001488:	f67f ae90 	bls.w	80011ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800148c:	bf00      	nop
 800148e:	bf00      	nop
 8001490:	3724      	adds	r7, #36	; 0x24
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	40023800 	.word	0x40023800
 80014a0:	40013800 	.word	0x40013800
 80014a4:	40020000 	.word	0x40020000
 80014a8:	40020400 	.word	0x40020400
 80014ac:	40020800 	.word	0x40020800
 80014b0:	40020c00 	.word	0x40020c00
 80014b4:	40021000 	.word	0x40021000
 80014b8:	40021400 	.word	0x40021400
 80014bc:	40021800 	.word	0x40021800
 80014c0:	40021c00 	.word	0x40021c00
 80014c4:	40013c00 	.word	0x40013c00

080014c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	460b      	mov	r3, r1
 80014d2:	807b      	strh	r3, [r7, #2]
 80014d4:	4613      	mov	r3, r2
 80014d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014d8:	787b      	ldrb	r3, [r7, #1]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d003      	beq.n	80014e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014de:	887a      	ldrh	r2, [r7, #2]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014e4:	e003      	b.n	80014ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014e6:	887b      	ldrh	r3, [r7, #2]
 80014e8:	041a      	lsls	r2, r3, #16
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	619a      	str	r2, [r3, #24]
}
 80014ee:	bf00      	nop
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr

080014fa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014fa:	b480      	push	{r7}
 80014fc:	b085      	sub	sp, #20
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
 8001502:	460b      	mov	r3, r1
 8001504:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	695b      	ldr	r3, [r3, #20]
 800150a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800150c:	887a      	ldrh	r2, [r7, #2]
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	4013      	ands	r3, r2
 8001512:	041a      	lsls	r2, r3, #16
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	43d9      	mvns	r1, r3
 8001518:	887b      	ldrh	r3, [r7, #2]
 800151a:	400b      	ands	r3, r1
 800151c:	431a      	orrs	r2, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	619a      	str	r2, [r3, #24]
}
 8001522:	bf00      	nop
 8001524:	3714      	adds	r7, #20
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr

0800152e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800152e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001530:	b08f      	sub	sp, #60	; 0x3c
 8001532:	af0a      	add	r7, sp, #40	; 0x28
 8001534:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d101      	bne.n	8001540 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e10f      	b.n	8001760 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800154c:	b2db      	uxtb	r3, r3
 800154e:	2b00      	cmp	r3, #0
 8001550:	d106      	bne.n	8001560 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2200      	movs	r2, #0
 8001556:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f009 fb4c 	bl	800abf8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2203      	movs	r2, #3
 8001564:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800156c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001570:	2b00      	cmp	r3, #0
 8001572:	d102      	bne.n	800157a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2200      	movs	r2, #0
 8001578:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4618      	mov	r0, r3
 8001580:	f003 f873 	bl	800466a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	603b      	str	r3, [r7, #0]
 800158a:	687e      	ldr	r6, [r7, #4]
 800158c:	466d      	mov	r5, sp
 800158e:	f106 0410 	add.w	r4, r6, #16
 8001592:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001594:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001596:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001598:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800159a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800159e:	e885 0003 	stmia.w	r5, {r0, r1}
 80015a2:	1d33      	adds	r3, r6, #4
 80015a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015a6:	6838      	ldr	r0, [r7, #0]
 80015a8:	f002 ff4a 	bl	8004440 <USB_CoreInit>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d005      	beq.n	80015be <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2202      	movs	r2, #2
 80015b6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e0d0      	b.n	8001760 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2100      	movs	r1, #0
 80015c4:	4618      	mov	r0, r3
 80015c6:	f003 f861 	bl	800468c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015ca:	2300      	movs	r3, #0
 80015cc:	73fb      	strb	r3, [r7, #15]
 80015ce:	e04a      	b.n	8001666 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80015d0:	7bfa      	ldrb	r2, [r7, #15]
 80015d2:	6879      	ldr	r1, [r7, #4]
 80015d4:	4613      	mov	r3, r2
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	4413      	add	r3, r2
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	440b      	add	r3, r1
 80015de:	333d      	adds	r3, #61	; 0x3d
 80015e0:	2201      	movs	r2, #1
 80015e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80015e4:	7bfa      	ldrb	r2, [r7, #15]
 80015e6:	6879      	ldr	r1, [r7, #4]
 80015e8:	4613      	mov	r3, r2
 80015ea:	00db      	lsls	r3, r3, #3
 80015ec:	4413      	add	r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	440b      	add	r3, r1
 80015f2:	333c      	adds	r3, #60	; 0x3c
 80015f4:	7bfa      	ldrb	r2, [r7, #15]
 80015f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80015f8:	7bfa      	ldrb	r2, [r7, #15]
 80015fa:	7bfb      	ldrb	r3, [r7, #15]
 80015fc:	b298      	uxth	r0, r3
 80015fe:	6879      	ldr	r1, [r7, #4]
 8001600:	4613      	mov	r3, r2
 8001602:	00db      	lsls	r3, r3, #3
 8001604:	4413      	add	r3, r2
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	440b      	add	r3, r1
 800160a:	3344      	adds	r3, #68	; 0x44
 800160c:	4602      	mov	r2, r0
 800160e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001610:	7bfa      	ldrb	r2, [r7, #15]
 8001612:	6879      	ldr	r1, [r7, #4]
 8001614:	4613      	mov	r3, r2
 8001616:	00db      	lsls	r3, r3, #3
 8001618:	4413      	add	r3, r2
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	440b      	add	r3, r1
 800161e:	3340      	adds	r3, #64	; 0x40
 8001620:	2200      	movs	r2, #0
 8001622:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001624:	7bfa      	ldrb	r2, [r7, #15]
 8001626:	6879      	ldr	r1, [r7, #4]
 8001628:	4613      	mov	r3, r2
 800162a:	00db      	lsls	r3, r3, #3
 800162c:	4413      	add	r3, r2
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	440b      	add	r3, r1
 8001632:	3348      	adds	r3, #72	; 0x48
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001638:	7bfa      	ldrb	r2, [r7, #15]
 800163a:	6879      	ldr	r1, [r7, #4]
 800163c:	4613      	mov	r3, r2
 800163e:	00db      	lsls	r3, r3, #3
 8001640:	4413      	add	r3, r2
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	440b      	add	r3, r1
 8001646:	334c      	adds	r3, #76	; 0x4c
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800164c:	7bfa      	ldrb	r2, [r7, #15]
 800164e:	6879      	ldr	r1, [r7, #4]
 8001650:	4613      	mov	r3, r2
 8001652:	00db      	lsls	r3, r3, #3
 8001654:	4413      	add	r3, r2
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	440b      	add	r3, r1
 800165a:	3354      	adds	r3, #84	; 0x54
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001660:	7bfb      	ldrb	r3, [r7, #15]
 8001662:	3301      	adds	r3, #1
 8001664:	73fb      	strb	r3, [r7, #15]
 8001666:	7bfa      	ldrb	r2, [r7, #15]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	429a      	cmp	r2, r3
 800166e:	d3af      	bcc.n	80015d0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001670:	2300      	movs	r3, #0
 8001672:	73fb      	strb	r3, [r7, #15]
 8001674:	e044      	b.n	8001700 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001676:	7bfa      	ldrb	r2, [r7, #15]
 8001678:	6879      	ldr	r1, [r7, #4]
 800167a:	4613      	mov	r3, r2
 800167c:	00db      	lsls	r3, r3, #3
 800167e:	4413      	add	r3, r2
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	440b      	add	r3, r1
 8001684:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001688:	2200      	movs	r2, #0
 800168a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800168c:	7bfa      	ldrb	r2, [r7, #15]
 800168e:	6879      	ldr	r1, [r7, #4]
 8001690:	4613      	mov	r3, r2
 8001692:	00db      	lsls	r3, r3, #3
 8001694:	4413      	add	r3, r2
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	440b      	add	r3, r1
 800169a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800169e:	7bfa      	ldrb	r2, [r7, #15]
 80016a0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80016a2:	7bfa      	ldrb	r2, [r7, #15]
 80016a4:	6879      	ldr	r1, [r7, #4]
 80016a6:	4613      	mov	r3, r2
 80016a8:	00db      	lsls	r3, r3, #3
 80016aa:	4413      	add	r3, r2
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	440b      	add	r3, r1
 80016b0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80016b4:	2200      	movs	r2, #0
 80016b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80016b8:	7bfa      	ldrb	r2, [r7, #15]
 80016ba:	6879      	ldr	r1, [r7, #4]
 80016bc:	4613      	mov	r3, r2
 80016be:	00db      	lsls	r3, r3, #3
 80016c0:	4413      	add	r3, r2
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	440b      	add	r3, r1
 80016c6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80016ca:	2200      	movs	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80016ce:	7bfa      	ldrb	r2, [r7, #15]
 80016d0:	6879      	ldr	r1, [r7, #4]
 80016d2:	4613      	mov	r3, r2
 80016d4:	00db      	lsls	r3, r3, #3
 80016d6:	4413      	add	r3, r2
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	440b      	add	r3, r1
 80016dc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80016e4:	7bfa      	ldrb	r2, [r7, #15]
 80016e6:	6879      	ldr	r1, [r7, #4]
 80016e8:	4613      	mov	r3, r2
 80016ea:	00db      	lsls	r3, r3, #3
 80016ec:	4413      	add	r3, r2
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	440b      	add	r3, r1
 80016f2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016fa:	7bfb      	ldrb	r3, [r7, #15]
 80016fc:	3301      	adds	r3, #1
 80016fe:	73fb      	strb	r3, [r7, #15]
 8001700:	7bfa      	ldrb	r2, [r7, #15]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	429a      	cmp	r2, r3
 8001708:	d3b5      	bcc.n	8001676 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	603b      	str	r3, [r7, #0]
 8001710:	687e      	ldr	r6, [r7, #4]
 8001712:	466d      	mov	r5, sp
 8001714:	f106 0410 	add.w	r4, r6, #16
 8001718:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800171a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800171c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800171e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001720:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001724:	e885 0003 	stmia.w	r5, {r0, r1}
 8001728:	1d33      	adds	r3, r6, #4
 800172a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800172c:	6838      	ldr	r0, [r7, #0]
 800172e:	f002 fff9 	bl	8004724 <USB_DevInit>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d005      	beq.n	8001744 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2202      	movs	r2, #2
 800173c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e00d      	b.n	8001760 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2200      	movs	r2, #0
 8001748:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2201      	movs	r2, #1
 8001750:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4618      	mov	r0, r3
 800175a:	f004 f948 	bl	80059ee <USB_DevDisconnect>

  return HAL_OK;
 800175e:	2300      	movs	r3, #0
}
 8001760:	4618      	mov	r0, r3
 8001762:	3714      	adds	r7, #20
 8001764:	46bd      	mov	sp, r7
 8001766:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001768 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800177c:	2b01      	cmp	r3, #1
 800177e:	d101      	bne.n	8001784 <HAL_PCD_Start+0x1c>
 8001780:	2302      	movs	r3, #2
 8001782:	e020      	b.n	80017c6 <HAL_PCD_Start+0x5e>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2201      	movs	r2, #1
 8001788:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001790:	2b01      	cmp	r3, #1
 8001792:	d109      	bne.n	80017a8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001798:	2b01      	cmp	r3, #1
 800179a:	d005      	beq.n	80017a8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017a0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f002 ff4b 	bl	8004648 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f004 f8f8 	bl	80059ac <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2200      	movs	r2, #0
 80017c0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80017ce:	b590      	push	{r4, r7, lr}
 80017d0:	b08d      	sub	sp, #52	; 0x34
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80017dc:	6a3b      	ldr	r3, [r7, #32]
 80017de:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f004 f9b6 	bl	8005b56 <USB_GetMode>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	f040 848a 	bne.w	8002106 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f004 f91a 	bl	8005a30 <USB_ReadInterrupts>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	f000 8480 	beq.w	8002104 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	0a1b      	lsrs	r3, r3, #8
 800180e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4618      	mov	r0, r3
 800181e:	f004 f907 	bl	8005a30 <USB_ReadInterrupts>
 8001822:	4603      	mov	r3, r0
 8001824:	f003 0302 	and.w	r3, r3, #2
 8001828:	2b02      	cmp	r3, #2
 800182a:	d107      	bne.n	800183c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	695a      	ldr	r2, [r3, #20]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f002 0202 	and.w	r2, r2, #2
 800183a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4618      	mov	r0, r3
 8001842:	f004 f8f5 	bl	8005a30 <USB_ReadInterrupts>
 8001846:	4603      	mov	r3, r0
 8001848:	f003 0310 	and.w	r3, r3, #16
 800184c:	2b10      	cmp	r3, #16
 800184e:	d161      	bne.n	8001914 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	699a      	ldr	r2, [r3, #24]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f022 0210 	bic.w	r2, r2, #16
 800185e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001860:	6a3b      	ldr	r3, [r7, #32]
 8001862:	6a1b      	ldr	r3, [r3, #32]
 8001864:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	f003 020f 	and.w	r2, r3, #15
 800186c:	4613      	mov	r3, r2
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	4413      	add	r3, r2
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	4413      	add	r3, r2
 800187c:	3304      	adds	r3, #4
 800187e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	0c5b      	lsrs	r3, r3, #17
 8001884:	f003 030f 	and.w	r3, r3, #15
 8001888:	2b02      	cmp	r3, #2
 800188a:	d124      	bne.n	80018d6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001892:	4013      	ands	r3, r2
 8001894:	2b00      	cmp	r3, #0
 8001896:	d035      	beq.n	8001904 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	091b      	lsrs	r3, r3, #4
 80018a0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80018a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	461a      	mov	r2, r3
 80018aa:	6a38      	ldr	r0, [r7, #32]
 80018ac:	f003 ff2c 	bl	8005708 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	691a      	ldr	r2, [r3, #16]
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	091b      	lsrs	r3, r3, #4
 80018b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018bc:	441a      	add	r2, r3
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	6a1a      	ldr	r2, [r3, #32]
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	091b      	lsrs	r3, r3, #4
 80018ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018ce:	441a      	add	r2, r3
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	621a      	str	r2, [r3, #32]
 80018d4:	e016      	b.n	8001904 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	0c5b      	lsrs	r3, r3, #17
 80018da:	f003 030f 	and.w	r3, r3, #15
 80018de:	2b06      	cmp	r3, #6
 80018e0:	d110      	bne.n	8001904 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80018e8:	2208      	movs	r2, #8
 80018ea:	4619      	mov	r1, r3
 80018ec:	6a38      	ldr	r0, [r7, #32]
 80018ee:	f003 ff0b 	bl	8005708 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	6a1a      	ldr	r2, [r3, #32]
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	091b      	lsrs	r3, r3, #4
 80018fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018fe:	441a      	add	r2, r3
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	699a      	ldr	r2, [r3, #24]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f042 0210 	orr.w	r2, r2, #16
 8001912:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4618      	mov	r0, r3
 800191a:	f004 f889 	bl	8005a30 <USB_ReadInterrupts>
 800191e:	4603      	mov	r3, r0
 8001920:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001924:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001928:	f040 80a7 	bne.w	8001a7a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800192c:	2300      	movs	r3, #0
 800192e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4618      	mov	r0, r3
 8001936:	f004 f88e 	bl	8005a56 <USB_ReadDevAllOutEpInterrupt>
 800193a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800193c:	e099      	b.n	8001a72 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800193e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001940:	f003 0301 	and.w	r3, r3, #1
 8001944:	2b00      	cmp	r3, #0
 8001946:	f000 808e 	beq.w	8001a66 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001950:	b2d2      	uxtb	r2, r2
 8001952:	4611      	mov	r1, r2
 8001954:	4618      	mov	r0, r3
 8001956:	f004 f8b2 	bl	8005abe <USB_ReadDevOutEPInterrupt>
 800195a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	2b00      	cmp	r3, #0
 8001964:	d00c      	beq.n	8001980 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001968:	015a      	lsls	r2, r3, #5
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	4413      	add	r3, r2
 800196e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001972:	461a      	mov	r2, r3
 8001974:	2301      	movs	r3, #1
 8001976:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001978:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f000 fec2 	bl	8002704 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	f003 0308 	and.w	r3, r3, #8
 8001986:	2b00      	cmp	r3, #0
 8001988:	d00c      	beq.n	80019a4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800198a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198c:	015a      	lsls	r2, r3, #5
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	4413      	add	r3, r2
 8001992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001996:	461a      	mov	r2, r3
 8001998:	2308      	movs	r3, #8
 800199a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800199c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f000 ff98 	bl	80028d4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	f003 0310 	and.w	r3, r3, #16
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d008      	beq.n	80019c0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80019ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b0:	015a      	lsls	r2, r3, #5
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	4413      	add	r3, r2
 80019b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019ba:	461a      	mov	r2, r3
 80019bc:	2310      	movs	r3, #16
 80019be:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d030      	beq.n	8001a2c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80019ca:	6a3b      	ldr	r3, [r7, #32]
 80019cc:	695b      	ldr	r3, [r3, #20]
 80019ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019d2:	2b80      	cmp	r3, #128	; 0x80
 80019d4:	d109      	bne.n	80019ea <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	69fa      	ldr	r2, [r7, #28]
 80019e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019e8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80019ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019ec:	4613      	mov	r3, r2
 80019ee:	00db      	lsls	r3, r3, #3
 80019f0:	4413      	add	r3, r2
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	4413      	add	r3, r2
 80019fc:	3304      	adds	r3, #4
 80019fe:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	78db      	ldrb	r3, [r3, #3]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d108      	bne.n	8001a1a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	4619      	mov	r1, r3
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f009 f9f5 	bl	800ae04 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1c:	015a      	lsls	r2, r3, #5
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	4413      	add	r3, r2
 8001a22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a26:	461a      	mov	r2, r3
 8001a28:	2302      	movs	r3, #2
 8001a2a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	f003 0320 	and.w	r3, r3, #32
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d008      	beq.n	8001a48 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a38:	015a      	lsls	r2, r3, #5
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a42:	461a      	mov	r2, r3
 8001a44:	2320      	movs	r3, #32
 8001a46:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d009      	beq.n	8001a66 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a54:	015a      	lsls	r2, r3, #5
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	4413      	add	r3, r2
 8001a5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a5e:	461a      	mov	r2, r3
 8001a60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a64:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a68:	3301      	adds	r3, #1
 8001a6a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a6e:	085b      	lsrs	r3, r3, #1
 8001a70:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	f47f af62 	bne.w	800193e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f003 ffd6 	bl	8005a30 <USB_ReadInterrupts>
 8001a84:	4603      	mov	r3, r0
 8001a86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a8a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001a8e:	f040 80db 	bne.w	8001c48 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f003 fff7 	bl	8005a8a <USB_ReadDevAllInEpInterrupt>
 8001a9c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001aa2:	e0cd      	b.n	8001c40 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	f000 80c2 	beq.w	8001c34 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ab6:	b2d2      	uxtb	r2, r2
 8001ab8:	4611      	mov	r1, r2
 8001aba:	4618      	mov	r0, r3
 8001abc:	f004 f81d 	bl	8005afa <USB_ReadDevInEPInterrupt>
 8001ac0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	f003 0301 	and.w	r3, r3, #1
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d057      	beq.n	8001b7c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ace:	f003 030f 	and.w	r3, r3, #15
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ae0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	69f9      	ldr	r1, [r7, #28]
 8001ae8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001aec:	4013      	ands	r3, r2
 8001aee:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af2:	015a      	lsls	r2, r3, #5
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	4413      	add	r3, r2
 8001af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001afc:	461a      	mov	r2, r3
 8001afe:	2301      	movs	r3, #1
 8001b00:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	691b      	ldr	r3, [r3, #16]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d132      	bne.n	8001b70 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001b0a:	6879      	ldr	r1, [r7, #4]
 8001b0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b0e:	4613      	mov	r3, r2
 8001b10:	00db      	lsls	r3, r3, #3
 8001b12:	4413      	add	r3, r2
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	440b      	add	r3, r1
 8001b18:	334c      	adds	r3, #76	; 0x4c
 8001b1a:	6819      	ldr	r1, [r3, #0]
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b20:	4613      	mov	r3, r2
 8001b22:	00db      	lsls	r3, r3, #3
 8001b24:	4413      	add	r3, r2
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	4403      	add	r3, r0
 8001b2a:	3348      	adds	r3, #72	; 0x48
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4419      	add	r1, r3
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b34:	4613      	mov	r3, r2
 8001b36:	00db      	lsls	r3, r3, #3
 8001b38:	4413      	add	r3, r2
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	4403      	add	r3, r0
 8001b3e:	334c      	adds	r3, #76	; 0x4c
 8001b40:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d113      	bne.n	8001b70 <HAL_PCD_IRQHandler+0x3a2>
 8001b48:	6879      	ldr	r1, [r7, #4]
 8001b4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	00db      	lsls	r3, r3, #3
 8001b50:	4413      	add	r3, r2
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	440b      	add	r3, r1
 8001b56:	3354      	adds	r3, #84	; 0x54
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d108      	bne.n	8001b70 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6818      	ldr	r0, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001b68:	461a      	mov	r2, r3
 8001b6a:	2101      	movs	r1, #1
 8001b6c:	f004 f824 	bl	8005bb8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	4619      	mov	r1, r3
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f009 f8bf 	bl	800acfa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	f003 0308 	and.w	r3, r3, #8
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d008      	beq.n	8001b98 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b88:	015a      	lsls	r2, r3, #5
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b92:	461a      	mov	r2, r3
 8001b94:	2308      	movs	r3, #8
 8001b96:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	f003 0310 	and.w	r3, r3, #16
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d008      	beq.n	8001bb4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba4:	015a      	lsls	r2, r3, #5
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	4413      	add	r3, r2
 8001baa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bae:	461a      	mov	r2, r3
 8001bb0:	2310      	movs	r3, #16
 8001bb2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d008      	beq.n	8001bd0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc0:	015a      	lsls	r2, r3, #5
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bca:	461a      	mov	r2, r3
 8001bcc:	2340      	movs	r3, #64	; 0x40
 8001bce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d023      	beq.n	8001c22 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001bda:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001bdc:	6a38      	ldr	r0, [r7, #32]
 8001bde:	f002 ff05 	bl	80049ec <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001be2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001be4:	4613      	mov	r3, r2
 8001be6:	00db      	lsls	r3, r3, #3
 8001be8:	4413      	add	r3, r2
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	3338      	adds	r3, #56	; 0x38
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	3304      	adds	r3, #4
 8001bf4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	78db      	ldrb	r3, [r3, #3]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d108      	bne.n	8001c10 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	2200      	movs	r2, #0
 8001c02:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	4619      	mov	r1, r3
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f009 f90c 	bl	800ae28 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c12:	015a      	lsls	r2, r3, #5
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	4413      	add	r3, r2
 8001c18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	2302      	movs	r3, #2
 8001c20:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d003      	beq.n	8001c34 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001c2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f000 fcdb 	bl	80025ea <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c36:	3301      	adds	r3, #1
 8001c38:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c3c:	085b      	lsrs	r3, r3, #1
 8001c3e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	f47f af2e 	bne.w	8001aa4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f003 feef 	bl	8005a30 <USB_ReadInterrupts>
 8001c52:	4603      	mov	r3, r0
 8001c54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001c58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001c5c:	d122      	bne.n	8001ca4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	69fa      	ldr	r2, [r7, #28]
 8001c68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c6c:	f023 0301 	bic.w	r3, r3, #1
 8001c70:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d108      	bne.n	8001c8e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001c84:	2100      	movs	r1, #0
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f000 fec2 	bl	8002a10 <HAL_PCDEx_LPM_Callback>
 8001c8c:	e002      	b.n	8001c94 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f009 f8aa 	bl	800ade8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	695a      	ldr	r2, [r3, #20]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001ca2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f003 fec1 	bl	8005a30 <USB_ReadInterrupts>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001cb8:	d112      	bne.n	8001ce0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d102      	bne.n	8001cd0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f009 f866 	bl	800ad9c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	695a      	ldr	r2, [r3, #20]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001cde:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f003 fea3 	bl	8005a30 <USB_ReadInterrupts>
 8001cea:	4603      	mov	r3, r0
 8001cec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cf4:	f040 80b7 	bne.w	8001e66 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	69fa      	ldr	r2, [r7, #28]
 8001d02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d06:	f023 0301 	bic.w	r3, r3, #1
 8001d0a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2110      	movs	r1, #16
 8001d12:	4618      	mov	r0, r3
 8001d14:	f002 fe6a 	bl	80049ec <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d18:	2300      	movs	r3, #0
 8001d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d1c:	e046      	b.n	8001dac <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d20:	015a      	lsls	r2, r3, #5
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	4413      	add	r3, r2
 8001d26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001d30:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d34:	015a      	lsls	r2, r3, #5
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	4413      	add	r3, r2
 8001d3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d42:	0151      	lsls	r1, r2, #5
 8001d44:	69fa      	ldr	r2, [r7, #28]
 8001d46:	440a      	add	r2, r1
 8001d48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001d4c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001d50:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d54:	015a      	lsls	r2, r3, #5
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	4413      	add	r3, r2
 8001d5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d5e:	461a      	mov	r2, r3
 8001d60:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001d64:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d68:	015a      	lsls	r2, r3, #5
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d76:	0151      	lsls	r1, r2, #5
 8001d78:	69fa      	ldr	r2, [r7, #28]
 8001d7a:	440a      	add	r2, r1
 8001d7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001d80:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001d84:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d88:	015a      	lsls	r2, r3, #5
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d96:	0151      	lsls	r1, r2, #5
 8001d98:	69fa      	ldr	r2, [r7, #28]
 8001d9a:	440a      	add	r2, r1
 8001d9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001da0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001da4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001da8:	3301      	adds	r3, #1
 8001daa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d3b3      	bcc.n	8001d1e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001dbc:	69db      	ldr	r3, [r3, #28]
 8001dbe:	69fa      	ldr	r2, [r7, #28]
 8001dc0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001dc4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001dc8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d016      	beq.n	8001e00 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001dd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ddc:	69fa      	ldr	r2, [r7, #28]
 8001dde:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001de2:	f043 030b 	orr.w	r3, r3, #11
 8001de6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df2:	69fa      	ldr	r2, [r7, #28]
 8001df4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001df8:	f043 030b 	orr.w	r3, r3, #11
 8001dfc:	6453      	str	r3, [r2, #68]	; 0x44
 8001dfe:	e015      	b.n	8001e2c <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e06:	695b      	ldr	r3, [r3, #20]
 8001e08:	69fa      	ldr	r2, [r7, #28]
 8001e0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e0e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e12:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001e16:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e1e:	691b      	ldr	r3, [r3, #16]
 8001e20:	69fa      	ldr	r2, [r7, #28]
 8001e22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e26:	f043 030b 	orr.w	r3, r3, #11
 8001e2a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	69fa      	ldr	r2, [r7, #28]
 8001e36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e3a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001e3e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6818      	ldr	r0, [r3, #0]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	691b      	ldr	r3, [r3, #16]
 8001e48:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001e50:	461a      	mov	r2, r3
 8001e52:	f003 feb1 	bl	8005bb8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	695a      	ldr	r2, [r3, #20]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001e64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f003 fde0 	bl	8005a30 <USB_ReadInterrupts>
 8001e70:	4603      	mov	r3, r0
 8001e72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e7a:	d124      	bne.n	8001ec6 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f003 fe76 	bl	8005b72 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f002 fe2b 	bl	8004ae6 <USB_GetDevSpeed>
 8001e90:	4603      	mov	r3, r0
 8001e92:	461a      	mov	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681c      	ldr	r4, [r3, #0]
 8001e9c:	f001 fa28 	bl	80032f0 <HAL_RCC_GetHCLKFreq>
 8001ea0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	4620      	mov	r0, r4
 8001eac:	f002 fb2a 	bl	8004504 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f008 ff4a 	bl	800ad4a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	695a      	ldr	r2, [r3, #20]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001ec4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f003 fdb0 	bl	8005a30 <USB_ReadInterrupts>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	f003 0308 	and.w	r3, r3, #8
 8001ed6:	2b08      	cmp	r3, #8
 8001ed8:	d10a      	bne.n	8001ef0 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f008 ff27 	bl	800ad2e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	695a      	ldr	r2, [r3, #20]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f002 0208 	and.w	r2, r2, #8
 8001eee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f003 fd9b 	bl	8005a30 <USB_ReadInterrupts>
 8001efa:	4603      	mov	r3, r0
 8001efc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f00:	2b80      	cmp	r3, #128	; 0x80
 8001f02:	d122      	bne.n	8001f4a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001f04:	6a3b      	ldr	r3, [r7, #32]
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f0c:	6a3b      	ldr	r3, [r7, #32]
 8001f0e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f10:	2301      	movs	r3, #1
 8001f12:	627b      	str	r3, [r7, #36]	; 0x24
 8001f14:	e014      	b.n	8001f40 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001f16:	6879      	ldr	r1, [r7, #4]
 8001f18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	00db      	lsls	r3, r3, #3
 8001f1e:	4413      	add	r3, r2
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	440b      	add	r3, r1
 8001f24:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d105      	bne.n	8001f3a <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	4619      	mov	r1, r3
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f000 fb27 	bl	8002588 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d3e5      	bcc.n	8001f16 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f003 fd6e 	bl	8005a30 <USB_ReadInterrupts>
 8001f54:	4603      	mov	r3, r0
 8001f56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f5e:	d13b      	bne.n	8001fd8 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f60:	2301      	movs	r3, #1
 8001f62:	627b      	str	r3, [r7, #36]	; 0x24
 8001f64:	e02b      	b.n	8001fbe <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f68:	015a      	lsls	r2, r3, #5
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001f76:	6879      	ldr	r1, [r7, #4]
 8001f78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	00db      	lsls	r3, r3, #3
 8001f7e:	4413      	add	r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	440b      	add	r3, r1
 8001f84:	3340      	adds	r3, #64	; 0x40
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d115      	bne.n	8001fb8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001f8c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	da12      	bge.n	8001fb8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001f92:	6879      	ldr	r1, [r7, #4]
 8001f94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f96:	4613      	mov	r3, r2
 8001f98:	00db      	lsls	r3, r3, #3
 8001f9a:	4413      	add	r3, r2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	440b      	add	r3, r1
 8001fa0:	333f      	adds	r3, #63	; 0x3f
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 fae8 	bl	8002588 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fba:	3301      	adds	r3, #1
 8001fbc:	627b      	str	r3, [r7, #36]	; 0x24
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d3ce      	bcc.n	8001f66 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	695a      	ldr	r2, [r3, #20]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001fd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f003 fd27 	bl	8005a30 <USB_ReadInterrupts>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fe8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001fec:	d155      	bne.n	800209a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001fee:	2301      	movs	r3, #1
 8001ff0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ff2:	e045      	b.n	8002080 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff6:	015a      	lsls	r2, r3, #5
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002004:	6879      	ldr	r1, [r7, #4]
 8002006:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002008:	4613      	mov	r3, r2
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	4413      	add	r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	440b      	add	r3, r1
 8002012:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	2b01      	cmp	r3, #1
 800201a:	d12e      	bne.n	800207a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800201c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800201e:	2b00      	cmp	r3, #0
 8002020:	da2b      	bge.n	800207a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800202e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002032:	429a      	cmp	r2, r3
 8002034:	d121      	bne.n	800207a <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002036:	6879      	ldr	r1, [r7, #4]
 8002038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800203a:	4613      	mov	r3, r2
 800203c:	00db      	lsls	r3, r3, #3
 800203e:	4413      	add	r3, r2
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	440b      	add	r3, r1
 8002044:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002048:	2201      	movs	r2, #1
 800204a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800204c:	6a3b      	ldr	r3, [r7, #32]
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002054:	6a3b      	ldr	r3, [r7, #32]
 8002056:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002058:	6a3b      	ldr	r3, [r7, #32]
 800205a:	695b      	ldr	r3, [r3, #20]
 800205c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002060:	2b00      	cmp	r3, #0
 8002062:	d10a      	bne.n	800207a <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	69fa      	ldr	r2, [r7, #28]
 800206e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002072:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002076:	6053      	str	r3, [r2, #4]
            break;
 8002078:	e007      	b.n	800208a <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800207a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207c:	3301      	adds	r3, #1
 800207e:	627b      	str	r3, [r7, #36]	; 0x24
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002086:	429a      	cmp	r2, r3
 8002088:	d3b4      	bcc.n	8001ff4 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	695a      	ldr	r2, [r3, #20]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002098:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4618      	mov	r0, r3
 80020a0:	f003 fcc6 	bl	8005a30 <USB_ReadInterrupts>
 80020a4:	4603      	mov	r3, r0
 80020a6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80020aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020ae:	d10a      	bne.n	80020c6 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f008 fecb 	bl	800ae4c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	695a      	ldr	r2, [r3, #20]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80020c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f003 fcb0 	bl	8005a30 <USB_ReadInterrupts>
 80020d0:	4603      	mov	r3, r0
 80020d2:	f003 0304 	and.w	r3, r3, #4
 80020d6:	2b04      	cmp	r3, #4
 80020d8:	d115      	bne.n	8002106 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	f003 0304 	and.w	r3, r3, #4
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d002      	beq.n	80020f2 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f008 febb 	bl	800ae68 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	6859      	ldr	r1, [r3, #4]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	430a      	orrs	r2, r1
 8002100:	605a      	str	r2, [r3, #4]
 8002102:	e000      	b.n	8002106 <HAL_PCD_IRQHandler+0x938>
      return;
 8002104:	bf00      	nop
    }
  }
}
 8002106:	3734      	adds	r7, #52	; 0x34
 8002108:	46bd      	mov	sp, r7
 800210a:	bd90      	pop	{r4, r7, pc}

0800210c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	460b      	mov	r3, r1
 8002116:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800211e:	2b01      	cmp	r3, #1
 8002120:	d101      	bne.n	8002126 <HAL_PCD_SetAddress+0x1a>
 8002122:	2302      	movs	r3, #2
 8002124:	e013      	b.n	800214e <HAL_PCD_SetAddress+0x42>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2201      	movs	r2, #1
 800212a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	78fa      	ldrb	r2, [r7, #3]
 8002132:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	78fa      	ldrb	r2, [r7, #3]
 800213c:	4611      	mov	r1, r2
 800213e:	4618      	mov	r0, r3
 8002140:	f003 fc0e 	bl	8005960 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b084      	sub	sp, #16
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
 800215e:	4608      	mov	r0, r1
 8002160:	4611      	mov	r1, r2
 8002162:	461a      	mov	r2, r3
 8002164:	4603      	mov	r3, r0
 8002166:	70fb      	strb	r3, [r7, #3]
 8002168:	460b      	mov	r3, r1
 800216a:	803b      	strh	r3, [r7, #0]
 800216c:	4613      	mov	r3, r2
 800216e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002170:	2300      	movs	r3, #0
 8002172:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002174:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002178:	2b00      	cmp	r3, #0
 800217a:	da0f      	bge.n	800219c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800217c:	78fb      	ldrb	r3, [r7, #3]
 800217e:	f003 020f 	and.w	r2, r3, #15
 8002182:	4613      	mov	r3, r2
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	4413      	add	r3, r2
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	3338      	adds	r3, #56	; 0x38
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	4413      	add	r3, r2
 8002190:	3304      	adds	r3, #4
 8002192:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2201      	movs	r2, #1
 8002198:	705a      	strb	r2, [r3, #1]
 800219a:	e00f      	b.n	80021bc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800219c:	78fb      	ldrb	r3, [r7, #3]
 800219e:	f003 020f 	and.w	r2, r3, #15
 80021a2:	4613      	mov	r3, r2
 80021a4:	00db      	lsls	r3, r3, #3
 80021a6:	4413      	add	r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	4413      	add	r3, r2
 80021b2:	3304      	adds	r3, #4
 80021b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2200      	movs	r2, #0
 80021ba:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80021bc:	78fb      	ldrb	r3, [r7, #3]
 80021be:	f003 030f 	and.w	r3, r3, #15
 80021c2:	b2da      	uxtb	r2, r3
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80021c8:	883a      	ldrh	r2, [r7, #0]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	78ba      	ldrb	r2, [r7, #2]
 80021d2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	785b      	ldrb	r3, [r3, #1]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d004      	beq.n	80021e6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	b29a      	uxth	r2, r3
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80021e6:	78bb      	ldrb	r3, [r7, #2]
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d102      	bne.n	80021f2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2200      	movs	r2, #0
 80021f0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d101      	bne.n	8002200 <HAL_PCD_EP_Open+0xaa>
 80021fc:	2302      	movs	r3, #2
 80021fe:	e00e      	b.n	800221e <HAL_PCD_EP_Open+0xc8>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	68f9      	ldr	r1, [r7, #12]
 800220e:	4618      	mov	r0, r3
 8002210:	f002 fc8e 	bl	8004b30 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800221c:	7afb      	ldrb	r3, [r7, #11]
}
 800221e:	4618      	mov	r0, r3
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	b084      	sub	sp, #16
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
 800222e:	460b      	mov	r3, r1
 8002230:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002232:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002236:	2b00      	cmp	r3, #0
 8002238:	da0f      	bge.n	800225a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800223a:	78fb      	ldrb	r3, [r7, #3]
 800223c:	f003 020f 	and.w	r2, r3, #15
 8002240:	4613      	mov	r3, r2
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	4413      	add	r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	3338      	adds	r3, #56	; 0x38
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	4413      	add	r3, r2
 800224e:	3304      	adds	r3, #4
 8002250:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2201      	movs	r2, #1
 8002256:	705a      	strb	r2, [r3, #1]
 8002258:	e00f      	b.n	800227a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800225a:	78fb      	ldrb	r3, [r7, #3]
 800225c:	f003 020f 	and.w	r2, r3, #15
 8002260:	4613      	mov	r3, r2
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	4413      	add	r3, r2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	4413      	add	r3, r2
 8002270:	3304      	adds	r3, #4
 8002272:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2200      	movs	r2, #0
 8002278:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800227a:	78fb      	ldrb	r3, [r7, #3]
 800227c:	f003 030f 	and.w	r3, r3, #15
 8002280:	b2da      	uxtb	r2, r3
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800228c:	2b01      	cmp	r3, #1
 800228e:	d101      	bne.n	8002294 <HAL_PCD_EP_Close+0x6e>
 8002290:	2302      	movs	r3, #2
 8002292:	e00e      	b.n	80022b2 <HAL_PCD_EP_Close+0x8c>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	68f9      	ldr	r1, [r7, #12]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f002 fccc 	bl	8004c40 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3710      	adds	r7, #16
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}

080022ba <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80022ba:	b580      	push	{r7, lr}
 80022bc:	b086      	sub	sp, #24
 80022be:	af00      	add	r7, sp, #0
 80022c0:	60f8      	str	r0, [r7, #12]
 80022c2:	607a      	str	r2, [r7, #4]
 80022c4:	603b      	str	r3, [r7, #0]
 80022c6:	460b      	mov	r3, r1
 80022c8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022ca:	7afb      	ldrb	r3, [r7, #11]
 80022cc:	f003 020f 	and.w	r2, r3, #15
 80022d0:	4613      	mov	r3, r2
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	4413      	add	r3, r2
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80022dc:	68fa      	ldr	r2, [r7, #12]
 80022de:	4413      	add	r3, r2
 80022e0:	3304      	adds	r3, #4
 80022e2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	2200      	movs	r2, #0
 80022f4:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	2200      	movs	r2, #0
 80022fa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022fc:	7afb      	ldrb	r3, [r7, #11]
 80022fe:	f003 030f 	and.w	r3, r3, #15
 8002302:	b2da      	uxtb	r2, r3
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	2b01      	cmp	r3, #1
 800230e:	d102      	bne.n	8002316 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002316:	7afb      	ldrb	r3, [r7, #11]
 8002318:	f003 030f 	and.w	r3, r3, #15
 800231c:	2b00      	cmp	r3, #0
 800231e:	d109      	bne.n	8002334 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6818      	ldr	r0, [r3, #0]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	691b      	ldr	r3, [r3, #16]
 8002328:	b2db      	uxtb	r3, r3
 800232a:	461a      	mov	r2, r3
 800232c:	6979      	ldr	r1, [r7, #20]
 800232e:	f002 ffab 	bl	8005288 <USB_EP0StartXfer>
 8002332:	e008      	b.n	8002346 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6818      	ldr	r0, [r3, #0]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	b2db      	uxtb	r3, r3
 800233e:	461a      	mov	r2, r3
 8002340:	6979      	ldr	r1, [r7, #20]
 8002342:	f002 fd59 	bl	8004df8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002346:	2300      	movs	r3, #0
}
 8002348:	4618      	mov	r0, r3
 800234a:	3718      	adds	r7, #24
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	460b      	mov	r3, r1
 800235a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800235c:	78fb      	ldrb	r3, [r7, #3]
 800235e:	f003 020f 	and.w	r2, r3, #15
 8002362:	6879      	ldr	r1, [r7, #4]
 8002364:	4613      	mov	r3, r2
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	4413      	add	r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	440b      	add	r3, r1
 800236e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002372:	681b      	ldr	r3, [r3, #0]
}
 8002374:	4618      	mov	r0, r3
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	607a      	str	r2, [r7, #4]
 800238a:	603b      	str	r3, [r7, #0]
 800238c:	460b      	mov	r3, r1
 800238e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002390:	7afb      	ldrb	r3, [r7, #11]
 8002392:	f003 020f 	and.w	r2, r3, #15
 8002396:	4613      	mov	r3, r2
 8002398:	00db      	lsls	r3, r3, #3
 800239a:	4413      	add	r3, r2
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	3338      	adds	r3, #56	; 0x38
 80023a0:	68fa      	ldr	r2, [r7, #12]
 80023a2:	4413      	add	r3, r2
 80023a4:	3304      	adds	r3, #4
 80023a6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	2200      	movs	r2, #0
 80023b8:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	2201      	movs	r2, #1
 80023be:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023c0:	7afb      	ldrb	r3, [r7, #11]
 80023c2:	f003 030f 	and.w	r3, r3, #15
 80023c6:	b2da      	uxtb	r2, r3
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d102      	bne.n	80023da <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80023da:	7afb      	ldrb	r3, [r7, #11]
 80023dc:	f003 030f 	and.w	r3, r3, #15
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d109      	bne.n	80023f8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6818      	ldr	r0, [r3, #0]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	691b      	ldr	r3, [r3, #16]
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	461a      	mov	r2, r3
 80023f0:	6979      	ldr	r1, [r7, #20]
 80023f2:	f002 ff49 	bl	8005288 <USB_EP0StartXfer>
 80023f6:	e008      	b.n	800240a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6818      	ldr	r0, [r3, #0]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	691b      	ldr	r3, [r3, #16]
 8002400:	b2db      	uxtb	r3, r3
 8002402:	461a      	mov	r2, r3
 8002404:	6979      	ldr	r1, [r7, #20]
 8002406:	f002 fcf7 	bl	8004df8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800240a:	2300      	movs	r3, #0
}
 800240c:	4618      	mov	r0, r3
 800240e:	3718      	adds	r7, #24
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	460b      	mov	r3, r1
 800241e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002420:	78fb      	ldrb	r3, [r7, #3]
 8002422:	f003 020f 	and.w	r2, r3, #15
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	429a      	cmp	r2, r3
 800242c:	d901      	bls.n	8002432 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e050      	b.n	80024d4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002432:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002436:	2b00      	cmp	r3, #0
 8002438:	da0f      	bge.n	800245a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800243a:	78fb      	ldrb	r3, [r7, #3]
 800243c:	f003 020f 	and.w	r2, r3, #15
 8002440:	4613      	mov	r3, r2
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	4413      	add	r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	3338      	adds	r3, #56	; 0x38
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	4413      	add	r3, r2
 800244e:	3304      	adds	r3, #4
 8002450:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2201      	movs	r2, #1
 8002456:	705a      	strb	r2, [r3, #1]
 8002458:	e00d      	b.n	8002476 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800245a:	78fa      	ldrb	r2, [r7, #3]
 800245c:	4613      	mov	r3, r2
 800245e:	00db      	lsls	r3, r3, #3
 8002460:	4413      	add	r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	4413      	add	r3, r2
 800246c:	3304      	adds	r3, #4
 800246e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2200      	movs	r2, #0
 8002474:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2201      	movs	r2, #1
 800247a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800247c:	78fb      	ldrb	r3, [r7, #3]
 800247e:	f003 030f 	and.w	r3, r3, #15
 8002482:	b2da      	uxtb	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800248e:	2b01      	cmp	r3, #1
 8002490:	d101      	bne.n	8002496 <HAL_PCD_EP_SetStall+0x82>
 8002492:	2302      	movs	r3, #2
 8002494:	e01e      	b.n	80024d4 <HAL_PCD_EP_SetStall+0xc0>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2201      	movs	r2, #1
 800249a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68f9      	ldr	r1, [r7, #12]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f003 f987 	bl	80057b8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80024aa:	78fb      	ldrb	r3, [r7, #3]
 80024ac:	f003 030f 	and.w	r3, r3, #15
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d10a      	bne.n	80024ca <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6818      	ldr	r0, [r3, #0]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	691b      	ldr	r3, [r3, #16]
 80024bc:	b2d9      	uxtb	r1, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80024c4:	461a      	mov	r2, r3
 80024c6:	f003 fb77 	bl	8005bb8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80024d2:	2300      	movs	r3, #0
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3710      	adds	r7, #16
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	460b      	mov	r3, r1
 80024e6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80024e8:	78fb      	ldrb	r3, [r7, #3]
 80024ea:	f003 020f 	and.w	r2, r3, #15
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d901      	bls.n	80024fa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e042      	b.n	8002580 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80024fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	da0f      	bge.n	8002522 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002502:	78fb      	ldrb	r3, [r7, #3]
 8002504:	f003 020f 	and.w	r2, r3, #15
 8002508:	4613      	mov	r3, r2
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	4413      	add	r3, r2
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	3338      	adds	r3, #56	; 0x38
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	4413      	add	r3, r2
 8002516:	3304      	adds	r3, #4
 8002518:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2201      	movs	r2, #1
 800251e:	705a      	strb	r2, [r3, #1]
 8002520:	e00f      	b.n	8002542 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002522:	78fb      	ldrb	r3, [r7, #3]
 8002524:	f003 020f 	and.w	r2, r3, #15
 8002528:	4613      	mov	r3, r2
 800252a:	00db      	lsls	r3, r3, #3
 800252c:	4413      	add	r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	4413      	add	r3, r2
 8002538:	3304      	adds	r3, #4
 800253a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2200      	movs	r2, #0
 8002540:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2200      	movs	r2, #0
 8002546:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002548:	78fb      	ldrb	r3, [r7, #3]
 800254a:	f003 030f 	and.w	r3, r3, #15
 800254e:	b2da      	uxtb	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800255a:	2b01      	cmp	r3, #1
 800255c:	d101      	bne.n	8002562 <HAL_PCD_EP_ClrStall+0x86>
 800255e:	2302      	movs	r3, #2
 8002560:	e00e      	b.n	8002580 <HAL_PCD_EP_ClrStall+0xa4>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2201      	movs	r2, #1
 8002566:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	68f9      	ldr	r1, [r7, #12]
 8002570:	4618      	mov	r0, r3
 8002572:	f003 f98f 	bl	8005894 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800257e:	2300      	movs	r3, #0
}
 8002580:	4618      	mov	r0, r3
 8002582:	3710      	adds	r7, #16
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	460b      	mov	r3, r1
 8002592:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002594:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002598:	2b00      	cmp	r3, #0
 800259a:	da0c      	bge.n	80025b6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800259c:	78fb      	ldrb	r3, [r7, #3]
 800259e:	f003 020f 	and.w	r2, r3, #15
 80025a2:	4613      	mov	r3, r2
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	4413      	add	r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	3338      	adds	r3, #56	; 0x38
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	4413      	add	r3, r2
 80025b0:	3304      	adds	r3, #4
 80025b2:	60fb      	str	r3, [r7, #12]
 80025b4:	e00c      	b.n	80025d0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025b6:	78fb      	ldrb	r3, [r7, #3]
 80025b8:	f003 020f 	and.w	r2, r3, #15
 80025bc:	4613      	mov	r3, r2
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	4413      	add	r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	4413      	add	r3, r2
 80025cc:	3304      	adds	r3, #4
 80025ce:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	68f9      	ldr	r1, [r7, #12]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f002 ffae 	bl	8005538 <USB_EPStopXfer>
 80025dc:	4603      	mov	r3, r0
 80025de:	72fb      	strb	r3, [r7, #11]

  return ret;
 80025e0:	7afb      	ldrb	r3, [r7, #11]
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3710      	adds	r7, #16
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b08a      	sub	sp, #40	; 0x28
 80025ee:	af02      	add	r7, sp, #8
 80025f0:	6078      	str	r0, [r7, #4]
 80025f2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80025fe:	683a      	ldr	r2, [r7, #0]
 8002600:	4613      	mov	r3, r2
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	4413      	add	r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	3338      	adds	r3, #56	; 0x38
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	4413      	add	r3, r2
 800260e:	3304      	adds	r3, #4
 8002610:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6a1a      	ldr	r2, [r3, #32]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	429a      	cmp	r2, r3
 800261c:	d901      	bls.n	8002622 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e06c      	b.n	80026fc <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	699a      	ldr	r2, [r3, #24]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6a1b      	ldr	r3, [r3, #32]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	69fa      	ldr	r2, [r7, #28]
 8002634:	429a      	cmp	r2, r3
 8002636:	d902      	bls.n	800263e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	3303      	adds	r3, #3
 8002642:	089b      	lsrs	r3, r3, #2
 8002644:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002646:	e02b      	b.n	80026a0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	699a      	ldr	r2, [r3, #24]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6a1b      	ldr	r3, [r3, #32]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	69fa      	ldr	r2, [r7, #28]
 800265a:	429a      	cmp	r2, r3
 800265c:	d902      	bls.n	8002664 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	3303      	adds	r3, #3
 8002668:	089b      	lsrs	r3, r3, #2
 800266a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6919      	ldr	r1, [r3, #16]
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	b2da      	uxtb	r2, r3
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800267c:	b2db      	uxtb	r3, r3
 800267e:	9300      	str	r3, [sp, #0]
 8002680:	4603      	mov	r3, r0
 8002682:	6978      	ldr	r0, [r7, #20]
 8002684:	f003 f802 	bl	800568c <USB_WritePacket>

    ep->xfer_buff  += len;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	691a      	ldr	r2, [r3, #16]
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	441a      	add	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6a1a      	ldr	r2, [r3, #32]
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	441a      	add	r2, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	015a      	lsls	r2, r3, #5
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	4413      	add	r3, r2
 80026a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026ac:	699b      	ldr	r3, [r3, #24]
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d809      	bhi.n	80026ca <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6a1a      	ldr	r2, [r3, #32]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80026be:	429a      	cmp	r2, r3
 80026c0:	d203      	bcs.n	80026ca <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	699b      	ldr	r3, [r3, #24]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1be      	bne.n	8002648 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	699a      	ldr	r2, [r3, #24]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6a1b      	ldr	r3, [r3, #32]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d811      	bhi.n	80026fa <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	f003 030f 	and.w	r3, r3, #15
 80026dc:	2201      	movs	r2, #1
 80026de:	fa02 f303 	lsl.w	r3, r2, r3
 80026e2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	43db      	mvns	r3, r3
 80026f0:	6939      	ldr	r1, [r7, #16]
 80026f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80026f6:	4013      	ands	r3, r2
 80026f8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3720      	adds	r7, #32
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b088      	sub	sp, #32
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	333c      	adds	r3, #60	; 0x3c
 800271c:	3304      	adds	r3, #4
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	015a      	lsls	r2, r3, #5
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	4413      	add	r3, r2
 800272a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d17b      	bne.n	8002832 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	f003 0308 	and.w	r3, r3, #8
 8002740:	2b00      	cmp	r3, #0
 8002742:	d015      	beq.n	8002770 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	4a61      	ldr	r2, [pc, #388]	; (80028cc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002748:	4293      	cmp	r3, r2
 800274a:	f240 80b9 	bls.w	80028c0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002754:	2b00      	cmp	r3, #0
 8002756:	f000 80b3 	beq.w	80028c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	015a      	lsls	r2, r3, #5
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	4413      	add	r3, r2
 8002762:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002766:	461a      	mov	r2, r3
 8002768:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800276c:	6093      	str	r3, [r2, #8]
 800276e:	e0a7      	b.n	80028c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	f003 0320 	and.w	r3, r3, #32
 8002776:	2b00      	cmp	r3, #0
 8002778:	d009      	beq.n	800278e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	015a      	lsls	r2, r3, #5
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	4413      	add	r3, r2
 8002782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002786:	461a      	mov	r2, r3
 8002788:	2320      	movs	r3, #32
 800278a:	6093      	str	r3, [r2, #8]
 800278c:	e098      	b.n	80028c0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002794:	2b00      	cmp	r3, #0
 8002796:	f040 8093 	bne.w	80028c0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	4a4b      	ldr	r2, [pc, #300]	; (80028cc <PCD_EP_OutXfrComplete_int+0x1c8>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d90f      	bls.n	80027c2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d00a      	beq.n	80027c2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	015a      	lsls	r2, r3, #5
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	4413      	add	r3, r2
 80027b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027b8:	461a      	mov	r2, r3
 80027ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027be:	6093      	str	r3, [r2, #8]
 80027c0:	e07e      	b.n	80028c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80027c2:	683a      	ldr	r2, [r7, #0]
 80027c4:	4613      	mov	r3, r2
 80027c6:	00db      	lsls	r3, r3, #3
 80027c8:	4413      	add	r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	4413      	add	r3, r2
 80027d4:	3304      	adds	r3, #4
 80027d6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	69da      	ldr	r2, [r3, #28]
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	0159      	lsls	r1, r3, #5
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	440b      	add	r3, r1
 80027e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ee:	1ad2      	subs	r2, r2, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d114      	bne.n	8002824 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d109      	bne.n	8002816 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6818      	ldr	r0, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800280c:	461a      	mov	r2, r3
 800280e:	2101      	movs	r1, #1
 8002810:	f003 f9d2 	bl	8005bb8 <USB_EP0_OutStart>
 8002814:	e006      	b.n	8002824 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	691a      	ldr	r2, [r3, #16]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6a1b      	ldr	r3, [r3, #32]
 800281e:	441a      	add	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	b2db      	uxtb	r3, r3
 8002828:	4619      	mov	r1, r3
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f008 fa4a 	bl	800acc4 <HAL_PCD_DataOutStageCallback>
 8002830:	e046      	b.n	80028c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	4a26      	ldr	r2, [pc, #152]	; (80028d0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d124      	bne.n	8002884 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d00a      	beq.n	800285a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	015a      	lsls	r2, r3, #5
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	4413      	add	r3, r2
 800284c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002850:	461a      	mov	r2, r3
 8002852:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002856:	6093      	str	r3, [r2, #8]
 8002858:	e032      	b.n	80028c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	f003 0320 	and.w	r3, r3, #32
 8002860:	2b00      	cmp	r3, #0
 8002862:	d008      	beq.n	8002876 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	015a      	lsls	r2, r3, #5
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	4413      	add	r3, r2
 800286c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002870:	461a      	mov	r2, r3
 8002872:	2320      	movs	r3, #32
 8002874:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	b2db      	uxtb	r3, r3
 800287a:	4619      	mov	r1, r3
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f008 fa21 	bl	800acc4 <HAL_PCD_DataOutStageCallback>
 8002882:	e01d      	b.n	80028c0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d114      	bne.n	80028b4 <PCD_EP_OutXfrComplete_int+0x1b0>
 800288a:	6879      	ldr	r1, [r7, #4]
 800288c:	683a      	ldr	r2, [r7, #0]
 800288e:	4613      	mov	r3, r2
 8002890:	00db      	lsls	r3, r3, #3
 8002892:	4413      	add	r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	440b      	add	r3, r1
 8002898:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d108      	bne.n	80028b4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6818      	ldr	r0, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80028ac:	461a      	mov	r2, r3
 80028ae:	2100      	movs	r1, #0
 80028b0:	f003 f982 	bl	8005bb8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	4619      	mov	r1, r3
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f008 fa02 	bl	800acc4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3720      	adds	r7, #32
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	4f54300a 	.word	0x4f54300a
 80028d0:	4f54310a 	.word	0x4f54310a

080028d4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b086      	sub	sp, #24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	333c      	adds	r3, #60	; 0x3c
 80028ec:	3304      	adds	r3, #4
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	015a      	lsls	r2, r3, #5
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	4413      	add	r3, r2
 80028fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	4a15      	ldr	r2, [pc, #84]	; (800295c <PCD_EP_OutSetupPacket_int+0x88>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d90e      	bls.n	8002928 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002910:	2b00      	cmp	r3, #0
 8002912:	d009      	beq.n	8002928 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	015a      	lsls	r2, r3, #5
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	4413      	add	r3, r2
 800291c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002920:	461a      	mov	r2, r3
 8002922:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002926:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f008 f9b9 	bl	800aca0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	4a0a      	ldr	r2, [pc, #40]	; (800295c <PCD_EP_OutSetupPacket_int+0x88>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d90c      	bls.n	8002950 <PCD_EP_OutSetupPacket_int+0x7c>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d108      	bne.n	8002950 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6818      	ldr	r0, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002948:	461a      	mov	r2, r3
 800294a:	2101      	movs	r1, #1
 800294c:	f003 f934 	bl	8005bb8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3718      	adds	r7, #24
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	4f54300a 	.word	0x4f54300a

08002960 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002960:	b480      	push	{r7}
 8002962:	b085      	sub	sp, #20
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	460b      	mov	r3, r1
 800296a:	70fb      	strb	r3, [r7, #3]
 800296c:	4613      	mov	r3, r2
 800296e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002976:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002978:	78fb      	ldrb	r3, [r7, #3]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d107      	bne.n	800298e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800297e:	883b      	ldrh	r3, [r7, #0]
 8002980:	0419      	lsls	r1, r3, #16
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	68ba      	ldr	r2, [r7, #8]
 8002988:	430a      	orrs	r2, r1
 800298a:	629a      	str	r2, [r3, #40]	; 0x28
 800298c:	e028      	b.n	80029e0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002994:	0c1b      	lsrs	r3, r3, #16
 8002996:	68ba      	ldr	r2, [r7, #8]
 8002998:	4413      	add	r3, r2
 800299a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800299c:	2300      	movs	r3, #0
 800299e:	73fb      	strb	r3, [r7, #15]
 80029a0:	e00d      	b.n	80029be <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	7bfb      	ldrb	r3, [r7, #15]
 80029a8:	3340      	adds	r3, #64	; 0x40
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	4413      	add	r3, r2
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	0c1b      	lsrs	r3, r3, #16
 80029b2:	68ba      	ldr	r2, [r7, #8]
 80029b4:	4413      	add	r3, r2
 80029b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80029b8:	7bfb      	ldrb	r3, [r7, #15]
 80029ba:	3301      	adds	r3, #1
 80029bc:	73fb      	strb	r3, [r7, #15]
 80029be:	7bfa      	ldrb	r2, [r7, #15]
 80029c0:	78fb      	ldrb	r3, [r7, #3]
 80029c2:	3b01      	subs	r3, #1
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d3ec      	bcc.n	80029a2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80029c8:	883b      	ldrh	r3, [r7, #0]
 80029ca:	0418      	lsls	r0, r3, #16
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6819      	ldr	r1, [r3, #0]
 80029d0:	78fb      	ldrb	r3, [r7, #3]
 80029d2:	3b01      	subs	r3, #1
 80029d4:	68ba      	ldr	r2, [r7, #8]
 80029d6:	4302      	orrs	r2, r0
 80029d8:	3340      	adds	r3, #64	; 0x40
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	440b      	add	r3, r1
 80029de:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3714      	adds	r7, #20
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr

080029ee <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80029ee:	b480      	push	{r7}
 80029f0:	b083      	sub	sp, #12
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
 80029f6:	460b      	mov	r3, r1
 80029f8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	887a      	ldrh	r2, [r7, #2]
 8002a00:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	460b      	mov	r3, r1
 8002a1a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e267      	b.n	8002f0a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d075      	beq.n	8002b32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a46:	4b88      	ldr	r3, [pc, #544]	; (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f003 030c 	and.w	r3, r3, #12
 8002a4e:	2b04      	cmp	r3, #4
 8002a50:	d00c      	beq.n	8002a6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a52:	4b85      	ldr	r3, [pc, #532]	; (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a5a:	2b08      	cmp	r3, #8
 8002a5c:	d112      	bne.n	8002a84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a5e:	4b82      	ldr	r3, [pc, #520]	; (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a6a:	d10b      	bne.n	8002a84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a6c:	4b7e      	ldr	r3, [pc, #504]	; (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d05b      	beq.n	8002b30 <HAL_RCC_OscConfig+0x108>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d157      	bne.n	8002b30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e242      	b.n	8002f0a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a8c:	d106      	bne.n	8002a9c <HAL_RCC_OscConfig+0x74>
 8002a8e:	4b76      	ldr	r3, [pc, #472]	; (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a75      	ldr	r2, [pc, #468]	; (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002a94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a98:	6013      	str	r3, [r2, #0]
 8002a9a:	e01d      	b.n	8002ad8 <HAL_RCC_OscConfig+0xb0>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002aa4:	d10c      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x98>
 8002aa6:	4b70      	ldr	r3, [pc, #448]	; (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a6f      	ldr	r2, [pc, #444]	; (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002aac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ab0:	6013      	str	r3, [r2, #0]
 8002ab2:	4b6d      	ldr	r3, [pc, #436]	; (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a6c      	ldr	r2, [pc, #432]	; (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002ab8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002abc:	6013      	str	r3, [r2, #0]
 8002abe:	e00b      	b.n	8002ad8 <HAL_RCC_OscConfig+0xb0>
 8002ac0:	4b69      	ldr	r3, [pc, #420]	; (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a68      	ldr	r2, [pc, #416]	; (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002ac6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aca:	6013      	str	r3, [r2, #0]
 8002acc:	4b66      	ldr	r3, [pc, #408]	; (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a65      	ldr	r2, [pc, #404]	; (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002ad2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ad6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d013      	beq.n	8002b08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae0:	f7fe fa44 	bl	8000f6c <HAL_GetTick>
 8002ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ae6:	e008      	b.n	8002afa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ae8:	f7fe fa40 	bl	8000f6c <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b64      	cmp	r3, #100	; 0x64
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e207      	b.n	8002f0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002afa:	4b5b      	ldr	r3, [pc, #364]	; (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d0f0      	beq.n	8002ae8 <HAL_RCC_OscConfig+0xc0>
 8002b06:	e014      	b.n	8002b32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b08:	f7fe fa30 	bl	8000f6c <HAL_GetTick>
 8002b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b10:	f7fe fa2c 	bl	8000f6c <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b64      	cmp	r3, #100	; 0x64
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e1f3      	b.n	8002f0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b22:	4b51      	ldr	r3, [pc, #324]	; (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1f0      	bne.n	8002b10 <HAL_RCC_OscConfig+0xe8>
 8002b2e:	e000      	b.n	8002b32 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d063      	beq.n	8002c06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b3e:	4b4a      	ldr	r3, [pc, #296]	; (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f003 030c 	and.w	r3, r3, #12
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00b      	beq.n	8002b62 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b4a:	4b47      	ldr	r3, [pc, #284]	; (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b52:	2b08      	cmp	r3, #8
 8002b54:	d11c      	bne.n	8002b90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b56:	4b44      	ldr	r3, [pc, #272]	; (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d116      	bne.n	8002b90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b62:	4b41      	ldr	r3, [pc, #260]	; (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d005      	beq.n	8002b7a <HAL_RCC_OscConfig+0x152>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d001      	beq.n	8002b7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e1c7      	b.n	8002f0a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b7a:	4b3b      	ldr	r3, [pc, #236]	; (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	00db      	lsls	r3, r3, #3
 8002b88:	4937      	ldr	r1, [pc, #220]	; (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b8e:	e03a      	b.n	8002c06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d020      	beq.n	8002bda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b98:	4b34      	ldr	r3, [pc, #208]	; (8002c6c <HAL_RCC_OscConfig+0x244>)
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b9e:	f7fe f9e5 	bl	8000f6c <HAL_GetTick>
 8002ba2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ba4:	e008      	b.n	8002bb8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ba6:	f7fe f9e1 	bl	8000f6c <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d901      	bls.n	8002bb8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e1a8      	b.n	8002f0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bb8:	4b2b      	ldr	r3, [pc, #172]	; (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0302 	and.w	r3, r3, #2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d0f0      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bc4:	4b28      	ldr	r3, [pc, #160]	; (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	691b      	ldr	r3, [r3, #16]
 8002bd0:	00db      	lsls	r3, r3, #3
 8002bd2:	4925      	ldr	r1, [pc, #148]	; (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	600b      	str	r3, [r1, #0]
 8002bd8:	e015      	b.n	8002c06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bda:	4b24      	ldr	r3, [pc, #144]	; (8002c6c <HAL_RCC_OscConfig+0x244>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be0:	f7fe f9c4 	bl	8000f6c <HAL_GetTick>
 8002be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002be6:	e008      	b.n	8002bfa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002be8:	f7fe f9c0 	bl	8000f6c <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e187      	b.n	8002f0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bfa:	4b1b      	ldr	r3, [pc, #108]	; (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1f0      	bne.n	8002be8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0308 	and.w	r3, r3, #8
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d036      	beq.n	8002c80 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d016      	beq.n	8002c48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c1a:	4b15      	ldr	r3, [pc, #84]	; (8002c70 <HAL_RCC_OscConfig+0x248>)
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c20:	f7fe f9a4 	bl	8000f6c <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c28:	f7fe f9a0 	bl	8000f6c <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e167      	b.n	8002f0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c3a:	4b0b      	ldr	r3, [pc, #44]	; (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002c3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d0f0      	beq.n	8002c28 <HAL_RCC_OscConfig+0x200>
 8002c46:	e01b      	b.n	8002c80 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c48:	4b09      	ldr	r3, [pc, #36]	; (8002c70 <HAL_RCC_OscConfig+0x248>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c4e:	f7fe f98d 	bl	8000f6c <HAL_GetTick>
 8002c52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c54:	e00e      	b.n	8002c74 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c56:	f7fe f989 	bl	8000f6c <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d907      	bls.n	8002c74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e150      	b.n	8002f0a <HAL_RCC_OscConfig+0x4e2>
 8002c68:	40023800 	.word	0x40023800
 8002c6c:	42470000 	.word	0x42470000
 8002c70:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c74:	4b88      	ldr	r3, [pc, #544]	; (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002c76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c78:	f003 0302 	and.w	r3, r3, #2
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d1ea      	bne.n	8002c56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0304 	and.w	r3, r3, #4
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	f000 8097 	beq.w	8002dbc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c92:	4b81      	ldr	r3, [pc, #516]	; (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d10f      	bne.n	8002cbe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	60bb      	str	r3, [r7, #8]
 8002ca2:	4b7d      	ldr	r3, [pc, #500]	; (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca6:	4a7c      	ldr	r2, [pc, #496]	; (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002ca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cac:	6413      	str	r3, [r2, #64]	; 0x40
 8002cae:	4b7a      	ldr	r3, [pc, #488]	; (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cb6:	60bb      	str	r3, [r7, #8]
 8002cb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cbe:	4b77      	ldr	r3, [pc, #476]	; (8002e9c <HAL_RCC_OscConfig+0x474>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d118      	bne.n	8002cfc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cca:	4b74      	ldr	r3, [pc, #464]	; (8002e9c <HAL_RCC_OscConfig+0x474>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a73      	ldr	r2, [pc, #460]	; (8002e9c <HAL_RCC_OscConfig+0x474>)
 8002cd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cd6:	f7fe f949 	bl	8000f6c <HAL_GetTick>
 8002cda:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cdc:	e008      	b.n	8002cf0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cde:	f7fe f945 	bl	8000f6c <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d901      	bls.n	8002cf0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e10c      	b.n	8002f0a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cf0:	4b6a      	ldr	r3, [pc, #424]	; (8002e9c <HAL_RCC_OscConfig+0x474>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d0f0      	beq.n	8002cde <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d106      	bne.n	8002d12 <HAL_RCC_OscConfig+0x2ea>
 8002d04:	4b64      	ldr	r3, [pc, #400]	; (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d08:	4a63      	ldr	r2, [pc, #396]	; (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002d0a:	f043 0301 	orr.w	r3, r3, #1
 8002d0e:	6713      	str	r3, [r2, #112]	; 0x70
 8002d10:	e01c      	b.n	8002d4c <HAL_RCC_OscConfig+0x324>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	2b05      	cmp	r3, #5
 8002d18:	d10c      	bne.n	8002d34 <HAL_RCC_OscConfig+0x30c>
 8002d1a:	4b5f      	ldr	r3, [pc, #380]	; (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d1e:	4a5e      	ldr	r2, [pc, #376]	; (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002d20:	f043 0304 	orr.w	r3, r3, #4
 8002d24:	6713      	str	r3, [r2, #112]	; 0x70
 8002d26:	4b5c      	ldr	r3, [pc, #368]	; (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d2a:	4a5b      	ldr	r2, [pc, #364]	; (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002d2c:	f043 0301 	orr.w	r3, r3, #1
 8002d30:	6713      	str	r3, [r2, #112]	; 0x70
 8002d32:	e00b      	b.n	8002d4c <HAL_RCC_OscConfig+0x324>
 8002d34:	4b58      	ldr	r3, [pc, #352]	; (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d38:	4a57      	ldr	r2, [pc, #348]	; (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002d3a:	f023 0301 	bic.w	r3, r3, #1
 8002d3e:	6713      	str	r3, [r2, #112]	; 0x70
 8002d40:	4b55      	ldr	r3, [pc, #340]	; (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d44:	4a54      	ldr	r2, [pc, #336]	; (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002d46:	f023 0304 	bic.w	r3, r3, #4
 8002d4a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d015      	beq.n	8002d80 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d54:	f7fe f90a 	bl	8000f6c <HAL_GetTick>
 8002d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d5a:	e00a      	b.n	8002d72 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d5c:	f7fe f906 	bl	8000f6c <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e0cb      	b.n	8002f0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d72:	4b49      	ldr	r3, [pc, #292]	; (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d0ee      	beq.n	8002d5c <HAL_RCC_OscConfig+0x334>
 8002d7e:	e014      	b.n	8002daa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d80:	f7fe f8f4 	bl	8000f6c <HAL_GetTick>
 8002d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d86:	e00a      	b.n	8002d9e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d88:	f7fe f8f0 	bl	8000f6c <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e0b5      	b.n	8002f0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d9e:	4b3e      	ldr	r3, [pc, #248]	; (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1ee      	bne.n	8002d88 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002daa:	7dfb      	ldrb	r3, [r7, #23]
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d105      	bne.n	8002dbc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002db0:	4b39      	ldr	r3, [pc, #228]	; (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db4:	4a38      	ldr	r2, [pc, #224]	; (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002db6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	699b      	ldr	r3, [r3, #24]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f000 80a1 	beq.w	8002f08 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002dc6:	4b34      	ldr	r3, [pc, #208]	; (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f003 030c 	and.w	r3, r3, #12
 8002dce:	2b08      	cmp	r3, #8
 8002dd0:	d05c      	beq.n	8002e8c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d141      	bne.n	8002e5e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dda:	4b31      	ldr	r3, [pc, #196]	; (8002ea0 <HAL_RCC_OscConfig+0x478>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de0:	f7fe f8c4 	bl	8000f6c <HAL_GetTick>
 8002de4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002de6:	e008      	b.n	8002dfa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002de8:	f7fe f8c0 	bl	8000f6c <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e087      	b.n	8002f0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dfa:	4b27      	ldr	r3, [pc, #156]	; (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1f0      	bne.n	8002de8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	69da      	ldr	r2, [r3, #28]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a1b      	ldr	r3, [r3, #32]
 8002e0e:	431a      	orrs	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e14:	019b      	lsls	r3, r3, #6
 8002e16:	431a      	orrs	r2, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e1c:	085b      	lsrs	r3, r3, #1
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	041b      	lsls	r3, r3, #16
 8002e22:	431a      	orrs	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e28:	061b      	lsls	r3, r3, #24
 8002e2a:	491b      	ldr	r1, [pc, #108]	; (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e30:	4b1b      	ldr	r3, [pc, #108]	; (8002ea0 <HAL_RCC_OscConfig+0x478>)
 8002e32:	2201      	movs	r2, #1
 8002e34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e36:	f7fe f899 	bl	8000f6c <HAL_GetTick>
 8002e3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e3c:	e008      	b.n	8002e50 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e3e:	f7fe f895 	bl	8000f6c <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d901      	bls.n	8002e50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e05c      	b.n	8002f0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e50:	4b11      	ldr	r3, [pc, #68]	; (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d0f0      	beq.n	8002e3e <HAL_RCC_OscConfig+0x416>
 8002e5c:	e054      	b.n	8002f08 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e5e:	4b10      	ldr	r3, [pc, #64]	; (8002ea0 <HAL_RCC_OscConfig+0x478>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e64:	f7fe f882 	bl	8000f6c <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e6c:	f7fe f87e 	bl	8000f6c <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e045      	b.n	8002f0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e7e:	4b06      	ldr	r3, [pc, #24]	; (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1f0      	bne.n	8002e6c <HAL_RCC_OscConfig+0x444>
 8002e8a:	e03d      	b.n	8002f08 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d107      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e038      	b.n	8002f0a <HAL_RCC_OscConfig+0x4e2>
 8002e98:	40023800 	.word	0x40023800
 8002e9c:	40007000 	.word	0x40007000
 8002ea0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ea4:	4b1b      	ldr	r3, [pc, #108]	; (8002f14 <HAL_RCC_OscConfig+0x4ec>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	699b      	ldr	r3, [r3, #24]
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d028      	beq.n	8002f04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d121      	bne.n	8002f04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d11a      	bne.n	8002f04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002eda:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d111      	bne.n	8002f04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eea:	085b      	lsrs	r3, r3, #1
 8002eec:	3b01      	subs	r3, #1
 8002eee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d107      	bne.n	8002f04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002efe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d001      	beq.n	8002f08 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e000      	b.n	8002f0a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3718      	adds	r7, #24
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	40023800 	.word	0x40023800

08002f18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d101      	bne.n	8002f2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e0cc      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f2c:	4b68      	ldr	r3, [pc, #416]	; (80030d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0307 	and.w	r3, r3, #7
 8002f34:	683a      	ldr	r2, [r7, #0]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d90c      	bls.n	8002f54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f3a:	4b65      	ldr	r3, [pc, #404]	; (80030d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f3c:	683a      	ldr	r2, [r7, #0]
 8002f3e:	b2d2      	uxtb	r2, r2
 8002f40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f42:	4b63      	ldr	r3, [pc, #396]	; (80030d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0307 	and.w	r3, r3, #7
 8002f4a:	683a      	ldr	r2, [r7, #0]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d001      	beq.n	8002f54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e0b8      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0302 	and.w	r3, r3, #2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d020      	beq.n	8002fa2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0304 	and.w	r3, r3, #4
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d005      	beq.n	8002f78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f6c:	4b59      	ldr	r3, [pc, #356]	; (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	4a58      	ldr	r2, [pc, #352]	; (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0308 	and.w	r3, r3, #8
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d005      	beq.n	8002f90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f84:	4b53      	ldr	r3, [pc, #332]	; (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	4a52      	ldr	r2, [pc, #328]	; (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f90:	4b50      	ldr	r3, [pc, #320]	; (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	494d      	ldr	r1, [pc, #308]	; (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0301 	and.w	r3, r3, #1
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d044      	beq.n	8003038 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d107      	bne.n	8002fc6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fb6:	4b47      	ldr	r3, [pc, #284]	; (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d119      	bne.n	8002ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e07f      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d003      	beq.n	8002fd6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fd2:	2b03      	cmp	r3, #3
 8002fd4:	d107      	bne.n	8002fe6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fd6:	4b3f      	ldr	r3, [pc, #252]	; (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d109      	bne.n	8002ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e06f      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fe6:	4b3b      	ldr	r3, [pc, #236]	; (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e067      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ff6:	4b37      	ldr	r3, [pc, #220]	; (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f023 0203 	bic.w	r2, r3, #3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	4934      	ldr	r1, [pc, #208]	; (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003004:	4313      	orrs	r3, r2
 8003006:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003008:	f7fd ffb0 	bl	8000f6c <HAL_GetTick>
 800300c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800300e:	e00a      	b.n	8003026 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003010:	f7fd ffac 	bl	8000f6c <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	f241 3288 	movw	r2, #5000	; 0x1388
 800301e:	4293      	cmp	r3, r2
 8003020:	d901      	bls.n	8003026 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e04f      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003026:	4b2b      	ldr	r3, [pc, #172]	; (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f003 020c 	and.w	r2, r3, #12
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	429a      	cmp	r2, r3
 8003036:	d1eb      	bne.n	8003010 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003038:	4b25      	ldr	r3, [pc, #148]	; (80030d0 <HAL_RCC_ClockConfig+0x1b8>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0307 	and.w	r3, r3, #7
 8003040:	683a      	ldr	r2, [r7, #0]
 8003042:	429a      	cmp	r2, r3
 8003044:	d20c      	bcs.n	8003060 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003046:	4b22      	ldr	r3, [pc, #136]	; (80030d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003048:	683a      	ldr	r2, [r7, #0]
 800304a:	b2d2      	uxtb	r2, r2
 800304c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800304e:	4b20      	ldr	r3, [pc, #128]	; (80030d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0307 	and.w	r3, r3, #7
 8003056:	683a      	ldr	r2, [r7, #0]
 8003058:	429a      	cmp	r2, r3
 800305a:	d001      	beq.n	8003060 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e032      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0304 	and.w	r3, r3, #4
 8003068:	2b00      	cmp	r3, #0
 800306a:	d008      	beq.n	800307e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800306c:	4b19      	ldr	r3, [pc, #100]	; (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	4916      	ldr	r1, [pc, #88]	; (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 800307a:	4313      	orrs	r3, r2
 800307c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0308 	and.w	r3, r3, #8
 8003086:	2b00      	cmp	r3, #0
 8003088:	d009      	beq.n	800309e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800308a:	4b12      	ldr	r3, [pc, #72]	; (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	490e      	ldr	r1, [pc, #56]	; (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 800309a:	4313      	orrs	r3, r2
 800309c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800309e:	f000 f821 	bl	80030e4 <HAL_RCC_GetSysClockFreq>
 80030a2:	4602      	mov	r2, r0
 80030a4:	4b0b      	ldr	r3, [pc, #44]	; (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	091b      	lsrs	r3, r3, #4
 80030aa:	f003 030f 	and.w	r3, r3, #15
 80030ae:	490a      	ldr	r1, [pc, #40]	; (80030d8 <HAL_RCC_ClockConfig+0x1c0>)
 80030b0:	5ccb      	ldrb	r3, [r1, r3]
 80030b2:	fa22 f303 	lsr.w	r3, r2, r3
 80030b6:	4a09      	ldr	r2, [pc, #36]	; (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 80030b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80030ba:	4b09      	ldr	r3, [pc, #36]	; (80030e0 <HAL_RCC_ClockConfig+0x1c8>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4618      	mov	r0, r3
 80030c0:	f7fd fde4 	bl	8000c8c <HAL_InitTick>

  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3710      	adds	r7, #16
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	40023c00 	.word	0x40023c00
 80030d4:	40023800 	.word	0x40023800
 80030d8:	0800ba20 	.word	0x0800ba20
 80030dc:	20000000 	.word	0x20000000
 80030e0:	20000004 	.word	0x20000004

080030e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030e8:	b094      	sub	sp, #80	; 0x50
 80030ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80030ec:	2300      	movs	r3, #0
 80030ee:	647b      	str	r3, [r7, #68]	; 0x44
 80030f0:	2300      	movs	r3, #0
 80030f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030f4:	2300      	movs	r3, #0
 80030f6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80030f8:	2300      	movs	r3, #0
 80030fa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030fc:	4b79      	ldr	r3, [pc, #484]	; (80032e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f003 030c 	and.w	r3, r3, #12
 8003104:	2b08      	cmp	r3, #8
 8003106:	d00d      	beq.n	8003124 <HAL_RCC_GetSysClockFreq+0x40>
 8003108:	2b08      	cmp	r3, #8
 800310a:	f200 80e1 	bhi.w	80032d0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800310e:	2b00      	cmp	r3, #0
 8003110:	d002      	beq.n	8003118 <HAL_RCC_GetSysClockFreq+0x34>
 8003112:	2b04      	cmp	r3, #4
 8003114:	d003      	beq.n	800311e <HAL_RCC_GetSysClockFreq+0x3a>
 8003116:	e0db      	b.n	80032d0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003118:	4b73      	ldr	r3, [pc, #460]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x204>)
 800311a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800311c:	e0db      	b.n	80032d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800311e:	4b73      	ldr	r3, [pc, #460]	; (80032ec <HAL_RCC_GetSysClockFreq+0x208>)
 8003120:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003122:	e0d8      	b.n	80032d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003124:	4b6f      	ldr	r3, [pc, #444]	; (80032e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800312c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800312e:	4b6d      	ldr	r3, [pc, #436]	; (80032e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d063      	beq.n	8003202 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800313a:	4b6a      	ldr	r3, [pc, #424]	; (80032e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	099b      	lsrs	r3, r3, #6
 8003140:	2200      	movs	r2, #0
 8003142:	63bb      	str	r3, [r7, #56]	; 0x38
 8003144:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003148:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800314c:	633b      	str	r3, [r7, #48]	; 0x30
 800314e:	2300      	movs	r3, #0
 8003150:	637b      	str	r3, [r7, #52]	; 0x34
 8003152:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003156:	4622      	mov	r2, r4
 8003158:	462b      	mov	r3, r5
 800315a:	f04f 0000 	mov.w	r0, #0
 800315e:	f04f 0100 	mov.w	r1, #0
 8003162:	0159      	lsls	r1, r3, #5
 8003164:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003168:	0150      	lsls	r0, r2, #5
 800316a:	4602      	mov	r2, r0
 800316c:	460b      	mov	r3, r1
 800316e:	4621      	mov	r1, r4
 8003170:	1a51      	subs	r1, r2, r1
 8003172:	6139      	str	r1, [r7, #16]
 8003174:	4629      	mov	r1, r5
 8003176:	eb63 0301 	sbc.w	r3, r3, r1
 800317a:	617b      	str	r3, [r7, #20]
 800317c:	f04f 0200 	mov.w	r2, #0
 8003180:	f04f 0300 	mov.w	r3, #0
 8003184:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003188:	4659      	mov	r1, fp
 800318a:	018b      	lsls	r3, r1, #6
 800318c:	4651      	mov	r1, sl
 800318e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003192:	4651      	mov	r1, sl
 8003194:	018a      	lsls	r2, r1, #6
 8003196:	4651      	mov	r1, sl
 8003198:	ebb2 0801 	subs.w	r8, r2, r1
 800319c:	4659      	mov	r1, fp
 800319e:	eb63 0901 	sbc.w	r9, r3, r1
 80031a2:	f04f 0200 	mov.w	r2, #0
 80031a6:	f04f 0300 	mov.w	r3, #0
 80031aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031b6:	4690      	mov	r8, r2
 80031b8:	4699      	mov	r9, r3
 80031ba:	4623      	mov	r3, r4
 80031bc:	eb18 0303 	adds.w	r3, r8, r3
 80031c0:	60bb      	str	r3, [r7, #8]
 80031c2:	462b      	mov	r3, r5
 80031c4:	eb49 0303 	adc.w	r3, r9, r3
 80031c8:	60fb      	str	r3, [r7, #12]
 80031ca:	f04f 0200 	mov.w	r2, #0
 80031ce:	f04f 0300 	mov.w	r3, #0
 80031d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80031d6:	4629      	mov	r1, r5
 80031d8:	024b      	lsls	r3, r1, #9
 80031da:	4621      	mov	r1, r4
 80031dc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80031e0:	4621      	mov	r1, r4
 80031e2:	024a      	lsls	r2, r1, #9
 80031e4:	4610      	mov	r0, r2
 80031e6:	4619      	mov	r1, r3
 80031e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031ea:	2200      	movs	r2, #0
 80031ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80031ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80031f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80031f4:	f7fc fff4 	bl	80001e0 <__aeabi_uldivmod>
 80031f8:	4602      	mov	r2, r0
 80031fa:	460b      	mov	r3, r1
 80031fc:	4613      	mov	r3, r2
 80031fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003200:	e058      	b.n	80032b4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003202:	4b38      	ldr	r3, [pc, #224]	; (80032e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	099b      	lsrs	r3, r3, #6
 8003208:	2200      	movs	r2, #0
 800320a:	4618      	mov	r0, r3
 800320c:	4611      	mov	r1, r2
 800320e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003212:	623b      	str	r3, [r7, #32]
 8003214:	2300      	movs	r3, #0
 8003216:	627b      	str	r3, [r7, #36]	; 0x24
 8003218:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800321c:	4642      	mov	r2, r8
 800321e:	464b      	mov	r3, r9
 8003220:	f04f 0000 	mov.w	r0, #0
 8003224:	f04f 0100 	mov.w	r1, #0
 8003228:	0159      	lsls	r1, r3, #5
 800322a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800322e:	0150      	lsls	r0, r2, #5
 8003230:	4602      	mov	r2, r0
 8003232:	460b      	mov	r3, r1
 8003234:	4641      	mov	r1, r8
 8003236:	ebb2 0a01 	subs.w	sl, r2, r1
 800323a:	4649      	mov	r1, r9
 800323c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003240:	f04f 0200 	mov.w	r2, #0
 8003244:	f04f 0300 	mov.w	r3, #0
 8003248:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800324c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003250:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003254:	ebb2 040a 	subs.w	r4, r2, sl
 8003258:	eb63 050b 	sbc.w	r5, r3, fp
 800325c:	f04f 0200 	mov.w	r2, #0
 8003260:	f04f 0300 	mov.w	r3, #0
 8003264:	00eb      	lsls	r3, r5, #3
 8003266:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800326a:	00e2      	lsls	r2, r4, #3
 800326c:	4614      	mov	r4, r2
 800326e:	461d      	mov	r5, r3
 8003270:	4643      	mov	r3, r8
 8003272:	18e3      	adds	r3, r4, r3
 8003274:	603b      	str	r3, [r7, #0]
 8003276:	464b      	mov	r3, r9
 8003278:	eb45 0303 	adc.w	r3, r5, r3
 800327c:	607b      	str	r3, [r7, #4]
 800327e:	f04f 0200 	mov.w	r2, #0
 8003282:	f04f 0300 	mov.w	r3, #0
 8003286:	e9d7 4500 	ldrd	r4, r5, [r7]
 800328a:	4629      	mov	r1, r5
 800328c:	028b      	lsls	r3, r1, #10
 800328e:	4621      	mov	r1, r4
 8003290:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003294:	4621      	mov	r1, r4
 8003296:	028a      	lsls	r2, r1, #10
 8003298:	4610      	mov	r0, r2
 800329a:	4619      	mov	r1, r3
 800329c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800329e:	2200      	movs	r2, #0
 80032a0:	61bb      	str	r3, [r7, #24]
 80032a2:	61fa      	str	r2, [r7, #28]
 80032a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032a8:	f7fc ff9a 	bl	80001e0 <__aeabi_uldivmod>
 80032ac:	4602      	mov	r2, r0
 80032ae:	460b      	mov	r3, r1
 80032b0:	4613      	mov	r3, r2
 80032b2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80032b4:	4b0b      	ldr	r3, [pc, #44]	; (80032e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	0c1b      	lsrs	r3, r3, #16
 80032ba:	f003 0303 	and.w	r3, r3, #3
 80032be:	3301      	adds	r3, #1
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80032c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80032c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032ce:	e002      	b.n	80032d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032d0:	4b05      	ldr	r3, [pc, #20]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x204>)
 80032d2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3750      	adds	r7, #80	; 0x50
 80032dc:	46bd      	mov	sp, r7
 80032de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032e2:	bf00      	nop
 80032e4:	40023800 	.word	0x40023800
 80032e8:	00f42400 	.word	0x00f42400
 80032ec:	007a1200 	.word	0x007a1200

080032f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032f0:	b480      	push	{r7}
 80032f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032f4:	4b03      	ldr	r3, [pc, #12]	; (8003304 <HAL_RCC_GetHCLKFreq+0x14>)
 80032f6:	681b      	ldr	r3, [r3, #0]
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	20000000 	.word	0x20000000

08003308 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800330c:	f7ff fff0 	bl	80032f0 <HAL_RCC_GetHCLKFreq>
 8003310:	4602      	mov	r2, r0
 8003312:	4b05      	ldr	r3, [pc, #20]	; (8003328 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	0a9b      	lsrs	r3, r3, #10
 8003318:	f003 0307 	and.w	r3, r3, #7
 800331c:	4903      	ldr	r1, [pc, #12]	; (800332c <HAL_RCC_GetPCLK1Freq+0x24>)
 800331e:	5ccb      	ldrb	r3, [r1, r3]
 8003320:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003324:	4618      	mov	r0, r3
 8003326:	bd80      	pop	{r7, pc}
 8003328:	40023800 	.word	0x40023800
 800332c:	0800ba30 	.word	0x0800ba30

08003330 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	220f      	movs	r2, #15
 800333e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003340:	4b12      	ldr	r3, [pc, #72]	; (800338c <HAL_RCC_GetClockConfig+0x5c>)
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f003 0203 	and.w	r2, r3, #3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800334c:	4b0f      	ldr	r3, [pc, #60]	; (800338c <HAL_RCC_GetClockConfig+0x5c>)
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003358:	4b0c      	ldr	r3, [pc, #48]	; (800338c <HAL_RCC_GetClockConfig+0x5c>)
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003364:	4b09      	ldr	r3, [pc, #36]	; (800338c <HAL_RCC_GetClockConfig+0x5c>)
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	08db      	lsrs	r3, r3, #3
 800336a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003372:	4b07      	ldr	r3, [pc, #28]	; (8003390 <HAL_RCC_GetClockConfig+0x60>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0207 	and.w	r2, r3, #7
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	601a      	str	r2, [r3, #0]
}
 800337e:	bf00      	nop
 8003380:	370c      	adds	r7, #12
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	40023800 	.word	0x40023800
 8003390:	40023c00 	.word	0x40023c00

08003394 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d101      	bne.n	80033a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e07b      	b.n	800349e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d108      	bne.n	80033c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033b6:	d009      	beq.n	80033cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	61da      	str	r2, [r3, #28]
 80033be:	e005      	b.n	80033cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d106      	bne.n	80033ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f7fd fc08 	bl	8000bfc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2202      	movs	r2, #2
 80033f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003402:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003414:	431a      	orrs	r2, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800341e:	431a      	orrs	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	691b      	ldr	r3, [r3, #16]
 8003424:	f003 0302 	and.w	r3, r3, #2
 8003428:	431a      	orrs	r2, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	f003 0301 	and.w	r3, r3, #1
 8003432:	431a      	orrs	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800343c:	431a      	orrs	r2, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	69db      	ldr	r3, [r3, #28]
 8003442:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003446:	431a      	orrs	r2, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a1b      	ldr	r3, [r3, #32]
 800344c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003450:	ea42 0103 	orr.w	r1, r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003458:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	430a      	orrs	r2, r1
 8003462:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	699b      	ldr	r3, [r3, #24]
 8003468:	0c1b      	lsrs	r3, r3, #16
 800346a:	f003 0104 	and.w	r1, r3, #4
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003472:	f003 0210 	and.w	r2, r3, #16
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	430a      	orrs	r2, r1
 800347c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	69da      	ldr	r2, [r3, #28]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800348c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3708      	adds	r7, #8
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b088      	sub	sp, #32
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	60f8      	str	r0, [r7, #12]
 80034ae:	60b9      	str	r1, [r7, #8]
 80034b0:	603b      	str	r3, [r7, #0]
 80034b2:	4613      	mov	r3, r2
 80034b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80034b6:	2300      	movs	r3, #0
 80034b8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d101      	bne.n	80034c8 <HAL_SPI_Transmit+0x22>
 80034c4:	2302      	movs	r3, #2
 80034c6:	e126      	b.n	8003716 <HAL_SPI_Transmit+0x270>
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034d0:	f7fd fd4c 	bl	8000f6c <HAL_GetTick>
 80034d4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80034d6:	88fb      	ldrh	r3, [r7, #6]
 80034d8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d002      	beq.n	80034ec <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80034e6:	2302      	movs	r3, #2
 80034e8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80034ea:	e10b      	b.n	8003704 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d002      	beq.n	80034f8 <HAL_SPI_Transmit+0x52>
 80034f2:	88fb      	ldrh	r3, [r7, #6]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d102      	bne.n	80034fe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80034fc:	e102      	b.n	8003704 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2203      	movs	r2, #3
 8003502:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	68ba      	ldr	r2, [r7, #8]
 8003510:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	88fa      	ldrh	r2, [r7, #6]
 8003516:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	88fa      	ldrh	r2, [r7, #6]
 800351c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2200      	movs	r2, #0
 8003522:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2200      	movs	r2, #0
 8003528:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2200      	movs	r2, #0
 800352e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2200      	movs	r2, #0
 800353a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003544:	d10f      	bne.n	8003566 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003554:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003564:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003570:	2b40      	cmp	r3, #64	; 0x40
 8003572:	d007      	beq.n	8003584 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003582:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800358c:	d14b      	bne.n	8003626 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d002      	beq.n	800359c <HAL_SPI_Transmit+0xf6>
 8003596:	8afb      	ldrh	r3, [r7, #22]
 8003598:	2b01      	cmp	r3, #1
 800359a:	d13e      	bne.n	800361a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a0:	881a      	ldrh	r2, [r3, #0]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ac:	1c9a      	adds	r2, r3, #2
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	3b01      	subs	r3, #1
 80035ba:	b29a      	uxth	r2, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80035c0:	e02b      	b.n	800361a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	f003 0302 	and.w	r3, r3, #2
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d112      	bne.n	80035f6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d4:	881a      	ldrh	r2, [r3, #0]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e0:	1c9a      	adds	r2, r3, #2
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	3b01      	subs	r3, #1
 80035ee:	b29a      	uxth	r2, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	86da      	strh	r2, [r3, #54]	; 0x36
 80035f4:	e011      	b.n	800361a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035f6:	f7fd fcb9 	bl	8000f6c <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	683a      	ldr	r2, [r7, #0]
 8003602:	429a      	cmp	r2, r3
 8003604:	d803      	bhi.n	800360e <HAL_SPI_Transmit+0x168>
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800360c:	d102      	bne.n	8003614 <HAL_SPI_Transmit+0x16e>
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d102      	bne.n	800361a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003618:	e074      	b.n	8003704 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800361e:	b29b      	uxth	r3, r3
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1ce      	bne.n	80035c2 <HAL_SPI_Transmit+0x11c>
 8003624:	e04c      	b.n	80036c0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d002      	beq.n	8003634 <HAL_SPI_Transmit+0x18e>
 800362e:	8afb      	ldrh	r3, [r7, #22]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d140      	bne.n	80036b6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	330c      	adds	r3, #12
 800363e:	7812      	ldrb	r2, [r2, #0]
 8003640:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003646:	1c5a      	adds	r2, r3, #1
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003650:	b29b      	uxth	r3, r3
 8003652:	3b01      	subs	r3, #1
 8003654:	b29a      	uxth	r2, r3
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800365a:	e02c      	b.n	80036b6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	2b02      	cmp	r3, #2
 8003668:	d113      	bne.n	8003692 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	330c      	adds	r3, #12
 8003674:	7812      	ldrb	r2, [r2, #0]
 8003676:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367c:	1c5a      	adds	r2, r3, #1
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003686:	b29b      	uxth	r3, r3
 8003688:	3b01      	subs	r3, #1
 800368a:	b29a      	uxth	r2, r3
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003690:	e011      	b.n	80036b6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003692:	f7fd fc6b 	bl	8000f6c <HAL_GetTick>
 8003696:	4602      	mov	r2, r0
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	683a      	ldr	r2, [r7, #0]
 800369e:	429a      	cmp	r2, r3
 80036a0:	d803      	bhi.n	80036aa <HAL_SPI_Transmit+0x204>
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036a8:	d102      	bne.n	80036b0 <HAL_SPI_Transmit+0x20a>
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d102      	bne.n	80036b6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80036b4:	e026      	b.n	8003704 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d1cd      	bne.n	800365c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036c0:	69ba      	ldr	r2, [r7, #24]
 80036c2:	6839      	ldr	r1, [r7, #0]
 80036c4:	68f8      	ldr	r0, [r7, #12]
 80036c6:	f000 fbcb 	bl	8003e60 <SPI_EndRxTxTransaction>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d002      	beq.n	80036d6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2220      	movs	r2, #32
 80036d4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d10a      	bne.n	80036f4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80036de:	2300      	movs	r3, #0
 80036e0:	613b      	str	r3, [r7, #16]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	613b      	str	r3, [r7, #16]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	613b      	str	r3, [r7, #16]
 80036f2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d002      	beq.n	8003702 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	77fb      	strb	r3, [r7, #31]
 8003700:	e000      	b.n	8003704 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003702:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003714:	7ffb      	ldrb	r3, [r7, #31]
}
 8003716:	4618      	mov	r0, r3
 8003718:	3720      	adds	r7, #32
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}

0800371e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800371e:	b580      	push	{r7, lr}
 8003720:	b088      	sub	sp, #32
 8003722:	af02      	add	r7, sp, #8
 8003724:	60f8      	str	r0, [r7, #12]
 8003726:	60b9      	str	r1, [r7, #8]
 8003728:	603b      	str	r3, [r7, #0]
 800372a:	4613      	mov	r3, r2
 800372c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800372e:	2300      	movs	r3, #0
 8003730:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800373a:	d112      	bne.n	8003762 <HAL_SPI_Receive+0x44>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d10e      	bne.n	8003762 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2204      	movs	r2, #4
 8003748:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800374c:	88fa      	ldrh	r2, [r7, #6]
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	9300      	str	r3, [sp, #0]
 8003752:	4613      	mov	r3, r2
 8003754:	68ba      	ldr	r2, [r7, #8]
 8003756:	68b9      	ldr	r1, [r7, #8]
 8003758:	68f8      	ldr	r0, [r7, #12]
 800375a:	f000 f8f1 	bl	8003940 <HAL_SPI_TransmitReceive>
 800375e:	4603      	mov	r3, r0
 8003760:	e0ea      	b.n	8003938 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003768:	2b01      	cmp	r3, #1
 800376a:	d101      	bne.n	8003770 <HAL_SPI_Receive+0x52>
 800376c:	2302      	movs	r3, #2
 800376e:	e0e3      	b.n	8003938 <HAL_SPI_Receive+0x21a>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003778:	f7fd fbf8 	bl	8000f6c <HAL_GetTick>
 800377c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b01      	cmp	r3, #1
 8003788:	d002      	beq.n	8003790 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800378a:	2302      	movs	r3, #2
 800378c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800378e:	e0ca      	b.n	8003926 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d002      	beq.n	800379c <HAL_SPI_Receive+0x7e>
 8003796:	88fb      	ldrh	r3, [r7, #6]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d102      	bne.n	80037a2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	75fb      	strb	r3, [r7, #23]
    goto error;
 80037a0:	e0c1      	b.n	8003926 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2204      	movs	r2, #4
 80037a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2200      	movs	r2, #0
 80037ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	68ba      	ldr	r2, [r7, #8]
 80037b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	88fa      	ldrh	r2, [r7, #6]
 80037ba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	88fa      	ldrh	r2, [r7, #6]
 80037c0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2200      	movs	r2, #0
 80037cc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2200      	movs	r2, #0
 80037d8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2200      	movs	r2, #0
 80037de:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037e8:	d10f      	bne.n	800380a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037f8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003808:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003814:	2b40      	cmp	r3, #64	; 0x40
 8003816:	d007      	beq.n	8003828 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003826:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d162      	bne.n	80038f6 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003830:	e02e      	b.n	8003890 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f003 0301 	and.w	r3, r3, #1
 800383c:	2b01      	cmp	r3, #1
 800383e:	d115      	bne.n	800386c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f103 020c 	add.w	r2, r3, #12
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800384c:	7812      	ldrb	r2, [r2, #0]
 800384e:	b2d2      	uxtb	r2, r2
 8003850:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003856:	1c5a      	adds	r2, r3, #1
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003860:	b29b      	uxth	r3, r3
 8003862:	3b01      	subs	r3, #1
 8003864:	b29a      	uxth	r2, r3
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	87da      	strh	r2, [r3, #62]	; 0x3e
 800386a:	e011      	b.n	8003890 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800386c:	f7fd fb7e 	bl	8000f6c <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	683a      	ldr	r2, [r7, #0]
 8003878:	429a      	cmp	r2, r3
 800387a:	d803      	bhi.n	8003884 <HAL_SPI_Receive+0x166>
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003882:	d102      	bne.n	800388a <HAL_SPI_Receive+0x16c>
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d102      	bne.n	8003890 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800388e:	e04a      	b.n	8003926 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003894:	b29b      	uxth	r3, r3
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1cb      	bne.n	8003832 <HAL_SPI_Receive+0x114>
 800389a:	e031      	b.n	8003900 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d113      	bne.n	80038d2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	68da      	ldr	r2, [r3, #12]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b4:	b292      	uxth	r2, r2
 80038b6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038bc:	1c9a      	adds	r2, r3, #2
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	3b01      	subs	r3, #1
 80038ca:	b29a      	uxth	r2, r3
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 80038d0:	e011      	b.n	80038f6 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038d2:	f7fd fb4b 	bl	8000f6c <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	683a      	ldr	r2, [r7, #0]
 80038de:	429a      	cmp	r2, r3
 80038e0:	d803      	bhi.n	80038ea <HAL_SPI_Receive+0x1cc>
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038e8:	d102      	bne.n	80038f0 <HAL_SPI_Receive+0x1d2>
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d102      	bne.n	80038f6 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80038f4:	e017      	b.n	8003926 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d1cd      	bne.n	800389c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003900:	693a      	ldr	r2, [r7, #16]
 8003902:	6839      	ldr	r1, [r7, #0]
 8003904:	68f8      	ldr	r0, [r7, #12]
 8003906:	f000 fa45 	bl	8003d94 <SPI_EndRxTransaction>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d002      	beq.n	8003916 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2220      	movs	r2, #32
 8003914:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800391a:	2b00      	cmp	r3, #0
 800391c:	d002      	beq.n	8003924 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	75fb      	strb	r3, [r7, #23]
 8003922:	e000      	b.n	8003926 <HAL_SPI_Receive+0x208>
  }

error :
 8003924:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2201      	movs	r2, #1
 800392a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003936:	7dfb      	ldrb	r3, [r7, #23]
}
 8003938:	4618      	mov	r0, r3
 800393a:	3718      	adds	r7, #24
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b08c      	sub	sp, #48	; 0x30
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
 800394c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800394e:	2301      	movs	r3, #1
 8003950:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003952:	2300      	movs	r3, #0
 8003954:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800395e:	2b01      	cmp	r3, #1
 8003960:	d101      	bne.n	8003966 <HAL_SPI_TransmitReceive+0x26>
 8003962:	2302      	movs	r3, #2
 8003964:	e18a      	b.n	8003c7c <HAL_SPI_TransmitReceive+0x33c>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2201      	movs	r2, #1
 800396a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800396e:	f7fd fafd 	bl	8000f6c <HAL_GetTick>
 8003972:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800397a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003984:	887b      	ldrh	r3, [r7, #2]
 8003986:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003988:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800398c:	2b01      	cmp	r3, #1
 800398e:	d00f      	beq.n	80039b0 <HAL_SPI_TransmitReceive+0x70>
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003996:	d107      	bne.n	80039a8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d103      	bne.n	80039a8 <HAL_SPI_TransmitReceive+0x68>
 80039a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80039a4:	2b04      	cmp	r3, #4
 80039a6:	d003      	beq.n	80039b0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80039a8:	2302      	movs	r3, #2
 80039aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80039ae:	e15b      	b.n	8003c68 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d005      	beq.n	80039c2 <HAL_SPI_TransmitReceive+0x82>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d002      	beq.n	80039c2 <HAL_SPI_TransmitReceive+0x82>
 80039bc:	887b      	ldrh	r3, [r7, #2]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d103      	bne.n	80039ca <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80039c8:	e14e      	b.n	8003c68 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	2b04      	cmp	r3, #4
 80039d4:	d003      	beq.n	80039de <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2205      	movs	r2, #5
 80039da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2200      	movs	r2, #0
 80039e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	887a      	ldrh	r2, [r7, #2]
 80039ee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	887a      	ldrh	r2, [r7, #2]
 80039f4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	68ba      	ldr	r2, [r7, #8]
 80039fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	887a      	ldrh	r2, [r7, #2]
 8003a00:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	887a      	ldrh	r2, [r7, #2]
 8003a06:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2200      	movs	r2, #0
 8003a12:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a1e:	2b40      	cmp	r3, #64	; 0x40
 8003a20:	d007      	beq.n	8003a32 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a30:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a3a:	d178      	bne.n	8003b2e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d002      	beq.n	8003a4a <HAL_SPI_TransmitReceive+0x10a>
 8003a44:	8b7b      	ldrh	r3, [r7, #26]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d166      	bne.n	8003b18 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4e:	881a      	ldrh	r2, [r3, #0]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5a:	1c9a      	adds	r2, r3, #2
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	3b01      	subs	r3, #1
 8003a68:	b29a      	uxth	r2, r3
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a6e:	e053      	b.n	8003b18 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f003 0302 	and.w	r3, r3, #2
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d11b      	bne.n	8003ab6 <HAL_SPI_TransmitReceive+0x176>
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d016      	beq.n	8003ab6 <HAL_SPI_TransmitReceive+0x176>
 8003a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d113      	bne.n	8003ab6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a92:	881a      	ldrh	r2, [r3, #0]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9e:	1c9a      	adds	r2, r3, #2
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	b29a      	uxth	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f003 0301 	and.w	r3, r3, #1
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d119      	bne.n	8003af8 <HAL_SPI_TransmitReceive+0x1b8>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d014      	beq.n	8003af8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68da      	ldr	r2, [r3, #12]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad8:	b292      	uxth	r2, r2
 8003ada:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae0:	1c9a      	adds	r2, r3, #2
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	3b01      	subs	r3, #1
 8003aee:	b29a      	uxth	r2, r3
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003af4:	2301      	movs	r3, #1
 8003af6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003af8:	f7fd fa38 	bl	8000f6c <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d807      	bhi.n	8003b18 <HAL_SPI_TransmitReceive+0x1d8>
 8003b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b0e:	d003      	beq.n	8003b18 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003b16:	e0a7      	b.n	8003c68 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d1a6      	bne.n	8003a70 <HAL_SPI_TransmitReceive+0x130>
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d1a1      	bne.n	8003a70 <HAL_SPI_TransmitReceive+0x130>
 8003b2c:	e07c      	b.n	8003c28 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d002      	beq.n	8003b3c <HAL_SPI_TransmitReceive+0x1fc>
 8003b36:	8b7b      	ldrh	r3, [r7, #26]
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d16b      	bne.n	8003c14 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	330c      	adds	r3, #12
 8003b46:	7812      	ldrb	r2, [r2, #0]
 8003b48:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4e:	1c5a      	adds	r2, r3, #1
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	b29a      	uxth	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b62:	e057      	b.n	8003c14 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d11c      	bne.n	8003bac <HAL_SPI_TransmitReceive+0x26c>
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d017      	beq.n	8003bac <HAL_SPI_TransmitReceive+0x26c>
 8003b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d114      	bne.n	8003bac <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	330c      	adds	r3, #12
 8003b8c:	7812      	ldrb	r2, [r2, #0]
 8003b8e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b94:	1c5a      	adds	r2, r3, #1
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	3b01      	subs	r3, #1
 8003ba2:	b29a      	uxth	r2, r3
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f003 0301 	and.w	r3, r3, #1
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d119      	bne.n	8003bee <HAL_SPI_TransmitReceive+0x2ae>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d014      	beq.n	8003bee <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68da      	ldr	r2, [r3, #12]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bce:	b2d2      	uxtb	r2, r2
 8003bd0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd6:	1c5a      	adds	r2, r3, #1
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	3b01      	subs	r3, #1
 8003be4:	b29a      	uxth	r2, r3
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003bea:	2301      	movs	r3, #1
 8003bec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003bee:	f7fd f9bd 	bl	8000f6c <HAL_GetTick>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d803      	bhi.n	8003c06 <HAL_SPI_TransmitReceive+0x2c6>
 8003bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c04:	d102      	bne.n	8003c0c <HAL_SPI_TransmitReceive+0x2cc>
 8003c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d103      	bne.n	8003c14 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003c12:	e029      	b.n	8003c68 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d1a2      	bne.n	8003b64 <HAL_SPI_TransmitReceive+0x224>
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d19d      	bne.n	8003b64 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c2a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c2c:	68f8      	ldr	r0, [r7, #12]
 8003c2e:	f000 f917 	bl	8003e60 <SPI_EndRxTxTransaction>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d006      	beq.n	8003c46 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2220      	movs	r2, #32
 8003c42:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003c44:	e010      	b.n	8003c68 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d10b      	bne.n	8003c66 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c4e:	2300      	movs	r3, #0
 8003c50:	617b      	str	r3, [r7, #20]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	617b      	str	r3, [r7, #20]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	617b      	str	r3, [r7, #20]
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	e000      	b.n	8003c68 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003c66:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003c78:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3730      	adds	r7, #48	; 0x30
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b088      	sub	sp, #32
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	603b      	str	r3, [r7, #0]
 8003c90:	4613      	mov	r3, r2
 8003c92:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003c94:	f7fd f96a 	bl	8000f6c <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c9c:	1a9b      	subs	r3, r3, r2
 8003c9e:	683a      	ldr	r2, [r7, #0]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003ca4:	f7fd f962 	bl	8000f6c <HAL_GetTick>
 8003ca8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003caa:	4b39      	ldr	r3, [pc, #228]	; (8003d90 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	015b      	lsls	r3, r3, #5
 8003cb0:	0d1b      	lsrs	r3, r3, #20
 8003cb2:	69fa      	ldr	r2, [r7, #28]
 8003cb4:	fb02 f303 	mul.w	r3, r2, r3
 8003cb8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003cba:	e054      	b.n	8003d66 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cc2:	d050      	beq.n	8003d66 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003cc4:	f7fd f952 	bl	8000f6c <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	69fa      	ldr	r2, [r7, #28]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d902      	bls.n	8003cda <SPI_WaitFlagStateUntilTimeout+0x56>
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d13d      	bne.n	8003d56 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	685a      	ldr	r2, [r3, #4]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ce8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cf2:	d111      	bne.n	8003d18 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cfc:	d004      	beq.n	8003d08 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d06:	d107      	bne.n	8003d18 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d16:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d20:	d10f      	bne.n	8003d42 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d30:	601a      	str	r2, [r3, #0]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d40:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2201      	movs	r2, #1
 8003d46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e017      	b.n	8003d86 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d101      	bne.n	8003d60 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	3b01      	subs	r3, #1
 8003d64:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	689a      	ldr	r2, [r3, #8]
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	4013      	ands	r3, r2
 8003d70:	68ba      	ldr	r2, [r7, #8]
 8003d72:	429a      	cmp	r2, r3
 8003d74:	bf0c      	ite	eq
 8003d76:	2301      	moveq	r3, #1
 8003d78:	2300      	movne	r3, #0
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	79fb      	ldrb	r3, [r7, #7]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d19b      	bne.n	8003cbc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003d84:	2300      	movs	r3, #0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3720      	adds	r7, #32
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	20000000 	.word	0x20000000

08003d94 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b086      	sub	sp, #24
 8003d98:	af02      	add	r7, sp, #8
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	60b9      	str	r1, [r7, #8]
 8003d9e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003da8:	d111      	bne.n	8003dce <SPI_EndRxTransaction+0x3a>
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003db2:	d004      	beq.n	8003dbe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dbc:	d107      	bne.n	8003dce <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dcc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dd6:	d12a      	bne.n	8003e2e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003de0:	d012      	beq.n	8003e08 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	9300      	str	r3, [sp, #0]
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	2200      	movs	r2, #0
 8003dea:	2180      	movs	r1, #128	; 0x80
 8003dec:	68f8      	ldr	r0, [r7, #12]
 8003dee:	f7ff ff49 	bl	8003c84 <SPI_WaitFlagStateUntilTimeout>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d02d      	beq.n	8003e54 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dfc:	f043 0220 	orr.w	r2, r3, #32
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003e04:	2303      	movs	r3, #3
 8003e06:	e026      	b.n	8003e56 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	9300      	str	r3, [sp, #0]
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	2101      	movs	r1, #1
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	f7ff ff36 	bl	8003c84 <SPI_WaitFlagStateUntilTimeout>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d01a      	beq.n	8003e54 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e22:	f043 0220 	orr.w	r2, r3, #32
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e013      	b.n	8003e56 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	9300      	str	r3, [sp, #0]
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	2200      	movs	r2, #0
 8003e36:	2101      	movs	r1, #1
 8003e38:	68f8      	ldr	r0, [r7, #12]
 8003e3a:	f7ff ff23 	bl	8003c84 <SPI_WaitFlagStateUntilTimeout>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d007      	beq.n	8003e54 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e48:	f043 0220 	orr.w	r2, r3, #32
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e000      	b.n	8003e56 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3710      	adds	r7, #16
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
	...

08003e60 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b088      	sub	sp, #32
 8003e64:	af02      	add	r7, sp, #8
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003e6c:	4b1b      	ldr	r3, [pc, #108]	; (8003edc <SPI_EndRxTxTransaction+0x7c>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a1b      	ldr	r2, [pc, #108]	; (8003ee0 <SPI_EndRxTxTransaction+0x80>)
 8003e72:	fba2 2303 	umull	r2, r3, r2, r3
 8003e76:	0d5b      	lsrs	r3, r3, #21
 8003e78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e7c:	fb02 f303 	mul.w	r3, r2, r3
 8003e80:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e8a:	d112      	bne.n	8003eb2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	9300      	str	r3, [sp, #0]
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	2200      	movs	r2, #0
 8003e94:	2180      	movs	r1, #128	; 0x80
 8003e96:	68f8      	ldr	r0, [r7, #12]
 8003e98:	f7ff fef4 	bl	8003c84 <SPI_WaitFlagStateUntilTimeout>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d016      	beq.n	8003ed0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea6:	f043 0220 	orr.w	r2, r3, #32
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e00f      	b.n	8003ed2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d00a      	beq.n	8003ece <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ec8:	2b80      	cmp	r3, #128	; 0x80
 8003eca:	d0f2      	beq.n	8003eb2 <SPI_EndRxTxTransaction+0x52>
 8003ecc:	e000      	b.n	8003ed0 <SPI_EndRxTxTransaction+0x70>
        break;
 8003ece:	bf00      	nop
  }

  return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3718      	adds	r7, #24
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	20000000 	.word	0x20000000
 8003ee0:	165e9f81 	.word	0x165e9f81

08003ee4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d101      	bne.n	8003ef6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e041      	b.n	8003f7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d106      	bne.n	8003f10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 f839 	bl	8003f82 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2202      	movs	r2, #2
 8003f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	3304      	adds	r3, #4
 8003f20:	4619      	mov	r1, r3
 8003f22:	4610      	mov	r0, r2
 8003f24:	f000 f9d8 	bl	80042d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3708      	adds	r7, #8
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003f82:	b480      	push	{r7}
 8003f84:	b083      	sub	sp, #12
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003f8a:	bf00      	nop
 8003f8c:	370c      	adds	r7, #12
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr
	...

08003f98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b085      	sub	sp, #20
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d001      	beq.n	8003fb0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e04e      	b.n	800404e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2202      	movs	r2, #2
 8003fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68da      	ldr	r2, [r3, #12]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f042 0201 	orr.w	r2, r2, #1
 8003fc6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a23      	ldr	r2, [pc, #140]	; (800405c <HAL_TIM_Base_Start_IT+0xc4>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d022      	beq.n	8004018 <HAL_TIM_Base_Start_IT+0x80>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fda:	d01d      	beq.n	8004018 <HAL_TIM_Base_Start_IT+0x80>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a1f      	ldr	r2, [pc, #124]	; (8004060 <HAL_TIM_Base_Start_IT+0xc8>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d018      	beq.n	8004018 <HAL_TIM_Base_Start_IT+0x80>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a1e      	ldr	r2, [pc, #120]	; (8004064 <HAL_TIM_Base_Start_IT+0xcc>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d013      	beq.n	8004018 <HAL_TIM_Base_Start_IT+0x80>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a1c      	ldr	r2, [pc, #112]	; (8004068 <HAL_TIM_Base_Start_IT+0xd0>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d00e      	beq.n	8004018 <HAL_TIM_Base_Start_IT+0x80>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a1b      	ldr	r2, [pc, #108]	; (800406c <HAL_TIM_Base_Start_IT+0xd4>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d009      	beq.n	8004018 <HAL_TIM_Base_Start_IT+0x80>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a19      	ldr	r2, [pc, #100]	; (8004070 <HAL_TIM_Base_Start_IT+0xd8>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d004      	beq.n	8004018 <HAL_TIM_Base_Start_IT+0x80>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a18      	ldr	r2, [pc, #96]	; (8004074 <HAL_TIM_Base_Start_IT+0xdc>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d111      	bne.n	800403c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f003 0307 	and.w	r3, r3, #7
 8004022:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2b06      	cmp	r3, #6
 8004028:	d010      	beq.n	800404c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f042 0201 	orr.w	r2, r2, #1
 8004038:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800403a:	e007      	b.n	800404c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f042 0201 	orr.w	r2, r2, #1
 800404a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3714      	adds	r7, #20
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop
 800405c:	40010000 	.word	0x40010000
 8004060:	40000400 	.word	0x40000400
 8004064:	40000800 	.word	0x40000800
 8004068:	40000c00 	.word	0x40000c00
 800406c:	40010400 	.word	0x40010400
 8004070:	40014000 	.word	0x40014000
 8004074:	40001800 	.word	0x40001800

08004078 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	f003 0302 	and.w	r3, r3, #2
 800408a:	2b02      	cmp	r3, #2
 800408c:	d122      	bne.n	80040d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	f003 0302 	and.w	r3, r3, #2
 8004098:	2b02      	cmp	r3, #2
 800409a:	d11b      	bne.n	80040d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f06f 0202 	mvn.w	r2, #2
 80040a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2201      	movs	r2, #1
 80040aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	699b      	ldr	r3, [r3, #24]
 80040b2:	f003 0303 	and.w	r3, r3, #3
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d003      	beq.n	80040c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 f8ee 	bl	800429c <HAL_TIM_IC_CaptureCallback>
 80040c0:	e005      	b.n	80040ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 f8e0 	bl	8004288 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f000 f8f1 	bl	80042b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	f003 0304 	and.w	r3, r3, #4
 80040de:	2b04      	cmp	r3, #4
 80040e0:	d122      	bne.n	8004128 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	f003 0304 	and.w	r3, r3, #4
 80040ec:	2b04      	cmp	r3, #4
 80040ee:	d11b      	bne.n	8004128 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f06f 0204 	mvn.w	r2, #4
 80040f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2202      	movs	r2, #2
 80040fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	699b      	ldr	r3, [r3, #24]
 8004106:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800410a:	2b00      	cmp	r3, #0
 800410c:	d003      	beq.n	8004116 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 f8c4 	bl	800429c <HAL_TIM_IC_CaptureCallback>
 8004114:	e005      	b.n	8004122 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 f8b6 	bl	8004288 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f000 f8c7 	bl	80042b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	f003 0308 	and.w	r3, r3, #8
 8004132:	2b08      	cmp	r3, #8
 8004134:	d122      	bne.n	800417c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	f003 0308 	and.w	r3, r3, #8
 8004140:	2b08      	cmp	r3, #8
 8004142:	d11b      	bne.n	800417c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f06f 0208 	mvn.w	r2, #8
 800414c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2204      	movs	r2, #4
 8004152:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	69db      	ldr	r3, [r3, #28]
 800415a:	f003 0303 	and.w	r3, r3, #3
 800415e:	2b00      	cmp	r3, #0
 8004160:	d003      	beq.n	800416a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f000 f89a 	bl	800429c <HAL_TIM_IC_CaptureCallback>
 8004168:	e005      	b.n	8004176 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 f88c 	bl	8004288 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f000 f89d 	bl	80042b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	f003 0310 	and.w	r3, r3, #16
 8004186:	2b10      	cmp	r3, #16
 8004188:	d122      	bne.n	80041d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	f003 0310 	and.w	r3, r3, #16
 8004194:	2b10      	cmp	r3, #16
 8004196:	d11b      	bne.n	80041d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f06f 0210 	mvn.w	r2, #16
 80041a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2208      	movs	r2, #8
 80041a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	69db      	ldr	r3, [r3, #28]
 80041ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d003      	beq.n	80041be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 f870 	bl	800429c <HAL_TIM_IC_CaptureCallback>
 80041bc:	e005      	b.n	80041ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 f862 	bl	8004288 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f000 f873 	bl	80042b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d10e      	bne.n	80041fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	f003 0301 	and.w	r3, r3, #1
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d107      	bne.n	80041fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f06f 0201 	mvn.w	r2, #1
 80041f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f7fc fbfe 	bl	80009f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004206:	2b80      	cmp	r3, #128	; 0x80
 8004208:	d10e      	bne.n	8004228 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004214:	2b80      	cmp	r3, #128	; 0x80
 8004216:	d107      	bne.n	8004228 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004220:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 f902 	bl	800442c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004232:	2b40      	cmp	r3, #64	; 0x40
 8004234:	d10e      	bne.n	8004254 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004240:	2b40      	cmp	r3, #64	; 0x40
 8004242:	d107      	bne.n	8004254 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800424c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 f838 	bl	80042c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	f003 0320 	and.w	r3, r3, #32
 800425e:	2b20      	cmp	r3, #32
 8004260:	d10e      	bne.n	8004280 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	f003 0320 	and.w	r3, r3, #32
 800426c:	2b20      	cmp	r3, #32
 800426e:	d107      	bne.n	8004280 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f06f 0220 	mvn.w	r2, #32
 8004278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 f8cc 	bl	8004418 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004280:	bf00      	nop
 8004282:	3708      	adds	r7, #8
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004290:	bf00      	nop
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042a4:	bf00      	nop
 80042a6:	370c      	adds	r7, #12
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80042d8:	b480      	push	{r7}
 80042da:	b085      	sub	sp, #20
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4a40      	ldr	r2, [pc, #256]	; (80043ec <TIM_Base_SetConfig+0x114>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d013      	beq.n	8004318 <TIM_Base_SetConfig+0x40>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042f6:	d00f      	beq.n	8004318 <TIM_Base_SetConfig+0x40>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4a3d      	ldr	r2, [pc, #244]	; (80043f0 <TIM_Base_SetConfig+0x118>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d00b      	beq.n	8004318 <TIM_Base_SetConfig+0x40>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4a3c      	ldr	r2, [pc, #240]	; (80043f4 <TIM_Base_SetConfig+0x11c>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d007      	beq.n	8004318 <TIM_Base_SetConfig+0x40>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	4a3b      	ldr	r2, [pc, #236]	; (80043f8 <TIM_Base_SetConfig+0x120>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d003      	beq.n	8004318 <TIM_Base_SetConfig+0x40>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4a3a      	ldr	r2, [pc, #232]	; (80043fc <TIM_Base_SetConfig+0x124>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d108      	bne.n	800432a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800431e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	68fa      	ldr	r2, [r7, #12]
 8004326:	4313      	orrs	r3, r2
 8004328:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a2f      	ldr	r2, [pc, #188]	; (80043ec <TIM_Base_SetConfig+0x114>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d02b      	beq.n	800438a <TIM_Base_SetConfig+0xb2>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004338:	d027      	beq.n	800438a <TIM_Base_SetConfig+0xb2>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a2c      	ldr	r2, [pc, #176]	; (80043f0 <TIM_Base_SetConfig+0x118>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d023      	beq.n	800438a <TIM_Base_SetConfig+0xb2>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a2b      	ldr	r2, [pc, #172]	; (80043f4 <TIM_Base_SetConfig+0x11c>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d01f      	beq.n	800438a <TIM_Base_SetConfig+0xb2>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a2a      	ldr	r2, [pc, #168]	; (80043f8 <TIM_Base_SetConfig+0x120>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d01b      	beq.n	800438a <TIM_Base_SetConfig+0xb2>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a29      	ldr	r2, [pc, #164]	; (80043fc <TIM_Base_SetConfig+0x124>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d017      	beq.n	800438a <TIM_Base_SetConfig+0xb2>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a28      	ldr	r2, [pc, #160]	; (8004400 <TIM_Base_SetConfig+0x128>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d013      	beq.n	800438a <TIM_Base_SetConfig+0xb2>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a27      	ldr	r2, [pc, #156]	; (8004404 <TIM_Base_SetConfig+0x12c>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d00f      	beq.n	800438a <TIM_Base_SetConfig+0xb2>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a26      	ldr	r2, [pc, #152]	; (8004408 <TIM_Base_SetConfig+0x130>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d00b      	beq.n	800438a <TIM_Base_SetConfig+0xb2>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a25      	ldr	r2, [pc, #148]	; (800440c <TIM_Base_SetConfig+0x134>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d007      	beq.n	800438a <TIM_Base_SetConfig+0xb2>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a24      	ldr	r2, [pc, #144]	; (8004410 <TIM_Base_SetConfig+0x138>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d003      	beq.n	800438a <TIM_Base_SetConfig+0xb2>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a23      	ldr	r2, [pc, #140]	; (8004414 <TIM_Base_SetConfig+0x13c>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d108      	bne.n	800439c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004390:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	4313      	orrs	r3, r2
 800439a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	689a      	ldr	r2, [r3, #8]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	4a0a      	ldr	r2, [pc, #40]	; (80043ec <TIM_Base_SetConfig+0x114>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d003      	beq.n	80043d0 <TIM_Base_SetConfig+0xf8>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	4a0c      	ldr	r2, [pc, #48]	; (80043fc <TIM_Base_SetConfig+0x124>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d103      	bne.n	80043d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	691a      	ldr	r2, [r3, #16]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	615a      	str	r2, [r3, #20]
}
 80043de:	bf00      	nop
 80043e0:	3714      	adds	r7, #20
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr
 80043ea:	bf00      	nop
 80043ec:	40010000 	.word	0x40010000
 80043f0:	40000400 	.word	0x40000400
 80043f4:	40000800 	.word	0x40000800
 80043f8:	40000c00 	.word	0x40000c00
 80043fc:	40010400 	.word	0x40010400
 8004400:	40014000 	.word	0x40014000
 8004404:	40014400 	.word	0x40014400
 8004408:	40014800 	.word	0x40014800
 800440c:	40001800 	.word	0x40001800
 8004410:	40001c00 	.word	0x40001c00
 8004414:	40002000 	.word	0x40002000

08004418 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004420:	bf00      	nop
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004434:	bf00      	nop
 8004436:	370c      	adds	r7, #12
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004440:	b084      	sub	sp, #16
 8004442:	b580      	push	{r7, lr}
 8004444:	b084      	sub	sp, #16
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
 800444a:	f107 001c 	add.w	r0, r7, #28
 800444e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004454:	2b01      	cmp	r3, #1
 8004456:	d122      	bne.n	800449e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800445c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800446c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004480:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004482:	2b01      	cmp	r3, #1
 8004484:	d105      	bne.n	8004492 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f001 fbee 	bl	8005c74 <USB_CoreReset>
 8004498:	4603      	mov	r3, r0
 800449a:	73fb      	strb	r3, [r7, #15]
 800449c:	e01a      	b.n	80044d4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f001 fbe2 	bl	8005c74 <USB_CoreReset>
 80044b0:	4603      	mov	r3, r0
 80044b2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80044b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d106      	bne.n	80044c8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044be:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	639a      	str	r2, [r3, #56]	; 0x38
 80044c6:	e005      	b.n	80044d4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80044d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d10b      	bne.n	80044f2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	f043 0206 	orr.w	r2, r3, #6
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	f043 0220 	orr.w	r2, r3, #32
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80044f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3710      	adds	r7, #16
 80044f8:	46bd      	mov	sp, r7
 80044fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80044fe:	b004      	add	sp, #16
 8004500:	4770      	bx	lr
	...

08004504 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004504:	b480      	push	{r7}
 8004506:	b087      	sub	sp, #28
 8004508:	af00      	add	r7, sp, #0
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	60b9      	str	r1, [r7, #8]
 800450e:	4613      	mov	r3, r2
 8004510:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004512:	79fb      	ldrb	r3, [r7, #7]
 8004514:	2b02      	cmp	r3, #2
 8004516:	d165      	bne.n	80045e4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	4a41      	ldr	r2, [pc, #260]	; (8004620 <USB_SetTurnaroundTime+0x11c>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d906      	bls.n	800452e <USB_SetTurnaroundTime+0x2a>
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	4a40      	ldr	r2, [pc, #256]	; (8004624 <USB_SetTurnaroundTime+0x120>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d202      	bcs.n	800452e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004528:	230f      	movs	r3, #15
 800452a:	617b      	str	r3, [r7, #20]
 800452c:	e062      	b.n	80045f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	4a3c      	ldr	r2, [pc, #240]	; (8004624 <USB_SetTurnaroundTime+0x120>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d306      	bcc.n	8004544 <USB_SetTurnaroundTime+0x40>
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	4a3b      	ldr	r2, [pc, #236]	; (8004628 <USB_SetTurnaroundTime+0x124>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d202      	bcs.n	8004544 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800453e:	230e      	movs	r3, #14
 8004540:	617b      	str	r3, [r7, #20]
 8004542:	e057      	b.n	80045f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	4a38      	ldr	r2, [pc, #224]	; (8004628 <USB_SetTurnaroundTime+0x124>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d306      	bcc.n	800455a <USB_SetTurnaroundTime+0x56>
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	4a37      	ldr	r2, [pc, #220]	; (800462c <USB_SetTurnaroundTime+0x128>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d202      	bcs.n	800455a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004554:	230d      	movs	r3, #13
 8004556:	617b      	str	r3, [r7, #20]
 8004558:	e04c      	b.n	80045f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	4a33      	ldr	r2, [pc, #204]	; (800462c <USB_SetTurnaroundTime+0x128>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d306      	bcc.n	8004570 <USB_SetTurnaroundTime+0x6c>
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	4a32      	ldr	r2, [pc, #200]	; (8004630 <USB_SetTurnaroundTime+0x12c>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d802      	bhi.n	8004570 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800456a:	230c      	movs	r3, #12
 800456c:	617b      	str	r3, [r7, #20]
 800456e:	e041      	b.n	80045f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	4a2f      	ldr	r2, [pc, #188]	; (8004630 <USB_SetTurnaroundTime+0x12c>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d906      	bls.n	8004586 <USB_SetTurnaroundTime+0x82>
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	4a2e      	ldr	r2, [pc, #184]	; (8004634 <USB_SetTurnaroundTime+0x130>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d802      	bhi.n	8004586 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004580:	230b      	movs	r3, #11
 8004582:	617b      	str	r3, [r7, #20]
 8004584:	e036      	b.n	80045f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	4a2a      	ldr	r2, [pc, #168]	; (8004634 <USB_SetTurnaroundTime+0x130>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d906      	bls.n	800459c <USB_SetTurnaroundTime+0x98>
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	4a29      	ldr	r2, [pc, #164]	; (8004638 <USB_SetTurnaroundTime+0x134>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d802      	bhi.n	800459c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004596:	230a      	movs	r3, #10
 8004598:	617b      	str	r3, [r7, #20]
 800459a:	e02b      	b.n	80045f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	4a26      	ldr	r2, [pc, #152]	; (8004638 <USB_SetTurnaroundTime+0x134>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d906      	bls.n	80045b2 <USB_SetTurnaroundTime+0xae>
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	4a25      	ldr	r2, [pc, #148]	; (800463c <USB_SetTurnaroundTime+0x138>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d202      	bcs.n	80045b2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80045ac:	2309      	movs	r3, #9
 80045ae:	617b      	str	r3, [r7, #20]
 80045b0:	e020      	b.n	80045f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	4a21      	ldr	r2, [pc, #132]	; (800463c <USB_SetTurnaroundTime+0x138>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d306      	bcc.n	80045c8 <USB_SetTurnaroundTime+0xc4>
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	4a20      	ldr	r2, [pc, #128]	; (8004640 <USB_SetTurnaroundTime+0x13c>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d802      	bhi.n	80045c8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80045c2:	2308      	movs	r3, #8
 80045c4:	617b      	str	r3, [r7, #20]
 80045c6:	e015      	b.n	80045f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	4a1d      	ldr	r2, [pc, #116]	; (8004640 <USB_SetTurnaroundTime+0x13c>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d906      	bls.n	80045de <USB_SetTurnaroundTime+0xda>
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	4a1c      	ldr	r2, [pc, #112]	; (8004644 <USB_SetTurnaroundTime+0x140>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d202      	bcs.n	80045de <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80045d8:	2307      	movs	r3, #7
 80045da:	617b      	str	r3, [r7, #20]
 80045dc:	e00a      	b.n	80045f4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80045de:	2306      	movs	r3, #6
 80045e0:	617b      	str	r3, [r7, #20]
 80045e2:	e007      	b.n	80045f4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80045e4:	79fb      	ldrb	r3, [r7, #7]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d102      	bne.n	80045f0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80045ea:	2309      	movs	r3, #9
 80045ec:	617b      	str	r3, [r7, #20]
 80045ee:	e001      	b.n	80045f4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80045f0:	2309      	movs	r3, #9
 80045f2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	68da      	ldr	r2, [r3, #12]
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	029b      	lsls	r3, r3, #10
 8004608:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800460c:	431a      	orrs	r2, r3
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004612:	2300      	movs	r3, #0
}
 8004614:	4618      	mov	r0, r3
 8004616:	371c      	adds	r7, #28
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr
 8004620:	00d8acbf 	.word	0x00d8acbf
 8004624:	00e4e1c0 	.word	0x00e4e1c0
 8004628:	00f42400 	.word	0x00f42400
 800462c:	01067380 	.word	0x01067380
 8004630:	011a499f 	.word	0x011a499f
 8004634:	01312cff 	.word	0x01312cff
 8004638:	014ca43f 	.word	0x014ca43f
 800463c:	016e3600 	.word	0x016e3600
 8004640:	01a6ab1f 	.word	0x01a6ab1f
 8004644:	01e84800 	.word	0x01e84800

08004648 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	f043 0201 	orr.w	r2, r3, #1
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	370c      	adds	r7, #12
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr

0800466a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800466a:	b480      	push	{r7}
 800466c:	b083      	sub	sp, #12
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	f023 0201 	bic.w	r2, r3, #1
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	460b      	mov	r3, r1
 8004696:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004698:	2300      	movs	r3, #0
 800469a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80046a8:	78fb      	ldrb	r3, [r7, #3]
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d115      	bne.n	80046da <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80046ba:	2001      	movs	r0, #1
 80046bc:	f7fc fc62 	bl	8000f84 <HAL_Delay>
      ms++;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	3301      	adds	r3, #1
 80046c4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f001 fa45 	bl	8005b56 <USB_GetMode>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d01e      	beq.n	8004710 <USB_SetCurrentMode+0x84>
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2b31      	cmp	r3, #49	; 0x31
 80046d6:	d9f0      	bls.n	80046ba <USB_SetCurrentMode+0x2e>
 80046d8:	e01a      	b.n	8004710 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80046da:	78fb      	ldrb	r3, [r7, #3]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d115      	bne.n	800470c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80046ec:	2001      	movs	r0, #1
 80046ee:	f7fc fc49 	bl	8000f84 <HAL_Delay>
      ms++;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	3301      	adds	r3, #1
 80046f6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f001 fa2c 	bl	8005b56 <USB_GetMode>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d005      	beq.n	8004710 <USB_SetCurrentMode+0x84>
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2b31      	cmp	r3, #49	; 0x31
 8004708:	d9f0      	bls.n	80046ec <USB_SetCurrentMode+0x60>
 800470a:	e001      	b.n	8004710 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e005      	b.n	800471c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2b32      	cmp	r3, #50	; 0x32
 8004714:	d101      	bne.n	800471a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e000      	b.n	800471c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800471a:	2300      	movs	r3, #0
}
 800471c:	4618      	mov	r0, r3
 800471e:	3710      	adds	r7, #16
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004724:	b084      	sub	sp, #16
 8004726:	b580      	push	{r7, lr}
 8004728:	b086      	sub	sp, #24
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
 800472e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004732:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004736:	2300      	movs	r3, #0
 8004738:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800473e:	2300      	movs	r3, #0
 8004740:	613b      	str	r3, [r7, #16]
 8004742:	e009      	b.n	8004758 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	3340      	adds	r3, #64	; 0x40
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	4413      	add	r3, r2
 800474e:	2200      	movs	r2, #0
 8004750:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	3301      	adds	r3, #1
 8004756:	613b      	str	r3, [r7, #16]
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	2b0e      	cmp	r3, #14
 800475c:	d9f2      	bls.n	8004744 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800475e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004760:	2b00      	cmp	r3, #0
 8004762:	d11c      	bne.n	800479e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	68fa      	ldr	r2, [r7, #12]
 800476e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004772:	f043 0302 	orr.w	r3, r3, #2
 8004776:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800477c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004788:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004794:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	639a      	str	r2, [r3, #56]	; 0x38
 800479c:	e00b      	b.n	80047b6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ae:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80047bc:	461a      	mov	r2, r3
 80047be:	2300      	movs	r3, #0
 80047c0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047c8:	4619      	mov	r1, r3
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047d0:	461a      	mov	r2, r3
 80047d2:	680b      	ldr	r3, [r1, #0]
 80047d4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80047d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d10c      	bne.n	80047f6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80047dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d104      	bne.n	80047ec <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80047e2:	2100      	movs	r1, #0
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f000 f965 	bl	8004ab4 <USB_SetDevSpeed>
 80047ea:	e008      	b.n	80047fe <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80047ec:	2101      	movs	r1, #1
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 f960 	bl	8004ab4 <USB_SetDevSpeed>
 80047f4:	e003      	b.n	80047fe <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80047f6:	2103      	movs	r1, #3
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f000 f95b 	bl	8004ab4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80047fe:	2110      	movs	r1, #16
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f000 f8f3 	bl	80049ec <USB_FlushTxFifo>
 8004806:	4603      	mov	r3, r0
 8004808:	2b00      	cmp	r3, #0
 800480a:	d001      	beq.n	8004810 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f000 f91f 	bl	8004a54 <USB_FlushRxFifo>
 8004816:	4603      	mov	r3, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d001      	beq.n	8004820 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004826:	461a      	mov	r2, r3
 8004828:	2300      	movs	r3, #0
 800482a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004832:	461a      	mov	r2, r3
 8004834:	2300      	movs	r3, #0
 8004836:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800483e:	461a      	mov	r2, r3
 8004840:	2300      	movs	r3, #0
 8004842:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004844:	2300      	movs	r3, #0
 8004846:	613b      	str	r3, [r7, #16]
 8004848:	e043      	b.n	80048d2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	015a      	lsls	r2, r3, #5
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	4413      	add	r3, r2
 8004852:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800485c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004860:	d118      	bne.n	8004894 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d10a      	bne.n	800487e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	015a      	lsls	r2, r3, #5
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	4413      	add	r3, r2
 8004870:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004874:	461a      	mov	r2, r3
 8004876:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800487a:	6013      	str	r3, [r2, #0]
 800487c:	e013      	b.n	80048a6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	015a      	lsls	r2, r3, #5
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	4413      	add	r3, r2
 8004886:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800488a:	461a      	mov	r2, r3
 800488c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004890:	6013      	str	r3, [r2, #0]
 8004892:	e008      	b.n	80048a6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	015a      	lsls	r2, r3, #5
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	4413      	add	r3, r2
 800489c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048a0:	461a      	mov	r2, r3
 80048a2:	2300      	movs	r3, #0
 80048a4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	015a      	lsls	r2, r3, #5
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	4413      	add	r3, r2
 80048ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048b2:	461a      	mov	r2, r3
 80048b4:	2300      	movs	r3, #0
 80048b6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	015a      	lsls	r2, r3, #5
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	4413      	add	r3, r2
 80048c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048c4:	461a      	mov	r2, r3
 80048c6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80048ca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	3301      	adds	r3, #1
 80048d0:	613b      	str	r3, [r7, #16]
 80048d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d4:	693a      	ldr	r2, [r7, #16]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d3b7      	bcc.n	800484a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048da:	2300      	movs	r3, #0
 80048dc:	613b      	str	r3, [r7, #16]
 80048de:	e043      	b.n	8004968 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	015a      	lsls	r2, r3, #5
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	4413      	add	r3, r2
 80048e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048f6:	d118      	bne.n	800492a <USB_DevInit+0x206>
    {
      if (i == 0U)
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d10a      	bne.n	8004914 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	015a      	lsls	r2, r3, #5
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	4413      	add	r3, r2
 8004906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800490a:	461a      	mov	r2, r3
 800490c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004910:	6013      	str	r3, [r2, #0]
 8004912:	e013      	b.n	800493c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	015a      	lsls	r2, r3, #5
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	4413      	add	r3, r2
 800491c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004920:	461a      	mov	r2, r3
 8004922:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004926:	6013      	str	r3, [r2, #0]
 8004928:	e008      	b.n	800493c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	015a      	lsls	r2, r3, #5
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	4413      	add	r3, r2
 8004932:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004936:	461a      	mov	r2, r3
 8004938:	2300      	movs	r3, #0
 800493a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	015a      	lsls	r2, r3, #5
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	4413      	add	r3, r2
 8004944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004948:	461a      	mov	r2, r3
 800494a:	2300      	movs	r3, #0
 800494c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	015a      	lsls	r2, r3, #5
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	4413      	add	r3, r2
 8004956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800495a:	461a      	mov	r2, r3
 800495c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004960:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	3301      	adds	r3, #1
 8004966:	613b      	str	r3, [r7, #16]
 8004968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496a:	693a      	ldr	r2, [r7, #16]
 800496c:	429a      	cmp	r2, r3
 800496e:	d3b7      	bcc.n	80048e0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004976:	691b      	ldr	r3, [r3, #16]
 8004978:	68fa      	ldr	r2, [r7, #12]
 800497a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800497e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004982:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004990:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004994:	2b00      	cmp	r3, #0
 8004996:	d105      	bne.n	80049a4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	699b      	ldr	r3, [r3, #24]
 800499c:	f043 0210 	orr.w	r2, r3, #16
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	699a      	ldr	r2, [r3, #24]
 80049a8:	4b0f      	ldr	r3, [pc, #60]	; (80049e8 <USB_DevInit+0x2c4>)
 80049aa:	4313      	orrs	r3, r2
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80049b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d005      	beq.n	80049c2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	699b      	ldr	r3, [r3, #24]
 80049ba:	f043 0208 	orr.w	r2, r3, #8
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80049c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d107      	bne.n	80049d8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	699b      	ldr	r3, [r3, #24]
 80049cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80049d0:	f043 0304 	orr.w	r3, r3, #4
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80049d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3718      	adds	r7, #24
 80049de:	46bd      	mov	sp, r7
 80049e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80049e4:	b004      	add	sp, #16
 80049e6:	4770      	bx	lr
 80049e8:	803c3800 	.word	0x803c3800

080049ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b085      	sub	sp, #20
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80049f6:	2300      	movs	r3, #0
 80049f8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	3301      	adds	r3, #1
 80049fe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	4a13      	ldr	r2, [pc, #76]	; (8004a50 <USB_FlushTxFifo+0x64>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d901      	bls.n	8004a0c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004a08:	2303      	movs	r3, #3
 8004a0a:	e01b      	b.n	8004a44 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	691b      	ldr	r3, [r3, #16]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	daf2      	bge.n	80049fa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004a14:	2300      	movs	r3, #0
 8004a16:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	019b      	lsls	r3, r3, #6
 8004a1c:	f043 0220 	orr.w	r2, r3, #32
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	3301      	adds	r3, #1
 8004a28:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	4a08      	ldr	r2, [pc, #32]	; (8004a50 <USB_FlushTxFifo+0x64>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d901      	bls.n	8004a36 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e006      	b.n	8004a44 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	f003 0320 	and.w	r3, r3, #32
 8004a3e:	2b20      	cmp	r3, #32
 8004a40:	d0f0      	beq.n	8004a24 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004a42:	2300      	movs	r3, #0
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3714      	adds	r7, #20
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr
 8004a50:	00030d40 	.word	0x00030d40

08004a54 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b085      	sub	sp, #20
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	3301      	adds	r3, #1
 8004a64:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	4a11      	ldr	r2, [pc, #68]	; (8004ab0 <USB_FlushRxFifo+0x5c>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d901      	bls.n	8004a72 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e018      	b.n	8004aa4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	daf2      	bge.n	8004a60 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2210      	movs	r2, #16
 8004a82:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	3301      	adds	r3, #1
 8004a88:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	4a08      	ldr	r2, [pc, #32]	; (8004ab0 <USB_FlushRxFifo+0x5c>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d901      	bls.n	8004a96 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e006      	b.n	8004aa4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	f003 0310 	and.w	r3, r3, #16
 8004a9e:	2b10      	cmp	r3, #16
 8004aa0:	d0f0      	beq.n	8004a84 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004aa2:	2300      	movs	r3, #0
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3714      	adds	r7, #20
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr
 8004ab0:	00030d40 	.word	0x00030d40

08004ab4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b085      	sub	sp, #20
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	460b      	mov	r3, r1
 8004abe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	78fb      	ldrb	r3, [r7, #3]
 8004ace:	68f9      	ldr	r1, [r7, #12]
 8004ad0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004ad8:	2300      	movs	r3, #0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3714      	adds	r7, #20
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr

08004ae6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004ae6:	b480      	push	{r7}
 8004ae8:	b087      	sub	sp, #28
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f003 0306 	and.w	r3, r3, #6
 8004afe:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d102      	bne.n	8004b0c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004b06:	2300      	movs	r3, #0
 8004b08:	75fb      	strb	r3, [r7, #23]
 8004b0a:	e00a      	b.n	8004b22 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	d002      	beq.n	8004b18 <USB_GetDevSpeed+0x32>
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2b06      	cmp	r3, #6
 8004b16:	d102      	bne.n	8004b1e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004b18:	2302      	movs	r3, #2
 8004b1a:	75fb      	strb	r3, [r7, #23]
 8004b1c:	e001      	b.n	8004b22 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004b1e:	230f      	movs	r3, #15
 8004b20:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004b22:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	371c      	adds	r7, #28
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b085      	sub	sp, #20
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	785b      	ldrb	r3, [r3, #1]
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d13a      	bne.n	8004bc2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b52:	69da      	ldr	r2, [r3, #28]
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	f003 030f 	and.w	r3, r3, #15
 8004b5c:	2101      	movs	r1, #1
 8004b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	68f9      	ldr	r1, [r7, #12]
 8004b66:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	015a      	lsls	r2, r3, #5
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	4413      	add	r3, r2
 8004b76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d155      	bne.n	8004c30 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	015a      	lsls	r2, r3, #5
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	4413      	add	r3, r2
 8004b8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	791b      	ldrb	r3, [r3, #4]
 8004b9e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004ba0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	059b      	lsls	r3, r3, #22
 8004ba6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	68ba      	ldr	r2, [r7, #8]
 8004bac:	0151      	lsls	r1, r2, #5
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	440a      	add	r2, r1
 8004bb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bbe:	6013      	str	r3, [r2, #0]
 8004bc0:	e036      	b.n	8004c30 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bc8:	69da      	ldr	r2, [r3, #28]
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	f003 030f 	and.w	r3, r3, #15
 8004bd2:	2101      	movs	r1, #1
 8004bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8004bd8:	041b      	lsls	r3, r3, #16
 8004bda:	68f9      	ldr	r1, [r7, #12]
 8004bdc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004be0:	4313      	orrs	r3, r2
 8004be2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	015a      	lsls	r2, r3, #5
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	4413      	add	r3, r2
 8004bec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d11a      	bne.n	8004c30 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	015a      	lsls	r2, r3, #5
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	4413      	add	r3, r2
 8004c02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	791b      	ldrb	r3, [r3, #4]
 8004c14:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004c16:	430b      	orrs	r3, r1
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	68ba      	ldr	r2, [r7, #8]
 8004c1c:	0151      	lsls	r1, r2, #5
 8004c1e:	68fa      	ldr	r2, [r7, #12]
 8004c20:	440a      	add	r2, r1
 8004c22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c2e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004c30:	2300      	movs	r3, #0
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3714      	adds	r7, #20
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr
	...

08004c40 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b085      	sub	sp, #20
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	785b      	ldrb	r3, [r3, #1]
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d161      	bne.n	8004d20 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	015a      	lsls	r2, r3, #5
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	4413      	add	r3, r2
 8004c64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c72:	d11f      	bne.n	8004cb4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	015a      	lsls	r2, r3, #5
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	4413      	add	r3, r2
 8004c7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	68ba      	ldr	r2, [r7, #8]
 8004c84:	0151      	lsls	r1, r2, #5
 8004c86:	68fa      	ldr	r2, [r7, #12]
 8004c88:	440a      	add	r2, r1
 8004c8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c8e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c92:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	015a      	lsls	r2, r3, #5
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	68ba      	ldr	r2, [r7, #8]
 8004ca4:	0151      	lsls	r1, r2, #5
 8004ca6:	68fa      	ldr	r2, [r7, #12]
 8004ca8:	440a      	add	r2, r1
 8004caa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004cb2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	f003 030f 	and.w	r3, r3, #15
 8004cc4:	2101      	movs	r1, #1
 8004cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	43db      	mvns	r3, r3
 8004cce:	68f9      	ldr	r1, [r7, #12]
 8004cd0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cde:	69da      	ldr	r2, [r3, #28]
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	f003 030f 	and.w	r3, r3, #15
 8004ce8:	2101      	movs	r1, #1
 8004cea:	fa01 f303 	lsl.w	r3, r1, r3
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	43db      	mvns	r3, r3
 8004cf2:	68f9      	ldr	r1, [r7, #12]
 8004cf4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	015a      	lsls	r2, r3, #5
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	4413      	add	r3, r2
 8004d04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	0159      	lsls	r1, r3, #5
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	440b      	add	r3, r1
 8004d12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d16:	4619      	mov	r1, r3
 8004d18:	4b35      	ldr	r3, [pc, #212]	; (8004df0 <USB_DeactivateEndpoint+0x1b0>)
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	600b      	str	r3, [r1, #0]
 8004d1e:	e060      	b.n	8004de2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	015a      	lsls	r2, r3, #5
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	4413      	add	r3, r2
 8004d28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d36:	d11f      	bne.n	8004d78 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	015a      	lsls	r2, r3, #5
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	4413      	add	r3, r2
 8004d40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	68ba      	ldr	r2, [r7, #8]
 8004d48:	0151      	lsls	r1, r2, #5
 8004d4a:	68fa      	ldr	r2, [r7, #12]
 8004d4c:	440a      	add	r2, r1
 8004d4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d52:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004d56:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	015a      	lsls	r2, r3, #5
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	4413      	add	r3, r2
 8004d60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	68ba      	ldr	r2, [r7, #8]
 8004d68:	0151      	lsls	r1, r2, #5
 8004d6a:	68fa      	ldr	r2, [r7, #12]
 8004d6c:	440a      	add	r2, r1
 8004d6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d72:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d76:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	f003 030f 	and.w	r3, r3, #15
 8004d88:	2101      	movs	r1, #1
 8004d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d8e:	041b      	lsls	r3, r3, #16
 8004d90:	43db      	mvns	r3, r3
 8004d92:	68f9      	ldr	r1, [r7, #12]
 8004d94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d98:	4013      	ands	r3, r2
 8004d9a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004da2:	69da      	ldr	r2, [r3, #28]
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	f003 030f 	and.w	r3, r3, #15
 8004dac:	2101      	movs	r1, #1
 8004dae:	fa01 f303 	lsl.w	r3, r1, r3
 8004db2:	041b      	lsls	r3, r3, #16
 8004db4:	43db      	mvns	r3, r3
 8004db6:	68f9      	ldr	r1, [r7, #12]
 8004db8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	015a      	lsls	r2, r3, #5
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	4413      	add	r3, r2
 8004dc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	0159      	lsls	r1, r3, #5
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	440b      	add	r3, r1
 8004dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dda:	4619      	mov	r1, r3
 8004ddc:	4b05      	ldr	r3, [pc, #20]	; (8004df4 <USB_DeactivateEndpoint+0x1b4>)
 8004dde:	4013      	ands	r3, r2
 8004de0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004de2:	2300      	movs	r3, #0
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3714      	adds	r7, #20
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr
 8004df0:	ec337800 	.word	0xec337800
 8004df4:	eff37800 	.word	0xeff37800

08004df8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b08a      	sub	sp, #40	; 0x28
 8004dfc:	af02      	add	r7, sp, #8
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	4613      	mov	r3, r2
 8004e04:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	785b      	ldrb	r3, [r3, #1]
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	f040 815c 	bne.w	80050d2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d132      	bne.n	8004e88 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	015a      	lsls	r2, r3, #5
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	4413      	add	r3, r2
 8004e2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e2e:	691b      	ldr	r3, [r3, #16]
 8004e30:	69ba      	ldr	r2, [r7, #24]
 8004e32:	0151      	lsls	r1, r2, #5
 8004e34:	69fa      	ldr	r2, [r7, #28]
 8004e36:	440a      	add	r2, r1
 8004e38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e3c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e40:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e44:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004e46:	69bb      	ldr	r3, [r7, #24]
 8004e48:	015a      	lsls	r2, r3, #5
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	4413      	add	r3, r2
 8004e4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e52:	691b      	ldr	r3, [r3, #16]
 8004e54:	69ba      	ldr	r2, [r7, #24]
 8004e56:	0151      	lsls	r1, r2, #5
 8004e58:	69fa      	ldr	r2, [r7, #28]
 8004e5a:	440a      	add	r2, r1
 8004e5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e60:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e64:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004e66:	69bb      	ldr	r3, [r7, #24]
 8004e68:	015a      	lsls	r2, r3, #5
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	4413      	add	r3, r2
 8004e6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	69ba      	ldr	r2, [r7, #24]
 8004e76:	0151      	lsls	r1, r2, #5
 8004e78:	69fa      	ldr	r2, [r7, #28]
 8004e7a:	440a      	add	r2, r1
 8004e7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e80:	0cdb      	lsrs	r3, r3, #19
 8004e82:	04db      	lsls	r3, r3, #19
 8004e84:	6113      	str	r3, [r2, #16]
 8004e86:	e074      	b.n	8004f72 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	015a      	lsls	r2, r3, #5
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	4413      	add	r3, r2
 8004e90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	69ba      	ldr	r2, [r7, #24]
 8004e98:	0151      	lsls	r1, r2, #5
 8004e9a:	69fa      	ldr	r2, [r7, #28]
 8004e9c:	440a      	add	r2, r1
 8004e9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ea2:	0cdb      	lsrs	r3, r3, #19
 8004ea4:	04db      	lsls	r3, r3, #19
 8004ea6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004ea8:	69bb      	ldr	r3, [r7, #24]
 8004eaa:	015a      	lsls	r2, r3, #5
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	4413      	add	r3, r2
 8004eb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	69ba      	ldr	r2, [r7, #24]
 8004eb8:	0151      	lsls	r1, r2, #5
 8004eba:	69fa      	ldr	r2, [r7, #28]
 8004ebc:	440a      	add	r2, r1
 8004ebe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ec2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ec6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004eca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004ecc:	69bb      	ldr	r3, [r7, #24]
 8004ece:	015a      	lsls	r2, r3, #5
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	4413      	add	r3, r2
 8004ed4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ed8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	6999      	ldr	r1, [r3, #24]
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	440b      	add	r3, r1
 8004ee4:	1e59      	subs	r1, r3, #1
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	fbb1 f3f3 	udiv	r3, r1, r3
 8004eee:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004ef0:	4b9d      	ldr	r3, [pc, #628]	; (8005168 <USB_EPStartXfer+0x370>)
 8004ef2:	400b      	ands	r3, r1
 8004ef4:	69b9      	ldr	r1, [r7, #24]
 8004ef6:	0148      	lsls	r0, r1, #5
 8004ef8:	69f9      	ldr	r1, [r7, #28]
 8004efa:	4401      	add	r1, r0
 8004efc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004f00:	4313      	orrs	r3, r2
 8004f02:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004f04:	69bb      	ldr	r3, [r7, #24]
 8004f06:	015a      	lsls	r2, r3, #5
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	4413      	add	r3, r2
 8004f0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f10:	691a      	ldr	r2, [r3, #16]
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	699b      	ldr	r3, [r3, #24]
 8004f16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f1a:	69b9      	ldr	r1, [r7, #24]
 8004f1c:	0148      	lsls	r0, r1, #5
 8004f1e:	69f9      	ldr	r1, [r7, #28]
 8004f20:	4401      	add	r1, r0
 8004f22:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004f26:	4313      	orrs	r3, r2
 8004f28:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	791b      	ldrb	r3, [r3, #4]
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d11f      	bne.n	8004f72 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	015a      	lsls	r2, r3, #5
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	4413      	add	r3, r2
 8004f3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f3e:	691b      	ldr	r3, [r3, #16]
 8004f40:	69ba      	ldr	r2, [r7, #24]
 8004f42:	0151      	lsls	r1, r2, #5
 8004f44:	69fa      	ldr	r2, [r7, #28]
 8004f46:	440a      	add	r2, r1
 8004f48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f4c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004f50:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004f52:	69bb      	ldr	r3, [r7, #24]
 8004f54:	015a      	lsls	r2, r3, #5
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	4413      	add	r3, r2
 8004f5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f5e:	691b      	ldr	r3, [r3, #16]
 8004f60:	69ba      	ldr	r2, [r7, #24]
 8004f62:	0151      	lsls	r1, r2, #5
 8004f64:	69fa      	ldr	r2, [r7, #28]
 8004f66:	440a      	add	r2, r1
 8004f68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f6c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f70:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004f72:	79fb      	ldrb	r3, [r7, #7]
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d14b      	bne.n	8005010 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	695b      	ldr	r3, [r3, #20]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d009      	beq.n	8004f94 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004f80:	69bb      	ldr	r3, [r7, #24]
 8004f82:	015a      	lsls	r2, r3, #5
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	4413      	add	r3, r2
 8004f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	695b      	ldr	r3, [r3, #20]
 8004f92:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	791b      	ldrb	r3, [r3, #4]
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d128      	bne.n	8004fee <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d110      	bne.n	8004fce <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	015a      	lsls	r2, r3, #5
 8004fb0:	69fb      	ldr	r3, [r7, #28]
 8004fb2:	4413      	add	r3, r2
 8004fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	69ba      	ldr	r2, [r7, #24]
 8004fbc:	0151      	lsls	r1, r2, #5
 8004fbe:	69fa      	ldr	r2, [r7, #28]
 8004fc0:	440a      	add	r2, r1
 8004fc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fc6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004fca:	6013      	str	r3, [r2, #0]
 8004fcc:	e00f      	b.n	8004fee <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	015a      	lsls	r2, r3, #5
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	4413      	add	r3, r2
 8004fd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	69ba      	ldr	r2, [r7, #24]
 8004fde:	0151      	lsls	r1, r2, #5
 8004fe0:	69fa      	ldr	r2, [r7, #28]
 8004fe2:	440a      	add	r2, r1
 8004fe4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fe8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fec:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004fee:	69bb      	ldr	r3, [r7, #24]
 8004ff0:	015a      	lsls	r2, r3, #5
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	4413      	add	r3, r2
 8004ff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	69ba      	ldr	r2, [r7, #24]
 8004ffe:	0151      	lsls	r1, r2, #5
 8005000:	69fa      	ldr	r2, [r7, #28]
 8005002:	440a      	add	r2, r1
 8005004:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005008:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800500c:	6013      	str	r3, [r2, #0]
 800500e:	e133      	b.n	8005278 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	015a      	lsls	r2, r3, #5
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	4413      	add	r3, r2
 8005018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	69ba      	ldr	r2, [r7, #24]
 8005020:	0151      	lsls	r1, r2, #5
 8005022:	69fa      	ldr	r2, [r7, #28]
 8005024:	440a      	add	r2, r1
 8005026:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800502a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800502e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	791b      	ldrb	r3, [r3, #4]
 8005034:	2b01      	cmp	r3, #1
 8005036:	d015      	beq.n	8005064 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	699b      	ldr	r3, [r3, #24]
 800503c:	2b00      	cmp	r3, #0
 800503e:	f000 811b 	beq.w	8005278 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005048:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	f003 030f 	and.w	r3, r3, #15
 8005052:	2101      	movs	r1, #1
 8005054:	fa01 f303 	lsl.w	r3, r1, r3
 8005058:	69f9      	ldr	r1, [r7, #28]
 800505a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800505e:	4313      	orrs	r3, r2
 8005060:	634b      	str	r3, [r1, #52]	; 0x34
 8005062:	e109      	b.n	8005278 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005070:	2b00      	cmp	r3, #0
 8005072:	d110      	bne.n	8005096 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	015a      	lsls	r2, r3, #5
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	4413      	add	r3, r2
 800507c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	69ba      	ldr	r2, [r7, #24]
 8005084:	0151      	lsls	r1, r2, #5
 8005086:	69fa      	ldr	r2, [r7, #28]
 8005088:	440a      	add	r2, r1
 800508a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800508e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005092:	6013      	str	r3, [r2, #0]
 8005094:	e00f      	b.n	80050b6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005096:	69bb      	ldr	r3, [r7, #24]
 8005098:	015a      	lsls	r2, r3, #5
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	4413      	add	r3, r2
 800509e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	69ba      	ldr	r2, [r7, #24]
 80050a6:	0151      	lsls	r1, r2, #5
 80050a8:	69fa      	ldr	r2, [r7, #28]
 80050aa:	440a      	add	r2, r1
 80050ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050b4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	6919      	ldr	r1, [r3, #16]
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	781a      	ldrb	r2, [r3, #0]
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	699b      	ldr	r3, [r3, #24]
 80050c2:	b298      	uxth	r0, r3
 80050c4:	79fb      	ldrb	r3, [r7, #7]
 80050c6:	9300      	str	r3, [sp, #0]
 80050c8:	4603      	mov	r3, r0
 80050ca:	68f8      	ldr	r0, [r7, #12]
 80050cc:	f000 fade 	bl	800568c <USB_WritePacket>
 80050d0:	e0d2      	b.n	8005278 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80050d2:	69bb      	ldr	r3, [r7, #24]
 80050d4:	015a      	lsls	r2, r3, #5
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	4413      	add	r3, r2
 80050da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050de:	691b      	ldr	r3, [r3, #16]
 80050e0:	69ba      	ldr	r2, [r7, #24]
 80050e2:	0151      	lsls	r1, r2, #5
 80050e4:	69fa      	ldr	r2, [r7, #28]
 80050e6:	440a      	add	r2, r1
 80050e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050ec:	0cdb      	lsrs	r3, r3, #19
 80050ee:	04db      	lsls	r3, r3, #19
 80050f0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80050f2:	69bb      	ldr	r3, [r7, #24]
 80050f4:	015a      	lsls	r2, r3, #5
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	4413      	add	r3, r2
 80050fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050fe:	691b      	ldr	r3, [r3, #16]
 8005100:	69ba      	ldr	r2, [r7, #24]
 8005102:	0151      	lsls	r1, r2, #5
 8005104:	69fa      	ldr	r2, [r7, #28]
 8005106:	440a      	add	r2, r1
 8005108:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800510c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005110:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005114:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	699b      	ldr	r3, [r3, #24]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d126      	bne.n	800516c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	015a      	lsls	r2, r3, #5
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	4413      	add	r3, r2
 8005126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800512a:	691a      	ldr	r2, [r3, #16]
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005134:	69b9      	ldr	r1, [r7, #24]
 8005136:	0148      	lsls	r0, r1, #5
 8005138:	69f9      	ldr	r1, [r7, #28]
 800513a:	4401      	add	r1, r0
 800513c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005140:	4313      	orrs	r3, r2
 8005142:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005144:	69bb      	ldr	r3, [r7, #24]
 8005146:	015a      	lsls	r2, r3, #5
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	4413      	add	r3, r2
 800514c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	69ba      	ldr	r2, [r7, #24]
 8005154:	0151      	lsls	r1, r2, #5
 8005156:	69fa      	ldr	r2, [r7, #28]
 8005158:	440a      	add	r2, r1
 800515a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800515e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005162:	6113      	str	r3, [r2, #16]
 8005164:	e03a      	b.n	80051dc <USB_EPStartXfer+0x3e4>
 8005166:	bf00      	nop
 8005168:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	699a      	ldr	r2, [r3, #24]
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	4413      	add	r3, r2
 8005176:	1e5a      	subs	r2, r3, #1
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005180:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	8afa      	ldrh	r2, [r7, #22]
 8005188:	fb03 f202 	mul.w	r2, r3, r2
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	015a      	lsls	r2, r3, #5
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	4413      	add	r3, r2
 8005198:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800519c:	691a      	ldr	r2, [r3, #16]
 800519e:	8afb      	ldrh	r3, [r7, #22]
 80051a0:	04d9      	lsls	r1, r3, #19
 80051a2:	4b38      	ldr	r3, [pc, #224]	; (8005284 <USB_EPStartXfer+0x48c>)
 80051a4:	400b      	ands	r3, r1
 80051a6:	69b9      	ldr	r1, [r7, #24]
 80051a8:	0148      	lsls	r0, r1, #5
 80051aa:	69f9      	ldr	r1, [r7, #28]
 80051ac:	4401      	add	r1, r0
 80051ae:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80051b2:	4313      	orrs	r3, r2
 80051b4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	015a      	lsls	r2, r3, #5
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	4413      	add	r3, r2
 80051be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051c2:	691a      	ldr	r2, [r3, #16]
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	69db      	ldr	r3, [r3, #28]
 80051c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051cc:	69b9      	ldr	r1, [r7, #24]
 80051ce:	0148      	lsls	r0, r1, #5
 80051d0:	69f9      	ldr	r1, [r7, #28]
 80051d2:	4401      	add	r1, r0
 80051d4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80051d8:	4313      	orrs	r3, r2
 80051da:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80051dc:	79fb      	ldrb	r3, [r7, #7]
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d10d      	bne.n	80051fe <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d009      	beq.n	80051fe <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	6919      	ldr	r1, [r3, #16]
 80051ee:	69bb      	ldr	r3, [r7, #24]
 80051f0:	015a      	lsls	r2, r3, #5
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	4413      	add	r3, r2
 80051f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051fa:	460a      	mov	r2, r1
 80051fc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	791b      	ldrb	r3, [r3, #4]
 8005202:	2b01      	cmp	r3, #1
 8005204:	d128      	bne.n	8005258 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005212:	2b00      	cmp	r3, #0
 8005214:	d110      	bne.n	8005238 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	015a      	lsls	r2, r3, #5
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	4413      	add	r3, r2
 800521e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	69ba      	ldr	r2, [r7, #24]
 8005226:	0151      	lsls	r1, r2, #5
 8005228:	69fa      	ldr	r2, [r7, #28]
 800522a:	440a      	add	r2, r1
 800522c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005230:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005234:	6013      	str	r3, [r2, #0]
 8005236:	e00f      	b.n	8005258 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005238:	69bb      	ldr	r3, [r7, #24]
 800523a:	015a      	lsls	r2, r3, #5
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	4413      	add	r3, r2
 8005240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	69ba      	ldr	r2, [r7, #24]
 8005248:	0151      	lsls	r1, r2, #5
 800524a:	69fa      	ldr	r2, [r7, #28]
 800524c:	440a      	add	r2, r1
 800524e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005252:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005256:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	015a      	lsls	r2, r3, #5
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	4413      	add	r3, r2
 8005260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	69ba      	ldr	r2, [r7, #24]
 8005268:	0151      	lsls	r1, r2, #5
 800526a:	69fa      	ldr	r2, [r7, #28]
 800526c:	440a      	add	r2, r1
 800526e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005272:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005276:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005278:	2300      	movs	r3, #0
}
 800527a:	4618      	mov	r0, r3
 800527c:	3720      	adds	r7, #32
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	1ff80000 	.word	0x1ff80000

08005288 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005288:	b480      	push	{r7}
 800528a:	b087      	sub	sp, #28
 800528c:	af00      	add	r7, sp, #0
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	4613      	mov	r3, r2
 8005294:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	785b      	ldrb	r3, [r3, #1]
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	f040 80ce 	bne.w	8005446 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	699b      	ldr	r3, [r3, #24]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d132      	bne.n	8005318 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	015a      	lsls	r2, r3, #5
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	4413      	add	r3, r2
 80052ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052be:	691b      	ldr	r3, [r3, #16]
 80052c0:	693a      	ldr	r2, [r7, #16]
 80052c2:	0151      	lsls	r1, r2, #5
 80052c4:	697a      	ldr	r2, [r7, #20]
 80052c6:	440a      	add	r2, r1
 80052c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052cc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80052d0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80052d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	015a      	lsls	r2, r3, #5
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	4413      	add	r3, r2
 80052de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052e2:	691b      	ldr	r3, [r3, #16]
 80052e4:	693a      	ldr	r2, [r7, #16]
 80052e6:	0151      	lsls	r1, r2, #5
 80052e8:	697a      	ldr	r2, [r7, #20]
 80052ea:	440a      	add	r2, r1
 80052ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80052f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	015a      	lsls	r2, r3, #5
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	4413      	add	r3, r2
 80052fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005302:	691b      	ldr	r3, [r3, #16]
 8005304:	693a      	ldr	r2, [r7, #16]
 8005306:	0151      	lsls	r1, r2, #5
 8005308:	697a      	ldr	r2, [r7, #20]
 800530a:	440a      	add	r2, r1
 800530c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005310:	0cdb      	lsrs	r3, r3, #19
 8005312:	04db      	lsls	r3, r3, #19
 8005314:	6113      	str	r3, [r2, #16]
 8005316:	e04e      	b.n	80053b6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	015a      	lsls	r2, r3, #5
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	4413      	add	r3, r2
 8005320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005324:	691b      	ldr	r3, [r3, #16]
 8005326:	693a      	ldr	r2, [r7, #16]
 8005328:	0151      	lsls	r1, r2, #5
 800532a:	697a      	ldr	r2, [r7, #20]
 800532c:	440a      	add	r2, r1
 800532e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005332:	0cdb      	lsrs	r3, r3, #19
 8005334:	04db      	lsls	r3, r3, #19
 8005336:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	015a      	lsls	r2, r3, #5
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	4413      	add	r3, r2
 8005340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005344:	691b      	ldr	r3, [r3, #16]
 8005346:	693a      	ldr	r2, [r7, #16]
 8005348:	0151      	lsls	r1, r2, #5
 800534a:	697a      	ldr	r2, [r7, #20]
 800534c:	440a      	add	r2, r1
 800534e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005352:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005356:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800535a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	699a      	ldr	r2, [r3, #24]
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	429a      	cmp	r2, r3
 8005366:	d903      	bls.n	8005370 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	68da      	ldr	r2, [r3, #12]
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	015a      	lsls	r2, r3, #5
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	4413      	add	r3, r2
 8005378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	693a      	ldr	r2, [r7, #16]
 8005380:	0151      	lsls	r1, r2, #5
 8005382:	697a      	ldr	r2, [r7, #20]
 8005384:	440a      	add	r2, r1
 8005386:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800538a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800538e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	015a      	lsls	r2, r3, #5
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	4413      	add	r3, r2
 8005398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800539c:	691a      	ldr	r2, [r3, #16]
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	699b      	ldr	r3, [r3, #24]
 80053a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053a6:	6939      	ldr	r1, [r7, #16]
 80053a8:	0148      	lsls	r0, r1, #5
 80053aa:	6979      	ldr	r1, [r7, #20]
 80053ac:	4401      	add	r1, r0
 80053ae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80053b2:	4313      	orrs	r3, r2
 80053b4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80053b6:	79fb      	ldrb	r3, [r7, #7]
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d11e      	bne.n	80053fa <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	695b      	ldr	r3, [r3, #20]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d009      	beq.n	80053d8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	015a      	lsls	r2, r3, #5
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	4413      	add	r3, r2
 80053cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053d0:	461a      	mov	r2, r3
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	695b      	ldr	r3, [r3, #20]
 80053d6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	015a      	lsls	r2, r3, #5
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	4413      	add	r3, r2
 80053e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	693a      	ldr	r2, [r7, #16]
 80053e8:	0151      	lsls	r1, r2, #5
 80053ea:	697a      	ldr	r2, [r7, #20]
 80053ec:	440a      	add	r2, r1
 80053ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80053f6:	6013      	str	r3, [r2, #0]
 80053f8:	e097      	b.n	800552a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	015a      	lsls	r2, r3, #5
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	4413      	add	r3, r2
 8005402:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	693a      	ldr	r2, [r7, #16]
 800540a:	0151      	lsls	r1, r2, #5
 800540c:	697a      	ldr	r2, [r7, #20]
 800540e:	440a      	add	r2, r1
 8005410:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005414:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005418:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	699b      	ldr	r3, [r3, #24]
 800541e:	2b00      	cmp	r3, #0
 8005420:	f000 8083 	beq.w	800552a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800542a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	f003 030f 	and.w	r3, r3, #15
 8005434:	2101      	movs	r1, #1
 8005436:	fa01 f303 	lsl.w	r3, r1, r3
 800543a:	6979      	ldr	r1, [r7, #20]
 800543c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005440:	4313      	orrs	r3, r2
 8005442:	634b      	str	r3, [r1, #52]	; 0x34
 8005444:	e071      	b.n	800552a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	015a      	lsls	r2, r3, #5
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	4413      	add	r3, r2
 800544e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005452:	691b      	ldr	r3, [r3, #16]
 8005454:	693a      	ldr	r2, [r7, #16]
 8005456:	0151      	lsls	r1, r2, #5
 8005458:	697a      	ldr	r2, [r7, #20]
 800545a:	440a      	add	r2, r1
 800545c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005460:	0cdb      	lsrs	r3, r3, #19
 8005462:	04db      	lsls	r3, r3, #19
 8005464:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	015a      	lsls	r2, r3, #5
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	4413      	add	r3, r2
 800546e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005472:	691b      	ldr	r3, [r3, #16]
 8005474:	693a      	ldr	r2, [r7, #16]
 8005476:	0151      	lsls	r1, r2, #5
 8005478:	697a      	ldr	r2, [r7, #20]
 800547a:	440a      	add	r2, r1
 800547c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005480:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005484:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005488:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	699b      	ldr	r3, [r3, #24]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d003      	beq.n	800549a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	68da      	ldr	r2, [r3, #12]
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	68da      	ldr	r2, [r3, #12]
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	015a      	lsls	r2, r3, #5
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	4413      	add	r3, r2
 80054aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ae:	691b      	ldr	r3, [r3, #16]
 80054b0:	693a      	ldr	r2, [r7, #16]
 80054b2:	0151      	lsls	r1, r2, #5
 80054b4:	697a      	ldr	r2, [r7, #20]
 80054b6:	440a      	add	r2, r1
 80054b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80054c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	015a      	lsls	r2, r3, #5
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	4413      	add	r3, r2
 80054ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ce:	691a      	ldr	r2, [r3, #16]
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	69db      	ldr	r3, [r3, #28]
 80054d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054d8:	6939      	ldr	r1, [r7, #16]
 80054da:	0148      	lsls	r0, r1, #5
 80054dc:	6979      	ldr	r1, [r7, #20]
 80054de:	4401      	add	r1, r0
 80054e0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80054e4:	4313      	orrs	r3, r2
 80054e6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80054e8:	79fb      	ldrb	r3, [r7, #7]
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d10d      	bne.n	800550a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d009      	beq.n	800550a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	6919      	ldr	r1, [r3, #16]
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	015a      	lsls	r2, r3, #5
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	4413      	add	r3, r2
 8005502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005506:	460a      	mov	r2, r1
 8005508:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	015a      	lsls	r2, r3, #5
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	4413      	add	r3, r2
 8005512:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	693a      	ldr	r2, [r7, #16]
 800551a:	0151      	lsls	r1, r2, #5
 800551c:	697a      	ldr	r2, [r7, #20]
 800551e:	440a      	add	r2, r1
 8005520:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005524:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005528:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800552a:	2300      	movs	r3, #0
}
 800552c:	4618      	mov	r0, r3
 800552e:	371c      	adds	r7, #28
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005538:	b480      	push	{r7}
 800553a:	b087      	sub	sp, #28
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005542:	2300      	movs	r3, #0
 8005544:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005546:	2300      	movs	r3, #0
 8005548:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	785b      	ldrb	r3, [r3, #1]
 8005552:	2b01      	cmp	r3, #1
 8005554:	d14a      	bne.n	80055ec <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	015a      	lsls	r2, r3, #5
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	4413      	add	r3, r2
 8005560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800556a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800556e:	f040 8086 	bne.w	800567e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	781b      	ldrb	r3, [r3, #0]
 8005576:	015a      	lsls	r2, r3, #5
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	4413      	add	r3, r2
 800557c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	683a      	ldr	r2, [r7, #0]
 8005584:	7812      	ldrb	r2, [r2, #0]
 8005586:	0151      	lsls	r1, r2, #5
 8005588:	693a      	ldr	r2, [r7, #16]
 800558a:	440a      	add	r2, r1
 800558c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005590:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005594:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	015a      	lsls	r2, r3, #5
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	4413      	add	r3, r2
 80055a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	683a      	ldr	r2, [r7, #0]
 80055a8:	7812      	ldrb	r2, [r2, #0]
 80055aa:	0151      	lsls	r1, r2, #5
 80055ac:	693a      	ldr	r2, [r7, #16]
 80055ae:	440a      	add	r2, r1
 80055b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055b8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	3301      	adds	r3, #1
 80055be:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f242 7210 	movw	r2, #10000	; 0x2710
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d902      	bls.n	80055d0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	75fb      	strb	r3, [r7, #23]
          break;
 80055ce:	e056      	b.n	800567e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	015a      	lsls	r2, r3, #5
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	4413      	add	r3, r2
 80055da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055e8:	d0e7      	beq.n	80055ba <USB_EPStopXfer+0x82>
 80055ea:	e048      	b.n	800567e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	015a      	lsls	r2, r3, #5
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	4413      	add	r3, r2
 80055f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005600:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005604:	d13b      	bne.n	800567e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	781b      	ldrb	r3, [r3, #0]
 800560a:	015a      	lsls	r2, r3, #5
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	4413      	add	r3, r2
 8005610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	683a      	ldr	r2, [r7, #0]
 8005618:	7812      	ldrb	r2, [r2, #0]
 800561a:	0151      	lsls	r1, r2, #5
 800561c:	693a      	ldr	r2, [r7, #16]
 800561e:	440a      	add	r2, r1
 8005620:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005624:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005628:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	015a      	lsls	r2, r3, #5
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	4413      	add	r3, r2
 8005634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	683a      	ldr	r2, [r7, #0]
 800563c:	7812      	ldrb	r2, [r2, #0]
 800563e:	0151      	lsls	r1, r2, #5
 8005640:	693a      	ldr	r2, [r7, #16]
 8005642:	440a      	add	r2, r1
 8005644:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005648:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800564c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	3301      	adds	r3, #1
 8005652:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f242 7210 	movw	r2, #10000	; 0x2710
 800565a:	4293      	cmp	r3, r2
 800565c:	d902      	bls.n	8005664 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	75fb      	strb	r3, [r7, #23]
          break;
 8005662:	e00c      	b.n	800567e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	015a      	lsls	r2, r3, #5
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	4413      	add	r3, r2
 800566e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005678:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800567c:	d0e7      	beq.n	800564e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800567e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005680:	4618      	mov	r0, r3
 8005682:	371c      	adds	r7, #28
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr

0800568c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800568c:	b480      	push	{r7}
 800568e:	b089      	sub	sp, #36	; 0x24
 8005690:	af00      	add	r7, sp, #0
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	60b9      	str	r1, [r7, #8]
 8005696:	4611      	mov	r1, r2
 8005698:	461a      	mov	r2, r3
 800569a:	460b      	mov	r3, r1
 800569c:	71fb      	strb	r3, [r7, #7]
 800569e:	4613      	mov	r3, r2
 80056a0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80056aa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d123      	bne.n	80056fa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80056b2:	88bb      	ldrh	r3, [r7, #4]
 80056b4:	3303      	adds	r3, #3
 80056b6:	089b      	lsrs	r3, r3, #2
 80056b8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80056ba:	2300      	movs	r3, #0
 80056bc:	61bb      	str	r3, [r7, #24]
 80056be:	e018      	b.n	80056f2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80056c0:	79fb      	ldrb	r3, [r7, #7]
 80056c2:	031a      	lsls	r2, r3, #12
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	4413      	add	r3, r2
 80056c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056cc:	461a      	mov	r2, r3
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	3301      	adds	r3, #1
 80056d8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80056da:	69fb      	ldr	r3, [r7, #28]
 80056dc:	3301      	adds	r3, #1
 80056de:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	3301      	adds	r3, #1
 80056e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	3301      	adds	r3, #1
 80056ea:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80056ec:	69bb      	ldr	r3, [r7, #24]
 80056ee:	3301      	adds	r3, #1
 80056f0:	61bb      	str	r3, [r7, #24]
 80056f2:	69ba      	ldr	r2, [r7, #24]
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d3e2      	bcc.n	80056c0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80056fa:	2300      	movs	r3, #0
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3724      	adds	r7, #36	; 0x24
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr

08005708 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005708:	b480      	push	{r7}
 800570a:	b08b      	sub	sp, #44	; 0x2c
 800570c:	af00      	add	r7, sp, #0
 800570e:	60f8      	str	r0, [r7, #12]
 8005710:	60b9      	str	r1, [r7, #8]
 8005712:	4613      	mov	r3, r2
 8005714:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800571e:	88fb      	ldrh	r3, [r7, #6]
 8005720:	089b      	lsrs	r3, r3, #2
 8005722:	b29b      	uxth	r3, r3
 8005724:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005726:	88fb      	ldrh	r3, [r7, #6]
 8005728:	f003 0303 	and.w	r3, r3, #3
 800572c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800572e:	2300      	movs	r3, #0
 8005730:	623b      	str	r3, [r7, #32]
 8005732:	e014      	b.n	800575e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005734:	69bb      	ldr	r3, [r7, #24]
 8005736:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005742:	3301      	adds	r3, #1
 8005744:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005748:	3301      	adds	r3, #1
 800574a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800574c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574e:	3301      	adds	r3, #1
 8005750:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005754:	3301      	adds	r3, #1
 8005756:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005758:	6a3b      	ldr	r3, [r7, #32]
 800575a:	3301      	adds	r3, #1
 800575c:	623b      	str	r3, [r7, #32]
 800575e:	6a3a      	ldr	r2, [r7, #32]
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	429a      	cmp	r2, r3
 8005764:	d3e6      	bcc.n	8005734 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005766:	8bfb      	ldrh	r3, [r7, #30]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d01e      	beq.n	80057aa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800576c:	2300      	movs	r3, #0
 800576e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005770:	69bb      	ldr	r3, [r7, #24]
 8005772:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005776:	461a      	mov	r2, r3
 8005778:	f107 0310 	add.w	r3, r7, #16
 800577c:	6812      	ldr	r2, [r2, #0]
 800577e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005780:	693a      	ldr	r2, [r7, #16]
 8005782:	6a3b      	ldr	r3, [r7, #32]
 8005784:	b2db      	uxtb	r3, r3
 8005786:	00db      	lsls	r3, r3, #3
 8005788:	fa22 f303 	lsr.w	r3, r2, r3
 800578c:	b2da      	uxtb	r2, r3
 800578e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005790:	701a      	strb	r2, [r3, #0]
      i++;
 8005792:	6a3b      	ldr	r3, [r7, #32]
 8005794:	3301      	adds	r3, #1
 8005796:	623b      	str	r3, [r7, #32]
      pDest++;
 8005798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579a:	3301      	adds	r3, #1
 800579c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800579e:	8bfb      	ldrh	r3, [r7, #30]
 80057a0:	3b01      	subs	r3, #1
 80057a2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80057a4:	8bfb      	ldrh	r3, [r7, #30]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d1ea      	bne.n	8005780 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80057aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	372c      	adds	r7, #44	; 0x2c
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr

080057b8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b085      	sub	sp, #20
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	785b      	ldrb	r3, [r3, #1]
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d12c      	bne.n	800582e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	015a      	lsls	r2, r3, #5
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	4413      	add	r3, r2
 80057dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	db12      	blt.n	800580c <USB_EPSetStall+0x54>
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d00f      	beq.n	800580c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	015a      	lsls	r2, r3, #5
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	4413      	add	r3, r2
 80057f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	68ba      	ldr	r2, [r7, #8]
 80057fc:	0151      	lsls	r1, r2, #5
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	440a      	add	r2, r1
 8005802:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005806:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800580a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	015a      	lsls	r2, r3, #5
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	4413      	add	r3, r2
 8005814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	68ba      	ldr	r2, [r7, #8]
 800581c:	0151      	lsls	r1, r2, #5
 800581e:	68fa      	ldr	r2, [r7, #12]
 8005820:	440a      	add	r2, r1
 8005822:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005826:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800582a:	6013      	str	r3, [r2, #0]
 800582c:	e02b      	b.n	8005886 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	015a      	lsls	r2, r3, #5
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	4413      	add	r3, r2
 8005836:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	2b00      	cmp	r3, #0
 800583e:	db12      	blt.n	8005866 <USB_EPSetStall+0xae>
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d00f      	beq.n	8005866 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	015a      	lsls	r2, r3, #5
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	4413      	add	r3, r2
 800584e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	68ba      	ldr	r2, [r7, #8]
 8005856:	0151      	lsls	r1, r2, #5
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	440a      	add	r2, r1
 800585c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005860:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005864:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	015a      	lsls	r2, r3, #5
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	4413      	add	r3, r2
 800586e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	68ba      	ldr	r2, [r7, #8]
 8005876:	0151      	lsls	r1, r2, #5
 8005878:	68fa      	ldr	r2, [r7, #12]
 800587a:	440a      	add	r2, r1
 800587c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005880:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005884:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005886:	2300      	movs	r3, #0
}
 8005888:	4618      	mov	r0, r3
 800588a:	3714      	adds	r7, #20
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005894:	b480      	push	{r7}
 8005896:	b085      	sub	sp, #20
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	785b      	ldrb	r3, [r3, #1]
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d128      	bne.n	8005902 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	015a      	lsls	r2, r3, #5
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	4413      	add	r3, r2
 80058b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	68ba      	ldr	r2, [r7, #8]
 80058c0:	0151      	lsls	r1, r2, #5
 80058c2:	68fa      	ldr	r2, [r7, #12]
 80058c4:	440a      	add	r2, r1
 80058c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80058ce:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	791b      	ldrb	r3, [r3, #4]
 80058d4:	2b03      	cmp	r3, #3
 80058d6:	d003      	beq.n	80058e0 <USB_EPClearStall+0x4c>
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	791b      	ldrb	r3, [r3, #4]
 80058dc:	2b02      	cmp	r3, #2
 80058de:	d138      	bne.n	8005952 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	015a      	lsls	r2, r3, #5
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	4413      	add	r3, r2
 80058e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	68ba      	ldr	r2, [r7, #8]
 80058f0:	0151      	lsls	r1, r2, #5
 80058f2:	68fa      	ldr	r2, [r7, #12]
 80058f4:	440a      	add	r2, r1
 80058f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058fe:	6013      	str	r3, [r2, #0]
 8005900:	e027      	b.n	8005952 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	015a      	lsls	r2, r3, #5
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	4413      	add	r3, r2
 800590a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	68ba      	ldr	r2, [r7, #8]
 8005912:	0151      	lsls	r1, r2, #5
 8005914:	68fa      	ldr	r2, [r7, #12]
 8005916:	440a      	add	r2, r1
 8005918:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800591c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005920:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	791b      	ldrb	r3, [r3, #4]
 8005926:	2b03      	cmp	r3, #3
 8005928:	d003      	beq.n	8005932 <USB_EPClearStall+0x9e>
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	791b      	ldrb	r3, [r3, #4]
 800592e:	2b02      	cmp	r3, #2
 8005930:	d10f      	bne.n	8005952 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	015a      	lsls	r2, r3, #5
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	4413      	add	r3, r2
 800593a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	68ba      	ldr	r2, [r7, #8]
 8005942:	0151      	lsls	r1, r2, #5
 8005944:	68fa      	ldr	r2, [r7, #12]
 8005946:	440a      	add	r2, r1
 8005948:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800594c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005950:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005952:	2300      	movs	r3, #0
}
 8005954:	4618      	mov	r0, r3
 8005956:	3714      	adds	r7, #20
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr

08005960 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005960:	b480      	push	{r7}
 8005962:	b085      	sub	sp, #20
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	460b      	mov	r3, r1
 800596a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	68fa      	ldr	r2, [r7, #12]
 800597a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800597e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005982:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	78fb      	ldrb	r3, [r7, #3]
 800598e:	011b      	lsls	r3, r3, #4
 8005990:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005994:	68f9      	ldr	r1, [r7, #12]
 8005996:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800599a:	4313      	orrs	r3, r2
 800599c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800599e:	2300      	movs	r3, #0
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3714      	adds	r7, #20
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr

080059ac <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b085      	sub	sp, #20
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	68fa      	ldr	r2, [r7, #12]
 80059c2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80059c6:	f023 0303 	bic.w	r3, r3, #3
 80059ca:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	68fa      	ldr	r2, [r7, #12]
 80059d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059da:	f023 0302 	bic.w	r3, r3, #2
 80059de:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80059e0:	2300      	movs	r3, #0
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3714      	adds	r7, #20
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr

080059ee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80059ee:	b480      	push	{r7}
 80059f0:	b085      	sub	sp, #20
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	68fa      	ldr	r2, [r7, #12]
 8005a04:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005a08:	f023 0303 	bic.w	r3, r3, #3
 8005a0c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	68fa      	ldr	r2, [r7, #12]
 8005a18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a1c:	f043 0302 	orr.w	r3, r3, #2
 8005a20:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005a22:	2300      	movs	r3, #0
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3714      	adds	r7, #20
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr

08005a30 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b085      	sub	sp, #20
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	695b      	ldr	r3, [r3, #20]
 8005a3c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	699b      	ldr	r3, [r3, #24]
 8005a42:	68fa      	ldr	r2, [r7, #12]
 8005a44:	4013      	ands	r3, r2
 8005a46:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005a48:	68fb      	ldr	r3, [r7, #12]
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3714      	adds	r7, #20
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr

08005a56 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a56:	b480      	push	{r7}
 8005a58:	b085      	sub	sp, #20
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a68:	699b      	ldr	r3, [r3, #24]
 8005a6a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a72:	69db      	ldr	r3, [r3, #28]
 8005a74:	68ba      	ldr	r2, [r7, #8]
 8005a76:	4013      	ands	r3, r2
 8005a78:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	0c1b      	lsrs	r3, r3, #16
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3714      	adds	r7, #20
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr

08005a8a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a8a:	b480      	push	{r7}
 8005a8c:	b085      	sub	sp, #20
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a9c:	699b      	ldr	r3, [r3, #24]
 8005a9e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aa6:	69db      	ldr	r3, [r3, #28]
 8005aa8:	68ba      	ldr	r2, [r7, #8]
 8005aaa:	4013      	ands	r3, r2
 8005aac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	b29b      	uxth	r3, r3
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3714      	adds	r7, #20
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr

08005abe <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005abe:	b480      	push	{r7}
 8005ac0:	b085      	sub	sp, #20
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	6078      	str	r0, [r7, #4]
 8005ac6:	460b      	mov	r3, r1
 8005ac8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005ace:	78fb      	ldrb	r3, [r7, #3]
 8005ad0:	015a      	lsls	r2, r3, #5
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ae4:	695b      	ldr	r3, [r3, #20]
 8005ae6:	68ba      	ldr	r2, [r7, #8]
 8005ae8:	4013      	ands	r3, r2
 8005aea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005aec:	68bb      	ldr	r3, [r7, #8]
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3714      	adds	r7, #20
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr

08005afa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005afa:	b480      	push	{r7}
 8005afc:	b087      	sub	sp, #28
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
 8005b02:	460b      	mov	r3, r1
 8005b04:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b10:	691b      	ldr	r3, [r3, #16]
 8005b12:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b1c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005b1e:	78fb      	ldrb	r3, [r7, #3]
 8005b20:	f003 030f 	and.w	r3, r3, #15
 8005b24:	68fa      	ldr	r2, [r7, #12]
 8005b26:	fa22 f303 	lsr.w	r3, r2, r3
 8005b2a:	01db      	lsls	r3, r3, #7
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	693a      	ldr	r2, [r7, #16]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005b34:	78fb      	ldrb	r3, [r7, #3]
 8005b36:	015a      	lsls	r2, r3, #5
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	4413      	add	r3, r2
 8005b3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	693a      	ldr	r2, [r7, #16]
 8005b44:	4013      	ands	r3, r2
 8005b46:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005b48:	68bb      	ldr	r3, [r7, #8]
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	371c      	adds	r7, #28
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr

08005b56 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005b56:	b480      	push	{r7}
 8005b58:	b083      	sub	sp, #12
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	695b      	ldr	r3, [r3, #20]
 8005b62:	f003 0301 	and.w	r3, r3, #1
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	370c      	adds	r7, #12
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr

08005b72 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005b72:	b480      	push	{r7}
 8005b74:	b085      	sub	sp, #20
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	68fa      	ldr	r2, [r7, #12]
 8005b88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b8c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005b90:	f023 0307 	bic.w	r3, r3, #7
 8005b94:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	68fa      	ldr	r2, [r7, #12]
 8005ba0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ba4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ba8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005baa:	2300      	movs	r3, #0
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3714      	adds	r7, #20
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b087      	sub	sp, #28
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	460b      	mov	r3, r1
 8005bc2:	607a      	str	r2, [r7, #4]
 8005bc4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	333c      	adds	r3, #60	; 0x3c
 8005bce:	3304      	adds	r3, #4
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	4a26      	ldr	r2, [pc, #152]	; (8005c70 <USB_EP0_OutStart+0xb8>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d90a      	bls.n	8005bf2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005be8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bec:	d101      	bne.n	8005bf2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	e037      	b.n	8005c62 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	697a      	ldr	r2, [r7, #20]
 8005c08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c0c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c10:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c18:	691b      	ldr	r3, [r3, #16]
 8005c1a:	697a      	ldr	r2, [r7, #20]
 8005c1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c20:	f043 0318 	orr.w	r3, r3, #24
 8005c24:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c2c:	691b      	ldr	r3, [r3, #16]
 8005c2e:	697a      	ldr	r2, [r7, #20]
 8005c30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c34:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005c38:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005c3a:	7afb      	ldrb	r3, [r7, #11]
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d10f      	bne.n	8005c60 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c46:	461a      	mov	r2, r3
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	697a      	ldr	r2, [r7, #20]
 8005c56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c5a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005c5e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005c60:	2300      	movs	r3, #0
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	371c      	adds	r7, #28
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr
 8005c6e:	bf00      	nop
 8005c70:	4f54300a 	.word	0x4f54300a

08005c74 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b085      	sub	sp, #20
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	3301      	adds	r3, #1
 8005c84:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	4a13      	ldr	r2, [pc, #76]	; (8005cd8 <USB_CoreReset+0x64>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d901      	bls.n	8005c92 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005c8e:	2303      	movs	r3, #3
 8005c90:	e01b      	b.n	8005cca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	691b      	ldr	r3, [r3, #16]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	daf2      	bge.n	8005c80 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	f043 0201 	orr.w	r2, r3, #1
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	3301      	adds	r3, #1
 8005cae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	4a09      	ldr	r2, [pc, #36]	; (8005cd8 <USB_CoreReset+0x64>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d901      	bls.n	8005cbc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005cb8:	2303      	movs	r3, #3
 8005cba:	e006      	b.n	8005cca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	691b      	ldr	r3, [r3, #16]
 8005cc0:	f003 0301 	and.w	r3, r3, #1
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d0f0      	beq.n	8005caa <USB_CoreReset+0x36>

  return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3714      	adds	r7, #20
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr
 8005cd6:	bf00      	nop
 8005cd8:	00030d40 	.word	0x00030d40

08005cdc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	460b      	mov	r3, r1
 8005ce6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005ce8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005cec:	f005 fa54 	bl	800b198 <USBD_static_malloc>
 8005cf0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d109      	bne.n	8005d0c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	32b0      	adds	r2, #176	; 0xb0
 8005d02:	2100      	movs	r1, #0
 8005d04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005d08:	2302      	movs	r3, #2
 8005d0a:	e0d4      	b.n	8005eb6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005d0c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005d10:	2100      	movs	r1, #0
 8005d12:	68f8      	ldr	r0, [r7, #12]
 8005d14:	f005 fbb6 	bl	800b484 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	32b0      	adds	r2, #176	; 0xb0
 8005d22:	68f9      	ldr	r1, [r7, #12]
 8005d24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	32b0      	adds	r2, #176	; 0xb0
 8005d32:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	7c1b      	ldrb	r3, [r3, #16]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d138      	bne.n	8005db6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005d44:	4b5e      	ldr	r3, [pc, #376]	; (8005ec0 <USBD_CDC_Init+0x1e4>)
 8005d46:	7819      	ldrb	r1, [r3, #0]
 8005d48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d4c:	2202      	movs	r2, #2
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f005 f8ff 	bl	800af52 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005d54:	4b5a      	ldr	r3, [pc, #360]	; (8005ec0 <USBD_CDC_Init+0x1e4>)
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	f003 020f 	and.w	r2, r3, #15
 8005d5c:	6879      	ldr	r1, [r7, #4]
 8005d5e:	4613      	mov	r3, r2
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	4413      	add	r3, r2
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	440b      	add	r3, r1
 8005d68:	3324      	adds	r3, #36	; 0x24
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005d6e:	4b55      	ldr	r3, [pc, #340]	; (8005ec4 <USBD_CDC_Init+0x1e8>)
 8005d70:	7819      	ldrb	r1, [r3, #0]
 8005d72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d76:	2202      	movs	r2, #2
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f005 f8ea 	bl	800af52 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005d7e:	4b51      	ldr	r3, [pc, #324]	; (8005ec4 <USBD_CDC_Init+0x1e8>)
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	f003 020f 	and.w	r2, r3, #15
 8005d86:	6879      	ldr	r1, [r7, #4]
 8005d88:	4613      	mov	r3, r2
 8005d8a:	009b      	lsls	r3, r3, #2
 8005d8c:	4413      	add	r3, r2
 8005d8e:	009b      	lsls	r3, r3, #2
 8005d90:	440b      	add	r3, r1
 8005d92:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005d96:	2201      	movs	r2, #1
 8005d98:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005d9a:	4b4b      	ldr	r3, [pc, #300]	; (8005ec8 <USBD_CDC_Init+0x1ec>)
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	f003 020f 	and.w	r2, r3, #15
 8005da2:	6879      	ldr	r1, [r7, #4]
 8005da4:	4613      	mov	r3, r2
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	4413      	add	r3, r2
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	440b      	add	r3, r1
 8005dae:	3326      	adds	r3, #38	; 0x26
 8005db0:	2210      	movs	r2, #16
 8005db2:	801a      	strh	r2, [r3, #0]
 8005db4:	e035      	b.n	8005e22 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005db6:	4b42      	ldr	r3, [pc, #264]	; (8005ec0 <USBD_CDC_Init+0x1e4>)
 8005db8:	7819      	ldrb	r1, [r3, #0]
 8005dba:	2340      	movs	r3, #64	; 0x40
 8005dbc:	2202      	movs	r2, #2
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f005 f8c7 	bl	800af52 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005dc4:	4b3e      	ldr	r3, [pc, #248]	; (8005ec0 <USBD_CDC_Init+0x1e4>)
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	f003 020f 	and.w	r2, r3, #15
 8005dcc:	6879      	ldr	r1, [r7, #4]
 8005dce:	4613      	mov	r3, r2
 8005dd0:	009b      	lsls	r3, r3, #2
 8005dd2:	4413      	add	r3, r2
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	440b      	add	r3, r1
 8005dd8:	3324      	adds	r3, #36	; 0x24
 8005dda:	2201      	movs	r2, #1
 8005ddc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005dde:	4b39      	ldr	r3, [pc, #228]	; (8005ec4 <USBD_CDC_Init+0x1e8>)
 8005de0:	7819      	ldrb	r1, [r3, #0]
 8005de2:	2340      	movs	r3, #64	; 0x40
 8005de4:	2202      	movs	r2, #2
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f005 f8b3 	bl	800af52 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005dec:	4b35      	ldr	r3, [pc, #212]	; (8005ec4 <USBD_CDC_Init+0x1e8>)
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	f003 020f 	and.w	r2, r3, #15
 8005df4:	6879      	ldr	r1, [r7, #4]
 8005df6:	4613      	mov	r3, r2
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	4413      	add	r3, r2
 8005dfc:	009b      	lsls	r3, r3, #2
 8005dfe:	440b      	add	r3, r1
 8005e00:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005e04:	2201      	movs	r2, #1
 8005e06:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005e08:	4b2f      	ldr	r3, [pc, #188]	; (8005ec8 <USBD_CDC_Init+0x1ec>)
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	f003 020f 	and.w	r2, r3, #15
 8005e10:	6879      	ldr	r1, [r7, #4]
 8005e12:	4613      	mov	r3, r2
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	4413      	add	r3, r2
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	440b      	add	r3, r1
 8005e1c:	3326      	adds	r3, #38	; 0x26
 8005e1e:	2210      	movs	r2, #16
 8005e20:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005e22:	4b29      	ldr	r3, [pc, #164]	; (8005ec8 <USBD_CDC_Init+0x1ec>)
 8005e24:	7819      	ldrb	r1, [r3, #0]
 8005e26:	2308      	movs	r3, #8
 8005e28:	2203      	movs	r2, #3
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f005 f891 	bl	800af52 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005e30:	4b25      	ldr	r3, [pc, #148]	; (8005ec8 <USBD_CDC_Init+0x1ec>)
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	f003 020f 	and.w	r2, r3, #15
 8005e38:	6879      	ldr	r1, [r7, #4]
 8005e3a:	4613      	mov	r3, r2
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	4413      	add	r3, r2
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	440b      	add	r3, r1
 8005e44:	3324      	adds	r3, #36	; 0x24
 8005e46:	2201      	movs	r2, #1
 8005e48:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	33b0      	adds	r3, #176	; 0xb0
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	4413      	add	r3, r2
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2200      	movs	r2, #0
 8005e72:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d101      	bne.n	8005e84 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005e80:	2302      	movs	r3, #2
 8005e82:	e018      	b.n	8005eb6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	7c1b      	ldrb	r3, [r3, #16]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d10a      	bne.n	8005ea2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005e8c:	4b0d      	ldr	r3, [pc, #52]	; (8005ec4 <USBD_CDC_Init+0x1e8>)
 8005e8e:	7819      	ldrb	r1, [r3, #0]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005e96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f005 f948 	bl	800b130 <USBD_LL_PrepareReceive>
 8005ea0:	e008      	b.n	8005eb4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005ea2:	4b08      	ldr	r3, [pc, #32]	; (8005ec4 <USBD_CDC_Init+0x1e8>)
 8005ea4:	7819      	ldrb	r1, [r3, #0]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005eac:	2340      	movs	r3, #64	; 0x40
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f005 f93e 	bl	800b130 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3710      	adds	r7, #16
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	bf00      	nop
 8005ec0:	20000093 	.word	0x20000093
 8005ec4:	20000094 	.word	0x20000094
 8005ec8:	20000095 	.word	0x20000095

08005ecc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b082      	sub	sp, #8
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005ed8:	4b3a      	ldr	r3, [pc, #232]	; (8005fc4 <USBD_CDC_DeInit+0xf8>)
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	4619      	mov	r1, r3
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f005 f85d 	bl	800af9e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005ee4:	4b37      	ldr	r3, [pc, #220]	; (8005fc4 <USBD_CDC_DeInit+0xf8>)
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	f003 020f 	and.w	r2, r3, #15
 8005eec:	6879      	ldr	r1, [r7, #4]
 8005eee:	4613      	mov	r3, r2
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	4413      	add	r3, r2
 8005ef4:	009b      	lsls	r3, r3, #2
 8005ef6:	440b      	add	r3, r1
 8005ef8:	3324      	adds	r3, #36	; 0x24
 8005efa:	2200      	movs	r2, #0
 8005efc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005efe:	4b32      	ldr	r3, [pc, #200]	; (8005fc8 <USBD_CDC_DeInit+0xfc>)
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	4619      	mov	r1, r3
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f005 f84a 	bl	800af9e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005f0a:	4b2f      	ldr	r3, [pc, #188]	; (8005fc8 <USBD_CDC_DeInit+0xfc>)
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	f003 020f 	and.w	r2, r3, #15
 8005f12:	6879      	ldr	r1, [r7, #4]
 8005f14:	4613      	mov	r3, r2
 8005f16:	009b      	lsls	r3, r3, #2
 8005f18:	4413      	add	r3, r2
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	440b      	add	r3, r1
 8005f1e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005f22:	2200      	movs	r2, #0
 8005f24:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005f26:	4b29      	ldr	r3, [pc, #164]	; (8005fcc <USBD_CDC_DeInit+0x100>)
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	4619      	mov	r1, r3
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f005 f836 	bl	800af9e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005f32:	4b26      	ldr	r3, [pc, #152]	; (8005fcc <USBD_CDC_DeInit+0x100>)
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	f003 020f 	and.w	r2, r3, #15
 8005f3a:	6879      	ldr	r1, [r7, #4]
 8005f3c:	4613      	mov	r3, r2
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	4413      	add	r3, r2
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	440b      	add	r3, r1
 8005f46:	3324      	adds	r3, #36	; 0x24
 8005f48:	2200      	movs	r2, #0
 8005f4a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005f4c:	4b1f      	ldr	r3, [pc, #124]	; (8005fcc <USBD_CDC_DeInit+0x100>)
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	f003 020f 	and.w	r2, r3, #15
 8005f54:	6879      	ldr	r1, [r7, #4]
 8005f56:	4613      	mov	r3, r2
 8005f58:	009b      	lsls	r3, r3, #2
 8005f5a:	4413      	add	r3, r2
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	440b      	add	r3, r1
 8005f60:	3326      	adds	r3, #38	; 0x26
 8005f62:	2200      	movs	r2, #0
 8005f64:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	32b0      	adds	r2, #176	; 0xb0
 8005f70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d01f      	beq.n	8005fb8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	33b0      	adds	r3, #176	; 0xb0
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	4413      	add	r3, r2
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	32b0      	adds	r2, #176	; 0xb0
 8005f96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f005 f90a 	bl	800b1b4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	32b0      	adds	r2, #176	; 0xb0
 8005faa:	2100      	movs	r1, #0
 8005fac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005fb8:	2300      	movs	r3, #0
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3708      	adds	r7, #8
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
 8005fc2:	bf00      	nop
 8005fc4:	20000093 	.word	0x20000093
 8005fc8:	20000094 	.word	0x20000094
 8005fcc:	20000095 	.word	0x20000095

08005fd0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b086      	sub	sp, #24
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	32b0      	adds	r2, #176	; 0xb0
 8005fe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fe8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005fea:	2300      	movs	r3, #0
 8005fec:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d101      	bne.n	8006000 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005ffc:	2303      	movs	r3, #3
 8005ffe:	e0bf      	b.n	8006180 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006008:	2b00      	cmp	r3, #0
 800600a:	d050      	beq.n	80060ae <USBD_CDC_Setup+0xde>
 800600c:	2b20      	cmp	r3, #32
 800600e:	f040 80af 	bne.w	8006170 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	88db      	ldrh	r3, [r3, #6]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d03a      	beq.n	8006090 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	b25b      	sxtb	r3, r3
 8006020:	2b00      	cmp	r3, #0
 8006022:	da1b      	bge.n	800605c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	33b0      	adds	r3, #176	; 0xb0
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	4413      	add	r3, r2
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	683a      	ldr	r2, [r7, #0]
 8006038:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800603a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800603c:	683a      	ldr	r2, [r7, #0]
 800603e:	88d2      	ldrh	r2, [r2, #6]
 8006040:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	88db      	ldrh	r3, [r3, #6]
 8006046:	2b07      	cmp	r3, #7
 8006048:	bf28      	it	cs
 800604a:	2307      	movcs	r3, #7
 800604c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	89fa      	ldrh	r2, [r7, #14]
 8006052:	4619      	mov	r1, r3
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f001 fd89 	bl	8007b6c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800605a:	e090      	b.n	800617e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	785a      	ldrb	r2, [r3, #1]
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	88db      	ldrh	r3, [r3, #6]
 800606a:	2b3f      	cmp	r3, #63	; 0x3f
 800606c:	d803      	bhi.n	8006076 <USBD_CDC_Setup+0xa6>
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	88db      	ldrh	r3, [r3, #6]
 8006072:	b2da      	uxtb	r2, r3
 8006074:	e000      	b.n	8006078 <USBD_CDC_Setup+0xa8>
 8006076:	2240      	movs	r2, #64	; 0x40
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800607e:	6939      	ldr	r1, [r7, #16]
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006086:	461a      	mov	r2, r3
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f001 fd9b 	bl	8007bc4 <USBD_CtlPrepareRx>
      break;
 800608e:	e076      	b.n	800617e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	33b0      	adds	r3, #176	; 0xb0
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	4413      	add	r3, r2
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	683a      	ldr	r2, [r7, #0]
 80060a4:	7850      	ldrb	r0, [r2, #1]
 80060a6:	2200      	movs	r2, #0
 80060a8:	6839      	ldr	r1, [r7, #0]
 80060aa:	4798      	blx	r3
      break;
 80060ac:	e067      	b.n	800617e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	785b      	ldrb	r3, [r3, #1]
 80060b2:	2b0b      	cmp	r3, #11
 80060b4:	d851      	bhi.n	800615a <USBD_CDC_Setup+0x18a>
 80060b6:	a201      	add	r2, pc, #4	; (adr r2, 80060bc <USBD_CDC_Setup+0xec>)
 80060b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060bc:	080060ed 	.word	0x080060ed
 80060c0:	08006169 	.word	0x08006169
 80060c4:	0800615b 	.word	0x0800615b
 80060c8:	0800615b 	.word	0x0800615b
 80060cc:	0800615b 	.word	0x0800615b
 80060d0:	0800615b 	.word	0x0800615b
 80060d4:	0800615b 	.word	0x0800615b
 80060d8:	0800615b 	.word	0x0800615b
 80060dc:	0800615b 	.word	0x0800615b
 80060e0:	0800615b 	.word	0x0800615b
 80060e4:	08006117 	.word	0x08006117
 80060e8:	08006141 	.word	0x08006141
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	2b03      	cmp	r3, #3
 80060f6:	d107      	bne.n	8006108 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80060f8:	f107 030a 	add.w	r3, r7, #10
 80060fc:	2202      	movs	r2, #2
 80060fe:	4619      	mov	r1, r3
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f001 fd33 	bl	8007b6c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006106:	e032      	b.n	800616e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006108:	6839      	ldr	r1, [r7, #0]
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f001 fcbd 	bl	8007a8a <USBD_CtlError>
            ret = USBD_FAIL;
 8006110:	2303      	movs	r3, #3
 8006112:	75fb      	strb	r3, [r7, #23]
          break;
 8006114:	e02b      	b.n	800616e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800611c:	b2db      	uxtb	r3, r3
 800611e:	2b03      	cmp	r3, #3
 8006120:	d107      	bne.n	8006132 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006122:	f107 030d 	add.w	r3, r7, #13
 8006126:	2201      	movs	r2, #1
 8006128:	4619      	mov	r1, r3
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f001 fd1e 	bl	8007b6c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006130:	e01d      	b.n	800616e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006132:	6839      	ldr	r1, [r7, #0]
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f001 fca8 	bl	8007a8a <USBD_CtlError>
            ret = USBD_FAIL;
 800613a:	2303      	movs	r3, #3
 800613c:	75fb      	strb	r3, [r7, #23]
          break;
 800613e:	e016      	b.n	800616e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006146:	b2db      	uxtb	r3, r3
 8006148:	2b03      	cmp	r3, #3
 800614a:	d00f      	beq.n	800616c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800614c:	6839      	ldr	r1, [r7, #0]
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f001 fc9b 	bl	8007a8a <USBD_CtlError>
            ret = USBD_FAIL;
 8006154:	2303      	movs	r3, #3
 8006156:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006158:	e008      	b.n	800616c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800615a:	6839      	ldr	r1, [r7, #0]
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f001 fc94 	bl	8007a8a <USBD_CtlError>
          ret = USBD_FAIL;
 8006162:	2303      	movs	r3, #3
 8006164:	75fb      	strb	r3, [r7, #23]
          break;
 8006166:	e002      	b.n	800616e <USBD_CDC_Setup+0x19e>
          break;
 8006168:	bf00      	nop
 800616a:	e008      	b.n	800617e <USBD_CDC_Setup+0x1ae>
          break;
 800616c:	bf00      	nop
      }
      break;
 800616e:	e006      	b.n	800617e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006170:	6839      	ldr	r1, [r7, #0]
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f001 fc89 	bl	8007a8a <USBD_CtlError>
      ret = USBD_FAIL;
 8006178:	2303      	movs	r3, #3
 800617a:	75fb      	strb	r3, [r7, #23]
      break;
 800617c:	bf00      	nop
  }

  return (uint8_t)ret;
 800617e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006180:	4618      	mov	r0, r3
 8006182:	3718      	adds	r7, #24
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}

08006188 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b084      	sub	sp, #16
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	460b      	mov	r3, r1
 8006192:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800619a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	32b0      	adds	r2, #176	; 0xb0
 80061a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d101      	bne.n	80061b2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80061ae:	2303      	movs	r3, #3
 80061b0:	e065      	b.n	800627e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	32b0      	adds	r2, #176	; 0xb0
 80061bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061c0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80061c2:	78fb      	ldrb	r3, [r7, #3]
 80061c4:	f003 020f 	and.w	r2, r3, #15
 80061c8:	6879      	ldr	r1, [r7, #4]
 80061ca:	4613      	mov	r3, r2
 80061cc:	009b      	lsls	r3, r3, #2
 80061ce:	4413      	add	r3, r2
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	440b      	add	r3, r1
 80061d4:	3318      	adds	r3, #24
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d02f      	beq.n	800623c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80061dc:	78fb      	ldrb	r3, [r7, #3]
 80061de:	f003 020f 	and.w	r2, r3, #15
 80061e2:	6879      	ldr	r1, [r7, #4]
 80061e4:	4613      	mov	r3, r2
 80061e6:	009b      	lsls	r3, r3, #2
 80061e8:	4413      	add	r3, r2
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	440b      	add	r3, r1
 80061ee:	3318      	adds	r3, #24
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	78fb      	ldrb	r3, [r7, #3]
 80061f4:	f003 010f 	and.w	r1, r3, #15
 80061f8:	68f8      	ldr	r0, [r7, #12]
 80061fa:	460b      	mov	r3, r1
 80061fc:	00db      	lsls	r3, r3, #3
 80061fe:	440b      	add	r3, r1
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	4403      	add	r3, r0
 8006204:	3348      	adds	r3, #72	; 0x48
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	fbb2 f1f3 	udiv	r1, r2, r3
 800620c:	fb01 f303 	mul.w	r3, r1, r3
 8006210:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006212:	2b00      	cmp	r3, #0
 8006214:	d112      	bne.n	800623c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006216:	78fb      	ldrb	r3, [r7, #3]
 8006218:	f003 020f 	and.w	r2, r3, #15
 800621c:	6879      	ldr	r1, [r7, #4]
 800621e:	4613      	mov	r3, r2
 8006220:	009b      	lsls	r3, r3, #2
 8006222:	4413      	add	r3, r2
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	440b      	add	r3, r1
 8006228:	3318      	adds	r3, #24
 800622a:	2200      	movs	r2, #0
 800622c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800622e:	78f9      	ldrb	r1, [r7, #3]
 8006230:	2300      	movs	r3, #0
 8006232:	2200      	movs	r2, #0
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f004 ff5a 	bl	800b0ee <USBD_LL_Transmit>
 800623a:	e01f      	b.n	800627c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	2200      	movs	r2, #0
 8006240:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800624a:	687a      	ldr	r2, [r7, #4]
 800624c:	33b0      	adds	r3, #176	; 0xb0
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	4413      	add	r3, r2
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	691b      	ldr	r3, [r3, #16]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d010      	beq.n	800627c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	33b0      	adds	r3, #176	; 0xb0
 8006264:	009b      	lsls	r3, r3, #2
 8006266:	4413      	add	r3, r2
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	691b      	ldr	r3, [r3, #16]
 800626c:	68ba      	ldr	r2, [r7, #8]
 800626e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006272:	68ba      	ldr	r2, [r7, #8]
 8006274:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006278:	78fa      	ldrb	r2, [r7, #3]
 800627a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800627c:	2300      	movs	r3, #0
}
 800627e:	4618      	mov	r0, r3
 8006280:	3710      	adds	r7, #16
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}

08006286 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006286:	b580      	push	{r7, lr}
 8006288:	b084      	sub	sp, #16
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]
 800628e:	460b      	mov	r3, r1
 8006290:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	32b0      	adds	r2, #176	; 0xb0
 800629c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062a0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	32b0      	adds	r2, #176	; 0xb0
 80062ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d101      	bne.n	80062b8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80062b4:	2303      	movs	r3, #3
 80062b6:	e01a      	b.n	80062ee <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80062b8:	78fb      	ldrb	r3, [r7, #3]
 80062ba:	4619      	mov	r1, r3
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f004 ff58 	bl	800b172 <USBD_LL_GetRxDataSize>
 80062c2:	4602      	mov	r2, r0
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	33b0      	adds	r3, #176	; 0xb0
 80062d4:	009b      	lsls	r3, r3, #2
 80062d6:	4413      	add	r3, r2
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	68fa      	ldr	r2, [r7, #12]
 80062de:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80062e2:	68fa      	ldr	r2, [r7, #12]
 80062e4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80062e8:	4611      	mov	r1, r2
 80062ea:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80062ec:	2300      	movs	r3, #0
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3710      	adds	r7, #16
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}

080062f6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80062f6:	b580      	push	{r7, lr}
 80062f8:	b084      	sub	sp, #16
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	32b0      	adds	r2, #176	; 0xb0
 8006308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800630c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d101      	bne.n	8006318 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006314:	2303      	movs	r3, #3
 8006316:	e025      	b.n	8006364 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	33b0      	adds	r3, #176	; 0xb0
 8006322:	009b      	lsls	r3, r3, #2
 8006324:	4413      	add	r3, r2
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d01a      	beq.n	8006362 <USBD_CDC_EP0_RxReady+0x6c>
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006332:	2bff      	cmp	r3, #255	; 0xff
 8006334:	d015      	beq.n	8006362 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	33b0      	adds	r3, #176	; 0xb0
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	4413      	add	r3, r2
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	68fa      	ldr	r2, [r7, #12]
 800634a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800634e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006350:	68fa      	ldr	r2, [r7, #12]
 8006352:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006356:	b292      	uxth	r2, r2
 8006358:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	22ff      	movs	r2, #255	; 0xff
 800635e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006362:	2300      	movs	r3, #0
}
 8006364:	4618      	mov	r0, r3
 8006366:	3710      	adds	r7, #16
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b086      	sub	sp, #24
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006374:	2182      	movs	r1, #130	; 0x82
 8006376:	4818      	ldr	r0, [pc, #96]	; (80063d8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006378:	f000 fd4f 	bl	8006e1a <USBD_GetEpDesc>
 800637c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800637e:	2101      	movs	r1, #1
 8006380:	4815      	ldr	r0, [pc, #84]	; (80063d8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006382:	f000 fd4a 	bl	8006e1a <USBD_GetEpDesc>
 8006386:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006388:	2181      	movs	r1, #129	; 0x81
 800638a:	4813      	ldr	r0, [pc, #76]	; (80063d8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800638c:	f000 fd45 	bl	8006e1a <USBD_GetEpDesc>
 8006390:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d002      	beq.n	800639e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	2210      	movs	r2, #16
 800639c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d006      	beq.n	80063b2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	2200      	movs	r2, #0
 80063a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063ac:	711a      	strb	r2, [r3, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d006      	beq.n	80063c6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2200      	movs	r2, #0
 80063bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063c0:	711a      	strb	r2, [r3, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2243      	movs	r2, #67	; 0x43
 80063ca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80063cc:	4b02      	ldr	r3, [pc, #8]	; (80063d8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3718      	adds	r7, #24
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop
 80063d8:	20000050 	.word	0x20000050

080063dc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b086      	sub	sp, #24
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80063e4:	2182      	movs	r1, #130	; 0x82
 80063e6:	4818      	ldr	r0, [pc, #96]	; (8006448 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80063e8:	f000 fd17 	bl	8006e1a <USBD_GetEpDesc>
 80063ec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80063ee:	2101      	movs	r1, #1
 80063f0:	4815      	ldr	r0, [pc, #84]	; (8006448 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80063f2:	f000 fd12 	bl	8006e1a <USBD_GetEpDesc>
 80063f6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80063f8:	2181      	movs	r1, #129	; 0x81
 80063fa:	4813      	ldr	r0, [pc, #76]	; (8006448 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80063fc:	f000 fd0d 	bl	8006e1a <USBD_GetEpDesc>
 8006400:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d002      	beq.n	800640e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	2210      	movs	r2, #16
 800640c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d006      	beq.n	8006422 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	2200      	movs	r2, #0
 8006418:	711a      	strb	r2, [r3, #4]
 800641a:	2200      	movs	r2, #0
 800641c:	f042 0202 	orr.w	r2, r2, #2
 8006420:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d006      	beq.n	8006436 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2200      	movs	r2, #0
 800642c:	711a      	strb	r2, [r3, #4]
 800642e:	2200      	movs	r2, #0
 8006430:	f042 0202 	orr.w	r2, r2, #2
 8006434:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2243      	movs	r2, #67	; 0x43
 800643a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800643c:	4b02      	ldr	r3, [pc, #8]	; (8006448 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800643e:	4618      	mov	r0, r3
 8006440:	3718      	adds	r7, #24
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
 8006446:	bf00      	nop
 8006448:	20000050 	.word	0x20000050

0800644c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b086      	sub	sp, #24
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006454:	2182      	movs	r1, #130	; 0x82
 8006456:	4818      	ldr	r0, [pc, #96]	; (80064b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006458:	f000 fcdf 	bl	8006e1a <USBD_GetEpDesc>
 800645c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800645e:	2101      	movs	r1, #1
 8006460:	4815      	ldr	r0, [pc, #84]	; (80064b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006462:	f000 fcda 	bl	8006e1a <USBD_GetEpDesc>
 8006466:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006468:	2181      	movs	r1, #129	; 0x81
 800646a:	4813      	ldr	r0, [pc, #76]	; (80064b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800646c:	f000 fcd5 	bl	8006e1a <USBD_GetEpDesc>
 8006470:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d002      	beq.n	800647e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	2210      	movs	r2, #16
 800647c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d006      	beq.n	8006492 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	2200      	movs	r2, #0
 8006488:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800648c:	711a      	strb	r2, [r3, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d006      	beq.n	80064a6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2200      	movs	r2, #0
 800649c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064a0:	711a      	strb	r2, [r3, #4]
 80064a2:	2200      	movs	r2, #0
 80064a4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2243      	movs	r2, #67	; 0x43
 80064aa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80064ac:	4b02      	ldr	r3, [pc, #8]	; (80064b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3718      	adds	r7, #24
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	bf00      	nop
 80064b8:	20000050 	.word	0x20000050

080064bc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80064bc:	b480      	push	{r7}
 80064be:	b083      	sub	sp, #12
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	220a      	movs	r2, #10
 80064c8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80064ca:	4b03      	ldr	r3, [pc, #12]	; (80064d8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	370c      	adds	r7, #12
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr
 80064d8:	2000000c 	.word	0x2000000c

080064dc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80064dc:	b480      	push	{r7}
 80064de:	b083      	sub	sp, #12
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d101      	bne.n	80064f0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80064ec:	2303      	movs	r3, #3
 80064ee:	e009      	b.n	8006504 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80064f6:	687a      	ldr	r2, [r7, #4]
 80064f8:	33b0      	adds	r3, #176	; 0xb0
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	4413      	add	r3, r2
 80064fe:	683a      	ldr	r2, [r7, #0]
 8006500:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006502:	2300      	movs	r3, #0
}
 8006504:	4618      	mov	r0, r3
 8006506:	370c      	adds	r7, #12
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr

08006510 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006510:	b480      	push	{r7}
 8006512:	b087      	sub	sp, #28
 8006514:	af00      	add	r7, sp, #0
 8006516:	60f8      	str	r0, [r7, #12]
 8006518:	60b9      	str	r1, [r7, #8]
 800651a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	32b0      	adds	r2, #176	; 0xb0
 8006526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800652a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d101      	bne.n	8006536 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006532:	2303      	movs	r3, #3
 8006534:	e008      	b.n	8006548 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	68ba      	ldr	r2, [r7, #8]
 800653a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	687a      	ldr	r2, [r7, #4]
 8006542:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006546:	2300      	movs	r3, #0
}
 8006548:	4618      	mov	r0, r3
 800654a:	371c      	adds	r7, #28
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr

08006554 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006554:	b480      	push	{r7}
 8006556:	b085      	sub	sp, #20
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	32b0      	adds	r2, #176	; 0xb0
 8006568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800656c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d101      	bne.n	8006578 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006574:	2303      	movs	r3, #3
 8006576:	e004      	b.n	8006582 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	683a      	ldr	r2, [r7, #0]
 800657c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006580:	2300      	movs	r3, #0
}
 8006582:	4618      	mov	r0, r3
 8006584:	3714      	adds	r7, #20
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr
	...

08006590 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b084      	sub	sp, #16
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	32b0      	adds	r2, #176	; 0xb0
 80065a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065a6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80065a8:	2301      	movs	r3, #1
 80065aa:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	32b0      	adds	r2, #176	; 0xb0
 80065b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d101      	bne.n	80065c2 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80065be:	2303      	movs	r3, #3
 80065c0:	e025      	b.n	800660e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d11f      	bne.n	800660c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	2201      	movs	r2, #1
 80065d0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80065d4:	4b10      	ldr	r3, [pc, #64]	; (8006618 <USBD_CDC_TransmitPacket+0x88>)
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	f003 020f 	and.w	r2, r3, #15
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	4613      	mov	r3, r2
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	4413      	add	r3, r2
 80065ea:	009b      	lsls	r3, r3, #2
 80065ec:	4403      	add	r3, r0
 80065ee:	3318      	adds	r3, #24
 80065f0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80065f2:	4b09      	ldr	r3, [pc, #36]	; (8006618 <USBD_CDC_TransmitPacket+0x88>)
 80065f4:	7819      	ldrb	r1, [r3, #0]
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f004 fd73 	bl	800b0ee <USBD_LL_Transmit>

    ret = USBD_OK;
 8006608:	2300      	movs	r3, #0
 800660a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800660c:	7bfb      	ldrb	r3, [r7, #15]
}
 800660e:	4618      	mov	r0, r3
 8006610:	3710      	adds	r7, #16
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop
 8006618:	20000093 	.word	0x20000093

0800661c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b084      	sub	sp, #16
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	32b0      	adds	r2, #176	; 0xb0
 800662e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006632:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	32b0      	adds	r2, #176	; 0xb0
 800663e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d101      	bne.n	800664a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006646:	2303      	movs	r3, #3
 8006648:	e018      	b.n	800667c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	7c1b      	ldrb	r3, [r3, #16]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d10a      	bne.n	8006668 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006652:	4b0c      	ldr	r3, [pc, #48]	; (8006684 <USBD_CDC_ReceivePacket+0x68>)
 8006654:	7819      	ldrb	r1, [r3, #0]
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800665c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f004 fd65 	bl	800b130 <USBD_LL_PrepareReceive>
 8006666:	e008      	b.n	800667a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006668:	4b06      	ldr	r3, [pc, #24]	; (8006684 <USBD_CDC_ReceivePacket+0x68>)
 800666a:	7819      	ldrb	r1, [r3, #0]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006672:	2340      	movs	r3, #64	; 0x40
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f004 fd5b 	bl	800b130 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800667a:	2300      	movs	r3, #0
}
 800667c:	4618      	mov	r0, r3
 800667e:	3710      	adds	r7, #16
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}
 8006684:	20000094 	.word	0x20000094

08006688 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b086      	sub	sp, #24
 800668c:	af00      	add	r7, sp, #0
 800668e:	60f8      	str	r0, [r7, #12]
 8006690:	60b9      	str	r1, [r7, #8]
 8006692:	4613      	mov	r3, r2
 8006694:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d101      	bne.n	80066a0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800669c:	2303      	movs	r3, #3
 800669e:	e01f      	b.n	80066e0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2200      	movs	r2, #0
 80066a4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2200      	movs	r2, #0
 80066b4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d003      	beq.n	80066c6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	68ba      	ldr	r2, [r7, #8]
 80066c2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2201      	movs	r2, #1
 80066ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	79fa      	ldrb	r2, [r7, #7]
 80066d2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80066d4:	68f8      	ldr	r0, [r7, #12]
 80066d6:	f004 fbd5 	bl	800ae84 <USBD_LL_Init>
 80066da:	4603      	mov	r3, r0
 80066dc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80066de:	7dfb      	ldrb	r3, [r7, #23]
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3718      	adds	r7, #24
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b084      	sub	sp, #16
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80066f2:	2300      	movs	r3, #0
 80066f4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d101      	bne.n	8006700 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80066fc:	2303      	movs	r3, #3
 80066fe:	e025      	b.n	800674c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	683a      	ldr	r2, [r7, #0]
 8006704:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	32ae      	adds	r2, #174	; 0xae
 8006712:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006718:	2b00      	cmp	r3, #0
 800671a:	d00f      	beq.n	800673c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	32ae      	adds	r2, #174	; 0xae
 8006726:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800672a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800672c:	f107 020e 	add.w	r2, r7, #14
 8006730:	4610      	mov	r0, r2
 8006732:	4798      	blx	r3
 8006734:	4602      	mov	r2, r0
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006742:	1c5a      	adds	r2, r3, #1
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800674a:	2300      	movs	r3, #0
}
 800674c:	4618      	mov	r0, r3
 800674e:	3710      	adds	r7, #16
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}

08006754 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b082      	sub	sp, #8
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f004 fbdd 	bl	800af1c <USBD_LL_Start>
 8006762:	4603      	mov	r3, r0
}
 8006764:	4618      	mov	r0, r3
 8006766:	3708      	adds	r7, #8
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}

0800676c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800676c:	b480      	push	{r7}
 800676e:	b083      	sub	sp, #12
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006774:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006776:	4618      	mov	r0, r3
 8006778:	370c      	adds	r7, #12
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr

08006782 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006782:	b580      	push	{r7, lr}
 8006784:	b084      	sub	sp, #16
 8006786:	af00      	add	r7, sp, #0
 8006788:	6078      	str	r0, [r7, #4]
 800678a:	460b      	mov	r3, r1
 800678c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800678e:	2300      	movs	r3, #0
 8006790:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006798:	2b00      	cmp	r3, #0
 800679a:	d009      	beq.n	80067b0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	78fa      	ldrb	r2, [r7, #3]
 80067a6:	4611      	mov	r1, r2
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	4798      	blx	r3
 80067ac:	4603      	mov	r3, r0
 80067ae:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80067b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3710      	adds	r7, #16
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}

080067ba <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067ba:	b580      	push	{r7, lr}
 80067bc:	b084      	sub	sp, #16
 80067be:	af00      	add	r7, sp, #0
 80067c0:	6078      	str	r0, [r7, #4]
 80067c2:	460b      	mov	r3, r1
 80067c4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80067c6:	2300      	movs	r3, #0
 80067c8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	78fa      	ldrb	r2, [r7, #3]
 80067d4:	4611      	mov	r1, r2
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	4798      	blx	r3
 80067da:	4603      	mov	r3, r0
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d001      	beq.n	80067e4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80067e0:	2303      	movs	r3, #3
 80067e2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80067e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3710      	adds	r7, #16
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}

080067ee <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80067ee:	b580      	push	{r7, lr}
 80067f0:	b084      	sub	sp, #16
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
 80067f6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80067fe:	6839      	ldr	r1, [r7, #0]
 8006800:	4618      	mov	r0, r3
 8006802:	f001 f908 	bl	8007a16 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2201      	movs	r2, #1
 800680a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006814:	461a      	mov	r2, r3
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006822:	f003 031f 	and.w	r3, r3, #31
 8006826:	2b02      	cmp	r3, #2
 8006828:	d01a      	beq.n	8006860 <USBD_LL_SetupStage+0x72>
 800682a:	2b02      	cmp	r3, #2
 800682c:	d822      	bhi.n	8006874 <USBD_LL_SetupStage+0x86>
 800682e:	2b00      	cmp	r3, #0
 8006830:	d002      	beq.n	8006838 <USBD_LL_SetupStage+0x4a>
 8006832:	2b01      	cmp	r3, #1
 8006834:	d00a      	beq.n	800684c <USBD_LL_SetupStage+0x5e>
 8006836:	e01d      	b.n	8006874 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800683e:	4619      	mov	r1, r3
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f000 fb5f 	bl	8006f04 <USBD_StdDevReq>
 8006846:	4603      	mov	r3, r0
 8006848:	73fb      	strb	r3, [r7, #15]
      break;
 800684a:	e020      	b.n	800688e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006852:	4619      	mov	r1, r3
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f000 fbc7 	bl	8006fe8 <USBD_StdItfReq>
 800685a:	4603      	mov	r3, r0
 800685c:	73fb      	strb	r3, [r7, #15]
      break;
 800685e:	e016      	b.n	800688e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006866:	4619      	mov	r1, r3
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f000 fc29 	bl	80070c0 <USBD_StdEPReq>
 800686e:	4603      	mov	r3, r0
 8006870:	73fb      	strb	r3, [r7, #15]
      break;
 8006872:	e00c      	b.n	800688e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800687a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800687e:	b2db      	uxtb	r3, r3
 8006880:	4619      	mov	r1, r3
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f004 fbaa 	bl	800afdc <USBD_LL_StallEP>
 8006888:	4603      	mov	r3, r0
 800688a:	73fb      	strb	r3, [r7, #15]
      break;
 800688c:	bf00      	nop
  }

  return ret;
 800688e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006890:	4618      	mov	r0, r3
 8006892:	3710      	adds	r7, #16
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}

08006898 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b086      	sub	sp, #24
 800689c:	af00      	add	r7, sp, #0
 800689e:	60f8      	str	r0, [r7, #12]
 80068a0:	460b      	mov	r3, r1
 80068a2:	607a      	str	r2, [r7, #4]
 80068a4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80068a6:	2300      	movs	r3, #0
 80068a8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80068aa:	7afb      	ldrb	r3, [r7, #11]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d16e      	bne.n	800698e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80068b6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80068be:	2b03      	cmp	r3, #3
 80068c0:	f040 8098 	bne.w	80069f4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	689a      	ldr	r2, [r3, #8]
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	68db      	ldr	r3, [r3, #12]
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d913      	bls.n	80068f8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	689a      	ldr	r2, [r3, #8]
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	68db      	ldr	r3, [r3, #12]
 80068d8:	1ad2      	subs	r2, r2, r3
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	68da      	ldr	r2, [r3, #12]
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	689b      	ldr	r3, [r3, #8]
 80068e6:	4293      	cmp	r3, r2
 80068e8:	bf28      	it	cs
 80068ea:	4613      	movcs	r3, r2
 80068ec:	461a      	mov	r2, r3
 80068ee:	6879      	ldr	r1, [r7, #4]
 80068f0:	68f8      	ldr	r0, [r7, #12]
 80068f2:	f001 f984 	bl	8007bfe <USBD_CtlContinueRx>
 80068f6:	e07d      	b.n	80069f4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80068fe:	f003 031f 	and.w	r3, r3, #31
 8006902:	2b02      	cmp	r3, #2
 8006904:	d014      	beq.n	8006930 <USBD_LL_DataOutStage+0x98>
 8006906:	2b02      	cmp	r3, #2
 8006908:	d81d      	bhi.n	8006946 <USBD_LL_DataOutStage+0xae>
 800690a:	2b00      	cmp	r3, #0
 800690c:	d002      	beq.n	8006914 <USBD_LL_DataOutStage+0x7c>
 800690e:	2b01      	cmp	r3, #1
 8006910:	d003      	beq.n	800691a <USBD_LL_DataOutStage+0x82>
 8006912:	e018      	b.n	8006946 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006914:	2300      	movs	r3, #0
 8006916:	75bb      	strb	r3, [r7, #22]
            break;
 8006918:	e018      	b.n	800694c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006920:	b2db      	uxtb	r3, r3
 8006922:	4619      	mov	r1, r3
 8006924:	68f8      	ldr	r0, [r7, #12]
 8006926:	f000 fa5e 	bl	8006de6 <USBD_CoreFindIF>
 800692a:	4603      	mov	r3, r0
 800692c:	75bb      	strb	r3, [r7, #22]
            break;
 800692e:	e00d      	b.n	800694c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006936:	b2db      	uxtb	r3, r3
 8006938:	4619      	mov	r1, r3
 800693a:	68f8      	ldr	r0, [r7, #12]
 800693c:	f000 fa60 	bl	8006e00 <USBD_CoreFindEP>
 8006940:	4603      	mov	r3, r0
 8006942:	75bb      	strb	r3, [r7, #22]
            break;
 8006944:	e002      	b.n	800694c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006946:	2300      	movs	r3, #0
 8006948:	75bb      	strb	r3, [r7, #22]
            break;
 800694a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800694c:	7dbb      	ldrb	r3, [r7, #22]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d119      	bne.n	8006986 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006958:	b2db      	uxtb	r3, r3
 800695a:	2b03      	cmp	r3, #3
 800695c:	d113      	bne.n	8006986 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800695e:	7dba      	ldrb	r2, [r7, #22]
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	32ae      	adds	r2, #174	; 0xae
 8006964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006968:	691b      	ldr	r3, [r3, #16]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d00b      	beq.n	8006986 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800696e:	7dba      	ldrb	r2, [r7, #22]
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006976:	7dba      	ldrb	r2, [r7, #22]
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	32ae      	adds	r2, #174	; 0xae
 800697c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	68f8      	ldr	r0, [r7, #12]
 8006984:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006986:	68f8      	ldr	r0, [r7, #12]
 8006988:	f001 f94a 	bl	8007c20 <USBD_CtlSendStatus>
 800698c:	e032      	b.n	80069f4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800698e:	7afb      	ldrb	r3, [r7, #11]
 8006990:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006994:	b2db      	uxtb	r3, r3
 8006996:	4619      	mov	r1, r3
 8006998:	68f8      	ldr	r0, [r7, #12]
 800699a:	f000 fa31 	bl	8006e00 <USBD_CoreFindEP>
 800699e:	4603      	mov	r3, r0
 80069a0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80069a2:	7dbb      	ldrb	r3, [r7, #22]
 80069a4:	2bff      	cmp	r3, #255	; 0xff
 80069a6:	d025      	beq.n	80069f4 <USBD_LL_DataOutStage+0x15c>
 80069a8:	7dbb      	ldrb	r3, [r7, #22]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d122      	bne.n	80069f4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	2b03      	cmp	r3, #3
 80069b8:	d117      	bne.n	80069ea <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80069ba:	7dba      	ldrb	r2, [r7, #22]
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	32ae      	adds	r2, #174	; 0xae
 80069c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069c4:	699b      	ldr	r3, [r3, #24]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d00f      	beq.n	80069ea <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80069ca:	7dba      	ldrb	r2, [r7, #22]
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80069d2:	7dba      	ldrb	r2, [r7, #22]
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	32ae      	adds	r2, #174	; 0xae
 80069d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069dc:	699b      	ldr	r3, [r3, #24]
 80069de:	7afa      	ldrb	r2, [r7, #11]
 80069e0:	4611      	mov	r1, r2
 80069e2:	68f8      	ldr	r0, [r7, #12]
 80069e4:	4798      	blx	r3
 80069e6:	4603      	mov	r3, r0
 80069e8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80069ea:	7dfb      	ldrb	r3, [r7, #23]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d001      	beq.n	80069f4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80069f0:	7dfb      	ldrb	r3, [r7, #23]
 80069f2:	e000      	b.n	80069f6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80069f4:	2300      	movs	r3, #0
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3718      	adds	r7, #24
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}

080069fe <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80069fe:	b580      	push	{r7, lr}
 8006a00:	b086      	sub	sp, #24
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	60f8      	str	r0, [r7, #12]
 8006a06:	460b      	mov	r3, r1
 8006a08:	607a      	str	r2, [r7, #4]
 8006a0a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006a0c:	7afb      	ldrb	r3, [r7, #11]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d16f      	bne.n	8006af2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	3314      	adds	r3, #20
 8006a16:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006a1e:	2b02      	cmp	r3, #2
 8006a20:	d15a      	bne.n	8006ad8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	689a      	ldr	r2, [r3, #8]
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	68db      	ldr	r3, [r3, #12]
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d914      	bls.n	8006a58 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	689a      	ldr	r2, [r3, #8]
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	68db      	ldr	r3, [r3, #12]
 8006a36:	1ad2      	subs	r2, r2, r3
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	461a      	mov	r2, r3
 8006a42:	6879      	ldr	r1, [r7, #4]
 8006a44:	68f8      	ldr	r0, [r7, #12]
 8006a46:	f001 f8ac 	bl	8007ba2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	2100      	movs	r1, #0
 8006a50:	68f8      	ldr	r0, [r7, #12]
 8006a52:	f004 fb6d 	bl	800b130 <USBD_LL_PrepareReceive>
 8006a56:	e03f      	b.n	8006ad8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	68da      	ldr	r2, [r3, #12]
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	429a      	cmp	r2, r3
 8006a62:	d11c      	bne.n	8006a9e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	685a      	ldr	r2, [r3, #4]
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d316      	bcc.n	8006a9e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	685a      	ldr	r2, [r3, #4]
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d20f      	bcs.n	8006a9e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006a7e:	2200      	movs	r2, #0
 8006a80:	2100      	movs	r1, #0
 8006a82:	68f8      	ldr	r0, [r7, #12]
 8006a84:	f001 f88d 	bl	8007ba2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a90:	2300      	movs	r3, #0
 8006a92:	2200      	movs	r2, #0
 8006a94:	2100      	movs	r1, #0
 8006a96:	68f8      	ldr	r0, [r7, #12]
 8006a98:	f004 fb4a 	bl	800b130 <USBD_LL_PrepareReceive>
 8006a9c:	e01c      	b.n	8006ad8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	2b03      	cmp	r3, #3
 8006aa8:	d10f      	bne.n	8006aca <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ab0:	68db      	ldr	r3, [r3, #12]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d009      	beq.n	8006aca <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ac4:	68db      	ldr	r3, [r3, #12]
 8006ac6:	68f8      	ldr	r0, [r7, #12]
 8006ac8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006aca:	2180      	movs	r1, #128	; 0x80
 8006acc:	68f8      	ldr	r0, [r7, #12]
 8006ace:	f004 fa85 	bl	800afdc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006ad2:	68f8      	ldr	r0, [r7, #12]
 8006ad4:	f001 f8b7 	bl	8007c46 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d03a      	beq.n	8006b58 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006ae2:	68f8      	ldr	r0, [r7, #12]
 8006ae4:	f7ff fe42 	bl	800676c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2200      	movs	r2, #0
 8006aec:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006af0:	e032      	b.n	8006b58 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006af2:	7afb      	ldrb	r3, [r7, #11]
 8006af4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006af8:	b2db      	uxtb	r3, r3
 8006afa:	4619      	mov	r1, r3
 8006afc:	68f8      	ldr	r0, [r7, #12]
 8006afe:	f000 f97f 	bl	8006e00 <USBD_CoreFindEP>
 8006b02:	4603      	mov	r3, r0
 8006b04:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006b06:	7dfb      	ldrb	r3, [r7, #23]
 8006b08:	2bff      	cmp	r3, #255	; 0xff
 8006b0a:	d025      	beq.n	8006b58 <USBD_LL_DataInStage+0x15a>
 8006b0c:	7dfb      	ldrb	r3, [r7, #23]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d122      	bne.n	8006b58 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	2b03      	cmp	r3, #3
 8006b1c:	d11c      	bne.n	8006b58 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006b1e:	7dfa      	ldrb	r2, [r7, #23]
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	32ae      	adds	r2, #174	; 0xae
 8006b24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b28:	695b      	ldr	r3, [r3, #20]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d014      	beq.n	8006b58 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006b2e:	7dfa      	ldrb	r2, [r7, #23]
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006b36:	7dfa      	ldrb	r2, [r7, #23]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	32ae      	adds	r2, #174	; 0xae
 8006b3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b40:	695b      	ldr	r3, [r3, #20]
 8006b42:	7afa      	ldrb	r2, [r7, #11]
 8006b44:	4611      	mov	r1, r2
 8006b46:	68f8      	ldr	r0, [r7, #12]
 8006b48:	4798      	blx	r3
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006b4e:	7dbb      	ldrb	r3, [r7, #22]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d001      	beq.n	8006b58 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006b54:	7dbb      	ldrb	r3, [r7, #22]
 8006b56:	e000      	b.n	8006b5a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006b58:	2300      	movs	r3, #0
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3718      	adds	r7, #24
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}

08006b62 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006b62:	b580      	push	{r7, lr}
 8006b64:	b084      	sub	sp, #16
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2201      	movs	r2, #1
 8006b72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2200      	movs	r2, #0
 8006b82:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d014      	beq.n	8006bc8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d00e      	beq.n	8006bc8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	6852      	ldr	r2, [r2, #4]
 8006bb6:	b2d2      	uxtb	r2, r2
 8006bb8:	4611      	mov	r1, r2
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	4798      	blx	r3
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d001      	beq.n	8006bc8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006bc4:	2303      	movs	r3, #3
 8006bc6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006bc8:	2340      	movs	r3, #64	; 0x40
 8006bca:	2200      	movs	r2, #0
 8006bcc:	2100      	movs	r1, #0
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f004 f9bf 	bl	800af52 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2240      	movs	r2, #64	; 0x40
 8006be0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006be4:	2340      	movs	r3, #64	; 0x40
 8006be6:	2200      	movs	r2, #0
 8006be8:	2180      	movs	r1, #128	; 0x80
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f004 f9b1 	bl	800af52 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2240      	movs	r2, #64	; 0x40
 8006bfa:	621a      	str	r2, [r3, #32]

  return ret;
 8006bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3710      	adds	r7, #16
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}

08006c06 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006c06:	b480      	push	{r7}
 8006c08:	b083      	sub	sp, #12
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	6078      	str	r0, [r7, #4]
 8006c0e:	460b      	mov	r3, r1
 8006c10:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	78fa      	ldrb	r2, [r7, #3]
 8006c16:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006c18:	2300      	movs	r3, #0
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	370c      	adds	r7, #12
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr

08006c26 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006c26:	b480      	push	{r7}
 8006c28:	b083      	sub	sp, #12
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c34:	b2da      	uxtb	r2, r3
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2204      	movs	r2, #4
 8006c40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006c44:	2300      	movs	r3, #0
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	370c      	adds	r7, #12
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr

08006c52 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006c52:	b480      	push	{r7}
 8006c54:	b083      	sub	sp, #12
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c60:	b2db      	uxtb	r3, r3
 8006c62:	2b04      	cmp	r3, #4
 8006c64:	d106      	bne.n	8006c74 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006c6c:	b2da      	uxtb	r2, r3
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006c74:	2300      	movs	r3, #0
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	370c      	adds	r7, #12
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr

08006c82 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006c82:	b580      	push	{r7, lr}
 8006c84:	b082      	sub	sp, #8
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c90:	b2db      	uxtb	r3, r3
 8006c92:	2b03      	cmp	r3, #3
 8006c94:	d110      	bne.n	8006cb8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d00b      	beq.n	8006cb8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ca6:	69db      	ldr	r3, [r3, #28]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d005      	beq.n	8006cb8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cb2:	69db      	ldr	r3, [r3, #28]
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006cb8:	2300      	movs	r3, #0
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3708      	adds	r7, #8
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}

08006cc2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006cc2:	b580      	push	{r7, lr}
 8006cc4:	b082      	sub	sp, #8
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
 8006cca:	460b      	mov	r3, r1
 8006ccc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	32ae      	adds	r2, #174	; 0xae
 8006cd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d101      	bne.n	8006ce4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006ce0:	2303      	movs	r3, #3
 8006ce2:	e01c      	b.n	8006d1e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	2b03      	cmp	r3, #3
 8006cee:	d115      	bne.n	8006d1c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	32ae      	adds	r2, #174	; 0xae
 8006cfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cfe:	6a1b      	ldr	r3, [r3, #32]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d00b      	beq.n	8006d1c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	32ae      	adds	r2, #174	; 0xae
 8006d0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d12:	6a1b      	ldr	r3, [r3, #32]
 8006d14:	78fa      	ldrb	r2, [r7, #3]
 8006d16:	4611      	mov	r1, r2
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006d1c:	2300      	movs	r3, #0
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3708      	adds	r7, #8
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}

08006d26 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006d26:	b580      	push	{r7, lr}
 8006d28:	b082      	sub	sp, #8
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	6078      	str	r0, [r7, #4]
 8006d2e:	460b      	mov	r3, r1
 8006d30:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	32ae      	adds	r2, #174	; 0xae
 8006d3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d101      	bne.n	8006d48 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006d44:	2303      	movs	r3, #3
 8006d46:	e01c      	b.n	8006d82 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d4e:	b2db      	uxtb	r3, r3
 8006d50:	2b03      	cmp	r3, #3
 8006d52:	d115      	bne.n	8006d80 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	32ae      	adds	r2, #174	; 0xae
 8006d5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d00b      	beq.n	8006d80 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	32ae      	adds	r2, #174	; 0xae
 8006d72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d78:	78fa      	ldrb	r2, [r7, #3]
 8006d7a:	4611      	mov	r1, r2
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006d80:	2300      	movs	r3, #0
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3708      	adds	r7, #8
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}

08006d8a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006d8a:	b480      	push	{r7}
 8006d8c:	b083      	sub	sp, #12
 8006d8e:	af00      	add	r7, sp, #0
 8006d90:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006d92:	2300      	movs	r3, #0
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	370c      	adds	r7, #12
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr

08006da0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b084      	sub	sp, #16
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006da8:	2300      	movs	r3, #0
 8006daa:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2201      	movs	r2, #1
 8006db0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d00e      	beq.n	8006ddc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	687a      	ldr	r2, [r7, #4]
 8006dc8:	6852      	ldr	r2, [r2, #4]
 8006dca:	b2d2      	uxtb	r2, r2
 8006dcc:	4611      	mov	r1, r2
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	4798      	blx	r3
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d001      	beq.n	8006ddc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006dd8:	2303      	movs	r3, #3
 8006dda:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3710      	adds	r7, #16
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}

08006de6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006de6:	b480      	push	{r7}
 8006de8:	b083      	sub	sp, #12
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	6078      	str	r0, [r7, #4]
 8006dee:	460b      	mov	r3, r1
 8006df0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006df2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	370c      	adds	r7, #12
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr

08006e00 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b083      	sub	sp, #12
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	460b      	mov	r3, r1
 8006e0a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006e0c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	370c      	adds	r7, #12
 8006e12:	46bd      	mov	sp, r7
 8006e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e18:	4770      	bx	lr

08006e1a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006e1a:	b580      	push	{r7, lr}
 8006e1c:	b086      	sub	sp, #24
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	6078      	str	r0, [r7, #4]
 8006e22:	460b      	mov	r3, r1
 8006e24:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	885b      	ldrh	r3, [r3, #2]
 8006e36:	b29a      	uxth	r2, r3
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d920      	bls.n	8006e84 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	781b      	ldrb	r3, [r3, #0]
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006e4a:	e013      	b.n	8006e74 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006e4c:	f107 030a 	add.w	r3, r7, #10
 8006e50:	4619      	mov	r1, r3
 8006e52:	6978      	ldr	r0, [r7, #20]
 8006e54:	f000 f81b 	bl	8006e8e <USBD_GetNextDesc>
 8006e58:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	785b      	ldrb	r3, [r3, #1]
 8006e5e:	2b05      	cmp	r3, #5
 8006e60:	d108      	bne.n	8006e74 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	789b      	ldrb	r3, [r3, #2]
 8006e6a:	78fa      	ldrb	r2, [r7, #3]
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	d008      	beq.n	8006e82 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006e70:	2300      	movs	r3, #0
 8006e72:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	885b      	ldrh	r3, [r3, #2]
 8006e78:	b29a      	uxth	r2, r3
 8006e7a:	897b      	ldrh	r3, [r7, #10]
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d8e5      	bhi.n	8006e4c <USBD_GetEpDesc+0x32>
 8006e80:	e000      	b.n	8006e84 <USBD_GetEpDesc+0x6a>
          break;
 8006e82:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006e84:	693b      	ldr	r3, [r7, #16]
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3718      	adds	r7, #24
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}

08006e8e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006e8e:	b480      	push	{r7}
 8006e90:	b085      	sub	sp, #20
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	6078      	str	r0, [r7, #4]
 8006e96:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	881a      	ldrh	r2, [r3, #0]
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	781b      	ldrb	r3, [r3, #0]
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	4413      	add	r3, r2
 8006ea8:	b29a      	uxth	r2, r3
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	781b      	ldrb	r3, [r3, #0]
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	4413      	add	r3, r2
 8006eb8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006eba:	68fb      	ldr	r3, [r7, #12]
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3714      	adds	r7, #20
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec6:	4770      	bx	lr

08006ec8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b087      	sub	sp, #28
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	781b      	ldrb	r3, [r3, #0]
 8006ed8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	3301      	adds	r3, #1
 8006ede:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	781b      	ldrb	r3, [r3, #0]
 8006ee4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006ee6:	8a3b      	ldrh	r3, [r7, #16]
 8006ee8:	021b      	lsls	r3, r3, #8
 8006eea:	b21a      	sxth	r2, r3
 8006eec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	b21b      	sxth	r3, r3
 8006ef4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006ef6:	89fb      	ldrh	r3, [r7, #14]
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	371c      	adds	r7, #28
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr

08006f04 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b084      	sub	sp, #16
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	781b      	ldrb	r3, [r3, #0]
 8006f16:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f1a:	2b40      	cmp	r3, #64	; 0x40
 8006f1c:	d005      	beq.n	8006f2a <USBD_StdDevReq+0x26>
 8006f1e:	2b40      	cmp	r3, #64	; 0x40
 8006f20:	d857      	bhi.n	8006fd2 <USBD_StdDevReq+0xce>
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d00f      	beq.n	8006f46 <USBD_StdDevReq+0x42>
 8006f26:	2b20      	cmp	r3, #32
 8006f28:	d153      	bne.n	8006fd2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	32ae      	adds	r2, #174	; 0xae
 8006f34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	6839      	ldr	r1, [r7, #0]
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	4798      	blx	r3
 8006f40:	4603      	mov	r3, r0
 8006f42:	73fb      	strb	r3, [r7, #15]
      break;
 8006f44:	e04a      	b.n	8006fdc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	785b      	ldrb	r3, [r3, #1]
 8006f4a:	2b09      	cmp	r3, #9
 8006f4c:	d83b      	bhi.n	8006fc6 <USBD_StdDevReq+0xc2>
 8006f4e:	a201      	add	r2, pc, #4	; (adr r2, 8006f54 <USBD_StdDevReq+0x50>)
 8006f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f54:	08006fa9 	.word	0x08006fa9
 8006f58:	08006fbd 	.word	0x08006fbd
 8006f5c:	08006fc7 	.word	0x08006fc7
 8006f60:	08006fb3 	.word	0x08006fb3
 8006f64:	08006fc7 	.word	0x08006fc7
 8006f68:	08006f87 	.word	0x08006f87
 8006f6c:	08006f7d 	.word	0x08006f7d
 8006f70:	08006fc7 	.word	0x08006fc7
 8006f74:	08006f9f 	.word	0x08006f9f
 8006f78:	08006f91 	.word	0x08006f91
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006f7c:	6839      	ldr	r1, [r7, #0]
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 fa3c 	bl	80073fc <USBD_GetDescriptor>
          break;
 8006f84:	e024      	b.n	8006fd0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006f86:	6839      	ldr	r1, [r7, #0]
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f000 fba1 	bl	80076d0 <USBD_SetAddress>
          break;
 8006f8e:	e01f      	b.n	8006fd0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006f90:	6839      	ldr	r1, [r7, #0]
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 fbe0 	bl	8007758 <USBD_SetConfig>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	73fb      	strb	r3, [r7, #15]
          break;
 8006f9c:	e018      	b.n	8006fd0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006f9e:	6839      	ldr	r1, [r7, #0]
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f000 fc83 	bl	80078ac <USBD_GetConfig>
          break;
 8006fa6:	e013      	b.n	8006fd0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006fa8:	6839      	ldr	r1, [r7, #0]
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f000 fcb4 	bl	8007918 <USBD_GetStatus>
          break;
 8006fb0:	e00e      	b.n	8006fd0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006fb2:	6839      	ldr	r1, [r7, #0]
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 fce3 	bl	8007980 <USBD_SetFeature>
          break;
 8006fba:	e009      	b.n	8006fd0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006fbc:	6839      	ldr	r1, [r7, #0]
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 fd07 	bl	80079d2 <USBD_ClrFeature>
          break;
 8006fc4:	e004      	b.n	8006fd0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006fc6:	6839      	ldr	r1, [r7, #0]
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f000 fd5e 	bl	8007a8a <USBD_CtlError>
          break;
 8006fce:	bf00      	nop
      }
      break;
 8006fd0:	e004      	b.n	8006fdc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006fd2:	6839      	ldr	r1, [r7, #0]
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f000 fd58 	bl	8007a8a <USBD_CtlError>
      break;
 8006fda:	bf00      	nop
  }

  return ret;
 8006fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3710      	adds	r7, #16
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}
 8006fe6:	bf00      	nop

08006fe8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b084      	sub	sp, #16
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	781b      	ldrb	r3, [r3, #0]
 8006ffa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ffe:	2b40      	cmp	r3, #64	; 0x40
 8007000:	d005      	beq.n	800700e <USBD_StdItfReq+0x26>
 8007002:	2b40      	cmp	r3, #64	; 0x40
 8007004:	d852      	bhi.n	80070ac <USBD_StdItfReq+0xc4>
 8007006:	2b00      	cmp	r3, #0
 8007008:	d001      	beq.n	800700e <USBD_StdItfReq+0x26>
 800700a:	2b20      	cmp	r3, #32
 800700c:	d14e      	bne.n	80070ac <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007014:	b2db      	uxtb	r3, r3
 8007016:	3b01      	subs	r3, #1
 8007018:	2b02      	cmp	r3, #2
 800701a:	d840      	bhi.n	800709e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	889b      	ldrh	r3, [r3, #4]
 8007020:	b2db      	uxtb	r3, r3
 8007022:	2b01      	cmp	r3, #1
 8007024:	d836      	bhi.n	8007094 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	889b      	ldrh	r3, [r3, #4]
 800702a:	b2db      	uxtb	r3, r3
 800702c:	4619      	mov	r1, r3
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f7ff fed9 	bl	8006de6 <USBD_CoreFindIF>
 8007034:	4603      	mov	r3, r0
 8007036:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007038:	7bbb      	ldrb	r3, [r7, #14]
 800703a:	2bff      	cmp	r3, #255	; 0xff
 800703c:	d01d      	beq.n	800707a <USBD_StdItfReq+0x92>
 800703e:	7bbb      	ldrb	r3, [r7, #14]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d11a      	bne.n	800707a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007044:	7bba      	ldrb	r2, [r7, #14]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	32ae      	adds	r2, #174	; 0xae
 800704a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d00f      	beq.n	8007074 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007054:	7bba      	ldrb	r2, [r7, #14]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800705c:	7bba      	ldrb	r2, [r7, #14]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	32ae      	adds	r2, #174	; 0xae
 8007062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	6839      	ldr	r1, [r7, #0]
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	4798      	blx	r3
 800706e:	4603      	mov	r3, r0
 8007070:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007072:	e004      	b.n	800707e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007074:	2303      	movs	r3, #3
 8007076:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007078:	e001      	b.n	800707e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800707a:	2303      	movs	r3, #3
 800707c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	88db      	ldrh	r3, [r3, #6]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d110      	bne.n	80070a8 <USBD_StdItfReq+0xc0>
 8007086:	7bfb      	ldrb	r3, [r7, #15]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d10d      	bne.n	80070a8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f000 fdc7 	bl	8007c20 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007092:	e009      	b.n	80070a8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007094:	6839      	ldr	r1, [r7, #0]
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f000 fcf7 	bl	8007a8a <USBD_CtlError>
          break;
 800709c:	e004      	b.n	80070a8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800709e:	6839      	ldr	r1, [r7, #0]
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f000 fcf2 	bl	8007a8a <USBD_CtlError>
          break;
 80070a6:	e000      	b.n	80070aa <USBD_StdItfReq+0xc2>
          break;
 80070a8:	bf00      	nop
      }
      break;
 80070aa:	e004      	b.n	80070b6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80070ac:	6839      	ldr	r1, [r7, #0]
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 fceb 	bl	8007a8a <USBD_CtlError>
      break;
 80070b4:	bf00      	nop
  }

  return ret;
 80070b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3710      	adds	r7, #16
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}

080070c0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b084      	sub	sp, #16
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80070ca:	2300      	movs	r3, #0
 80070cc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	889b      	ldrh	r3, [r3, #4]
 80070d2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80070dc:	2b40      	cmp	r3, #64	; 0x40
 80070de:	d007      	beq.n	80070f0 <USBD_StdEPReq+0x30>
 80070e0:	2b40      	cmp	r3, #64	; 0x40
 80070e2:	f200 817f 	bhi.w	80073e4 <USBD_StdEPReq+0x324>
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d02a      	beq.n	8007140 <USBD_StdEPReq+0x80>
 80070ea:	2b20      	cmp	r3, #32
 80070ec:	f040 817a 	bne.w	80073e4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80070f0:	7bbb      	ldrb	r3, [r7, #14]
 80070f2:	4619      	mov	r1, r3
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f7ff fe83 	bl	8006e00 <USBD_CoreFindEP>
 80070fa:	4603      	mov	r3, r0
 80070fc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80070fe:	7b7b      	ldrb	r3, [r7, #13]
 8007100:	2bff      	cmp	r3, #255	; 0xff
 8007102:	f000 8174 	beq.w	80073ee <USBD_StdEPReq+0x32e>
 8007106:	7b7b      	ldrb	r3, [r7, #13]
 8007108:	2b00      	cmp	r3, #0
 800710a:	f040 8170 	bne.w	80073ee <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800710e:	7b7a      	ldrb	r2, [r7, #13]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007116:	7b7a      	ldrb	r2, [r7, #13]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	32ae      	adds	r2, #174	; 0xae
 800711c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	2b00      	cmp	r3, #0
 8007124:	f000 8163 	beq.w	80073ee <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007128:	7b7a      	ldrb	r2, [r7, #13]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	32ae      	adds	r2, #174	; 0xae
 800712e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007132:	689b      	ldr	r3, [r3, #8]
 8007134:	6839      	ldr	r1, [r7, #0]
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	4798      	blx	r3
 800713a:	4603      	mov	r3, r0
 800713c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800713e:	e156      	b.n	80073ee <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	785b      	ldrb	r3, [r3, #1]
 8007144:	2b03      	cmp	r3, #3
 8007146:	d008      	beq.n	800715a <USBD_StdEPReq+0x9a>
 8007148:	2b03      	cmp	r3, #3
 800714a:	f300 8145 	bgt.w	80073d8 <USBD_StdEPReq+0x318>
 800714e:	2b00      	cmp	r3, #0
 8007150:	f000 809b 	beq.w	800728a <USBD_StdEPReq+0x1ca>
 8007154:	2b01      	cmp	r3, #1
 8007156:	d03c      	beq.n	80071d2 <USBD_StdEPReq+0x112>
 8007158:	e13e      	b.n	80073d8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007160:	b2db      	uxtb	r3, r3
 8007162:	2b02      	cmp	r3, #2
 8007164:	d002      	beq.n	800716c <USBD_StdEPReq+0xac>
 8007166:	2b03      	cmp	r3, #3
 8007168:	d016      	beq.n	8007198 <USBD_StdEPReq+0xd8>
 800716a:	e02c      	b.n	80071c6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800716c:	7bbb      	ldrb	r3, [r7, #14]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d00d      	beq.n	800718e <USBD_StdEPReq+0xce>
 8007172:	7bbb      	ldrb	r3, [r7, #14]
 8007174:	2b80      	cmp	r3, #128	; 0x80
 8007176:	d00a      	beq.n	800718e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007178:	7bbb      	ldrb	r3, [r7, #14]
 800717a:	4619      	mov	r1, r3
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f003 ff2d 	bl	800afdc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007182:	2180      	movs	r1, #128	; 0x80
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f003 ff29 	bl	800afdc <USBD_LL_StallEP>
 800718a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800718c:	e020      	b.n	80071d0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800718e:	6839      	ldr	r1, [r7, #0]
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f000 fc7a 	bl	8007a8a <USBD_CtlError>
              break;
 8007196:	e01b      	b.n	80071d0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	885b      	ldrh	r3, [r3, #2]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d10e      	bne.n	80071be <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80071a0:	7bbb      	ldrb	r3, [r7, #14]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d00b      	beq.n	80071be <USBD_StdEPReq+0xfe>
 80071a6:	7bbb      	ldrb	r3, [r7, #14]
 80071a8:	2b80      	cmp	r3, #128	; 0x80
 80071aa:	d008      	beq.n	80071be <USBD_StdEPReq+0xfe>
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	88db      	ldrh	r3, [r3, #6]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d104      	bne.n	80071be <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80071b4:	7bbb      	ldrb	r3, [r7, #14]
 80071b6:	4619      	mov	r1, r3
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f003 ff0f 	bl	800afdc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 fd2e 	bl	8007c20 <USBD_CtlSendStatus>

              break;
 80071c4:	e004      	b.n	80071d0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80071c6:	6839      	ldr	r1, [r7, #0]
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f000 fc5e 	bl	8007a8a <USBD_CtlError>
              break;
 80071ce:	bf00      	nop
          }
          break;
 80071d0:	e107      	b.n	80073e2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071d8:	b2db      	uxtb	r3, r3
 80071da:	2b02      	cmp	r3, #2
 80071dc:	d002      	beq.n	80071e4 <USBD_StdEPReq+0x124>
 80071de:	2b03      	cmp	r3, #3
 80071e0:	d016      	beq.n	8007210 <USBD_StdEPReq+0x150>
 80071e2:	e04b      	b.n	800727c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80071e4:	7bbb      	ldrb	r3, [r7, #14]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d00d      	beq.n	8007206 <USBD_StdEPReq+0x146>
 80071ea:	7bbb      	ldrb	r3, [r7, #14]
 80071ec:	2b80      	cmp	r3, #128	; 0x80
 80071ee:	d00a      	beq.n	8007206 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80071f0:	7bbb      	ldrb	r3, [r7, #14]
 80071f2:	4619      	mov	r1, r3
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f003 fef1 	bl	800afdc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80071fa:	2180      	movs	r1, #128	; 0x80
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f003 feed 	bl	800afdc <USBD_LL_StallEP>
 8007202:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007204:	e040      	b.n	8007288 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007206:	6839      	ldr	r1, [r7, #0]
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f000 fc3e 	bl	8007a8a <USBD_CtlError>
              break;
 800720e:	e03b      	b.n	8007288 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	885b      	ldrh	r3, [r3, #2]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d136      	bne.n	8007286 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007218:	7bbb      	ldrb	r3, [r7, #14]
 800721a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800721e:	2b00      	cmp	r3, #0
 8007220:	d004      	beq.n	800722c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007222:	7bbb      	ldrb	r3, [r7, #14]
 8007224:	4619      	mov	r1, r3
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f003 fef7 	bl	800b01a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f000 fcf7 	bl	8007c20 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007232:	7bbb      	ldrb	r3, [r7, #14]
 8007234:	4619      	mov	r1, r3
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f7ff fde2 	bl	8006e00 <USBD_CoreFindEP>
 800723c:	4603      	mov	r3, r0
 800723e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007240:	7b7b      	ldrb	r3, [r7, #13]
 8007242:	2bff      	cmp	r3, #255	; 0xff
 8007244:	d01f      	beq.n	8007286 <USBD_StdEPReq+0x1c6>
 8007246:	7b7b      	ldrb	r3, [r7, #13]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d11c      	bne.n	8007286 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800724c:	7b7a      	ldrb	r2, [r7, #13]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007254:	7b7a      	ldrb	r2, [r7, #13]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	32ae      	adds	r2, #174	; 0xae
 800725a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800725e:	689b      	ldr	r3, [r3, #8]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d010      	beq.n	8007286 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007264:	7b7a      	ldrb	r2, [r7, #13]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	32ae      	adds	r2, #174	; 0xae
 800726a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	6839      	ldr	r1, [r7, #0]
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	4798      	blx	r3
 8007276:	4603      	mov	r3, r0
 8007278:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800727a:	e004      	b.n	8007286 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800727c:	6839      	ldr	r1, [r7, #0]
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 fc03 	bl	8007a8a <USBD_CtlError>
              break;
 8007284:	e000      	b.n	8007288 <USBD_StdEPReq+0x1c8>
              break;
 8007286:	bf00      	nop
          }
          break;
 8007288:	e0ab      	b.n	80073e2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007290:	b2db      	uxtb	r3, r3
 8007292:	2b02      	cmp	r3, #2
 8007294:	d002      	beq.n	800729c <USBD_StdEPReq+0x1dc>
 8007296:	2b03      	cmp	r3, #3
 8007298:	d032      	beq.n	8007300 <USBD_StdEPReq+0x240>
 800729a:	e097      	b.n	80073cc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800729c:	7bbb      	ldrb	r3, [r7, #14]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d007      	beq.n	80072b2 <USBD_StdEPReq+0x1f2>
 80072a2:	7bbb      	ldrb	r3, [r7, #14]
 80072a4:	2b80      	cmp	r3, #128	; 0x80
 80072a6:	d004      	beq.n	80072b2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80072a8:	6839      	ldr	r1, [r7, #0]
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f000 fbed 	bl	8007a8a <USBD_CtlError>
                break;
 80072b0:	e091      	b.n	80073d6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80072b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	da0b      	bge.n	80072d2 <USBD_StdEPReq+0x212>
 80072ba:	7bbb      	ldrb	r3, [r7, #14]
 80072bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80072c0:	4613      	mov	r3, r2
 80072c2:	009b      	lsls	r3, r3, #2
 80072c4:	4413      	add	r3, r2
 80072c6:	009b      	lsls	r3, r3, #2
 80072c8:	3310      	adds	r3, #16
 80072ca:	687a      	ldr	r2, [r7, #4]
 80072cc:	4413      	add	r3, r2
 80072ce:	3304      	adds	r3, #4
 80072d0:	e00b      	b.n	80072ea <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80072d2:	7bbb      	ldrb	r3, [r7, #14]
 80072d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80072d8:	4613      	mov	r3, r2
 80072da:	009b      	lsls	r3, r3, #2
 80072dc:	4413      	add	r3, r2
 80072de:	009b      	lsls	r3, r3, #2
 80072e0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	4413      	add	r3, r2
 80072e8:	3304      	adds	r3, #4
 80072ea:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	2200      	movs	r2, #0
 80072f0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	2202      	movs	r2, #2
 80072f6:	4619      	mov	r1, r3
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f000 fc37 	bl	8007b6c <USBD_CtlSendData>
              break;
 80072fe:	e06a      	b.n	80073d6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007300:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007304:	2b00      	cmp	r3, #0
 8007306:	da11      	bge.n	800732c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007308:	7bbb      	ldrb	r3, [r7, #14]
 800730a:	f003 020f 	and.w	r2, r3, #15
 800730e:	6879      	ldr	r1, [r7, #4]
 8007310:	4613      	mov	r3, r2
 8007312:	009b      	lsls	r3, r3, #2
 8007314:	4413      	add	r3, r2
 8007316:	009b      	lsls	r3, r3, #2
 8007318:	440b      	add	r3, r1
 800731a:	3324      	adds	r3, #36	; 0x24
 800731c:	881b      	ldrh	r3, [r3, #0]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d117      	bne.n	8007352 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007322:	6839      	ldr	r1, [r7, #0]
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f000 fbb0 	bl	8007a8a <USBD_CtlError>
                  break;
 800732a:	e054      	b.n	80073d6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800732c:	7bbb      	ldrb	r3, [r7, #14]
 800732e:	f003 020f 	and.w	r2, r3, #15
 8007332:	6879      	ldr	r1, [r7, #4]
 8007334:	4613      	mov	r3, r2
 8007336:	009b      	lsls	r3, r3, #2
 8007338:	4413      	add	r3, r2
 800733a:	009b      	lsls	r3, r3, #2
 800733c:	440b      	add	r3, r1
 800733e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007342:	881b      	ldrh	r3, [r3, #0]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d104      	bne.n	8007352 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007348:	6839      	ldr	r1, [r7, #0]
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f000 fb9d 	bl	8007a8a <USBD_CtlError>
                  break;
 8007350:	e041      	b.n	80073d6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007352:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007356:	2b00      	cmp	r3, #0
 8007358:	da0b      	bge.n	8007372 <USBD_StdEPReq+0x2b2>
 800735a:	7bbb      	ldrb	r3, [r7, #14]
 800735c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007360:	4613      	mov	r3, r2
 8007362:	009b      	lsls	r3, r3, #2
 8007364:	4413      	add	r3, r2
 8007366:	009b      	lsls	r3, r3, #2
 8007368:	3310      	adds	r3, #16
 800736a:	687a      	ldr	r2, [r7, #4]
 800736c:	4413      	add	r3, r2
 800736e:	3304      	adds	r3, #4
 8007370:	e00b      	b.n	800738a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007372:	7bbb      	ldrb	r3, [r7, #14]
 8007374:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007378:	4613      	mov	r3, r2
 800737a:	009b      	lsls	r3, r3, #2
 800737c:	4413      	add	r3, r2
 800737e:	009b      	lsls	r3, r3, #2
 8007380:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007384:	687a      	ldr	r2, [r7, #4]
 8007386:	4413      	add	r3, r2
 8007388:	3304      	adds	r3, #4
 800738a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800738c:	7bbb      	ldrb	r3, [r7, #14]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d002      	beq.n	8007398 <USBD_StdEPReq+0x2d8>
 8007392:	7bbb      	ldrb	r3, [r7, #14]
 8007394:	2b80      	cmp	r3, #128	; 0x80
 8007396:	d103      	bne.n	80073a0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	2200      	movs	r2, #0
 800739c:	601a      	str	r2, [r3, #0]
 800739e:	e00e      	b.n	80073be <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80073a0:	7bbb      	ldrb	r3, [r7, #14]
 80073a2:	4619      	mov	r1, r3
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f003 fe57 	bl	800b058 <USBD_LL_IsStallEP>
 80073aa:	4603      	mov	r3, r0
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d003      	beq.n	80073b8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	2201      	movs	r2, #1
 80073b4:	601a      	str	r2, [r3, #0]
 80073b6:	e002      	b.n	80073be <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	2200      	movs	r2, #0
 80073bc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	2202      	movs	r2, #2
 80073c2:	4619      	mov	r1, r3
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f000 fbd1 	bl	8007b6c <USBD_CtlSendData>
              break;
 80073ca:	e004      	b.n	80073d6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80073cc:	6839      	ldr	r1, [r7, #0]
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f000 fb5b 	bl	8007a8a <USBD_CtlError>
              break;
 80073d4:	bf00      	nop
          }
          break;
 80073d6:	e004      	b.n	80073e2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80073d8:	6839      	ldr	r1, [r7, #0]
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 fb55 	bl	8007a8a <USBD_CtlError>
          break;
 80073e0:	bf00      	nop
      }
      break;
 80073e2:	e005      	b.n	80073f0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80073e4:	6839      	ldr	r1, [r7, #0]
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f000 fb4f 	bl	8007a8a <USBD_CtlError>
      break;
 80073ec:	e000      	b.n	80073f0 <USBD_StdEPReq+0x330>
      break;
 80073ee:	bf00      	nop
  }

  return ret;
 80073f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3710      	adds	r7, #16
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}
	...

080073fc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b084      	sub	sp, #16
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007406:	2300      	movs	r3, #0
 8007408:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800740a:	2300      	movs	r3, #0
 800740c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800740e:	2300      	movs	r3, #0
 8007410:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	885b      	ldrh	r3, [r3, #2]
 8007416:	0a1b      	lsrs	r3, r3, #8
 8007418:	b29b      	uxth	r3, r3
 800741a:	3b01      	subs	r3, #1
 800741c:	2b06      	cmp	r3, #6
 800741e:	f200 8128 	bhi.w	8007672 <USBD_GetDescriptor+0x276>
 8007422:	a201      	add	r2, pc, #4	; (adr r2, 8007428 <USBD_GetDescriptor+0x2c>)
 8007424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007428:	08007445 	.word	0x08007445
 800742c:	0800745d 	.word	0x0800745d
 8007430:	0800749d 	.word	0x0800749d
 8007434:	08007673 	.word	0x08007673
 8007438:	08007673 	.word	0x08007673
 800743c:	08007613 	.word	0x08007613
 8007440:	0800763f 	.word	0x0800763f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	7c12      	ldrb	r2, [r2, #16]
 8007450:	f107 0108 	add.w	r1, r7, #8
 8007454:	4610      	mov	r0, r2
 8007456:	4798      	blx	r3
 8007458:	60f8      	str	r0, [r7, #12]
      break;
 800745a:	e112      	b.n	8007682 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	7c1b      	ldrb	r3, [r3, #16]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d10d      	bne.n	8007480 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800746a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800746c:	f107 0208 	add.w	r2, r7, #8
 8007470:	4610      	mov	r0, r2
 8007472:	4798      	blx	r3
 8007474:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	3301      	adds	r3, #1
 800747a:	2202      	movs	r2, #2
 800747c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800747e:	e100      	b.n	8007682 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007488:	f107 0208 	add.w	r2, r7, #8
 800748c:	4610      	mov	r0, r2
 800748e:	4798      	blx	r3
 8007490:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	3301      	adds	r3, #1
 8007496:	2202      	movs	r2, #2
 8007498:	701a      	strb	r2, [r3, #0]
      break;
 800749a:	e0f2      	b.n	8007682 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	885b      	ldrh	r3, [r3, #2]
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	2b05      	cmp	r3, #5
 80074a4:	f200 80ac 	bhi.w	8007600 <USBD_GetDescriptor+0x204>
 80074a8:	a201      	add	r2, pc, #4	; (adr r2, 80074b0 <USBD_GetDescriptor+0xb4>)
 80074aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ae:	bf00      	nop
 80074b0:	080074c9 	.word	0x080074c9
 80074b4:	080074fd 	.word	0x080074fd
 80074b8:	08007531 	.word	0x08007531
 80074bc:	08007565 	.word	0x08007565
 80074c0:	08007599 	.word	0x08007599
 80074c4:	080075cd 	.word	0x080075cd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d00b      	beq.n	80074ec <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074da:	685b      	ldr	r3, [r3, #4]
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	7c12      	ldrb	r2, [r2, #16]
 80074e0:	f107 0108 	add.w	r1, r7, #8
 80074e4:	4610      	mov	r0, r2
 80074e6:	4798      	blx	r3
 80074e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074ea:	e091      	b.n	8007610 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80074ec:	6839      	ldr	r1, [r7, #0]
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 facb 	bl	8007a8a <USBD_CtlError>
            err++;
 80074f4:	7afb      	ldrb	r3, [r7, #11]
 80074f6:	3301      	adds	r3, #1
 80074f8:	72fb      	strb	r3, [r7, #11]
          break;
 80074fa:	e089      	b.n	8007610 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007502:	689b      	ldr	r3, [r3, #8]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d00b      	beq.n	8007520 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800750e:	689b      	ldr	r3, [r3, #8]
 8007510:	687a      	ldr	r2, [r7, #4]
 8007512:	7c12      	ldrb	r2, [r2, #16]
 8007514:	f107 0108 	add.w	r1, r7, #8
 8007518:	4610      	mov	r0, r2
 800751a:	4798      	blx	r3
 800751c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800751e:	e077      	b.n	8007610 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007520:	6839      	ldr	r1, [r7, #0]
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 fab1 	bl	8007a8a <USBD_CtlError>
            err++;
 8007528:	7afb      	ldrb	r3, [r7, #11]
 800752a:	3301      	adds	r3, #1
 800752c:	72fb      	strb	r3, [r7, #11]
          break;
 800752e:	e06f      	b.n	8007610 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007536:	68db      	ldr	r3, [r3, #12]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d00b      	beq.n	8007554 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007542:	68db      	ldr	r3, [r3, #12]
 8007544:	687a      	ldr	r2, [r7, #4]
 8007546:	7c12      	ldrb	r2, [r2, #16]
 8007548:	f107 0108 	add.w	r1, r7, #8
 800754c:	4610      	mov	r0, r2
 800754e:	4798      	blx	r3
 8007550:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007552:	e05d      	b.n	8007610 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007554:	6839      	ldr	r1, [r7, #0]
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 fa97 	bl	8007a8a <USBD_CtlError>
            err++;
 800755c:	7afb      	ldrb	r3, [r7, #11]
 800755e:	3301      	adds	r3, #1
 8007560:	72fb      	strb	r3, [r7, #11]
          break;
 8007562:	e055      	b.n	8007610 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800756a:	691b      	ldr	r3, [r3, #16]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d00b      	beq.n	8007588 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007576:	691b      	ldr	r3, [r3, #16]
 8007578:	687a      	ldr	r2, [r7, #4]
 800757a:	7c12      	ldrb	r2, [r2, #16]
 800757c:	f107 0108 	add.w	r1, r7, #8
 8007580:	4610      	mov	r0, r2
 8007582:	4798      	blx	r3
 8007584:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007586:	e043      	b.n	8007610 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007588:	6839      	ldr	r1, [r7, #0]
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f000 fa7d 	bl	8007a8a <USBD_CtlError>
            err++;
 8007590:	7afb      	ldrb	r3, [r7, #11]
 8007592:	3301      	adds	r3, #1
 8007594:	72fb      	strb	r3, [r7, #11]
          break;
 8007596:	e03b      	b.n	8007610 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800759e:	695b      	ldr	r3, [r3, #20]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d00b      	beq.n	80075bc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075aa:	695b      	ldr	r3, [r3, #20]
 80075ac:	687a      	ldr	r2, [r7, #4]
 80075ae:	7c12      	ldrb	r2, [r2, #16]
 80075b0:	f107 0108 	add.w	r1, r7, #8
 80075b4:	4610      	mov	r0, r2
 80075b6:	4798      	blx	r3
 80075b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075ba:	e029      	b.n	8007610 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075bc:	6839      	ldr	r1, [r7, #0]
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 fa63 	bl	8007a8a <USBD_CtlError>
            err++;
 80075c4:	7afb      	ldrb	r3, [r7, #11]
 80075c6:	3301      	adds	r3, #1
 80075c8:	72fb      	strb	r3, [r7, #11]
          break;
 80075ca:	e021      	b.n	8007610 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075d2:	699b      	ldr	r3, [r3, #24]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d00b      	beq.n	80075f0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075de:	699b      	ldr	r3, [r3, #24]
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	7c12      	ldrb	r2, [r2, #16]
 80075e4:	f107 0108 	add.w	r1, r7, #8
 80075e8:	4610      	mov	r0, r2
 80075ea:	4798      	blx	r3
 80075ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075ee:	e00f      	b.n	8007610 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075f0:	6839      	ldr	r1, [r7, #0]
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 fa49 	bl	8007a8a <USBD_CtlError>
            err++;
 80075f8:	7afb      	ldrb	r3, [r7, #11]
 80075fa:	3301      	adds	r3, #1
 80075fc:	72fb      	strb	r3, [r7, #11]
          break;
 80075fe:	e007      	b.n	8007610 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007600:	6839      	ldr	r1, [r7, #0]
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 fa41 	bl	8007a8a <USBD_CtlError>
          err++;
 8007608:	7afb      	ldrb	r3, [r7, #11]
 800760a:	3301      	adds	r3, #1
 800760c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800760e:	bf00      	nop
      }
      break;
 8007610:	e037      	b.n	8007682 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	7c1b      	ldrb	r3, [r3, #16]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d109      	bne.n	800762e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007622:	f107 0208 	add.w	r2, r7, #8
 8007626:	4610      	mov	r0, r2
 8007628:	4798      	blx	r3
 800762a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800762c:	e029      	b.n	8007682 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800762e:	6839      	ldr	r1, [r7, #0]
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f000 fa2a 	bl	8007a8a <USBD_CtlError>
        err++;
 8007636:	7afb      	ldrb	r3, [r7, #11]
 8007638:	3301      	adds	r3, #1
 800763a:	72fb      	strb	r3, [r7, #11]
      break;
 800763c:	e021      	b.n	8007682 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	7c1b      	ldrb	r3, [r3, #16]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d10d      	bne.n	8007662 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800764c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800764e:	f107 0208 	add.w	r2, r7, #8
 8007652:	4610      	mov	r0, r2
 8007654:	4798      	blx	r3
 8007656:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	3301      	adds	r3, #1
 800765c:	2207      	movs	r2, #7
 800765e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007660:	e00f      	b.n	8007682 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007662:	6839      	ldr	r1, [r7, #0]
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f000 fa10 	bl	8007a8a <USBD_CtlError>
        err++;
 800766a:	7afb      	ldrb	r3, [r7, #11]
 800766c:	3301      	adds	r3, #1
 800766e:	72fb      	strb	r3, [r7, #11]
      break;
 8007670:	e007      	b.n	8007682 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007672:	6839      	ldr	r1, [r7, #0]
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f000 fa08 	bl	8007a8a <USBD_CtlError>
      err++;
 800767a:	7afb      	ldrb	r3, [r7, #11]
 800767c:	3301      	adds	r3, #1
 800767e:	72fb      	strb	r3, [r7, #11]
      break;
 8007680:	bf00      	nop
  }

  if (err != 0U)
 8007682:	7afb      	ldrb	r3, [r7, #11]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d11e      	bne.n	80076c6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	88db      	ldrh	r3, [r3, #6]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d016      	beq.n	80076be <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007690:	893b      	ldrh	r3, [r7, #8]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d00e      	beq.n	80076b4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	88da      	ldrh	r2, [r3, #6]
 800769a:	893b      	ldrh	r3, [r7, #8]
 800769c:	4293      	cmp	r3, r2
 800769e:	bf28      	it	cs
 80076a0:	4613      	movcs	r3, r2
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80076a6:	893b      	ldrh	r3, [r7, #8]
 80076a8:	461a      	mov	r2, r3
 80076aa:	68f9      	ldr	r1, [r7, #12]
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f000 fa5d 	bl	8007b6c <USBD_CtlSendData>
 80076b2:	e009      	b.n	80076c8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80076b4:	6839      	ldr	r1, [r7, #0]
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f000 f9e7 	bl	8007a8a <USBD_CtlError>
 80076bc:	e004      	b.n	80076c8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f000 faae 	bl	8007c20 <USBD_CtlSendStatus>
 80076c4:	e000      	b.n	80076c8 <USBD_GetDescriptor+0x2cc>
    return;
 80076c6:	bf00      	nop
  }
}
 80076c8:	3710      	adds	r7, #16
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}
 80076ce:	bf00      	nop

080076d0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b084      	sub	sp, #16
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	889b      	ldrh	r3, [r3, #4]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d131      	bne.n	8007746 <USBD_SetAddress+0x76>
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	88db      	ldrh	r3, [r3, #6]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d12d      	bne.n	8007746 <USBD_SetAddress+0x76>
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	885b      	ldrh	r3, [r3, #2]
 80076ee:	2b7f      	cmp	r3, #127	; 0x7f
 80076f0:	d829      	bhi.n	8007746 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	885b      	ldrh	r3, [r3, #2]
 80076f6:	b2db      	uxtb	r3, r3
 80076f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076fc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007704:	b2db      	uxtb	r3, r3
 8007706:	2b03      	cmp	r3, #3
 8007708:	d104      	bne.n	8007714 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800770a:	6839      	ldr	r1, [r7, #0]
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f000 f9bc 	bl	8007a8a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007712:	e01d      	b.n	8007750 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	7bfa      	ldrb	r2, [r7, #15]
 8007718:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800771c:	7bfb      	ldrb	r3, [r7, #15]
 800771e:	4619      	mov	r1, r3
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f003 fcc5 	bl	800b0b0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f000 fa7a 	bl	8007c20 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800772c:	7bfb      	ldrb	r3, [r7, #15]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d004      	beq.n	800773c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2202      	movs	r2, #2
 8007736:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800773a:	e009      	b.n	8007750 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2201      	movs	r2, #1
 8007740:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007744:	e004      	b.n	8007750 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007746:	6839      	ldr	r1, [r7, #0]
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f000 f99e 	bl	8007a8a <USBD_CtlError>
  }
}
 800774e:	bf00      	nop
 8007750:	bf00      	nop
 8007752:	3710      	adds	r7, #16
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}

08007758 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b084      	sub	sp, #16
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007762:	2300      	movs	r3, #0
 8007764:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	885b      	ldrh	r3, [r3, #2]
 800776a:	b2da      	uxtb	r2, r3
 800776c:	4b4e      	ldr	r3, [pc, #312]	; (80078a8 <USBD_SetConfig+0x150>)
 800776e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007770:	4b4d      	ldr	r3, [pc, #308]	; (80078a8 <USBD_SetConfig+0x150>)
 8007772:	781b      	ldrb	r3, [r3, #0]
 8007774:	2b01      	cmp	r3, #1
 8007776:	d905      	bls.n	8007784 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007778:	6839      	ldr	r1, [r7, #0]
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 f985 	bl	8007a8a <USBD_CtlError>
    return USBD_FAIL;
 8007780:	2303      	movs	r3, #3
 8007782:	e08c      	b.n	800789e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800778a:	b2db      	uxtb	r3, r3
 800778c:	2b02      	cmp	r3, #2
 800778e:	d002      	beq.n	8007796 <USBD_SetConfig+0x3e>
 8007790:	2b03      	cmp	r3, #3
 8007792:	d029      	beq.n	80077e8 <USBD_SetConfig+0x90>
 8007794:	e075      	b.n	8007882 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007796:	4b44      	ldr	r3, [pc, #272]	; (80078a8 <USBD_SetConfig+0x150>)
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d020      	beq.n	80077e0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800779e:	4b42      	ldr	r3, [pc, #264]	; (80078a8 <USBD_SetConfig+0x150>)
 80077a0:	781b      	ldrb	r3, [r3, #0]
 80077a2:	461a      	mov	r2, r3
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80077a8:	4b3f      	ldr	r3, [pc, #252]	; (80078a8 <USBD_SetConfig+0x150>)
 80077aa:	781b      	ldrb	r3, [r3, #0]
 80077ac:	4619      	mov	r1, r3
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f7fe ffe7 	bl	8006782 <USBD_SetClassConfig>
 80077b4:	4603      	mov	r3, r0
 80077b6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80077b8:	7bfb      	ldrb	r3, [r7, #15]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d008      	beq.n	80077d0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80077be:	6839      	ldr	r1, [r7, #0]
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f000 f962 	bl	8007a8a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2202      	movs	r2, #2
 80077ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80077ce:	e065      	b.n	800789c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f000 fa25 	bl	8007c20 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2203      	movs	r2, #3
 80077da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80077de:	e05d      	b.n	800789c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f000 fa1d 	bl	8007c20 <USBD_CtlSendStatus>
      break;
 80077e6:	e059      	b.n	800789c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80077e8:	4b2f      	ldr	r3, [pc, #188]	; (80078a8 <USBD_SetConfig+0x150>)
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d112      	bne.n	8007816 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2202      	movs	r2, #2
 80077f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80077f8:	4b2b      	ldr	r3, [pc, #172]	; (80078a8 <USBD_SetConfig+0x150>)
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	461a      	mov	r2, r3
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007802:	4b29      	ldr	r3, [pc, #164]	; (80078a8 <USBD_SetConfig+0x150>)
 8007804:	781b      	ldrb	r3, [r3, #0]
 8007806:	4619      	mov	r1, r3
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f7fe ffd6 	bl	80067ba <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f000 fa06 	bl	8007c20 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007814:	e042      	b.n	800789c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007816:	4b24      	ldr	r3, [pc, #144]	; (80078a8 <USBD_SetConfig+0x150>)
 8007818:	781b      	ldrb	r3, [r3, #0]
 800781a:	461a      	mov	r2, r3
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	429a      	cmp	r2, r3
 8007822:	d02a      	beq.n	800787a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	b2db      	uxtb	r3, r3
 800782a:	4619      	mov	r1, r3
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f7fe ffc4 	bl	80067ba <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007832:	4b1d      	ldr	r3, [pc, #116]	; (80078a8 <USBD_SetConfig+0x150>)
 8007834:	781b      	ldrb	r3, [r3, #0]
 8007836:	461a      	mov	r2, r3
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800783c:	4b1a      	ldr	r3, [pc, #104]	; (80078a8 <USBD_SetConfig+0x150>)
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	4619      	mov	r1, r3
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f7fe ff9d 	bl	8006782 <USBD_SetClassConfig>
 8007848:	4603      	mov	r3, r0
 800784a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800784c:	7bfb      	ldrb	r3, [r7, #15]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d00f      	beq.n	8007872 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007852:	6839      	ldr	r1, [r7, #0]
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f000 f918 	bl	8007a8a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	b2db      	uxtb	r3, r3
 8007860:	4619      	mov	r1, r3
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f7fe ffa9 	bl	80067ba <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2202      	movs	r2, #2
 800786c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007870:	e014      	b.n	800789c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f000 f9d4 	bl	8007c20 <USBD_CtlSendStatus>
      break;
 8007878:	e010      	b.n	800789c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 f9d0 	bl	8007c20 <USBD_CtlSendStatus>
      break;
 8007880:	e00c      	b.n	800789c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007882:	6839      	ldr	r1, [r7, #0]
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 f900 	bl	8007a8a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800788a:	4b07      	ldr	r3, [pc, #28]	; (80078a8 <USBD_SetConfig+0x150>)
 800788c:	781b      	ldrb	r3, [r3, #0]
 800788e:	4619      	mov	r1, r3
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f7fe ff92 	bl	80067ba <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007896:	2303      	movs	r3, #3
 8007898:	73fb      	strb	r3, [r7, #15]
      break;
 800789a:	bf00      	nop
  }

  return ret;
 800789c:	7bfb      	ldrb	r3, [r7, #15]
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3710      	adds	r7, #16
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}
 80078a6:	bf00      	nop
 80078a8:	2000023c 	.word	0x2000023c

080078ac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b082      	sub	sp, #8
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
 80078b4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	88db      	ldrh	r3, [r3, #6]
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	d004      	beq.n	80078c8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80078be:	6839      	ldr	r1, [r7, #0]
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f000 f8e2 	bl	8007a8a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80078c6:	e023      	b.n	8007910 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078ce:	b2db      	uxtb	r3, r3
 80078d0:	2b02      	cmp	r3, #2
 80078d2:	dc02      	bgt.n	80078da <USBD_GetConfig+0x2e>
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	dc03      	bgt.n	80078e0 <USBD_GetConfig+0x34>
 80078d8:	e015      	b.n	8007906 <USBD_GetConfig+0x5a>
 80078da:	2b03      	cmp	r3, #3
 80078dc:	d00b      	beq.n	80078f6 <USBD_GetConfig+0x4a>
 80078de:	e012      	b.n	8007906 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2200      	movs	r2, #0
 80078e4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	3308      	adds	r3, #8
 80078ea:	2201      	movs	r2, #1
 80078ec:	4619      	mov	r1, r3
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f000 f93c 	bl	8007b6c <USBD_CtlSendData>
        break;
 80078f4:	e00c      	b.n	8007910 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	3304      	adds	r3, #4
 80078fa:	2201      	movs	r2, #1
 80078fc:	4619      	mov	r1, r3
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 f934 	bl	8007b6c <USBD_CtlSendData>
        break;
 8007904:	e004      	b.n	8007910 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007906:	6839      	ldr	r1, [r7, #0]
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 f8be 	bl	8007a8a <USBD_CtlError>
        break;
 800790e:	bf00      	nop
}
 8007910:	bf00      	nop
 8007912:	3708      	adds	r7, #8
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}

08007918 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b082      	sub	sp, #8
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007928:	b2db      	uxtb	r3, r3
 800792a:	3b01      	subs	r3, #1
 800792c:	2b02      	cmp	r3, #2
 800792e:	d81e      	bhi.n	800796e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	88db      	ldrh	r3, [r3, #6]
 8007934:	2b02      	cmp	r3, #2
 8007936:	d004      	beq.n	8007942 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007938:	6839      	ldr	r1, [r7, #0]
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 f8a5 	bl	8007a8a <USBD_CtlError>
        break;
 8007940:	e01a      	b.n	8007978 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2201      	movs	r2, #1
 8007946:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800794e:	2b00      	cmp	r3, #0
 8007950:	d005      	beq.n	800795e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	68db      	ldr	r3, [r3, #12]
 8007956:	f043 0202 	orr.w	r2, r3, #2
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	330c      	adds	r3, #12
 8007962:	2202      	movs	r2, #2
 8007964:	4619      	mov	r1, r3
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f000 f900 	bl	8007b6c <USBD_CtlSendData>
      break;
 800796c:	e004      	b.n	8007978 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800796e:	6839      	ldr	r1, [r7, #0]
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f000 f88a 	bl	8007a8a <USBD_CtlError>
      break;
 8007976:	bf00      	nop
  }
}
 8007978:	bf00      	nop
 800797a:	3708      	adds	r7, #8
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b082      	sub	sp, #8
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	885b      	ldrh	r3, [r3, #2]
 800798e:	2b01      	cmp	r3, #1
 8007990:	d107      	bne.n	80079a2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2201      	movs	r2, #1
 8007996:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 f940 	bl	8007c20 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80079a0:	e013      	b.n	80079ca <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	885b      	ldrh	r3, [r3, #2]
 80079a6:	2b02      	cmp	r3, #2
 80079a8:	d10b      	bne.n	80079c2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	889b      	ldrh	r3, [r3, #4]
 80079ae:	0a1b      	lsrs	r3, r3, #8
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	b2da      	uxtb	r2, r3
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f000 f930 	bl	8007c20 <USBD_CtlSendStatus>
}
 80079c0:	e003      	b.n	80079ca <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80079c2:	6839      	ldr	r1, [r7, #0]
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f000 f860 	bl	8007a8a <USBD_CtlError>
}
 80079ca:	bf00      	nop
 80079cc:	3708      	adds	r7, #8
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}

080079d2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079d2:	b580      	push	{r7, lr}
 80079d4:	b082      	sub	sp, #8
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	6078      	str	r0, [r7, #4]
 80079da:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079e2:	b2db      	uxtb	r3, r3
 80079e4:	3b01      	subs	r3, #1
 80079e6:	2b02      	cmp	r3, #2
 80079e8:	d80b      	bhi.n	8007a02 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	885b      	ldrh	r3, [r3, #2]
 80079ee:	2b01      	cmp	r3, #1
 80079f0:	d10c      	bne.n	8007a0c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2200      	movs	r2, #0
 80079f6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f000 f910 	bl	8007c20 <USBD_CtlSendStatus>
      }
      break;
 8007a00:	e004      	b.n	8007a0c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007a02:	6839      	ldr	r1, [r7, #0]
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f000 f840 	bl	8007a8a <USBD_CtlError>
      break;
 8007a0a:	e000      	b.n	8007a0e <USBD_ClrFeature+0x3c>
      break;
 8007a0c:	bf00      	nop
  }
}
 8007a0e:	bf00      	nop
 8007a10:	3708      	adds	r7, #8
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}

08007a16 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007a16:	b580      	push	{r7, lr}
 8007a18:	b084      	sub	sp, #16
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	6078      	str	r0, [r7, #4]
 8007a1e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	781a      	ldrb	r2, [r3, #0]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	3301      	adds	r3, #1
 8007a30:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	781a      	ldrb	r2, [r3, #0]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	3301      	adds	r3, #1
 8007a3e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007a40:	68f8      	ldr	r0, [r7, #12]
 8007a42:	f7ff fa41 	bl	8006ec8 <SWAPBYTE>
 8007a46:	4603      	mov	r3, r0
 8007a48:	461a      	mov	r2, r3
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	3301      	adds	r3, #1
 8007a52:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	3301      	adds	r3, #1
 8007a58:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007a5a:	68f8      	ldr	r0, [r7, #12]
 8007a5c:	f7ff fa34 	bl	8006ec8 <SWAPBYTE>
 8007a60:	4603      	mov	r3, r0
 8007a62:	461a      	mov	r2, r3
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	3301      	adds	r3, #1
 8007a6c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	3301      	adds	r3, #1
 8007a72:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007a74:	68f8      	ldr	r0, [r7, #12]
 8007a76:	f7ff fa27 	bl	8006ec8 <SWAPBYTE>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	461a      	mov	r2, r3
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	80da      	strh	r2, [r3, #6]
}
 8007a82:	bf00      	nop
 8007a84:	3710      	adds	r7, #16
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}

08007a8a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a8a:	b580      	push	{r7, lr}
 8007a8c:	b082      	sub	sp, #8
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	6078      	str	r0, [r7, #4]
 8007a92:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a94:	2180      	movs	r1, #128	; 0x80
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f003 faa0 	bl	800afdc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007a9c:	2100      	movs	r1, #0
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f003 fa9c 	bl	800afdc <USBD_LL_StallEP>
}
 8007aa4:	bf00      	nop
 8007aa6:	3708      	adds	r7, #8
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}

08007aac <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b086      	sub	sp, #24
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	60f8      	str	r0, [r7, #12]
 8007ab4:	60b9      	str	r1, [r7, #8]
 8007ab6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d036      	beq.n	8007b30 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007ac6:	6938      	ldr	r0, [r7, #16]
 8007ac8:	f000 f836 	bl	8007b38 <USBD_GetLen>
 8007acc:	4603      	mov	r3, r0
 8007ace:	3301      	adds	r3, #1
 8007ad0:	b29b      	uxth	r3, r3
 8007ad2:	005b      	lsls	r3, r3, #1
 8007ad4:	b29a      	uxth	r2, r3
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007ada:	7dfb      	ldrb	r3, [r7, #23]
 8007adc:	68ba      	ldr	r2, [r7, #8]
 8007ade:	4413      	add	r3, r2
 8007ae0:	687a      	ldr	r2, [r7, #4]
 8007ae2:	7812      	ldrb	r2, [r2, #0]
 8007ae4:	701a      	strb	r2, [r3, #0]
  idx++;
 8007ae6:	7dfb      	ldrb	r3, [r7, #23]
 8007ae8:	3301      	adds	r3, #1
 8007aea:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007aec:	7dfb      	ldrb	r3, [r7, #23]
 8007aee:	68ba      	ldr	r2, [r7, #8]
 8007af0:	4413      	add	r3, r2
 8007af2:	2203      	movs	r2, #3
 8007af4:	701a      	strb	r2, [r3, #0]
  idx++;
 8007af6:	7dfb      	ldrb	r3, [r7, #23]
 8007af8:	3301      	adds	r3, #1
 8007afa:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007afc:	e013      	b.n	8007b26 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007afe:	7dfb      	ldrb	r3, [r7, #23]
 8007b00:	68ba      	ldr	r2, [r7, #8]
 8007b02:	4413      	add	r3, r2
 8007b04:	693a      	ldr	r2, [r7, #16]
 8007b06:	7812      	ldrb	r2, [r2, #0]
 8007b08:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	3301      	adds	r3, #1
 8007b0e:	613b      	str	r3, [r7, #16]
    idx++;
 8007b10:	7dfb      	ldrb	r3, [r7, #23]
 8007b12:	3301      	adds	r3, #1
 8007b14:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007b16:	7dfb      	ldrb	r3, [r7, #23]
 8007b18:	68ba      	ldr	r2, [r7, #8]
 8007b1a:	4413      	add	r3, r2
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	701a      	strb	r2, [r3, #0]
    idx++;
 8007b20:	7dfb      	ldrb	r3, [r7, #23]
 8007b22:	3301      	adds	r3, #1
 8007b24:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	781b      	ldrb	r3, [r3, #0]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d1e7      	bne.n	8007afe <USBD_GetString+0x52>
 8007b2e:	e000      	b.n	8007b32 <USBD_GetString+0x86>
    return;
 8007b30:	bf00      	nop
  }
}
 8007b32:	3718      	adds	r7, #24
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}

08007b38 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b085      	sub	sp, #20
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007b40:	2300      	movs	r3, #0
 8007b42:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007b48:	e005      	b.n	8007b56 <USBD_GetLen+0x1e>
  {
    len++;
 8007b4a:	7bfb      	ldrb	r3, [r7, #15]
 8007b4c:	3301      	adds	r3, #1
 8007b4e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	3301      	adds	r3, #1
 8007b54:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	781b      	ldrb	r3, [r3, #0]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d1f5      	bne.n	8007b4a <USBD_GetLen+0x12>
  }

  return len;
 8007b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3714      	adds	r7, #20
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr

08007b6c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b084      	sub	sp, #16
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	60f8      	str	r0, [r7, #12]
 8007b74:	60b9      	str	r1, [r7, #8]
 8007b76:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	2202      	movs	r2, #2
 8007b7c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	687a      	ldr	r2, [r7, #4]
 8007b84:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	687a      	ldr	r2, [r7, #4]
 8007b8a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	68ba      	ldr	r2, [r7, #8]
 8007b90:	2100      	movs	r1, #0
 8007b92:	68f8      	ldr	r0, [r7, #12]
 8007b94:	f003 faab 	bl	800b0ee <USBD_LL_Transmit>

  return USBD_OK;
 8007b98:	2300      	movs	r3, #0
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3710      	adds	r7, #16
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}

08007ba2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007ba2:	b580      	push	{r7, lr}
 8007ba4:	b084      	sub	sp, #16
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	60f8      	str	r0, [r7, #12]
 8007baa:	60b9      	str	r1, [r7, #8]
 8007bac:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	68ba      	ldr	r2, [r7, #8]
 8007bb2:	2100      	movs	r1, #0
 8007bb4:	68f8      	ldr	r0, [r7, #12]
 8007bb6:	f003 fa9a 	bl	800b0ee <USBD_LL_Transmit>

  return USBD_OK;
 8007bba:	2300      	movs	r3, #0
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3710      	adds	r7, #16
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b084      	sub	sp, #16
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	60f8      	str	r0, [r7, #12]
 8007bcc:	60b9      	str	r1, [r7, #8]
 8007bce:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	2203      	movs	r2, #3
 8007bd4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	687a      	ldr	r2, [r7, #4]
 8007bdc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	687a      	ldr	r2, [r7, #4]
 8007be4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	68ba      	ldr	r2, [r7, #8]
 8007bec:	2100      	movs	r1, #0
 8007bee:	68f8      	ldr	r0, [r7, #12]
 8007bf0:	f003 fa9e 	bl	800b130 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007bf4:	2300      	movs	r3, #0
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3710      	adds	r7, #16
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}

08007bfe <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007bfe:	b580      	push	{r7, lr}
 8007c00:	b084      	sub	sp, #16
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	60f8      	str	r0, [r7, #12]
 8007c06:	60b9      	str	r1, [r7, #8]
 8007c08:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	68ba      	ldr	r2, [r7, #8]
 8007c0e:	2100      	movs	r1, #0
 8007c10:	68f8      	ldr	r0, [r7, #12]
 8007c12:	f003 fa8d 	bl	800b130 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c16:	2300      	movs	r3, #0
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	3710      	adds	r7, #16
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}

08007c20 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b082      	sub	sp, #8
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2204      	movs	r2, #4
 8007c2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007c30:	2300      	movs	r3, #0
 8007c32:	2200      	movs	r2, #0
 8007c34:	2100      	movs	r1, #0
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f003 fa59 	bl	800b0ee <USBD_LL_Transmit>

  return USBD_OK;
 8007c3c:	2300      	movs	r3, #0
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3708      	adds	r7, #8
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}

08007c46 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007c46:	b580      	push	{r7, lr}
 8007c48:	b082      	sub	sp, #8
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2205      	movs	r2, #5
 8007c52:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c56:	2300      	movs	r3, #0
 8007c58:	2200      	movs	r2, #0
 8007c5a:	2100      	movs	r1, #0
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f003 fa67 	bl	800b130 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c62:	2300      	movs	r3, #0
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3708      	adds	r7, #8
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}

08007c6c <__NVIC_SetPriority>:
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b083      	sub	sp, #12
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	4603      	mov	r3, r0
 8007c74:	6039      	str	r1, [r7, #0]
 8007c76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	db0a      	blt.n	8007c96 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	b2da      	uxtb	r2, r3
 8007c84:	490c      	ldr	r1, [pc, #48]	; (8007cb8 <__NVIC_SetPriority+0x4c>)
 8007c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c8a:	0112      	lsls	r2, r2, #4
 8007c8c:	b2d2      	uxtb	r2, r2
 8007c8e:	440b      	add	r3, r1
 8007c90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007c94:	e00a      	b.n	8007cac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	b2da      	uxtb	r2, r3
 8007c9a:	4908      	ldr	r1, [pc, #32]	; (8007cbc <__NVIC_SetPriority+0x50>)
 8007c9c:	79fb      	ldrb	r3, [r7, #7]
 8007c9e:	f003 030f 	and.w	r3, r3, #15
 8007ca2:	3b04      	subs	r3, #4
 8007ca4:	0112      	lsls	r2, r2, #4
 8007ca6:	b2d2      	uxtb	r2, r2
 8007ca8:	440b      	add	r3, r1
 8007caa:	761a      	strb	r2, [r3, #24]
}
 8007cac:	bf00      	nop
 8007cae:	370c      	adds	r7, #12
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	4770      	bx	lr
 8007cb8:	e000e100 	.word	0xe000e100
 8007cbc:	e000ed00 	.word	0xe000ed00

08007cc0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007cc4:	4b05      	ldr	r3, [pc, #20]	; (8007cdc <SysTick_Handler+0x1c>)
 8007cc6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007cc8:	f001 fd28 	bl	800971c <xTaskGetSchedulerState>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	2b01      	cmp	r3, #1
 8007cd0:	d001      	beq.n	8007cd6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007cd2:	f002 fb11 	bl	800a2f8 <xPortSysTickHandler>
  }
}
 8007cd6:	bf00      	nop
 8007cd8:	bd80      	pop	{r7, pc}
 8007cda:	bf00      	nop
 8007cdc:	e000e010 	.word	0xe000e010

08007ce0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007ce4:	2100      	movs	r1, #0
 8007ce6:	f06f 0004 	mvn.w	r0, #4
 8007cea:	f7ff ffbf 	bl	8007c6c <__NVIC_SetPriority>
#endif
}
 8007cee:	bf00      	nop
 8007cf0:	bd80      	pop	{r7, pc}
	...

08007cf4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007cf4:	b480      	push	{r7}
 8007cf6:	b083      	sub	sp, #12
 8007cf8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007cfa:	f3ef 8305 	mrs	r3, IPSR
 8007cfe:	603b      	str	r3, [r7, #0]
  return(result);
 8007d00:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d003      	beq.n	8007d0e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007d06:	f06f 0305 	mvn.w	r3, #5
 8007d0a:	607b      	str	r3, [r7, #4]
 8007d0c:	e00c      	b.n	8007d28 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007d0e:	4b0a      	ldr	r3, [pc, #40]	; (8007d38 <osKernelInitialize+0x44>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d105      	bne.n	8007d22 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007d16:	4b08      	ldr	r3, [pc, #32]	; (8007d38 <osKernelInitialize+0x44>)
 8007d18:	2201      	movs	r2, #1
 8007d1a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	607b      	str	r3, [r7, #4]
 8007d20:	e002      	b.n	8007d28 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007d22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d26:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007d28:	687b      	ldr	r3, [r7, #4]
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	370c      	adds	r7, #12
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d34:	4770      	bx	lr
 8007d36:	bf00      	nop
 8007d38:	20000240 	.word	0x20000240

08007d3c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b082      	sub	sp, #8
 8007d40:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d42:	f3ef 8305 	mrs	r3, IPSR
 8007d46:	603b      	str	r3, [r7, #0]
  return(result);
 8007d48:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d003      	beq.n	8007d56 <osKernelStart+0x1a>
    stat = osErrorISR;
 8007d4e:	f06f 0305 	mvn.w	r3, #5
 8007d52:	607b      	str	r3, [r7, #4]
 8007d54:	e010      	b.n	8007d78 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007d56:	4b0b      	ldr	r3, [pc, #44]	; (8007d84 <osKernelStart+0x48>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	2b01      	cmp	r3, #1
 8007d5c:	d109      	bne.n	8007d72 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007d5e:	f7ff ffbf 	bl	8007ce0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007d62:	4b08      	ldr	r3, [pc, #32]	; (8007d84 <osKernelStart+0x48>)
 8007d64:	2202      	movs	r2, #2
 8007d66:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007d68:	f001 f87c 	bl	8008e64 <vTaskStartScheduler>
      stat = osOK;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	607b      	str	r3, [r7, #4]
 8007d70:	e002      	b.n	8007d78 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007d72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d76:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007d78:	687b      	ldr	r3, [r7, #4]
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3708      	adds	r7, #8
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}
 8007d82:	bf00      	nop
 8007d84:	20000240 	.word	0x20000240

08007d88 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b08e      	sub	sp, #56	; 0x38
 8007d8c:	af04      	add	r7, sp, #16
 8007d8e:	60f8      	str	r0, [r7, #12]
 8007d90:	60b9      	str	r1, [r7, #8]
 8007d92:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007d94:	2300      	movs	r3, #0
 8007d96:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d98:	f3ef 8305 	mrs	r3, IPSR
 8007d9c:	617b      	str	r3, [r7, #20]
  return(result);
 8007d9e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d17e      	bne.n	8007ea2 <osThreadNew+0x11a>
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d07b      	beq.n	8007ea2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007daa:	2380      	movs	r3, #128	; 0x80
 8007dac:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007dae:	2318      	movs	r3, #24
 8007db0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007db2:	2300      	movs	r3, #0
 8007db4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007db6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007dba:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d045      	beq.n	8007e4e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d002      	beq.n	8007dd0 <osThreadNew+0x48>
        name = attr->name;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	699b      	ldr	r3, [r3, #24]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d002      	beq.n	8007dde <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	699b      	ldr	r3, [r3, #24]
 8007ddc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007dde:	69fb      	ldr	r3, [r7, #28]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d008      	beq.n	8007df6 <osThreadNew+0x6e>
 8007de4:	69fb      	ldr	r3, [r7, #28]
 8007de6:	2b38      	cmp	r3, #56	; 0x38
 8007de8:	d805      	bhi.n	8007df6 <osThreadNew+0x6e>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	f003 0301 	and.w	r3, r3, #1
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d001      	beq.n	8007dfa <osThreadNew+0x72>
        return (NULL);
 8007df6:	2300      	movs	r3, #0
 8007df8:	e054      	b.n	8007ea4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	695b      	ldr	r3, [r3, #20]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d003      	beq.n	8007e0a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	695b      	ldr	r3, [r3, #20]
 8007e06:	089b      	lsrs	r3, r3, #2
 8007e08:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	689b      	ldr	r3, [r3, #8]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d00e      	beq.n	8007e30 <osThreadNew+0xa8>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	68db      	ldr	r3, [r3, #12]
 8007e16:	2bbb      	cmp	r3, #187	; 0xbb
 8007e18:	d90a      	bls.n	8007e30 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d006      	beq.n	8007e30 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	695b      	ldr	r3, [r3, #20]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d002      	beq.n	8007e30 <osThreadNew+0xa8>
        mem = 1;
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	61bb      	str	r3, [r7, #24]
 8007e2e:	e010      	b.n	8007e52 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	689b      	ldr	r3, [r3, #8]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d10c      	bne.n	8007e52 <osThreadNew+0xca>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	68db      	ldr	r3, [r3, #12]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d108      	bne.n	8007e52 <osThreadNew+0xca>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	691b      	ldr	r3, [r3, #16]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d104      	bne.n	8007e52 <osThreadNew+0xca>
          mem = 0;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	61bb      	str	r3, [r7, #24]
 8007e4c:	e001      	b.n	8007e52 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007e52:	69bb      	ldr	r3, [r7, #24]
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d110      	bne.n	8007e7a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007e5c:	687a      	ldr	r2, [r7, #4]
 8007e5e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007e60:	9202      	str	r2, [sp, #8]
 8007e62:	9301      	str	r3, [sp, #4]
 8007e64:	69fb      	ldr	r3, [r7, #28]
 8007e66:	9300      	str	r3, [sp, #0]
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	6a3a      	ldr	r2, [r7, #32]
 8007e6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007e6e:	68f8      	ldr	r0, [r7, #12]
 8007e70:	f000 fe0c 	bl	8008a8c <xTaskCreateStatic>
 8007e74:	4603      	mov	r3, r0
 8007e76:	613b      	str	r3, [r7, #16]
 8007e78:	e013      	b.n	8007ea2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007e7a:	69bb      	ldr	r3, [r7, #24]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d110      	bne.n	8007ea2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007e80:	6a3b      	ldr	r3, [r7, #32]
 8007e82:	b29a      	uxth	r2, r3
 8007e84:	f107 0310 	add.w	r3, r7, #16
 8007e88:	9301      	str	r3, [sp, #4]
 8007e8a:	69fb      	ldr	r3, [r7, #28]
 8007e8c:	9300      	str	r3, [sp, #0]
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007e92:	68f8      	ldr	r0, [r7, #12]
 8007e94:	f000 fe57 	bl	8008b46 <xTaskCreate>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	2b01      	cmp	r3, #1
 8007e9c:	d001      	beq.n	8007ea2 <osThreadNew+0x11a>
            hTask = NULL;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007ea2:	693b      	ldr	r3, [r7, #16]
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3728      	adds	r7, #40	; 0x28
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b084      	sub	sp, #16
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007eb4:	f3ef 8305 	mrs	r3, IPSR
 8007eb8:	60bb      	str	r3, [r7, #8]
  return(result);
 8007eba:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d003      	beq.n	8007ec8 <osDelay+0x1c>
    stat = osErrorISR;
 8007ec0:	f06f 0305 	mvn.w	r3, #5
 8007ec4:	60fb      	str	r3, [r7, #12]
 8007ec6:	e007      	b.n	8007ed8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007ec8:	2300      	movs	r3, #0
 8007eca:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d002      	beq.n	8007ed8 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f000 ff92 	bl	8008dfc <vTaskDelay>
    }
  }

  return (stat);
 8007ed8:	68fb      	ldr	r3, [r7, #12]
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3710      	adds	r7, #16
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}
	...

08007ee4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007ee4:	b480      	push	{r7}
 8007ee6:	b085      	sub	sp, #20
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	60f8      	str	r0, [r7, #12]
 8007eec:	60b9      	str	r1, [r7, #8]
 8007eee:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	4a07      	ldr	r2, [pc, #28]	; (8007f10 <vApplicationGetIdleTaskMemory+0x2c>)
 8007ef4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	4a06      	ldr	r2, [pc, #24]	; (8007f14 <vApplicationGetIdleTaskMemory+0x30>)
 8007efa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2280      	movs	r2, #128	; 0x80
 8007f00:	601a      	str	r2, [r3, #0]
}
 8007f02:	bf00      	nop
 8007f04:	3714      	adds	r7, #20
 8007f06:	46bd      	mov	sp, r7
 8007f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0c:	4770      	bx	lr
 8007f0e:	bf00      	nop
 8007f10:	20000244 	.word	0x20000244
 8007f14:	20000300 	.word	0x20000300

08007f18 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007f18:	b480      	push	{r7}
 8007f1a:	b085      	sub	sp, #20
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	60f8      	str	r0, [r7, #12]
 8007f20:	60b9      	str	r1, [r7, #8]
 8007f22:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	4a07      	ldr	r2, [pc, #28]	; (8007f44 <vApplicationGetTimerTaskMemory+0x2c>)
 8007f28:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	4a06      	ldr	r2, [pc, #24]	; (8007f48 <vApplicationGetTimerTaskMemory+0x30>)
 8007f2e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007f36:	601a      	str	r2, [r3, #0]
}
 8007f38:	bf00      	nop
 8007f3a:	3714      	adds	r7, #20
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f42:	4770      	bx	lr
 8007f44:	20000500 	.word	0x20000500
 8007f48:	200005bc 	.word	0x200005bc

08007f4c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b083      	sub	sp, #12
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f103 0208 	add.w	r2, r3, #8
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007f64:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f103 0208 	add.w	r2, r3, #8
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f103 0208 	add.w	r2, r3, #8
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007f80:	bf00      	nop
 8007f82:	370c      	adds	r7, #12
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr

08007f8c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b083      	sub	sp, #12
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2200      	movs	r2, #0
 8007f98:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007f9a:	bf00      	nop
 8007f9c:	370c      	adds	r7, #12
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa4:	4770      	bx	lr

08007fa6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007fa6:	b480      	push	{r7}
 8007fa8:	b085      	sub	sp, #20
 8007faa:	af00      	add	r7, sp, #0
 8007fac:	6078      	str	r0, [r7, #4]
 8007fae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	685b      	ldr	r3, [r3, #4]
 8007fb4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	68fa      	ldr	r2, [r7, #12]
 8007fba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	689a      	ldr	r2, [r3, #8]
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	689b      	ldr	r3, [r3, #8]
 8007fc8:	683a      	ldr	r2, [r7, #0]
 8007fca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	683a      	ldr	r2, [r7, #0]
 8007fd0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	687a      	ldr	r2, [r7, #4]
 8007fd6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	1c5a      	adds	r2, r3, #1
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	601a      	str	r2, [r3, #0]
}
 8007fe2:	bf00      	nop
 8007fe4:	3714      	adds	r7, #20
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fec:	4770      	bx	lr

08007fee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007fee:	b480      	push	{r7}
 8007ff0:	b085      	sub	sp, #20
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
 8007ff6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008004:	d103      	bne.n	800800e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	691b      	ldr	r3, [r3, #16]
 800800a:	60fb      	str	r3, [r7, #12]
 800800c:	e00c      	b.n	8008028 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	3308      	adds	r3, #8
 8008012:	60fb      	str	r3, [r7, #12]
 8008014:	e002      	b.n	800801c <vListInsert+0x2e>
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	60fb      	str	r3, [r7, #12]
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	68ba      	ldr	r2, [r7, #8]
 8008024:	429a      	cmp	r2, r3
 8008026:	d2f6      	bcs.n	8008016 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	685a      	ldr	r2, [r3, #4]
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	683a      	ldr	r2, [r7, #0]
 8008036:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	68fa      	ldr	r2, [r7, #12]
 800803c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	683a      	ldr	r2, [r7, #0]
 8008042:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	687a      	ldr	r2, [r7, #4]
 8008048:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	1c5a      	adds	r2, r3, #1
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	601a      	str	r2, [r3, #0]
}
 8008054:	bf00      	nop
 8008056:	3714      	adds	r7, #20
 8008058:	46bd      	mov	sp, r7
 800805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805e:	4770      	bx	lr

08008060 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008060:	b480      	push	{r7}
 8008062:	b085      	sub	sp, #20
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	691b      	ldr	r3, [r3, #16]
 800806c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	687a      	ldr	r2, [r7, #4]
 8008074:	6892      	ldr	r2, [r2, #8]
 8008076:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	689b      	ldr	r3, [r3, #8]
 800807c:	687a      	ldr	r2, [r7, #4]
 800807e:	6852      	ldr	r2, [r2, #4]
 8008080:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	685b      	ldr	r3, [r3, #4]
 8008086:	687a      	ldr	r2, [r7, #4]
 8008088:	429a      	cmp	r2, r3
 800808a:	d103      	bne.n	8008094 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	689a      	ldr	r2, [r3, #8]
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2200      	movs	r2, #0
 8008098:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	1e5a      	subs	r2, r3, #1
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3714      	adds	r7, #20
 80080ac:	46bd      	mov	sp, r7
 80080ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b2:	4770      	bx	lr

080080b4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b084      	sub	sp, #16
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
 80080bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d10a      	bne.n	80080de <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80080c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080cc:	f383 8811 	msr	BASEPRI, r3
 80080d0:	f3bf 8f6f 	isb	sy
 80080d4:	f3bf 8f4f 	dsb	sy
 80080d8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80080da:	bf00      	nop
 80080dc:	e7fe      	b.n	80080dc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80080de:	f002 f879 	bl	800a1d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681a      	ldr	r2, [r3, #0]
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080ea:	68f9      	ldr	r1, [r7, #12]
 80080ec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80080ee:	fb01 f303 	mul.w	r3, r1, r3
 80080f2:	441a      	add	r2, r3
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	2200      	movs	r2, #0
 80080fc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681a      	ldr	r2, [r3, #0]
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800810e:	3b01      	subs	r3, #1
 8008110:	68f9      	ldr	r1, [r7, #12]
 8008112:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008114:	fb01 f303 	mul.w	r3, r1, r3
 8008118:	441a      	add	r2, r3
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	22ff      	movs	r2, #255	; 0xff
 8008122:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	22ff      	movs	r2, #255	; 0xff
 800812a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d114      	bne.n	800815e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	691b      	ldr	r3, [r3, #16]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d01a      	beq.n	8008172 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	3310      	adds	r3, #16
 8008140:	4618      	mov	r0, r3
 8008142:	f001 f929 	bl	8009398 <xTaskRemoveFromEventList>
 8008146:	4603      	mov	r3, r0
 8008148:	2b00      	cmp	r3, #0
 800814a:	d012      	beq.n	8008172 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800814c:	4b0c      	ldr	r3, [pc, #48]	; (8008180 <xQueueGenericReset+0xcc>)
 800814e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008152:	601a      	str	r2, [r3, #0]
 8008154:	f3bf 8f4f 	dsb	sy
 8008158:	f3bf 8f6f 	isb	sy
 800815c:	e009      	b.n	8008172 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	3310      	adds	r3, #16
 8008162:	4618      	mov	r0, r3
 8008164:	f7ff fef2 	bl	8007f4c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	3324      	adds	r3, #36	; 0x24
 800816c:	4618      	mov	r0, r3
 800816e:	f7ff feed 	bl	8007f4c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008172:	f002 f85f 	bl	800a234 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008176:	2301      	movs	r3, #1
}
 8008178:	4618      	mov	r0, r3
 800817a:	3710      	adds	r7, #16
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}
 8008180:	e000ed04 	.word	0xe000ed04

08008184 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008184:	b580      	push	{r7, lr}
 8008186:	b08e      	sub	sp, #56	; 0x38
 8008188:	af02      	add	r7, sp, #8
 800818a:	60f8      	str	r0, [r7, #12]
 800818c:	60b9      	str	r1, [r7, #8]
 800818e:	607a      	str	r2, [r7, #4]
 8008190:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d10a      	bne.n	80081ae <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800819c:	f383 8811 	msr	BASEPRI, r3
 80081a0:	f3bf 8f6f 	isb	sy
 80081a4:	f3bf 8f4f 	dsb	sy
 80081a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80081aa:	bf00      	nop
 80081ac:	e7fe      	b.n	80081ac <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d10a      	bne.n	80081ca <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80081b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b8:	f383 8811 	msr	BASEPRI, r3
 80081bc:	f3bf 8f6f 	isb	sy
 80081c0:	f3bf 8f4f 	dsb	sy
 80081c4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80081c6:	bf00      	nop
 80081c8:	e7fe      	b.n	80081c8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d002      	beq.n	80081d6 <xQueueGenericCreateStatic+0x52>
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d001      	beq.n	80081da <xQueueGenericCreateStatic+0x56>
 80081d6:	2301      	movs	r3, #1
 80081d8:	e000      	b.n	80081dc <xQueueGenericCreateStatic+0x58>
 80081da:	2300      	movs	r3, #0
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d10a      	bne.n	80081f6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80081e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e4:	f383 8811 	msr	BASEPRI, r3
 80081e8:	f3bf 8f6f 	isb	sy
 80081ec:	f3bf 8f4f 	dsb	sy
 80081f0:	623b      	str	r3, [r7, #32]
}
 80081f2:	bf00      	nop
 80081f4:	e7fe      	b.n	80081f4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d102      	bne.n	8008202 <xQueueGenericCreateStatic+0x7e>
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d101      	bne.n	8008206 <xQueueGenericCreateStatic+0x82>
 8008202:	2301      	movs	r3, #1
 8008204:	e000      	b.n	8008208 <xQueueGenericCreateStatic+0x84>
 8008206:	2300      	movs	r3, #0
 8008208:	2b00      	cmp	r3, #0
 800820a:	d10a      	bne.n	8008222 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800820c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008210:	f383 8811 	msr	BASEPRI, r3
 8008214:	f3bf 8f6f 	isb	sy
 8008218:	f3bf 8f4f 	dsb	sy
 800821c:	61fb      	str	r3, [r7, #28]
}
 800821e:	bf00      	nop
 8008220:	e7fe      	b.n	8008220 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008222:	2350      	movs	r3, #80	; 0x50
 8008224:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	2b50      	cmp	r3, #80	; 0x50
 800822a:	d00a      	beq.n	8008242 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800822c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008230:	f383 8811 	msr	BASEPRI, r3
 8008234:	f3bf 8f6f 	isb	sy
 8008238:	f3bf 8f4f 	dsb	sy
 800823c:	61bb      	str	r3, [r7, #24]
}
 800823e:	bf00      	nop
 8008240:	e7fe      	b.n	8008240 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008242:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800824a:	2b00      	cmp	r3, #0
 800824c:	d00d      	beq.n	800826a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800824e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008250:	2201      	movs	r2, #1
 8008252:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008256:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800825a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800825c:	9300      	str	r3, [sp, #0]
 800825e:	4613      	mov	r3, r2
 8008260:	687a      	ldr	r2, [r7, #4]
 8008262:	68b9      	ldr	r1, [r7, #8]
 8008264:	68f8      	ldr	r0, [r7, #12]
 8008266:	f000 f805 	bl	8008274 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800826a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800826c:	4618      	mov	r0, r3
 800826e:	3730      	adds	r7, #48	; 0x30
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}

08008274 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b084      	sub	sp, #16
 8008278:	af00      	add	r7, sp, #0
 800827a:	60f8      	str	r0, [r7, #12]
 800827c:	60b9      	str	r1, [r7, #8]
 800827e:	607a      	str	r2, [r7, #4]
 8008280:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d103      	bne.n	8008290 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008288:	69bb      	ldr	r3, [r7, #24]
 800828a:	69ba      	ldr	r2, [r7, #24]
 800828c:	601a      	str	r2, [r3, #0]
 800828e:	e002      	b.n	8008296 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008290:	69bb      	ldr	r3, [r7, #24]
 8008292:	687a      	ldr	r2, [r7, #4]
 8008294:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008296:	69bb      	ldr	r3, [r7, #24]
 8008298:	68fa      	ldr	r2, [r7, #12]
 800829a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800829c:	69bb      	ldr	r3, [r7, #24]
 800829e:	68ba      	ldr	r2, [r7, #8]
 80082a0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80082a2:	2101      	movs	r1, #1
 80082a4:	69b8      	ldr	r0, [r7, #24]
 80082a6:	f7ff ff05 	bl	80080b4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80082aa:	69bb      	ldr	r3, [r7, #24]
 80082ac:	78fa      	ldrb	r2, [r7, #3]
 80082ae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80082b2:	bf00      	nop
 80082b4:	3710      	adds	r7, #16
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}
	...

080082bc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b08e      	sub	sp, #56	; 0x38
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	60f8      	str	r0, [r7, #12]
 80082c4:	60b9      	str	r1, [r7, #8]
 80082c6:	607a      	str	r2, [r7, #4]
 80082c8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80082ca:	2300      	movs	r3, #0
 80082cc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80082d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d10a      	bne.n	80082ee <xQueueGenericSend+0x32>
	__asm volatile
 80082d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082dc:	f383 8811 	msr	BASEPRI, r3
 80082e0:	f3bf 8f6f 	isb	sy
 80082e4:	f3bf 8f4f 	dsb	sy
 80082e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80082ea:	bf00      	nop
 80082ec:	e7fe      	b.n	80082ec <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d103      	bne.n	80082fc <xQueueGenericSend+0x40>
 80082f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d101      	bne.n	8008300 <xQueueGenericSend+0x44>
 80082fc:	2301      	movs	r3, #1
 80082fe:	e000      	b.n	8008302 <xQueueGenericSend+0x46>
 8008300:	2300      	movs	r3, #0
 8008302:	2b00      	cmp	r3, #0
 8008304:	d10a      	bne.n	800831c <xQueueGenericSend+0x60>
	__asm volatile
 8008306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800830a:	f383 8811 	msr	BASEPRI, r3
 800830e:	f3bf 8f6f 	isb	sy
 8008312:	f3bf 8f4f 	dsb	sy
 8008316:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008318:	bf00      	nop
 800831a:	e7fe      	b.n	800831a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	2b02      	cmp	r3, #2
 8008320:	d103      	bne.n	800832a <xQueueGenericSend+0x6e>
 8008322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008326:	2b01      	cmp	r3, #1
 8008328:	d101      	bne.n	800832e <xQueueGenericSend+0x72>
 800832a:	2301      	movs	r3, #1
 800832c:	e000      	b.n	8008330 <xQueueGenericSend+0x74>
 800832e:	2300      	movs	r3, #0
 8008330:	2b00      	cmp	r3, #0
 8008332:	d10a      	bne.n	800834a <xQueueGenericSend+0x8e>
	__asm volatile
 8008334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008338:	f383 8811 	msr	BASEPRI, r3
 800833c:	f3bf 8f6f 	isb	sy
 8008340:	f3bf 8f4f 	dsb	sy
 8008344:	623b      	str	r3, [r7, #32]
}
 8008346:	bf00      	nop
 8008348:	e7fe      	b.n	8008348 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800834a:	f001 f9e7 	bl	800971c <xTaskGetSchedulerState>
 800834e:	4603      	mov	r3, r0
 8008350:	2b00      	cmp	r3, #0
 8008352:	d102      	bne.n	800835a <xQueueGenericSend+0x9e>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d101      	bne.n	800835e <xQueueGenericSend+0xa2>
 800835a:	2301      	movs	r3, #1
 800835c:	e000      	b.n	8008360 <xQueueGenericSend+0xa4>
 800835e:	2300      	movs	r3, #0
 8008360:	2b00      	cmp	r3, #0
 8008362:	d10a      	bne.n	800837a <xQueueGenericSend+0xbe>
	__asm volatile
 8008364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008368:	f383 8811 	msr	BASEPRI, r3
 800836c:	f3bf 8f6f 	isb	sy
 8008370:	f3bf 8f4f 	dsb	sy
 8008374:	61fb      	str	r3, [r7, #28]
}
 8008376:	bf00      	nop
 8008378:	e7fe      	b.n	8008378 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800837a:	f001 ff2b 	bl	800a1d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800837e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008380:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008386:	429a      	cmp	r2, r3
 8008388:	d302      	bcc.n	8008390 <xQueueGenericSend+0xd4>
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	2b02      	cmp	r3, #2
 800838e:	d129      	bne.n	80083e4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008390:	683a      	ldr	r2, [r7, #0]
 8008392:	68b9      	ldr	r1, [r7, #8]
 8008394:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008396:	f000 fa0b 	bl	80087b0 <prvCopyDataToQueue>
 800839a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800839c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800839e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d010      	beq.n	80083c6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80083a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083a6:	3324      	adds	r3, #36	; 0x24
 80083a8:	4618      	mov	r0, r3
 80083aa:	f000 fff5 	bl	8009398 <xTaskRemoveFromEventList>
 80083ae:	4603      	mov	r3, r0
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d013      	beq.n	80083dc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80083b4:	4b3f      	ldr	r3, [pc, #252]	; (80084b4 <xQueueGenericSend+0x1f8>)
 80083b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083ba:	601a      	str	r2, [r3, #0]
 80083bc:	f3bf 8f4f 	dsb	sy
 80083c0:	f3bf 8f6f 	isb	sy
 80083c4:	e00a      	b.n	80083dc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80083c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d007      	beq.n	80083dc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80083cc:	4b39      	ldr	r3, [pc, #228]	; (80084b4 <xQueueGenericSend+0x1f8>)
 80083ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083d2:	601a      	str	r2, [r3, #0]
 80083d4:	f3bf 8f4f 	dsb	sy
 80083d8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80083dc:	f001 ff2a 	bl	800a234 <vPortExitCritical>
				return pdPASS;
 80083e0:	2301      	movs	r3, #1
 80083e2:	e063      	b.n	80084ac <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d103      	bne.n	80083f2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80083ea:	f001 ff23 	bl	800a234 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80083ee:	2300      	movs	r3, #0
 80083f0:	e05c      	b.n	80084ac <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80083f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d106      	bne.n	8008406 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80083f8:	f107 0314 	add.w	r3, r7, #20
 80083fc:	4618      	mov	r0, r3
 80083fe:	f001 f82f 	bl	8009460 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008402:	2301      	movs	r3, #1
 8008404:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008406:	f001 ff15 	bl	800a234 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800840a:	f000 fd9b 	bl	8008f44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800840e:	f001 fee1 	bl	800a1d4 <vPortEnterCritical>
 8008412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008414:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008418:	b25b      	sxtb	r3, r3
 800841a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800841e:	d103      	bne.n	8008428 <xQueueGenericSend+0x16c>
 8008420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008422:	2200      	movs	r2, #0
 8008424:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800842a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800842e:	b25b      	sxtb	r3, r3
 8008430:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008434:	d103      	bne.n	800843e <xQueueGenericSend+0x182>
 8008436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008438:	2200      	movs	r2, #0
 800843a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800843e:	f001 fef9 	bl	800a234 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008442:	1d3a      	adds	r2, r7, #4
 8008444:	f107 0314 	add.w	r3, r7, #20
 8008448:	4611      	mov	r1, r2
 800844a:	4618      	mov	r0, r3
 800844c:	f001 f81e 	bl	800948c <xTaskCheckForTimeOut>
 8008450:	4603      	mov	r3, r0
 8008452:	2b00      	cmp	r3, #0
 8008454:	d124      	bne.n	80084a0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008456:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008458:	f000 faa2 	bl	80089a0 <prvIsQueueFull>
 800845c:	4603      	mov	r3, r0
 800845e:	2b00      	cmp	r3, #0
 8008460:	d018      	beq.n	8008494 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008464:	3310      	adds	r3, #16
 8008466:	687a      	ldr	r2, [r7, #4]
 8008468:	4611      	mov	r1, r2
 800846a:	4618      	mov	r0, r3
 800846c:	f000 ff44 	bl	80092f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008470:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008472:	f000 fa2d 	bl	80088d0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008476:	f000 fd73 	bl	8008f60 <xTaskResumeAll>
 800847a:	4603      	mov	r3, r0
 800847c:	2b00      	cmp	r3, #0
 800847e:	f47f af7c 	bne.w	800837a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008482:	4b0c      	ldr	r3, [pc, #48]	; (80084b4 <xQueueGenericSend+0x1f8>)
 8008484:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008488:	601a      	str	r2, [r3, #0]
 800848a:	f3bf 8f4f 	dsb	sy
 800848e:	f3bf 8f6f 	isb	sy
 8008492:	e772      	b.n	800837a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008494:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008496:	f000 fa1b 	bl	80088d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800849a:	f000 fd61 	bl	8008f60 <xTaskResumeAll>
 800849e:	e76c      	b.n	800837a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80084a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80084a2:	f000 fa15 	bl	80088d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80084a6:	f000 fd5b 	bl	8008f60 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80084aa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3738      	adds	r7, #56	; 0x38
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}
 80084b4:	e000ed04 	.word	0xe000ed04

080084b8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b090      	sub	sp, #64	; 0x40
 80084bc:	af00      	add	r7, sp, #0
 80084be:	60f8      	str	r0, [r7, #12]
 80084c0:	60b9      	str	r1, [r7, #8]
 80084c2:	607a      	str	r2, [r7, #4]
 80084c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80084ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d10a      	bne.n	80084e6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80084d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d4:	f383 8811 	msr	BASEPRI, r3
 80084d8:	f3bf 8f6f 	isb	sy
 80084dc:	f3bf 8f4f 	dsb	sy
 80084e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80084e2:	bf00      	nop
 80084e4:	e7fe      	b.n	80084e4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d103      	bne.n	80084f4 <xQueueGenericSendFromISR+0x3c>
 80084ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d101      	bne.n	80084f8 <xQueueGenericSendFromISR+0x40>
 80084f4:	2301      	movs	r3, #1
 80084f6:	e000      	b.n	80084fa <xQueueGenericSendFromISR+0x42>
 80084f8:	2300      	movs	r3, #0
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d10a      	bne.n	8008514 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80084fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008502:	f383 8811 	msr	BASEPRI, r3
 8008506:	f3bf 8f6f 	isb	sy
 800850a:	f3bf 8f4f 	dsb	sy
 800850e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008510:	bf00      	nop
 8008512:	e7fe      	b.n	8008512 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	2b02      	cmp	r3, #2
 8008518:	d103      	bne.n	8008522 <xQueueGenericSendFromISR+0x6a>
 800851a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800851c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800851e:	2b01      	cmp	r3, #1
 8008520:	d101      	bne.n	8008526 <xQueueGenericSendFromISR+0x6e>
 8008522:	2301      	movs	r3, #1
 8008524:	e000      	b.n	8008528 <xQueueGenericSendFromISR+0x70>
 8008526:	2300      	movs	r3, #0
 8008528:	2b00      	cmp	r3, #0
 800852a:	d10a      	bne.n	8008542 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800852c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008530:	f383 8811 	msr	BASEPRI, r3
 8008534:	f3bf 8f6f 	isb	sy
 8008538:	f3bf 8f4f 	dsb	sy
 800853c:	623b      	str	r3, [r7, #32]
}
 800853e:	bf00      	nop
 8008540:	e7fe      	b.n	8008540 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008542:	f001 ff29 	bl	800a398 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008546:	f3ef 8211 	mrs	r2, BASEPRI
 800854a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800854e:	f383 8811 	msr	BASEPRI, r3
 8008552:	f3bf 8f6f 	isb	sy
 8008556:	f3bf 8f4f 	dsb	sy
 800855a:	61fa      	str	r2, [r7, #28]
 800855c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800855e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008560:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008564:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800856a:	429a      	cmp	r2, r3
 800856c:	d302      	bcc.n	8008574 <xQueueGenericSendFromISR+0xbc>
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	2b02      	cmp	r3, #2
 8008572:	d12f      	bne.n	80085d4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008576:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800857a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800857e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008582:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008584:	683a      	ldr	r2, [r7, #0]
 8008586:	68b9      	ldr	r1, [r7, #8]
 8008588:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800858a:	f000 f911 	bl	80087b0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800858e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008592:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008596:	d112      	bne.n	80085be <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800859a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800859c:	2b00      	cmp	r3, #0
 800859e:	d016      	beq.n	80085ce <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80085a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085a2:	3324      	adds	r3, #36	; 0x24
 80085a4:	4618      	mov	r0, r3
 80085a6:	f000 fef7 	bl	8009398 <xTaskRemoveFromEventList>
 80085aa:	4603      	mov	r3, r0
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d00e      	beq.n	80085ce <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d00b      	beq.n	80085ce <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2201      	movs	r2, #1
 80085ba:	601a      	str	r2, [r3, #0]
 80085bc:	e007      	b.n	80085ce <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80085be:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80085c2:	3301      	adds	r3, #1
 80085c4:	b2db      	uxtb	r3, r3
 80085c6:	b25a      	sxtb	r2, r3
 80085c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80085ce:	2301      	movs	r3, #1
 80085d0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80085d2:	e001      	b.n	80085d8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80085d4:	2300      	movs	r3, #0
 80085d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085da:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80085dc:	697b      	ldr	r3, [r7, #20]
 80085de:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80085e2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80085e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3740      	adds	r7, #64	; 0x40
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}
	...

080085f0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b08c      	sub	sp, #48	; 0x30
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	60f8      	str	r0, [r7, #12]
 80085f8:	60b9      	str	r1, [r7, #8]
 80085fa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80085fc:	2300      	movs	r3, #0
 80085fe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008606:	2b00      	cmp	r3, #0
 8008608:	d10a      	bne.n	8008620 <xQueueReceive+0x30>
	__asm volatile
 800860a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800860e:	f383 8811 	msr	BASEPRI, r3
 8008612:	f3bf 8f6f 	isb	sy
 8008616:	f3bf 8f4f 	dsb	sy
 800861a:	623b      	str	r3, [r7, #32]
}
 800861c:	bf00      	nop
 800861e:	e7fe      	b.n	800861e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d103      	bne.n	800862e <xQueueReceive+0x3e>
 8008626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800862a:	2b00      	cmp	r3, #0
 800862c:	d101      	bne.n	8008632 <xQueueReceive+0x42>
 800862e:	2301      	movs	r3, #1
 8008630:	e000      	b.n	8008634 <xQueueReceive+0x44>
 8008632:	2300      	movs	r3, #0
 8008634:	2b00      	cmp	r3, #0
 8008636:	d10a      	bne.n	800864e <xQueueReceive+0x5e>
	__asm volatile
 8008638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800863c:	f383 8811 	msr	BASEPRI, r3
 8008640:	f3bf 8f6f 	isb	sy
 8008644:	f3bf 8f4f 	dsb	sy
 8008648:	61fb      	str	r3, [r7, #28]
}
 800864a:	bf00      	nop
 800864c:	e7fe      	b.n	800864c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800864e:	f001 f865 	bl	800971c <xTaskGetSchedulerState>
 8008652:	4603      	mov	r3, r0
 8008654:	2b00      	cmp	r3, #0
 8008656:	d102      	bne.n	800865e <xQueueReceive+0x6e>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d101      	bne.n	8008662 <xQueueReceive+0x72>
 800865e:	2301      	movs	r3, #1
 8008660:	e000      	b.n	8008664 <xQueueReceive+0x74>
 8008662:	2300      	movs	r3, #0
 8008664:	2b00      	cmp	r3, #0
 8008666:	d10a      	bne.n	800867e <xQueueReceive+0x8e>
	__asm volatile
 8008668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800866c:	f383 8811 	msr	BASEPRI, r3
 8008670:	f3bf 8f6f 	isb	sy
 8008674:	f3bf 8f4f 	dsb	sy
 8008678:	61bb      	str	r3, [r7, #24]
}
 800867a:	bf00      	nop
 800867c:	e7fe      	b.n	800867c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800867e:	f001 fda9 	bl	800a1d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008686:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800868a:	2b00      	cmp	r3, #0
 800868c:	d01f      	beq.n	80086ce <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800868e:	68b9      	ldr	r1, [r7, #8]
 8008690:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008692:	f000 f8f7 	bl	8008884 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008698:	1e5a      	subs	r2, r3, #1
 800869a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800869c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800869e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086a0:	691b      	ldr	r3, [r3, #16]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d00f      	beq.n	80086c6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80086a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086a8:	3310      	adds	r3, #16
 80086aa:	4618      	mov	r0, r3
 80086ac:	f000 fe74 	bl	8009398 <xTaskRemoveFromEventList>
 80086b0:	4603      	mov	r3, r0
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d007      	beq.n	80086c6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80086b6:	4b3d      	ldr	r3, [pc, #244]	; (80087ac <xQueueReceive+0x1bc>)
 80086b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086bc:	601a      	str	r2, [r3, #0]
 80086be:	f3bf 8f4f 	dsb	sy
 80086c2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80086c6:	f001 fdb5 	bl	800a234 <vPortExitCritical>
				return pdPASS;
 80086ca:	2301      	movs	r3, #1
 80086cc:	e069      	b.n	80087a2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d103      	bne.n	80086dc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80086d4:	f001 fdae 	bl	800a234 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80086d8:	2300      	movs	r3, #0
 80086da:	e062      	b.n	80087a2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80086dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d106      	bne.n	80086f0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80086e2:	f107 0310 	add.w	r3, r7, #16
 80086e6:	4618      	mov	r0, r3
 80086e8:	f000 feba 	bl	8009460 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80086ec:	2301      	movs	r3, #1
 80086ee:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80086f0:	f001 fda0 	bl	800a234 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80086f4:	f000 fc26 	bl	8008f44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80086f8:	f001 fd6c 	bl	800a1d4 <vPortEnterCritical>
 80086fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008702:	b25b      	sxtb	r3, r3
 8008704:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008708:	d103      	bne.n	8008712 <xQueueReceive+0x122>
 800870a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800870c:	2200      	movs	r2, #0
 800870e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008714:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008718:	b25b      	sxtb	r3, r3
 800871a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800871e:	d103      	bne.n	8008728 <xQueueReceive+0x138>
 8008720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008722:	2200      	movs	r2, #0
 8008724:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008728:	f001 fd84 	bl	800a234 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800872c:	1d3a      	adds	r2, r7, #4
 800872e:	f107 0310 	add.w	r3, r7, #16
 8008732:	4611      	mov	r1, r2
 8008734:	4618      	mov	r0, r3
 8008736:	f000 fea9 	bl	800948c <xTaskCheckForTimeOut>
 800873a:	4603      	mov	r3, r0
 800873c:	2b00      	cmp	r3, #0
 800873e:	d123      	bne.n	8008788 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008740:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008742:	f000 f917 	bl	8008974 <prvIsQueueEmpty>
 8008746:	4603      	mov	r3, r0
 8008748:	2b00      	cmp	r3, #0
 800874a:	d017      	beq.n	800877c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800874c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800874e:	3324      	adds	r3, #36	; 0x24
 8008750:	687a      	ldr	r2, [r7, #4]
 8008752:	4611      	mov	r1, r2
 8008754:	4618      	mov	r0, r3
 8008756:	f000 fdcf 	bl	80092f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800875a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800875c:	f000 f8b8 	bl	80088d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008760:	f000 fbfe 	bl	8008f60 <xTaskResumeAll>
 8008764:	4603      	mov	r3, r0
 8008766:	2b00      	cmp	r3, #0
 8008768:	d189      	bne.n	800867e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800876a:	4b10      	ldr	r3, [pc, #64]	; (80087ac <xQueueReceive+0x1bc>)
 800876c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008770:	601a      	str	r2, [r3, #0]
 8008772:	f3bf 8f4f 	dsb	sy
 8008776:	f3bf 8f6f 	isb	sy
 800877a:	e780      	b.n	800867e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800877c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800877e:	f000 f8a7 	bl	80088d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008782:	f000 fbed 	bl	8008f60 <xTaskResumeAll>
 8008786:	e77a      	b.n	800867e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008788:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800878a:	f000 f8a1 	bl	80088d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800878e:	f000 fbe7 	bl	8008f60 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008792:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008794:	f000 f8ee 	bl	8008974 <prvIsQueueEmpty>
 8008798:	4603      	mov	r3, r0
 800879a:	2b00      	cmp	r3, #0
 800879c:	f43f af6f 	beq.w	800867e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80087a0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3730      	adds	r7, #48	; 0x30
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}
 80087aa:	bf00      	nop
 80087ac:	e000ed04 	.word	0xe000ed04

080087b0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b086      	sub	sp, #24
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	60f8      	str	r0, [r7, #12]
 80087b8:	60b9      	str	r1, [r7, #8]
 80087ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80087bc:	2300      	movs	r3, #0
 80087be:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087c4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d10d      	bne.n	80087ea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d14d      	bne.n	8008872 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	689b      	ldr	r3, [r3, #8]
 80087da:	4618      	mov	r0, r3
 80087dc:	f000 ffbc 	bl	8009758 <xTaskPriorityDisinherit>
 80087e0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	2200      	movs	r2, #0
 80087e6:	609a      	str	r2, [r3, #8]
 80087e8:	e043      	b.n	8008872 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d119      	bne.n	8008824 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	6858      	ldr	r0, [r3, #4]
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087f8:	461a      	mov	r2, r3
 80087fa:	68b9      	ldr	r1, [r7, #8]
 80087fc:	f002 fe34 	bl	800b468 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	685a      	ldr	r2, [r3, #4]
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008808:	441a      	add	r2, r3
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	685a      	ldr	r2, [r3, #4]
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	689b      	ldr	r3, [r3, #8]
 8008816:	429a      	cmp	r2, r3
 8008818:	d32b      	bcc.n	8008872 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681a      	ldr	r2, [r3, #0]
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	605a      	str	r2, [r3, #4]
 8008822:	e026      	b.n	8008872 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	68d8      	ldr	r0, [r3, #12]
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800882c:	461a      	mov	r2, r3
 800882e:	68b9      	ldr	r1, [r7, #8]
 8008830:	f002 fe1a 	bl	800b468 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	68da      	ldr	r2, [r3, #12]
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800883c:	425b      	negs	r3, r3
 800883e:	441a      	add	r2, r3
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	68da      	ldr	r2, [r3, #12]
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	429a      	cmp	r2, r3
 800884e:	d207      	bcs.n	8008860 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	689a      	ldr	r2, [r3, #8]
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008858:	425b      	negs	r3, r3
 800885a:	441a      	add	r2, r3
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2b02      	cmp	r3, #2
 8008864:	d105      	bne.n	8008872 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d002      	beq.n	8008872 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800886c:	693b      	ldr	r3, [r7, #16]
 800886e:	3b01      	subs	r3, #1
 8008870:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	1c5a      	adds	r2, r3, #1
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800887a:	697b      	ldr	r3, [r7, #20]
}
 800887c:	4618      	mov	r0, r3
 800887e:	3718      	adds	r7, #24
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}

08008884 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b082      	sub	sp, #8
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
 800888c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008892:	2b00      	cmp	r3, #0
 8008894:	d018      	beq.n	80088c8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	68da      	ldr	r2, [r3, #12]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800889e:	441a      	add	r2, r3
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	68da      	ldr	r2, [r3, #12]
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	689b      	ldr	r3, [r3, #8]
 80088ac:	429a      	cmp	r2, r3
 80088ae:	d303      	bcc.n	80088b8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681a      	ldr	r2, [r3, #0]
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	68d9      	ldr	r1, [r3, #12]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088c0:	461a      	mov	r2, r3
 80088c2:	6838      	ldr	r0, [r7, #0]
 80088c4:	f002 fdd0 	bl	800b468 <memcpy>
	}
}
 80088c8:	bf00      	nop
 80088ca:	3708      	adds	r7, #8
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}

080088d0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b084      	sub	sp, #16
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80088d8:	f001 fc7c 	bl	800a1d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80088e2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80088e4:	e011      	b.n	800890a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d012      	beq.n	8008914 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	3324      	adds	r3, #36	; 0x24
 80088f2:	4618      	mov	r0, r3
 80088f4:	f000 fd50 	bl	8009398 <xTaskRemoveFromEventList>
 80088f8:	4603      	mov	r3, r0
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d001      	beq.n	8008902 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80088fe:	f000 fe27 	bl	8009550 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008902:	7bfb      	ldrb	r3, [r7, #15]
 8008904:	3b01      	subs	r3, #1
 8008906:	b2db      	uxtb	r3, r3
 8008908:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800890a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800890e:	2b00      	cmp	r3, #0
 8008910:	dce9      	bgt.n	80088e6 <prvUnlockQueue+0x16>
 8008912:	e000      	b.n	8008916 <prvUnlockQueue+0x46>
					break;
 8008914:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	22ff      	movs	r2, #255	; 0xff
 800891a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800891e:	f001 fc89 	bl	800a234 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008922:	f001 fc57 	bl	800a1d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800892c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800892e:	e011      	b.n	8008954 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	691b      	ldr	r3, [r3, #16]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d012      	beq.n	800895e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	3310      	adds	r3, #16
 800893c:	4618      	mov	r0, r3
 800893e:	f000 fd2b 	bl	8009398 <xTaskRemoveFromEventList>
 8008942:	4603      	mov	r3, r0
 8008944:	2b00      	cmp	r3, #0
 8008946:	d001      	beq.n	800894c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008948:	f000 fe02 	bl	8009550 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800894c:	7bbb      	ldrb	r3, [r7, #14]
 800894e:	3b01      	subs	r3, #1
 8008950:	b2db      	uxtb	r3, r3
 8008952:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008954:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008958:	2b00      	cmp	r3, #0
 800895a:	dce9      	bgt.n	8008930 <prvUnlockQueue+0x60>
 800895c:	e000      	b.n	8008960 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800895e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	22ff      	movs	r2, #255	; 0xff
 8008964:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008968:	f001 fc64 	bl	800a234 <vPortExitCritical>
}
 800896c:	bf00      	nop
 800896e:	3710      	adds	r7, #16
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}

08008974 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b084      	sub	sp, #16
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800897c:	f001 fc2a 	bl	800a1d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008984:	2b00      	cmp	r3, #0
 8008986:	d102      	bne.n	800898e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008988:	2301      	movs	r3, #1
 800898a:	60fb      	str	r3, [r7, #12]
 800898c:	e001      	b.n	8008992 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800898e:	2300      	movs	r3, #0
 8008990:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008992:	f001 fc4f 	bl	800a234 <vPortExitCritical>

	return xReturn;
 8008996:	68fb      	ldr	r3, [r7, #12]
}
 8008998:	4618      	mov	r0, r3
 800899a:	3710      	adds	r7, #16
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}

080089a0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b084      	sub	sp, #16
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80089a8:	f001 fc14 	bl	800a1d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089b4:	429a      	cmp	r2, r3
 80089b6:	d102      	bne.n	80089be <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80089b8:	2301      	movs	r3, #1
 80089ba:	60fb      	str	r3, [r7, #12]
 80089bc:	e001      	b.n	80089c2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80089be:	2300      	movs	r3, #0
 80089c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80089c2:	f001 fc37 	bl	800a234 <vPortExitCritical>

	return xReturn;
 80089c6:	68fb      	ldr	r3, [r7, #12]
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	3710      	adds	r7, #16
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}

080089d0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80089d0:	b480      	push	{r7}
 80089d2:	b085      	sub	sp, #20
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80089da:	2300      	movs	r3, #0
 80089dc:	60fb      	str	r3, [r7, #12]
 80089de:	e014      	b.n	8008a0a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80089e0:	4a0f      	ldr	r2, [pc, #60]	; (8008a20 <vQueueAddToRegistry+0x50>)
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d10b      	bne.n	8008a04 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80089ec:	490c      	ldr	r1, [pc, #48]	; (8008a20 <vQueueAddToRegistry+0x50>)
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	683a      	ldr	r2, [r7, #0]
 80089f2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80089f6:	4a0a      	ldr	r2, [pc, #40]	; (8008a20 <vQueueAddToRegistry+0x50>)
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	00db      	lsls	r3, r3, #3
 80089fc:	4413      	add	r3, r2
 80089fe:	687a      	ldr	r2, [r7, #4]
 8008a00:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008a02:	e006      	b.n	8008a12 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	3301      	adds	r3, #1
 8008a08:	60fb      	str	r3, [r7, #12]
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	2b07      	cmp	r3, #7
 8008a0e:	d9e7      	bls.n	80089e0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008a10:	bf00      	nop
 8008a12:	bf00      	nop
 8008a14:	3714      	adds	r7, #20
 8008a16:	46bd      	mov	sp, r7
 8008a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1c:	4770      	bx	lr
 8008a1e:	bf00      	nop
 8008a20:	200009bc 	.word	0x200009bc

08008a24 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b086      	sub	sp, #24
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	60f8      	str	r0, [r7, #12]
 8008a2c:	60b9      	str	r1, [r7, #8]
 8008a2e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008a34:	f001 fbce 	bl	800a1d4 <vPortEnterCritical>
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a3e:	b25b      	sxtb	r3, r3
 8008a40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a44:	d103      	bne.n	8008a4e <vQueueWaitForMessageRestricted+0x2a>
 8008a46:	697b      	ldr	r3, [r7, #20]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a54:	b25b      	sxtb	r3, r3
 8008a56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a5a:	d103      	bne.n	8008a64 <vQueueWaitForMessageRestricted+0x40>
 8008a5c:	697b      	ldr	r3, [r7, #20]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a64:	f001 fbe6 	bl	800a234 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008a68:	697b      	ldr	r3, [r7, #20]
 8008a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d106      	bne.n	8008a7e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	3324      	adds	r3, #36	; 0x24
 8008a74:	687a      	ldr	r2, [r7, #4]
 8008a76:	68b9      	ldr	r1, [r7, #8]
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f000 fc61 	bl	8009340 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008a7e:	6978      	ldr	r0, [r7, #20]
 8008a80:	f7ff ff26 	bl	80088d0 <prvUnlockQueue>
	}
 8008a84:	bf00      	nop
 8008a86:	3718      	adds	r7, #24
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}

08008a8c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b08e      	sub	sp, #56	; 0x38
 8008a90:	af04      	add	r7, sp, #16
 8008a92:	60f8      	str	r0, [r7, #12]
 8008a94:	60b9      	str	r1, [r7, #8]
 8008a96:	607a      	str	r2, [r7, #4]
 8008a98:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d10a      	bne.n	8008ab6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8008aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa4:	f383 8811 	msr	BASEPRI, r3
 8008aa8:	f3bf 8f6f 	isb	sy
 8008aac:	f3bf 8f4f 	dsb	sy
 8008ab0:	623b      	str	r3, [r7, #32]
}
 8008ab2:	bf00      	nop
 8008ab4:	e7fe      	b.n	8008ab4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d10a      	bne.n	8008ad2 <xTaskCreateStatic+0x46>
	__asm volatile
 8008abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac0:	f383 8811 	msr	BASEPRI, r3
 8008ac4:	f3bf 8f6f 	isb	sy
 8008ac8:	f3bf 8f4f 	dsb	sy
 8008acc:	61fb      	str	r3, [r7, #28]
}
 8008ace:	bf00      	nop
 8008ad0:	e7fe      	b.n	8008ad0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008ad2:	23bc      	movs	r3, #188	; 0xbc
 8008ad4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	2bbc      	cmp	r3, #188	; 0xbc
 8008ada:	d00a      	beq.n	8008af2 <xTaskCreateStatic+0x66>
	__asm volatile
 8008adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ae0:	f383 8811 	msr	BASEPRI, r3
 8008ae4:	f3bf 8f6f 	isb	sy
 8008ae8:	f3bf 8f4f 	dsb	sy
 8008aec:	61bb      	str	r3, [r7, #24]
}
 8008aee:	bf00      	nop
 8008af0:	e7fe      	b.n	8008af0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008af2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d01e      	beq.n	8008b38 <xTaskCreateStatic+0xac>
 8008afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d01b      	beq.n	8008b38 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b02:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b08:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b0c:	2202      	movs	r2, #2
 8008b0e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008b12:	2300      	movs	r3, #0
 8008b14:	9303      	str	r3, [sp, #12]
 8008b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b18:	9302      	str	r3, [sp, #8]
 8008b1a:	f107 0314 	add.w	r3, r7, #20
 8008b1e:	9301      	str	r3, [sp, #4]
 8008b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b22:	9300      	str	r3, [sp, #0]
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	687a      	ldr	r2, [r7, #4]
 8008b28:	68b9      	ldr	r1, [r7, #8]
 8008b2a:	68f8      	ldr	r0, [r7, #12]
 8008b2c:	f000 f850 	bl	8008bd0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008b30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008b32:	f000 f8f3 	bl	8008d1c <prvAddNewTaskToReadyList>
 8008b36:	e001      	b.n	8008b3c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008b3c:	697b      	ldr	r3, [r7, #20]
	}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3728      	adds	r7, #40	; 0x28
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}

08008b46 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008b46:	b580      	push	{r7, lr}
 8008b48:	b08c      	sub	sp, #48	; 0x30
 8008b4a:	af04      	add	r7, sp, #16
 8008b4c:	60f8      	str	r0, [r7, #12]
 8008b4e:	60b9      	str	r1, [r7, #8]
 8008b50:	603b      	str	r3, [r7, #0]
 8008b52:	4613      	mov	r3, r2
 8008b54:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008b56:	88fb      	ldrh	r3, [r7, #6]
 8008b58:	009b      	lsls	r3, r3, #2
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f001 fc5c 	bl	800a418 <pvPortMalloc>
 8008b60:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008b62:	697b      	ldr	r3, [r7, #20]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d00e      	beq.n	8008b86 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008b68:	20bc      	movs	r0, #188	; 0xbc
 8008b6a:	f001 fc55 	bl	800a418 <pvPortMalloc>
 8008b6e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008b70:	69fb      	ldr	r3, [r7, #28]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d003      	beq.n	8008b7e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008b76:	69fb      	ldr	r3, [r7, #28]
 8008b78:	697a      	ldr	r2, [r7, #20]
 8008b7a:	631a      	str	r2, [r3, #48]	; 0x30
 8008b7c:	e005      	b.n	8008b8a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008b7e:	6978      	ldr	r0, [r7, #20]
 8008b80:	f001 fd16 	bl	800a5b0 <vPortFree>
 8008b84:	e001      	b.n	8008b8a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008b86:	2300      	movs	r3, #0
 8008b88:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008b8a:	69fb      	ldr	r3, [r7, #28]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d017      	beq.n	8008bc0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008b90:	69fb      	ldr	r3, [r7, #28]
 8008b92:	2200      	movs	r2, #0
 8008b94:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008b98:	88fa      	ldrh	r2, [r7, #6]
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	9303      	str	r3, [sp, #12]
 8008b9e:	69fb      	ldr	r3, [r7, #28]
 8008ba0:	9302      	str	r3, [sp, #8]
 8008ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ba4:	9301      	str	r3, [sp, #4]
 8008ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ba8:	9300      	str	r3, [sp, #0]
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	68b9      	ldr	r1, [r7, #8]
 8008bae:	68f8      	ldr	r0, [r7, #12]
 8008bb0:	f000 f80e 	bl	8008bd0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008bb4:	69f8      	ldr	r0, [r7, #28]
 8008bb6:	f000 f8b1 	bl	8008d1c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008bba:	2301      	movs	r3, #1
 8008bbc:	61bb      	str	r3, [r7, #24]
 8008bbe:	e002      	b.n	8008bc6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008bc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008bc4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008bc6:	69bb      	ldr	r3, [r7, #24]
	}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3720      	adds	r7, #32
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}

08008bd0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b088      	sub	sp, #32
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	60f8      	str	r0, [r7, #12]
 8008bd8:	60b9      	str	r1, [r7, #8]
 8008bda:	607a      	str	r2, [r7, #4]
 8008bdc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008be0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	009b      	lsls	r3, r3, #2
 8008be6:	461a      	mov	r2, r3
 8008be8:	21a5      	movs	r1, #165	; 0xa5
 8008bea:	f002 fc4b 	bl	800b484 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bf0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008bf8:	3b01      	subs	r3, #1
 8008bfa:	009b      	lsls	r3, r3, #2
 8008bfc:	4413      	add	r3, r2
 8008bfe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008c00:	69bb      	ldr	r3, [r7, #24]
 8008c02:	f023 0307 	bic.w	r3, r3, #7
 8008c06:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008c08:	69bb      	ldr	r3, [r7, #24]
 8008c0a:	f003 0307 	and.w	r3, r3, #7
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d00a      	beq.n	8008c28 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c16:	f383 8811 	msr	BASEPRI, r3
 8008c1a:	f3bf 8f6f 	isb	sy
 8008c1e:	f3bf 8f4f 	dsb	sy
 8008c22:	617b      	str	r3, [r7, #20]
}
 8008c24:	bf00      	nop
 8008c26:	e7fe      	b.n	8008c26 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d01f      	beq.n	8008c6e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008c2e:	2300      	movs	r3, #0
 8008c30:	61fb      	str	r3, [r7, #28]
 8008c32:	e012      	b.n	8008c5a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008c34:	68ba      	ldr	r2, [r7, #8]
 8008c36:	69fb      	ldr	r3, [r7, #28]
 8008c38:	4413      	add	r3, r2
 8008c3a:	7819      	ldrb	r1, [r3, #0]
 8008c3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c3e:	69fb      	ldr	r3, [r7, #28]
 8008c40:	4413      	add	r3, r2
 8008c42:	3334      	adds	r3, #52	; 0x34
 8008c44:	460a      	mov	r2, r1
 8008c46:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008c48:	68ba      	ldr	r2, [r7, #8]
 8008c4a:	69fb      	ldr	r3, [r7, #28]
 8008c4c:	4413      	add	r3, r2
 8008c4e:	781b      	ldrb	r3, [r3, #0]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d006      	beq.n	8008c62 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008c54:	69fb      	ldr	r3, [r7, #28]
 8008c56:	3301      	adds	r3, #1
 8008c58:	61fb      	str	r3, [r7, #28]
 8008c5a:	69fb      	ldr	r3, [r7, #28]
 8008c5c:	2b0f      	cmp	r3, #15
 8008c5e:	d9e9      	bls.n	8008c34 <prvInitialiseNewTask+0x64>
 8008c60:	e000      	b.n	8008c64 <prvInitialiseNewTask+0x94>
			{
				break;
 8008c62:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c66:	2200      	movs	r2, #0
 8008c68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008c6c:	e003      	b.n	8008c76 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c70:	2200      	movs	r2, #0
 8008c72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c78:	2b37      	cmp	r3, #55	; 0x37
 8008c7a:	d901      	bls.n	8008c80 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008c7c:	2337      	movs	r3, #55	; 0x37
 8008c7e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c84:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c8a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c8e:	2200      	movs	r2, #0
 8008c90:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c94:	3304      	adds	r3, #4
 8008c96:	4618      	mov	r0, r3
 8008c98:	f7ff f978 	bl	8007f8c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c9e:	3318      	adds	r3, #24
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f7ff f973 	bl	8007f8c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ca8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008caa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cb4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cba:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cce:	3354      	adds	r3, #84	; 0x54
 8008cd0:	2260      	movs	r2, #96	; 0x60
 8008cd2:	2100      	movs	r1, #0
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	f002 fbd5 	bl	800b484 <memset>
 8008cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cdc:	4a0c      	ldr	r2, [pc, #48]	; (8008d10 <prvInitialiseNewTask+0x140>)
 8008cde:	659a      	str	r2, [r3, #88]	; 0x58
 8008ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce2:	4a0c      	ldr	r2, [pc, #48]	; (8008d14 <prvInitialiseNewTask+0x144>)
 8008ce4:	65da      	str	r2, [r3, #92]	; 0x5c
 8008ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce8:	4a0b      	ldr	r2, [pc, #44]	; (8008d18 <prvInitialiseNewTask+0x148>)
 8008cea:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008cec:	683a      	ldr	r2, [r7, #0]
 8008cee:	68f9      	ldr	r1, [r7, #12]
 8008cf0:	69b8      	ldr	r0, [r7, #24]
 8008cf2:	f001 f941 	bl	8009f78 <pxPortInitialiseStack>
 8008cf6:	4602      	mov	r2, r0
 8008cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cfa:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d002      	beq.n	8008d08 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d06:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d08:	bf00      	nop
 8008d0a:	3720      	adds	r7, #32
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}
 8008d10:	0800ba9c 	.word	0x0800ba9c
 8008d14:	0800babc 	.word	0x0800babc
 8008d18:	0800ba7c 	.word	0x0800ba7c

08008d1c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b082      	sub	sp, #8
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008d24:	f001 fa56 	bl	800a1d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008d28:	4b2d      	ldr	r3, [pc, #180]	; (8008de0 <prvAddNewTaskToReadyList+0xc4>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	3301      	adds	r3, #1
 8008d2e:	4a2c      	ldr	r2, [pc, #176]	; (8008de0 <prvAddNewTaskToReadyList+0xc4>)
 8008d30:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008d32:	4b2c      	ldr	r3, [pc, #176]	; (8008de4 <prvAddNewTaskToReadyList+0xc8>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d109      	bne.n	8008d4e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008d3a:	4a2a      	ldr	r2, [pc, #168]	; (8008de4 <prvAddNewTaskToReadyList+0xc8>)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008d40:	4b27      	ldr	r3, [pc, #156]	; (8008de0 <prvAddNewTaskToReadyList+0xc4>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	2b01      	cmp	r3, #1
 8008d46:	d110      	bne.n	8008d6a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008d48:	f000 fc26 	bl	8009598 <prvInitialiseTaskLists>
 8008d4c:	e00d      	b.n	8008d6a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008d4e:	4b26      	ldr	r3, [pc, #152]	; (8008de8 <prvAddNewTaskToReadyList+0xcc>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d109      	bne.n	8008d6a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008d56:	4b23      	ldr	r3, [pc, #140]	; (8008de4 <prvAddNewTaskToReadyList+0xc8>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d60:	429a      	cmp	r2, r3
 8008d62:	d802      	bhi.n	8008d6a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008d64:	4a1f      	ldr	r2, [pc, #124]	; (8008de4 <prvAddNewTaskToReadyList+0xc8>)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008d6a:	4b20      	ldr	r3, [pc, #128]	; (8008dec <prvAddNewTaskToReadyList+0xd0>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	3301      	adds	r3, #1
 8008d70:	4a1e      	ldr	r2, [pc, #120]	; (8008dec <prvAddNewTaskToReadyList+0xd0>)
 8008d72:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008d74:	4b1d      	ldr	r3, [pc, #116]	; (8008dec <prvAddNewTaskToReadyList+0xd0>)
 8008d76:	681a      	ldr	r2, [r3, #0]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d80:	4b1b      	ldr	r3, [pc, #108]	; (8008df0 <prvAddNewTaskToReadyList+0xd4>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	429a      	cmp	r2, r3
 8008d86:	d903      	bls.n	8008d90 <prvAddNewTaskToReadyList+0x74>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d8c:	4a18      	ldr	r2, [pc, #96]	; (8008df0 <prvAddNewTaskToReadyList+0xd4>)
 8008d8e:	6013      	str	r3, [r2, #0]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d94:	4613      	mov	r3, r2
 8008d96:	009b      	lsls	r3, r3, #2
 8008d98:	4413      	add	r3, r2
 8008d9a:	009b      	lsls	r3, r3, #2
 8008d9c:	4a15      	ldr	r2, [pc, #84]	; (8008df4 <prvAddNewTaskToReadyList+0xd8>)
 8008d9e:	441a      	add	r2, r3
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	3304      	adds	r3, #4
 8008da4:	4619      	mov	r1, r3
 8008da6:	4610      	mov	r0, r2
 8008da8:	f7ff f8fd 	bl	8007fa6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008dac:	f001 fa42 	bl	800a234 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008db0:	4b0d      	ldr	r3, [pc, #52]	; (8008de8 <prvAddNewTaskToReadyList+0xcc>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d00e      	beq.n	8008dd6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008db8:	4b0a      	ldr	r3, [pc, #40]	; (8008de4 <prvAddNewTaskToReadyList+0xc8>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dc2:	429a      	cmp	r2, r3
 8008dc4:	d207      	bcs.n	8008dd6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008dc6:	4b0c      	ldr	r3, [pc, #48]	; (8008df8 <prvAddNewTaskToReadyList+0xdc>)
 8008dc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dcc:	601a      	str	r2, [r3, #0]
 8008dce:	f3bf 8f4f 	dsb	sy
 8008dd2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008dd6:	bf00      	nop
 8008dd8:	3708      	adds	r7, #8
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}
 8008dde:	bf00      	nop
 8008de0:	20000ed0 	.word	0x20000ed0
 8008de4:	200009fc 	.word	0x200009fc
 8008de8:	20000edc 	.word	0x20000edc
 8008dec:	20000eec 	.word	0x20000eec
 8008df0:	20000ed8 	.word	0x20000ed8
 8008df4:	20000a00 	.word	0x20000a00
 8008df8:	e000ed04 	.word	0xe000ed04

08008dfc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b084      	sub	sp, #16
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008e04:	2300      	movs	r3, #0
 8008e06:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d017      	beq.n	8008e3e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008e0e:	4b13      	ldr	r3, [pc, #76]	; (8008e5c <vTaskDelay+0x60>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d00a      	beq.n	8008e2c <vTaskDelay+0x30>
	__asm volatile
 8008e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e1a:	f383 8811 	msr	BASEPRI, r3
 8008e1e:	f3bf 8f6f 	isb	sy
 8008e22:	f3bf 8f4f 	dsb	sy
 8008e26:	60bb      	str	r3, [r7, #8]
}
 8008e28:	bf00      	nop
 8008e2a:	e7fe      	b.n	8008e2a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008e2c:	f000 f88a 	bl	8008f44 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008e30:	2100      	movs	r1, #0
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f000 fcfe 	bl	8009834 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008e38:	f000 f892 	bl	8008f60 <xTaskResumeAll>
 8008e3c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d107      	bne.n	8008e54 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008e44:	4b06      	ldr	r3, [pc, #24]	; (8008e60 <vTaskDelay+0x64>)
 8008e46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e4a:	601a      	str	r2, [r3, #0]
 8008e4c:	f3bf 8f4f 	dsb	sy
 8008e50:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008e54:	bf00      	nop
 8008e56:	3710      	adds	r7, #16
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd80      	pop	{r7, pc}
 8008e5c:	20000ef8 	.word	0x20000ef8
 8008e60:	e000ed04 	.word	0xe000ed04

08008e64 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b08a      	sub	sp, #40	; 0x28
 8008e68:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008e72:	463a      	mov	r2, r7
 8008e74:	1d39      	adds	r1, r7, #4
 8008e76:	f107 0308 	add.w	r3, r7, #8
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	f7ff f832 	bl	8007ee4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008e80:	6839      	ldr	r1, [r7, #0]
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	68ba      	ldr	r2, [r7, #8]
 8008e86:	9202      	str	r2, [sp, #8]
 8008e88:	9301      	str	r3, [sp, #4]
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	9300      	str	r3, [sp, #0]
 8008e8e:	2300      	movs	r3, #0
 8008e90:	460a      	mov	r2, r1
 8008e92:	4924      	ldr	r1, [pc, #144]	; (8008f24 <vTaskStartScheduler+0xc0>)
 8008e94:	4824      	ldr	r0, [pc, #144]	; (8008f28 <vTaskStartScheduler+0xc4>)
 8008e96:	f7ff fdf9 	bl	8008a8c <xTaskCreateStatic>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	4a23      	ldr	r2, [pc, #140]	; (8008f2c <vTaskStartScheduler+0xc8>)
 8008e9e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008ea0:	4b22      	ldr	r3, [pc, #136]	; (8008f2c <vTaskStartScheduler+0xc8>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d002      	beq.n	8008eae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	617b      	str	r3, [r7, #20]
 8008eac:	e001      	b.n	8008eb2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008eb2:	697b      	ldr	r3, [r7, #20]
 8008eb4:	2b01      	cmp	r3, #1
 8008eb6:	d102      	bne.n	8008ebe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008eb8:	f000 fd10 	bl	80098dc <xTimerCreateTimerTask>
 8008ebc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	2b01      	cmp	r3, #1
 8008ec2:	d11b      	bne.n	8008efc <vTaskStartScheduler+0x98>
	__asm volatile
 8008ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec8:	f383 8811 	msr	BASEPRI, r3
 8008ecc:	f3bf 8f6f 	isb	sy
 8008ed0:	f3bf 8f4f 	dsb	sy
 8008ed4:	613b      	str	r3, [r7, #16]
}
 8008ed6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008ed8:	4b15      	ldr	r3, [pc, #84]	; (8008f30 <vTaskStartScheduler+0xcc>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	3354      	adds	r3, #84	; 0x54
 8008ede:	4a15      	ldr	r2, [pc, #84]	; (8008f34 <vTaskStartScheduler+0xd0>)
 8008ee0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008ee2:	4b15      	ldr	r3, [pc, #84]	; (8008f38 <vTaskStartScheduler+0xd4>)
 8008ee4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008ee8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008eea:	4b14      	ldr	r3, [pc, #80]	; (8008f3c <vTaskStartScheduler+0xd8>)
 8008eec:	2201      	movs	r2, #1
 8008eee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008ef0:	4b13      	ldr	r3, [pc, #76]	; (8008f40 <vTaskStartScheduler+0xdc>)
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008ef6:	f001 f8cb 	bl	800a090 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008efa:	e00e      	b.n	8008f1a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f02:	d10a      	bne.n	8008f1a <vTaskStartScheduler+0xb6>
	__asm volatile
 8008f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f08:	f383 8811 	msr	BASEPRI, r3
 8008f0c:	f3bf 8f6f 	isb	sy
 8008f10:	f3bf 8f4f 	dsb	sy
 8008f14:	60fb      	str	r3, [r7, #12]
}
 8008f16:	bf00      	nop
 8008f18:	e7fe      	b.n	8008f18 <vTaskStartScheduler+0xb4>
}
 8008f1a:	bf00      	nop
 8008f1c:	3718      	adds	r7, #24
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}
 8008f22:	bf00      	nop
 8008f24:	0800b870 	.word	0x0800b870
 8008f28:	08009569 	.word	0x08009569
 8008f2c:	20000ef4 	.word	0x20000ef4
 8008f30:	200009fc 	.word	0x200009fc
 8008f34:	20000100 	.word	0x20000100
 8008f38:	20000ef0 	.word	0x20000ef0
 8008f3c:	20000edc 	.word	0x20000edc
 8008f40:	20000ed4 	.word	0x20000ed4

08008f44 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008f44:	b480      	push	{r7}
 8008f46:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008f48:	4b04      	ldr	r3, [pc, #16]	; (8008f5c <vTaskSuspendAll+0x18>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	3301      	adds	r3, #1
 8008f4e:	4a03      	ldr	r2, [pc, #12]	; (8008f5c <vTaskSuspendAll+0x18>)
 8008f50:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008f52:	bf00      	nop
 8008f54:	46bd      	mov	sp, r7
 8008f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5a:	4770      	bx	lr
 8008f5c:	20000ef8 	.word	0x20000ef8

08008f60 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b084      	sub	sp, #16
 8008f64:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008f66:	2300      	movs	r3, #0
 8008f68:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008f6e:	4b42      	ldr	r3, [pc, #264]	; (8009078 <xTaskResumeAll+0x118>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d10a      	bne.n	8008f8c <xTaskResumeAll+0x2c>
	__asm volatile
 8008f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f7a:	f383 8811 	msr	BASEPRI, r3
 8008f7e:	f3bf 8f6f 	isb	sy
 8008f82:	f3bf 8f4f 	dsb	sy
 8008f86:	603b      	str	r3, [r7, #0]
}
 8008f88:	bf00      	nop
 8008f8a:	e7fe      	b.n	8008f8a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008f8c:	f001 f922 	bl	800a1d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008f90:	4b39      	ldr	r3, [pc, #228]	; (8009078 <xTaskResumeAll+0x118>)
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	3b01      	subs	r3, #1
 8008f96:	4a38      	ldr	r2, [pc, #224]	; (8009078 <xTaskResumeAll+0x118>)
 8008f98:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f9a:	4b37      	ldr	r3, [pc, #220]	; (8009078 <xTaskResumeAll+0x118>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d162      	bne.n	8009068 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008fa2:	4b36      	ldr	r3, [pc, #216]	; (800907c <xTaskResumeAll+0x11c>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d05e      	beq.n	8009068 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008faa:	e02f      	b.n	800900c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fac:	4b34      	ldr	r3, [pc, #208]	; (8009080 <xTaskResumeAll+0x120>)
 8008fae:	68db      	ldr	r3, [r3, #12]
 8008fb0:	68db      	ldr	r3, [r3, #12]
 8008fb2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	3318      	adds	r3, #24
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f7ff f851 	bl	8008060 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	3304      	adds	r3, #4
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	f7ff f84c 	bl	8008060 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fcc:	4b2d      	ldr	r3, [pc, #180]	; (8009084 <xTaskResumeAll+0x124>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	429a      	cmp	r2, r3
 8008fd2:	d903      	bls.n	8008fdc <xTaskResumeAll+0x7c>
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fd8:	4a2a      	ldr	r2, [pc, #168]	; (8009084 <xTaskResumeAll+0x124>)
 8008fda:	6013      	str	r3, [r2, #0]
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fe0:	4613      	mov	r3, r2
 8008fe2:	009b      	lsls	r3, r3, #2
 8008fe4:	4413      	add	r3, r2
 8008fe6:	009b      	lsls	r3, r3, #2
 8008fe8:	4a27      	ldr	r2, [pc, #156]	; (8009088 <xTaskResumeAll+0x128>)
 8008fea:	441a      	add	r2, r3
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	3304      	adds	r3, #4
 8008ff0:	4619      	mov	r1, r3
 8008ff2:	4610      	mov	r0, r2
 8008ff4:	f7fe ffd7 	bl	8007fa6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ffc:	4b23      	ldr	r3, [pc, #140]	; (800908c <xTaskResumeAll+0x12c>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009002:	429a      	cmp	r2, r3
 8009004:	d302      	bcc.n	800900c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009006:	4b22      	ldr	r3, [pc, #136]	; (8009090 <xTaskResumeAll+0x130>)
 8009008:	2201      	movs	r2, #1
 800900a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800900c:	4b1c      	ldr	r3, [pc, #112]	; (8009080 <xTaskResumeAll+0x120>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d1cb      	bne.n	8008fac <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d001      	beq.n	800901e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800901a:	f000 fb5f 	bl	80096dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800901e:	4b1d      	ldr	r3, [pc, #116]	; (8009094 <xTaskResumeAll+0x134>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d010      	beq.n	800904c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800902a:	f000 f847 	bl	80090bc <xTaskIncrementTick>
 800902e:	4603      	mov	r3, r0
 8009030:	2b00      	cmp	r3, #0
 8009032:	d002      	beq.n	800903a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009034:	4b16      	ldr	r3, [pc, #88]	; (8009090 <xTaskResumeAll+0x130>)
 8009036:	2201      	movs	r2, #1
 8009038:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	3b01      	subs	r3, #1
 800903e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d1f1      	bne.n	800902a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009046:	4b13      	ldr	r3, [pc, #76]	; (8009094 <xTaskResumeAll+0x134>)
 8009048:	2200      	movs	r2, #0
 800904a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800904c:	4b10      	ldr	r3, [pc, #64]	; (8009090 <xTaskResumeAll+0x130>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d009      	beq.n	8009068 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009054:	2301      	movs	r3, #1
 8009056:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009058:	4b0f      	ldr	r3, [pc, #60]	; (8009098 <xTaskResumeAll+0x138>)
 800905a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800905e:	601a      	str	r2, [r3, #0]
 8009060:	f3bf 8f4f 	dsb	sy
 8009064:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009068:	f001 f8e4 	bl	800a234 <vPortExitCritical>

	return xAlreadyYielded;
 800906c:	68bb      	ldr	r3, [r7, #8]
}
 800906e:	4618      	mov	r0, r3
 8009070:	3710      	adds	r7, #16
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}
 8009076:	bf00      	nop
 8009078:	20000ef8 	.word	0x20000ef8
 800907c:	20000ed0 	.word	0x20000ed0
 8009080:	20000e90 	.word	0x20000e90
 8009084:	20000ed8 	.word	0x20000ed8
 8009088:	20000a00 	.word	0x20000a00
 800908c:	200009fc 	.word	0x200009fc
 8009090:	20000ee4 	.word	0x20000ee4
 8009094:	20000ee0 	.word	0x20000ee0
 8009098:	e000ed04 	.word	0xe000ed04

0800909c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800909c:	b480      	push	{r7}
 800909e:	b083      	sub	sp, #12
 80090a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80090a2:	4b05      	ldr	r3, [pc, #20]	; (80090b8 <xTaskGetTickCount+0x1c>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80090a8:	687b      	ldr	r3, [r7, #4]
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	370c      	adds	r7, #12
 80090ae:	46bd      	mov	sp, r7
 80090b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b4:	4770      	bx	lr
 80090b6:	bf00      	nop
 80090b8:	20000ed4 	.word	0x20000ed4

080090bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b086      	sub	sp, #24
 80090c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80090c2:	2300      	movs	r3, #0
 80090c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80090c6:	4b4f      	ldr	r3, [pc, #316]	; (8009204 <xTaskIncrementTick+0x148>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	f040 808f 	bne.w	80091ee <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80090d0:	4b4d      	ldr	r3, [pc, #308]	; (8009208 <xTaskIncrementTick+0x14c>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	3301      	adds	r3, #1
 80090d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80090d8:	4a4b      	ldr	r2, [pc, #300]	; (8009208 <xTaskIncrementTick+0x14c>)
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d120      	bne.n	8009126 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80090e4:	4b49      	ldr	r3, [pc, #292]	; (800920c <xTaskIncrementTick+0x150>)
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d00a      	beq.n	8009104 <xTaskIncrementTick+0x48>
	__asm volatile
 80090ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090f2:	f383 8811 	msr	BASEPRI, r3
 80090f6:	f3bf 8f6f 	isb	sy
 80090fa:	f3bf 8f4f 	dsb	sy
 80090fe:	603b      	str	r3, [r7, #0]
}
 8009100:	bf00      	nop
 8009102:	e7fe      	b.n	8009102 <xTaskIncrementTick+0x46>
 8009104:	4b41      	ldr	r3, [pc, #260]	; (800920c <xTaskIncrementTick+0x150>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	60fb      	str	r3, [r7, #12]
 800910a:	4b41      	ldr	r3, [pc, #260]	; (8009210 <xTaskIncrementTick+0x154>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	4a3f      	ldr	r2, [pc, #252]	; (800920c <xTaskIncrementTick+0x150>)
 8009110:	6013      	str	r3, [r2, #0]
 8009112:	4a3f      	ldr	r2, [pc, #252]	; (8009210 <xTaskIncrementTick+0x154>)
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	6013      	str	r3, [r2, #0]
 8009118:	4b3e      	ldr	r3, [pc, #248]	; (8009214 <xTaskIncrementTick+0x158>)
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	3301      	adds	r3, #1
 800911e:	4a3d      	ldr	r2, [pc, #244]	; (8009214 <xTaskIncrementTick+0x158>)
 8009120:	6013      	str	r3, [r2, #0]
 8009122:	f000 fadb 	bl	80096dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009126:	4b3c      	ldr	r3, [pc, #240]	; (8009218 <xTaskIncrementTick+0x15c>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	693a      	ldr	r2, [r7, #16]
 800912c:	429a      	cmp	r2, r3
 800912e:	d349      	bcc.n	80091c4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009130:	4b36      	ldr	r3, [pc, #216]	; (800920c <xTaskIncrementTick+0x150>)
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d104      	bne.n	8009144 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800913a:	4b37      	ldr	r3, [pc, #220]	; (8009218 <xTaskIncrementTick+0x15c>)
 800913c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009140:	601a      	str	r2, [r3, #0]
					break;
 8009142:	e03f      	b.n	80091c4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009144:	4b31      	ldr	r3, [pc, #196]	; (800920c <xTaskIncrementTick+0x150>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	68db      	ldr	r3, [r3, #12]
 800914a:	68db      	ldr	r3, [r3, #12]
 800914c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	685b      	ldr	r3, [r3, #4]
 8009152:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009154:	693a      	ldr	r2, [r7, #16]
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	429a      	cmp	r2, r3
 800915a:	d203      	bcs.n	8009164 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800915c:	4a2e      	ldr	r2, [pc, #184]	; (8009218 <xTaskIncrementTick+0x15c>)
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009162:	e02f      	b.n	80091c4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	3304      	adds	r3, #4
 8009168:	4618      	mov	r0, r3
 800916a:	f7fe ff79 	bl	8008060 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009172:	2b00      	cmp	r3, #0
 8009174:	d004      	beq.n	8009180 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009176:	68bb      	ldr	r3, [r7, #8]
 8009178:	3318      	adds	r3, #24
 800917a:	4618      	mov	r0, r3
 800917c:	f7fe ff70 	bl	8008060 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009184:	4b25      	ldr	r3, [pc, #148]	; (800921c <xTaskIncrementTick+0x160>)
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	429a      	cmp	r2, r3
 800918a:	d903      	bls.n	8009194 <xTaskIncrementTick+0xd8>
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009190:	4a22      	ldr	r2, [pc, #136]	; (800921c <xTaskIncrementTick+0x160>)
 8009192:	6013      	str	r3, [r2, #0]
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009198:	4613      	mov	r3, r2
 800919a:	009b      	lsls	r3, r3, #2
 800919c:	4413      	add	r3, r2
 800919e:	009b      	lsls	r3, r3, #2
 80091a0:	4a1f      	ldr	r2, [pc, #124]	; (8009220 <xTaskIncrementTick+0x164>)
 80091a2:	441a      	add	r2, r3
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	3304      	adds	r3, #4
 80091a8:	4619      	mov	r1, r3
 80091aa:	4610      	mov	r0, r2
 80091ac:	f7fe fefb 	bl	8007fa6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091b4:	4b1b      	ldr	r3, [pc, #108]	; (8009224 <xTaskIncrementTick+0x168>)
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091ba:	429a      	cmp	r2, r3
 80091bc:	d3b8      	bcc.n	8009130 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80091be:	2301      	movs	r3, #1
 80091c0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80091c2:	e7b5      	b.n	8009130 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80091c4:	4b17      	ldr	r3, [pc, #92]	; (8009224 <xTaskIncrementTick+0x168>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091ca:	4915      	ldr	r1, [pc, #84]	; (8009220 <xTaskIncrementTick+0x164>)
 80091cc:	4613      	mov	r3, r2
 80091ce:	009b      	lsls	r3, r3, #2
 80091d0:	4413      	add	r3, r2
 80091d2:	009b      	lsls	r3, r3, #2
 80091d4:	440b      	add	r3, r1
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	2b01      	cmp	r3, #1
 80091da:	d901      	bls.n	80091e0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80091dc:	2301      	movs	r3, #1
 80091de:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80091e0:	4b11      	ldr	r3, [pc, #68]	; (8009228 <xTaskIncrementTick+0x16c>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d007      	beq.n	80091f8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80091e8:	2301      	movs	r3, #1
 80091ea:	617b      	str	r3, [r7, #20]
 80091ec:	e004      	b.n	80091f8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80091ee:	4b0f      	ldr	r3, [pc, #60]	; (800922c <xTaskIncrementTick+0x170>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	3301      	adds	r3, #1
 80091f4:	4a0d      	ldr	r2, [pc, #52]	; (800922c <xTaskIncrementTick+0x170>)
 80091f6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80091f8:	697b      	ldr	r3, [r7, #20]
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	3718      	adds	r7, #24
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}
 8009202:	bf00      	nop
 8009204:	20000ef8 	.word	0x20000ef8
 8009208:	20000ed4 	.word	0x20000ed4
 800920c:	20000e88 	.word	0x20000e88
 8009210:	20000e8c 	.word	0x20000e8c
 8009214:	20000ee8 	.word	0x20000ee8
 8009218:	20000ef0 	.word	0x20000ef0
 800921c:	20000ed8 	.word	0x20000ed8
 8009220:	20000a00 	.word	0x20000a00
 8009224:	200009fc 	.word	0x200009fc
 8009228:	20000ee4 	.word	0x20000ee4
 800922c:	20000ee0 	.word	0x20000ee0

08009230 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009230:	b480      	push	{r7}
 8009232:	b085      	sub	sp, #20
 8009234:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009236:	4b2a      	ldr	r3, [pc, #168]	; (80092e0 <vTaskSwitchContext+0xb0>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d003      	beq.n	8009246 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800923e:	4b29      	ldr	r3, [pc, #164]	; (80092e4 <vTaskSwitchContext+0xb4>)
 8009240:	2201      	movs	r2, #1
 8009242:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009244:	e046      	b.n	80092d4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8009246:	4b27      	ldr	r3, [pc, #156]	; (80092e4 <vTaskSwitchContext+0xb4>)
 8009248:	2200      	movs	r2, #0
 800924a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800924c:	4b26      	ldr	r3, [pc, #152]	; (80092e8 <vTaskSwitchContext+0xb8>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	60fb      	str	r3, [r7, #12]
 8009252:	e010      	b.n	8009276 <vTaskSwitchContext+0x46>
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d10a      	bne.n	8009270 <vTaskSwitchContext+0x40>
	__asm volatile
 800925a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800925e:	f383 8811 	msr	BASEPRI, r3
 8009262:	f3bf 8f6f 	isb	sy
 8009266:	f3bf 8f4f 	dsb	sy
 800926a:	607b      	str	r3, [r7, #4]
}
 800926c:	bf00      	nop
 800926e:	e7fe      	b.n	800926e <vTaskSwitchContext+0x3e>
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	3b01      	subs	r3, #1
 8009274:	60fb      	str	r3, [r7, #12]
 8009276:	491d      	ldr	r1, [pc, #116]	; (80092ec <vTaskSwitchContext+0xbc>)
 8009278:	68fa      	ldr	r2, [r7, #12]
 800927a:	4613      	mov	r3, r2
 800927c:	009b      	lsls	r3, r3, #2
 800927e:	4413      	add	r3, r2
 8009280:	009b      	lsls	r3, r3, #2
 8009282:	440b      	add	r3, r1
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d0e4      	beq.n	8009254 <vTaskSwitchContext+0x24>
 800928a:	68fa      	ldr	r2, [r7, #12]
 800928c:	4613      	mov	r3, r2
 800928e:	009b      	lsls	r3, r3, #2
 8009290:	4413      	add	r3, r2
 8009292:	009b      	lsls	r3, r3, #2
 8009294:	4a15      	ldr	r2, [pc, #84]	; (80092ec <vTaskSwitchContext+0xbc>)
 8009296:	4413      	add	r3, r2
 8009298:	60bb      	str	r3, [r7, #8]
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	685b      	ldr	r3, [r3, #4]
 800929e:	685a      	ldr	r2, [r3, #4]
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	605a      	str	r2, [r3, #4]
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	685a      	ldr	r2, [r3, #4]
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	3308      	adds	r3, #8
 80092ac:	429a      	cmp	r2, r3
 80092ae:	d104      	bne.n	80092ba <vTaskSwitchContext+0x8a>
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	685b      	ldr	r3, [r3, #4]
 80092b4:	685a      	ldr	r2, [r3, #4]
 80092b6:	68bb      	ldr	r3, [r7, #8]
 80092b8:	605a      	str	r2, [r3, #4]
 80092ba:	68bb      	ldr	r3, [r7, #8]
 80092bc:	685b      	ldr	r3, [r3, #4]
 80092be:	68db      	ldr	r3, [r3, #12]
 80092c0:	4a0b      	ldr	r2, [pc, #44]	; (80092f0 <vTaskSwitchContext+0xc0>)
 80092c2:	6013      	str	r3, [r2, #0]
 80092c4:	4a08      	ldr	r2, [pc, #32]	; (80092e8 <vTaskSwitchContext+0xb8>)
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80092ca:	4b09      	ldr	r3, [pc, #36]	; (80092f0 <vTaskSwitchContext+0xc0>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	3354      	adds	r3, #84	; 0x54
 80092d0:	4a08      	ldr	r2, [pc, #32]	; (80092f4 <vTaskSwitchContext+0xc4>)
 80092d2:	6013      	str	r3, [r2, #0]
}
 80092d4:	bf00      	nop
 80092d6:	3714      	adds	r7, #20
 80092d8:	46bd      	mov	sp, r7
 80092da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092de:	4770      	bx	lr
 80092e0:	20000ef8 	.word	0x20000ef8
 80092e4:	20000ee4 	.word	0x20000ee4
 80092e8:	20000ed8 	.word	0x20000ed8
 80092ec:	20000a00 	.word	0x20000a00
 80092f0:	200009fc 	.word	0x200009fc
 80092f4:	20000100 	.word	0x20000100

080092f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b084      	sub	sp, #16
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
 8009300:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d10a      	bne.n	800931e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800930c:	f383 8811 	msr	BASEPRI, r3
 8009310:	f3bf 8f6f 	isb	sy
 8009314:	f3bf 8f4f 	dsb	sy
 8009318:	60fb      	str	r3, [r7, #12]
}
 800931a:	bf00      	nop
 800931c:	e7fe      	b.n	800931c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800931e:	4b07      	ldr	r3, [pc, #28]	; (800933c <vTaskPlaceOnEventList+0x44>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	3318      	adds	r3, #24
 8009324:	4619      	mov	r1, r3
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f7fe fe61 	bl	8007fee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800932c:	2101      	movs	r1, #1
 800932e:	6838      	ldr	r0, [r7, #0]
 8009330:	f000 fa80 	bl	8009834 <prvAddCurrentTaskToDelayedList>
}
 8009334:	bf00      	nop
 8009336:	3710      	adds	r7, #16
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}
 800933c:	200009fc 	.word	0x200009fc

08009340 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009340:	b580      	push	{r7, lr}
 8009342:	b086      	sub	sp, #24
 8009344:	af00      	add	r7, sp, #0
 8009346:	60f8      	str	r0, [r7, #12]
 8009348:	60b9      	str	r1, [r7, #8]
 800934a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d10a      	bne.n	8009368 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009356:	f383 8811 	msr	BASEPRI, r3
 800935a:	f3bf 8f6f 	isb	sy
 800935e:	f3bf 8f4f 	dsb	sy
 8009362:	617b      	str	r3, [r7, #20]
}
 8009364:	bf00      	nop
 8009366:	e7fe      	b.n	8009366 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009368:	4b0a      	ldr	r3, [pc, #40]	; (8009394 <vTaskPlaceOnEventListRestricted+0x54>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	3318      	adds	r3, #24
 800936e:	4619      	mov	r1, r3
 8009370:	68f8      	ldr	r0, [r7, #12]
 8009372:	f7fe fe18 	bl	8007fa6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d002      	beq.n	8009382 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800937c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009380:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009382:	6879      	ldr	r1, [r7, #4]
 8009384:	68b8      	ldr	r0, [r7, #8]
 8009386:	f000 fa55 	bl	8009834 <prvAddCurrentTaskToDelayedList>
	}
 800938a:	bf00      	nop
 800938c:	3718      	adds	r7, #24
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}
 8009392:	bf00      	nop
 8009394:	200009fc 	.word	0x200009fc

08009398 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b086      	sub	sp, #24
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	68db      	ldr	r3, [r3, #12]
 80093a4:	68db      	ldr	r3, [r3, #12]
 80093a6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80093a8:	693b      	ldr	r3, [r7, #16]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d10a      	bne.n	80093c4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80093ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093b2:	f383 8811 	msr	BASEPRI, r3
 80093b6:	f3bf 8f6f 	isb	sy
 80093ba:	f3bf 8f4f 	dsb	sy
 80093be:	60fb      	str	r3, [r7, #12]
}
 80093c0:	bf00      	nop
 80093c2:	e7fe      	b.n	80093c2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80093c4:	693b      	ldr	r3, [r7, #16]
 80093c6:	3318      	adds	r3, #24
 80093c8:	4618      	mov	r0, r3
 80093ca:	f7fe fe49 	bl	8008060 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80093ce:	4b1e      	ldr	r3, [pc, #120]	; (8009448 <xTaskRemoveFromEventList+0xb0>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d11d      	bne.n	8009412 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80093d6:	693b      	ldr	r3, [r7, #16]
 80093d8:	3304      	adds	r3, #4
 80093da:	4618      	mov	r0, r3
 80093dc:	f7fe fe40 	bl	8008060 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80093e0:	693b      	ldr	r3, [r7, #16]
 80093e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093e4:	4b19      	ldr	r3, [pc, #100]	; (800944c <xTaskRemoveFromEventList+0xb4>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	429a      	cmp	r2, r3
 80093ea:	d903      	bls.n	80093f4 <xTaskRemoveFromEventList+0x5c>
 80093ec:	693b      	ldr	r3, [r7, #16]
 80093ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093f0:	4a16      	ldr	r2, [pc, #88]	; (800944c <xTaskRemoveFromEventList+0xb4>)
 80093f2:	6013      	str	r3, [r2, #0]
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093f8:	4613      	mov	r3, r2
 80093fa:	009b      	lsls	r3, r3, #2
 80093fc:	4413      	add	r3, r2
 80093fe:	009b      	lsls	r3, r3, #2
 8009400:	4a13      	ldr	r2, [pc, #76]	; (8009450 <xTaskRemoveFromEventList+0xb8>)
 8009402:	441a      	add	r2, r3
 8009404:	693b      	ldr	r3, [r7, #16]
 8009406:	3304      	adds	r3, #4
 8009408:	4619      	mov	r1, r3
 800940a:	4610      	mov	r0, r2
 800940c:	f7fe fdcb 	bl	8007fa6 <vListInsertEnd>
 8009410:	e005      	b.n	800941e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009412:	693b      	ldr	r3, [r7, #16]
 8009414:	3318      	adds	r3, #24
 8009416:	4619      	mov	r1, r3
 8009418:	480e      	ldr	r0, [pc, #56]	; (8009454 <xTaskRemoveFromEventList+0xbc>)
 800941a:	f7fe fdc4 	bl	8007fa6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800941e:	693b      	ldr	r3, [r7, #16]
 8009420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009422:	4b0d      	ldr	r3, [pc, #52]	; (8009458 <xTaskRemoveFromEventList+0xc0>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009428:	429a      	cmp	r2, r3
 800942a:	d905      	bls.n	8009438 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800942c:	2301      	movs	r3, #1
 800942e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009430:	4b0a      	ldr	r3, [pc, #40]	; (800945c <xTaskRemoveFromEventList+0xc4>)
 8009432:	2201      	movs	r2, #1
 8009434:	601a      	str	r2, [r3, #0]
 8009436:	e001      	b.n	800943c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009438:	2300      	movs	r3, #0
 800943a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800943c:	697b      	ldr	r3, [r7, #20]
}
 800943e:	4618      	mov	r0, r3
 8009440:	3718      	adds	r7, #24
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}
 8009446:	bf00      	nop
 8009448:	20000ef8 	.word	0x20000ef8
 800944c:	20000ed8 	.word	0x20000ed8
 8009450:	20000a00 	.word	0x20000a00
 8009454:	20000e90 	.word	0x20000e90
 8009458:	200009fc 	.word	0x200009fc
 800945c:	20000ee4 	.word	0x20000ee4

08009460 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009460:	b480      	push	{r7}
 8009462:	b083      	sub	sp, #12
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009468:	4b06      	ldr	r3, [pc, #24]	; (8009484 <vTaskInternalSetTimeOutState+0x24>)
 800946a:	681a      	ldr	r2, [r3, #0]
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009470:	4b05      	ldr	r3, [pc, #20]	; (8009488 <vTaskInternalSetTimeOutState+0x28>)
 8009472:	681a      	ldr	r2, [r3, #0]
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	605a      	str	r2, [r3, #4]
}
 8009478:	bf00      	nop
 800947a:	370c      	adds	r7, #12
 800947c:	46bd      	mov	sp, r7
 800947e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009482:	4770      	bx	lr
 8009484:	20000ee8 	.word	0x20000ee8
 8009488:	20000ed4 	.word	0x20000ed4

0800948c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b088      	sub	sp, #32
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
 8009494:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d10a      	bne.n	80094b2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800949c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094a0:	f383 8811 	msr	BASEPRI, r3
 80094a4:	f3bf 8f6f 	isb	sy
 80094a8:	f3bf 8f4f 	dsb	sy
 80094ac:	613b      	str	r3, [r7, #16]
}
 80094ae:	bf00      	nop
 80094b0:	e7fe      	b.n	80094b0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d10a      	bne.n	80094ce <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80094b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094bc:	f383 8811 	msr	BASEPRI, r3
 80094c0:	f3bf 8f6f 	isb	sy
 80094c4:	f3bf 8f4f 	dsb	sy
 80094c8:	60fb      	str	r3, [r7, #12]
}
 80094ca:	bf00      	nop
 80094cc:	e7fe      	b.n	80094cc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80094ce:	f000 fe81 	bl	800a1d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80094d2:	4b1d      	ldr	r3, [pc, #116]	; (8009548 <xTaskCheckForTimeOut+0xbc>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	685b      	ldr	r3, [r3, #4]
 80094dc:	69ba      	ldr	r2, [r7, #24]
 80094de:	1ad3      	subs	r3, r2, r3
 80094e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80094ea:	d102      	bne.n	80094f2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80094ec:	2300      	movs	r3, #0
 80094ee:	61fb      	str	r3, [r7, #28]
 80094f0:	e023      	b.n	800953a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681a      	ldr	r2, [r3, #0]
 80094f6:	4b15      	ldr	r3, [pc, #84]	; (800954c <xTaskCheckForTimeOut+0xc0>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	429a      	cmp	r2, r3
 80094fc:	d007      	beq.n	800950e <xTaskCheckForTimeOut+0x82>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	685b      	ldr	r3, [r3, #4]
 8009502:	69ba      	ldr	r2, [r7, #24]
 8009504:	429a      	cmp	r2, r3
 8009506:	d302      	bcc.n	800950e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009508:	2301      	movs	r3, #1
 800950a:	61fb      	str	r3, [r7, #28]
 800950c:	e015      	b.n	800953a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	697a      	ldr	r2, [r7, #20]
 8009514:	429a      	cmp	r2, r3
 8009516:	d20b      	bcs.n	8009530 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	681a      	ldr	r2, [r3, #0]
 800951c:	697b      	ldr	r3, [r7, #20]
 800951e:	1ad2      	subs	r2, r2, r3
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f7ff ff9b 	bl	8009460 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800952a:	2300      	movs	r3, #0
 800952c:	61fb      	str	r3, [r7, #28]
 800952e:	e004      	b.n	800953a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	2200      	movs	r2, #0
 8009534:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009536:	2301      	movs	r3, #1
 8009538:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800953a:	f000 fe7b 	bl	800a234 <vPortExitCritical>

	return xReturn;
 800953e:	69fb      	ldr	r3, [r7, #28]
}
 8009540:	4618      	mov	r0, r3
 8009542:	3720      	adds	r7, #32
 8009544:	46bd      	mov	sp, r7
 8009546:	bd80      	pop	{r7, pc}
 8009548:	20000ed4 	.word	0x20000ed4
 800954c:	20000ee8 	.word	0x20000ee8

08009550 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009550:	b480      	push	{r7}
 8009552:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009554:	4b03      	ldr	r3, [pc, #12]	; (8009564 <vTaskMissedYield+0x14>)
 8009556:	2201      	movs	r2, #1
 8009558:	601a      	str	r2, [r3, #0]
}
 800955a:	bf00      	nop
 800955c:	46bd      	mov	sp, r7
 800955e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009562:	4770      	bx	lr
 8009564:	20000ee4 	.word	0x20000ee4

08009568 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b082      	sub	sp, #8
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009570:	f000 f852 	bl	8009618 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009574:	4b06      	ldr	r3, [pc, #24]	; (8009590 <prvIdleTask+0x28>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	2b01      	cmp	r3, #1
 800957a:	d9f9      	bls.n	8009570 <prvIdleTask+0x8>
			{
				taskYIELD();
 800957c:	4b05      	ldr	r3, [pc, #20]	; (8009594 <prvIdleTask+0x2c>)
 800957e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009582:	601a      	str	r2, [r3, #0]
 8009584:	f3bf 8f4f 	dsb	sy
 8009588:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800958c:	e7f0      	b.n	8009570 <prvIdleTask+0x8>
 800958e:	bf00      	nop
 8009590:	20000a00 	.word	0x20000a00
 8009594:	e000ed04 	.word	0xe000ed04

08009598 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b082      	sub	sp, #8
 800959c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800959e:	2300      	movs	r3, #0
 80095a0:	607b      	str	r3, [r7, #4]
 80095a2:	e00c      	b.n	80095be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80095a4:	687a      	ldr	r2, [r7, #4]
 80095a6:	4613      	mov	r3, r2
 80095a8:	009b      	lsls	r3, r3, #2
 80095aa:	4413      	add	r3, r2
 80095ac:	009b      	lsls	r3, r3, #2
 80095ae:	4a12      	ldr	r2, [pc, #72]	; (80095f8 <prvInitialiseTaskLists+0x60>)
 80095b0:	4413      	add	r3, r2
 80095b2:	4618      	mov	r0, r3
 80095b4:	f7fe fcca 	bl	8007f4c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	3301      	adds	r3, #1
 80095bc:	607b      	str	r3, [r7, #4]
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2b37      	cmp	r3, #55	; 0x37
 80095c2:	d9ef      	bls.n	80095a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80095c4:	480d      	ldr	r0, [pc, #52]	; (80095fc <prvInitialiseTaskLists+0x64>)
 80095c6:	f7fe fcc1 	bl	8007f4c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80095ca:	480d      	ldr	r0, [pc, #52]	; (8009600 <prvInitialiseTaskLists+0x68>)
 80095cc:	f7fe fcbe 	bl	8007f4c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80095d0:	480c      	ldr	r0, [pc, #48]	; (8009604 <prvInitialiseTaskLists+0x6c>)
 80095d2:	f7fe fcbb 	bl	8007f4c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80095d6:	480c      	ldr	r0, [pc, #48]	; (8009608 <prvInitialiseTaskLists+0x70>)
 80095d8:	f7fe fcb8 	bl	8007f4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80095dc:	480b      	ldr	r0, [pc, #44]	; (800960c <prvInitialiseTaskLists+0x74>)
 80095de:	f7fe fcb5 	bl	8007f4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80095e2:	4b0b      	ldr	r3, [pc, #44]	; (8009610 <prvInitialiseTaskLists+0x78>)
 80095e4:	4a05      	ldr	r2, [pc, #20]	; (80095fc <prvInitialiseTaskLists+0x64>)
 80095e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80095e8:	4b0a      	ldr	r3, [pc, #40]	; (8009614 <prvInitialiseTaskLists+0x7c>)
 80095ea:	4a05      	ldr	r2, [pc, #20]	; (8009600 <prvInitialiseTaskLists+0x68>)
 80095ec:	601a      	str	r2, [r3, #0]
}
 80095ee:	bf00      	nop
 80095f0:	3708      	adds	r7, #8
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd80      	pop	{r7, pc}
 80095f6:	bf00      	nop
 80095f8:	20000a00 	.word	0x20000a00
 80095fc:	20000e60 	.word	0x20000e60
 8009600:	20000e74 	.word	0x20000e74
 8009604:	20000e90 	.word	0x20000e90
 8009608:	20000ea4 	.word	0x20000ea4
 800960c:	20000ebc 	.word	0x20000ebc
 8009610:	20000e88 	.word	0x20000e88
 8009614:	20000e8c 	.word	0x20000e8c

08009618 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b082      	sub	sp, #8
 800961c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800961e:	e019      	b.n	8009654 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009620:	f000 fdd8 	bl	800a1d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009624:	4b10      	ldr	r3, [pc, #64]	; (8009668 <prvCheckTasksWaitingTermination+0x50>)
 8009626:	68db      	ldr	r3, [r3, #12]
 8009628:	68db      	ldr	r3, [r3, #12]
 800962a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	3304      	adds	r3, #4
 8009630:	4618      	mov	r0, r3
 8009632:	f7fe fd15 	bl	8008060 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009636:	4b0d      	ldr	r3, [pc, #52]	; (800966c <prvCheckTasksWaitingTermination+0x54>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	3b01      	subs	r3, #1
 800963c:	4a0b      	ldr	r2, [pc, #44]	; (800966c <prvCheckTasksWaitingTermination+0x54>)
 800963e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009640:	4b0b      	ldr	r3, [pc, #44]	; (8009670 <prvCheckTasksWaitingTermination+0x58>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	3b01      	subs	r3, #1
 8009646:	4a0a      	ldr	r2, [pc, #40]	; (8009670 <prvCheckTasksWaitingTermination+0x58>)
 8009648:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800964a:	f000 fdf3 	bl	800a234 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f000 f810 	bl	8009674 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009654:	4b06      	ldr	r3, [pc, #24]	; (8009670 <prvCheckTasksWaitingTermination+0x58>)
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d1e1      	bne.n	8009620 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800965c:	bf00      	nop
 800965e:	bf00      	nop
 8009660:	3708      	adds	r7, #8
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}
 8009666:	bf00      	nop
 8009668:	20000ea4 	.word	0x20000ea4
 800966c:	20000ed0 	.word	0x20000ed0
 8009670:	20000eb8 	.word	0x20000eb8

08009674 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009674:	b580      	push	{r7, lr}
 8009676:	b084      	sub	sp, #16
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	3354      	adds	r3, #84	; 0x54
 8009680:	4618      	mov	r0, r3
 8009682:	f001 fff5 	bl	800b670 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800968c:	2b00      	cmp	r3, #0
 800968e:	d108      	bne.n	80096a2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009694:	4618      	mov	r0, r3
 8009696:	f000 ff8b 	bl	800a5b0 <vPortFree>
				vPortFree( pxTCB );
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f000 ff88 	bl	800a5b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80096a0:	e018      	b.n	80096d4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80096a8:	2b01      	cmp	r3, #1
 80096aa:	d103      	bne.n	80096b4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f000 ff7f 	bl	800a5b0 <vPortFree>
	}
 80096b2:	e00f      	b.n	80096d4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80096ba:	2b02      	cmp	r3, #2
 80096bc:	d00a      	beq.n	80096d4 <prvDeleteTCB+0x60>
	__asm volatile
 80096be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096c2:	f383 8811 	msr	BASEPRI, r3
 80096c6:	f3bf 8f6f 	isb	sy
 80096ca:	f3bf 8f4f 	dsb	sy
 80096ce:	60fb      	str	r3, [r7, #12]
}
 80096d0:	bf00      	nop
 80096d2:	e7fe      	b.n	80096d2 <prvDeleteTCB+0x5e>
	}
 80096d4:	bf00      	nop
 80096d6:	3710      	adds	r7, #16
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}

080096dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80096dc:	b480      	push	{r7}
 80096de:	b083      	sub	sp, #12
 80096e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80096e2:	4b0c      	ldr	r3, [pc, #48]	; (8009714 <prvResetNextTaskUnblockTime+0x38>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d104      	bne.n	80096f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80096ec:	4b0a      	ldr	r3, [pc, #40]	; (8009718 <prvResetNextTaskUnblockTime+0x3c>)
 80096ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80096f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80096f4:	e008      	b.n	8009708 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096f6:	4b07      	ldr	r3, [pc, #28]	; (8009714 <prvResetNextTaskUnblockTime+0x38>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	68db      	ldr	r3, [r3, #12]
 80096fc:	68db      	ldr	r3, [r3, #12]
 80096fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	685b      	ldr	r3, [r3, #4]
 8009704:	4a04      	ldr	r2, [pc, #16]	; (8009718 <prvResetNextTaskUnblockTime+0x3c>)
 8009706:	6013      	str	r3, [r2, #0]
}
 8009708:	bf00      	nop
 800970a:	370c      	adds	r7, #12
 800970c:	46bd      	mov	sp, r7
 800970e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009712:	4770      	bx	lr
 8009714:	20000e88 	.word	0x20000e88
 8009718:	20000ef0 	.word	0x20000ef0

0800971c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800971c:	b480      	push	{r7}
 800971e:	b083      	sub	sp, #12
 8009720:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009722:	4b0b      	ldr	r3, [pc, #44]	; (8009750 <xTaskGetSchedulerState+0x34>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d102      	bne.n	8009730 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800972a:	2301      	movs	r3, #1
 800972c:	607b      	str	r3, [r7, #4]
 800972e:	e008      	b.n	8009742 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009730:	4b08      	ldr	r3, [pc, #32]	; (8009754 <xTaskGetSchedulerState+0x38>)
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d102      	bne.n	800973e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009738:	2302      	movs	r3, #2
 800973a:	607b      	str	r3, [r7, #4]
 800973c:	e001      	b.n	8009742 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800973e:	2300      	movs	r3, #0
 8009740:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009742:	687b      	ldr	r3, [r7, #4]
	}
 8009744:	4618      	mov	r0, r3
 8009746:	370c      	adds	r7, #12
 8009748:	46bd      	mov	sp, r7
 800974a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974e:	4770      	bx	lr
 8009750:	20000edc 	.word	0x20000edc
 8009754:	20000ef8 	.word	0x20000ef8

08009758 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009758:	b580      	push	{r7, lr}
 800975a:	b086      	sub	sp, #24
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009764:	2300      	movs	r3, #0
 8009766:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d056      	beq.n	800981c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800976e:	4b2e      	ldr	r3, [pc, #184]	; (8009828 <xTaskPriorityDisinherit+0xd0>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	693a      	ldr	r2, [r7, #16]
 8009774:	429a      	cmp	r2, r3
 8009776:	d00a      	beq.n	800978e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800977c:	f383 8811 	msr	BASEPRI, r3
 8009780:	f3bf 8f6f 	isb	sy
 8009784:	f3bf 8f4f 	dsb	sy
 8009788:	60fb      	str	r3, [r7, #12]
}
 800978a:	bf00      	nop
 800978c:	e7fe      	b.n	800978c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800978e:	693b      	ldr	r3, [r7, #16]
 8009790:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009792:	2b00      	cmp	r3, #0
 8009794:	d10a      	bne.n	80097ac <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800979a:	f383 8811 	msr	BASEPRI, r3
 800979e:	f3bf 8f6f 	isb	sy
 80097a2:	f3bf 8f4f 	dsb	sy
 80097a6:	60bb      	str	r3, [r7, #8]
}
 80097a8:	bf00      	nop
 80097aa:	e7fe      	b.n	80097aa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80097ac:	693b      	ldr	r3, [r7, #16]
 80097ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097b0:	1e5a      	subs	r2, r3, #1
 80097b2:	693b      	ldr	r3, [r7, #16]
 80097b4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80097b6:	693b      	ldr	r3, [r7, #16]
 80097b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097ba:	693b      	ldr	r3, [r7, #16]
 80097bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097be:	429a      	cmp	r2, r3
 80097c0:	d02c      	beq.n	800981c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80097c2:	693b      	ldr	r3, [r7, #16]
 80097c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d128      	bne.n	800981c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80097ca:	693b      	ldr	r3, [r7, #16]
 80097cc:	3304      	adds	r3, #4
 80097ce:	4618      	mov	r0, r3
 80097d0:	f7fe fc46 	bl	8008060 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80097d4:	693b      	ldr	r3, [r7, #16]
 80097d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80097d8:	693b      	ldr	r3, [r7, #16]
 80097da:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097dc:	693b      	ldr	r3, [r7, #16]
 80097de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097e0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80097e4:	693b      	ldr	r3, [r7, #16]
 80097e6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097ec:	4b0f      	ldr	r3, [pc, #60]	; (800982c <xTaskPriorityDisinherit+0xd4>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	429a      	cmp	r2, r3
 80097f2:	d903      	bls.n	80097fc <xTaskPriorityDisinherit+0xa4>
 80097f4:	693b      	ldr	r3, [r7, #16]
 80097f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097f8:	4a0c      	ldr	r2, [pc, #48]	; (800982c <xTaskPriorityDisinherit+0xd4>)
 80097fa:	6013      	str	r3, [r2, #0]
 80097fc:	693b      	ldr	r3, [r7, #16]
 80097fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009800:	4613      	mov	r3, r2
 8009802:	009b      	lsls	r3, r3, #2
 8009804:	4413      	add	r3, r2
 8009806:	009b      	lsls	r3, r3, #2
 8009808:	4a09      	ldr	r2, [pc, #36]	; (8009830 <xTaskPriorityDisinherit+0xd8>)
 800980a:	441a      	add	r2, r3
 800980c:	693b      	ldr	r3, [r7, #16]
 800980e:	3304      	adds	r3, #4
 8009810:	4619      	mov	r1, r3
 8009812:	4610      	mov	r0, r2
 8009814:	f7fe fbc7 	bl	8007fa6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009818:	2301      	movs	r3, #1
 800981a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800981c:	697b      	ldr	r3, [r7, #20]
	}
 800981e:	4618      	mov	r0, r3
 8009820:	3718      	adds	r7, #24
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}
 8009826:	bf00      	nop
 8009828:	200009fc 	.word	0x200009fc
 800982c:	20000ed8 	.word	0x20000ed8
 8009830:	20000a00 	.word	0x20000a00

08009834 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b084      	sub	sp, #16
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
 800983c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800983e:	4b21      	ldr	r3, [pc, #132]	; (80098c4 <prvAddCurrentTaskToDelayedList+0x90>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009844:	4b20      	ldr	r3, [pc, #128]	; (80098c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	3304      	adds	r3, #4
 800984a:	4618      	mov	r0, r3
 800984c:	f7fe fc08 	bl	8008060 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009856:	d10a      	bne.n	800986e <prvAddCurrentTaskToDelayedList+0x3a>
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d007      	beq.n	800986e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800985e:	4b1a      	ldr	r3, [pc, #104]	; (80098c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	3304      	adds	r3, #4
 8009864:	4619      	mov	r1, r3
 8009866:	4819      	ldr	r0, [pc, #100]	; (80098cc <prvAddCurrentTaskToDelayedList+0x98>)
 8009868:	f7fe fb9d 	bl	8007fa6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800986c:	e026      	b.n	80098bc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800986e:	68fa      	ldr	r2, [r7, #12]
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	4413      	add	r3, r2
 8009874:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009876:	4b14      	ldr	r3, [pc, #80]	; (80098c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	68ba      	ldr	r2, [r7, #8]
 800987c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800987e:	68ba      	ldr	r2, [r7, #8]
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	429a      	cmp	r2, r3
 8009884:	d209      	bcs.n	800989a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009886:	4b12      	ldr	r3, [pc, #72]	; (80098d0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009888:	681a      	ldr	r2, [r3, #0]
 800988a:	4b0f      	ldr	r3, [pc, #60]	; (80098c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	3304      	adds	r3, #4
 8009890:	4619      	mov	r1, r3
 8009892:	4610      	mov	r0, r2
 8009894:	f7fe fbab 	bl	8007fee <vListInsert>
}
 8009898:	e010      	b.n	80098bc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800989a:	4b0e      	ldr	r3, [pc, #56]	; (80098d4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800989c:	681a      	ldr	r2, [r3, #0]
 800989e:	4b0a      	ldr	r3, [pc, #40]	; (80098c8 <prvAddCurrentTaskToDelayedList+0x94>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	3304      	adds	r3, #4
 80098a4:	4619      	mov	r1, r3
 80098a6:	4610      	mov	r0, r2
 80098a8:	f7fe fba1 	bl	8007fee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80098ac:	4b0a      	ldr	r3, [pc, #40]	; (80098d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	68ba      	ldr	r2, [r7, #8]
 80098b2:	429a      	cmp	r2, r3
 80098b4:	d202      	bcs.n	80098bc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80098b6:	4a08      	ldr	r2, [pc, #32]	; (80098d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	6013      	str	r3, [r2, #0]
}
 80098bc:	bf00      	nop
 80098be:	3710      	adds	r7, #16
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}
 80098c4:	20000ed4 	.word	0x20000ed4
 80098c8:	200009fc 	.word	0x200009fc
 80098cc:	20000ebc 	.word	0x20000ebc
 80098d0:	20000e8c 	.word	0x20000e8c
 80098d4:	20000e88 	.word	0x20000e88
 80098d8:	20000ef0 	.word	0x20000ef0

080098dc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b08a      	sub	sp, #40	; 0x28
 80098e0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80098e2:	2300      	movs	r3, #0
 80098e4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80098e6:	f000 fb07 	bl	8009ef8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80098ea:	4b1c      	ldr	r3, [pc, #112]	; (800995c <xTimerCreateTimerTask+0x80>)
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d021      	beq.n	8009936 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80098f2:	2300      	movs	r3, #0
 80098f4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80098f6:	2300      	movs	r3, #0
 80098f8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80098fa:	1d3a      	adds	r2, r7, #4
 80098fc:	f107 0108 	add.w	r1, r7, #8
 8009900:	f107 030c 	add.w	r3, r7, #12
 8009904:	4618      	mov	r0, r3
 8009906:	f7fe fb07 	bl	8007f18 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800990a:	6879      	ldr	r1, [r7, #4]
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	68fa      	ldr	r2, [r7, #12]
 8009910:	9202      	str	r2, [sp, #8]
 8009912:	9301      	str	r3, [sp, #4]
 8009914:	2302      	movs	r3, #2
 8009916:	9300      	str	r3, [sp, #0]
 8009918:	2300      	movs	r3, #0
 800991a:	460a      	mov	r2, r1
 800991c:	4910      	ldr	r1, [pc, #64]	; (8009960 <xTimerCreateTimerTask+0x84>)
 800991e:	4811      	ldr	r0, [pc, #68]	; (8009964 <xTimerCreateTimerTask+0x88>)
 8009920:	f7ff f8b4 	bl	8008a8c <xTaskCreateStatic>
 8009924:	4603      	mov	r3, r0
 8009926:	4a10      	ldr	r2, [pc, #64]	; (8009968 <xTimerCreateTimerTask+0x8c>)
 8009928:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800992a:	4b0f      	ldr	r3, [pc, #60]	; (8009968 <xTimerCreateTimerTask+0x8c>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d001      	beq.n	8009936 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009932:	2301      	movs	r3, #1
 8009934:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d10a      	bne.n	8009952 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800993c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009940:	f383 8811 	msr	BASEPRI, r3
 8009944:	f3bf 8f6f 	isb	sy
 8009948:	f3bf 8f4f 	dsb	sy
 800994c:	613b      	str	r3, [r7, #16]
}
 800994e:	bf00      	nop
 8009950:	e7fe      	b.n	8009950 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009952:	697b      	ldr	r3, [r7, #20]
}
 8009954:	4618      	mov	r0, r3
 8009956:	3718      	adds	r7, #24
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}
 800995c:	20000f2c 	.word	0x20000f2c
 8009960:	0800b878 	.word	0x0800b878
 8009964:	08009aa1 	.word	0x08009aa1
 8009968:	20000f30 	.word	0x20000f30

0800996c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b08a      	sub	sp, #40	; 0x28
 8009970:	af00      	add	r7, sp, #0
 8009972:	60f8      	str	r0, [r7, #12]
 8009974:	60b9      	str	r1, [r7, #8]
 8009976:	607a      	str	r2, [r7, #4]
 8009978:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800997a:	2300      	movs	r3, #0
 800997c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d10a      	bne.n	800999a <xTimerGenericCommand+0x2e>
	__asm volatile
 8009984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009988:	f383 8811 	msr	BASEPRI, r3
 800998c:	f3bf 8f6f 	isb	sy
 8009990:	f3bf 8f4f 	dsb	sy
 8009994:	623b      	str	r3, [r7, #32]
}
 8009996:	bf00      	nop
 8009998:	e7fe      	b.n	8009998 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800999a:	4b1a      	ldr	r3, [pc, #104]	; (8009a04 <xTimerGenericCommand+0x98>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d02a      	beq.n	80099f8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80099ae:	68bb      	ldr	r3, [r7, #8]
 80099b0:	2b05      	cmp	r3, #5
 80099b2:	dc18      	bgt.n	80099e6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80099b4:	f7ff feb2 	bl	800971c <xTaskGetSchedulerState>
 80099b8:	4603      	mov	r3, r0
 80099ba:	2b02      	cmp	r3, #2
 80099bc:	d109      	bne.n	80099d2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80099be:	4b11      	ldr	r3, [pc, #68]	; (8009a04 <xTimerGenericCommand+0x98>)
 80099c0:	6818      	ldr	r0, [r3, #0]
 80099c2:	f107 0110 	add.w	r1, r7, #16
 80099c6:	2300      	movs	r3, #0
 80099c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099ca:	f7fe fc77 	bl	80082bc <xQueueGenericSend>
 80099ce:	6278      	str	r0, [r7, #36]	; 0x24
 80099d0:	e012      	b.n	80099f8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80099d2:	4b0c      	ldr	r3, [pc, #48]	; (8009a04 <xTimerGenericCommand+0x98>)
 80099d4:	6818      	ldr	r0, [r3, #0]
 80099d6:	f107 0110 	add.w	r1, r7, #16
 80099da:	2300      	movs	r3, #0
 80099dc:	2200      	movs	r2, #0
 80099de:	f7fe fc6d 	bl	80082bc <xQueueGenericSend>
 80099e2:	6278      	str	r0, [r7, #36]	; 0x24
 80099e4:	e008      	b.n	80099f8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80099e6:	4b07      	ldr	r3, [pc, #28]	; (8009a04 <xTimerGenericCommand+0x98>)
 80099e8:	6818      	ldr	r0, [r3, #0]
 80099ea:	f107 0110 	add.w	r1, r7, #16
 80099ee:	2300      	movs	r3, #0
 80099f0:	683a      	ldr	r2, [r7, #0]
 80099f2:	f7fe fd61 	bl	80084b8 <xQueueGenericSendFromISR>
 80099f6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80099f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80099fa:	4618      	mov	r0, r3
 80099fc:	3728      	adds	r7, #40	; 0x28
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}
 8009a02:	bf00      	nop
 8009a04:	20000f2c 	.word	0x20000f2c

08009a08 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b088      	sub	sp, #32
 8009a0c:	af02      	add	r7, sp, #8
 8009a0e:	6078      	str	r0, [r7, #4]
 8009a10:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a12:	4b22      	ldr	r3, [pc, #136]	; (8009a9c <prvProcessExpiredTimer+0x94>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	68db      	ldr	r3, [r3, #12]
 8009a18:	68db      	ldr	r3, [r3, #12]
 8009a1a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009a1c:	697b      	ldr	r3, [r7, #20]
 8009a1e:	3304      	adds	r3, #4
 8009a20:	4618      	mov	r0, r3
 8009a22:	f7fe fb1d 	bl	8008060 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009a26:	697b      	ldr	r3, [r7, #20]
 8009a28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a2c:	f003 0304 	and.w	r3, r3, #4
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d022      	beq.n	8009a7a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009a34:	697b      	ldr	r3, [r7, #20]
 8009a36:	699a      	ldr	r2, [r3, #24]
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	18d1      	adds	r1, r2, r3
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	683a      	ldr	r2, [r7, #0]
 8009a40:	6978      	ldr	r0, [r7, #20]
 8009a42:	f000 f8d1 	bl	8009be8 <prvInsertTimerInActiveList>
 8009a46:	4603      	mov	r3, r0
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d01f      	beq.n	8009a8c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	9300      	str	r3, [sp, #0]
 8009a50:	2300      	movs	r3, #0
 8009a52:	687a      	ldr	r2, [r7, #4]
 8009a54:	2100      	movs	r1, #0
 8009a56:	6978      	ldr	r0, [r7, #20]
 8009a58:	f7ff ff88 	bl	800996c <xTimerGenericCommand>
 8009a5c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009a5e:	693b      	ldr	r3, [r7, #16]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d113      	bne.n	8009a8c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a68:	f383 8811 	msr	BASEPRI, r3
 8009a6c:	f3bf 8f6f 	isb	sy
 8009a70:	f3bf 8f4f 	dsb	sy
 8009a74:	60fb      	str	r3, [r7, #12]
}
 8009a76:	bf00      	nop
 8009a78:	e7fe      	b.n	8009a78 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a80:	f023 0301 	bic.w	r3, r3, #1
 8009a84:	b2da      	uxtb	r2, r3
 8009a86:	697b      	ldr	r3, [r7, #20]
 8009a88:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009a8c:	697b      	ldr	r3, [r7, #20]
 8009a8e:	6a1b      	ldr	r3, [r3, #32]
 8009a90:	6978      	ldr	r0, [r7, #20]
 8009a92:	4798      	blx	r3
}
 8009a94:	bf00      	nop
 8009a96:	3718      	adds	r7, #24
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}
 8009a9c:	20000f24 	.word	0x20000f24

08009aa0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b084      	sub	sp, #16
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009aa8:	f107 0308 	add.w	r3, r7, #8
 8009aac:	4618      	mov	r0, r3
 8009aae:	f000 f857 	bl	8009b60 <prvGetNextExpireTime>
 8009ab2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	4619      	mov	r1, r3
 8009ab8:	68f8      	ldr	r0, [r7, #12]
 8009aba:	f000 f803 	bl	8009ac4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009abe:	f000 f8d5 	bl	8009c6c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009ac2:	e7f1      	b.n	8009aa8 <prvTimerTask+0x8>

08009ac4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b084      	sub	sp, #16
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
 8009acc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009ace:	f7ff fa39 	bl	8008f44 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009ad2:	f107 0308 	add.w	r3, r7, #8
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f000 f866 	bl	8009ba8 <prvSampleTimeNow>
 8009adc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d130      	bne.n	8009b46 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d10a      	bne.n	8009b00 <prvProcessTimerOrBlockTask+0x3c>
 8009aea:	687a      	ldr	r2, [r7, #4]
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	429a      	cmp	r2, r3
 8009af0:	d806      	bhi.n	8009b00 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009af2:	f7ff fa35 	bl	8008f60 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009af6:	68f9      	ldr	r1, [r7, #12]
 8009af8:	6878      	ldr	r0, [r7, #4]
 8009afa:	f7ff ff85 	bl	8009a08 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009afe:	e024      	b.n	8009b4a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d008      	beq.n	8009b18 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009b06:	4b13      	ldr	r3, [pc, #76]	; (8009b54 <prvProcessTimerOrBlockTask+0x90>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d101      	bne.n	8009b14 <prvProcessTimerOrBlockTask+0x50>
 8009b10:	2301      	movs	r3, #1
 8009b12:	e000      	b.n	8009b16 <prvProcessTimerOrBlockTask+0x52>
 8009b14:	2300      	movs	r3, #0
 8009b16:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009b18:	4b0f      	ldr	r3, [pc, #60]	; (8009b58 <prvProcessTimerOrBlockTask+0x94>)
 8009b1a:	6818      	ldr	r0, [r3, #0]
 8009b1c:	687a      	ldr	r2, [r7, #4]
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	1ad3      	subs	r3, r2, r3
 8009b22:	683a      	ldr	r2, [r7, #0]
 8009b24:	4619      	mov	r1, r3
 8009b26:	f7fe ff7d 	bl	8008a24 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009b2a:	f7ff fa19 	bl	8008f60 <xTaskResumeAll>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d10a      	bne.n	8009b4a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009b34:	4b09      	ldr	r3, [pc, #36]	; (8009b5c <prvProcessTimerOrBlockTask+0x98>)
 8009b36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b3a:	601a      	str	r2, [r3, #0]
 8009b3c:	f3bf 8f4f 	dsb	sy
 8009b40:	f3bf 8f6f 	isb	sy
}
 8009b44:	e001      	b.n	8009b4a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009b46:	f7ff fa0b 	bl	8008f60 <xTaskResumeAll>
}
 8009b4a:	bf00      	nop
 8009b4c:	3710      	adds	r7, #16
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}
 8009b52:	bf00      	nop
 8009b54:	20000f28 	.word	0x20000f28
 8009b58:	20000f2c 	.word	0x20000f2c
 8009b5c:	e000ed04 	.word	0xe000ed04

08009b60 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009b60:	b480      	push	{r7}
 8009b62:	b085      	sub	sp, #20
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009b68:	4b0e      	ldr	r3, [pc, #56]	; (8009ba4 <prvGetNextExpireTime+0x44>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d101      	bne.n	8009b76 <prvGetNextExpireTime+0x16>
 8009b72:	2201      	movs	r2, #1
 8009b74:	e000      	b.n	8009b78 <prvGetNextExpireTime+0x18>
 8009b76:	2200      	movs	r2, #0
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d105      	bne.n	8009b90 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009b84:	4b07      	ldr	r3, [pc, #28]	; (8009ba4 <prvGetNextExpireTime+0x44>)
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	68db      	ldr	r3, [r3, #12]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	60fb      	str	r3, [r7, #12]
 8009b8e:	e001      	b.n	8009b94 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009b90:	2300      	movs	r3, #0
 8009b92:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009b94:	68fb      	ldr	r3, [r7, #12]
}
 8009b96:	4618      	mov	r0, r3
 8009b98:	3714      	adds	r7, #20
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba0:	4770      	bx	lr
 8009ba2:	bf00      	nop
 8009ba4:	20000f24 	.word	0x20000f24

08009ba8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b084      	sub	sp, #16
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009bb0:	f7ff fa74 	bl	800909c <xTaskGetTickCount>
 8009bb4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009bb6:	4b0b      	ldr	r3, [pc, #44]	; (8009be4 <prvSampleTimeNow+0x3c>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	68fa      	ldr	r2, [r7, #12]
 8009bbc:	429a      	cmp	r2, r3
 8009bbe:	d205      	bcs.n	8009bcc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009bc0:	f000 f936 	bl	8009e30 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2201      	movs	r2, #1
 8009bc8:	601a      	str	r2, [r3, #0]
 8009bca:	e002      	b.n	8009bd2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2200      	movs	r2, #0
 8009bd0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009bd2:	4a04      	ldr	r2, [pc, #16]	; (8009be4 <prvSampleTimeNow+0x3c>)
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
}
 8009bda:	4618      	mov	r0, r3
 8009bdc:	3710      	adds	r7, #16
 8009bde:	46bd      	mov	sp, r7
 8009be0:	bd80      	pop	{r7, pc}
 8009be2:	bf00      	nop
 8009be4:	20000f34 	.word	0x20000f34

08009be8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b086      	sub	sp, #24
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	60f8      	str	r0, [r7, #12]
 8009bf0:	60b9      	str	r1, [r7, #8]
 8009bf2:	607a      	str	r2, [r7, #4]
 8009bf4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	68ba      	ldr	r2, [r7, #8]
 8009bfe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	68fa      	ldr	r2, [r7, #12]
 8009c04:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009c06:	68ba      	ldr	r2, [r7, #8]
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	429a      	cmp	r2, r3
 8009c0c:	d812      	bhi.n	8009c34 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c0e:	687a      	ldr	r2, [r7, #4]
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	1ad2      	subs	r2, r2, r3
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	699b      	ldr	r3, [r3, #24]
 8009c18:	429a      	cmp	r2, r3
 8009c1a:	d302      	bcc.n	8009c22 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009c1c:	2301      	movs	r3, #1
 8009c1e:	617b      	str	r3, [r7, #20]
 8009c20:	e01b      	b.n	8009c5a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009c22:	4b10      	ldr	r3, [pc, #64]	; (8009c64 <prvInsertTimerInActiveList+0x7c>)
 8009c24:	681a      	ldr	r2, [r3, #0]
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	3304      	adds	r3, #4
 8009c2a:	4619      	mov	r1, r3
 8009c2c:	4610      	mov	r0, r2
 8009c2e:	f7fe f9de 	bl	8007fee <vListInsert>
 8009c32:	e012      	b.n	8009c5a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009c34:	687a      	ldr	r2, [r7, #4]
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	429a      	cmp	r2, r3
 8009c3a:	d206      	bcs.n	8009c4a <prvInsertTimerInActiveList+0x62>
 8009c3c:	68ba      	ldr	r2, [r7, #8]
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	429a      	cmp	r2, r3
 8009c42:	d302      	bcc.n	8009c4a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009c44:	2301      	movs	r3, #1
 8009c46:	617b      	str	r3, [r7, #20]
 8009c48:	e007      	b.n	8009c5a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009c4a:	4b07      	ldr	r3, [pc, #28]	; (8009c68 <prvInsertTimerInActiveList+0x80>)
 8009c4c:	681a      	ldr	r2, [r3, #0]
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	3304      	adds	r3, #4
 8009c52:	4619      	mov	r1, r3
 8009c54:	4610      	mov	r0, r2
 8009c56:	f7fe f9ca 	bl	8007fee <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009c5a:	697b      	ldr	r3, [r7, #20]
}
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	3718      	adds	r7, #24
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}
 8009c64:	20000f28 	.word	0x20000f28
 8009c68:	20000f24 	.word	0x20000f24

08009c6c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b08e      	sub	sp, #56	; 0x38
 8009c70:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009c72:	e0ca      	b.n	8009e0a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	da18      	bge.n	8009cac <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009c7a:	1d3b      	adds	r3, r7, #4
 8009c7c:	3304      	adds	r3, #4
 8009c7e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d10a      	bne.n	8009c9c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c8a:	f383 8811 	msr	BASEPRI, r3
 8009c8e:	f3bf 8f6f 	isb	sy
 8009c92:	f3bf 8f4f 	dsb	sy
 8009c96:	61fb      	str	r3, [r7, #28]
}
 8009c98:	bf00      	nop
 8009c9a:	e7fe      	b.n	8009c9a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ca2:	6850      	ldr	r0, [r2, #4]
 8009ca4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ca6:	6892      	ldr	r2, [r2, #8]
 8009ca8:	4611      	mov	r1, r2
 8009caa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	f2c0 80aa 	blt.w	8009e08 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cba:	695b      	ldr	r3, [r3, #20]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d004      	beq.n	8009cca <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cc2:	3304      	adds	r3, #4
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	f7fe f9cb 	bl	8008060 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009cca:	463b      	mov	r3, r7
 8009ccc:	4618      	mov	r0, r3
 8009cce:	f7ff ff6b 	bl	8009ba8 <prvSampleTimeNow>
 8009cd2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2b09      	cmp	r3, #9
 8009cd8:	f200 8097 	bhi.w	8009e0a <prvProcessReceivedCommands+0x19e>
 8009cdc:	a201      	add	r2, pc, #4	; (adr r2, 8009ce4 <prvProcessReceivedCommands+0x78>)
 8009cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ce2:	bf00      	nop
 8009ce4:	08009d0d 	.word	0x08009d0d
 8009ce8:	08009d0d 	.word	0x08009d0d
 8009cec:	08009d0d 	.word	0x08009d0d
 8009cf0:	08009d81 	.word	0x08009d81
 8009cf4:	08009d95 	.word	0x08009d95
 8009cf8:	08009ddf 	.word	0x08009ddf
 8009cfc:	08009d0d 	.word	0x08009d0d
 8009d00:	08009d0d 	.word	0x08009d0d
 8009d04:	08009d81 	.word	0x08009d81
 8009d08:	08009d95 	.word	0x08009d95
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d12:	f043 0301 	orr.w	r3, r3, #1
 8009d16:	b2da      	uxtb	r2, r3
 8009d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009d1e:	68ba      	ldr	r2, [r7, #8]
 8009d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d22:	699b      	ldr	r3, [r3, #24]
 8009d24:	18d1      	adds	r1, r2, r3
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d2c:	f7ff ff5c 	bl	8009be8 <prvInsertTimerInActiveList>
 8009d30:	4603      	mov	r3, r0
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d069      	beq.n	8009e0a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d38:	6a1b      	ldr	r3, [r3, #32]
 8009d3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d3c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d44:	f003 0304 	and.w	r3, r3, #4
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d05e      	beq.n	8009e0a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009d4c:	68ba      	ldr	r2, [r7, #8]
 8009d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d50:	699b      	ldr	r3, [r3, #24]
 8009d52:	441a      	add	r2, r3
 8009d54:	2300      	movs	r3, #0
 8009d56:	9300      	str	r3, [sp, #0]
 8009d58:	2300      	movs	r3, #0
 8009d5a:	2100      	movs	r1, #0
 8009d5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d5e:	f7ff fe05 	bl	800996c <xTimerGenericCommand>
 8009d62:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009d64:	6a3b      	ldr	r3, [r7, #32]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d14f      	bne.n	8009e0a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d6e:	f383 8811 	msr	BASEPRI, r3
 8009d72:	f3bf 8f6f 	isb	sy
 8009d76:	f3bf 8f4f 	dsb	sy
 8009d7a:	61bb      	str	r3, [r7, #24]
}
 8009d7c:	bf00      	nop
 8009d7e:	e7fe      	b.n	8009d7e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d86:	f023 0301 	bic.w	r3, r3, #1
 8009d8a:	b2da      	uxtb	r2, r3
 8009d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009d92:	e03a      	b.n	8009e0a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d9a:	f043 0301 	orr.w	r3, r3, #1
 8009d9e:	b2da      	uxtb	r2, r3
 8009da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009da2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009da6:	68ba      	ldr	r2, [r7, #8]
 8009da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009daa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dae:	699b      	ldr	r3, [r3, #24]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d10a      	bne.n	8009dca <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009db8:	f383 8811 	msr	BASEPRI, r3
 8009dbc:	f3bf 8f6f 	isb	sy
 8009dc0:	f3bf 8f4f 	dsb	sy
 8009dc4:	617b      	str	r3, [r7, #20]
}
 8009dc6:	bf00      	nop
 8009dc8:	e7fe      	b.n	8009dc8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dcc:	699a      	ldr	r2, [r3, #24]
 8009dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd0:	18d1      	adds	r1, r2, r3
 8009dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009dd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009dd8:	f7ff ff06 	bl	8009be8 <prvInsertTimerInActiveList>
					break;
 8009ddc:	e015      	b.n	8009e0a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009de0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009de4:	f003 0302 	and.w	r3, r3, #2
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d103      	bne.n	8009df4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009dec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009dee:	f000 fbdf 	bl	800a5b0 <vPortFree>
 8009df2:	e00a      	b.n	8009e0a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009df6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009dfa:	f023 0301 	bic.w	r3, r3, #1
 8009dfe:	b2da      	uxtb	r2, r3
 8009e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009e06:	e000      	b.n	8009e0a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009e08:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009e0a:	4b08      	ldr	r3, [pc, #32]	; (8009e2c <prvProcessReceivedCommands+0x1c0>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	1d39      	adds	r1, r7, #4
 8009e10:	2200      	movs	r2, #0
 8009e12:	4618      	mov	r0, r3
 8009e14:	f7fe fbec 	bl	80085f0 <xQueueReceive>
 8009e18:	4603      	mov	r3, r0
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	f47f af2a 	bne.w	8009c74 <prvProcessReceivedCommands+0x8>
	}
}
 8009e20:	bf00      	nop
 8009e22:	bf00      	nop
 8009e24:	3730      	adds	r7, #48	; 0x30
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bd80      	pop	{r7, pc}
 8009e2a:	bf00      	nop
 8009e2c:	20000f2c 	.word	0x20000f2c

08009e30 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b088      	sub	sp, #32
 8009e34:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009e36:	e048      	b.n	8009eca <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009e38:	4b2d      	ldr	r3, [pc, #180]	; (8009ef0 <prvSwitchTimerLists+0xc0>)
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	68db      	ldr	r3, [r3, #12]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e42:	4b2b      	ldr	r3, [pc, #172]	; (8009ef0 <prvSwitchTimerLists+0xc0>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	68db      	ldr	r3, [r3, #12]
 8009e48:	68db      	ldr	r3, [r3, #12]
 8009e4a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	3304      	adds	r3, #4
 8009e50:	4618      	mov	r0, r3
 8009e52:	f7fe f905 	bl	8008060 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	6a1b      	ldr	r3, [r3, #32]
 8009e5a:	68f8      	ldr	r0, [r7, #12]
 8009e5c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e64:	f003 0304 	and.w	r3, r3, #4
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d02e      	beq.n	8009eca <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	699b      	ldr	r3, [r3, #24]
 8009e70:	693a      	ldr	r2, [r7, #16]
 8009e72:	4413      	add	r3, r2
 8009e74:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009e76:	68ba      	ldr	r2, [r7, #8]
 8009e78:	693b      	ldr	r3, [r7, #16]
 8009e7a:	429a      	cmp	r2, r3
 8009e7c:	d90e      	bls.n	8009e9c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	68ba      	ldr	r2, [r7, #8]
 8009e82:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	68fa      	ldr	r2, [r7, #12]
 8009e88:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009e8a:	4b19      	ldr	r3, [pc, #100]	; (8009ef0 <prvSwitchTimerLists+0xc0>)
 8009e8c:	681a      	ldr	r2, [r3, #0]
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	3304      	adds	r3, #4
 8009e92:	4619      	mov	r1, r3
 8009e94:	4610      	mov	r0, r2
 8009e96:	f7fe f8aa 	bl	8007fee <vListInsert>
 8009e9a:	e016      	b.n	8009eca <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	9300      	str	r3, [sp, #0]
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	693a      	ldr	r2, [r7, #16]
 8009ea4:	2100      	movs	r1, #0
 8009ea6:	68f8      	ldr	r0, [r7, #12]
 8009ea8:	f7ff fd60 	bl	800996c <xTimerGenericCommand>
 8009eac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d10a      	bne.n	8009eca <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eb8:	f383 8811 	msr	BASEPRI, r3
 8009ebc:	f3bf 8f6f 	isb	sy
 8009ec0:	f3bf 8f4f 	dsb	sy
 8009ec4:	603b      	str	r3, [r7, #0]
}
 8009ec6:	bf00      	nop
 8009ec8:	e7fe      	b.n	8009ec8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009eca:	4b09      	ldr	r3, [pc, #36]	; (8009ef0 <prvSwitchTimerLists+0xc0>)
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d1b1      	bne.n	8009e38 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009ed4:	4b06      	ldr	r3, [pc, #24]	; (8009ef0 <prvSwitchTimerLists+0xc0>)
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009eda:	4b06      	ldr	r3, [pc, #24]	; (8009ef4 <prvSwitchTimerLists+0xc4>)
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	4a04      	ldr	r2, [pc, #16]	; (8009ef0 <prvSwitchTimerLists+0xc0>)
 8009ee0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009ee2:	4a04      	ldr	r2, [pc, #16]	; (8009ef4 <prvSwitchTimerLists+0xc4>)
 8009ee4:	697b      	ldr	r3, [r7, #20]
 8009ee6:	6013      	str	r3, [r2, #0]
}
 8009ee8:	bf00      	nop
 8009eea:	3718      	adds	r7, #24
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bd80      	pop	{r7, pc}
 8009ef0:	20000f24 	.word	0x20000f24
 8009ef4:	20000f28 	.word	0x20000f28

08009ef8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b082      	sub	sp, #8
 8009efc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009efe:	f000 f969 	bl	800a1d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009f02:	4b15      	ldr	r3, [pc, #84]	; (8009f58 <prvCheckForValidListAndQueue+0x60>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d120      	bne.n	8009f4c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009f0a:	4814      	ldr	r0, [pc, #80]	; (8009f5c <prvCheckForValidListAndQueue+0x64>)
 8009f0c:	f7fe f81e 	bl	8007f4c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009f10:	4813      	ldr	r0, [pc, #76]	; (8009f60 <prvCheckForValidListAndQueue+0x68>)
 8009f12:	f7fe f81b 	bl	8007f4c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009f16:	4b13      	ldr	r3, [pc, #76]	; (8009f64 <prvCheckForValidListAndQueue+0x6c>)
 8009f18:	4a10      	ldr	r2, [pc, #64]	; (8009f5c <prvCheckForValidListAndQueue+0x64>)
 8009f1a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009f1c:	4b12      	ldr	r3, [pc, #72]	; (8009f68 <prvCheckForValidListAndQueue+0x70>)
 8009f1e:	4a10      	ldr	r2, [pc, #64]	; (8009f60 <prvCheckForValidListAndQueue+0x68>)
 8009f20:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009f22:	2300      	movs	r3, #0
 8009f24:	9300      	str	r3, [sp, #0]
 8009f26:	4b11      	ldr	r3, [pc, #68]	; (8009f6c <prvCheckForValidListAndQueue+0x74>)
 8009f28:	4a11      	ldr	r2, [pc, #68]	; (8009f70 <prvCheckForValidListAndQueue+0x78>)
 8009f2a:	2110      	movs	r1, #16
 8009f2c:	200a      	movs	r0, #10
 8009f2e:	f7fe f929 	bl	8008184 <xQueueGenericCreateStatic>
 8009f32:	4603      	mov	r3, r0
 8009f34:	4a08      	ldr	r2, [pc, #32]	; (8009f58 <prvCheckForValidListAndQueue+0x60>)
 8009f36:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009f38:	4b07      	ldr	r3, [pc, #28]	; (8009f58 <prvCheckForValidListAndQueue+0x60>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d005      	beq.n	8009f4c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009f40:	4b05      	ldr	r3, [pc, #20]	; (8009f58 <prvCheckForValidListAndQueue+0x60>)
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	490b      	ldr	r1, [pc, #44]	; (8009f74 <prvCheckForValidListAndQueue+0x7c>)
 8009f46:	4618      	mov	r0, r3
 8009f48:	f7fe fd42 	bl	80089d0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009f4c:	f000 f972 	bl	800a234 <vPortExitCritical>
}
 8009f50:	bf00      	nop
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}
 8009f56:	bf00      	nop
 8009f58:	20000f2c 	.word	0x20000f2c
 8009f5c:	20000efc 	.word	0x20000efc
 8009f60:	20000f10 	.word	0x20000f10
 8009f64:	20000f24 	.word	0x20000f24
 8009f68:	20000f28 	.word	0x20000f28
 8009f6c:	20000fd8 	.word	0x20000fd8
 8009f70:	20000f38 	.word	0x20000f38
 8009f74:	0800b880 	.word	0x0800b880

08009f78 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009f78:	b480      	push	{r7}
 8009f7a:	b085      	sub	sp, #20
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	60f8      	str	r0, [r7, #12]
 8009f80:	60b9      	str	r1, [r7, #8]
 8009f82:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	3b04      	subs	r3, #4
 8009f88:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009f90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	3b04      	subs	r3, #4
 8009f96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009f98:	68bb      	ldr	r3, [r7, #8]
 8009f9a:	f023 0201 	bic.w	r2, r3, #1
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	3b04      	subs	r3, #4
 8009fa6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009fa8:	4a0c      	ldr	r2, [pc, #48]	; (8009fdc <pxPortInitialiseStack+0x64>)
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	3b14      	subs	r3, #20
 8009fb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009fb4:	687a      	ldr	r2, [r7, #4]
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	3b04      	subs	r3, #4
 8009fbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	f06f 0202 	mvn.w	r2, #2
 8009fc6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	3b20      	subs	r3, #32
 8009fcc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009fce:	68fb      	ldr	r3, [r7, #12]
}
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	3714      	adds	r7, #20
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fda:	4770      	bx	lr
 8009fdc:	08009fe1 	.word	0x08009fe1

08009fe0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009fe0:	b480      	push	{r7}
 8009fe2:	b085      	sub	sp, #20
 8009fe4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009fea:	4b12      	ldr	r3, [pc, #72]	; (800a034 <prvTaskExitError+0x54>)
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009ff2:	d00a      	beq.n	800a00a <prvTaskExitError+0x2a>
	__asm volatile
 8009ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ff8:	f383 8811 	msr	BASEPRI, r3
 8009ffc:	f3bf 8f6f 	isb	sy
 800a000:	f3bf 8f4f 	dsb	sy
 800a004:	60fb      	str	r3, [r7, #12]
}
 800a006:	bf00      	nop
 800a008:	e7fe      	b.n	800a008 <prvTaskExitError+0x28>
	__asm volatile
 800a00a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a00e:	f383 8811 	msr	BASEPRI, r3
 800a012:	f3bf 8f6f 	isb	sy
 800a016:	f3bf 8f4f 	dsb	sy
 800a01a:	60bb      	str	r3, [r7, #8]
}
 800a01c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a01e:	bf00      	nop
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d0fc      	beq.n	800a020 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a026:	bf00      	nop
 800a028:	bf00      	nop
 800a02a:	3714      	adds	r7, #20
 800a02c:	46bd      	mov	sp, r7
 800a02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a032:	4770      	bx	lr
 800a034:	20000098 	.word	0x20000098
	...

0800a040 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a040:	4b07      	ldr	r3, [pc, #28]	; (800a060 <pxCurrentTCBConst2>)
 800a042:	6819      	ldr	r1, [r3, #0]
 800a044:	6808      	ldr	r0, [r1, #0]
 800a046:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a04a:	f380 8809 	msr	PSP, r0
 800a04e:	f3bf 8f6f 	isb	sy
 800a052:	f04f 0000 	mov.w	r0, #0
 800a056:	f380 8811 	msr	BASEPRI, r0
 800a05a:	4770      	bx	lr
 800a05c:	f3af 8000 	nop.w

0800a060 <pxCurrentTCBConst2>:
 800a060:	200009fc 	.word	0x200009fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a064:	bf00      	nop
 800a066:	bf00      	nop

0800a068 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a068:	4808      	ldr	r0, [pc, #32]	; (800a08c <prvPortStartFirstTask+0x24>)
 800a06a:	6800      	ldr	r0, [r0, #0]
 800a06c:	6800      	ldr	r0, [r0, #0]
 800a06e:	f380 8808 	msr	MSP, r0
 800a072:	f04f 0000 	mov.w	r0, #0
 800a076:	f380 8814 	msr	CONTROL, r0
 800a07a:	b662      	cpsie	i
 800a07c:	b661      	cpsie	f
 800a07e:	f3bf 8f4f 	dsb	sy
 800a082:	f3bf 8f6f 	isb	sy
 800a086:	df00      	svc	0
 800a088:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a08a:	bf00      	nop
 800a08c:	e000ed08 	.word	0xe000ed08

0800a090 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b086      	sub	sp, #24
 800a094:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a096:	4b46      	ldr	r3, [pc, #280]	; (800a1b0 <xPortStartScheduler+0x120>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	4a46      	ldr	r2, [pc, #280]	; (800a1b4 <xPortStartScheduler+0x124>)
 800a09c:	4293      	cmp	r3, r2
 800a09e:	d10a      	bne.n	800a0b6 <xPortStartScheduler+0x26>
	__asm volatile
 800a0a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0a4:	f383 8811 	msr	BASEPRI, r3
 800a0a8:	f3bf 8f6f 	isb	sy
 800a0ac:	f3bf 8f4f 	dsb	sy
 800a0b0:	613b      	str	r3, [r7, #16]
}
 800a0b2:	bf00      	nop
 800a0b4:	e7fe      	b.n	800a0b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a0b6:	4b3e      	ldr	r3, [pc, #248]	; (800a1b0 <xPortStartScheduler+0x120>)
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	4a3f      	ldr	r2, [pc, #252]	; (800a1b8 <xPortStartScheduler+0x128>)
 800a0bc:	4293      	cmp	r3, r2
 800a0be:	d10a      	bne.n	800a0d6 <xPortStartScheduler+0x46>
	__asm volatile
 800a0c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0c4:	f383 8811 	msr	BASEPRI, r3
 800a0c8:	f3bf 8f6f 	isb	sy
 800a0cc:	f3bf 8f4f 	dsb	sy
 800a0d0:	60fb      	str	r3, [r7, #12]
}
 800a0d2:	bf00      	nop
 800a0d4:	e7fe      	b.n	800a0d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a0d6:	4b39      	ldr	r3, [pc, #228]	; (800a1bc <xPortStartScheduler+0x12c>)
 800a0d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a0da:	697b      	ldr	r3, [r7, #20]
 800a0dc:	781b      	ldrb	r3, [r3, #0]
 800a0de:	b2db      	uxtb	r3, r3
 800a0e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a0e2:	697b      	ldr	r3, [r7, #20]
 800a0e4:	22ff      	movs	r2, #255	; 0xff
 800a0e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a0e8:	697b      	ldr	r3, [r7, #20]
 800a0ea:	781b      	ldrb	r3, [r3, #0]
 800a0ec:	b2db      	uxtb	r3, r3
 800a0ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a0f0:	78fb      	ldrb	r3, [r7, #3]
 800a0f2:	b2db      	uxtb	r3, r3
 800a0f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a0f8:	b2da      	uxtb	r2, r3
 800a0fa:	4b31      	ldr	r3, [pc, #196]	; (800a1c0 <xPortStartScheduler+0x130>)
 800a0fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a0fe:	4b31      	ldr	r3, [pc, #196]	; (800a1c4 <xPortStartScheduler+0x134>)
 800a100:	2207      	movs	r2, #7
 800a102:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a104:	e009      	b.n	800a11a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a106:	4b2f      	ldr	r3, [pc, #188]	; (800a1c4 <xPortStartScheduler+0x134>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	3b01      	subs	r3, #1
 800a10c:	4a2d      	ldr	r2, [pc, #180]	; (800a1c4 <xPortStartScheduler+0x134>)
 800a10e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a110:	78fb      	ldrb	r3, [r7, #3]
 800a112:	b2db      	uxtb	r3, r3
 800a114:	005b      	lsls	r3, r3, #1
 800a116:	b2db      	uxtb	r3, r3
 800a118:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a11a:	78fb      	ldrb	r3, [r7, #3]
 800a11c:	b2db      	uxtb	r3, r3
 800a11e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a122:	2b80      	cmp	r3, #128	; 0x80
 800a124:	d0ef      	beq.n	800a106 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a126:	4b27      	ldr	r3, [pc, #156]	; (800a1c4 <xPortStartScheduler+0x134>)
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	f1c3 0307 	rsb	r3, r3, #7
 800a12e:	2b04      	cmp	r3, #4
 800a130:	d00a      	beq.n	800a148 <xPortStartScheduler+0xb8>
	__asm volatile
 800a132:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a136:	f383 8811 	msr	BASEPRI, r3
 800a13a:	f3bf 8f6f 	isb	sy
 800a13e:	f3bf 8f4f 	dsb	sy
 800a142:	60bb      	str	r3, [r7, #8]
}
 800a144:	bf00      	nop
 800a146:	e7fe      	b.n	800a146 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a148:	4b1e      	ldr	r3, [pc, #120]	; (800a1c4 <xPortStartScheduler+0x134>)
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	021b      	lsls	r3, r3, #8
 800a14e:	4a1d      	ldr	r2, [pc, #116]	; (800a1c4 <xPortStartScheduler+0x134>)
 800a150:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a152:	4b1c      	ldr	r3, [pc, #112]	; (800a1c4 <xPortStartScheduler+0x134>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a15a:	4a1a      	ldr	r2, [pc, #104]	; (800a1c4 <xPortStartScheduler+0x134>)
 800a15c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	b2da      	uxtb	r2, r3
 800a162:	697b      	ldr	r3, [r7, #20]
 800a164:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a166:	4b18      	ldr	r3, [pc, #96]	; (800a1c8 <xPortStartScheduler+0x138>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	4a17      	ldr	r2, [pc, #92]	; (800a1c8 <xPortStartScheduler+0x138>)
 800a16c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a170:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a172:	4b15      	ldr	r3, [pc, #84]	; (800a1c8 <xPortStartScheduler+0x138>)
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	4a14      	ldr	r2, [pc, #80]	; (800a1c8 <xPortStartScheduler+0x138>)
 800a178:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a17c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a17e:	f000 f8dd 	bl	800a33c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a182:	4b12      	ldr	r3, [pc, #72]	; (800a1cc <xPortStartScheduler+0x13c>)
 800a184:	2200      	movs	r2, #0
 800a186:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a188:	f000 f8fc 	bl	800a384 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a18c:	4b10      	ldr	r3, [pc, #64]	; (800a1d0 <xPortStartScheduler+0x140>)
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	4a0f      	ldr	r2, [pc, #60]	; (800a1d0 <xPortStartScheduler+0x140>)
 800a192:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a196:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a198:	f7ff ff66 	bl	800a068 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a19c:	f7ff f848 	bl	8009230 <vTaskSwitchContext>
	prvTaskExitError();
 800a1a0:	f7ff ff1e 	bl	8009fe0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a1a4:	2300      	movs	r3, #0
}
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	3718      	adds	r7, #24
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd80      	pop	{r7, pc}
 800a1ae:	bf00      	nop
 800a1b0:	e000ed00 	.word	0xe000ed00
 800a1b4:	410fc271 	.word	0x410fc271
 800a1b8:	410fc270 	.word	0x410fc270
 800a1bc:	e000e400 	.word	0xe000e400
 800a1c0:	20001028 	.word	0x20001028
 800a1c4:	2000102c 	.word	0x2000102c
 800a1c8:	e000ed20 	.word	0xe000ed20
 800a1cc:	20000098 	.word	0x20000098
 800a1d0:	e000ef34 	.word	0xe000ef34

0800a1d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	b083      	sub	sp, #12
 800a1d8:	af00      	add	r7, sp, #0
	__asm volatile
 800a1da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1de:	f383 8811 	msr	BASEPRI, r3
 800a1e2:	f3bf 8f6f 	isb	sy
 800a1e6:	f3bf 8f4f 	dsb	sy
 800a1ea:	607b      	str	r3, [r7, #4]
}
 800a1ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a1ee:	4b0f      	ldr	r3, [pc, #60]	; (800a22c <vPortEnterCritical+0x58>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	3301      	adds	r3, #1
 800a1f4:	4a0d      	ldr	r2, [pc, #52]	; (800a22c <vPortEnterCritical+0x58>)
 800a1f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a1f8:	4b0c      	ldr	r3, [pc, #48]	; (800a22c <vPortEnterCritical+0x58>)
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	2b01      	cmp	r3, #1
 800a1fe:	d10f      	bne.n	800a220 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a200:	4b0b      	ldr	r3, [pc, #44]	; (800a230 <vPortEnterCritical+0x5c>)
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	b2db      	uxtb	r3, r3
 800a206:	2b00      	cmp	r3, #0
 800a208:	d00a      	beq.n	800a220 <vPortEnterCritical+0x4c>
	__asm volatile
 800a20a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a20e:	f383 8811 	msr	BASEPRI, r3
 800a212:	f3bf 8f6f 	isb	sy
 800a216:	f3bf 8f4f 	dsb	sy
 800a21a:	603b      	str	r3, [r7, #0]
}
 800a21c:	bf00      	nop
 800a21e:	e7fe      	b.n	800a21e <vPortEnterCritical+0x4a>
	}
}
 800a220:	bf00      	nop
 800a222:	370c      	adds	r7, #12
 800a224:	46bd      	mov	sp, r7
 800a226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22a:	4770      	bx	lr
 800a22c:	20000098 	.word	0x20000098
 800a230:	e000ed04 	.word	0xe000ed04

0800a234 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a234:	b480      	push	{r7}
 800a236:	b083      	sub	sp, #12
 800a238:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a23a:	4b12      	ldr	r3, [pc, #72]	; (800a284 <vPortExitCritical+0x50>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d10a      	bne.n	800a258 <vPortExitCritical+0x24>
	__asm volatile
 800a242:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a246:	f383 8811 	msr	BASEPRI, r3
 800a24a:	f3bf 8f6f 	isb	sy
 800a24e:	f3bf 8f4f 	dsb	sy
 800a252:	607b      	str	r3, [r7, #4]
}
 800a254:	bf00      	nop
 800a256:	e7fe      	b.n	800a256 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a258:	4b0a      	ldr	r3, [pc, #40]	; (800a284 <vPortExitCritical+0x50>)
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	3b01      	subs	r3, #1
 800a25e:	4a09      	ldr	r2, [pc, #36]	; (800a284 <vPortExitCritical+0x50>)
 800a260:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a262:	4b08      	ldr	r3, [pc, #32]	; (800a284 <vPortExitCritical+0x50>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d105      	bne.n	800a276 <vPortExitCritical+0x42>
 800a26a:	2300      	movs	r3, #0
 800a26c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	f383 8811 	msr	BASEPRI, r3
}
 800a274:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a276:	bf00      	nop
 800a278:	370c      	adds	r7, #12
 800a27a:	46bd      	mov	sp, r7
 800a27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a280:	4770      	bx	lr
 800a282:	bf00      	nop
 800a284:	20000098 	.word	0x20000098
	...

0800a290 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a290:	f3ef 8009 	mrs	r0, PSP
 800a294:	f3bf 8f6f 	isb	sy
 800a298:	4b15      	ldr	r3, [pc, #84]	; (800a2f0 <pxCurrentTCBConst>)
 800a29a:	681a      	ldr	r2, [r3, #0]
 800a29c:	f01e 0f10 	tst.w	lr, #16
 800a2a0:	bf08      	it	eq
 800a2a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a2a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2aa:	6010      	str	r0, [r2, #0]
 800a2ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a2b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a2b4:	f380 8811 	msr	BASEPRI, r0
 800a2b8:	f3bf 8f4f 	dsb	sy
 800a2bc:	f3bf 8f6f 	isb	sy
 800a2c0:	f7fe ffb6 	bl	8009230 <vTaskSwitchContext>
 800a2c4:	f04f 0000 	mov.w	r0, #0
 800a2c8:	f380 8811 	msr	BASEPRI, r0
 800a2cc:	bc09      	pop	{r0, r3}
 800a2ce:	6819      	ldr	r1, [r3, #0]
 800a2d0:	6808      	ldr	r0, [r1, #0]
 800a2d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2d6:	f01e 0f10 	tst.w	lr, #16
 800a2da:	bf08      	it	eq
 800a2dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a2e0:	f380 8809 	msr	PSP, r0
 800a2e4:	f3bf 8f6f 	isb	sy
 800a2e8:	4770      	bx	lr
 800a2ea:	bf00      	nop
 800a2ec:	f3af 8000 	nop.w

0800a2f0 <pxCurrentTCBConst>:
 800a2f0:	200009fc 	.word	0x200009fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a2f4:	bf00      	nop
 800a2f6:	bf00      	nop

0800a2f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b082      	sub	sp, #8
 800a2fc:	af00      	add	r7, sp, #0
	__asm volatile
 800a2fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a302:	f383 8811 	msr	BASEPRI, r3
 800a306:	f3bf 8f6f 	isb	sy
 800a30a:	f3bf 8f4f 	dsb	sy
 800a30e:	607b      	str	r3, [r7, #4]
}
 800a310:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a312:	f7fe fed3 	bl	80090bc <xTaskIncrementTick>
 800a316:	4603      	mov	r3, r0
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d003      	beq.n	800a324 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a31c:	4b06      	ldr	r3, [pc, #24]	; (800a338 <xPortSysTickHandler+0x40>)
 800a31e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a322:	601a      	str	r2, [r3, #0]
 800a324:	2300      	movs	r3, #0
 800a326:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	f383 8811 	msr	BASEPRI, r3
}
 800a32e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a330:	bf00      	nop
 800a332:	3708      	adds	r7, #8
 800a334:	46bd      	mov	sp, r7
 800a336:	bd80      	pop	{r7, pc}
 800a338:	e000ed04 	.word	0xe000ed04

0800a33c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a33c:	b480      	push	{r7}
 800a33e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a340:	4b0b      	ldr	r3, [pc, #44]	; (800a370 <vPortSetupTimerInterrupt+0x34>)
 800a342:	2200      	movs	r2, #0
 800a344:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a346:	4b0b      	ldr	r3, [pc, #44]	; (800a374 <vPortSetupTimerInterrupt+0x38>)
 800a348:	2200      	movs	r2, #0
 800a34a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a34c:	4b0a      	ldr	r3, [pc, #40]	; (800a378 <vPortSetupTimerInterrupt+0x3c>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	4a0a      	ldr	r2, [pc, #40]	; (800a37c <vPortSetupTimerInterrupt+0x40>)
 800a352:	fba2 2303 	umull	r2, r3, r2, r3
 800a356:	099b      	lsrs	r3, r3, #6
 800a358:	4a09      	ldr	r2, [pc, #36]	; (800a380 <vPortSetupTimerInterrupt+0x44>)
 800a35a:	3b01      	subs	r3, #1
 800a35c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a35e:	4b04      	ldr	r3, [pc, #16]	; (800a370 <vPortSetupTimerInterrupt+0x34>)
 800a360:	2207      	movs	r2, #7
 800a362:	601a      	str	r2, [r3, #0]
}
 800a364:	bf00      	nop
 800a366:	46bd      	mov	sp, r7
 800a368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36c:	4770      	bx	lr
 800a36e:	bf00      	nop
 800a370:	e000e010 	.word	0xe000e010
 800a374:	e000e018 	.word	0xe000e018
 800a378:	20000000 	.word	0x20000000
 800a37c:	10624dd3 	.word	0x10624dd3
 800a380:	e000e014 	.word	0xe000e014

0800a384 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a384:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a394 <vPortEnableVFP+0x10>
 800a388:	6801      	ldr	r1, [r0, #0]
 800a38a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a38e:	6001      	str	r1, [r0, #0]
 800a390:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a392:	bf00      	nop
 800a394:	e000ed88 	.word	0xe000ed88

0800a398 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a398:	b480      	push	{r7}
 800a39a:	b085      	sub	sp, #20
 800a39c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a39e:	f3ef 8305 	mrs	r3, IPSR
 800a3a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	2b0f      	cmp	r3, #15
 800a3a8:	d914      	bls.n	800a3d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a3aa:	4a17      	ldr	r2, [pc, #92]	; (800a408 <vPortValidateInterruptPriority+0x70>)
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	4413      	add	r3, r2
 800a3b0:	781b      	ldrb	r3, [r3, #0]
 800a3b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a3b4:	4b15      	ldr	r3, [pc, #84]	; (800a40c <vPortValidateInterruptPriority+0x74>)
 800a3b6:	781b      	ldrb	r3, [r3, #0]
 800a3b8:	7afa      	ldrb	r2, [r7, #11]
 800a3ba:	429a      	cmp	r2, r3
 800a3bc:	d20a      	bcs.n	800a3d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a3be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3c2:	f383 8811 	msr	BASEPRI, r3
 800a3c6:	f3bf 8f6f 	isb	sy
 800a3ca:	f3bf 8f4f 	dsb	sy
 800a3ce:	607b      	str	r3, [r7, #4]
}
 800a3d0:	bf00      	nop
 800a3d2:	e7fe      	b.n	800a3d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a3d4:	4b0e      	ldr	r3, [pc, #56]	; (800a410 <vPortValidateInterruptPriority+0x78>)
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a3dc:	4b0d      	ldr	r3, [pc, #52]	; (800a414 <vPortValidateInterruptPriority+0x7c>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	429a      	cmp	r2, r3
 800a3e2:	d90a      	bls.n	800a3fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a3e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3e8:	f383 8811 	msr	BASEPRI, r3
 800a3ec:	f3bf 8f6f 	isb	sy
 800a3f0:	f3bf 8f4f 	dsb	sy
 800a3f4:	603b      	str	r3, [r7, #0]
}
 800a3f6:	bf00      	nop
 800a3f8:	e7fe      	b.n	800a3f8 <vPortValidateInterruptPriority+0x60>
	}
 800a3fa:	bf00      	nop
 800a3fc:	3714      	adds	r7, #20
 800a3fe:	46bd      	mov	sp, r7
 800a400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a404:	4770      	bx	lr
 800a406:	bf00      	nop
 800a408:	e000e3f0 	.word	0xe000e3f0
 800a40c:	20001028 	.word	0x20001028
 800a410:	e000ed0c 	.word	0xe000ed0c
 800a414:	2000102c 	.word	0x2000102c

0800a418 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b08a      	sub	sp, #40	; 0x28
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a420:	2300      	movs	r3, #0
 800a422:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a424:	f7fe fd8e 	bl	8008f44 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a428:	4b5b      	ldr	r3, [pc, #364]	; (800a598 <pvPortMalloc+0x180>)
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d101      	bne.n	800a434 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a430:	f000 f920 	bl	800a674 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a434:	4b59      	ldr	r3, [pc, #356]	; (800a59c <pvPortMalloc+0x184>)
 800a436:	681a      	ldr	r2, [r3, #0]
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	4013      	ands	r3, r2
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	f040 8093 	bne.w	800a568 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d01d      	beq.n	800a484 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a448:	2208      	movs	r2, #8
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	4413      	add	r3, r2
 800a44e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	f003 0307 	and.w	r3, r3, #7
 800a456:	2b00      	cmp	r3, #0
 800a458:	d014      	beq.n	800a484 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	f023 0307 	bic.w	r3, r3, #7
 800a460:	3308      	adds	r3, #8
 800a462:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	f003 0307 	and.w	r3, r3, #7
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d00a      	beq.n	800a484 <pvPortMalloc+0x6c>
	__asm volatile
 800a46e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a472:	f383 8811 	msr	BASEPRI, r3
 800a476:	f3bf 8f6f 	isb	sy
 800a47a:	f3bf 8f4f 	dsb	sy
 800a47e:	617b      	str	r3, [r7, #20]
}
 800a480:	bf00      	nop
 800a482:	e7fe      	b.n	800a482 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d06e      	beq.n	800a568 <pvPortMalloc+0x150>
 800a48a:	4b45      	ldr	r3, [pc, #276]	; (800a5a0 <pvPortMalloc+0x188>)
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	687a      	ldr	r2, [r7, #4]
 800a490:	429a      	cmp	r2, r3
 800a492:	d869      	bhi.n	800a568 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a494:	4b43      	ldr	r3, [pc, #268]	; (800a5a4 <pvPortMalloc+0x18c>)
 800a496:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a498:	4b42      	ldr	r3, [pc, #264]	; (800a5a4 <pvPortMalloc+0x18c>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a49e:	e004      	b.n	800a4aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ac:	685b      	ldr	r3, [r3, #4]
 800a4ae:	687a      	ldr	r2, [r7, #4]
 800a4b0:	429a      	cmp	r2, r3
 800a4b2:	d903      	bls.n	800a4bc <pvPortMalloc+0xa4>
 800a4b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d1f1      	bne.n	800a4a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a4bc:	4b36      	ldr	r3, [pc, #216]	; (800a598 <pvPortMalloc+0x180>)
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4c2:	429a      	cmp	r2, r3
 800a4c4:	d050      	beq.n	800a568 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a4c6:	6a3b      	ldr	r3, [r7, #32]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	2208      	movs	r2, #8
 800a4cc:	4413      	add	r3, r2
 800a4ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4d2:	681a      	ldr	r2, [r3, #0]
 800a4d4:	6a3b      	ldr	r3, [r7, #32]
 800a4d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4da:	685a      	ldr	r2, [r3, #4]
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	1ad2      	subs	r2, r2, r3
 800a4e0:	2308      	movs	r3, #8
 800a4e2:	005b      	lsls	r3, r3, #1
 800a4e4:	429a      	cmp	r2, r3
 800a4e6:	d91f      	bls.n	800a528 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a4e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	4413      	add	r3, r2
 800a4ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a4f0:	69bb      	ldr	r3, [r7, #24]
 800a4f2:	f003 0307 	and.w	r3, r3, #7
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d00a      	beq.n	800a510 <pvPortMalloc+0xf8>
	__asm volatile
 800a4fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4fe:	f383 8811 	msr	BASEPRI, r3
 800a502:	f3bf 8f6f 	isb	sy
 800a506:	f3bf 8f4f 	dsb	sy
 800a50a:	613b      	str	r3, [r7, #16]
}
 800a50c:	bf00      	nop
 800a50e:	e7fe      	b.n	800a50e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a512:	685a      	ldr	r2, [r3, #4]
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	1ad2      	subs	r2, r2, r3
 800a518:	69bb      	ldr	r3, [r7, #24]
 800a51a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a51c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a51e:	687a      	ldr	r2, [r7, #4]
 800a520:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a522:	69b8      	ldr	r0, [r7, #24]
 800a524:	f000 f908 	bl	800a738 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a528:	4b1d      	ldr	r3, [pc, #116]	; (800a5a0 <pvPortMalloc+0x188>)
 800a52a:	681a      	ldr	r2, [r3, #0]
 800a52c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a52e:	685b      	ldr	r3, [r3, #4]
 800a530:	1ad3      	subs	r3, r2, r3
 800a532:	4a1b      	ldr	r2, [pc, #108]	; (800a5a0 <pvPortMalloc+0x188>)
 800a534:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a536:	4b1a      	ldr	r3, [pc, #104]	; (800a5a0 <pvPortMalloc+0x188>)
 800a538:	681a      	ldr	r2, [r3, #0]
 800a53a:	4b1b      	ldr	r3, [pc, #108]	; (800a5a8 <pvPortMalloc+0x190>)
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	429a      	cmp	r2, r3
 800a540:	d203      	bcs.n	800a54a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a542:	4b17      	ldr	r3, [pc, #92]	; (800a5a0 <pvPortMalloc+0x188>)
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	4a18      	ldr	r2, [pc, #96]	; (800a5a8 <pvPortMalloc+0x190>)
 800a548:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a54c:	685a      	ldr	r2, [r3, #4]
 800a54e:	4b13      	ldr	r3, [pc, #76]	; (800a59c <pvPortMalloc+0x184>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	431a      	orrs	r2, r3
 800a554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a556:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a55a:	2200      	movs	r2, #0
 800a55c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a55e:	4b13      	ldr	r3, [pc, #76]	; (800a5ac <pvPortMalloc+0x194>)
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	3301      	adds	r3, #1
 800a564:	4a11      	ldr	r2, [pc, #68]	; (800a5ac <pvPortMalloc+0x194>)
 800a566:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a568:	f7fe fcfa 	bl	8008f60 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a56c:	69fb      	ldr	r3, [r7, #28]
 800a56e:	f003 0307 	and.w	r3, r3, #7
 800a572:	2b00      	cmp	r3, #0
 800a574:	d00a      	beq.n	800a58c <pvPortMalloc+0x174>
	__asm volatile
 800a576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a57a:	f383 8811 	msr	BASEPRI, r3
 800a57e:	f3bf 8f6f 	isb	sy
 800a582:	f3bf 8f4f 	dsb	sy
 800a586:	60fb      	str	r3, [r7, #12]
}
 800a588:	bf00      	nop
 800a58a:	e7fe      	b.n	800a58a <pvPortMalloc+0x172>
	return pvReturn;
 800a58c:	69fb      	ldr	r3, [r7, #28]
}
 800a58e:	4618      	mov	r0, r3
 800a590:	3728      	adds	r7, #40	; 0x28
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}
 800a596:	bf00      	nop
 800a598:	20004c38 	.word	0x20004c38
 800a59c:	20004c4c 	.word	0x20004c4c
 800a5a0:	20004c3c 	.word	0x20004c3c
 800a5a4:	20004c30 	.word	0x20004c30
 800a5a8:	20004c40 	.word	0x20004c40
 800a5ac:	20004c44 	.word	0x20004c44

0800a5b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b086      	sub	sp, #24
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d04d      	beq.n	800a65e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a5c2:	2308      	movs	r3, #8
 800a5c4:	425b      	negs	r3, r3
 800a5c6:	697a      	ldr	r2, [r7, #20]
 800a5c8:	4413      	add	r3, r2
 800a5ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a5cc:	697b      	ldr	r3, [r7, #20]
 800a5ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a5d0:	693b      	ldr	r3, [r7, #16]
 800a5d2:	685a      	ldr	r2, [r3, #4]
 800a5d4:	4b24      	ldr	r3, [pc, #144]	; (800a668 <vPortFree+0xb8>)
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	4013      	ands	r3, r2
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d10a      	bne.n	800a5f4 <vPortFree+0x44>
	__asm volatile
 800a5de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5e2:	f383 8811 	msr	BASEPRI, r3
 800a5e6:	f3bf 8f6f 	isb	sy
 800a5ea:	f3bf 8f4f 	dsb	sy
 800a5ee:	60fb      	str	r3, [r7, #12]
}
 800a5f0:	bf00      	nop
 800a5f2:	e7fe      	b.n	800a5f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a5f4:	693b      	ldr	r3, [r7, #16]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d00a      	beq.n	800a612 <vPortFree+0x62>
	__asm volatile
 800a5fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a600:	f383 8811 	msr	BASEPRI, r3
 800a604:	f3bf 8f6f 	isb	sy
 800a608:	f3bf 8f4f 	dsb	sy
 800a60c:	60bb      	str	r3, [r7, #8]
}
 800a60e:	bf00      	nop
 800a610:	e7fe      	b.n	800a610 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a612:	693b      	ldr	r3, [r7, #16]
 800a614:	685a      	ldr	r2, [r3, #4]
 800a616:	4b14      	ldr	r3, [pc, #80]	; (800a668 <vPortFree+0xb8>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	4013      	ands	r3, r2
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d01e      	beq.n	800a65e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a620:	693b      	ldr	r3, [r7, #16]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d11a      	bne.n	800a65e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a628:	693b      	ldr	r3, [r7, #16]
 800a62a:	685a      	ldr	r2, [r3, #4]
 800a62c:	4b0e      	ldr	r3, [pc, #56]	; (800a668 <vPortFree+0xb8>)
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	43db      	mvns	r3, r3
 800a632:	401a      	ands	r2, r3
 800a634:	693b      	ldr	r3, [r7, #16]
 800a636:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a638:	f7fe fc84 	bl	8008f44 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a63c:	693b      	ldr	r3, [r7, #16]
 800a63e:	685a      	ldr	r2, [r3, #4]
 800a640:	4b0a      	ldr	r3, [pc, #40]	; (800a66c <vPortFree+0xbc>)
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	4413      	add	r3, r2
 800a646:	4a09      	ldr	r2, [pc, #36]	; (800a66c <vPortFree+0xbc>)
 800a648:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a64a:	6938      	ldr	r0, [r7, #16]
 800a64c:	f000 f874 	bl	800a738 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a650:	4b07      	ldr	r3, [pc, #28]	; (800a670 <vPortFree+0xc0>)
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	3301      	adds	r3, #1
 800a656:	4a06      	ldr	r2, [pc, #24]	; (800a670 <vPortFree+0xc0>)
 800a658:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a65a:	f7fe fc81 	bl	8008f60 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a65e:	bf00      	nop
 800a660:	3718      	adds	r7, #24
 800a662:	46bd      	mov	sp, r7
 800a664:	bd80      	pop	{r7, pc}
 800a666:	bf00      	nop
 800a668:	20004c4c 	.word	0x20004c4c
 800a66c:	20004c3c 	.word	0x20004c3c
 800a670:	20004c48 	.word	0x20004c48

0800a674 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a674:	b480      	push	{r7}
 800a676:	b085      	sub	sp, #20
 800a678:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a67a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a67e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a680:	4b27      	ldr	r3, [pc, #156]	; (800a720 <prvHeapInit+0xac>)
 800a682:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	f003 0307 	and.w	r3, r3, #7
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d00c      	beq.n	800a6a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	3307      	adds	r3, #7
 800a692:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	f023 0307 	bic.w	r3, r3, #7
 800a69a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a69c:	68ba      	ldr	r2, [r7, #8]
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	1ad3      	subs	r3, r2, r3
 800a6a2:	4a1f      	ldr	r2, [pc, #124]	; (800a720 <prvHeapInit+0xac>)
 800a6a4:	4413      	add	r3, r2
 800a6a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a6ac:	4a1d      	ldr	r2, [pc, #116]	; (800a724 <prvHeapInit+0xb0>)
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a6b2:	4b1c      	ldr	r3, [pc, #112]	; (800a724 <prvHeapInit+0xb0>)
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	68ba      	ldr	r2, [r7, #8]
 800a6bc:	4413      	add	r3, r2
 800a6be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a6c0:	2208      	movs	r2, #8
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	1a9b      	subs	r3, r3, r2
 800a6c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	f023 0307 	bic.w	r3, r3, #7
 800a6ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	4a15      	ldr	r2, [pc, #84]	; (800a728 <prvHeapInit+0xb4>)
 800a6d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a6d6:	4b14      	ldr	r3, [pc, #80]	; (800a728 <prvHeapInit+0xb4>)
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	2200      	movs	r2, #0
 800a6dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a6de:	4b12      	ldr	r3, [pc, #72]	; (800a728 <prvHeapInit+0xb4>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	68fa      	ldr	r2, [r7, #12]
 800a6ee:	1ad2      	subs	r2, r2, r3
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a6f4:	4b0c      	ldr	r3, [pc, #48]	; (800a728 <prvHeapInit+0xb4>)
 800a6f6:	681a      	ldr	r2, [r3, #0]
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	685b      	ldr	r3, [r3, #4]
 800a700:	4a0a      	ldr	r2, [pc, #40]	; (800a72c <prvHeapInit+0xb8>)
 800a702:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a704:	683b      	ldr	r3, [r7, #0]
 800a706:	685b      	ldr	r3, [r3, #4]
 800a708:	4a09      	ldr	r2, [pc, #36]	; (800a730 <prvHeapInit+0xbc>)
 800a70a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a70c:	4b09      	ldr	r3, [pc, #36]	; (800a734 <prvHeapInit+0xc0>)
 800a70e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a712:	601a      	str	r2, [r3, #0]
}
 800a714:	bf00      	nop
 800a716:	3714      	adds	r7, #20
 800a718:	46bd      	mov	sp, r7
 800a71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71e:	4770      	bx	lr
 800a720:	20001030 	.word	0x20001030
 800a724:	20004c30 	.word	0x20004c30
 800a728:	20004c38 	.word	0x20004c38
 800a72c:	20004c40 	.word	0x20004c40
 800a730:	20004c3c 	.word	0x20004c3c
 800a734:	20004c4c 	.word	0x20004c4c

0800a738 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a738:	b480      	push	{r7}
 800a73a:	b085      	sub	sp, #20
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a740:	4b28      	ldr	r3, [pc, #160]	; (800a7e4 <prvInsertBlockIntoFreeList+0xac>)
 800a742:	60fb      	str	r3, [r7, #12]
 800a744:	e002      	b.n	800a74c <prvInsertBlockIntoFreeList+0x14>
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	60fb      	str	r3, [r7, #12]
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	687a      	ldr	r2, [r7, #4]
 800a752:	429a      	cmp	r2, r3
 800a754:	d8f7      	bhi.n	800a746 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	685b      	ldr	r3, [r3, #4]
 800a75e:	68ba      	ldr	r2, [r7, #8]
 800a760:	4413      	add	r3, r2
 800a762:	687a      	ldr	r2, [r7, #4]
 800a764:	429a      	cmp	r2, r3
 800a766:	d108      	bne.n	800a77a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	685a      	ldr	r2, [r3, #4]
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	685b      	ldr	r3, [r3, #4]
 800a770:	441a      	add	r2, r3
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	685b      	ldr	r3, [r3, #4]
 800a782:	68ba      	ldr	r2, [r7, #8]
 800a784:	441a      	add	r2, r3
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	429a      	cmp	r2, r3
 800a78c:	d118      	bne.n	800a7c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	681a      	ldr	r2, [r3, #0]
 800a792:	4b15      	ldr	r3, [pc, #84]	; (800a7e8 <prvInsertBlockIntoFreeList+0xb0>)
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	429a      	cmp	r2, r3
 800a798:	d00d      	beq.n	800a7b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	685a      	ldr	r2, [r3, #4]
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	685b      	ldr	r3, [r3, #4]
 800a7a4:	441a      	add	r2, r3
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	681a      	ldr	r2, [r3, #0]
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	601a      	str	r2, [r3, #0]
 800a7b4:	e008      	b.n	800a7c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a7b6:	4b0c      	ldr	r3, [pc, #48]	; (800a7e8 <prvInsertBlockIntoFreeList+0xb0>)
 800a7b8:	681a      	ldr	r2, [r3, #0]
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	601a      	str	r2, [r3, #0]
 800a7be:	e003      	b.n	800a7c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	681a      	ldr	r2, [r3, #0]
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a7c8:	68fa      	ldr	r2, [r7, #12]
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	429a      	cmp	r2, r3
 800a7ce:	d002      	beq.n	800a7d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	687a      	ldr	r2, [r7, #4]
 800a7d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a7d6:	bf00      	nop
 800a7d8:	3714      	adds	r7, #20
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e0:	4770      	bx	lr
 800a7e2:	bf00      	nop
 800a7e4:	20004c30 	.word	0x20004c30
 800a7e8:	20004c38 	.word	0x20004c38

0800a7ec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	4912      	ldr	r1, [pc, #72]	; (800a83c <MX_USB_DEVICE_Init+0x50>)
 800a7f4:	4812      	ldr	r0, [pc, #72]	; (800a840 <MX_USB_DEVICE_Init+0x54>)
 800a7f6:	f7fb ff47 	bl	8006688 <USBD_Init>
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d001      	beq.n	800a804 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a800:	f7f6 f90c 	bl	8000a1c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a804:	490f      	ldr	r1, [pc, #60]	; (800a844 <MX_USB_DEVICE_Init+0x58>)
 800a806:	480e      	ldr	r0, [pc, #56]	; (800a840 <MX_USB_DEVICE_Init+0x54>)
 800a808:	f7fb ff6e 	bl	80066e8 <USBD_RegisterClass>
 800a80c:	4603      	mov	r3, r0
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d001      	beq.n	800a816 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a812:	f7f6 f903 	bl	8000a1c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a816:	490c      	ldr	r1, [pc, #48]	; (800a848 <MX_USB_DEVICE_Init+0x5c>)
 800a818:	4809      	ldr	r0, [pc, #36]	; (800a840 <MX_USB_DEVICE_Init+0x54>)
 800a81a:	f7fb fe5f 	bl	80064dc <USBD_CDC_RegisterInterface>
 800a81e:	4603      	mov	r3, r0
 800a820:	2b00      	cmp	r3, #0
 800a822:	d001      	beq.n	800a828 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a824:	f7f6 f8fa 	bl	8000a1c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a828:	4805      	ldr	r0, [pc, #20]	; (800a840 <MX_USB_DEVICE_Init+0x54>)
 800a82a:	f7fb ff93 	bl	8006754 <USBD_Start>
 800a82e:	4603      	mov	r3, r0
 800a830:	2b00      	cmp	r3, #0
 800a832:	d001      	beq.n	800a838 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a834:	f7f6 f8f2 	bl	8000a1c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a838:	bf00      	nop
 800a83a:	bd80      	pop	{r7, pc}
 800a83c:	200000b0 	.word	0x200000b0
 800a840:	20004c50 	.word	0x20004c50
 800a844:	20000018 	.word	0x20000018
 800a848:	2000009c 	.word	0x2000009c

0800a84c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a850:	2200      	movs	r2, #0
 800a852:	4905      	ldr	r1, [pc, #20]	; (800a868 <CDC_Init_FS+0x1c>)
 800a854:	4805      	ldr	r0, [pc, #20]	; (800a86c <CDC_Init_FS+0x20>)
 800a856:	f7fb fe5b 	bl	8006510 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a85a:	4905      	ldr	r1, [pc, #20]	; (800a870 <CDC_Init_FS+0x24>)
 800a85c:	4803      	ldr	r0, [pc, #12]	; (800a86c <CDC_Init_FS+0x20>)
 800a85e:	f7fb fe79 	bl	8006554 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a862:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a864:	4618      	mov	r0, r3
 800a866:	bd80      	pop	{r7, pc}
 800a868:	2000572c 	.word	0x2000572c
 800a86c:	20004c50 	.word	0x20004c50
 800a870:	20004f2c 	.word	0x20004f2c

0800a874 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a874:	b480      	push	{r7}
 800a876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a878:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a87a:	4618      	mov	r0, r3
 800a87c:	46bd      	mov	sp, r7
 800a87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a882:	4770      	bx	lr

0800a884 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a884:	b480      	push	{r7}
 800a886:	b083      	sub	sp, #12
 800a888:	af00      	add	r7, sp, #0
 800a88a:	4603      	mov	r3, r0
 800a88c:	6039      	str	r1, [r7, #0]
 800a88e:	71fb      	strb	r3, [r7, #7]
 800a890:	4613      	mov	r3, r2
 800a892:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a894:	79fb      	ldrb	r3, [r7, #7]
 800a896:	2b23      	cmp	r3, #35	; 0x23
 800a898:	d84a      	bhi.n	800a930 <CDC_Control_FS+0xac>
 800a89a:	a201      	add	r2, pc, #4	; (adr r2, 800a8a0 <CDC_Control_FS+0x1c>)
 800a89c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8a0:	0800a931 	.word	0x0800a931
 800a8a4:	0800a931 	.word	0x0800a931
 800a8a8:	0800a931 	.word	0x0800a931
 800a8ac:	0800a931 	.word	0x0800a931
 800a8b0:	0800a931 	.word	0x0800a931
 800a8b4:	0800a931 	.word	0x0800a931
 800a8b8:	0800a931 	.word	0x0800a931
 800a8bc:	0800a931 	.word	0x0800a931
 800a8c0:	0800a931 	.word	0x0800a931
 800a8c4:	0800a931 	.word	0x0800a931
 800a8c8:	0800a931 	.word	0x0800a931
 800a8cc:	0800a931 	.word	0x0800a931
 800a8d0:	0800a931 	.word	0x0800a931
 800a8d4:	0800a931 	.word	0x0800a931
 800a8d8:	0800a931 	.word	0x0800a931
 800a8dc:	0800a931 	.word	0x0800a931
 800a8e0:	0800a931 	.word	0x0800a931
 800a8e4:	0800a931 	.word	0x0800a931
 800a8e8:	0800a931 	.word	0x0800a931
 800a8ec:	0800a931 	.word	0x0800a931
 800a8f0:	0800a931 	.word	0x0800a931
 800a8f4:	0800a931 	.word	0x0800a931
 800a8f8:	0800a931 	.word	0x0800a931
 800a8fc:	0800a931 	.word	0x0800a931
 800a900:	0800a931 	.word	0x0800a931
 800a904:	0800a931 	.word	0x0800a931
 800a908:	0800a931 	.word	0x0800a931
 800a90c:	0800a931 	.word	0x0800a931
 800a910:	0800a931 	.word	0x0800a931
 800a914:	0800a931 	.word	0x0800a931
 800a918:	0800a931 	.word	0x0800a931
 800a91c:	0800a931 	.word	0x0800a931
 800a920:	0800a931 	.word	0x0800a931
 800a924:	0800a931 	.word	0x0800a931
 800a928:	0800a931 	.word	0x0800a931
 800a92c:	0800a931 	.word	0x0800a931
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a930:	bf00      	nop
  }

  return (USBD_OK);
 800a932:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a934:	4618      	mov	r0, r3
 800a936:	370c      	adds	r7, #12
 800a938:	46bd      	mov	sp, r7
 800a93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93e:	4770      	bx	lr

0800a940 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b082      	sub	sp, #8
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
 800a948:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a94a:	6879      	ldr	r1, [r7, #4]
 800a94c:	4805      	ldr	r0, [pc, #20]	; (800a964 <CDC_Receive_FS+0x24>)
 800a94e:	f7fb fe01 	bl	8006554 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a952:	4804      	ldr	r0, [pc, #16]	; (800a964 <CDC_Receive_FS+0x24>)
 800a954:	f7fb fe62 	bl	800661c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a958:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a95a:	4618      	mov	r0, r3
 800a95c:	3708      	adds	r7, #8
 800a95e:	46bd      	mov	sp, r7
 800a960:	bd80      	pop	{r7, pc}
 800a962:	bf00      	nop
 800a964:	20004c50 	.word	0x20004c50

0800a968 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b084      	sub	sp, #16
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
 800a970:	460b      	mov	r3, r1
 800a972:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a974:	2300      	movs	r3, #0
 800a976:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a978:	4b0d      	ldr	r3, [pc, #52]	; (800a9b0 <CDC_Transmit_FS+0x48>)
 800a97a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a97e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a986:	2b00      	cmp	r3, #0
 800a988:	d001      	beq.n	800a98e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a98a:	2301      	movs	r3, #1
 800a98c:	e00b      	b.n	800a9a6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a98e:	887b      	ldrh	r3, [r7, #2]
 800a990:	461a      	mov	r2, r3
 800a992:	6879      	ldr	r1, [r7, #4]
 800a994:	4806      	ldr	r0, [pc, #24]	; (800a9b0 <CDC_Transmit_FS+0x48>)
 800a996:	f7fb fdbb 	bl	8006510 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a99a:	4805      	ldr	r0, [pc, #20]	; (800a9b0 <CDC_Transmit_FS+0x48>)
 800a99c:	f7fb fdf8 	bl	8006590 <USBD_CDC_TransmitPacket>
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a9a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	3710      	adds	r7, #16
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}
 800a9ae:	bf00      	nop
 800a9b0:	20004c50 	.word	0x20004c50

0800a9b4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a9b4:	b480      	push	{r7}
 800a9b6:	b087      	sub	sp, #28
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	60f8      	str	r0, [r7, #12]
 800a9bc:	60b9      	str	r1, [r7, #8]
 800a9be:	4613      	mov	r3, r2
 800a9c0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a9c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	371c      	adds	r7, #28
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d4:	4770      	bx	lr
	...

0800a9d8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9d8:	b480      	push	{r7}
 800a9da:	b083      	sub	sp, #12
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	4603      	mov	r3, r0
 800a9e0:	6039      	str	r1, [r7, #0]
 800a9e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	2212      	movs	r2, #18
 800a9e8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a9ea:	4b03      	ldr	r3, [pc, #12]	; (800a9f8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	370c      	adds	r7, #12
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f6:	4770      	bx	lr
 800a9f8:	200000cc 	.word	0x200000cc

0800a9fc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9fc:	b480      	push	{r7}
 800a9fe:	b083      	sub	sp, #12
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	4603      	mov	r3, r0
 800aa04:	6039      	str	r1, [r7, #0]
 800aa06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	2204      	movs	r2, #4
 800aa0c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800aa0e:	4b03      	ldr	r3, [pc, #12]	; (800aa1c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800aa10:	4618      	mov	r0, r3
 800aa12:	370c      	adds	r7, #12
 800aa14:	46bd      	mov	sp, r7
 800aa16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1a:	4770      	bx	lr
 800aa1c:	200000e0 	.word	0x200000e0

0800aa20 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b082      	sub	sp, #8
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	4603      	mov	r3, r0
 800aa28:	6039      	str	r1, [r7, #0]
 800aa2a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aa2c:	79fb      	ldrb	r3, [r7, #7]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d105      	bne.n	800aa3e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aa32:	683a      	ldr	r2, [r7, #0]
 800aa34:	4907      	ldr	r1, [pc, #28]	; (800aa54 <USBD_FS_ProductStrDescriptor+0x34>)
 800aa36:	4808      	ldr	r0, [pc, #32]	; (800aa58 <USBD_FS_ProductStrDescriptor+0x38>)
 800aa38:	f7fd f838 	bl	8007aac <USBD_GetString>
 800aa3c:	e004      	b.n	800aa48 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aa3e:	683a      	ldr	r2, [r7, #0]
 800aa40:	4904      	ldr	r1, [pc, #16]	; (800aa54 <USBD_FS_ProductStrDescriptor+0x34>)
 800aa42:	4805      	ldr	r0, [pc, #20]	; (800aa58 <USBD_FS_ProductStrDescriptor+0x38>)
 800aa44:	f7fd f832 	bl	8007aac <USBD_GetString>
  }
  return USBD_StrDesc;
 800aa48:	4b02      	ldr	r3, [pc, #8]	; (800aa54 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	3708      	adds	r7, #8
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bd80      	pop	{r7, pc}
 800aa52:	bf00      	nop
 800aa54:	20005f2c 	.word	0x20005f2c
 800aa58:	0800b888 	.word	0x0800b888

0800aa5c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b082      	sub	sp, #8
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	4603      	mov	r3, r0
 800aa64:	6039      	str	r1, [r7, #0]
 800aa66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800aa68:	683a      	ldr	r2, [r7, #0]
 800aa6a:	4904      	ldr	r1, [pc, #16]	; (800aa7c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800aa6c:	4804      	ldr	r0, [pc, #16]	; (800aa80 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800aa6e:	f7fd f81d 	bl	8007aac <USBD_GetString>
  return USBD_StrDesc;
 800aa72:	4b02      	ldr	r3, [pc, #8]	; (800aa7c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800aa74:	4618      	mov	r0, r3
 800aa76:	3708      	adds	r7, #8
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}
 800aa7c:	20005f2c 	.word	0x20005f2c
 800aa80:	0800b894 	.word	0x0800b894

0800aa84 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b082      	sub	sp, #8
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	6039      	str	r1, [r7, #0]
 800aa8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	221a      	movs	r2, #26
 800aa94:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800aa96:	f000 f843 	bl	800ab20 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800aa9a:	4b02      	ldr	r3, [pc, #8]	; (800aaa4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	3708      	adds	r7, #8
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}
 800aaa4:	200000e4 	.word	0x200000e4

0800aaa8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b082      	sub	sp, #8
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	4603      	mov	r3, r0
 800aab0:	6039      	str	r1, [r7, #0]
 800aab2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800aab4:	79fb      	ldrb	r3, [r7, #7]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d105      	bne.n	800aac6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800aaba:	683a      	ldr	r2, [r7, #0]
 800aabc:	4907      	ldr	r1, [pc, #28]	; (800aadc <USBD_FS_ConfigStrDescriptor+0x34>)
 800aabe:	4808      	ldr	r0, [pc, #32]	; (800aae0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800aac0:	f7fc fff4 	bl	8007aac <USBD_GetString>
 800aac4:	e004      	b.n	800aad0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800aac6:	683a      	ldr	r2, [r7, #0]
 800aac8:	4904      	ldr	r1, [pc, #16]	; (800aadc <USBD_FS_ConfigStrDescriptor+0x34>)
 800aaca:	4805      	ldr	r0, [pc, #20]	; (800aae0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800aacc:	f7fc ffee 	bl	8007aac <USBD_GetString>
  }
  return USBD_StrDesc;
 800aad0:	4b02      	ldr	r3, [pc, #8]	; (800aadc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800aad2:	4618      	mov	r0, r3
 800aad4:	3708      	adds	r7, #8
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bd80      	pop	{r7, pc}
 800aada:	bf00      	nop
 800aadc:	20005f2c 	.word	0x20005f2c
 800aae0:	0800b8a8 	.word	0x0800b8a8

0800aae4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b082      	sub	sp, #8
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	4603      	mov	r3, r0
 800aaec:	6039      	str	r1, [r7, #0]
 800aaee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aaf0:	79fb      	ldrb	r3, [r7, #7]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d105      	bne.n	800ab02 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800aaf6:	683a      	ldr	r2, [r7, #0]
 800aaf8:	4907      	ldr	r1, [pc, #28]	; (800ab18 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800aafa:	4808      	ldr	r0, [pc, #32]	; (800ab1c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800aafc:	f7fc ffd6 	bl	8007aac <USBD_GetString>
 800ab00:	e004      	b.n	800ab0c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ab02:	683a      	ldr	r2, [r7, #0]
 800ab04:	4904      	ldr	r1, [pc, #16]	; (800ab18 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ab06:	4805      	ldr	r0, [pc, #20]	; (800ab1c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ab08:	f7fc ffd0 	bl	8007aac <USBD_GetString>
  }
  return USBD_StrDesc;
 800ab0c:	4b02      	ldr	r3, [pc, #8]	; (800ab18 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	3708      	adds	r7, #8
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}
 800ab16:	bf00      	nop
 800ab18:	20005f2c 	.word	0x20005f2c
 800ab1c:	0800b8b4 	.word	0x0800b8b4

0800ab20 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b084      	sub	sp, #16
 800ab24:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ab26:	4b0f      	ldr	r3, [pc, #60]	; (800ab64 <Get_SerialNum+0x44>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ab2c:	4b0e      	ldr	r3, [pc, #56]	; (800ab68 <Get_SerialNum+0x48>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ab32:	4b0e      	ldr	r3, [pc, #56]	; (800ab6c <Get_SerialNum+0x4c>)
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ab38:	68fa      	ldr	r2, [r7, #12]
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	4413      	add	r3, r2
 800ab3e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d009      	beq.n	800ab5a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ab46:	2208      	movs	r2, #8
 800ab48:	4909      	ldr	r1, [pc, #36]	; (800ab70 <Get_SerialNum+0x50>)
 800ab4a:	68f8      	ldr	r0, [r7, #12]
 800ab4c:	f000 f814 	bl	800ab78 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ab50:	2204      	movs	r2, #4
 800ab52:	4908      	ldr	r1, [pc, #32]	; (800ab74 <Get_SerialNum+0x54>)
 800ab54:	68b8      	ldr	r0, [r7, #8]
 800ab56:	f000 f80f 	bl	800ab78 <IntToUnicode>
  }
}
 800ab5a:	bf00      	nop
 800ab5c:	3710      	adds	r7, #16
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd80      	pop	{r7, pc}
 800ab62:	bf00      	nop
 800ab64:	1fff7a10 	.word	0x1fff7a10
 800ab68:	1fff7a14 	.word	0x1fff7a14
 800ab6c:	1fff7a18 	.word	0x1fff7a18
 800ab70:	200000e6 	.word	0x200000e6
 800ab74:	200000f6 	.word	0x200000f6

0800ab78 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ab78:	b480      	push	{r7}
 800ab7a:	b087      	sub	sp, #28
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	60f8      	str	r0, [r7, #12]
 800ab80:	60b9      	str	r1, [r7, #8]
 800ab82:	4613      	mov	r3, r2
 800ab84:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ab86:	2300      	movs	r3, #0
 800ab88:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	75fb      	strb	r3, [r7, #23]
 800ab8e:	e027      	b.n	800abe0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	0f1b      	lsrs	r3, r3, #28
 800ab94:	2b09      	cmp	r3, #9
 800ab96:	d80b      	bhi.n	800abb0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	0f1b      	lsrs	r3, r3, #28
 800ab9c:	b2da      	uxtb	r2, r3
 800ab9e:	7dfb      	ldrb	r3, [r7, #23]
 800aba0:	005b      	lsls	r3, r3, #1
 800aba2:	4619      	mov	r1, r3
 800aba4:	68bb      	ldr	r3, [r7, #8]
 800aba6:	440b      	add	r3, r1
 800aba8:	3230      	adds	r2, #48	; 0x30
 800abaa:	b2d2      	uxtb	r2, r2
 800abac:	701a      	strb	r2, [r3, #0]
 800abae:	e00a      	b.n	800abc6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	0f1b      	lsrs	r3, r3, #28
 800abb4:	b2da      	uxtb	r2, r3
 800abb6:	7dfb      	ldrb	r3, [r7, #23]
 800abb8:	005b      	lsls	r3, r3, #1
 800abba:	4619      	mov	r1, r3
 800abbc:	68bb      	ldr	r3, [r7, #8]
 800abbe:	440b      	add	r3, r1
 800abc0:	3237      	adds	r2, #55	; 0x37
 800abc2:	b2d2      	uxtb	r2, r2
 800abc4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	011b      	lsls	r3, r3, #4
 800abca:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800abcc:	7dfb      	ldrb	r3, [r7, #23]
 800abce:	005b      	lsls	r3, r3, #1
 800abd0:	3301      	adds	r3, #1
 800abd2:	68ba      	ldr	r2, [r7, #8]
 800abd4:	4413      	add	r3, r2
 800abd6:	2200      	movs	r2, #0
 800abd8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800abda:	7dfb      	ldrb	r3, [r7, #23]
 800abdc:	3301      	adds	r3, #1
 800abde:	75fb      	strb	r3, [r7, #23]
 800abe0:	7dfa      	ldrb	r2, [r7, #23]
 800abe2:	79fb      	ldrb	r3, [r7, #7]
 800abe4:	429a      	cmp	r2, r3
 800abe6:	d3d3      	bcc.n	800ab90 <IntToUnicode+0x18>
  }
}
 800abe8:	bf00      	nop
 800abea:	bf00      	nop
 800abec:	371c      	adds	r7, #28
 800abee:	46bd      	mov	sp, r7
 800abf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf4:	4770      	bx	lr
	...

0800abf8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b08a      	sub	sp, #40	; 0x28
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ac00:	f107 0314 	add.w	r3, r7, #20
 800ac04:	2200      	movs	r2, #0
 800ac06:	601a      	str	r2, [r3, #0]
 800ac08:	605a      	str	r2, [r3, #4]
 800ac0a:	609a      	str	r2, [r3, #8]
 800ac0c:	60da      	str	r2, [r3, #12]
 800ac0e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ac18:	d13a      	bne.n	800ac90 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	613b      	str	r3, [r7, #16]
 800ac1e:	4b1e      	ldr	r3, [pc, #120]	; (800ac98 <HAL_PCD_MspInit+0xa0>)
 800ac20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac22:	4a1d      	ldr	r2, [pc, #116]	; (800ac98 <HAL_PCD_MspInit+0xa0>)
 800ac24:	f043 0301 	orr.w	r3, r3, #1
 800ac28:	6313      	str	r3, [r2, #48]	; 0x30
 800ac2a:	4b1b      	ldr	r3, [pc, #108]	; (800ac98 <HAL_PCD_MspInit+0xa0>)
 800ac2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac2e:	f003 0301 	and.w	r3, r3, #1
 800ac32:	613b      	str	r3, [r7, #16]
 800ac34:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ac36:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ac3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ac3c:	2302      	movs	r3, #2
 800ac3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac40:	2300      	movs	r3, #0
 800ac42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ac44:	2303      	movs	r3, #3
 800ac46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ac48:	230a      	movs	r3, #10
 800ac4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ac4c:	f107 0314 	add.w	r3, r7, #20
 800ac50:	4619      	mov	r1, r3
 800ac52:	4812      	ldr	r0, [pc, #72]	; (800ac9c <HAL_PCD_MspInit+0xa4>)
 800ac54:	f7f6 fa9c 	bl	8001190 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ac58:	4b0f      	ldr	r3, [pc, #60]	; (800ac98 <HAL_PCD_MspInit+0xa0>)
 800ac5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac5c:	4a0e      	ldr	r2, [pc, #56]	; (800ac98 <HAL_PCD_MspInit+0xa0>)
 800ac5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac62:	6353      	str	r3, [r2, #52]	; 0x34
 800ac64:	2300      	movs	r3, #0
 800ac66:	60fb      	str	r3, [r7, #12]
 800ac68:	4b0b      	ldr	r3, [pc, #44]	; (800ac98 <HAL_PCD_MspInit+0xa0>)
 800ac6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac6c:	4a0a      	ldr	r2, [pc, #40]	; (800ac98 <HAL_PCD_MspInit+0xa0>)
 800ac6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ac72:	6453      	str	r3, [r2, #68]	; 0x44
 800ac74:	4b08      	ldr	r3, [pc, #32]	; (800ac98 <HAL_PCD_MspInit+0xa0>)
 800ac76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ac7c:	60fb      	str	r3, [r7, #12]
 800ac7e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800ac80:	2200      	movs	r2, #0
 800ac82:	2105      	movs	r1, #5
 800ac84:	2043      	movs	r0, #67	; 0x43
 800ac86:	f7f6 fa59 	bl	800113c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ac8a:	2043      	movs	r0, #67	; 0x43
 800ac8c:	f7f6 fa72 	bl	8001174 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ac90:	bf00      	nop
 800ac92:	3728      	adds	r7, #40	; 0x28
 800ac94:	46bd      	mov	sp, r7
 800ac96:	bd80      	pop	{r7, pc}
 800ac98:	40023800 	.word	0x40023800
 800ac9c:	40020000 	.word	0x40020000

0800aca0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b082      	sub	sp, #8
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800acb4:	4619      	mov	r1, r3
 800acb6:	4610      	mov	r0, r2
 800acb8:	f7fb fd99 	bl	80067ee <USBD_LL_SetupStage>
}
 800acbc:	bf00      	nop
 800acbe:	3708      	adds	r7, #8
 800acc0:	46bd      	mov	sp, r7
 800acc2:	bd80      	pop	{r7, pc}

0800acc4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b082      	sub	sp, #8
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
 800accc:	460b      	mov	r3, r1
 800acce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800acd6:	78fa      	ldrb	r2, [r7, #3]
 800acd8:	6879      	ldr	r1, [r7, #4]
 800acda:	4613      	mov	r3, r2
 800acdc:	00db      	lsls	r3, r3, #3
 800acde:	4413      	add	r3, r2
 800ace0:	009b      	lsls	r3, r3, #2
 800ace2:	440b      	add	r3, r1
 800ace4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800ace8:	681a      	ldr	r2, [r3, #0]
 800acea:	78fb      	ldrb	r3, [r7, #3]
 800acec:	4619      	mov	r1, r3
 800acee:	f7fb fdd3 	bl	8006898 <USBD_LL_DataOutStage>
}
 800acf2:	bf00      	nop
 800acf4:	3708      	adds	r7, #8
 800acf6:	46bd      	mov	sp, r7
 800acf8:	bd80      	pop	{r7, pc}

0800acfa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800acfa:	b580      	push	{r7, lr}
 800acfc:	b082      	sub	sp, #8
 800acfe:	af00      	add	r7, sp, #0
 800ad00:	6078      	str	r0, [r7, #4]
 800ad02:	460b      	mov	r3, r1
 800ad04:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800ad0c:	78fa      	ldrb	r2, [r7, #3]
 800ad0e:	6879      	ldr	r1, [r7, #4]
 800ad10:	4613      	mov	r3, r2
 800ad12:	00db      	lsls	r3, r3, #3
 800ad14:	4413      	add	r3, r2
 800ad16:	009b      	lsls	r3, r3, #2
 800ad18:	440b      	add	r3, r1
 800ad1a:	334c      	adds	r3, #76	; 0x4c
 800ad1c:	681a      	ldr	r2, [r3, #0]
 800ad1e:	78fb      	ldrb	r3, [r7, #3]
 800ad20:	4619      	mov	r1, r3
 800ad22:	f7fb fe6c 	bl	80069fe <USBD_LL_DataInStage>
}
 800ad26:	bf00      	nop
 800ad28:	3708      	adds	r7, #8
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}

0800ad2e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad2e:	b580      	push	{r7, lr}
 800ad30:	b082      	sub	sp, #8
 800ad32:	af00      	add	r7, sp, #0
 800ad34:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	f7fb ffa0 	bl	8006c82 <USBD_LL_SOF>
}
 800ad42:	bf00      	nop
 800ad44:	3708      	adds	r7, #8
 800ad46:	46bd      	mov	sp, r7
 800ad48:	bd80      	pop	{r7, pc}

0800ad4a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad4a:	b580      	push	{r7, lr}
 800ad4c:	b084      	sub	sp, #16
 800ad4e:	af00      	add	r7, sp, #0
 800ad50:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ad52:	2301      	movs	r3, #1
 800ad54:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	68db      	ldr	r3, [r3, #12]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d102      	bne.n	800ad64 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ad5e:	2300      	movs	r3, #0
 800ad60:	73fb      	strb	r3, [r7, #15]
 800ad62:	e008      	b.n	800ad76 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	68db      	ldr	r3, [r3, #12]
 800ad68:	2b02      	cmp	r3, #2
 800ad6a:	d102      	bne.n	800ad72 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	73fb      	strb	r3, [r7, #15]
 800ad70:	e001      	b.n	800ad76 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ad72:	f7f5 fe53 	bl	8000a1c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ad7c:	7bfa      	ldrb	r2, [r7, #15]
 800ad7e:	4611      	mov	r1, r2
 800ad80:	4618      	mov	r0, r3
 800ad82:	f7fb ff40 	bl	8006c06 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	f7fb fee8 	bl	8006b62 <USBD_LL_Reset>
}
 800ad92:	bf00      	nop
 800ad94:	3710      	adds	r7, #16
 800ad96:	46bd      	mov	sp, r7
 800ad98:	bd80      	pop	{r7, pc}
	...

0800ad9c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b082      	sub	sp, #8
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800adaa:	4618      	mov	r0, r3
 800adac:	f7fb ff3b 	bl	8006c26 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	687a      	ldr	r2, [r7, #4]
 800adbc:	6812      	ldr	r2, [r2, #0]
 800adbe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800adc2:	f043 0301 	orr.w	r3, r3, #1
 800adc6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	6a1b      	ldr	r3, [r3, #32]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d005      	beq.n	800addc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800add0:	4b04      	ldr	r3, [pc, #16]	; (800ade4 <HAL_PCD_SuspendCallback+0x48>)
 800add2:	691b      	ldr	r3, [r3, #16]
 800add4:	4a03      	ldr	r2, [pc, #12]	; (800ade4 <HAL_PCD_SuspendCallback+0x48>)
 800add6:	f043 0306 	orr.w	r3, r3, #6
 800adda:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800addc:	bf00      	nop
 800adde:	3708      	adds	r7, #8
 800ade0:	46bd      	mov	sp, r7
 800ade2:	bd80      	pop	{r7, pc}
 800ade4:	e000ed00 	.word	0xe000ed00

0800ade8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b082      	sub	sp, #8
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800adf6:	4618      	mov	r0, r3
 800adf8:	f7fb ff2b 	bl	8006c52 <USBD_LL_Resume>
}
 800adfc:	bf00      	nop
 800adfe:	3708      	adds	r7, #8
 800ae00:	46bd      	mov	sp, r7
 800ae02:	bd80      	pop	{r7, pc}

0800ae04 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b082      	sub	sp, #8
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
 800ae0c:	460b      	mov	r3, r1
 800ae0e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ae16:	78fa      	ldrb	r2, [r7, #3]
 800ae18:	4611      	mov	r1, r2
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	f7fb ff83 	bl	8006d26 <USBD_LL_IsoOUTIncomplete>
}
 800ae20:	bf00      	nop
 800ae22:	3708      	adds	r7, #8
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bd80      	pop	{r7, pc}

0800ae28 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b082      	sub	sp, #8
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
 800ae30:	460b      	mov	r3, r1
 800ae32:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ae3a:	78fa      	ldrb	r2, [r7, #3]
 800ae3c:	4611      	mov	r1, r2
 800ae3e:	4618      	mov	r0, r3
 800ae40:	f7fb ff3f 	bl	8006cc2 <USBD_LL_IsoINIncomplete>
}
 800ae44:	bf00      	nop
 800ae46:	3708      	adds	r7, #8
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	bd80      	pop	{r7, pc}

0800ae4c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b082      	sub	sp, #8
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	f7fb ff95 	bl	8006d8a <USBD_LL_DevConnected>
}
 800ae60:	bf00      	nop
 800ae62:	3708      	adds	r7, #8
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bd80      	pop	{r7, pc}

0800ae68 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b082      	sub	sp, #8
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ae76:	4618      	mov	r0, r3
 800ae78:	f7fb ff92 	bl	8006da0 <USBD_LL_DevDisconnected>
}
 800ae7c:	bf00      	nop
 800ae7e:	3708      	adds	r7, #8
 800ae80:	46bd      	mov	sp, r7
 800ae82:	bd80      	pop	{r7, pc}

0800ae84 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b082      	sub	sp, #8
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	781b      	ldrb	r3, [r3, #0]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d13c      	bne.n	800af0e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ae94:	4a20      	ldr	r2, [pc, #128]	; (800af18 <USBD_LL_Init+0x94>)
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	4a1e      	ldr	r2, [pc, #120]	; (800af18 <USBD_LL_Init+0x94>)
 800aea0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800aea4:	4b1c      	ldr	r3, [pc, #112]	; (800af18 <USBD_LL_Init+0x94>)
 800aea6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800aeaa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800aeac:	4b1a      	ldr	r3, [pc, #104]	; (800af18 <USBD_LL_Init+0x94>)
 800aeae:	2204      	movs	r2, #4
 800aeb0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800aeb2:	4b19      	ldr	r3, [pc, #100]	; (800af18 <USBD_LL_Init+0x94>)
 800aeb4:	2202      	movs	r2, #2
 800aeb6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800aeb8:	4b17      	ldr	r3, [pc, #92]	; (800af18 <USBD_LL_Init+0x94>)
 800aeba:	2200      	movs	r2, #0
 800aebc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800aebe:	4b16      	ldr	r3, [pc, #88]	; (800af18 <USBD_LL_Init+0x94>)
 800aec0:	2202      	movs	r2, #2
 800aec2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800aec4:	4b14      	ldr	r3, [pc, #80]	; (800af18 <USBD_LL_Init+0x94>)
 800aec6:	2200      	movs	r2, #0
 800aec8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800aeca:	4b13      	ldr	r3, [pc, #76]	; (800af18 <USBD_LL_Init+0x94>)
 800aecc:	2200      	movs	r2, #0
 800aece:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800aed0:	4b11      	ldr	r3, [pc, #68]	; (800af18 <USBD_LL_Init+0x94>)
 800aed2:	2200      	movs	r2, #0
 800aed4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800aed6:	4b10      	ldr	r3, [pc, #64]	; (800af18 <USBD_LL_Init+0x94>)
 800aed8:	2200      	movs	r2, #0
 800aeda:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800aedc:	4b0e      	ldr	r3, [pc, #56]	; (800af18 <USBD_LL_Init+0x94>)
 800aede:	2200      	movs	r2, #0
 800aee0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800aee2:	480d      	ldr	r0, [pc, #52]	; (800af18 <USBD_LL_Init+0x94>)
 800aee4:	f7f6 fb23 	bl	800152e <HAL_PCD_Init>
 800aee8:	4603      	mov	r3, r0
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d001      	beq.n	800aef2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800aeee:	f7f5 fd95 	bl	8000a1c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800aef2:	2180      	movs	r1, #128	; 0x80
 800aef4:	4808      	ldr	r0, [pc, #32]	; (800af18 <USBD_LL_Init+0x94>)
 800aef6:	f7f7 fd7a 	bl	80029ee <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800aefa:	2240      	movs	r2, #64	; 0x40
 800aefc:	2100      	movs	r1, #0
 800aefe:	4806      	ldr	r0, [pc, #24]	; (800af18 <USBD_LL_Init+0x94>)
 800af00:	f7f7 fd2e 	bl	8002960 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800af04:	2280      	movs	r2, #128	; 0x80
 800af06:	2101      	movs	r1, #1
 800af08:	4803      	ldr	r0, [pc, #12]	; (800af18 <USBD_LL_Init+0x94>)
 800af0a:	f7f7 fd29 	bl	8002960 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800af0e:	2300      	movs	r3, #0
}
 800af10:	4618      	mov	r0, r3
 800af12:	3708      	adds	r7, #8
 800af14:	46bd      	mov	sp, r7
 800af16:	bd80      	pop	{r7, pc}
 800af18:	2000612c 	.word	0x2000612c

0800af1c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b084      	sub	sp, #16
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af24:	2300      	movs	r3, #0
 800af26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af28:	2300      	movs	r3, #0
 800af2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800af32:	4618      	mov	r0, r3
 800af34:	f7f6 fc18 	bl	8001768 <HAL_PCD_Start>
 800af38:	4603      	mov	r3, r0
 800af3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af3c:	7bfb      	ldrb	r3, [r7, #15]
 800af3e:	4618      	mov	r0, r3
 800af40:	f000 f942 	bl	800b1c8 <USBD_Get_USB_Status>
 800af44:	4603      	mov	r3, r0
 800af46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af48:	7bbb      	ldrb	r3, [r7, #14]
}
 800af4a:	4618      	mov	r0, r3
 800af4c:	3710      	adds	r7, #16
 800af4e:	46bd      	mov	sp, r7
 800af50:	bd80      	pop	{r7, pc}

0800af52 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800af52:	b580      	push	{r7, lr}
 800af54:	b084      	sub	sp, #16
 800af56:	af00      	add	r7, sp, #0
 800af58:	6078      	str	r0, [r7, #4]
 800af5a:	4608      	mov	r0, r1
 800af5c:	4611      	mov	r1, r2
 800af5e:	461a      	mov	r2, r3
 800af60:	4603      	mov	r3, r0
 800af62:	70fb      	strb	r3, [r7, #3]
 800af64:	460b      	mov	r3, r1
 800af66:	70bb      	strb	r3, [r7, #2]
 800af68:	4613      	mov	r3, r2
 800af6a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af6c:	2300      	movs	r3, #0
 800af6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af70:	2300      	movs	r3, #0
 800af72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800af7a:	78bb      	ldrb	r3, [r7, #2]
 800af7c:	883a      	ldrh	r2, [r7, #0]
 800af7e:	78f9      	ldrb	r1, [r7, #3]
 800af80:	f7f7 f8e9 	bl	8002156 <HAL_PCD_EP_Open>
 800af84:	4603      	mov	r3, r0
 800af86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af88:	7bfb      	ldrb	r3, [r7, #15]
 800af8a:	4618      	mov	r0, r3
 800af8c:	f000 f91c 	bl	800b1c8 <USBD_Get_USB_Status>
 800af90:	4603      	mov	r3, r0
 800af92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af94:	7bbb      	ldrb	r3, [r7, #14]
}
 800af96:	4618      	mov	r0, r3
 800af98:	3710      	adds	r7, #16
 800af9a:	46bd      	mov	sp, r7
 800af9c:	bd80      	pop	{r7, pc}

0800af9e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af9e:	b580      	push	{r7, lr}
 800afa0:	b084      	sub	sp, #16
 800afa2:	af00      	add	r7, sp, #0
 800afa4:	6078      	str	r0, [r7, #4]
 800afa6:	460b      	mov	r3, r1
 800afa8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afaa:	2300      	movs	r3, #0
 800afac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afae:	2300      	movs	r3, #0
 800afb0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800afb8:	78fa      	ldrb	r2, [r7, #3]
 800afba:	4611      	mov	r1, r2
 800afbc:	4618      	mov	r0, r3
 800afbe:	f7f7 f932 	bl	8002226 <HAL_PCD_EP_Close>
 800afc2:	4603      	mov	r3, r0
 800afc4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800afc6:	7bfb      	ldrb	r3, [r7, #15]
 800afc8:	4618      	mov	r0, r3
 800afca:	f000 f8fd 	bl	800b1c8 <USBD_Get_USB_Status>
 800afce:	4603      	mov	r3, r0
 800afd0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800afd2:	7bbb      	ldrb	r3, [r7, #14]
}
 800afd4:	4618      	mov	r0, r3
 800afd6:	3710      	adds	r7, #16
 800afd8:	46bd      	mov	sp, r7
 800afda:	bd80      	pop	{r7, pc}

0800afdc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b084      	sub	sp, #16
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
 800afe4:	460b      	mov	r3, r1
 800afe6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afe8:	2300      	movs	r3, #0
 800afea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afec:	2300      	movs	r3, #0
 800afee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800aff6:	78fa      	ldrb	r2, [r7, #3]
 800aff8:	4611      	mov	r1, r2
 800affa:	4618      	mov	r0, r3
 800affc:	f7f7 fa0a 	bl	8002414 <HAL_PCD_EP_SetStall>
 800b000:	4603      	mov	r3, r0
 800b002:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b004:	7bfb      	ldrb	r3, [r7, #15]
 800b006:	4618      	mov	r0, r3
 800b008:	f000 f8de 	bl	800b1c8 <USBD_Get_USB_Status>
 800b00c:	4603      	mov	r3, r0
 800b00e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b010:	7bbb      	ldrb	r3, [r7, #14]
}
 800b012:	4618      	mov	r0, r3
 800b014:	3710      	adds	r7, #16
 800b016:	46bd      	mov	sp, r7
 800b018:	bd80      	pop	{r7, pc}

0800b01a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b01a:	b580      	push	{r7, lr}
 800b01c:	b084      	sub	sp, #16
 800b01e:	af00      	add	r7, sp, #0
 800b020:	6078      	str	r0, [r7, #4]
 800b022:	460b      	mov	r3, r1
 800b024:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b026:	2300      	movs	r3, #0
 800b028:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b02a:	2300      	movs	r3, #0
 800b02c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b034:	78fa      	ldrb	r2, [r7, #3]
 800b036:	4611      	mov	r1, r2
 800b038:	4618      	mov	r0, r3
 800b03a:	f7f7 fa4f 	bl	80024dc <HAL_PCD_EP_ClrStall>
 800b03e:	4603      	mov	r3, r0
 800b040:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b042:	7bfb      	ldrb	r3, [r7, #15]
 800b044:	4618      	mov	r0, r3
 800b046:	f000 f8bf 	bl	800b1c8 <USBD_Get_USB_Status>
 800b04a:	4603      	mov	r3, r0
 800b04c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b04e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b050:	4618      	mov	r0, r3
 800b052:	3710      	adds	r7, #16
 800b054:	46bd      	mov	sp, r7
 800b056:	bd80      	pop	{r7, pc}

0800b058 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b058:	b480      	push	{r7}
 800b05a:	b085      	sub	sp, #20
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
 800b060:	460b      	mov	r3, r1
 800b062:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b06a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b06c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b070:	2b00      	cmp	r3, #0
 800b072:	da0b      	bge.n	800b08c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b074:	78fb      	ldrb	r3, [r7, #3]
 800b076:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b07a:	68f9      	ldr	r1, [r7, #12]
 800b07c:	4613      	mov	r3, r2
 800b07e:	00db      	lsls	r3, r3, #3
 800b080:	4413      	add	r3, r2
 800b082:	009b      	lsls	r3, r3, #2
 800b084:	440b      	add	r3, r1
 800b086:	333e      	adds	r3, #62	; 0x3e
 800b088:	781b      	ldrb	r3, [r3, #0]
 800b08a:	e00b      	b.n	800b0a4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b08c:	78fb      	ldrb	r3, [r7, #3]
 800b08e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b092:	68f9      	ldr	r1, [r7, #12]
 800b094:	4613      	mov	r3, r2
 800b096:	00db      	lsls	r3, r3, #3
 800b098:	4413      	add	r3, r2
 800b09a:	009b      	lsls	r3, r3, #2
 800b09c:	440b      	add	r3, r1
 800b09e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800b0a2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	3714      	adds	r7, #20
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ae:	4770      	bx	lr

0800b0b0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b084      	sub	sp, #16
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
 800b0b8:	460b      	mov	r3, r1
 800b0ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0bc:	2300      	movs	r3, #0
 800b0be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b0ca:	78fa      	ldrb	r2, [r7, #3]
 800b0cc:	4611      	mov	r1, r2
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	f7f7 f81c 	bl	800210c <HAL_PCD_SetAddress>
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0d8:	7bfb      	ldrb	r3, [r7, #15]
 800b0da:	4618      	mov	r0, r3
 800b0dc:	f000 f874 	bl	800b1c8 <USBD_Get_USB_Status>
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0e4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	3710      	adds	r7, #16
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	bd80      	pop	{r7, pc}

0800b0ee <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b0ee:	b580      	push	{r7, lr}
 800b0f0:	b086      	sub	sp, #24
 800b0f2:	af00      	add	r7, sp, #0
 800b0f4:	60f8      	str	r0, [r7, #12]
 800b0f6:	607a      	str	r2, [r7, #4]
 800b0f8:	603b      	str	r3, [r7, #0]
 800b0fa:	460b      	mov	r3, r1
 800b0fc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0fe:	2300      	movs	r3, #0
 800b100:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b102:	2300      	movs	r3, #0
 800b104:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b10c:	7af9      	ldrb	r1, [r7, #11]
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	687a      	ldr	r2, [r7, #4]
 800b112:	f7f7 f935 	bl	8002380 <HAL_PCD_EP_Transmit>
 800b116:	4603      	mov	r3, r0
 800b118:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b11a:	7dfb      	ldrb	r3, [r7, #23]
 800b11c:	4618      	mov	r0, r3
 800b11e:	f000 f853 	bl	800b1c8 <USBD_Get_USB_Status>
 800b122:	4603      	mov	r3, r0
 800b124:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b126:	7dbb      	ldrb	r3, [r7, #22]
}
 800b128:	4618      	mov	r0, r3
 800b12a:	3718      	adds	r7, #24
 800b12c:	46bd      	mov	sp, r7
 800b12e:	bd80      	pop	{r7, pc}

0800b130 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b130:	b580      	push	{r7, lr}
 800b132:	b086      	sub	sp, #24
 800b134:	af00      	add	r7, sp, #0
 800b136:	60f8      	str	r0, [r7, #12]
 800b138:	607a      	str	r2, [r7, #4]
 800b13a:	603b      	str	r3, [r7, #0]
 800b13c:	460b      	mov	r3, r1
 800b13e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b140:	2300      	movs	r3, #0
 800b142:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b144:	2300      	movs	r3, #0
 800b146:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b14e:	7af9      	ldrb	r1, [r7, #11]
 800b150:	683b      	ldr	r3, [r7, #0]
 800b152:	687a      	ldr	r2, [r7, #4]
 800b154:	f7f7 f8b1 	bl	80022ba <HAL_PCD_EP_Receive>
 800b158:	4603      	mov	r3, r0
 800b15a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b15c:	7dfb      	ldrb	r3, [r7, #23]
 800b15e:	4618      	mov	r0, r3
 800b160:	f000 f832 	bl	800b1c8 <USBD_Get_USB_Status>
 800b164:	4603      	mov	r3, r0
 800b166:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b168:	7dbb      	ldrb	r3, [r7, #22]
}
 800b16a:	4618      	mov	r0, r3
 800b16c:	3718      	adds	r7, #24
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd80      	pop	{r7, pc}

0800b172 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b172:	b580      	push	{r7, lr}
 800b174:	b082      	sub	sp, #8
 800b176:	af00      	add	r7, sp, #0
 800b178:	6078      	str	r0, [r7, #4]
 800b17a:	460b      	mov	r3, r1
 800b17c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b184:	78fa      	ldrb	r2, [r7, #3]
 800b186:	4611      	mov	r1, r2
 800b188:	4618      	mov	r0, r3
 800b18a:	f7f7 f8e1 	bl	8002350 <HAL_PCD_EP_GetRxCount>
 800b18e:	4603      	mov	r3, r0
}
 800b190:	4618      	mov	r0, r3
 800b192:	3708      	adds	r7, #8
 800b194:	46bd      	mov	sp, r7
 800b196:	bd80      	pop	{r7, pc}

0800b198 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b198:	b480      	push	{r7}
 800b19a:	b083      	sub	sp, #12
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b1a0:	4b03      	ldr	r3, [pc, #12]	; (800b1b0 <USBD_static_malloc+0x18>)
}
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	370c      	adds	r7, #12
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ac:	4770      	bx	lr
 800b1ae:	bf00      	nop
 800b1b0:	20006638 	.word	0x20006638

0800b1b4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b1b4:	b480      	push	{r7}
 800b1b6:	b083      	sub	sp, #12
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]

}
 800b1bc:	bf00      	nop
 800b1be:	370c      	adds	r7, #12
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c6:	4770      	bx	lr

0800b1c8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b1c8:	b480      	push	{r7}
 800b1ca:	b085      	sub	sp, #20
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	4603      	mov	r3, r0
 800b1d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b1d6:	79fb      	ldrb	r3, [r7, #7]
 800b1d8:	2b03      	cmp	r3, #3
 800b1da:	d817      	bhi.n	800b20c <USBD_Get_USB_Status+0x44>
 800b1dc:	a201      	add	r2, pc, #4	; (adr r2, 800b1e4 <USBD_Get_USB_Status+0x1c>)
 800b1de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1e2:	bf00      	nop
 800b1e4:	0800b1f5 	.word	0x0800b1f5
 800b1e8:	0800b1fb 	.word	0x0800b1fb
 800b1ec:	0800b201 	.word	0x0800b201
 800b1f0:	0800b207 	.word	0x0800b207
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	73fb      	strb	r3, [r7, #15]
    break;
 800b1f8:	e00b      	b.n	800b212 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b1fa:	2303      	movs	r3, #3
 800b1fc:	73fb      	strb	r3, [r7, #15]
    break;
 800b1fe:	e008      	b.n	800b212 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b200:	2301      	movs	r3, #1
 800b202:	73fb      	strb	r3, [r7, #15]
    break;
 800b204:	e005      	b.n	800b212 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b206:	2303      	movs	r3, #3
 800b208:	73fb      	strb	r3, [r7, #15]
    break;
 800b20a:	e002      	b.n	800b212 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b20c:	2303      	movs	r3, #3
 800b20e:	73fb      	strb	r3, [r7, #15]
    break;
 800b210:	bf00      	nop
  }
  return usb_status;
 800b212:	7bfb      	ldrb	r3, [r7, #15]
}
 800b214:	4618      	mov	r0, r3
 800b216:	3714      	adds	r7, #20
 800b218:	46bd      	mov	sp, r7
 800b21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21e:	4770      	bx	lr

0800b220 <_ZNSaIcEC1Ev>:
 800b220:	4770      	bx	lr

0800b222 <_ZNSaIcED1Ev>:
 800b222:	4770      	bx	lr

0800b224 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 800b224:	b10a      	cbz	r2, 800b22a <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 800b226:	f000 b91f 	b.w	800b468 <memcpy>
 800b22a:	4770      	bx	lr

0800b22c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 800b22c:	b508      	push	{r3, lr}
 800b22e:	680b      	ldr	r3, [r1, #0]
 800b230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b234:	d302      	bcc.n	800b23c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 800b236:	480d      	ldr	r0, [pc, #52]	; (800b26c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 800b238:	f000 f8c6 	bl	800b3c8 <_ZSt20__throw_length_errorPKc>
 800b23c:	4293      	cmp	r3, r2
 800b23e:	d90b      	bls.n	800b258 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800b240:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 800b244:	ea4f 0042 	mov.w	r0, r2, lsl #1
 800b248:	d206      	bcs.n	800b258 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800b24a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800b24e:	bf2a      	itet	cs
 800b250:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 800b254:	6008      	strcc	r0, [r1, #0]
 800b256:	600b      	strcs	r3, [r1, #0]
 800b258:	6808      	ldr	r0, [r1, #0]
 800b25a:	3001      	adds	r0, #1
 800b25c:	d501      	bpl.n	800b262 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 800b25e:	f000 f8ad 	bl	800b3bc <_ZSt17__throw_bad_allocv>
 800b262:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800b266:	f000 b898 	b.w	800b39a <_Znwj>
 800b26a:	bf00      	nop
 800b26c:	0800ba38 	.word	0x0800ba38

0800b270 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 800b270:	f850 3b08 	ldr.w	r3, [r0], #8
 800b274:	4283      	cmp	r3, r0
 800b276:	d002      	beq.n	800b27e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 800b278:	4618      	mov	r0, r3
 800b27a:	f000 b88c 	b.w	800b396 <_ZdlPv>
 800b27e:	4770      	bx	lr

0800b280 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 800b280:	2a01      	cmp	r2, #1
 800b282:	b410      	push	{r4}
 800b284:	d104      	bne.n	800b290 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 800b286:	780a      	ldrb	r2, [r1, #0]
 800b288:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b28c:	7002      	strb	r2, [r0, #0]
 800b28e:	4770      	bx	lr
 800b290:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b294:	f7ff bfc6 	b.w	800b224 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

0800b298 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>:
 800b298:	460b      	mov	r3, r1
 800b29a:	2b01      	cmp	r3, #1
 800b29c:	b410      	push	{r4}
 800b29e:	4611      	mov	r1, r2
 800b2a0:	4604      	mov	r4, r0
 800b2a2:	d103      	bne.n	800b2ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0x14>
 800b2a4:	7022      	strb	r2, [r4, #0]
 800b2a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b2aa:	4770      	bx	lr
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d0fa      	beq.n	800b2a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0xe>
 800b2b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b2b4:	461a      	mov	r2, r3
 800b2b6:	f000 b8e5 	b.w	800b484 <memset>

0800b2ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc>:
 800b2ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b2bc:	290f      	cmp	r1, #15
 800b2be:	4604      	mov	r4, r0
 800b2c0:	9101      	str	r1, [sp, #4]
 800b2c2:	4615      	mov	r5, r2
 800b2c4:	d906      	bls.n	800b2d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc+0x1a>
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	a901      	add	r1, sp, #4
 800b2ca:	f7ff ffaf 	bl	800b22c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800b2ce:	9b01      	ldr	r3, [sp, #4]
 800b2d0:	6020      	str	r0, [r4, #0]
 800b2d2:	60a3      	str	r3, [r4, #8]
 800b2d4:	9901      	ldr	r1, [sp, #4]
 800b2d6:	b119      	cbz	r1, 800b2e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc+0x26>
 800b2d8:	6820      	ldr	r0, [r4, #0]
 800b2da:	462a      	mov	r2, r5
 800b2dc:	f7ff ffdc 	bl	800b298 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>
 800b2e0:	9b01      	ldr	r3, [sp, #4]
 800b2e2:	6822      	ldr	r2, [r4, #0]
 800b2e4:	6063      	str	r3, [r4, #4]
 800b2e6:	2100      	movs	r1, #0
 800b2e8:	54d1      	strb	r1, [r2, r3]
 800b2ea:	b003      	add	sp, #12
 800b2ec:	bd30      	pop	{r4, r5, pc}

0800b2ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 800b2ee:	b508      	push	{r3, lr}
 800b2f0:	1a52      	subs	r2, r2, r1
 800b2f2:	f7ff ffc5 	bl	800b280 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800b2f6:	bd08      	pop	{r3, pc}

0800b2f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EjcRKS3_>:
 800b2f8:	b510      	push	{r4, lr}
 800b2fa:	f100 0308 	add.w	r3, r0, #8
 800b2fe:	4604      	mov	r4, r0
 800b300:	6003      	str	r3, [r0, #0]
 800b302:	f7ff ffda 	bl	800b2ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc>
 800b306:	4620      	mov	r0, r4
 800b308:	bd10      	pop	{r4, pc}

0800b30a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 800b30a:	b510      	push	{r4, lr}
 800b30c:	4604      	mov	r4, r0
 800b30e:	f7ff ffaf 	bl	800b270 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800b312:	4620      	mov	r0, r4
 800b314:	bd10      	pop	{r4, pc}

0800b316 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
 800b316:	6840      	ldr	r0, [r0, #4]
 800b318:	4770      	bx	lr

0800b31a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 800b31a:	6800      	ldr	r0, [r0, #0]
 800b31c:	4408      	add	r0, r1
 800b31e:	4770      	bx	lr

0800b320 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 800b320:	6800      	ldr	r0, [r0, #0]
 800b322:	4770      	bx	lr

0800b324 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 800b324:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b326:	4604      	mov	r4, r0
 800b328:	4616      	mov	r6, r2
 800b32a:	460d      	mov	r5, r1
 800b32c:	b919      	cbnz	r1, 800b336 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800b32e:	b112      	cbz	r2, 800b336 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800b330:	480d      	ldr	r0, [pc, #52]	; (800b368 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 800b332:	f000 f846 	bl	800b3c2 <_ZSt19__throw_logic_errorPKc>
 800b336:	1b73      	subs	r3, r6, r5
 800b338:	2b0f      	cmp	r3, #15
 800b33a:	9301      	str	r3, [sp, #4]
 800b33c:	d907      	bls.n	800b34e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 800b33e:	2200      	movs	r2, #0
 800b340:	a901      	add	r1, sp, #4
 800b342:	4620      	mov	r0, r4
 800b344:	f7ff ff72 	bl	800b22c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800b348:	9b01      	ldr	r3, [sp, #4]
 800b34a:	6020      	str	r0, [r4, #0]
 800b34c:	60a3      	str	r3, [r4, #8]
 800b34e:	4632      	mov	r2, r6
 800b350:	4629      	mov	r1, r5
 800b352:	6820      	ldr	r0, [r4, #0]
 800b354:	f7ff ffcb 	bl	800b2ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 800b358:	9b01      	ldr	r3, [sp, #4]
 800b35a:	6822      	ldr	r2, [r4, #0]
 800b35c:	6063      	str	r3, [r4, #4]
 800b35e:	2100      	movs	r1, #0
 800b360:	54d1      	strb	r1, [r2, r3]
 800b362:	b002      	add	sp, #8
 800b364:	bd70      	pop	{r4, r5, r6, pc}
 800b366:	bf00      	nop
 800b368:	0800ba50 	.word	0x0800ba50

0800b36c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 800b36c:	b538      	push	{r3, r4, r5, lr}
 800b36e:	f100 0308 	add.w	r3, r0, #8
 800b372:	4604      	mov	r4, r0
 800b374:	6003      	str	r3, [r0, #0]
 800b376:	460d      	mov	r5, r1
 800b378:	b159      	cbz	r1, 800b392 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 800b37a:	4608      	mov	r0, r1
 800b37c:	f7f4 ff28 	bl	80001d0 <strlen>
 800b380:	182a      	adds	r2, r5, r0
 800b382:	4620      	mov	r0, r4
 800b384:	f04f 0300 	mov.w	r3, #0
 800b388:	4629      	mov	r1, r5
 800b38a:	f7ff ffcb 	bl	800b324 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 800b38e:	4620      	mov	r0, r4
 800b390:	bd38      	pop	{r3, r4, r5, pc}
 800b392:	2201      	movs	r2, #1
 800b394:	e7f5      	b.n	800b382 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

0800b396 <_ZdlPv>:
 800b396:	f000 b85f 	b.w	800b458 <free>

0800b39a <_Znwj>:
 800b39a:	2801      	cmp	r0, #1
 800b39c:	bf38      	it	cc
 800b39e:	2001      	movcc	r0, #1
 800b3a0:	b510      	push	{r4, lr}
 800b3a2:	4604      	mov	r4, r0
 800b3a4:	4620      	mov	r0, r4
 800b3a6:	f000 f84f 	bl	800b448 <malloc>
 800b3aa:	b930      	cbnz	r0, 800b3ba <_Znwj+0x20>
 800b3ac:	f000 f810 	bl	800b3d0 <_ZSt15get_new_handlerv>
 800b3b0:	b908      	cbnz	r0, 800b3b6 <_Znwj+0x1c>
 800b3b2:	f000 f815 	bl	800b3e0 <abort>
 800b3b6:	4780      	blx	r0
 800b3b8:	e7f4      	b.n	800b3a4 <_Znwj+0xa>
 800b3ba:	bd10      	pop	{r4, pc}

0800b3bc <_ZSt17__throw_bad_allocv>:
 800b3bc:	b508      	push	{r3, lr}
 800b3be:	f000 f80f 	bl	800b3e0 <abort>

0800b3c2 <_ZSt19__throw_logic_errorPKc>:
 800b3c2:	b508      	push	{r3, lr}
 800b3c4:	f000 f80c 	bl	800b3e0 <abort>

0800b3c8 <_ZSt20__throw_length_errorPKc>:
 800b3c8:	b508      	push	{r3, lr}
 800b3ca:	f000 f809 	bl	800b3e0 <abort>
	...

0800b3d0 <_ZSt15get_new_handlerv>:
 800b3d0:	4b02      	ldr	r3, [pc, #8]	; (800b3dc <_ZSt15get_new_handlerv+0xc>)
 800b3d2:	6818      	ldr	r0, [r3, #0]
 800b3d4:	f3bf 8f5b 	dmb	ish
 800b3d8:	4770      	bx	lr
 800b3da:	bf00      	nop
 800b3dc:	20006858 	.word	0x20006858

0800b3e0 <abort>:
 800b3e0:	b508      	push	{r3, lr}
 800b3e2:	2006      	movs	r0, #6
 800b3e4:	f000 f9d8 	bl	800b798 <raise>
 800b3e8:	2001      	movs	r0, #1
 800b3ea:	f7f5 fd0d 	bl	8000e08 <_exit>
	...

0800b3f0 <__errno>:
 800b3f0:	4b01      	ldr	r3, [pc, #4]	; (800b3f8 <__errno+0x8>)
 800b3f2:	6818      	ldr	r0, [r3, #0]
 800b3f4:	4770      	bx	lr
 800b3f6:	bf00      	nop
 800b3f8:	20000100 	.word	0x20000100

0800b3fc <__libc_init_array>:
 800b3fc:	b570      	push	{r4, r5, r6, lr}
 800b3fe:	4d0d      	ldr	r5, [pc, #52]	; (800b434 <__libc_init_array+0x38>)
 800b400:	4c0d      	ldr	r4, [pc, #52]	; (800b438 <__libc_init_array+0x3c>)
 800b402:	1b64      	subs	r4, r4, r5
 800b404:	10a4      	asrs	r4, r4, #2
 800b406:	2600      	movs	r6, #0
 800b408:	42a6      	cmp	r6, r4
 800b40a:	d109      	bne.n	800b420 <__libc_init_array+0x24>
 800b40c:	4d0b      	ldr	r5, [pc, #44]	; (800b43c <__libc_init_array+0x40>)
 800b40e:	4c0c      	ldr	r4, [pc, #48]	; (800b440 <__libc_init_array+0x44>)
 800b410:	f000 f9ea 	bl	800b7e8 <_init>
 800b414:	1b64      	subs	r4, r4, r5
 800b416:	10a4      	asrs	r4, r4, #2
 800b418:	2600      	movs	r6, #0
 800b41a:	42a6      	cmp	r6, r4
 800b41c:	d105      	bne.n	800b42a <__libc_init_array+0x2e>
 800b41e:	bd70      	pop	{r4, r5, r6, pc}
 800b420:	f855 3b04 	ldr.w	r3, [r5], #4
 800b424:	4798      	blx	r3
 800b426:	3601      	adds	r6, #1
 800b428:	e7ee      	b.n	800b408 <__libc_init_array+0xc>
 800b42a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b42e:	4798      	blx	r3
 800b430:	3601      	adds	r6, #1
 800b432:	e7f2      	b.n	800b41a <__libc_init_array+0x1e>
 800b434:	0800bae4 	.word	0x0800bae4
 800b438:	0800bae4 	.word	0x0800bae4
 800b43c:	0800bae4 	.word	0x0800bae4
 800b440:	0800bae8 	.word	0x0800bae8

0800b444 <__retarget_lock_acquire_recursive>:
 800b444:	4770      	bx	lr

0800b446 <__retarget_lock_release_recursive>:
 800b446:	4770      	bx	lr

0800b448 <malloc>:
 800b448:	4b02      	ldr	r3, [pc, #8]	; (800b454 <malloc+0xc>)
 800b44a:	4601      	mov	r1, r0
 800b44c:	6818      	ldr	r0, [r3, #0]
 800b44e:	f000 b88d 	b.w	800b56c <_malloc_r>
 800b452:	bf00      	nop
 800b454:	20000100 	.word	0x20000100

0800b458 <free>:
 800b458:	4b02      	ldr	r3, [pc, #8]	; (800b464 <free+0xc>)
 800b45a:	4601      	mov	r1, r0
 800b45c:	6818      	ldr	r0, [r3, #0]
 800b45e:	f000 b819 	b.w	800b494 <_free_r>
 800b462:	bf00      	nop
 800b464:	20000100 	.word	0x20000100

0800b468 <memcpy>:
 800b468:	440a      	add	r2, r1
 800b46a:	4291      	cmp	r1, r2
 800b46c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b470:	d100      	bne.n	800b474 <memcpy+0xc>
 800b472:	4770      	bx	lr
 800b474:	b510      	push	{r4, lr}
 800b476:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b47a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b47e:	4291      	cmp	r1, r2
 800b480:	d1f9      	bne.n	800b476 <memcpy+0xe>
 800b482:	bd10      	pop	{r4, pc}

0800b484 <memset>:
 800b484:	4402      	add	r2, r0
 800b486:	4603      	mov	r3, r0
 800b488:	4293      	cmp	r3, r2
 800b48a:	d100      	bne.n	800b48e <memset+0xa>
 800b48c:	4770      	bx	lr
 800b48e:	f803 1b01 	strb.w	r1, [r3], #1
 800b492:	e7f9      	b.n	800b488 <memset+0x4>

0800b494 <_free_r>:
 800b494:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b496:	2900      	cmp	r1, #0
 800b498:	d044      	beq.n	800b524 <_free_r+0x90>
 800b49a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b49e:	9001      	str	r0, [sp, #4]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	f1a1 0404 	sub.w	r4, r1, #4
 800b4a6:	bfb8      	it	lt
 800b4a8:	18e4      	addlt	r4, r4, r3
 800b4aa:	f000 f991 	bl	800b7d0 <__malloc_lock>
 800b4ae:	4a1e      	ldr	r2, [pc, #120]	; (800b528 <_free_r+0x94>)
 800b4b0:	9801      	ldr	r0, [sp, #4]
 800b4b2:	6813      	ldr	r3, [r2, #0]
 800b4b4:	b933      	cbnz	r3, 800b4c4 <_free_r+0x30>
 800b4b6:	6063      	str	r3, [r4, #4]
 800b4b8:	6014      	str	r4, [r2, #0]
 800b4ba:	b003      	add	sp, #12
 800b4bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b4c0:	f000 b98c 	b.w	800b7dc <__malloc_unlock>
 800b4c4:	42a3      	cmp	r3, r4
 800b4c6:	d908      	bls.n	800b4da <_free_r+0x46>
 800b4c8:	6825      	ldr	r5, [r4, #0]
 800b4ca:	1961      	adds	r1, r4, r5
 800b4cc:	428b      	cmp	r3, r1
 800b4ce:	bf01      	itttt	eq
 800b4d0:	6819      	ldreq	r1, [r3, #0]
 800b4d2:	685b      	ldreq	r3, [r3, #4]
 800b4d4:	1949      	addeq	r1, r1, r5
 800b4d6:	6021      	streq	r1, [r4, #0]
 800b4d8:	e7ed      	b.n	800b4b6 <_free_r+0x22>
 800b4da:	461a      	mov	r2, r3
 800b4dc:	685b      	ldr	r3, [r3, #4]
 800b4de:	b10b      	cbz	r3, 800b4e4 <_free_r+0x50>
 800b4e0:	42a3      	cmp	r3, r4
 800b4e2:	d9fa      	bls.n	800b4da <_free_r+0x46>
 800b4e4:	6811      	ldr	r1, [r2, #0]
 800b4e6:	1855      	adds	r5, r2, r1
 800b4e8:	42a5      	cmp	r5, r4
 800b4ea:	d10b      	bne.n	800b504 <_free_r+0x70>
 800b4ec:	6824      	ldr	r4, [r4, #0]
 800b4ee:	4421      	add	r1, r4
 800b4f0:	1854      	adds	r4, r2, r1
 800b4f2:	42a3      	cmp	r3, r4
 800b4f4:	6011      	str	r1, [r2, #0]
 800b4f6:	d1e0      	bne.n	800b4ba <_free_r+0x26>
 800b4f8:	681c      	ldr	r4, [r3, #0]
 800b4fa:	685b      	ldr	r3, [r3, #4]
 800b4fc:	6053      	str	r3, [r2, #4]
 800b4fe:	4421      	add	r1, r4
 800b500:	6011      	str	r1, [r2, #0]
 800b502:	e7da      	b.n	800b4ba <_free_r+0x26>
 800b504:	d902      	bls.n	800b50c <_free_r+0x78>
 800b506:	230c      	movs	r3, #12
 800b508:	6003      	str	r3, [r0, #0]
 800b50a:	e7d6      	b.n	800b4ba <_free_r+0x26>
 800b50c:	6825      	ldr	r5, [r4, #0]
 800b50e:	1961      	adds	r1, r4, r5
 800b510:	428b      	cmp	r3, r1
 800b512:	bf04      	itt	eq
 800b514:	6819      	ldreq	r1, [r3, #0]
 800b516:	685b      	ldreq	r3, [r3, #4]
 800b518:	6063      	str	r3, [r4, #4]
 800b51a:	bf04      	itt	eq
 800b51c:	1949      	addeq	r1, r1, r5
 800b51e:	6021      	streq	r1, [r4, #0]
 800b520:	6054      	str	r4, [r2, #4]
 800b522:	e7ca      	b.n	800b4ba <_free_r+0x26>
 800b524:	b003      	add	sp, #12
 800b526:	bd30      	pop	{r4, r5, pc}
 800b528:	20006860 	.word	0x20006860

0800b52c <sbrk_aligned>:
 800b52c:	b570      	push	{r4, r5, r6, lr}
 800b52e:	4e0e      	ldr	r6, [pc, #56]	; (800b568 <sbrk_aligned+0x3c>)
 800b530:	460c      	mov	r4, r1
 800b532:	6831      	ldr	r1, [r6, #0]
 800b534:	4605      	mov	r5, r0
 800b536:	b911      	cbnz	r1, 800b53e <sbrk_aligned+0x12>
 800b538:	f000 f8f6 	bl	800b728 <_sbrk_r>
 800b53c:	6030      	str	r0, [r6, #0]
 800b53e:	4621      	mov	r1, r4
 800b540:	4628      	mov	r0, r5
 800b542:	f000 f8f1 	bl	800b728 <_sbrk_r>
 800b546:	1c43      	adds	r3, r0, #1
 800b548:	d00a      	beq.n	800b560 <sbrk_aligned+0x34>
 800b54a:	1cc4      	adds	r4, r0, #3
 800b54c:	f024 0403 	bic.w	r4, r4, #3
 800b550:	42a0      	cmp	r0, r4
 800b552:	d007      	beq.n	800b564 <sbrk_aligned+0x38>
 800b554:	1a21      	subs	r1, r4, r0
 800b556:	4628      	mov	r0, r5
 800b558:	f000 f8e6 	bl	800b728 <_sbrk_r>
 800b55c:	3001      	adds	r0, #1
 800b55e:	d101      	bne.n	800b564 <sbrk_aligned+0x38>
 800b560:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b564:	4620      	mov	r0, r4
 800b566:	bd70      	pop	{r4, r5, r6, pc}
 800b568:	20006864 	.word	0x20006864

0800b56c <_malloc_r>:
 800b56c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b570:	1ccd      	adds	r5, r1, #3
 800b572:	f025 0503 	bic.w	r5, r5, #3
 800b576:	3508      	adds	r5, #8
 800b578:	2d0c      	cmp	r5, #12
 800b57a:	bf38      	it	cc
 800b57c:	250c      	movcc	r5, #12
 800b57e:	2d00      	cmp	r5, #0
 800b580:	4607      	mov	r7, r0
 800b582:	db01      	blt.n	800b588 <_malloc_r+0x1c>
 800b584:	42a9      	cmp	r1, r5
 800b586:	d905      	bls.n	800b594 <_malloc_r+0x28>
 800b588:	230c      	movs	r3, #12
 800b58a:	603b      	str	r3, [r7, #0]
 800b58c:	2600      	movs	r6, #0
 800b58e:	4630      	mov	r0, r6
 800b590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b594:	4e2e      	ldr	r6, [pc, #184]	; (800b650 <_malloc_r+0xe4>)
 800b596:	f000 f91b 	bl	800b7d0 <__malloc_lock>
 800b59a:	6833      	ldr	r3, [r6, #0]
 800b59c:	461c      	mov	r4, r3
 800b59e:	bb34      	cbnz	r4, 800b5ee <_malloc_r+0x82>
 800b5a0:	4629      	mov	r1, r5
 800b5a2:	4638      	mov	r0, r7
 800b5a4:	f7ff ffc2 	bl	800b52c <sbrk_aligned>
 800b5a8:	1c43      	adds	r3, r0, #1
 800b5aa:	4604      	mov	r4, r0
 800b5ac:	d14d      	bne.n	800b64a <_malloc_r+0xde>
 800b5ae:	6834      	ldr	r4, [r6, #0]
 800b5b0:	4626      	mov	r6, r4
 800b5b2:	2e00      	cmp	r6, #0
 800b5b4:	d140      	bne.n	800b638 <_malloc_r+0xcc>
 800b5b6:	6823      	ldr	r3, [r4, #0]
 800b5b8:	4631      	mov	r1, r6
 800b5ba:	4638      	mov	r0, r7
 800b5bc:	eb04 0803 	add.w	r8, r4, r3
 800b5c0:	f000 f8b2 	bl	800b728 <_sbrk_r>
 800b5c4:	4580      	cmp	r8, r0
 800b5c6:	d13a      	bne.n	800b63e <_malloc_r+0xd2>
 800b5c8:	6821      	ldr	r1, [r4, #0]
 800b5ca:	3503      	adds	r5, #3
 800b5cc:	1a6d      	subs	r5, r5, r1
 800b5ce:	f025 0503 	bic.w	r5, r5, #3
 800b5d2:	3508      	adds	r5, #8
 800b5d4:	2d0c      	cmp	r5, #12
 800b5d6:	bf38      	it	cc
 800b5d8:	250c      	movcc	r5, #12
 800b5da:	4629      	mov	r1, r5
 800b5dc:	4638      	mov	r0, r7
 800b5de:	f7ff ffa5 	bl	800b52c <sbrk_aligned>
 800b5e2:	3001      	adds	r0, #1
 800b5e4:	d02b      	beq.n	800b63e <_malloc_r+0xd2>
 800b5e6:	6823      	ldr	r3, [r4, #0]
 800b5e8:	442b      	add	r3, r5
 800b5ea:	6023      	str	r3, [r4, #0]
 800b5ec:	e00e      	b.n	800b60c <_malloc_r+0xa0>
 800b5ee:	6822      	ldr	r2, [r4, #0]
 800b5f0:	1b52      	subs	r2, r2, r5
 800b5f2:	d41e      	bmi.n	800b632 <_malloc_r+0xc6>
 800b5f4:	2a0b      	cmp	r2, #11
 800b5f6:	d916      	bls.n	800b626 <_malloc_r+0xba>
 800b5f8:	1961      	adds	r1, r4, r5
 800b5fa:	42a3      	cmp	r3, r4
 800b5fc:	6025      	str	r5, [r4, #0]
 800b5fe:	bf18      	it	ne
 800b600:	6059      	strne	r1, [r3, #4]
 800b602:	6863      	ldr	r3, [r4, #4]
 800b604:	bf08      	it	eq
 800b606:	6031      	streq	r1, [r6, #0]
 800b608:	5162      	str	r2, [r4, r5]
 800b60a:	604b      	str	r3, [r1, #4]
 800b60c:	4638      	mov	r0, r7
 800b60e:	f104 060b 	add.w	r6, r4, #11
 800b612:	f000 f8e3 	bl	800b7dc <__malloc_unlock>
 800b616:	f026 0607 	bic.w	r6, r6, #7
 800b61a:	1d23      	adds	r3, r4, #4
 800b61c:	1af2      	subs	r2, r6, r3
 800b61e:	d0b6      	beq.n	800b58e <_malloc_r+0x22>
 800b620:	1b9b      	subs	r3, r3, r6
 800b622:	50a3      	str	r3, [r4, r2]
 800b624:	e7b3      	b.n	800b58e <_malloc_r+0x22>
 800b626:	6862      	ldr	r2, [r4, #4]
 800b628:	42a3      	cmp	r3, r4
 800b62a:	bf0c      	ite	eq
 800b62c:	6032      	streq	r2, [r6, #0]
 800b62e:	605a      	strne	r2, [r3, #4]
 800b630:	e7ec      	b.n	800b60c <_malloc_r+0xa0>
 800b632:	4623      	mov	r3, r4
 800b634:	6864      	ldr	r4, [r4, #4]
 800b636:	e7b2      	b.n	800b59e <_malloc_r+0x32>
 800b638:	4634      	mov	r4, r6
 800b63a:	6876      	ldr	r6, [r6, #4]
 800b63c:	e7b9      	b.n	800b5b2 <_malloc_r+0x46>
 800b63e:	230c      	movs	r3, #12
 800b640:	603b      	str	r3, [r7, #0]
 800b642:	4638      	mov	r0, r7
 800b644:	f000 f8ca 	bl	800b7dc <__malloc_unlock>
 800b648:	e7a1      	b.n	800b58e <_malloc_r+0x22>
 800b64a:	6025      	str	r5, [r4, #0]
 800b64c:	e7de      	b.n	800b60c <_malloc_r+0xa0>
 800b64e:	bf00      	nop
 800b650:	20006860 	.word	0x20006860

0800b654 <cleanup_glue>:
 800b654:	b538      	push	{r3, r4, r5, lr}
 800b656:	460c      	mov	r4, r1
 800b658:	6809      	ldr	r1, [r1, #0]
 800b65a:	4605      	mov	r5, r0
 800b65c:	b109      	cbz	r1, 800b662 <cleanup_glue+0xe>
 800b65e:	f7ff fff9 	bl	800b654 <cleanup_glue>
 800b662:	4621      	mov	r1, r4
 800b664:	4628      	mov	r0, r5
 800b666:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b66a:	f7ff bf13 	b.w	800b494 <_free_r>
	...

0800b670 <_reclaim_reent>:
 800b670:	4b2c      	ldr	r3, [pc, #176]	; (800b724 <_reclaim_reent+0xb4>)
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	4283      	cmp	r3, r0
 800b676:	b570      	push	{r4, r5, r6, lr}
 800b678:	4604      	mov	r4, r0
 800b67a:	d051      	beq.n	800b720 <_reclaim_reent+0xb0>
 800b67c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b67e:	b143      	cbz	r3, 800b692 <_reclaim_reent+0x22>
 800b680:	68db      	ldr	r3, [r3, #12]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d14a      	bne.n	800b71c <_reclaim_reent+0xac>
 800b686:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b688:	6819      	ldr	r1, [r3, #0]
 800b68a:	b111      	cbz	r1, 800b692 <_reclaim_reent+0x22>
 800b68c:	4620      	mov	r0, r4
 800b68e:	f7ff ff01 	bl	800b494 <_free_r>
 800b692:	6961      	ldr	r1, [r4, #20]
 800b694:	b111      	cbz	r1, 800b69c <_reclaim_reent+0x2c>
 800b696:	4620      	mov	r0, r4
 800b698:	f7ff fefc 	bl	800b494 <_free_r>
 800b69c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b69e:	b111      	cbz	r1, 800b6a6 <_reclaim_reent+0x36>
 800b6a0:	4620      	mov	r0, r4
 800b6a2:	f7ff fef7 	bl	800b494 <_free_r>
 800b6a6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b6a8:	b111      	cbz	r1, 800b6b0 <_reclaim_reent+0x40>
 800b6aa:	4620      	mov	r0, r4
 800b6ac:	f7ff fef2 	bl	800b494 <_free_r>
 800b6b0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b6b2:	b111      	cbz	r1, 800b6ba <_reclaim_reent+0x4a>
 800b6b4:	4620      	mov	r0, r4
 800b6b6:	f7ff feed 	bl	800b494 <_free_r>
 800b6ba:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b6bc:	b111      	cbz	r1, 800b6c4 <_reclaim_reent+0x54>
 800b6be:	4620      	mov	r0, r4
 800b6c0:	f7ff fee8 	bl	800b494 <_free_r>
 800b6c4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b6c6:	b111      	cbz	r1, 800b6ce <_reclaim_reent+0x5e>
 800b6c8:	4620      	mov	r0, r4
 800b6ca:	f7ff fee3 	bl	800b494 <_free_r>
 800b6ce:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b6d0:	b111      	cbz	r1, 800b6d8 <_reclaim_reent+0x68>
 800b6d2:	4620      	mov	r0, r4
 800b6d4:	f7ff fede 	bl	800b494 <_free_r>
 800b6d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b6da:	b111      	cbz	r1, 800b6e2 <_reclaim_reent+0x72>
 800b6dc:	4620      	mov	r0, r4
 800b6de:	f7ff fed9 	bl	800b494 <_free_r>
 800b6e2:	69a3      	ldr	r3, [r4, #24]
 800b6e4:	b1e3      	cbz	r3, 800b720 <_reclaim_reent+0xb0>
 800b6e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b6e8:	4620      	mov	r0, r4
 800b6ea:	4798      	blx	r3
 800b6ec:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b6ee:	b1b9      	cbz	r1, 800b720 <_reclaim_reent+0xb0>
 800b6f0:	4620      	mov	r0, r4
 800b6f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b6f6:	f7ff bfad 	b.w	800b654 <cleanup_glue>
 800b6fa:	5949      	ldr	r1, [r1, r5]
 800b6fc:	b941      	cbnz	r1, 800b710 <_reclaim_reent+0xa0>
 800b6fe:	3504      	adds	r5, #4
 800b700:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b702:	2d80      	cmp	r5, #128	; 0x80
 800b704:	68d9      	ldr	r1, [r3, #12]
 800b706:	d1f8      	bne.n	800b6fa <_reclaim_reent+0x8a>
 800b708:	4620      	mov	r0, r4
 800b70a:	f7ff fec3 	bl	800b494 <_free_r>
 800b70e:	e7ba      	b.n	800b686 <_reclaim_reent+0x16>
 800b710:	680e      	ldr	r6, [r1, #0]
 800b712:	4620      	mov	r0, r4
 800b714:	f7ff febe 	bl	800b494 <_free_r>
 800b718:	4631      	mov	r1, r6
 800b71a:	e7ef      	b.n	800b6fc <_reclaim_reent+0x8c>
 800b71c:	2500      	movs	r5, #0
 800b71e:	e7ef      	b.n	800b700 <_reclaim_reent+0x90>
 800b720:	bd70      	pop	{r4, r5, r6, pc}
 800b722:	bf00      	nop
 800b724:	20000100 	.word	0x20000100

0800b728 <_sbrk_r>:
 800b728:	b538      	push	{r3, r4, r5, lr}
 800b72a:	4d06      	ldr	r5, [pc, #24]	; (800b744 <_sbrk_r+0x1c>)
 800b72c:	2300      	movs	r3, #0
 800b72e:	4604      	mov	r4, r0
 800b730:	4608      	mov	r0, r1
 800b732:	602b      	str	r3, [r5, #0]
 800b734:	f7f5 fb72 	bl	8000e1c <_sbrk>
 800b738:	1c43      	adds	r3, r0, #1
 800b73a:	d102      	bne.n	800b742 <_sbrk_r+0x1a>
 800b73c:	682b      	ldr	r3, [r5, #0]
 800b73e:	b103      	cbz	r3, 800b742 <_sbrk_r+0x1a>
 800b740:	6023      	str	r3, [r4, #0]
 800b742:	bd38      	pop	{r3, r4, r5, pc}
 800b744:	20006868 	.word	0x20006868

0800b748 <_raise_r>:
 800b748:	291f      	cmp	r1, #31
 800b74a:	b538      	push	{r3, r4, r5, lr}
 800b74c:	4604      	mov	r4, r0
 800b74e:	460d      	mov	r5, r1
 800b750:	d904      	bls.n	800b75c <_raise_r+0x14>
 800b752:	2316      	movs	r3, #22
 800b754:	6003      	str	r3, [r0, #0]
 800b756:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b75a:	bd38      	pop	{r3, r4, r5, pc}
 800b75c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b75e:	b112      	cbz	r2, 800b766 <_raise_r+0x1e>
 800b760:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b764:	b94b      	cbnz	r3, 800b77a <_raise_r+0x32>
 800b766:	4620      	mov	r0, r4
 800b768:	f000 f830 	bl	800b7cc <_getpid_r>
 800b76c:	462a      	mov	r2, r5
 800b76e:	4601      	mov	r1, r0
 800b770:	4620      	mov	r0, r4
 800b772:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b776:	f000 b817 	b.w	800b7a8 <_kill_r>
 800b77a:	2b01      	cmp	r3, #1
 800b77c:	d00a      	beq.n	800b794 <_raise_r+0x4c>
 800b77e:	1c59      	adds	r1, r3, #1
 800b780:	d103      	bne.n	800b78a <_raise_r+0x42>
 800b782:	2316      	movs	r3, #22
 800b784:	6003      	str	r3, [r0, #0]
 800b786:	2001      	movs	r0, #1
 800b788:	e7e7      	b.n	800b75a <_raise_r+0x12>
 800b78a:	2400      	movs	r4, #0
 800b78c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b790:	4628      	mov	r0, r5
 800b792:	4798      	blx	r3
 800b794:	2000      	movs	r0, #0
 800b796:	e7e0      	b.n	800b75a <_raise_r+0x12>

0800b798 <raise>:
 800b798:	4b02      	ldr	r3, [pc, #8]	; (800b7a4 <raise+0xc>)
 800b79a:	4601      	mov	r1, r0
 800b79c:	6818      	ldr	r0, [r3, #0]
 800b79e:	f7ff bfd3 	b.w	800b748 <_raise_r>
 800b7a2:	bf00      	nop
 800b7a4:	20000100 	.word	0x20000100

0800b7a8 <_kill_r>:
 800b7a8:	b538      	push	{r3, r4, r5, lr}
 800b7aa:	4d07      	ldr	r5, [pc, #28]	; (800b7c8 <_kill_r+0x20>)
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	4604      	mov	r4, r0
 800b7b0:	4608      	mov	r0, r1
 800b7b2:	4611      	mov	r1, r2
 800b7b4:	602b      	str	r3, [r5, #0]
 800b7b6:	f7f5 fb17 	bl	8000de8 <_kill>
 800b7ba:	1c43      	adds	r3, r0, #1
 800b7bc:	d102      	bne.n	800b7c4 <_kill_r+0x1c>
 800b7be:	682b      	ldr	r3, [r5, #0]
 800b7c0:	b103      	cbz	r3, 800b7c4 <_kill_r+0x1c>
 800b7c2:	6023      	str	r3, [r4, #0]
 800b7c4:	bd38      	pop	{r3, r4, r5, pc}
 800b7c6:	bf00      	nop
 800b7c8:	20006868 	.word	0x20006868

0800b7cc <_getpid_r>:
 800b7cc:	f7f5 bb04 	b.w	8000dd8 <_getpid>

0800b7d0 <__malloc_lock>:
 800b7d0:	4801      	ldr	r0, [pc, #4]	; (800b7d8 <__malloc_lock+0x8>)
 800b7d2:	f7ff be37 	b.w	800b444 <__retarget_lock_acquire_recursive>
 800b7d6:	bf00      	nop
 800b7d8:	2000685c 	.word	0x2000685c

0800b7dc <__malloc_unlock>:
 800b7dc:	4801      	ldr	r0, [pc, #4]	; (800b7e4 <__malloc_unlock+0x8>)
 800b7de:	f7ff be32 	b.w	800b446 <__retarget_lock_release_recursive>
 800b7e2:	bf00      	nop
 800b7e4:	2000685c 	.word	0x2000685c

0800b7e8 <_init>:
 800b7e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7ea:	bf00      	nop
 800b7ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7ee:	bc08      	pop	{r3}
 800b7f0:	469e      	mov	lr, r3
 800b7f2:	4770      	bx	lr

0800b7f4 <_fini>:
 800b7f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7f6:	bf00      	nop
 800b7f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7fa:	bc08      	pop	{r3}
 800b7fc:	469e      	mov	lr, r3
 800b7fe:	4770      	bx	lr
