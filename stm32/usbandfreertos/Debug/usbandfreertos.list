
usbandfreertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1d4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  0800a364  0800a364  0001a364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a4e8  0800a4e8  00020164  2**0
                  CONTENTS
  4 .ARM          00000008  0800a4e8  0800a4e8  0001a4e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a4f0  0800a4f0  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a4f0  0800a4f0  0001a4f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a4f4  0800a4f4  0001a4f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  0800a4f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020164  2**0
                  CONTENTS
 10 .bss          00006698  20000164  20000164  00020164  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200067fc  200067fc  00020164  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f20a  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000045cd  00000000  00000000  0003f39e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018c8  00000000  00000000  00043970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000016f0  00000000  00000000  00045238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006551  00000000  00000000  00046928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ce06  00000000  00000000  0004ce79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc5ef  00000000  00000000  00069c7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013626e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006ab0  00000000  00000000  001362c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000164 	.word	0x20000164
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a34c 	.word	0x0800a34c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000168 	.word	0x20000168
 80001cc:	0800a34c 	.word	0x0800a34c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e8:	f000 fa48 	bl	800097c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ec:	f000 f834 	bl	8000558 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f0:	f000 f89e 	bl	8000630 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init();
 80004f4:	f009 f912 	bl	800971c <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004f8:	f006 fb92 	bl	8006c20 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004fc:	4a0d      	ldr	r2, [pc, #52]	; (8000534 <main+0x50>)
 80004fe:	2100      	movs	r1, #0
 8000500:	480d      	ldr	r0, [pc, #52]	; (8000538 <main+0x54>)
 8000502:	f006 fbd7 	bl	8006cb4 <osThreadNew>
 8000506:	4603      	mov	r3, r0
 8000508:	4a0c      	ldr	r2, [pc, #48]	; (800053c <main+0x58>)
 800050a:	6013      	str	r3, [r2, #0]

  /* creation of ledtoggle */
  ledtoggleHandle = osThreadNew(ledstatustoggle, NULL, &ledtoggle_attributes);
 800050c:	4a0c      	ldr	r2, [pc, #48]	; (8000540 <main+0x5c>)
 800050e:	2100      	movs	r1, #0
 8000510:	480c      	ldr	r0, [pc, #48]	; (8000544 <main+0x60>)
 8000512:	f006 fbcf 	bl	8006cb4 <osThreadNew>
 8000516:	4603      	mov	r3, r0
 8000518:	4a0b      	ldr	r2, [pc, #44]	; (8000548 <main+0x64>)
 800051a:	6013      	str	r3, [r2, #0]

  /* creation of usbcomunication */
  usbcomunicationHandle = osThreadNew(usbcomunicationserial, NULL, &usbcomunication_attributes);
 800051c:	4a0b      	ldr	r2, [pc, #44]	; (800054c <main+0x68>)
 800051e:	2100      	movs	r1, #0
 8000520:	480b      	ldr	r0, [pc, #44]	; (8000550 <main+0x6c>)
 8000522:	f006 fbc7 	bl	8006cb4 <osThreadNew>
 8000526:	4603      	mov	r3, r0
 8000528:	4a0a      	ldr	r2, [pc, #40]	; (8000554 <main+0x70>)
 800052a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800052c:	f006 fb9c 	bl	8006c68 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000530:	e7fe      	b.n	8000530 <main+0x4c>
 8000532:	bf00      	nop
 8000534:	0800a404 	.word	0x0800a404
 8000538:	080006d1 	.word	0x080006d1
 800053c:	20000180 	.word	0x20000180
 8000540:	0800a428 	.word	0x0800a428
 8000544:	080006e5 	.word	0x080006e5
 8000548:	20000184 	.word	0x20000184
 800054c:	0800a44c 	.word	0x0800a44c
 8000550:	08000705 	.word	0x08000705
 8000554:	20000188 	.word	0x20000188

08000558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b094      	sub	sp, #80	; 0x50
 800055c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055e:	f107 0320 	add.w	r3, r7, #32
 8000562:	2230      	movs	r2, #48	; 0x30
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f009 fe26 	bl	800a1b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056c:	f107 030c 	add.w	r3, r7, #12
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
 800057a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800057c:	2300      	movs	r3, #0
 800057e:	60bb      	str	r3, [r7, #8]
 8000580:	4b29      	ldr	r3, [pc, #164]	; (8000628 <SystemClock_Config+0xd0>)
 8000582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000584:	4a28      	ldr	r2, [pc, #160]	; (8000628 <SystemClock_Config+0xd0>)
 8000586:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800058a:	6413      	str	r3, [r2, #64]	; 0x40
 800058c:	4b26      	ldr	r3, [pc, #152]	; (8000628 <SystemClock_Config+0xd0>)
 800058e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000594:	60bb      	str	r3, [r7, #8]
 8000596:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000598:	2300      	movs	r3, #0
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	4b23      	ldr	r3, [pc, #140]	; (800062c <SystemClock_Config+0xd4>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a22      	ldr	r2, [pc, #136]	; (800062c <SystemClock_Config+0xd4>)
 80005a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005a6:	6013      	str	r3, [r2, #0]
 80005a8:	4b20      	ldr	r3, [pc, #128]	; (800062c <SystemClock_Config+0xd4>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005b0:	607b      	str	r3, [r7, #4]
 80005b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80005b4:	2303      	movs	r3, #3
 80005b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005be:	2301      	movs	r3, #1
 80005c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c2:	2310      	movs	r3, #16
 80005c4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c6:	2302      	movs	r3, #2
 80005c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005d0:	2304      	movs	r3, #4
 80005d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005d4:	2348      	movs	r3, #72	; 0x48
 80005d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005d8:	2302      	movs	r3, #2
 80005da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80005dc:	2303      	movs	r3, #3
 80005de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e0:	f107 0320 	add.w	r3, r7, #32
 80005e4:	4618      	mov	r0, r3
 80005e6:	f001 ff5d 	bl	80024a4 <HAL_RCC_OscConfig>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80005f0:	f000 f8b0 	bl	8000754 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f4:	230f      	movs	r3, #15
 80005f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005f8:	2300      	movs	r3, #0
 80005fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000608:	f107 030c 	add.w	r3, r7, #12
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f002 f9c0 	bl	8002994 <HAL_RCC_ClockConfig>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800061a:	f000 f89b 	bl	8000754 <Error_Handler>
  }
}
 800061e:	bf00      	nop
 8000620:	3750      	adds	r7, #80	; 0x50
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40023800 	.word	0x40023800
 800062c:	40007000 	.word	0x40007000

08000630 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b088      	sub	sp, #32
 8000634:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000636:	f107 030c 	add.w	r3, r7, #12
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]
 8000644:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000646:	2300      	movs	r3, #0
 8000648:	60bb      	str	r3, [r7, #8]
 800064a:	4b1f      	ldr	r3, [pc, #124]	; (80006c8 <MX_GPIO_Init+0x98>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	4a1e      	ldr	r2, [pc, #120]	; (80006c8 <MX_GPIO_Init+0x98>)
 8000650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000654:	6313      	str	r3, [r2, #48]	; 0x30
 8000656:	4b1c      	ldr	r3, [pc, #112]	; (80006c8 <MX_GPIO_Init+0x98>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000662:	2300      	movs	r3, #0
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	4b18      	ldr	r3, [pc, #96]	; (80006c8 <MX_GPIO_Init+0x98>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	4a17      	ldr	r2, [pc, #92]	; (80006c8 <MX_GPIO_Init+0x98>)
 800066c:	f043 0301 	orr.w	r3, r3, #1
 8000670:	6313      	str	r3, [r2, #48]	; 0x30
 8000672:	4b15      	ldr	r3, [pc, #84]	; (80006c8 <MX_GPIO_Init+0x98>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	f003 0301 	and.w	r3, r3, #1
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800067e:	2300      	movs	r3, #0
 8000680:	603b      	str	r3, [r7, #0]
 8000682:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <MX_GPIO_Init+0x98>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	4a10      	ldr	r2, [pc, #64]	; (80006c8 <MX_GPIO_Init+0x98>)
 8000688:	f043 0302 	orr.w	r3, r3, #2
 800068c:	6313      	str	r3, [r2, #48]	; 0x30
 800068e:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <MX_GPIO_Init+0x98>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	f003 0302 	and.w	r3, r3, #2
 8000696:	603b      	str	r3, [r7, #0]
 8000698:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 800069a:	2200      	movs	r2, #0
 800069c:	2120      	movs	r1, #32
 800069e:	480b      	ldr	r0, [pc, #44]	; (80006cc <MX_GPIO_Init+0x9c>)
 80006a0:	f000 fc50 	bl	8000f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : led_Pin */
  GPIO_InitStruct.Pin = led_Pin;
 80006a4:	2320      	movs	r3, #32
 80006a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a8:	2301      	movs	r3, #1
 80006aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ac:	2300      	movs	r3, #0
 80006ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b0:	2300      	movs	r3, #0
 80006b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 80006b4:	f107 030c 	add.w	r3, r7, #12
 80006b8:	4619      	mov	r1, r3
 80006ba:	4804      	ldr	r0, [pc, #16]	; (80006cc <MX_GPIO_Init+0x9c>)
 80006bc:	f000 faa6 	bl	8000c0c <HAL_GPIO_Init>

}
 80006c0:	bf00      	nop
 80006c2:	3720      	adds	r7, #32
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40020400 	.word	0x40020400

080006d0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80006d8:	f009 f820 	bl	800971c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80006dc:	2001      	movs	r0, #1
 80006de:	f006 fb7b 	bl	8006dd8 <osDelay>
 80006e2:	e7fb      	b.n	80006dc <StartDefaultTask+0xc>

080006e4 <ledstatustoggle>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ledstatustoggle */
void ledstatustoggle(void *argument)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ledstatustoggle */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(led_GPIO_Port, led_Pin);
 80006ec:	2120      	movs	r1, #32
 80006ee:	4804      	ldr	r0, [pc, #16]	; (8000700 <ledstatustoggle+0x1c>)
 80006f0:	f000 fc41 	bl	8000f76 <HAL_GPIO_TogglePin>
	  osDelay(1000);
 80006f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006f8:	f006 fb6e 	bl	8006dd8 <osDelay>
	  HAL_GPIO_TogglePin(led_GPIO_Port, led_Pin);
 80006fc:	e7f6      	b.n	80006ec <ledstatustoggle+0x8>
 80006fe:	bf00      	nop
 8000700:	40020400 	.word	0x40020400

08000704 <usbcomunicationserial>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_usbcomunicationserial */
void usbcomunicationserial(void *argument)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN usbcomunicationserial */
	char *tosend = "Hello: giovanni\n";
 800070c:	4b07      	ldr	r3, [pc, #28]	; (800072c <usbcomunicationserial+0x28>)
 800070e:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  CDC_Transmit_FS((uint8_t *)tosend, strlen(tosend));
 8000710:	68f8      	ldr	r0, [r7, #12]
 8000712:	f7ff fd5d 	bl	80001d0 <strlen>
 8000716:	4603      	mov	r3, r0
 8000718:	b29b      	uxth	r3, r3
 800071a:	4619      	mov	r1, r3
 800071c:	68f8      	ldr	r0, [r7, #12]
 800071e:	f009 f8bb 	bl	8009898 <CDC_Transmit_FS>

    osDelay(2000);
 8000722:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000726:	f006 fb57 	bl	8006dd8 <osDelay>
	  CDC_Transmit_FS((uint8_t *)tosend, strlen(tosend));
 800072a:	e7f1      	b.n	8000710 <usbcomunicationserial+0xc>
 800072c:	0800a39c 	.word	0x0800a39c

08000730 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a04      	ldr	r2, [pc, #16]	; (8000750 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800073e:	4293      	cmp	r3, r2
 8000740:	d101      	bne.n	8000746 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000742:	f000 f93d 	bl	80009c0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40001000 	.word	0x40001000

08000754 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000758:	b672      	cpsid	i
}
 800075a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800075c:	e7fe      	b.n	800075c <Error_Handler+0x8>
	...

08000760 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	607b      	str	r3, [r7, #4]
 800076a:	4b12      	ldr	r3, [pc, #72]	; (80007b4 <HAL_MspInit+0x54>)
 800076c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800076e:	4a11      	ldr	r2, [pc, #68]	; (80007b4 <HAL_MspInit+0x54>)
 8000770:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000774:	6453      	str	r3, [r2, #68]	; 0x44
 8000776:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <HAL_MspInit+0x54>)
 8000778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800077a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	603b      	str	r3, [r7, #0]
 8000786:	4b0b      	ldr	r3, [pc, #44]	; (80007b4 <HAL_MspInit+0x54>)
 8000788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078a:	4a0a      	ldr	r2, [pc, #40]	; (80007b4 <HAL_MspInit+0x54>)
 800078c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000790:	6413      	str	r3, [r2, #64]	; 0x40
 8000792:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <HAL_MspInit+0x54>)
 8000794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800079a:	603b      	str	r3, [r7, #0]
 800079c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800079e:	2200      	movs	r2, #0
 80007a0:	210f      	movs	r1, #15
 80007a2:	f06f 0001 	mvn.w	r0, #1
 80007a6:	f000 fa07 	bl	8000bb8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40023800 	.word	0x40023800

080007b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08e      	sub	sp, #56	; 0x38
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80007c0:	2300      	movs	r3, #0
 80007c2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80007c4:	2300      	movs	r3, #0
 80007c6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80007c8:	2300      	movs	r3, #0
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	4b33      	ldr	r3, [pc, #204]	; (800089c <HAL_InitTick+0xe4>)
 80007ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d0:	4a32      	ldr	r2, [pc, #200]	; (800089c <HAL_InitTick+0xe4>)
 80007d2:	f043 0310 	orr.w	r3, r3, #16
 80007d6:	6413      	str	r3, [r2, #64]	; 0x40
 80007d8:	4b30      	ldr	r3, [pc, #192]	; (800089c <HAL_InitTick+0xe4>)
 80007da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007dc:	f003 0310 	and.w	r3, r3, #16
 80007e0:	60fb      	str	r3, [r7, #12]
 80007e2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007e4:	f107 0210 	add.w	r2, r7, #16
 80007e8:	f107 0314 	add.w	r3, r7, #20
 80007ec:	4611      	mov	r1, r2
 80007ee:	4618      	mov	r0, r3
 80007f0:	f002 fadc 	bl	8002dac <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80007f4:	6a3b      	ldr	r3, [r7, #32]
 80007f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80007f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d103      	bne.n	8000806 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80007fe:	f002 fac1 	bl	8002d84 <HAL_RCC_GetPCLK1Freq>
 8000802:	6378      	str	r0, [r7, #52]	; 0x34
 8000804:	e004      	b.n	8000810 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000806:	f002 fabd 	bl	8002d84 <HAL_RCC_GetPCLK1Freq>
 800080a:	4603      	mov	r3, r0
 800080c:	005b      	lsls	r3, r3, #1
 800080e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000812:	4a23      	ldr	r2, [pc, #140]	; (80008a0 <HAL_InitTick+0xe8>)
 8000814:	fba2 2303 	umull	r2, r3, r2, r3
 8000818:	0c9b      	lsrs	r3, r3, #18
 800081a:	3b01      	subs	r3, #1
 800081c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800081e:	4b21      	ldr	r3, [pc, #132]	; (80008a4 <HAL_InitTick+0xec>)
 8000820:	4a21      	ldr	r2, [pc, #132]	; (80008a8 <HAL_InitTick+0xf0>)
 8000822:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000824:	4b1f      	ldr	r3, [pc, #124]	; (80008a4 <HAL_InitTick+0xec>)
 8000826:	f240 32e7 	movw	r2, #999	; 0x3e7
 800082a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800082c:	4a1d      	ldr	r2, [pc, #116]	; (80008a4 <HAL_InitTick+0xec>)
 800082e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000830:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000832:	4b1c      	ldr	r3, [pc, #112]	; (80008a4 <HAL_InitTick+0xec>)
 8000834:	2200      	movs	r2, #0
 8000836:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000838:	4b1a      	ldr	r3, [pc, #104]	; (80008a4 <HAL_InitTick+0xec>)
 800083a:	2200      	movs	r2, #0
 800083c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800083e:	4b19      	ldr	r3, [pc, #100]	; (80008a4 <HAL_InitTick+0xec>)
 8000840:	2200      	movs	r2, #0
 8000842:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000844:	4817      	ldr	r0, [pc, #92]	; (80008a4 <HAL_InitTick+0xec>)
 8000846:	f002 fae3 	bl	8002e10 <HAL_TIM_Base_Init>
 800084a:	4603      	mov	r3, r0
 800084c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000850:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000854:	2b00      	cmp	r3, #0
 8000856:	d11b      	bne.n	8000890 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000858:	4812      	ldr	r0, [pc, #72]	; (80008a4 <HAL_InitTick+0xec>)
 800085a:	f002 fb33 	bl	8002ec4 <HAL_TIM_Base_Start_IT>
 800085e:	4603      	mov	r3, r0
 8000860:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000864:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000868:	2b00      	cmp	r3, #0
 800086a:	d111      	bne.n	8000890 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800086c:	2036      	movs	r0, #54	; 0x36
 800086e:	f000 f9bf 	bl	8000bf0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	2b0f      	cmp	r3, #15
 8000876:	d808      	bhi.n	800088a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000878:	2200      	movs	r2, #0
 800087a:	6879      	ldr	r1, [r7, #4]
 800087c:	2036      	movs	r0, #54	; 0x36
 800087e:	f000 f99b 	bl	8000bb8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000882:	4a0a      	ldr	r2, [pc, #40]	; (80008ac <HAL_InitTick+0xf4>)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	6013      	str	r3, [r2, #0]
 8000888:	e002      	b.n	8000890 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800088a:	2301      	movs	r3, #1
 800088c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000890:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000894:	4618      	mov	r0, r3
 8000896:	3738      	adds	r7, #56	; 0x38
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	40023800 	.word	0x40023800
 80008a0:	431bde83 	.word	0x431bde83
 80008a4:	2000018c 	.word	0x2000018c
 80008a8:	40001000 	.word	0x40001000
 80008ac:	20000004 	.word	0x20000004

080008b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008b4:	e7fe      	b.n	80008b4 <NMI_Handler+0x4>

080008b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ba:	e7fe      	b.n	80008ba <HardFault_Handler+0x4>

080008bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008c0:	e7fe      	b.n	80008c0 <MemManage_Handler+0x4>

080008c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008c2:	b480      	push	{r7}
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008c6:	e7fe      	b.n	80008c6 <BusFault_Handler+0x4>

080008c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008cc:	e7fe      	b.n	80008cc <UsageFault_Handler+0x4>

080008ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008d2:	bf00      	nop
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr

080008dc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80008e0:	4802      	ldr	r0, [pc, #8]	; (80008ec <TIM6_DAC_IRQHandler+0x10>)
 80008e2:	f002 fb5f 	bl	8002fa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	2000018c 	.word	0x2000018c

080008f0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80008f4:	4802      	ldr	r0, [pc, #8]	; (8000900 <OTG_FS_IRQHandler+0x10>)
 80008f6:	f000 fca8 	bl	800124a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	200060c8 	.word	0x200060c8

08000904 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000908:	4b06      	ldr	r3, [pc, #24]	; (8000924 <SystemInit+0x20>)
 800090a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800090e:	4a05      	ldr	r2, [pc, #20]	; (8000924 <SystemInit+0x20>)
 8000910:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000914:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	e000ed00 	.word	0xe000ed00

08000928 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000928:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000960 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800092c:	480d      	ldr	r0, [pc, #52]	; (8000964 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800092e:	490e      	ldr	r1, [pc, #56]	; (8000968 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000930:	4a0e      	ldr	r2, [pc, #56]	; (800096c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000932:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000934:	e002      	b.n	800093c <LoopCopyDataInit>

08000936 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000936:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000938:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800093a:	3304      	adds	r3, #4

0800093c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800093c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800093e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000940:	d3f9      	bcc.n	8000936 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000942:	4a0b      	ldr	r2, [pc, #44]	; (8000970 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000944:	4c0b      	ldr	r4, [pc, #44]	; (8000974 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000946:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000948:	e001      	b.n	800094e <LoopFillZerobss>

0800094a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800094a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800094c:	3204      	adds	r2, #4

0800094e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800094e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000950:	d3fb      	bcc.n	800094a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000952:	f7ff ffd7 	bl	8000904 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000956:	f009 fbfb 	bl	800a150 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800095a:	f7ff fdc3 	bl	80004e4 <main>
  bx  lr    
 800095e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000960:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000964:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000968:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 800096c:	0800a4f8 	.word	0x0800a4f8
  ldr r2, =_sbss
 8000970:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 8000974:	200067fc 	.word	0x200067fc

08000978 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000978:	e7fe      	b.n	8000978 <ADC_IRQHandler>
	...

0800097c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000980:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <HAL_Init+0x40>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a0d      	ldr	r2, [pc, #52]	; (80009bc <HAL_Init+0x40>)
 8000986:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800098a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800098c:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <HAL_Init+0x40>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a0a      	ldr	r2, [pc, #40]	; (80009bc <HAL_Init+0x40>)
 8000992:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000996:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000998:	4b08      	ldr	r3, [pc, #32]	; (80009bc <HAL_Init+0x40>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a07      	ldr	r2, [pc, #28]	; (80009bc <HAL_Init+0x40>)
 800099e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009a4:	2003      	movs	r0, #3
 80009a6:	f000 f8fc 	bl	8000ba2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009aa:	200f      	movs	r0, #15
 80009ac:	f7ff ff04 	bl	80007b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009b0:	f7ff fed6 	bl	8000760 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009b4:	2300      	movs	r3, #0
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40023c00 	.word	0x40023c00

080009c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <HAL_IncTick+0x20>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	461a      	mov	r2, r3
 80009ca:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <HAL_IncTick+0x24>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4413      	add	r3, r2
 80009d0:	4a04      	ldr	r2, [pc, #16]	; (80009e4 <HAL_IncTick+0x24>)
 80009d2:	6013      	str	r3, [r2, #0]
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	20000008 	.word	0x20000008
 80009e4:	200001d4 	.word	0x200001d4

080009e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  return uwTick;
 80009ec:	4b03      	ldr	r3, [pc, #12]	; (80009fc <HAL_GetTick+0x14>)
 80009ee:	681b      	ldr	r3, [r3, #0]
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	200001d4 	.word	0x200001d4

08000a00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a08:	f7ff ffee 	bl	80009e8 <HAL_GetTick>
 8000a0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a18:	d005      	beq.n	8000a26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a1a:	4b0a      	ldr	r3, [pc, #40]	; (8000a44 <HAL_Delay+0x44>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	461a      	mov	r2, r3
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	4413      	add	r3, r2
 8000a24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a26:	bf00      	nop
 8000a28:	f7ff ffde 	bl	80009e8 <HAL_GetTick>
 8000a2c:	4602      	mov	r2, r0
 8000a2e:	68bb      	ldr	r3, [r7, #8]
 8000a30:	1ad3      	subs	r3, r2, r3
 8000a32:	68fa      	ldr	r2, [r7, #12]
 8000a34:	429a      	cmp	r2, r3
 8000a36:	d8f7      	bhi.n	8000a28 <HAL_Delay+0x28>
  {
  }
}
 8000a38:	bf00      	nop
 8000a3a:	bf00      	nop
 8000a3c:	3710      	adds	r7, #16
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20000008 	.word	0x20000008

08000a48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b085      	sub	sp, #20
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	f003 0307 	and.w	r3, r3, #7
 8000a56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a58:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <__NVIC_SetPriorityGrouping+0x44>)
 8000a5a:	68db      	ldr	r3, [r3, #12]
 8000a5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a5e:	68ba      	ldr	r2, [r7, #8]
 8000a60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a64:	4013      	ands	r3, r2
 8000a66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a7a:	4a04      	ldr	r2, [pc, #16]	; (8000a8c <__NVIC_SetPriorityGrouping+0x44>)
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	60d3      	str	r3, [r2, #12]
}
 8000a80:	bf00      	nop
 8000a82:	3714      	adds	r7, #20
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr
 8000a8c:	e000ed00 	.word	0xe000ed00

08000a90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a94:	4b04      	ldr	r3, [pc, #16]	; (8000aa8 <__NVIC_GetPriorityGrouping+0x18>)
 8000a96:	68db      	ldr	r3, [r3, #12]
 8000a98:	0a1b      	lsrs	r3, r3, #8
 8000a9a:	f003 0307 	and.w	r3, r3, #7
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr
 8000aa8:	e000ed00 	.word	0xe000ed00

08000aac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	db0b      	blt.n	8000ad6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000abe:	79fb      	ldrb	r3, [r7, #7]
 8000ac0:	f003 021f 	and.w	r2, r3, #31
 8000ac4:	4907      	ldr	r1, [pc, #28]	; (8000ae4 <__NVIC_EnableIRQ+0x38>)
 8000ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aca:	095b      	lsrs	r3, r3, #5
 8000acc:	2001      	movs	r0, #1
 8000ace:	fa00 f202 	lsl.w	r2, r0, r2
 8000ad2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ad6:	bf00      	nop
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	e000e100 	.word	0xe000e100

08000ae8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4603      	mov	r3, r0
 8000af0:	6039      	str	r1, [r7, #0]
 8000af2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	db0a      	blt.n	8000b12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	b2da      	uxtb	r2, r3
 8000b00:	490c      	ldr	r1, [pc, #48]	; (8000b34 <__NVIC_SetPriority+0x4c>)
 8000b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b06:	0112      	lsls	r2, r2, #4
 8000b08:	b2d2      	uxtb	r2, r2
 8000b0a:	440b      	add	r3, r1
 8000b0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b10:	e00a      	b.n	8000b28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	b2da      	uxtb	r2, r3
 8000b16:	4908      	ldr	r1, [pc, #32]	; (8000b38 <__NVIC_SetPriority+0x50>)
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	f003 030f 	and.w	r3, r3, #15
 8000b1e:	3b04      	subs	r3, #4
 8000b20:	0112      	lsls	r2, r2, #4
 8000b22:	b2d2      	uxtb	r2, r2
 8000b24:	440b      	add	r3, r1
 8000b26:	761a      	strb	r2, [r3, #24]
}
 8000b28:	bf00      	nop
 8000b2a:	370c      	adds	r7, #12
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr
 8000b34:	e000e100 	.word	0xe000e100
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b089      	sub	sp, #36	; 0x24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	60f8      	str	r0, [r7, #12]
 8000b44:	60b9      	str	r1, [r7, #8]
 8000b46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	f003 0307 	and.w	r3, r3, #7
 8000b4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b50:	69fb      	ldr	r3, [r7, #28]
 8000b52:	f1c3 0307 	rsb	r3, r3, #7
 8000b56:	2b04      	cmp	r3, #4
 8000b58:	bf28      	it	cs
 8000b5a:	2304      	movcs	r3, #4
 8000b5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	3304      	adds	r3, #4
 8000b62:	2b06      	cmp	r3, #6
 8000b64:	d902      	bls.n	8000b6c <NVIC_EncodePriority+0x30>
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	3b03      	subs	r3, #3
 8000b6a:	e000      	b.n	8000b6e <NVIC_EncodePriority+0x32>
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b74:	69bb      	ldr	r3, [r7, #24]
 8000b76:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7a:	43da      	mvns	r2, r3
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	401a      	ands	r2, r3
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b8e:	43d9      	mvns	r1, r3
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b94:	4313      	orrs	r3, r2
         );
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3724      	adds	r7, #36	; 0x24
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr

08000ba2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b082      	sub	sp, #8
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000baa:	6878      	ldr	r0, [r7, #4]
 8000bac:	f7ff ff4c 	bl	8000a48 <__NVIC_SetPriorityGrouping>
}
 8000bb0:	bf00      	nop
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b086      	sub	sp, #24
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	60b9      	str	r1, [r7, #8]
 8000bc2:	607a      	str	r2, [r7, #4]
 8000bc4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bca:	f7ff ff61 	bl	8000a90 <__NVIC_GetPriorityGrouping>
 8000bce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bd0:	687a      	ldr	r2, [r7, #4]
 8000bd2:	68b9      	ldr	r1, [r7, #8]
 8000bd4:	6978      	ldr	r0, [r7, #20]
 8000bd6:	f7ff ffb1 	bl	8000b3c <NVIC_EncodePriority>
 8000bda:	4602      	mov	r2, r0
 8000bdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000be0:	4611      	mov	r1, r2
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff ff80 	bl	8000ae8 <__NVIC_SetPriority>
}
 8000be8:	bf00      	nop
 8000bea:	3718      	adds	r7, #24
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f7ff ff54 	bl	8000aac <__NVIC_EnableIRQ>
}
 8000c04:	bf00      	nop
 8000c06:	3708      	adds	r7, #8
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b089      	sub	sp, #36	; 0x24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c16:	2300      	movs	r3, #0
 8000c18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c22:	2300      	movs	r3, #0
 8000c24:	61fb      	str	r3, [r7, #28]
 8000c26:	e16b      	b.n	8000f00 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c28:	2201      	movs	r2, #1
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	697a      	ldr	r2, [r7, #20]
 8000c38:	4013      	ands	r3, r2
 8000c3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c3c:	693a      	ldr	r2, [r7, #16]
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	429a      	cmp	r2, r3
 8000c42:	f040 815a 	bne.w	8000efa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	f003 0303 	and.w	r3, r3, #3
 8000c4e:	2b01      	cmp	r3, #1
 8000c50:	d005      	beq.n	8000c5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c5a:	2b02      	cmp	r3, #2
 8000c5c:	d130      	bne.n	8000cc0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	689b      	ldr	r3, [r3, #8]
 8000c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	2203      	movs	r2, #3
 8000c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6e:	43db      	mvns	r3, r3
 8000c70:	69ba      	ldr	r2, [r7, #24]
 8000c72:	4013      	ands	r3, r2
 8000c74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	68da      	ldr	r2, [r3, #12]
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c82:	69ba      	ldr	r2, [r7, #24]
 8000c84:	4313      	orrs	r3, r2
 8000c86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	69ba      	ldr	r2, [r7, #24]
 8000c8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c94:	2201      	movs	r2, #1
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9c:	43db      	mvns	r3, r3
 8000c9e:	69ba      	ldr	r2, [r7, #24]
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	091b      	lsrs	r3, r3, #4
 8000caa:	f003 0201 	and.w	r2, r3, #1
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb4:	69ba      	ldr	r2, [r7, #24]
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	69ba      	ldr	r2, [r7, #24]
 8000cbe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	f003 0303 	and.w	r3, r3, #3
 8000cc8:	2b03      	cmp	r3, #3
 8000cca:	d017      	beq.n	8000cfc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	005b      	lsls	r3, r3, #1
 8000cd6:	2203      	movs	r2, #3
 8000cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cdc:	43db      	mvns	r3, r3
 8000cde:	69ba      	ldr	r2, [r7, #24]
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	689a      	ldr	r2, [r3, #8]
 8000ce8:	69fb      	ldr	r3, [r7, #28]
 8000cea:	005b      	lsls	r3, r3, #1
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	69ba      	ldr	r2, [r7, #24]
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	69ba      	ldr	r2, [r7, #24]
 8000cfa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f003 0303 	and.w	r3, r3, #3
 8000d04:	2b02      	cmp	r3, #2
 8000d06:	d123      	bne.n	8000d50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	08da      	lsrs	r2, r3, #3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	3208      	adds	r2, #8
 8000d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	f003 0307 	and.w	r3, r3, #7
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	220f      	movs	r2, #15
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	43db      	mvns	r3, r3
 8000d26:	69ba      	ldr	r2, [r7, #24]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	691a      	ldr	r2, [r3, #16]
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	f003 0307 	and.w	r3, r3, #7
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3c:	69ba      	ldr	r2, [r7, #24]
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	08da      	lsrs	r2, r3, #3
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	3208      	adds	r2, #8
 8000d4a:	69b9      	ldr	r1, [r7, #24]
 8000d4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	2203      	movs	r2, #3
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	43db      	mvns	r3, r3
 8000d62:	69ba      	ldr	r2, [r7, #24]
 8000d64:	4013      	ands	r3, r2
 8000d66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f003 0203 	and.w	r2, r3, #3
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	fa02 f303 	lsl.w	r3, r2, r3
 8000d78:	69ba      	ldr	r2, [r7, #24]
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	69ba      	ldr	r2, [r7, #24]
 8000d82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	f000 80b4 	beq.w	8000efa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	4b60      	ldr	r3, [pc, #384]	; (8000f18 <HAL_GPIO_Init+0x30c>)
 8000d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9a:	4a5f      	ldr	r2, [pc, #380]	; (8000f18 <HAL_GPIO_Init+0x30c>)
 8000d9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000da0:	6453      	str	r3, [r2, #68]	; 0x44
 8000da2:	4b5d      	ldr	r3, [pc, #372]	; (8000f18 <HAL_GPIO_Init+0x30c>)
 8000da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dae:	4a5b      	ldr	r2, [pc, #364]	; (8000f1c <HAL_GPIO_Init+0x310>)
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	089b      	lsrs	r3, r3, #2
 8000db4:	3302      	adds	r3, #2
 8000db6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	f003 0303 	and.w	r3, r3, #3
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	220f      	movs	r2, #15
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	43db      	mvns	r3, r3
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	4013      	ands	r3, r2
 8000dd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4a52      	ldr	r2, [pc, #328]	; (8000f20 <HAL_GPIO_Init+0x314>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d02b      	beq.n	8000e32 <HAL_GPIO_Init+0x226>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4a51      	ldr	r2, [pc, #324]	; (8000f24 <HAL_GPIO_Init+0x318>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d025      	beq.n	8000e2e <HAL_GPIO_Init+0x222>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4a50      	ldr	r2, [pc, #320]	; (8000f28 <HAL_GPIO_Init+0x31c>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d01f      	beq.n	8000e2a <HAL_GPIO_Init+0x21e>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4a4f      	ldr	r2, [pc, #316]	; (8000f2c <HAL_GPIO_Init+0x320>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d019      	beq.n	8000e26 <HAL_GPIO_Init+0x21a>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4a4e      	ldr	r2, [pc, #312]	; (8000f30 <HAL_GPIO_Init+0x324>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d013      	beq.n	8000e22 <HAL_GPIO_Init+0x216>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4a4d      	ldr	r2, [pc, #308]	; (8000f34 <HAL_GPIO_Init+0x328>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d00d      	beq.n	8000e1e <HAL_GPIO_Init+0x212>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4a4c      	ldr	r2, [pc, #304]	; (8000f38 <HAL_GPIO_Init+0x32c>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d007      	beq.n	8000e1a <HAL_GPIO_Init+0x20e>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4a4b      	ldr	r2, [pc, #300]	; (8000f3c <HAL_GPIO_Init+0x330>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d101      	bne.n	8000e16 <HAL_GPIO_Init+0x20a>
 8000e12:	2307      	movs	r3, #7
 8000e14:	e00e      	b.n	8000e34 <HAL_GPIO_Init+0x228>
 8000e16:	2308      	movs	r3, #8
 8000e18:	e00c      	b.n	8000e34 <HAL_GPIO_Init+0x228>
 8000e1a:	2306      	movs	r3, #6
 8000e1c:	e00a      	b.n	8000e34 <HAL_GPIO_Init+0x228>
 8000e1e:	2305      	movs	r3, #5
 8000e20:	e008      	b.n	8000e34 <HAL_GPIO_Init+0x228>
 8000e22:	2304      	movs	r3, #4
 8000e24:	e006      	b.n	8000e34 <HAL_GPIO_Init+0x228>
 8000e26:	2303      	movs	r3, #3
 8000e28:	e004      	b.n	8000e34 <HAL_GPIO_Init+0x228>
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	e002      	b.n	8000e34 <HAL_GPIO_Init+0x228>
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e000      	b.n	8000e34 <HAL_GPIO_Init+0x228>
 8000e32:	2300      	movs	r3, #0
 8000e34:	69fa      	ldr	r2, [r7, #28]
 8000e36:	f002 0203 	and.w	r2, r2, #3
 8000e3a:	0092      	lsls	r2, r2, #2
 8000e3c:	4093      	lsls	r3, r2
 8000e3e:	69ba      	ldr	r2, [r7, #24]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e44:	4935      	ldr	r1, [pc, #212]	; (8000f1c <HAL_GPIO_Init+0x310>)
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	089b      	lsrs	r3, r3, #2
 8000e4a:	3302      	adds	r3, #2
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e52:	4b3b      	ldr	r3, [pc, #236]	; (8000f40 <HAL_GPIO_Init+0x334>)
 8000e54:	689b      	ldr	r3, [r3, #8]
 8000e56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	43db      	mvns	r3, r3
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	4013      	ands	r3, r2
 8000e60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d003      	beq.n	8000e76 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	4313      	orrs	r3, r2
 8000e74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e76:	4a32      	ldr	r2, [pc, #200]	; (8000f40 <HAL_GPIO_Init+0x334>)
 8000e78:	69bb      	ldr	r3, [r7, #24]
 8000e7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e7c:	4b30      	ldr	r3, [pc, #192]	; (8000f40 <HAL_GPIO_Init+0x334>)
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	43db      	mvns	r3, r3
 8000e86:	69ba      	ldr	r2, [r7, #24]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d003      	beq.n	8000ea0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ea0:	4a27      	ldr	r2, [pc, #156]	; (8000f40 <HAL_GPIO_Init+0x334>)
 8000ea2:	69bb      	ldr	r3, [r7, #24]
 8000ea4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ea6:	4b26      	ldr	r3, [pc, #152]	; (8000f40 <HAL_GPIO_Init+0x334>)
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	43db      	mvns	r3, r3
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d003      	beq.n	8000eca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000eca:	4a1d      	ldr	r2, [pc, #116]	; (8000f40 <HAL_GPIO_Init+0x334>)
 8000ecc:	69bb      	ldr	r3, [r7, #24]
 8000ece:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ed0:	4b1b      	ldr	r3, [pc, #108]	; (8000f40 <HAL_GPIO_Init+0x334>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	4013      	ands	r3, r2
 8000ede:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d003      	beq.n	8000ef4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ef4:	4a12      	ldr	r2, [pc, #72]	; (8000f40 <HAL_GPIO_Init+0x334>)
 8000ef6:	69bb      	ldr	r3, [r7, #24]
 8000ef8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	3301      	adds	r3, #1
 8000efe:	61fb      	str	r3, [r7, #28]
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	2b0f      	cmp	r3, #15
 8000f04:	f67f ae90 	bls.w	8000c28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f08:	bf00      	nop
 8000f0a:	bf00      	nop
 8000f0c:	3724      	adds	r7, #36	; 0x24
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	40023800 	.word	0x40023800
 8000f1c:	40013800 	.word	0x40013800
 8000f20:	40020000 	.word	0x40020000
 8000f24:	40020400 	.word	0x40020400
 8000f28:	40020800 	.word	0x40020800
 8000f2c:	40020c00 	.word	0x40020c00
 8000f30:	40021000 	.word	0x40021000
 8000f34:	40021400 	.word	0x40021400
 8000f38:	40021800 	.word	0x40021800
 8000f3c:	40021c00 	.word	0x40021c00
 8000f40:	40013c00 	.word	0x40013c00

08000f44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	807b      	strh	r3, [r7, #2]
 8000f50:	4613      	mov	r3, r2
 8000f52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f54:	787b      	ldrb	r3, [r7, #1]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d003      	beq.n	8000f62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f5a:	887a      	ldrh	r2, [r7, #2]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f60:	e003      	b.n	8000f6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f62:	887b      	ldrh	r3, [r7, #2]
 8000f64:	041a      	lsls	r2, r3, #16
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	619a      	str	r2, [r3, #24]
}
 8000f6a:	bf00      	nop
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr

08000f76 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f76:	b480      	push	{r7}
 8000f78:	b085      	sub	sp, #20
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
 8000f7e:	460b      	mov	r3, r1
 8000f80:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	695b      	ldr	r3, [r3, #20]
 8000f86:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f88:	887a      	ldrh	r2, [r7, #2]
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	041a      	lsls	r2, r3, #16
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	43d9      	mvns	r1, r3
 8000f94:	887b      	ldrh	r3, [r7, #2]
 8000f96:	400b      	ands	r3, r1
 8000f98:	431a      	orrs	r2, r3
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	619a      	str	r2, [r3, #24]
}
 8000f9e:	bf00      	nop
 8000fa0:	3714      	adds	r7, #20
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr

08000faa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000faa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fac:	b08f      	sub	sp, #60	; 0x3c
 8000fae:	af0a      	add	r7, sp, #40	; 0x28
 8000fb0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d101      	bne.n	8000fbc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	e10f      	b.n	80011dc <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d106      	bne.n	8000fdc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f008 fda6 	bl	8009b28 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2203      	movs	r2, #3
 8000fe0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d102      	bne.n	8000ff6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f002 facb 	bl	8003596 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	603b      	str	r3, [r7, #0]
 8001006:	687e      	ldr	r6, [r7, #4]
 8001008:	466d      	mov	r5, sp
 800100a:	f106 0410 	add.w	r4, r6, #16
 800100e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001010:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001012:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001014:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001016:	e894 0003 	ldmia.w	r4, {r0, r1}
 800101a:	e885 0003 	stmia.w	r5, {r0, r1}
 800101e:	1d33      	adds	r3, r6, #4
 8001020:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001022:	6838      	ldr	r0, [r7, #0]
 8001024:	f002 f9a2 	bl	800336c <USB_CoreInit>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d005      	beq.n	800103a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2202      	movs	r2, #2
 8001032:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	e0d0      	b.n	80011dc <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	2100      	movs	r1, #0
 8001040:	4618      	mov	r0, r3
 8001042:	f002 fab9 	bl	80035b8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001046:	2300      	movs	r3, #0
 8001048:	73fb      	strb	r3, [r7, #15]
 800104a:	e04a      	b.n	80010e2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800104c:	7bfa      	ldrb	r2, [r7, #15]
 800104e:	6879      	ldr	r1, [r7, #4]
 8001050:	4613      	mov	r3, r2
 8001052:	00db      	lsls	r3, r3, #3
 8001054:	4413      	add	r3, r2
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	440b      	add	r3, r1
 800105a:	333d      	adds	r3, #61	; 0x3d
 800105c:	2201      	movs	r2, #1
 800105e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001060:	7bfa      	ldrb	r2, [r7, #15]
 8001062:	6879      	ldr	r1, [r7, #4]
 8001064:	4613      	mov	r3, r2
 8001066:	00db      	lsls	r3, r3, #3
 8001068:	4413      	add	r3, r2
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	440b      	add	r3, r1
 800106e:	333c      	adds	r3, #60	; 0x3c
 8001070:	7bfa      	ldrb	r2, [r7, #15]
 8001072:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001074:	7bfa      	ldrb	r2, [r7, #15]
 8001076:	7bfb      	ldrb	r3, [r7, #15]
 8001078:	b298      	uxth	r0, r3
 800107a:	6879      	ldr	r1, [r7, #4]
 800107c:	4613      	mov	r3, r2
 800107e:	00db      	lsls	r3, r3, #3
 8001080:	4413      	add	r3, r2
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	440b      	add	r3, r1
 8001086:	3344      	adds	r3, #68	; 0x44
 8001088:	4602      	mov	r2, r0
 800108a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800108c:	7bfa      	ldrb	r2, [r7, #15]
 800108e:	6879      	ldr	r1, [r7, #4]
 8001090:	4613      	mov	r3, r2
 8001092:	00db      	lsls	r3, r3, #3
 8001094:	4413      	add	r3, r2
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	440b      	add	r3, r1
 800109a:	3340      	adds	r3, #64	; 0x40
 800109c:	2200      	movs	r2, #0
 800109e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80010a0:	7bfa      	ldrb	r2, [r7, #15]
 80010a2:	6879      	ldr	r1, [r7, #4]
 80010a4:	4613      	mov	r3, r2
 80010a6:	00db      	lsls	r3, r3, #3
 80010a8:	4413      	add	r3, r2
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	440b      	add	r3, r1
 80010ae:	3348      	adds	r3, #72	; 0x48
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80010b4:	7bfa      	ldrb	r2, [r7, #15]
 80010b6:	6879      	ldr	r1, [r7, #4]
 80010b8:	4613      	mov	r3, r2
 80010ba:	00db      	lsls	r3, r3, #3
 80010bc:	4413      	add	r3, r2
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	440b      	add	r3, r1
 80010c2:	334c      	adds	r3, #76	; 0x4c
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80010c8:	7bfa      	ldrb	r2, [r7, #15]
 80010ca:	6879      	ldr	r1, [r7, #4]
 80010cc:	4613      	mov	r3, r2
 80010ce:	00db      	lsls	r3, r3, #3
 80010d0:	4413      	add	r3, r2
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	440b      	add	r3, r1
 80010d6:	3354      	adds	r3, #84	; 0x54
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010dc:	7bfb      	ldrb	r3, [r7, #15]
 80010de:	3301      	adds	r3, #1
 80010e0:	73fb      	strb	r3, [r7, #15]
 80010e2:	7bfa      	ldrb	r2, [r7, #15]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d3af      	bcc.n	800104c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010ec:	2300      	movs	r3, #0
 80010ee:	73fb      	strb	r3, [r7, #15]
 80010f0:	e044      	b.n	800117c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80010f2:	7bfa      	ldrb	r2, [r7, #15]
 80010f4:	6879      	ldr	r1, [r7, #4]
 80010f6:	4613      	mov	r3, r2
 80010f8:	00db      	lsls	r3, r3, #3
 80010fa:	4413      	add	r3, r2
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	440b      	add	r3, r1
 8001100:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001104:	2200      	movs	r2, #0
 8001106:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001108:	7bfa      	ldrb	r2, [r7, #15]
 800110a:	6879      	ldr	r1, [r7, #4]
 800110c:	4613      	mov	r3, r2
 800110e:	00db      	lsls	r3, r3, #3
 8001110:	4413      	add	r3, r2
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	440b      	add	r3, r1
 8001116:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800111a:	7bfa      	ldrb	r2, [r7, #15]
 800111c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800111e:	7bfa      	ldrb	r2, [r7, #15]
 8001120:	6879      	ldr	r1, [r7, #4]
 8001122:	4613      	mov	r3, r2
 8001124:	00db      	lsls	r3, r3, #3
 8001126:	4413      	add	r3, r2
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	440b      	add	r3, r1
 800112c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001130:	2200      	movs	r2, #0
 8001132:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001134:	7bfa      	ldrb	r2, [r7, #15]
 8001136:	6879      	ldr	r1, [r7, #4]
 8001138:	4613      	mov	r3, r2
 800113a:	00db      	lsls	r3, r3, #3
 800113c:	4413      	add	r3, r2
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	440b      	add	r3, r1
 8001142:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800114a:	7bfa      	ldrb	r2, [r7, #15]
 800114c:	6879      	ldr	r1, [r7, #4]
 800114e:	4613      	mov	r3, r2
 8001150:	00db      	lsls	r3, r3, #3
 8001152:	4413      	add	r3, r2
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	440b      	add	r3, r1
 8001158:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001160:	7bfa      	ldrb	r2, [r7, #15]
 8001162:	6879      	ldr	r1, [r7, #4]
 8001164:	4613      	mov	r3, r2
 8001166:	00db      	lsls	r3, r3, #3
 8001168:	4413      	add	r3, r2
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	440b      	add	r3, r1
 800116e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001176:	7bfb      	ldrb	r3, [r7, #15]
 8001178:	3301      	adds	r3, #1
 800117a:	73fb      	strb	r3, [r7, #15]
 800117c:	7bfa      	ldrb	r2, [r7, #15]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	429a      	cmp	r2, r3
 8001184:	d3b5      	bcc.n	80010f2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	603b      	str	r3, [r7, #0]
 800118c:	687e      	ldr	r6, [r7, #4]
 800118e:	466d      	mov	r5, sp
 8001190:	f106 0410 	add.w	r4, r6, #16
 8001194:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001196:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001198:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800119a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800119c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80011a0:	e885 0003 	stmia.w	r5, {r0, r1}
 80011a4:	1d33      	adds	r3, r6, #4
 80011a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011a8:	6838      	ldr	r0, [r7, #0]
 80011aa:	f002 fa51 	bl	8003650 <USB_DevInit>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d005      	beq.n	80011c0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2202      	movs	r2, #2
 80011b8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80011bc:	2301      	movs	r3, #1
 80011be:	e00d      	b.n	80011dc <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2200      	movs	r2, #0
 80011c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2201      	movs	r2, #1
 80011cc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f003 fba0 	bl	800491a <USB_DevDisconnect>

  return HAL_OK;
 80011da:	2300      	movs	r3, #0
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3714      	adds	r7, #20
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080011e4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d101      	bne.n	8001200 <HAL_PCD_Start+0x1c>
 80011fc:	2302      	movs	r3, #2
 80011fe:	e020      	b.n	8001242 <HAL_PCD_Start+0x5e>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2201      	movs	r2, #1
 8001204:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800120c:	2b01      	cmp	r3, #1
 800120e:	d109      	bne.n	8001224 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001214:	2b01      	cmp	r3, #1
 8001216:	d005      	beq.n	8001224 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800121c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4618      	mov	r0, r3
 800122a:	f002 f9a3 	bl	8003574 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4618      	mov	r0, r3
 8001234:	f003 fb50 	bl	80048d8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2200      	movs	r2, #0
 800123c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001240:	2300      	movs	r3, #0
}
 8001242:	4618      	mov	r0, r3
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800124a:	b590      	push	{r4, r7, lr}
 800124c:	b08d      	sub	sp, #52	; 0x34
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001258:	6a3b      	ldr	r3, [r7, #32]
 800125a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4618      	mov	r0, r3
 8001262:	f003 fc0e 	bl	8004a82 <USB_GetMode>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	f040 848a 	bne.w	8001b82 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4618      	mov	r0, r3
 8001274:	f003 fb72 	bl	800495c <USB_ReadInterrupts>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	f000 8480 	beq.w	8001b80 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	0a1b      	lsrs	r3, r3, #8
 800128a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4618      	mov	r0, r3
 800129a:	f003 fb5f 	bl	800495c <USB_ReadInterrupts>
 800129e:	4603      	mov	r3, r0
 80012a0:	f003 0302 	and.w	r3, r3, #2
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d107      	bne.n	80012b8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	695a      	ldr	r2, [r3, #20]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f002 0202 	and.w	r2, r2, #2
 80012b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4618      	mov	r0, r3
 80012be:	f003 fb4d 	bl	800495c <USB_ReadInterrupts>
 80012c2:	4603      	mov	r3, r0
 80012c4:	f003 0310 	and.w	r3, r3, #16
 80012c8:	2b10      	cmp	r3, #16
 80012ca:	d161      	bne.n	8001390 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	699a      	ldr	r2, [r3, #24]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f022 0210 	bic.w	r2, r2, #16
 80012da:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80012dc:	6a3b      	ldr	r3, [r7, #32]
 80012de:	6a1b      	ldr	r3, [r3, #32]
 80012e0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	f003 020f 	and.w	r2, r3, #15
 80012e8:	4613      	mov	r3, r2
 80012ea:	00db      	lsls	r3, r3, #3
 80012ec:	4413      	add	r3, r2
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80012f4:	687a      	ldr	r2, [r7, #4]
 80012f6:	4413      	add	r3, r2
 80012f8:	3304      	adds	r3, #4
 80012fa:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	0c5b      	lsrs	r3, r3, #17
 8001300:	f003 030f 	and.w	r3, r3, #15
 8001304:	2b02      	cmp	r3, #2
 8001306:	d124      	bne.n	8001352 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800130e:	4013      	ands	r3, r2
 8001310:	2b00      	cmp	r3, #0
 8001312:	d035      	beq.n	8001380 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	091b      	lsrs	r3, r3, #4
 800131c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800131e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001322:	b29b      	uxth	r3, r3
 8001324:	461a      	mov	r2, r3
 8001326:	6a38      	ldr	r0, [r7, #32]
 8001328:	f003 f984 	bl	8004634 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	691a      	ldr	r2, [r3, #16]
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	091b      	lsrs	r3, r3, #4
 8001334:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001338:	441a      	add	r2, r3
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	6a1a      	ldr	r2, [r3, #32]
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	091b      	lsrs	r3, r3, #4
 8001346:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800134a:	441a      	add	r2, r3
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	621a      	str	r2, [r3, #32]
 8001350:	e016      	b.n	8001380 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	0c5b      	lsrs	r3, r3, #17
 8001356:	f003 030f 	and.w	r3, r3, #15
 800135a:	2b06      	cmp	r3, #6
 800135c:	d110      	bne.n	8001380 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001364:	2208      	movs	r2, #8
 8001366:	4619      	mov	r1, r3
 8001368:	6a38      	ldr	r0, [r7, #32]
 800136a:	f003 f963 	bl	8004634 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	6a1a      	ldr	r2, [r3, #32]
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	091b      	lsrs	r3, r3, #4
 8001376:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800137a:	441a      	add	r2, r3
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	699a      	ldr	r2, [r3, #24]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f042 0210 	orr.w	r2, r2, #16
 800138e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4618      	mov	r0, r3
 8001396:	f003 fae1 	bl	800495c <USB_ReadInterrupts>
 800139a:	4603      	mov	r3, r0
 800139c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013a0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80013a4:	f040 80a7 	bne.w	80014f6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80013a8:	2300      	movs	r3, #0
 80013aa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f003 fae6 	bl	8004982 <USB_ReadDevAllOutEpInterrupt>
 80013b6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80013b8:	e099      	b.n	80014ee <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80013ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013bc:	f003 0301 	and.w	r3, r3, #1
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	f000 808e 	beq.w	80014e2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013cc:	b2d2      	uxtb	r2, r2
 80013ce:	4611      	mov	r1, r2
 80013d0:	4618      	mov	r0, r3
 80013d2:	f003 fb0a 	bl	80049ea <USB_ReadDevOutEPInterrupt>
 80013d6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d00c      	beq.n	80013fc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80013e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e4:	015a      	lsls	r2, r3, #5
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	4413      	add	r3, r2
 80013ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013ee:	461a      	mov	r2, r3
 80013f0:	2301      	movs	r3, #1
 80013f2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80013f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f000 fec2 	bl	8002180 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	f003 0308 	and.w	r3, r3, #8
 8001402:	2b00      	cmp	r3, #0
 8001404:	d00c      	beq.n	8001420 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001408:	015a      	lsls	r2, r3, #5
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	4413      	add	r3, r2
 800140e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001412:	461a      	mov	r2, r3
 8001414:	2308      	movs	r3, #8
 8001416:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001418:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f000 ff98 	bl	8002350 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	f003 0310 	and.w	r3, r3, #16
 8001426:	2b00      	cmp	r3, #0
 8001428:	d008      	beq.n	800143c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800142a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142c:	015a      	lsls	r2, r3, #5
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	4413      	add	r3, r2
 8001432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001436:	461a      	mov	r2, r3
 8001438:	2310      	movs	r3, #16
 800143a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	f003 0302 	and.w	r3, r3, #2
 8001442:	2b00      	cmp	r3, #0
 8001444:	d030      	beq.n	80014a8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001446:	6a3b      	ldr	r3, [r7, #32]
 8001448:	695b      	ldr	r3, [r3, #20]
 800144a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800144e:	2b80      	cmp	r3, #128	; 0x80
 8001450:	d109      	bne.n	8001466 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	69fa      	ldr	r2, [r7, #28]
 800145c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001460:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001464:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001468:	4613      	mov	r3, r2
 800146a:	00db      	lsls	r3, r3, #3
 800146c:	4413      	add	r3, r2
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	4413      	add	r3, r2
 8001478:	3304      	adds	r3, #4
 800147a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	78db      	ldrb	r3, [r3, #3]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d108      	bne.n	8001496 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	2200      	movs	r2, #0
 8001488:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800148a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148c:	b2db      	uxtb	r3, r3
 800148e:	4619      	mov	r1, r3
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f008 fc4f 	bl	8009d34 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001498:	015a      	lsls	r2, r3, #5
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	4413      	add	r3, r2
 800149e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014a2:	461a      	mov	r2, r3
 80014a4:	2302      	movs	r3, #2
 80014a6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	f003 0320 	and.w	r3, r3, #32
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d008      	beq.n	80014c4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80014b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b4:	015a      	lsls	r2, r3, #5
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	4413      	add	r3, r2
 80014ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014be:	461a      	mov	r2, r3
 80014c0:	2320      	movs	r3, #32
 80014c2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d009      	beq.n	80014e2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80014ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d0:	015a      	lsls	r2, r3, #5
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	4413      	add	r3, r2
 80014d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014da:	461a      	mov	r2, r3
 80014dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014e0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80014e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e4:	3301      	adds	r3, #1
 80014e6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80014e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ea:	085b      	lsrs	r3, r3, #1
 80014ec:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80014ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	f47f af62 	bne.w	80013ba <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f003 fa2e 	bl	800495c <USB_ReadInterrupts>
 8001500:	4603      	mov	r3, r0
 8001502:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001506:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800150a:	f040 80db 	bne.w	80016c4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4618      	mov	r0, r3
 8001514:	f003 fa4f 	bl	80049b6 <USB_ReadDevAllInEpInterrupt>
 8001518:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800151a:	2300      	movs	r3, #0
 800151c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800151e:	e0cd      	b.n	80016bc <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	2b00      	cmp	r3, #0
 8001528:	f000 80c2 	beq.w	80016b0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001532:	b2d2      	uxtb	r2, r2
 8001534:	4611      	mov	r1, r2
 8001536:	4618      	mov	r0, r3
 8001538:	f003 fa75 	bl	8004a26 <USB_ReadDevInEPInterrupt>
 800153c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	f003 0301 	and.w	r3, r3, #1
 8001544:	2b00      	cmp	r3, #0
 8001546:	d057      	beq.n	80015f8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154a:	f003 030f 	and.w	r3, r3, #15
 800154e:	2201      	movs	r2, #1
 8001550:	fa02 f303 	lsl.w	r3, r2, r3
 8001554:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800155c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	43db      	mvns	r3, r3
 8001562:	69f9      	ldr	r1, [r7, #28]
 8001564:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001568:	4013      	ands	r3, r2
 800156a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800156c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156e:	015a      	lsls	r2, r3, #5
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	4413      	add	r3, r2
 8001574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001578:	461a      	mov	r2, r3
 800157a:	2301      	movs	r3, #1
 800157c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	691b      	ldr	r3, [r3, #16]
 8001582:	2b01      	cmp	r3, #1
 8001584:	d132      	bne.n	80015ec <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001586:	6879      	ldr	r1, [r7, #4]
 8001588:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800158a:	4613      	mov	r3, r2
 800158c:	00db      	lsls	r3, r3, #3
 800158e:	4413      	add	r3, r2
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	440b      	add	r3, r1
 8001594:	334c      	adds	r3, #76	; 0x4c
 8001596:	6819      	ldr	r1, [r3, #0]
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800159c:	4613      	mov	r3, r2
 800159e:	00db      	lsls	r3, r3, #3
 80015a0:	4413      	add	r3, r2
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	4403      	add	r3, r0
 80015a6:	3348      	adds	r3, #72	; 0x48
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4419      	add	r1, r3
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015b0:	4613      	mov	r3, r2
 80015b2:	00db      	lsls	r3, r3, #3
 80015b4:	4413      	add	r3, r2
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	4403      	add	r3, r0
 80015ba:	334c      	adds	r3, #76	; 0x4c
 80015bc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80015be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d113      	bne.n	80015ec <HAL_PCD_IRQHandler+0x3a2>
 80015c4:	6879      	ldr	r1, [r7, #4]
 80015c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015c8:	4613      	mov	r3, r2
 80015ca:	00db      	lsls	r3, r3, #3
 80015cc:	4413      	add	r3, r2
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	440b      	add	r3, r1
 80015d2:	3354      	adds	r3, #84	; 0x54
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d108      	bne.n	80015ec <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6818      	ldr	r0, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80015e4:	461a      	mov	r2, r3
 80015e6:	2101      	movs	r1, #1
 80015e8:	f003 fa7c 	bl	8004ae4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80015ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	4619      	mov	r1, r3
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f008 fb19 	bl	8009c2a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	f003 0308 	and.w	r3, r3, #8
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d008      	beq.n	8001614 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001604:	015a      	lsls	r2, r3, #5
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	4413      	add	r3, r2
 800160a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800160e:	461a      	mov	r2, r3
 8001610:	2308      	movs	r3, #8
 8001612:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	f003 0310 	and.w	r3, r3, #16
 800161a:	2b00      	cmp	r3, #0
 800161c:	d008      	beq.n	8001630 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800161e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001620:	015a      	lsls	r2, r3, #5
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	4413      	add	r3, r2
 8001626:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800162a:	461a      	mov	r2, r3
 800162c:	2310      	movs	r3, #16
 800162e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001636:	2b00      	cmp	r3, #0
 8001638:	d008      	beq.n	800164c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800163a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163c:	015a      	lsls	r2, r3, #5
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	4413      	add	r3, r2
 8001642:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001646:	461a      	mov	r2, r3
 8001648:	2340      	movs	r3, #64	; 0x40
 800164a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	2b00      	cmp	r3, #0
 8001654:	d023      	beq.n	800169e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001656:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001658:	6a38      	ldr	r0, [r7, #32]
 800165a:	f002 f95d 	bl	8003918 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800165e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001660:	4613      	mov	r3, r2
 8001662:	00db      	lsls	r3, r3, #3
 8001664:	4413      	add	r3, r2
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	3338      	adds	r3, #56	; 0x38
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	4413      	add	r3, r2
 800166e:	3304      	adds	r3, #4
 8001670:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	78db      	ldrb	r3, [r3, #3]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d108      	bne.n	800168c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	2200      	movs	r2, #0
 800167e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001682:	b2db      	uxtb	r3, r3
 8001684:	4619      	mov	r1, r3
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f008 fb66 	bl	8009d58 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800168c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168e:	015a      	lsls	r2, r3, #5
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	4413      	add	r3, r2
 8001694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001698:	461a      	mov	r2, r3
 800169a:	2302      	movs	r3, #2
 800169c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d003      	beq.n	80016b0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80016a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f000 fcdb 	bl	8002066 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80016b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b2:	3301      	adds	r3, #1
 80016b4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80016b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016b8:	085b      	lsrs	r3, r3, #1
 80016ba:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80016bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016be:	2b00      	cmp	r3, #0
 80016c0:	f47f af2e 	bne.w	8001520 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f003 f947 	bl	800495c <USB_ReadInterrupts>
 80016ce:	4603      	mov	r3, r0
 80016d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80016d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80016d8:	d122      	bne.n	8001720 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	69fa      	ldr	r2, [r7, #28]
 80016e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016e8:	f023 0301 	bic.w	r3, r3, #1
 80016ec:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d108      	bne.n	800170a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2200      	movs	r2, #0
 80016fc:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001700:	2100      	movs	r1, #0
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f000 fec2 	bl	800248c <HAL_PCDEx_LPM_Callback>
 8001708:	e002      	b.n	8001710 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f008 fb04 	bl	8009d18 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	695a      	ldr	r2, [r3, #20]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800171e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4618      	mov	r0, r3
 8001726:	f003 f919 	bl	800495c <USB_ReadInterrupts>
 800172a:	4603      	mov	r3, r0
 800172c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001730:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001734:	d112      	bne.n	800175c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	2b01      	cmp	r3, #1
 8001744:	d102      	bne.n	800174c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f008 fac0 	bl	8009ccc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	695a      	ldr	r2, [r3, #20]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800175a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4618      	mov	r0, r3
 8001762:	f003 f8fb 	bl	800495c <USB_ReadInterrupts>
 8001766:	4603      	mov	r3, r0
 8001768:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800176c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001770:	f040 80b7 	bne.w	80018e2 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	69fa      	ldr	r2, [r7, #28]
 800177e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001782:	f023 0301 	bic.w	r3, r3, #1
 8001786:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2110      	movs	r1, #16
 800178e:	4618      	mov	r0, r3
 8001790:	f002 f8c2 	bl	8003918 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001794:	2300      	movs	r3, #0
 8001796:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001798:	e046      	b.n	8001828 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800179a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800179c:	015a      	lsls	r2, r3, #5
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	4413      	add	r3, r2
 80017a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017a6:	461a      	mov	r2, r3
 80017a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80017ac:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80017ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b0:	015a      	lsls	r2, r3, #5
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	4413      	add	r3, r2
 80017b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017be:	0151      	lsls	r1, r2, #5
 80017c0:	69fa      	ldr	r2, [r7, #28]
 80017c2:	440a      	add	r2, r1
 80017c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80017c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80017cc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80017ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017d0:	015a      	lsls	r2, r3, #5
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	4413      	add	r3, r2
 80017d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017da:	461a      	mov	r2, r3
 80017dc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80017e0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80017e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017e4:	015a      	lsls	r2, r3, #5
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	4413      	add	r3, r2
 80017ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017f2:	0151      	lsls	r1, r2, #5
 80017f4:	69fa      	ldr	r2, [r7, #28]
 80017f6:	440a      	add	r2, r1
 80017f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80017fc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001800:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001804:	015a      	lsls	r2, r3, #5
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	4413      	add	r3, r2
 800180a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001812:	0151      	lsls	r1, r2, #5
 8001814:	69fa      	ldr	r2, [r7, #28]
 8001816:	440a      	add	r2, r1
 8001818:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800181c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001820:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001824:	3301      	adds	r3, #1
 8001826:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800182e:	429a      	cmp	r2, r3
 8001830:	d3b3      	bcc.n	800179a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001838:	69db      	ldr	r3, [r3, #28]
 800183a:	69fa      	ldr	r2, [r7, #28]
 800183c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001840:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001844:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	2b00      	cmp	r3, #0
 800184c:	d016      	beq.n	800187c <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001854:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001858:	69fa      	ldr	r2, [r7, #28]
 800185a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800185e:	f043 030b 	orr.w	r3, r3, #11
 8001862:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800186c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186e:	69fa      	ldr	r2, [r7, #28]
 8001870:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001874:	f043 030b 	orr.w	r3, r3, #11
 8001878:	6453      	str	r3, [r2, #68]	; 0x44
 800187a:	e015      	b.n	80018a8 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001882:	695b      	ldr	r3, [r3, #20]
 8001884:	69fa      	ldr	r2, [r7, #28]
 8001886:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800188a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800188e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001892:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800189a:	691b      	ldr	r3, [r3, #16]
 800189c:	69fa      	ldr	r2, [r7, #28]
 800189e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018a2:	f043 030b 	orr.w	r3, r3, #11
 80018a6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	69fa      	ldr	r2, [r7, #28]
 80018b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018b6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80018ba:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6818      	ldr	r0, [r3, #0]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	691b      	ldr	r3, [r3, #16]
 80018c4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80018cc:	461a      	mov	r2, r3
 80018ce:	f003 f909 	bl	8004ae4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	695a      	ldr	r2, [r3, #20]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80018e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f003 f838 	bl	800495c <USB_ReadInterrupts>
 80018ec:	4603      	mov	r3, r0
 80018ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018f6:	d124      	bne.n	8001942 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f003 f8ce 	bl	8004a9e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4618      	mov	r0, r3
 8001908:	f002 f883 	bl	8003a12 <USB_GetDevSpeed>
 800190c:	4603      	mov	r3, r0
 800190e:	461a      	mov	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681c      	ldr	r4, [r3, #0]
 8001918:	f001 fa28 	bl	8002d6c <HAL_RCC_GetHCLKFreq>
 800191c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001922:	b2db      	uxtb	r3, r3
 8001924:	461a      	mov	r2, r3
 8001926:	4620      	mov	r0, r4
 8001928:	f001 fd82 	bl	8003430 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f008 f9a4 	bl	8009c7a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	695a      	ldr	r2, [r3, #20]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001940:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4618      	mov	r0, r3
 8001948:	f003 f808 	bl	800495c <USB_ReadInterrupts>
 800194c:	4603      	mov	r3, r0
 800194e:	f003 0308 	and.w	r3, r3, #8
 8001952:	2b08      	cmp	r3, #8
 8001954:	d10a      	bne.n	800196c <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f008 f981 	bl	8009c5e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	695a      	ldr	r2, [r3, #20]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f002 0208 	and.w	r2, r2, #8
 800196a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4618      	mov	r0, r3
 8001972:	f002 fff3 	bl	800495c <USB_ReadInterrupts>
 8001976:	4603      	mov	r3, r0
 8001978:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800197c:	2b80      	cmp	r3, #128	; 0x80
 800197e:	d122      	bne.n	80019c6 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001980:	6a3b      	ldr	r3, [r7, #32]
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001988:	6a3b      	ldr	r3, [r7, #32]
 800198a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800198c:	2301      	movs	r3, #1
 800198e:	627b      	str	r3, [r7, #36]	; 0x24
 8001990:	e014      	b.n	80019bc <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001992:	6879      	ldr	r1, [r7, #4]
 8001994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001996:	4613      	mov	r3, r2
 8001998:	00db      	lsls	r3, r3, #3
 800199a:	4413      	add	r3, r2
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	440b      	add	r3, r1
 80019a0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d105      	bne.n	80019b6 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80019aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	4619      	mov	r1, r3
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f000 fb27 	bl	8002004 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b8:	3301      	adds	r3, #1
 80019ba:	627b      	str	r3, [r7, #36]	; 0x24
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d3e5      	bcc.n	8001992 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f002 ffc6 	bl	800495c <USB_ReadInterrupts>
 80019d0:	4603      	mov	r3, r0
 80019d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80019da:	d13b      	bne.n	8001a54 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019dc:	2301      	movs	r3, #1
 80019de:	627b      	str	r3, [r7, #36]	; 0x24
 80019e0:	e02b      	b.n	8001a3a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80019e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e4:	015a      	lsls	r2, r3, #5
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	4413      	add	r3, r2
 80019ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80019f2:	6879      	ldr	r1, [r7, #4]
 80019f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019f6:	4613      	mov	r3, r2
 80019f8:	00db      	lsls	r3, r3, #3
 80019fa:	4413      	add	r3, r2
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	440b      	add	r3, r1
 8001a00:	3340      	adds	r3, #64	; 0x40
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d115      	bne.n	8001a34 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001a08:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	da12      	bge.n	8001a34 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001a0e:	6879      	ldr	r1, [r7, #4]
 8001a10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a12:	4613      	mov	r3, r2
 8001a14:	00db      	lsls	r3, r3, #3
 8001a16:	4413      	add	r3, r2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	440b      	add	r3, r1
 8001a1c:	333f      	adds	r3, #63	; 0x3f
 8001a1e:	2201      	movs	r2, #1
 8001a20:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f000 fae8 	bl	8002004 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a36:	3301      	adds	r3, #1
 8001a38:	627b      	str	r3, [r7, #36]	; 0x24
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d3ce      	bcc.n	80019e2 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	695a      	ldr	r2, [r3, #20]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001a52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f002 ff7f 	bl	800495c <USB_ReadInterrupts>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a68:	d155      	bne.n	8001b16 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a6e:	e045      	b.n	8001afc <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a72:	015a      	lsls	r2, r3, #5
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	4413      	add	r3, r2
 8001a78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a80:	6879      	ldr	r1, [r7, #4]
 8001a82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a84:	4613      	mov	r3, r2
 8001a86:	00db      	lsls	r3, r3, #3
 8001a88:	4413      	add	r3, r2
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	440b      	add	r3, r1
 8001a8e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d12e      	bne.n	8001af6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001a98:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	da2b      	bge.n	8001af6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001aaa:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d121      	bne.n	8001af6 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001ab2:	6879      	ldr	r1, [r7, #4]
 8001ab4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	00db      	lsls	r3, r3, #3
 8001aba:	4413      	add	r3, r2
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	440b      	add	r3, r1
 8001ac0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001ac8:	6a3b      	ldr	r3, [r7, #32]
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001ad0:	6a3b      	ldr	r3, [r7, #32]
 8001ad2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001ad4:	6a3b      	ldr	r3, [r7, #32]
 8001ad6:	695b      	ldr	r3, [r3, #20]
 8001ad8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d10a      	bne.n	8001af6 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	69fa      	ldr	r2, [r7, #28]
 8001aea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001aee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001af2:	6053      	str	r3, [r2, #4]
            break;
 8001af4:	e007      	b.n	8001b06 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af8:	3301      	adds	r3, #1
 8001afa:	627b      	str	r3, [r7, #36]	; 0x24
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d3b4      	bcc.n	8001a70 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	695a      	ldr	r2, [r3, #20]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001b14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f002 ff1e 	bl	800495c <USB_ReadInterrupts>
 8001b20:	4603      	mov	r3, r0
 8001b22:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001b26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b2a:	d10a      	bne.n	8001b42 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f008 f925 	bl	8009d7c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	695a      	ldr	r2, [r3, #20]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001b40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f002 ff08 	bl	800495c <USB_ReadInterrupts>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	f003 0304 	and.w	r3, r3, #4
 8001b52:	2b04      	cmp	r3, #4
 8001b54:	d115      	bne.n	8001b82 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	f003 0304 	and.w	r3, r3, #4
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d002      	beq.n	8001b6e <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f008 f915 	bl	8009d98 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	6859      	ldr	r1, [r3, #4]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	605a      	str	r2, [r3, #4]
 8001b7e:	e000      	b.n	8001b82 <HAL_PCD_IRQHandler+0x938>
      return;
 8001b80:	bf00      	nop
    }
  }
}
 8001b82:	3734      	adds	r7, #52	; 0x34
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd90      	pop	{r4, r7, pc}

08001b88 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	460b      	mov	r3, r1
 8001b92:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d101      	bne.n	8001ba2 <HAL_PCD_SetAddress+0x1a>
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	e013      	b.n	8001bca <HAL_PCD_SetAddress+0x42>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	78fa      	ldrb	r2, [r7, #3]
 8001bae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	78fa      	ldrb	r2, [r7, #3]
 8001bb8:	4611      	mov	r1, r2
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f002 fe66 	bl	800488c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b084      	sub	sp, #16
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
 8001bda:	4608      	mov	r0, r1
 8001bdc:	4611      	mov	r1, r2
 8001bde:	461a      	mov	r2, r3
 8001be0:	4603      	mov	r3, r0
 8001be2:	70fb      	strb	r3, [r7, #3]
 8001be4:	460b      	mov	r3, r1
 8001be6:	803b      	strh	r3, [r7, #0]
 8001be8:	4613      	mov	r3, r2
 8001bea:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001bec:	2300      	movs	r3, #0
 8001bee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001bf0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	da0f      	bge.n	8001c18 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bf8:	78fb      	ldrb	r3, [r7, #3]
 8001bfa:	f003 020f 	and.w	r2, r3, #15
 8001bfe:	4613      	mov	r3, r2
 8001c00:	00db      	lsls	r3, r3, #3
 8001c02:	4413      	add	r3, r2
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	3338      	adds	r3, #56	; 0x38
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	3304      	adds	r3, #4
 8001c0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2201      	movs	r2, #1
 8001c14:	705a      	strb	r2, [r3, #1]
 8001c16:	e00f      	b.n	8001c38 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c18:	78fb      	ldrb	r3, [r7, #3]
 8001c1a:	f003 020f 	and.w	r2, r3, #15
 8001c1e:	4613      	mov	r3, r2
 8001c20:	00db      	lsls	r3, r3, #3
 8001c22:	4413      	add	r3, r2
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	3304      	adds	r3, #4
 8001c30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2200      	movs	r2, #0
 8001c36:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001c38:	78fb      	ldrb	r3, [r7, #3]
 8001c3a:	f003 030f 	and.w	r3, r3, #15
 8001c3e:	b2da      	uxtb	r2, r3
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001c44:	883a      	ldrh	r2, [r7, #0]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	78ba      	ldrb	r2, [r7, #2]
 8001c4e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	785b      	ldrb	r3, [r3, #1]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d004      	beq.n	8001c62 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	b29a      	uxth	r2, r3
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001c62:	78bb      	ldrb	r3, [r7, #2]
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d102      	bne.n	8001c6e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d101      	bne.n	8001c7c <HAL_PCD_EP_Open+0xaa>
 8001c78:	2302      	movs	r3, #2
 8001c7a:	e00e      	b.n	8001c9a <HAL_PCD_EP_Open+0xc8>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	68f9      	ldr	r1, [r7, #12]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f001 fee6 	bl	8003a5c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001c98:	7afb      	ldrb	r3, [r7, #11]
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3710      	adds	r7, #16
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b084      	sub	sp, #16
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
 8001caa:	460b      	mov	r3, r1
 8001cac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001cae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	da0f      	bge.n	8001cd6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cb6:	78fb      	ldrb	r3, [r7, #3]
 8001cb8:	f003 020f 	and.w	r2, r3, #15
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	00db      	lsls	r3, r3, #3
 8001cc0:	4413      	add	r3, r2
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	3338      	adds	r3, #56	; 0x38
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	4413      	add	r3, r2
 8001cca:	3304      	adds	r3, #4
 8001ccc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	705a      	strb	r2, [r3, #1]
 8001cd4:	e00f      	b.n	8001cf6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cd6:	78fb      	ldrb	r3, [r7, #3]
 8001cd8:	f003 020f 	and.w	r2, r3, #15
 8001cdc:	4613      	mov	r3, r2
 8001cde:	00db      	lsls	r3, r3, #3
 8001ce0:	4413      	add	r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	4413      	add	r3, r2
 8001cec:	3304      	adds	r3, #4
 8001cee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001cf6:	78fb      	ldrb	r3, [r7, #3]
 8001cf8:	f003 030f 	and.w	r3, r3, #15
 8001cfc:	b2da      	uxtb	r2, r3
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d101      	bne.n	8001d10 <HAL_PCD_EP_Close+0x6e>
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	e00e      	b.n	8001d2e <HAL_PCD_EP_Close+0x8c>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	68f9      	ldr	r1, [r7, #12]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f001 ff24 	bl	8003b6c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b086      	sub	sp, #24
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	60f8      	str	r0, [r7, #12]
 8001d3e:	607a      	str	r2, [r7, #4]
 8001d40:	603b      	str	r3, [r7, #0]
 8001d42:	460b      	mov	r3, r1
 8001d44:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d46:	7afb      	ldrb	r3, [r7, #11]
 8001d48:	f003 020f 	and.w	r2, r3, #15
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	4413      	add	r3, r2
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d58:	68fa      	ldr	r2, [r7, #12]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	3304      	adds	r3, #4
 8001d5e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	683a      	ldr	r2, [r7, #0]
 8001d6a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	2200      	movs	r2, #0
 8001d76:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d78:	7afb      	ldrb	r3, [r7, #11]
 8001d7a:	f003 030f 	and.w	r3, r3, #15
 8001d7e:	b2da      	uxtb	r2, r3
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	691b      	ldr	r3, [r3, #16]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d102      	bne.n	8001d92 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d92:	7afb      	ldrb	r3, [r7, #11]
 8001d94:	f003 030f 	and.w	r3, r3, #15
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d109      	bne.n	8001db0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	6818      	ldr	r0, [r3, #0]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	691b      	ldr	r3, [r3, #16]
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	461a      	mov	r2, r3
 8001da8:	6979      	ldr	r1, [r7, #20]
 8001daa:	f002 fa03 	bl	80041b4 <USB_EP0StartXfer>
 8001dae:	e008      	b.n	8001dc2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	6818      	ldr	r0, [r3, #0]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	691b      	ldr	r3, [r3, #16]
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	461a      	mov	r2, r3
 8001dbc:	6979      	ldr	r1, [r7, #20]
 8001dbe:	f001 ffb1 	bl	8003d24 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001dc2:	2300      	movs	r3, #0
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3718      	adds	r7, #24
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001dd8:	78fb      	ldrb	r3, [r7, #3]
 8001dda:	f003 020f 	and.w	r2, r3, #15
 8001dde:	6879      	ldr	r1, [r7, #4]
 8001de0:	4613      	mov	r3, r2
 8001de2:	00db      	lsls	r3, r3, #3
 8001de4:	4413      	add	r3, r2
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	440b      	add	r3, r1
 8001dea:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8001dee:	681b      	ldr	r3, [r3, #0]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	607a      	str	r2, [r7, #4]
 8001e06:	603b      	str	r3, [r7, #0]
 8001e08:	460b      	mov	r3, r1
 8001e0a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e0c:	7afb      	ldrb	r3, [r7, #11]
 8001e0e:	f003 020f 	and.w	r2, r3, #15
 8001e12:	4613      	mov	r3, r2
 8001e14:	00db      	lsls	r3, r3, #3
 8001e16:	4413      	add	r3, r2
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	3338      	adds	r3, #56	; 0x38
 8001e1c:	68fa      	ldr	r2, [r7, #12]
 8001e1e:	4413      	add	r3, r2
 8001e20:	3304      	adds	r3, #4
 8001e22:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	683a      	ldr	r2, [r7, #0]
 8001e2e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	2200      	movs	r2, #0
 8001e34:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	2201      	movs	r2, #1
 8001e3a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e3c:	7afb      	ldrb	r3, [r7, #11]
 8001e3e:	f003 030f 	and.w	r3, r3, #15
 8001e42:	b2da      	uxtb	r2, r3
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	691b      	ldr	r3, [r3, #16]
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d102      	bne.n	8001e56 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e56:	7afb      	ldrb	r3, [r7, #11]
 8001e58:	f003 030f 	and.w	r3, r3, #15
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d109      	bne.n	8001e74 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6818      	ldr	r0, [r3, #0]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	691b      	ldr	r3, [r3, #16]
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	6979      	ldr	r1, [r7, #20]
 8001e6e:	f002 f9a1 	bl	80041b4 <USB_EP0StartXfer>
 8001e72:	e008      	b.n	8001e86 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	6818      	ldr	r0, [r3, #0]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	691b      	ldr	r3, [r3, #16]
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	461a      	mov	r2, r3
 8001e80:	6979      	ldr	r1, [r7, #20]
 8001e82:	f001 ff4f 	bl	8003d24 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001e86:	2300      	movs	r3, #0
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3718      	adds	r7, #24
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	460b      	mov	r3, r1
 8001e9a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001e9c:	78fb      	ldrb	r3, [r7, #3]
 8001e9e:	f003 020f 	and.w	r2, r3, #15
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d901      	bls.n	8001eae <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e050      	b.n	8001f50 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001eae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	da0f      	bge.n	8001ed6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001eb6:	78fb      	ldrb	r3, [r7, #3]
 8001eb8:	f003 020f 	and.w	r2, r3, #15
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	00db      	lsls	r3, r3, #3
 8001ec0:	4413      	add	r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	3338      	adds	r3, #56	; 0x38
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	4413      	add	r3, r2
 8001eca:	3304      	adds	r3, #4
 8001ecc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	705a      	strb	r2, [r3, #1]
 8001ed4:	e00d      	b.n	8001ef2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001ed6:	78fa      	ldrb	r2, [r7, #3]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	00db      	lsls	r3, r3, #3
 8001edc:	4413      	add	r3, r2
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	3304      	adds	r3, #4
 8001eea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ef8:	78fb      	ldrb	r3, [r7, #3]
 8001efa:	f003 030f 	and.w	r3, r3, #15
 8001efe:	b2da      	uxtb	r2, r3
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d101      	bne.n	8001f12 <HAL_PCD_EP_SetStall+0x82>
 8001f0e:	2302      	movs	r3, #2
 8001f10:	e01e      	b.n	8001f50 <HAL_PCD_EP_SetStall+0xc0>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2201      	movs	r2, #1
 8001f16:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68f9      	ldr	r1, [r7, #12]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f002 fbdf 	bl	80046e4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f26:	78fb      	ldrb	r3, [r7, #3]
 8001f28:	f003 030f 	and.w	r3, r3, #15
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d10a      	bne.n	8001f46 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6818      	ldr	r0, [r3, #0]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	691b      	ldr	r3, [r3, #16]
 8001f38:	b2d9      	uxtb	r1, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001f40:	461a      	mov	r2, r3
 8001f42:	f002 fdcf 	bl	8004ae4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3710      	adds	r7, #16
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	460b      	mov	r3, r1
 8001f62:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001f64:	78fb      	ldrb	r3, [r7, #3]
 8001f66:	f003 020f 	and.w	r2, r3, #15
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d901      	bls.n	8001f76 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e042      	b.n	8001ffc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	da0f      	bge.n	8001f9e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f7e:	78fb      	ldrb	r3, [r7, #3]
 8001f80:	f003 020f 	and.w	r2, r3, #15
 8001f84:	4613      	mov	r3, r2
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	4413      	add	r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	3338      	adds	r3, #56	; 0x38
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	4413      	add	r3, r2
 8001f92:	3304      	adds	r3, #4
 8001f94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	705a      	strb	r2, [r3, #1]
 8001f9c:	e00f      	b.n	8001fbe <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f9e:	78fb      	ldrb	r3, [r7, #3]
 8001fa0:	f003 020f 	and.w	r2, r3, #15
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	4413      	add	r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	3304      	adds	r3, #4
 8001fb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fc4:	78fb      	ldrb	r3, [r7, #3]
 8001fc6:	f003 030f 	and.w	r3, r3, #15
 8001fca:	b2da      	uxtb	r2, r3
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d101      	bne.n	8001fde <HAL_PCD_EP_ClrStall+0x86>
 8001fda:	2302      	movs	r3, #2
 8001fdc:	e00e      	b.n	8001ffc <HAL_PCD_EP_ClrStall+0xa4>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	68f9      	ldr	r1, [r7, #12]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f002 fbe7 	bl	80047c0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3710      	adds	r7, #16
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	460b      	mov	r3, r1
 800200e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002010:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002014:	2b00      	cmp	r3, #0
 8002016:	da0c      	bge.n	8002032 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002018:	78fb      	ldrb	r3, [r7, #3]
 800201a:	f003 020f 	and.w	r2, r3, #15
 800201e:	4613      	mov	r3, r2
 8002020:	00db      	lsls	r3, r3, #3
 8002022:	4413      	add	r3, r2
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	3338      	adds	r3, #56	; 0x38
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	4413      	add	r3, r2
 800202c:	3304      	adds	r3, #4
 800202e:	60fb      	str	r3, [r7, #12]
 8002030:	e00c      	b.n	800204c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002032:	78fb      	ldrb	r3, [r7, #3]
 8002034:	f003 020f 	and.w	r2, r3, #15
 8002038:	4613      	mov	r3, r2
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	4413      	add	r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	4413      	add	r3, r2
 8002048:	3304      	adds	r3, #4
 800204a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	68f9      	ldr	r1, [r7, #12]
 8002052:	4618      	mov	r0, r3
 8002054:	f002 fa06 	bl	8004464 <USB_EPStopXfer>
 8002058:	4603      	mov	r3, r0
 800205a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800205c:	7afb      	ldrb	r3, [r7, #11]
}
 800205e:	4618      	mov	r0, r3
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b08a      	sub	sp, #40	; 0x28
 800206a:	af02      	add	r7, sp, #8
 800206c:	6078      	str	r0, [r7, #4]
 800206e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800207a:	683a      	ldr	r2, [r7, #0]
 800207c:	4613      	mov	r3, r2
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	4413      	add	r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	3338      	adds	r3, #56	; 0x38
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	4413      	add	r3, r2
 800208a:	3304      	adds	r3, #4
 800208c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6a1a      	ldr	r2, [r3, #32]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	699b      	ldr	r3, [r3, #24]
 8002096:	429a      	cmp	r2, r3
 8002098:	d901      	bls.n	800209e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e06c      	b.n	8002178 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	699a      	ldr	r2, [r3, #24]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6a1b      	ldr	r3, [r3, #32]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	69fa      	ldr	r2, [r7, #28]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d902      	bls.n	80020ba <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	3303      	adds	r3, #3
 80020be:	089b      	lsrs	r3, r3, #2
 80020c0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020c2:	e02b      	b.n	800211c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	699a      	ldr	r2, [r3, #24]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	6a1b      	ldr	r3, [r3, #32]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	69fa      	ldr	r2, [r7, #28]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d902      	bls.n	80020e0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	3303      	adds	r3, #3
 80020e4:	089b      	lsrs	r3, r3, #2
 80020e6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	6919      	ldr	r1, [r3, #16]
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	b2da      	uxtb	r2, r3
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	9300      	str	r3, [sp, #0]
 80020fc:	4603      	mov	r3, r0
 80020fe:	6978      	ldr	r0, [r7, #20]
 8002100:	f002 fa5a 	bl	80045b8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	691a      	ldr	r2, [r3, #16]
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	441a      	add	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6a1a      	ldr	r2, [r3, #32]
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	441a      	add	r2, r3
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	015a      	lsls	r2, r3, #5
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	4413      	add	r3, r2
 8002124:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002128:	699b      	ldr	r3, [r3, #24]
 800212a:	b29b      	uxth	r3, r3
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	429a      	cmp	r2, r3
 8002130:	d809      	bhi.n	8002146 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6a1a      	ldr	r2, [r3, #32]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800213a:	429a      	cmp	r2, r3
 800213c:	d203      	bcs.n	8002146 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	699b      	ldr	r3, [r3, #24]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d1be      	bne.n	80020c4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	699a      	ldr	r2, [r3, #24]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	6a1b      	ldr	r3, [r3, #32]
 800214e:	429a      	cmp	r2, r3
 8002150:	d811      	bhi.n	8002176 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	f003 030f 	and.w	r3, r3, #15
 8002158:	2201      	movs	r2, #1
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002166:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	43db      	mvns	r3, r3
 800216c:	6939      	ldr	r1, [r7, #16]
 800216e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002172:	4013      	ands	r3, r2
 8002174:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002176:	2300      	movs	r3, #0
}
 8002178:	4618      	mov	r0, r3
 800217a:	3720      	adds	r7, #32
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b088      	sub	sp, #32
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	333c      	adds	r3, #60	; 0x3c
 8002198:	3304      	adds	r3, #4
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	015a      	lsls	r2, r3, #5
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	4413      	add	r3, r2
 80021a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d17b      	bne.n	80022ae <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	f003 0308 	and.w	r3, r3, #8
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d015      	beq.n	80021ec <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	4a61      	ldr	r2, [pc, #388]	; (8002348 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	f240 80b9 	bls.w	800233c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	f000 80b3 	beq.w	800233c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	015a      	lsls	r2, r3, #5
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	4413      	add	r3, r2
 80021de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021e2:	461a      	mov	r2, r3
 80021e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021e8:	6093      	str	r3, [r2, #8]
 80021ea:	e0a7      	b.n	800233c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	f003 0320 	and.w	r3, r3, #32
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d009      	beq.n	800220a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	015a      	lsls	r2, r3, #5
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	4413      	add	r3, r2
 80021fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002202:	461a      	mov	r2, r3
 8002204:	2320      	movs	r3, #32
 8002206:	6093      	str	r3, [r2, #8]
 8002208:	e098      	b.n	800233c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002210:	2b00      	cmp	r3, #0
 8002212:	f040 8093 	bne.w	800233c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	4a4b      	ldr	r2, [pc, #300]	; (8002348 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d90f      	bls.n	800223e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002224:	2b00      	cmp	r3, #0
 8002226:	d00a      	beq.n	800223e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	015a      	lsls	r2, r3, #5
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	4413      	add	r3, r2
 8002230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002234:	461a      	mov	r2, r3
 8002236:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800223a:	6093      	str	r3, [r2, #8]
 800223c:	e07e      	b.n	800233c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800223e:	683a      	ldr	r2, [r7, #0]
 8002240:	4613      	mov	r3, r2
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	4413      	add	r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	4413      	add	r3, r2
 8002250:	3304      	adds	r3, #4
 8002252:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	69da      	ldr	r2, [r3, #28]
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	0159      	lsls	r1, r3, #5
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	440b      	add	r3, r1
 8002260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800226a:	1ad2      	subs	r2, r2, r3
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d114      	bne.n	80022a0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d109      	bne.n	8002292 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6818      	ldr	r0, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002288:	461a      	mov	r2, r3
 800228a:	2101      	movs	r1, #1
 800228c:	f002 fc2a 	bl	8004ae4 <USB_EP0_OutStart>
 8002290:	e006      	b.n	80022a0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	691a      	ldr	r2, [r3, #16]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6a1b      	ldr	r3, [r3, #32]
 800229a:	441a      	add	r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	4619      	mov	r1, r3
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f007 fca4 	bl	8009bf4 <HAL_PCD_DataOutStageCallback>
 80022ac:	e046      	b.n	800233c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	4a26      	ldr	r2, [pc, #152]	; (800234c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d124      	bne.n	8002300 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d00a      	beq.n	80022d6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	015a      	lsls	r2, r3, #5
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	4413      	add	r3, r2
 80022c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022cc:	461a      	mov	r2, r3
 80022ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022d2:	6093      	str	r3, [r2, #8]
 80022d4:	e032      	b.n	800233c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	f003 0320 	and.w	r3, r3, #32
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d008      	beq.n	80022f2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	015a      	lsls	r2, r3, #5
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	4413      	add	r3, r2
 80022e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022ec:	461a      	mov	r2, r3
 80022ee:	2320      	movs	r3, #32
 80022f0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	4619      	mov	r1, r3
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f007 fc7b 	bl	8009bf4 <HAL_PCD_DataOutStageCallback>
 80022fe:	e01d      	b.n	800233c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d114      	bne.n	8002330 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002306:	6879      	ldr	r1, [r7, #4]
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	4613      	mov	r3, r2
 800230c:	00db      	lsls	r3, r3, #3
 800230e:	4413      	add	r3, r2
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	440b      	add	r3, r1
 8002314:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d108      	bne.n	8002330 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6818      	ldr	r0, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002328:	461a      	mov	r2, r3
 800232a:	2100      	movs	r1, #0
 800232c:	f002 fbda 	bl	8004ae4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	b2db      	uxtb	r3, r3
 8002334:	4619      	mov	r1, r3
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f007 fc5c 	bl	8009bf4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3720      	adds	r7, #32
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	4f54300a 	.word	0x4f54300a
 800234c:	4f54310a 	.word	0x4f54310a

08002350 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	333c      	adds	r3, #60	; 0x3c
 8002368:	3304      	adds	r3, #4
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	015a      	lsls	r2, r3, #5
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	4413      	add	r3, r2
 8002376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	4a15      	ldr	r2, [pc, #84]	; (80023d8 <PCD_EP_OutSetupPacket_int+0x88>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d90e      	bls.n	80023a4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800238c:	2b00      	cmp	r3, #0
 800238e:	d009      	beq.n	80023a4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	015a      	lsls	r2, r3, #5
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	4413      	add	r3, r2
 8002398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800239c:	461a      	mov	r2, r3
 800239e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023a2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f007 fc13 	bl	8009bd0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	4a0a      	ldr	r2, [pc, #40]	; (80023d8 <PCD_EP_OutSetupPacket_int+0x88>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d90c      	bls.n	80023cc <PCD_EP_OutSetupPacket_int+0x7c>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d108      	bne.n	80023cc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6818      	ldr	r0, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80023c4:	461a      	mov	r2, r3
 80023c6:	2101      	movs	r1, #1
 80023c8:	f002 fb8c 	bl	8004ae4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3718      	adds	r7, #24
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	4f54300a 	.word	0x4f54300a

080023dc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80023dc:	b480      	push	{r7}
 80023de:	b085      	sub	sp, #20
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	460b      	mov	r3, r1
 80023e6:	70fb      	strb	r3, [r7, #3]
 80023e8:	4613      	mov	r3, r2
 80023ea:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80023f4:	78fb      	ldrb	r3, [r7, #3]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d107      	bne.n	800240a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80023fa:	883b      	ldrh	r3, [r7, #0]
 80023fc:	0419      	lsls	r1, r3, #16
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68ba      	ldr	r2, [r7, #8]
 8002404:	430a      	orrs	r2, r1
 8002406:	629a      	str	r2, [r3, #40]	; 0x28
 8002408:	e028      	b.n	800245c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002410:	0c1b      	lsrs	r3, r3, #16
 8002412:	68ba      	ldr	r2, [r7, #8]
 8002414:	4413      	add	r3, r2
 8002416:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002418:	2300      	movs	r3, #0
 800241a:	73fb      	strb	r3, [r7, #15]
 800241c:	e00d      	b.n	800243a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	7bfb      	ldrb	r3, [r7, #15]
 8002424:	3340      	adds	r3, #64	; 0x40
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	4413      	add	r3, r2
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	0c1b      	lsrs	r3, r3, #16
 800242e:	68ba      	ldr	r2, [r7, #8]
 8002430:	4413      	add	r3, r2
 8002432:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002434:	7bfb      	ldrb	r3, [r7, #15]
 8002436:	3301      	adds	r3, #1
 8002438:	73fb      	strb	r3, [r7, #15]
 800243a:	7bfa      	ldrb	r2, [r7, #15]
 800243c:	78fb      	ldrb	r3, [r7, #3]
 800243e:	3b01      	subs	r3, #1
 8002440:	429a      	cmp	r2, r3
 8002442:	d3ec      	bcc.n	800241e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002444:	883b      	ldrh	r3, [r7, #0]
 8002446:	0418      	lsls	r0, r3, #16
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6819      	ldr	r1, [r3, #0]
 800244c:	78fb      	ldrb	r3, [r7, #3]
 800244e:	3b01      	subs	r3, #1
 8002450:	68ba      	ldr	r2, [r7, #8]
 8002452:	4302      	orrs	r2, r0
 8002454:	3340      	adds	r3, #64	; 0x40
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	440b      	add	r3, r1
 800245a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3714      	adds	r7, #20
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr

0800246a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800246a:	b480      	push	{r7}
 800246c:	b083      	sub	sp, #12
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
 8002472:	460b      	mov	r3, r1
 8002474:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	887a      	ldrh	r2, [r7, #2]
 800247c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800247e:	2300      	movs	r3, #0
}
 8002480:	4618      	mov	r0, r3
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	460b      	mov	r3, r1
 8002496:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d101      	bne.n	80024b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e267      	b.n	8002986 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d075      	beq.n	80025ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024c2:	4b88      	ldr	r3, [pc, #544]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f003 030c 	and.w	r3, r3, #12
 80024ca:	2b04      	cmp	r3, #4
 80024cc:	d00c      	beq.n	80024e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024ce:	4b85      	ldr	r3, [pc, #532]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024d6:	2b08      	cmp	r3, #8
 80024d8:	d112      	bne.n	8002500 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024da:	4b82      	ldr	r3, [pc, #520]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024e6:	d10b      	bne.n	8002500 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e8:	4b7e      	ldr	r3, [pc, #504]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d05b      	beq.n	80025ac <HAL_RCC_OscConfig+0x108>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d157      	bne.n	80025ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e242      	b.n	8002986 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002508:	d106      	bne.n	8002518 <HAL_RCC_OscConfig+0x74>
 800250a:	4b76      	ldr	r3, [pc, #472]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a75      	ldr	r2, [pc, #468]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 8002510:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002514:	6013      	str	r3, [r2, #0]
 8002516:	e01d      	b.n	8002554 <HAL_RCC_OscConfig+0xb0>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002520:	d10c      	bne.n	800253c <HAL_RCC_OscConfig+0x98>
 8002522:	4b70      	ldr	r3, [pc, #448]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a6f      	ldr	r2, [pc, #444]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 8002528:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800252c:	6013      	str	r3, [r2, #0]
 800252e:	4b6d      	ldr	r3, [pc, #436]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a6c      	ldr	r2, [pc, #432]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 8002534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002538:	6013      	str	r3, [r2, #0]
 800253a:	e00b      	b.n	8002554 <HAL_RCC_OscConfig+0xb0>
 800253c:	4b69      	ldr	r3, [pc, #420]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a68      	ldr	r2, [pc, #416]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 8002542:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002546:	6013      	str	r3, [r2, #0]
 8002548:	4b66      	ldr	r3, [pc, #408]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a65      	ldr	r2, [pc, #404]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 800254e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002552:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d013      	beq.n	8002584 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255c:	f7fe fa44 	bl	80009e8 <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002562:	e008      	b.n	8002576 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002564:	f7fe fa40 	bl	80009e8 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b64      	cmp	r3, #100	; 0x64
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e207      	b.n	8002986 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002576:	4b5b      	ldr	r3, [pc, #364]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d0f0      	beq.n	8002564 <HAL_RCC_OscConfig+0xc0>
 8002582:	e014      	b.n	80025ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002584:	f7fe fa30 	bl	80009e8 <HAL_GetTick>
 8002588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800258a:	e008      	b.n	800259e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800258c:	f7fe fa2c 	bl	80009e8 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b64      	cmp	r3, #100	; 0x64
 8002598:	d901      	bls.n	800259e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e1f3      	b.n	8002986 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800259e:	4b51      	ldr	r3, [pc, #324]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d1f0      	bne.n	800258c <HAL_RCC_OscConfig+0xe8>
 80025aa:	e000      	b.n	80025ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d063      	beq.n	8002682 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025ba:	4b4a      	ldr	r3, [pc, #296]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 030c 	and.w	r3, r3, #12
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d00b      	beq.n	80025de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025c6:	4b47      	ldr	r3, [pc, #284]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025ce:	2b08      	cmp	r3, #8
 80025d0:	d11c      	bne.n	800260c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025d2:	4b44      	ldr	r3, [pc, #272]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d116      	bne.n	800260c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025de:	4b41      	ldr	r3, [pc, #260]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d005      	beq.n	80025f6 <HAL_RCC_OscConfig+0x152>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d001      	beq.n	80025f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e1c7      	b.n	8002986 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025f6:	4b3b      	ldr	r3, [pc, #236]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	4937      	ldr	r1, [pc, #220]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 8002606:	4313      	orrs	r3, r2
 8002608:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800260a:	e03a      	b.n	8002682 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d020      	beq.n	8002656 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002614:	4b34      	ldr	r3, [pc, #208]	; (80026e8 <HAL_RCC_OscConfig+0x244>)
 8002616:	2201      	movs	r2, #1
 8002618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800261a:	f7fe f9e5 	bl	80009e8 <HAL_GetTick>
 800261e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002620:	e008      	b.n	8002634 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002622:	f7fe f9e1 	bl	80009e8 <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	2b02      	cmp	r3, #2
 800262e:	d901      	bls.n	8002634 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e1a8      	b.n	8002986 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002634:	4b2b      	ldr	r3, [pc, #172]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d0f0      	beq.n	8002622 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002640:	4b28      	ldr	r3, [pc, #160]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	691b      	ldr	r3, [r3, #16]
 800264c:	00db      	lsls	r3, r3, #3
 800264e:	4925      	ldr	r1, [pc, #148]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 8002650:	4313      	orrs	r3, r2
 8002652:	600b      	str	r3, [r1, #0]
 8002654:	e015      	b.n	8002682 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002656:	4b24      	ldr	r3, [pc, #144]	; (80026e8 <HAL_RCC_OscConfig+0x244>)
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800265c:	f7fe f9c4 	bl	80009e8 <HAL_GetTick>
 8002660:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002662:	e008      	b.n	8002676 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002664:	f7fe f9c0 	bl	80009e8 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e187      	b.n	8002986 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002676:	4b1b      	ldr	r3, [pc, #108]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1f0      	bne.n	8002664 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0308 	and.w	r3, r3, #8
 800268a:	2b00      	cmp	r3, #0
 800268c:	d036      	beq.n	80026fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	695b      	ldr	r3, [r3, #20]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d016      	beq.n	80026c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002696:	4b15      	ldr	r3, [pc, #84]	; (80026ec <HAL_RCC_OscConfig+0x248>)
 8002698:	2201      	movs	r2, #1
 800269a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800269c:	f7fe f9a4 	bl	80009e8 <HAL_GetTick>
 80026a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026a2:	e008      	b.n	80026b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026a4:	f7fe f9a0 	bl	80009e8 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e167      	b.n	8002986 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026b6:	4b0b      	ldr	r3, [pc, #44]	; (80026e4 <HAL_RCC_OscConfig+0x240>)
 80026b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d0f0      	beq.n	80026a4 <HAL_RCC_OscConfig+0x200>
 80026c2:	e01b      	b.n	80026fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026c4:	4b09      	ldr	r3, [pc, #36]	; (80026ec <HAL_RCC_OscConfig+0x248>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ca:	f7fe f98d 	bl	80009e8 <HAL_GetTick>
 80026ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026d0:	e00e      	b.n	80026f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026d2:	f7fe f989 	bl	80009e8 <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d907      	bls.n	80026f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e150      	b.n	8002986 <HAL_RCC_OscConfig+0x4e2>
 80026e4:	40023800 	.word	0x40023800
 80026e8:	42470000 	.word	0x42470000
 80026ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026f0:	4b88      	ldr	r3, [pc, #544]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 80026f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026f4:	f003 0302 	and.w	r3, r3, #2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d1ea      	bne.n	80026d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0304 	and.w	r3, r3, #4
 8002704:	2b00      	cmp	r3, #0
 8002706:	f000 8097 	beq.w	8002838 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800270a:	2300      	movs	r3, #0
 800270c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800270e:	4b81      	ldr	r3, [pc, #516]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d10f      	bne.n	800273a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800271a:	2300      	movs	r3, #0
 800271c:	60bb      	str	r3, [r7, #8]
 800271e:	4b7d      	ldr	r3, [pc, #500]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	4a7c      	ldr	r2, [pc, #496]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 8002724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002728:	6413      	str	r3, [r2, #64]	; 0x40
 800272a:	4b7a      	ldr	r3, [pc, #488]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002732:	60bb      	str	r3, [r7, #8]
 8002734:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002736:	2301      	movs	r3, #1
 8002738:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800273a:	4b77      	ldr	r3, [pc, #476]	; (8002918 <HAL_RCC_OscConfig+0x474>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002742:	2b00      	cmp	r3, #0
 8002744:	d118      	bne.n	8002778 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002746:	4b74      	ldr	r3, [pc, #464]	; (8002918 <HAL_RCC_OscConfig+0x474>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a73      	ldr	r2, [pc, #460]	; (8002918 <HAL_RCC_OscConfig+0x474>)
 800274c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002750:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002752:	f7fe f949 	bl	80009e8 <HAL_GetTick>
 8002756:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002758:	e008      	b.n	800276c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800275a:	f7fe f945 	bl	80009e8 <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	2b02      	cmp	r3, #2
 8002766:	d901      	bls.n	800276c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e10c      	b.n	8002986 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800276c:	4b6a      	ldr	r3, [pc, #424]	; (8002918 <HAL_RCC_OscConfig+0x474>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002774:	2b00      	cmp	r3, #0
 8002776:	d0f0      	beq.n	800275a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	2b01      	cmp	r3, #1
 800277e:	d106      	bne.n	800278e <HAL_RCC_OscConfig+0x2ea>
 8002780:	4b64      	ldr	r3, [pc, #400]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 8002782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002784:	4a63      	ldr	r2, [pc, #396]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 8002786:	f043 0301 	orr.w	r3, r3, #1
 800278a:	6713      	str	r3, [r2, #112]	; 0x70
 800278c:	e01c      	b.n	80027c8 <HAL_RCC_OscConfig+0x324>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	2b05      	cmp	r3, #5
 8002794:	d10c      	bne.n	80027b0 <HAL_RCC_OscConfig+0x30c>
 8002796:	4b5f      	ldr	r3, [pc, #380]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 8002798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800279a:	4a5e      	ldr	r2, [pc, #376]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 800279c:	f043 0304 	orr.w	r3, r3, #4
 80027a0:	6713      	str	r3, [r2, #112]	; 0x70
 80027a2:	4b5c      	ldr	r3, [pc, #368]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 80027a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a6:	4a5b      	ldr	r2, [pc, #364]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 80027a8:	f043 0301 	orr.w	r3, r3, #1
 80027ac:	6713      	str	r3, [r2, #112]	; 0x70
 80027ae:	e00b      	b.n	80027c8 <HAL_RCC_OscConfig+0x324>
 80027b0:	4b58      	ldr	r3, [pc, #352]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 80027b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b4:	4a57      	ldr	r2, [pc, #348]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 80027b6:	f023 0301 	bic.w	r3, r3, #1
 80027ba:	6713      	str	r3, [r2, #112]	; 0x70
 80027bc:	4b55      	ldr	r3, [pc, #340]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 80027be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c0:	4a54      	ldr	r2, [pc, #336]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 80027c2:	f023 0304 	bic.w	r3, r3, #4
 80027c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d015      	beq.n	80027fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d0:	f7fe f90a 	bl	80009e8 <HAL_GetTick>
 80027d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027d6:	e00a      	b.n	80027ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027d8:	f7fe f906 	bl	80009e8 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e0cb      	b.n	8002986 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ee:	4b49      	ldr	r3, [pc, #292]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 80027f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d0ee      	beq.n	80027d8 <HAL_RCC_OscConfig+0x334>
 80027fa:	e014      	b.n	8002826 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027fc:	f7fe f8f4 	bl	80009e8 <HAL_GetTick>
 8002800:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002802:	e00a      	b.n	800281a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002804:	f7fe f8f0 	bl	80009e8 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002812:	4293      	cmp	r3, r2
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e0b5      	b.n	8002986 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800281a:	4b3e      	ldr	r3, [pc, #248]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 800281c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800281e:	f003 0302 	and.w	r3, r3, #2
 8002822:	2b00      	cmp	r3, #0
 8002824:	d1ee      	bne.n	8002804 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002826:	7dfb      	ldrb	r3, [r7, #23]
 8002828:	2b01      	cmp	r3, #1
 800282a:	d105      	bne.n	8002838 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800282c:	4b39      	ldr	r3, [pc, #228]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 800282e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002830:	4a38      	ldr	r2, [pc, #224]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 8002832:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002836:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	699b      	ldr	r3, [r3, #24]
 800283c:	2b00      	cmp	r3, #0
 800283e:	f000 80a1 	beq.w	8002984 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002842:	4b34      	ldr	r3, [pc, #208]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f003 030c 	and.w	r3, r3, #12
 800284a:	2b08      	cmp	r3, #8
 800284c:	d05c      	beq.n	8002908 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	699b      	ldr	r3, [r3, #24]
 8002852:	2b02      	cmp	r3, #2
 8002854:	d141      	bne.n	80028da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002856:	4b31      	ldr	r3, [pc, #196]	; (800291c <HAL_RCC_OscConfig+0x478>)
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800285c:	f7fe f8c4 	bl	80009e8 <HAL_GetTick>
 8002860:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002862:	e008      	b.n	8002876 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002864:	f7fe f8c0 	bl	80009e8 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b02      	cmp	r3, #2
 8002870:	d901      	bls.n	8002876 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e087      	b.n	8002986 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002876:	4b27      	ldr	r3, [pc, #156]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d1f0      	bne.n	8002864 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	69da      	ldr	r2, [r3, #28]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a1b      	ldr	r3, [r3, #32]
 800288a:	431a      	orrs	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002890:	019b      	lsls	r3, r3, #6
 8002892:	431a      	orrs	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002898:	085b      	lsrs	r3, r3, #1
 800289a:	3b01      	subs	r3, #1
 800289c:	041b      	lsls	r3, r3, #16
 800289e:	431a      	orrs	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a4:	061b      	lsls	r3, r3, #24
 80028a6:	491b      	ldr	r1, [pc, #108]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028ac:	4b1b      	ldr	r3, [pc, #108]	; (800291c <HAL_RCC_OscConfig+0x478>)
 80028ae:	2201      	movs	r2, #1
 80028b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b2:	f7fe f899 	bl	80009e8 <HAL_GetTick>
 80028b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028b8:	e008      	b.n	80028cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028ba:	f7fe f895 	bl	80009e8 <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d901      	bls.n	80028cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e05c      	b.n	8002986 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028cc:	4b11      	ldr	r3, [pc, #68]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d0f0      	beq.n	80028ba <HAL_RCC_OscConfig+0x416>
 80028d8:	e054      	b.n	8002984 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028da:	4b10      	ldr	r3, [pc, #64]	; (800291c <HAL_RCC_OscConfig+0x478>)
 80028dc:	2200      	movs	r2, #0
 80028de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e0:	f7fe f882 	bl	80009e8 <HAL_GetTick>
 80028e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028e6:	e008      	b.n	80028fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028e8:	f7fe f87e 	bl	80009e8 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e045      	b.n	8002986 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028fa:	4b06      	ldr	r3, [pc, #24]	; (8002914 <HAL_RCC_OscConfig+0x470>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1f0      	bne.n	80028e8 <HAL_RCC_OscConfig+0x444>
 8002906:	e03d      	b.n	8002984 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	699b      	ldr	r3, [r3, #24]
 800290c:	2b01      	cmp	r3, #1
 800290e:	d107      	bne.n	8002920 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e038      	b.n	8002986 <HAL_RCC_OscConfig+0x4e2>
 8002914:	40023800 	.word	0x40023800
 8002918:	40007000 	.word	0x40007000
 800291c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002920:	4b1b      	ldr	r3, [pc, #108]	; (8002990 <HAL_RCC_OscConfig+0x4ec>)
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	699b      	ldr	r3, [r3, #24]
 800292a:	2b01      	cmp	r3, #1
 800292c:	d028      	beq.n	8002980 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002938:	429a      	cmp	r2, r3
 800293a:	d121      	bne.n	8002980 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002946:	429a      	cmp	r2, r3
 8002948:	d11a      	bne.n	8002980 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800294a:	68fa      	ldr	r2, [r7, #12]
 800294c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002950:	4013      	ands	r3, r2
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002956:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002958:	4293      	cmp	r3, r2
 800295a:	d111      	bne.n	8002980 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002966:	085b      	lsrs	r3, r3, #1
 8002968:	3b01      	subs	r3, #1
 800296a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800296c:	429a      	cmp	r2, r3
 800296e:	d107      	bne.n	8002980 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800297c:	429a      	cmp	r2, r3
 800297e:	d001      	beq.n	8002984 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e000      	b.n	8002986 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3718      	adds	r7, #24
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	40023800 	.word	0x40023800

08002994 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d101      	bne.n	80029a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e0cc      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029a8:	4b68      	ldr	r3, [pc, #416]	; (8002b4c <HAL_RCC_ClockConfig+0x1b8>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0307 	and.w	r3, r3, #7
 80029b0:	683a      	ldr	r2, [r7, #0]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d90c      	bls.n	80029d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029b6:	4b65      	ldr	r3, [pc, #404]	; (8002b4c <HAL_RCC_ClockConfig+0x1b8>)
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	b2d2      	uxtb	r2, r2
 80029bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029be:	4b63      	ldr	r3, [pc, #396]	; (8002b4c <HAL_RCC_ClockConfig+0x1b8>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0307 	and.w	r3, r3, #7
 80029c6:	683a      	ldr	r2, [r7, #0]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d001      	beq.n	80029d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e0b8      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0302 	and.w	r3, r3, #2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d020      	beq.n	8002a1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0304 	and.w	r3, r3, #4
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d005      	beq.n	80029f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029e8:	4b59      	ldr	r3, [pc, #356]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	4a58      	ldr	r2, [pc, #352]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 80029ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0308 	and.w	r3, r3, #8
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d005      	beq.n	8002a0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a00:	4b53      	ldr	r3, [pc, #332]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	4a52      	ldr	r2, [pc, #328]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a0c:	4b50      	ldr	r3, [pc, #320]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	494d      	ldr	r1, [pc, #308]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d044      	beq.n	8002ab4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d107      	bne.n	8002a42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a32:	4b47      	ldr	r3, [pc, #284]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d119      	bne.n	8002a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e07f      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d003      	beq.n	8002a52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a4e:	2b03      	cmp	r3, #3
 8002a50:	d107      	bne.n	8002a62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a52:	4b3f      	ldr	r3, [pc, #252]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d109      	bne.n	8002a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e06f      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a62:	4b3b      	ldr	r3, [pc, #236]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e067      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a72:	4b37      	ldr	r3, [pc, #220]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f023 0203 	bic.w	r2, r3, #3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	4934      	ldr	r1, [pc, #208]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a84:	f7fd ffb0 	bl	80009e8 <HAL_GetTick>
 8002a88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a8a:	e00a      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a8c:	f7fd ffac 	bl	80009e8 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e04f      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aa2:	4b2b      	ldr	r3, [pc, #172]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f003 020c 	and.w	r2, r3, #12
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d1eb      	bne.n	8002a8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ab4:	4b25      	ldr	r3, [pc, #148]	; (8002b4c <HAL_RCC_ClockConfig+0x1b8>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0307 	and.w	r3, r3, #7
 8002abc:	683a      	ldr	r2, [r7, #0]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d20c      	bcs.n	8002adc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ac2:	4b22      	ldr	r3, [pc, #136]	; (8002b4c <HAL_RCC_ClockConfig+0x1b8>)
 8002ac4:	683a      	ldr	r2, [r7, #0]
 8002ac6:	b2d2      	uxtb	r2, r2
 8002ac8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aca:	4b20      	ldr	r3, [pc, #128]	; (8002b4c <HAL_RCC_ClockConfig+0x1b8>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0307 	and.w	r3, r3, #7
 8002ad2:	683a      	ldr	r2, [r7, #0]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d001      	beq.n	8002adc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e032      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0304 	and.w	r3, r3, #4
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d008      	beq.n	8002afa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ae8:	4b19      	ldr	r3, [pc, #100]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	4916      	ldr	r1, [pc, #88]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0308 	and.w	r3, r3, #8
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d009      	beq.n	8002b1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b06:	4b12      	ldr	r3, [pc, #72]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	490e      	ldr	r1, [pc, #56]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b1a:	f000 f821 	bl	8002b60 <HAL_RCC_GetSysClockFreq>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	4b0b      	ldr	r3, [pc, #44]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	091b      	lsrs	r3, r3, #4
 8002b26:	f003 030f 	and.w	r3, r3, #15
 8002b2a:	490a      	ldr	r1, [pc, #40]	; (8002b54 <HAL_RCC_ClockConfig+0x1c0>)
 8002b2c:	5ccb      	ldrb	r3, [r1, r3]
 8002b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b32:	4a09      	ldr	r2, [pc, #36]	; (8002b58 <HAL_RCC_ClockConfig+0x1c4>)
 8002b34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b36:	4b09      	ldr	r3, [pc, #36]	; (8002b5c <HAL_RCC_ClockConfig+0x1c8>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7fd fe3c 	bl	80007b8 <HAL_InitTick>

  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	40023c00 	.word	0x40023c00
 8002b50:	40023800 	.word	0x40023800
 8002b54:	0800a470 	.word	0x0800a470
 8002b58:	20000000 	.word	0x20000000
 8002b5c:	20000004 	.word	0x20000004

08002b60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b64:	b094      	sub	sp, #80	; 0x50
 8002b66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	647b      	str	r3, [r7, #68]	; 0x44
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b70:	2300      	movs	r3, #0
 8002b72:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002b74:	2300      	movs	r3, #0
 8002b76:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b78:	4b79      	ldr	r3, [pc, #484]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f003 030c 	and.w	r3, r3, #12
 8002b80:	2b08      	cmp	r3, #8
 8002b82:	d00d      	beq.n	8002ba0 <HAL_RCC_GetSysClockFreq+0x40>
 8002b84:	2b08      	cmp	r3, #8
 8002b86:	f200 80e1 	bhi.w	8002d4c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d002      	beq.n	8002b94 <HAL_RCC_GetSysClockFreq+0x34>
 8002b8e:	2b04      	cmp	r3, #4
 8002b90:	d003      	beq.n	8002b9a <HAL_RCC_GetSysClockFreq+0x3a>
 8002b92:	e0db      	b.n	8002d4c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b94:	4b73      	ldr	r3, [pc, #460]	; (8002d64 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b96:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002b98:	e0db      	b.n	8002d52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b9a:	4b73      	ldr	r3, [pc, #460]	; (8002d68 <HAL_RCC_GetSysClockFreq+0x208>)
 8002b9c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b9e:	e0d8      	b.n	8002d52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ba0:	4b6f      	ldr	r3, [pc, #444]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ba8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002baa:	4b6d      	ldr	r3, [pc, #436]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d063      	beq.n	8002c7e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bb6:	4b6a      	ldr	r3, [pc, #424]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	099b      	lsrs	r3, r3, #6
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	63bb      	str	r3, [r7, #56]	; 0x38
 8002bc0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bc8:	633b      	str	r3, [r7, #48]	; 0x30
 8002bca:	2300      	movs	r3, #0
 8002bcc:	637b      	str	r3, [r7, #52]	; 0x34
 8002bce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002bd2:	4622      	mov	r2, r4
 8002bd4:	462b      	mov	r3, r5
 8002bd6:	f04f 0000 	mov.w	r0, #0
 8002bda:	f04f 0100 	mov.w	r1, #0
 8002bde:	0159      	lsls	r1, r3, #5
 8002be0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002be4:	0150      	lsls	r0, r2, #5
 8002be6:	4602      	mov	r2, r0
 8002be8:	460b      	mov	r3, r1
 8002bea:	4621      	mov	r1, r4
 8002bec:	1a51      	subs	r1, r2, r1
 8002bee:	6139      	str	r1, [r7, #16]
 8002bf0:	4629      	mov	r1, r5
 8002bf2:	eb63 0301 	sbc.w	r3, r3, r1
 8002bf6:	617b      	str	r3, [r7, #20]
 8002bf8:	f04f 0200 	mov.w	r2, #0
 8002bfc:	f04f 0300 	mov.w	r3, #0
 8002c00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c04:	4659      	mov	r1, fp
 8002c06:	018b      	lsls	r3, r1, #6
 8002c08:	4651      	mov	r1, sl
 8002c0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c0e:	4651      	mov	r1, sl
 8002c10:	018a      	lsls	r2, r1, #6
 8002c12:	4651      	mov	r1, sl
 8002c14:	ebb2 0801 	subs.w	r8, r2, r1
 8002c18:	4659      	mov	r1, fp
 8002c1a:	eb63 0901 	sbc.w	r9, r3, r1
 8002c1e:	f04f 0200 	mov.w	r2, #0
 8002c22:	f04f 0300 	mov.w	r3, #0
 8002c26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c32:	4690      	mov	r8, r2
 8002c34:	4699      	mov	r9, r3
 8002c36:	4623      	mov	r3, r4
 8002c38:	eb18 0303 	adds.w	r3, r8, r3
 8002c3c:	60bb      	str	r3, [r7, #8]
 8002c3e:	462b      	mov	r3, r5
 8002c40:	eb49 0303 	adc.w	r3, r9, r3
 8002c44:	60fb      	str	r3, [r7, #12]
 8002c46:	f04f 0200 	mov.w	r2, #0
 8002c4a:	f04f 0300 	mov.w	r3, #0
 8002c4e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c52:	4629      	mov	r1, r5
 8002c54:	024b      	lsls	r3, r1, #9
 8002c56:	4621      	mov	r1, r4
 8002c58:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c5c:	4621      	mov	r1, r4
 8002c5e:	024a      	lsls	r2, r1, #9
 8002c60:	4610      	mov	r0, r2
 8002c62:	4619      	mov	r1, r3
 8002c64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c66:	2200      	movs	r2, #0
 8002c68:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c6c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c70:	f7fd fab6 	bl	80001e0 <__aeabi_uldivmod>
 8002c74:	4602      	mov	r2, r0
 8002c76:	460b      	mov	r3, r1
 8002c78:	4613      	mov	r3, r2
 8002c7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c7c:	e058      	b.n	8002d30 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c7e:	4b38      	ldr	r3, [pc, #224]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	099b      	lsrs	r3, r3, #6
 8002c84:	2200      	movs	r2, #0
 8002c86:	4618      	mov	r0, r3
 8002c88:	4611      	mov	r1, r2
 8002c8a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c8e:	623b      	str	r3, [r7, #32]
 8002c90:	2300      	movs	r3, #0
 8002c92:	627b      	str	r3, [r7, #36]	; 0x24
 8002c94:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c98:	4642      	mov	r2, r8
 8002c9a:	464b      	mov	r3, r9
 8002c9c:	f04f 0000 	mov.w	r0, #0
 8002ca0:	f04f 0100 	mov.w	r1, #0
 8002ca4:	0159      	lsls	r1, r3, #5
 8002ca6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002caa:	0150      	lsls	r0, r2, #5
 8002cac:	4602      	mov	r2, r0
 8002cae:	460b      	mov	r3, r1
 8002cb0:	4641      	mov	r1, r8
 8002cb2:	ebb2 0a01 	subs.w	sl, r2, r1
 8002cb6:	4649      	mov	r1, r9
 8002cb8:	eb63 0b01 	sbc.w	fp, r3, r1
 8002cbc:	f04f 0200 	mov.w	r2, #0
 8002cc0:	f04f 0300 	mov.w	r3, #0
 8002cc4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002cc8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002ccc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002cd0:	ebb2 040a 	subs.w	r4, r2, sl
 8002cd4:	eb63 050b 	sbc.w	r5, r3, fp
 8002cd8:	f04f 0200 	mov.w	r2, #0
 8002cdc:	f04f 0300 	mov.w	r3, #0
 8002ce0:	00eb      	lsls	r3, r5, #3
 8002ce2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ce6:	00e2      	lsls	r2, r4, #3
 8002ce8:	4614      	mov	r4, r2
 8002cea:	461d      	mov	r5, r3
 8002cec:	4643      	mov	r3, r8
 8002cee:	18e3      	adds	r3, r4, r3
 8002cf0:	603b      	str	r3, [r7, #0]
 8002cf2:	464b      	mov	r3, r9
 8002cf4:	eb45 0303 	adc.w	r3, r5, r3
 8002cf8:	607b      	str	r3, [r7, #4]
 8002cfa:	f04f 0200 	mov.w	r2, #0
 8002cfe:	f04f 0300 	mov.w	r3, #0
 8002d02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d06:	4629      	mov	r1, r5
 8002d08:	028b      	lsls	r3, r1, #10
 8002d0a:	4621      	mov	r1, r4
 8002d0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d10:	4621      	mov	r1, r4
 8002d12:	028a      	lsls	r2, r1, #10
 8002d14:	4610      	mov	r0, r2
 8002d16:	4619      	mov	r1, r3
 8002d18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	61bb      	str	r3, [r7, #24]
 8002d1e:	61fa      	str	r2, [r7, #28]
 8002d20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d24:	f7fd fa5c 	bl	80001e0 <__aeabi_uldivmod>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d30:	4b0b      	ldr	r3, [pc, #44]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	0c1b      	lsrs	r3, r3, #16
 8002d36:	f003 0303 	and.w	r3, r3, #3
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002d40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d48:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d4a:	e002      	b.n	8002d52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d4c:	4b05      	ldr	r3, [pc, #20]	; (8002d64 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d4e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3750      	adds	r7, #80	; 0x50
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d5e:	bf00      	nop
 8002d60:	40023800 	.word	0x40023800
 8002d64:	00f42400 	.word	0x00f42400
 8002d68:	007a1200 	.word	0x007a1200

08002d6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d70:	4b03      	ldr	r3, [pc, #12]	; (8002d80 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d72:	681b      	ldr	r3, [r3, #0]
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	20000000 	.word	0x20000000

08002d84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d88:	f7ff fff0 	bl	8002d6c <HAL_RCC_GetHCLKFreq>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	4b05      	ldr	r3, [pc, #20]	; (8002da4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	0a9b      	lsrs	r3, r3, #10
 8002d94:	f003 0307 	and.w	r3, r3, #7
 8002d98:	4903      	ldr	r1, [pc, #12]	; (8002da8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d9a:	5ccb      	ldrb	r3, [r1, r3]
 8002d9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	40023800 	.word	0x40023800
 8002da8:	0800a480 	.word	0x0800a480

08002dac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	220f      	movs	r2, #15
 8002dba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002dbc:	4b12      	ldr	r3, [pc, #72]	; (8002e08 <HAL_RCC_GetClockConfig+0x5c>)
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f003 0203 	and.w	r2, r3, #3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002dc8:	4b0f      	ldr	r3, [pc, #60]	; (8002e08 <HAL_RCC_GetClockConfig+0x5c>)
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002dd4:	4b0c      	ldr	r3, [pc, #48]	; (8002e08 <HAL_RCC_GetClockConfig+0x5c>)
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002de0:	4b09      	ldr	r3, [pc, #36]	; (8002e08 <HAL_RCC_GetClockConfig+0x5c>)
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	08db      	lsrs	r3, r3, #3
 8002de6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002dee:	4b07      	ldr	r3, [pc, #28]	; (8002e0c <HAL_RCC_GetClockConfig+0x60>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0207 	and.w	r2, r3, #7
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	601a      	str	r2, [r3, #0]
}
 8002dfa:	bf00      	nop
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	40023800 	.word	0x40023800
 8002e0c:	40023c00 	.word	0x40023c00

08002e10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d101      	bne.n	8002e22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e041      	b.n	8002ea6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d106      	bne.n	8002e3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 f839 	bl	8002eae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2202      	movs	r2, #2
 8002e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	3304      	adds	r3, #4
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	4610      	mov	r0, r2
 8002e50:	f000 f9d8 	bl	8003204 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3708      	adds	r7, #8
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002eae:	b480      	push	{r7}
 8002eb0:	b083      	sub	sp, #12
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002eb6:	bf00      	nop
 8002eb8:	370c      	adds	r7, #12
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
	...

08002ec4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b085      	sub	sp, #20
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d001      	beq.n	8002edc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e04e      	b.n	8002f7a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2202      	movs	r2, #2
 8002ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68da      	ldr	r2, [r3, #12]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f042 0201 	orr.w	r2, r2, #1
 8002ef2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a23      	ldr	r2, [pc, #140]	; (8002f88 <HAL_TIM_Base_Start_IT+0xc4>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d022      	beq.n	8002f44 <HAL_TIM_Base_Start_IT+0x80>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f06:	d01d      	beq.n	8002f44 <HAL_TIM_Base_Start_IT+0x80>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a1f      	ldr	r2, [pc, #124]	; (8002f8c <HAL_TIM_Base_Start_IT+0xc8>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d018      	beq.n	8002f44 <HAL_TIM_Base_Start_IT+0x80>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a1e      	ldr	r2, [pc, #120]	; (8002f90 <HAL_TIM_Base_Start_IT+0xcc>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d013      	beq.n	8002f44 <HAL_TIM_Base_Start_IT+0x80>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a1c      	ldr	r2, [pc, #112]	; (8002f94 <HAL_TIM_Base_Start_IT+0xd0>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d00e      	beq.n	8002f44 <HAL_TIM_Base_Start_IT+0x80>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a1b      	ldr	r2, [pc, #108]	; (8002f98 <HAL_TIM_Base_Start_IT+0xd4>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d009      	beq.n	8002f44 <HAL_TIM_Base_Start_IT+0x80>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a19      	ldr	r2, [pc, #100]	; (8002f9c <HAL_TIM_Base_Start_IT+0xd8>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d004      	beq.n	8002f44 <HAL_TIM_Base_Start_IT+0x80>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a18      	ldr	r2, [pc, #96]	; (8002fa0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d111      	bne.n	8002f68 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f003 0307 	and.w	r3, r3, #7
 8002f4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2b06      	cmp	r3, #6
 8002f54:	d010      	beq.n	8002f78 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f042 0201 	orr.w	r2, r2, #1
 8002f64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f66:	e007      	b.n	8002f78 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f042 0201 	orr.w	r2, r2, #1
 8002f76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3714      	adds	r7, #20
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	40010000 	.word	0x40010000
 8002f8c:	40000400 	.word	0x40000400
 8002f90:	40000800 	.word	0x40000800
 8002f94:	40000c00 	.word	0x40000c00
 8002f98:	40010400 	.word	0x40010400
 8002f9c:	40014000 	.word	0x40014000
 8002fa0:	40001800 	.word	0x40001800

08002fa4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d122      	bne.n	8003000 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	f003 0302 	and.w	r3, r3, #2
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d11b      	bne.n	8003000 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f06f 0202 	mvn.w	r2, #2
 8002fd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	f003 0303 	and.w	r3, r3, #3
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d003      	beq.n	8002fee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f000 f8ee 	bl	80031c8 <HAL_TIM_IC_CaptureCallback>
 8002fec:	e005      	b.n	8002ffa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 f8e0 	bl	80031b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f000 f8f1 	bl	80031dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	f003 0304 	and.w	r3, r3, #4
 800300a:	2b04      	cmp	r3, #4
 800300c:	d122      	bne.n	8003054 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	f003 0304 	and.w	r3, r3, #4
 8003018:	2b04      	cmp	r3, #4
 800301a:	d11b      	bne.n	8003054 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f06f 0204 	mvn.w	r2, #4
 8003024:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2202      	movs	r2, #2
 800302a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	699b      	ldr	r3, [r3, #24]
 8003032:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003036:	2b00      	cmp	r3, #0
 8003038:	d003      	beq.n	8003042 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 f8c4 	bl	80031c8 <HAL_TIM_IC_CaptureCallback>
 8003040:	e005      	b.n	800304e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 f8b6 	bl	80031b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f000 f8c7 	bl	80031dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	f003 0308 	and.w	r3, r3, #8
 800305e:	2b08      	cmp	r3, #8
 8003060:	d122      	bne.n	80030a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	f003 0308 	and.w	r3, r3, #8
 800306c:	2b08      	cmp	r3, #8
 800306e:	d11b      	bne.n	80030a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f06f 0208 	mvn.w	r2, #8
 8003078:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2204      	movs	r2, #4
 800307e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	69db      	ldr	r3, [r3, #28]
 8003086:	f003 0303 	and.w	r3, r3, #3
 800308a:	2b00      	cmp	r3, #0
 800308c:	d003      	beq.n	8003096 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f000 f89a 	bl	80031c8 <HAL_TIM_IC_CaptureCallback>
 8003094:	e005      	b.n	80030a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 f88c 	bl	80031b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f000 f89d 	bl	80031dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	f003 0310 	and.w	r3, r3, #16
 80030b2:	2b10      	cmp	r3, #16
 80030b4:	d122      	bne.n	80030fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	f003 0310 	and.w	r3, r3, #16
 80030c0:	2b10      	cmp	r3, #16
 80030c2:	d11b      	bne.n	80030fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f06f 0210 	mvn.w	r2, #16
 80030cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2208      	movs	r2, #8
 80030d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	69db      	ldr	r3, [r3, #28]
 80030da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d003      	beq.n	80030ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 f870 	bl	80031c8 <HAL_TIM_IC_CaptureCallback>
 80030e8:	e005      	b.n	80030f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 f862 	bl	80031b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f000 f873 	bl	80031dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	f003 0301 	and.w	r3, r3, #1
 8003106:	2b01      	cmp	r3, #1
 8003108:	d10e      	bne.n	8003128 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	f003 0301 	and.w	r3, r3, #1
 8003114:	2b01      	cmp	r3, #1
 8003116:	d107      	bne.n	8003128 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f06f 0201 	mvn.w	r2, #1
 8003120:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f7fd fb04 	bl	8000730 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003132:	2b80      	cmp	r3, #128	; 0x80
 8003134:	d10e      	bne.n	8003154 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003140:	2b80      	cmp	r3, #128	; 0x80
 8003142:	d107      	bne.n	8003154 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800314c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 f902 	bl	8003358 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800315e:	2b40      	cmp	r3, #64	; 0x40
 8003160:	d10e      	bne.n	8003180 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800316c:	2b40      	cmp	r3, #64	; 0x40
 800316e:	d107      	bne.n	8003180 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 f838 	bl	80031f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	f003 0320 	and.w	r3, r3, #32
 800318a:	2b20      	cmp	r3, #32
 800318c:	d10e      	bne.n	80031ac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	f003 0320 	and.w	r3, r3, #32
 8003198:	2b20      	cmp	r3, #32
 800319a:	d107      	bne.n	80031ac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f06f 0220 	mvn.w	r2, #32
 80031a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 f8cc 	bl	8003344 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031ac:	bf00      	nop
 80031ae:	3708      	adds	r7, #8
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031d0:	bf00      	nop
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003204:	b480      	push	{r7}
 8003206:	b085      	sub	sp, #20
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a40      	ldr	r2, [pc, #256]	; (8003318 <TIM_Base_SetConfig+0x114>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d013      	beq.n	8003244 <TIM_Base_SetConfig+0x40>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003222:	d00f      	beq.n	8003244 <TIM_Base_SetConfig+0x40>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4a3d      	ldr	r2, [pc, #244]	; (800331c <TIM_Base_SetConfig+0x118>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d00b      	beq.n	8003244 <TIM_Base_SetConfig+0x40>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a3c      	ldr	r2, [pc, #240]	; (8003320 <TIM_Base_SetConfig+0x11c>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d007      	beq.n	8003244 <TIM_Base_SetConfig+0x40>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4a3b      	ldr	r2, [pc, #236]	; (8003324 <TIM_Base_SetConfig+0x120>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d003      	beq.n	8003244 <TIM_Base_SetConfig+0x40>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4a3a      	ldr	r2, [pc, #232]	; (8003328 <TIM_Base_SetConfig+0x124>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d108      	bne.n	8003256 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800324a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	4313      	orrs	r3, r2
 8003254:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a2f      	ldr	r2, [pc, #188]	; (8003318 <TIM_Base_SetConfig+0x114>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d02b      	beq.n	80032b6 <TIM_Base_SetConfig+0xb2>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003264:	d027      	beq.n	80032b6 <TIM_Base_SetConfig+0xb2>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a2c      	ldr	r2, [pc, #176]	; (800331c <TIM_Base_SetConfig+0x118>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d023      	beq.n	80032b6 <TIM_Base_SetConfig+0xb2>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a2b      	ldr	r2, [pc, #172]	; (8003320 <TIM_Base_SetConfig+0x11c>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d01f      	beq.n	80032b6 <TIM_Base_SetConfig+0xb2>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a2a      	ldr	r2, [pc, #168]	; (8003324 <TIM_Base_SetConfig+0x120>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d01b      	beq.n	80032b6 <TIM_Base_SetConfig+0xb2>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a29      	ldr	r2, [pc, #164]	; (8003328 <TIM_Base_SetConfig+0x124>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d017      	beq.n	80032b6 <TIM_Base_SetConfig+0xb2>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a28      	ldr	r2, [pc, #160]	; (800332c <TIM_Base_SetConfig+0x128>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d013      	beq.n	80032b6 <TIM_Base_SetConfig+0xb2>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a27      	ldr	r2, [pc, #156]	; (8003330 <TIM_Base_SetConfig+0x12c>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d00f      	beq.n	80032b6 <TIM_Base_SetConfig+0xb2>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a26      	ldr	r2, [pc, #152]	; (8003334 <TIM_Base_SetConfig+0x130>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d00b      	beq.n	80032b6 <TIM_Base_SetConfig+0xb2>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a25      	ldr	r2, [pc, #148]	; (8003338 <TIM_Base_SetConfig+0x134>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d007      	beq.n	80032b6 <TIM_Base_SetConfig+0xb2>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a24      	ldr	r2, [pc, #144]	; (800333c <TIM_Base_SetConfig+0x138>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d003      	beq.n	80032b6 <TIM_Base_SetConfig+0xb2>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a23      	ldr	r2, [pc, #140]	; (8003340 <TIM_Base_SetConfig+0x13c>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d108      	bne.n	80032c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	695b      	ldr	r3, [r3, #20]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	68fa      	ldr	r2, [r7, #12]
 80032da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	689a      	ldr	r2, [r3, #8]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4a0a      	ldr	r2, [pc, #40]	; (8003318 <TIM_Base_SetConfig+0x114>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d003      	beq.n	80032fc <TIM_Base_SetConfig+0xf8>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4a0c      	ldr	r2, [pc, #48]	; (8003328 <TIM_Base_SetConfig+0x124>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d103      	bne.n	8003304 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	691a      	ldr	r2, [r3, #16]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	615a      	str	r2, [r3, #20]
}
 800330a:	bf00      	nop
 800330c:	3714      	adds	r7, #20
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	40010000 	.word	0x40010000
 800331c:	40000400 	.word	0x40000400
 8003320:	40000800 	.word	0x40000800
 8003324:	40000c00 	.word	0x40000c00
 8003328:	40010400 	.word	0x40010400
 800332c:	40014000 	.word	0x40014000
 8003330:	40014400 	.word	0x40014400
 8003334:	40014800 	.word	0x40014800
 8003338:	40001800 	.word	0x40001800
 800333c:	40001c00 	.word	0x40001c00
 8003340:	40002000 	.word	0x40002000

08003344 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003360:	bf00      	nop
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800336c:	b084      	sub	sp, #16
 800336e:	b580      	push	{r7, lr}
 8003370:	b084      	sub	sp, #16
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
 8003376:	f107 001c 	add.w	r0, r7, #28
 800337a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800337e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003380:	2b01      	cmp	r3, #1
 8003382:	d122      	bne.n	80033ca <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003388:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003398:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80033ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d105      	bne.n	80033be <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f001 fbee 	bl	8004ba0 <USB_CoreReset>
 80033c4:	4603      	mov	r3, r0
 80033c6:	73fb      	strb	r3, [r7, #15]
 80033c8:	e01a      	b.n	8003400 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f001 fbe2 	bl	8004ba0 <USB_CoreReset>
 80033dc:	4603      	mov	r3, r0
 80033de:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80033e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d106      	bne.n	80033f4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	639a      	str	r2, [r3, #56]	; 0x38
 80033f2:	e005      	b.n	8003400 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003402:	2b01      	cmp	r3, #1
 8003404:	d10b      	bne.n	800341e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f043 0206 	orr.w	r2, r3, #6
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	f043 0220 	orr.w	r2, r3, #32
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800341e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003420:	4618      	mov	r0, r3
 8003422:	3710      	adds	r7, #16
 8003424:	46bd      	mov	sp, r7
 8003426:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800342a:	b004      	add	sp, #16
 800342c:	4770      	bx	lr
	...

08003430 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003430:	b480      	push	{r7}
 8003432:	b087      	sub	sp, #28
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	4613      	mov	r3, r2
 800343c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800343e:	79fb      	ldrb	r3, [r7, #7]
 8003440:	2b02      	cmp	r3, #2
 8003442:	d165      	bne.n	8003510 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	4a41      	ldr	r2, [pc, #260]	; (800354c <USB_SetTurnaroundTime+0x11c>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d906      	bls.n	800345a <USB_SetTurnaroundTime+0x2a>
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	4a40      	ldr	r2, [pc, #256]	; (8003550 <USB_SetTurnaroundTime+0x120>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d202      	bcs.n	800345a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003454:	230f      	movs	r3, #15
 8003456:	617b      	str	r3, [r7, #20]
 8003458:	e062      	b.n	8003520 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	4a3c      	ldr	r2, [pc, #240]	; (8003550 <USB_SetTurnaroundTime+0x120>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d306      	bcc.n	8003470 <USB_SetTurnaroundTime+0x40>
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	4a3b      	ldr	r2, [pc, #236]	; (8003554 <USB_SetTurnaroundTime+0x124>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d202      	bcs.n	8003470 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800346a:	230e      	movs	r3, #14
 800346c:	617b      	str	r3, [r7, #20]
 800346e:	e057      	b.n	8003520 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	4a38      	ldr	r2, [pc, #224]	; (8003554 <USB_SetTurnaroundTime+0x124>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d306      	bcc.n	8003486 <USB_SetTurnaroundTime+0x56>
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	4a37      	ldr	r2, [pc, #220]	; (8003558 <USB_SetTurnaroundTime+0x128>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d202      	bcs.n	8003486 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003480:	230d      	movs	r3, #13
 8003482:	617b      	str	r3, [r7, #20]
 8003484:	e04c      	b.n	8003520 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	4a33      	ldr	r2, [pc, #204]	; (8003558 <USB_SetTurnaroundTime+0x128>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d306      	bcc.n	800349c <USB_SetTurnaroundTime+0x6c>
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	4a32      	ldr	r2, [pc, #200]	; (800355c <USB_SetTurnaroundTime+0x12c>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d802      	bhi.n	800349c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003496:	230c      	movs	r3, #12
 8003498:	617b      	str	r3, [r7, #20]
 800349a:	e041      	b.n	8003520 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	4a2f      	ldr	r2, [pc, #188]	; (800355c <USB_SetTurnaroundTime+0x12c>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d906      	bls.n	80034b2 <USB_SetTurnaroundTime+0x82>
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	4a2e      	ldr	r2, [pc, #184]	; (8003560 <USB_SetTurnaroundTime+0x130>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d802      	bhi.n	80034b2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80034ac:	230b      	movs	r3, #11
 80034ae:	617b      	str	r3, [r7, #20]
 80034b0:	e036      	b.n	8003520 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	4a2a      	ldr	r2, [pc, #168]	; (8003560 <USB_SetTurnaroundTime+0x130>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d906      	bls.n	80034c8 <USB_SetTurnaroundTime+0x98>
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	4a29      	ldr	r2, [pc, #164]	; (8003564 <USB_SetTurnaroundTime+0x134>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d802      	bhi.n	80034c8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80034c2:	230a      	movs	r3, #10
 80034c4:	617b      	str	r3, [r7, #20]
 80034c6:	e02b      	b.n	8003520 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	4a26      	ldr	r2, [pc, #152]	; (8003564 <USB_SetTurnaroundTime+0x134>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d906      	bls.n	80034de <USB_SetTurnaroundTime+0xae>
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	4a25      	ldr	r2, [pc, #148]	; (8003568 <USB_SetTurnaroundTime+0x138>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d202      	bcs.n	80034de <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80034d8:	2309      	movs	r3, #9
 80034da:	617b      	str	r3, [r7, #20]
 80034dc:	e020      	b.n	8003520 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	4a21      	ldr	r2, [pc, #132]	; (8003568 <USB_SetTurnaroundTime+0x138>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d306      	bcc.n	80034f4 <USB_SetTurnaroundTime+0xc4>
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	4a20      	ldr	r2, [pc, #128]	; (800356c <USB_SetTurnaroundTime+0x13c>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d802      	bhi.n	80034f4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80034ee:	2308      	movs	r3, #8
 80034f0:	617b      	str	r3, [r7, #20]
 80034f2:	e015      	b.n	8003520 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	4a1d      	ldr	r2, [pc, #116]	; (800356c <USB_SetTurnaroundTime+0x13c>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d906      	bls.n	800350a <USB_SetTurnaroundTime+0xda>
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	4a1c      	ldr	r2, [pc, #112]	; (8003570 <USB_SetTurnaroundTime+0x140>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d202      	bcs.n	800350a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003504:	2307      	movs	r3, #7
 8003506:	617b      	str	r3, [r7, #20]
 8003508:	e00a      	b.n	8003520 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800350a:	2306      	movs	r3, #6
 800350c:	617b      	str	r3, [r7, #20]
 800350e:	e007      	b.n	8003520 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003510:	79fb      	ldrb	r3, [r7, #7]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d102      	bne.n	800351c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003516:	2309      	movs	r3, #9
 8003518:	617b      	str	r3, [r7, #20]
 800351a:	e001      	b.n	8003520 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800351c:	2309      	movs	r3, #9
 800351e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	68da      	ldr	r2, [r3, #12]
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	029b      	lsls	r3, r3, #10
 8003534:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003538:	431a      	orrs	r2, r3
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800353e:	2300      	movs	r3, #0
}
 8003540:	4618      	mov	r0, r3
 8003542:	371c      	adds	r7, #28
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr
 800354c:	00d8acbf 	.word	0x00d8acbf
 8003550:	00e4e1c0 	.word	0x00e4e1c0
 8003554:	00f42400 	.word	0x00f42400
 8003558:	01067380 	.word	0x01067380
 800355c:	011a499f 	.word	0x011a499f
 8003560:	01312cff 	.word	0x01312cff
 8003564:	014ca43f 	.word	0x014ca43f
 8003568:	016e3600 	.word	0x016e3600
 800356c:	01a6ab1f 	.word	0x01a6ab1f
 8003570:	01e84800 	.word	0x01e84800

08003574 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f043 0201 	orr.w	r2, r3, #1
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	370c      	adds	r7, #12
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr

08003596 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003596:	b480      	push	{r7}
 8003598:	b083      	sub	sp, #12
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f023 0201 	bic.w	r2, r3, #1
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80035aa:	2300      	movs	r3, #0
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	370c      	adds	r7, #12
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr

080035b8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	460b      	mov	r3, r1
 80035c2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80035c4:	2300      	movs	r3, #0
 80035c6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80035d4:	78fb      	ldrb	r3, [r7, #3]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d115      	bne.n	8003606 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80035e6:	2001      	movs	r0, #1
 80035e8:	f7fd fa0a 	bl	8000a00 <HAL_Delay>
      ms++;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	3301      	adds	r3, #1
 80035f0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f001 fa45 	bl	8004a82 <USB_GetMode>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d01e      	beq.n	800363c <USB_SetCurrentMode+0x84>
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2b31      	cmp	r3, #49	; 0x31
 8003602:	d9f0      	bls.n	80035e6 <USB_SetCurrentMode+0x2e>
 8003604:	e01a      	b.n	800363c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003606:	78fb      	ldrb	r3, [r7, #3]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d115      	bne.n	8003638 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003618:	2001      	movs	r0, #1
 800361a:	f7fd f9f1 	bl	8000a00 <HAL_Delay>
      ms++;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	3301      	adds	r3, #1
 8003622:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f001 fa2c 	bl	8004a82 <USB_GetMode>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d005      	beq.n	800363c <USB_SetCurrentMode+0x84>
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2b31      	cmp	r3, #49	; 0x31
 8003634:	d9f0      	bls.n	8003618 <USB_SetCurrentMode+0x60>
 8003636:	e001      	b.n	800363c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e005      	b.n	8003648 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2b32      	cmp	r3, #50	; 0x32
 8003640:	d101      	bne.n	8003646 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e000      	b.n	8003648 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003646:	2300      	movs	r3, #0
}
 8003648:	4618      	mov	r0, r3
 800364a:	3710      	adds	r7, #16
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003650:	b084      	sub	sp, #16
 8003652:	b580      	push	{r7, lr}
 8003654:	b086      	sub	sp, #24
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
 800365a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800365e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003662:	2300      	movs	r3, #0
 8003664:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800366a:	2300      	movs	r3, #0
 800366c:	613b      	str	r3, [r7, #16]
 800366e:	e009      	b.n	8003684 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	3340      	adds	r3, #64	; 0x40
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	4413      	add	r3, r2
 800367a:	2200      	movs	r2, #0
 800367c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	3301      	adds	r3, #1
 8003682:	613b      	str	r3, [r7, #16]
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	2b0e      	cmp	r3, #14
 8003688:	d9f2      	bls.n	8003670 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800368a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800368c:	2b00      	cmp	r3, #0
 800368e:	d11c      	bne.n	80036ca <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	68fa      	ldr	r2, [r7, #12]
 800369a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800369e:	f043 0302 	orr.w	r3, r3, #2
 80036a2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	639a      	str	r2, [r3, #56]	; 0x38
 80036c8:	e00b      	b.n	80036e2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ce:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036da:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80036e8:	461a      	mov	r2, r3
 80036ea:	2300      	movs	r3, #0
 80036ec:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036f4:	4619      	mov	r1, r3
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036fc:	461a      	mov	r2, r3
 80036fe:	680b      	ldr	r3, [r1, #0]
 8003700:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003704:	2b01      	cmp	r3, #1
 8003706:	d10c      	bne.n	8003722 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800370a:	2b00      	cmp	r3, #0
 800370c:	d104      	bne.n	8003718 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800370e:	2100      	movs	r1, #0
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f000 f965 	bl	80039e0 <USB_SetDevSpeed>
 8003716:	e008      	b.n	800372a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003718:	2101      	movs	r1, #1
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 f960 	bl	80039e0 <USB_SetDevSpeed>
 8003720:	e003      	b.n	800372a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003722:	2103      	movs	r1, #3
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f000 f95b 	bl	80039e0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800372a:	2110      	movs	r1, #16
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f000 f8f3 	bl	8003918 <USB_FlushTxFifo>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d001      	beq.n	800373c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f000 f91f 	bl	8003980 <USB_FlushRxFifo>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d001      	beq.n	800374c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003752:	461a      	mov	r2, r3
 8003754:	2300      	movs	r3, #0
 8003756:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800375e:	461a      	mov	r2, r3
 8003760:	2300      	movs	r3, #0
 8003762:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800376a:	461a      	mov	r2, r3
 800376c:	2300      	movs	r3, #0
 800376e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003770:	2300      	movs	r3, #0
 8003772:	613b      	str	r3, [r7, #16]
 8003774:	e043      	b.n	80037fe <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	015a      	lsls	r2, r3, #5
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	4413      	add	r3, r2
 800377e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003788:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800378c:	d118      	bne.n	80037c0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d10a      	bne.n	80037aa <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	015a      	lsls	r2, r3, #5
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	4413      	add	r3, r2
 800379c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037a0:	461a      	mov	r2, r3
 80037a2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80037a6:	6013      	str	r3, [r2, #0]
 80037a8:	e013      	b.n	80037d2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	015a      	lsls	r2, r3, #5
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	4413      	add	r3, r2
 80037b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037b6:	461a      	mov	r2, r3
 80037b8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80037bc:	6013      	str	r3, [r2, #0]
 80037be:	e008      	b.n	80037d2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	015a      	lsls	r2, r3, #5
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	4413      	add	r3, r2
 80037c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037cc:	461a      	mov	r2, r3
 80037ce:	2300      	movs	r3, #0
 80037d0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	015a      	lsls	r2, r3, #5
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	4413      	add	r3, r2
 80037da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037de:	461a      	mov	r2, r3
 80037e0:	2300      	movs	r3, #0
 80037e2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	015a      	lsls	r2, r3, #5
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	4413      	add	r3, r2
 80037ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037f0:	461a      	mov	r2, r3
 80037f2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80037f6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	3301      	adds	r3, #1
 80037fc:	613b      	str	r3, [r7, #16]
 80037fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003800:	693a      	ldr	r2, [r7, #16]
 8003802:	429a      	cmp	r2, r3
 8003804:	d3b7      	bcc.n	8003776 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003806:	2300      	movs	r3, #0
 8003808:	613b      	str	r3, [r7, #16]
 800380a:	e043      	b.n	8003894 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	015a      	lsls	r2, r3, #5
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	4413      	add	r3, r2
 8003814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800381e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003822:	d118      	bne.n	8003856 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d10a      	bne.n	8003840 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	015a      	lsls	r2, r3, #5
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	4413      	add	r3, r2
 8003832:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003836:	461a      	mov	r2, r3
 8003838:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800383c:	6013      	str	r3, [r2, #0]
 800383e:	e013      	b.n	8003868 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	015a      	lsls	r2, r3, #5
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	4413      	add	r3, r2
 8003848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800384c:	461a      	mov	r2, r3
 800384e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003852:	6013      	str	r3, [r2, #0]
 8003854:	e008      	b.n	8003868 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	015a      	lsls	r2, r3, #5
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	4413      	add	r3, r2
 800385e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003862:	461a      	mov	r2, r3
 8003864:	2300      	movs	r3, #0
 8003866:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	015a      	lsls	r2, r3, #5
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	4413      	add	r3, r2
 8003870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003874:	461a      	mov	r2, r3
 8003876:	2300      	movs	r3, #0
 8003878:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	015a      	lsls	r2, r3, #5
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	4413      	add	r3, r2
 8003882:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003886:	461a      	mov	r2, r3
 8003888:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800388c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	3301      	adds	r3, #1
 8003892:	613b      	str	r3, [r7, #16]
 8003894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003896:	693a      	ldr	r2, [r7, #16]
 8003898:	429a      	cmp	r2, r3
 800389a:	d3b7      	bcc.n	800380c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	68fa      	ldr	r2, [r7, #12]
 80038a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038ae:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80038bc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80038be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d105      	bne.n	80038d0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	699b      	ldr	r3, [r3, #24]
 80038c8:	f043 0210 	orr.w	r2, r3, #16
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	699a      	ldr	r2, [r3, #24]
 80038d4:	4b0f      	ldr	r3, [pc, #60]	; (8003914 <USB_DevInit+0x2c4>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80038dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d005      	beq.n	80038ee <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	699b      	ldr	r3, [r3, #24]
 80038e6:	f043 0208 	orr.w	r2, r3, #8
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80038ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d107      	bne.n	8003904 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80038fc:	f043 0304 	orr.w	r3, r3, #4
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003904:	7dfb      	ldrb	r3, [r7, #23]
}
 8003906:	4618      	mov	r0, r3
 8003908:	3718      	adds	r7, #24
 800390a:	46bd      	mov	sp, r7
 800390c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003910:	b004      	add	sp, #16
 8003912:	4770      	bx	lr
 8003914:	803c3800 	.word	0x803c3800

08003918 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003918:	b480      	push	{r7}
 800391a:	b085      	sub	sp, #20
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003922:	2300      	movs	r3, #0
 8003924:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	3301      	adds	r3, #1
 800392a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	4a13      	ldr	r2, [pc, #76]	; (800397c <USB_FlushTxFifo+0x64>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d901      	bls.n	8003938 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e01b      	b.n	8003970 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	2b00      	cmp	r3, #0
 800393e:	daf2      	bge.n	8003926 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003940:	2300      	movs	r3, #0
 8003942:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	019b      	lsls	r3, r3, #6
 8003948:	f043 0220 	orr.w	r2, r3, #32
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	3301      	adds	r3, #1
 8003954:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	4a08      	ldr	r2, [pc, #32]	; (800397c <USB_FlushTxFifo+0x64>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d901      	bls.n	8003962 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e006      	b.n	8003970 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	f003 0320 	and.w	r3, r3, #32
 800396a:	2b20      	cmp	r3, #32
 800396c:	d0f0      	beq.n	8003950 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800396e:	2300      	movs	r3, #0
}
 8003970:	4618      	mov	r0, r3
 8003972:	3714      	adds	r7, #20
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr
 800397c:	00030d40 	.word	0x00030d40

08003980 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003980:	b480      	push	{r7}
 8003982:	b085      	sub	sp, #20
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003988:	2300      	movs	r3, #0
 800398a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	3301      	adds	r3, #1
 8003990:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	4a11      	ldr	r2, [pc, #68]	; (80039dc <USB_FlushRxFifo+0x5c>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d901      	bls.n	800399e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e018      	b.n	80039d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	daf2      	bge.n	800398c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80039a6:	2300      	movs	r3, #0
 80039a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2210      	movs	r2, #16
 80039ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	3301      	adds	r3, #1
 80039b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	4a08      	ldr	r2, [pc, #32]	; (80039dc <USB_FlushRxFifo+0x5c>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d901      	bls.n	80039c2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e006      	b.n	80039d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	f003 0310 	and.w	r3, r3, #16
 80039ca:	2b10      	cmp	r3, #16
 80039cc:	d0f0      	beq.n	80039b0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80039ce:	2300      	movs	r3, #0
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3714      	adds	r7, #20
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr
 80039dc:	00030d40 	.word	0x00030d40

080039e0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b085      	sub	sp, #20
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	460b      	mov	r3, r1
 80039ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	78fb      	ldrb	r3, [r7, #3]
 80039fa:	68f9      	ldr	r1, [r7, #12]
 80039fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a00:	4313      	orrs	r3, r2
 8003a02:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3714      	adds	r7, #20
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr

08003a12 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003a12:	b480      	push	{r7}
 8003a14:	b087      	sub	sp, #28
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f003 0306 	and.w	r3, r3, #6
 8003a2a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d102      	bne.n	8003a38 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003a32:	2300      	movs	r3, #0
 8003a34:	75fb      	strb	r3, [r7, #23]
 8003a36:	e00a      	b.n	8003a4e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d002      	beq.n	8003a44 <USB_GetDevSpeed+0x32>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2b06      	cmp	r3, #6
 8003a42:	d102      	bne.n	8003a4a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003a44:	2302      	movs	r3, #2
 8003a46:	75fb      	strb	r3, [r7, #23]
 8003a48:	e001      	b.n	8003a4e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003a4a:	230f      	movs	r3, #15
 8003a4c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003a4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	371c      	adds	r7, #28
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b085      	sub	sp, #20
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	785b      	ldrb	r3, [r3, #1]
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d13a      	bne.n	8003aee <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a7e:	69da      	ldr	r2, [r3, #28]
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	f003 030f 	and.w	r3, r3, #15
 8003a88:	2101      	movs	r1, #1
 8003a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	68f9      	ldr	r1, [r7, #12]
 8003a92:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a96:	4313      	orrs	r3, r2
 8003a98:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	015a      	lsls	r2, r3, #5
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d155      	bne.n	8003b5c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	015a      	lsls	r2, r3, #5
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	4413      	add	r3, r2
 8003ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	791b      	ldrb	r3, [r3, #4]
 8003aca:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003acc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	059b      	lsls	r3, r3, #22
 8003ad2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	68ba      	ldr	r2, [r7, #8]
 8003ad8:	0151      	lsls	r1, r2, #5
 8003ada:	68fa      	ldr	r2, [r7, #12]
 8003adc:	440a      	add	r2, r1
 8003ade:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ae2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ae6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003aea:	6013      	str	r3, [r2, #0]
 8003aec:	e036      	b.n	8003b5c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003af4:	69da      	ldr	r2, [r3, #28]
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	f003 030f 	and.w	r3, r3, #15
 8003afe:	2101      	movs	r1, #1
 8003b00:	fa01 f303 	lsl.w	r3, r1, r3
 8003b04:	041b      	lsls	r3, r3, #16
 8003b06:	68f9      	ldr	r1, [r7, #12]
 8003b08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	015a      	lsls	r2, r3, #5
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	4413      	add	r3, r2
 8003b18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d11a      	bne.n	8003b5c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	015a      	lsls	r2, r3, #5
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	791b      	ldrb	r3, [r3, #4]
 8003b40:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003b42:	430b      	orrs	r3, r1
 8003b44:	4313      	orrs	r3, r2
 8003b46:	68ba      	ldr	r2, [r7, #8]
 8003b48:	0151      	lsls	r1, r2, #5
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	440a      	add	r2, r1
 8003b4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b5a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3714      	adds	r7, #20
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
	...

08003b6c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b085      	sub	sp, #20
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	785b      	ldrb	r3, [r3, #1]
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d161      	bne.n	8003c4c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	015a      	lsls	r2, r3, #5
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	4413      	add	r3, r2
 8003b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b9e:	d11f      	bne.n	8003be0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	015a      	lsls	r2, r3, #5
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	4413      	add	r3, r2
 8003ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	68ba      	ldr	r2, [r7, #8]
 8003bb0:	0151      	lsls	r1, r2, #5
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	440a      	add	r2, r1
 8003bb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003bbe:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	015a      	lsls	r2, r3, #5
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	68ba      	ldr	r2, [r7, #8]
 8003bd0:	0151      	lsls	r1, r2, #5
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	440a      	add	r2, r1
 8003bd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bda:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003bde:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003be6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	f003 030f 	and.w	r3, r3, #15
 8003bf0:	2101      	movs	r1, #1
 8003bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	43db      	mvns	r3, r3
 8003bfa:	68f9      	ldr	r1, [r7, #12]
 8003bfc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c00:	4013      	ands	r3, r2
 8003c02:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c0a:	69da      	ldr	r2, [r3, #28]
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	f003 030f 	and.w	r3, r3, #15
 8003c14:	2101      	movs	r1, #1
 8003c16:	fa01 f303 	lsl.w	r3, r1, r3
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	43db      	mvns	r3, r3
 8003c1e:	68f9      	ldr	r1, [r7, #12]
 8003c20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c24:	4013      	ands	r3, r2
 8003c26:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	015a      	lsls	r2, r3, #5
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	4413      	add	r3, r2
 8003c30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	0159      	lsls	r1, r3, #5
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	440b      	add	r3, r1
 8003c3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c42:	4619      	mov	r1, r3
 8003c44:	4b35      	ldr	r3, [pc, #212]	; (8003d1c <USB_DeactivateEndpoint+0x1b0>)
 8003c46:	4013      	ands	r3, r2
 8003c48:	600b      	str	r3, [r1, #0]
 8003c4a:	e060      	b.n	8003d0e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	015a      	lsls	r2, r3, #5
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	4413      	add	r3, r2
 8003c54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c62:	d11f      	bne.n	8003ca4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	015a      	lsls	r2, r3, #5
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	4413      	add	r3, r2
 8003c6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68ba      	ldr	r2, [r7, #8]
 8003c74:	0151      	lsls	r1, r2, #5
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	440a      	add	r2, r1
 8003c7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c7e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003c82:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	015a      	lsls	r2, r3, #5
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	4413      	add	r3, r2
 8003c8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68ba      	ldr	r2, [r7, #8]
 8003c94:	0151      	lsls	r1, r2, #5
 8003c96:	68fa      	ldr	r2, [r7, #12]
 8003c98:	440a      	add	r2, r1
 8003c9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c9e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ca2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003caa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	f003 030f 	and.w	r3, r3, #15
 8003cb4:	2101      	movs	r1, #1
 8003cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8003cba:	041b      	lsls	r3, r3, #16
 8003cbc:	43db      	mvns	r3, r3
 8003cbe:	68f9      	ldr	r1, [r7, #12]
 8003cc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cce:	69da      	ldr	r2, [r3, #28]
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	f003 030f 	and.w	r3, r3, #15
 8003cd8:	2101      	movs	r1, #1
 8003cda:	fa01 f303 	lsl.w	r3, r1, r3
 8003cde:	041b      	lsls	r3, r3, #16
 8003ce0:	43db      	mvns	r3, r3
 8003ce2:	68f9      	ldr	r1, [r7, #12]
 8003ce4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ce8:	4013      	ands	r3, r2
 8003cea:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	015a      	lsls	r2, r3, #5
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	4413      	add	r3, r2
 8003cf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	0159      	lsls	r1, r3, #5
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	440b      	add	r3, r1
 8003d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d06:	4619      	mov	r1, r3
 8003d08:	4b05      	ldr	r3, [pc, #20]	; (8003d20 <USB_DeactivateEndpoint+0x1b4>)
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003d0e:	2300      	movs	r3, #0
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3714      	adds	r7, #20
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr
 8003d1c:	ec337800 	.word	0xec337800
 8003d20:	eff37800 	.word	0xeff37800

08003d24 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b08a      	sub	sp, #40	; 0x28
 8003d28:	af02      	add	r7, sp, #8
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	4613      	mov	r3, r2
 8003d30:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	785b      	ldrb	r3, [r3, #1]
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	f040 815c 	bne.w	8003ffe <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	699b      	ldr	r3, [r3, #24]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d132      	bne.n	8003db4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	015a      	lsls	r2, r3, #5
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	4413      	add	r3, r2
 8003d56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d5a:	691b      	ldr	r3, [r3, #16]
 8003d5c:	69ba      	ldr	r2, [r7, #24]
 8003d5e:	0151      	lsls	r1, r2, #5
 8003d60:	69fa      	ldr	r2, [r7, #28]
 8003d62:	440a      	add	r2, r1
 8003d64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d68:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003d6c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003d70:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	015a      	lsls	r2, r3, #5
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	4413      	add	r3, r2
 8003d7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d7e:	691b      	ldr	r3, [r3, #16]
 8003d80:	69ba      	ldr	r2, [r7, #24]
 8003d82:	0151      	lsls	r1, r2, #5
 8003d84:	69fa      	ldr	r2, [r7, #28]
 8003d86:	440a      	add	r2, r1
 8003d88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d90:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	015a      	lsls	r2, r3, #5
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	4413      	add	r3, r2
 8003d9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d9e:	691b      	ldr	r3, [r3, #16]
 8003da0:	69ba      	ldr	r2, [r7, #24]
 8003da2:	0151      	lsls	r1, r2, #5
 8003da4:	69fa      	ldr	r2, [r7, #28]
 8003da6:	440a      	add	r2, r1
 8003da8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dac:	0cdb      	lsrs	r3, r3, #19
 8003dae:	04db      	lsls	r3, r3, #19
 8003db0:	6113      	str	r3, [r2, #16]
 8003db2:	e074      	b.n	8003e9e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	015a      	lsls	r2, r3, #5
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	4413      	add	r3, r2
 8003dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	69ba      	ldr	r2, [r7, #24]
 8003dc4:	0151      	lsls	r1, r2, #5
 8003dc6:	69fa      	ldr	r2, [r7, #28]
 8003dc8:	440a      	add	r2, r1
 8003dca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dce:	0cdb      	lsrs	r3, r3, #19
 8003dd0:	04db      	lsls	r3, r3, #19
 8003dd2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	015a      	lsls	r2, r3, #5
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	4413      	add	r3, r2
 8003ddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	69ba      	ldr	r2, [r7, #24]
 8003de4:	0151      	lsls	r1, r2, #5
 8003de6:	69fa      	ldr	r2, [r7, #28]
 8003de8:	440a      	add	r2, r1
 8003dea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003df2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003df6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	015a      	lsls	r2, r3, #5
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	4413      	add	r3, r2
 8003e00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e04:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	6999      	ldr	r1, [r3, #24]
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	440b      	add	r3, r1
 8003e10:	1e59      	subs	r1, r3, #1
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e1a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003e1c:	4b9d      	ldr	r3, [pc, #628]	; (8004094 <USB_EPStartXfer+0x370>)
 8003e1e:	400b      	ands	r3, r1
 8003e20:	69b9      	ldr	r1, [r7, #24]
 8003e22:	0148      	lsls	r0, r1, #5
 8003e24:	69f9      	ldr	r1, [r7, #28]
 8003e26:	4401      	add	r1, r0
 8003e28:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	015a      	lsls	r2, r3, #5
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	4413      	add	r3, r2
 8003e38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e3c:	691a      	ldr	r2, [r3, #16]
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e46:	69b9      	ldr	r1, [r7, #24]
 8003e48:	0148      	lsls	r0, r1, #5
 8003e4a:	69f9      	ldr	r1, [r7, #28]
 8003e4c:	4401      	add	r1, r0
 8003e4e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003e52:	4313      	orrs	r3, r2
 8003e54:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	791b      	ldrb	r3, [r3, #4]
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d11f      	bne.n	8003e9e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	015a      	lsls	r2, r3, #5
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	4413      	add	r3, r2
 8003e66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e6a:	691b      	ldr	r3, [r3, #16]
 8003e6c:	69ba      	ldr	r2, [r7, #24]
 8003e6e:	0151      	lsls	r1, r2, #5
 8003e70:	69fa      	ldr	r2, [r7, #28]
 8003e72:	440a      	add	r2, r1
 8003e74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e78:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003e7c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	015a      	lsls	r2, r3, #5
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	4413      	add	r3, r2
 8003e86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e8a:	691b      	ldr	r3, [r3, #16]
 8003e8c:	69ba      	ldr	r2, [r7, #24]
 8003e8e:	0151      	lsls	r1, r2, #5
 8003e90:	69fa      	ldr	r2, [r7, #28]
 8003e92:	440a      	add	r2, r1
 8003e94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e98:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e9c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003e9e:	79fb      	ldrb	r3, [r7, #7]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d14b      	bne.n	8003f3c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	695b      	ldr	r3, [r3, #20]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d009      	beq.n	8003ec0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	015a      	lsls	r2, r3, #5
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	4413      	add	r3, r2
 8003eb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eb8:	461a      	mov	r2, r3
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	695b      	ldr	r3, [r3, #20]
 8003ebe:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	791b      	ldrb	r3, [r3, #4]
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d128      	bne.n	8003f1a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d110      	bne.n	8003efa <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	015a      	lsls	r2, r3, #5
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	4413      	add	r3, r2
 8003ee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	69ba      	ldr	r2, [r7, #24]
 8003ee8:	0151      	lsls	r1, r2, #5
 8003eea:	69fa      	ldr	r2, [r7, #28]
 8003eec:	440a      	add	r2, r1
 8003eee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ef2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003ef6:	6013      	str	r3, [r2, #0]
 8003ef8:	e00f      	b.n	8003f1a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	015a      	lsls	r2, r3, #5
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	4413      	add	r3, r2
 8003f02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	69ba      	ldr	r2, [r7, #24]
 8003f0a:	0151      	lsls	r1, r2, #5
 8003f0c:	69fa      	ldr	r2, [r7, #28]
 8003f0e:	440a      	add	r2, r1
 8003f10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f18:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	015a      	lsls	r2, r3, #5
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	4413      	add	r3, r2
 8003f22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	69ba      	ldr	r2, [r7, #24]
 8003f2a:	0151      	lsls	r1, r2, #5
 8003f2c:	69fa      	ldr	r2, [r7, #28]
 8003f2e:	440a      	add	r2, r1
 8003f30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f34:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003f38:	6013      	str	r3, [r2, #0]
 8003f3a:	e133      	b.n	80041a4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	015a      	lsls	r2, r3, #5
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	4413      	add	r3, r2
 8003f44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	69ba      	ldr	r2, [r7, #24]
 8003f4c:	0151      	lsls	r1, r2, #5
 8003f4e:	69fa      	ldr	r2, [r7, #28]
 8003f50:	440a      	add	r2, r1
 8003f52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f56:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003f5a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	791b      	ldrb	r3, [r3, #4]
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d015      	beq.n	8003f90 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	699b      	ldr	r3, [r3, #24]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	f000 811b 	beq.w	80041a4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	f003 030f 	and.w	r3, r3, #15
 8003f7e:	2101      	movs	r1, #1
 8003f80:	fa01 f303 	lsl.w	r3, r1, r3
 8003f84:	69f9      	ldr	r1, [r7, #28]
 8003f86:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	634b      	str	r3, [r1, #52]	; 0x34
 8003f8e:	e109      	b.n	80041a4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d110      	bne.n	8003fc2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	015a      	lsls	r2, r3, #5
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	4413      	add	r3, r2
 8003fa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	69ba      	ldr	r2, [r7, #24]
 8003fb0:	0151      	lsls	r1, r2, #5
 8003fb2:	69fa      	ldr	r2, [r7, #28]
 8003fb4:	440a      	add	r2, r1
 8003fb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003fbe:	6013      	str	r3, [r2, #0]
 8003fc0:	e00f      	b.n	8003fe2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	015a      	lsls	r2, r3, #5
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	4413      	add	r3, r2
 8003fca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	69ba      	ldr	r2, [r7, #24]
 8003fd2:	0151      	lsls	r1, r2, #5
 8003fd4:	69fa      	ldr	r2, [r7, #28]
 8003fd6:	440a      	add	r2, r1
 8003fd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fe0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	6919      	ldr	r1, [r3, #16]
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	781a      	ldrb	r2, [r3, #0]
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	699b      	ldr	r3, [r3, #24]
 8003fee:	b298      	uxth	r0, r3
 8003ff0:	79fb      	ldrb	r3, [r7, #7]
 8003ff2:	9300      	str	r3, [sp, #0]
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	68f8      	ldr	r0, [r7, #12]
 8003ff8:	f000 fade 	bl	80045b8 <USB_WritePacket>
 8003ffc:	e0d2      	b.n	80041a4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	015a      	lsls	r2, r3, #5
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	4413      	add	r3, r2
 8004006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	69ba      	ldr	r2, [r7, #24]
 800400e:	0151      	lsls	r1, r2, #5
 8004010:	69fa      	ldr	r2, [r7, #28]
 8004012:	440a      	add	r2, r1
 8004014:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004018:	0cdb      	lsrs	r3, r3, #19
 800401a:	04db      	lsls	r3, r3, #19
 800401c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	015a      	lsls	r2, r3, #5
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	4413      	add	r3, r2
 8004026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	69ba      	ldr	r2, [r7, #24]
 800402e:	0151      	lsls	r1, r2, #5
 8004030:	69fa      	ldr	r2, [r7, #28]
 8004032:	440a      	add	r2, r1
 8004034:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004038:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800403c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004040:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	699b      	ldr	r3, [r3, #24]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d126      	bne.n	8004098 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	015a      	lsls	r2, r3, #5
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	4413      	add	r3, r2
 8004052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004056:	691a      	ldr	r2, [r3, #16]
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004060:	69b9      	ldr	r1, [r7, #24]
 8004062:	0148      	lsls	r0, r1, #5
 8004064:	69f9      	ldr	r1, [r7, #28]
 8004066:	4401      	add	r1, r0
 8004068:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800406c:	4313      	orrs	r3, r2
 800406e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	015a      	lsls	r2, r3, #5
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	4413      	add	r3, r2
 8004078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	69ba      	ldr	r2, [r7, #24]
 8004080:	0151      	lsls	r1, r2, #5
 8004082:	69fa      	ldr	r2, [r7, #28]
 8004084:	440a      	add	r2, r1
 8004086:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800408a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800408e:	6113      	str	r3, [r2, #16]
 8004090:	e03a      	b.n	8004108 <USB_EPStartXfer+0x3e4>
 8004092:	bf00      	nop
 8004094:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	699a      	ldr	r2, [r3, #24]
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	4413      	add	r3, r2
 80040a2:	1e5a      	subs	r2, r3, #1
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ac:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	8afa      	ldrh	r2, [r7, #22]
 80040b4:	fb03 f202 	mul.w	r2, r3, r2
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	015a      	lsls	r2, r3, #5
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	4413      	add	r3, r2
 80040c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040c8:	691a      	ldr	r2, [r3, #16]
 80040ca:	8afb      	ldrh	r3, [r7, #22]
 80040cc:	04d9      	lsls	r1, r3, #19
 80040ce:	4b38      	ldr	r3, [pc, #224]	; (80041b0 <USB_EPStartXfer+0x48c>)
 80040d0:	400b      	ands	r3, r1
 80040d2:	69b9      	ldr	r1, [r7, #24]
 80040d4:	0148      	lsls	r0, r1, #5
 80040d6:	69f9      	ldr	r1, [r7, #28]
 80040d8:	4401      	add	r1, r0
 80040da:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80040de:	4313      	orrs	r3, r2
 80040e0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	015a      	lsls	r2, r3, #5
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	4413      	add	r3, r2
 80040ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ee:	691a      	ldr	r2, [r3, #16]
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	69db      	ldr	r3, [r3, #28]
 80040f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040f8:	69b9      	ldr	r1, [r7, #24]
 80040fa:	0148      	lsls	r0, r1, #5
 80040fc:	69f9      	ldr	r1, [r7, #28]
 80040fe:	4401      	add	r1, r0
 8004100:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004104:	4313      	orrs	r3, r2
 8004106:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004108:	79fb      	ldrb	r3, [r7, #7]
 800410a:	2b01      	cmp	r3, #1
 800410c:	d10d      	bne.n	800412a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d009      	beq.n	800412a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	6919      	ldr	r1, [r3, #16]
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	015a      	lsls	r2, r3, #5
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	4413      	add	r3, r2
 8004122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004126:	460a      	mov	r2, r1
 8004128:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	791b      	ldrb	r3, [r3, #4]
 800412e:	2b01      	cmp	r3, #1
 8004130:	d128      	bne.n	8004184 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800413e:	2b00      	cmp	r3, #0
 8004140:	d110      	bne.n	8004164 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	015a      	lsls	r2, r3, #5
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	4413      	add	r3, r2
 800414a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	69ba      	ldr	r2, [r7, #24]
 8004152:	0151      	lsls	r1, r2, #5
 8004154:	69fa      	ldr	r2, [r7, #28]
 8004156:	440a      	add	r2, r1
 8004158:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800415c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004160:	6013      	str	r3, [r2, #0]
 8004162:	e00f      	b.n	8004184 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	015a      	lsls	r2, r3, #5
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	4413      	add	r3, r2
 800416c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	69ba      	ldr	r2, [r7, #24]
 8004174:	0151      	lsls	r1, r2, #5
 8004176:	69fa      	ldr	r2, [r7, #28]
 8004178:	440a      	add	r2, r1
 800417a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800417e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004182:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	015a      	lsls	r2, r3, #5
 8004188:	69fb      	ldr	r3, [r7, #28]
 800418a:	4413      	add	r3, r2
 800418c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	69ba      	ldr	r2, [r7, #24]
 8004194:	0151      	lsls	r1, r2, #5
 8004196:	69fa      	ldr	r2, [r7, #28]
 8004198:	440a      	add	r2, r1
 800419a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800419e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80041a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3720      	adds	r7, #32
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	1ff80000 	.word	0x1ff80000

080041b4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b087      	sub	sp, #28
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	4613      	mov	r3, r2
 80041c0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	785b      	ldrb	r3, [r3, #1]
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	f040 80ce 	bne.w	8004372 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	699b      	ldr	r3, [r3, #24]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d132      	bne.n	8004244 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	015a      	lsls	r2, r3, #5
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	4413      	add	r3, r2
 80041e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041ea:	691b      	ldr	r3, [r3, #16]
 80041ec:	693a      	ldr	r2, [r7, #16]
 80041ee:	0151      	lsls	r1, r2, #5
 80041f0:	697a      	ldr	r2, [r7, #20]
 80041f2:	440a      	add	r2, r1
 80041f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041f8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80041fc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004200:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	015a      	lsls	r2, r3, #5
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	4413      	add	r3, r2
 800420a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800420e:	691b      	ldr	r3, [r3, #16]
 8004210:	693a      	ldr	r2, [r7, #16]
 8004212:	0151      	lsls	r1, r2, #5
 8004214:	697a      	ldr	r2, [r7, #20]
 8004216:	440a      	add	r2, r1
 8004218:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800421c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004220:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	015a      	lsls	r2, r3, #5
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	4413      	add	r3, r2
 800422a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800422e:	691b      	ldr	r3, [r3, #16]
 8004230:	693a      	ldr	r2, [r7, #16]
 8004232:	0151      	lsls	r1, r2, #5
 8004234:	697a      	ldr	r2, [r7, #20]
 8004236:	440a      	add	r2, r1
 8004238:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800423c:	0cdb      	lsrs	r3, r3, #19
 800423e:	04db      	lsls	r3, r3, #19
 8004240:	6113      	str	r3, [r2, #16]
 8004242:	e04e      	b.n	80042e2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	015a      	lsls	r2, r3, #5
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	4413      	add	r3, r2
 800424c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	693a      	ldr	r2, [r7, #16]
 8004254:	0151      	lsls	r1, r2, #5
 8004256:	697a      	ldr	r2, [r7, #20]
 8004258:	440a      	add	r2, r1
 800425a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800425e:	0cdb      	lsrs	r3, r3, #19
 8004260:	04db      	lsls	r3, r3, #19
 8004262:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	015a      	lsls	r2, r3, #5
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	4413      	add	r3, r2
 800426c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	693a      	ldr	r2, [r7, #16]
 8004274:	0151      	lsls	r1, r2, #5
 8004276:	697a      	ldr	r2, [r7, #20]
 8004278:	440a      	add	r2, r1
 800427a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800427e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004282:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004286:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	699a      	ldr	r2, [r3, #24]
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	429a      	cmp	r2, r3
 8004292:	d903      	bls.n	800429c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	68da      	ldr	r2, [r3, #12]
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	015a      	lsls	r2, r3, #5
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	4413      	add	r3, r2
 80042a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	693a      	ldr	r2, [r7, #16]
 80042ac:	0151      	lsls	r1, r2, #5
 80042ae:	697a      	ldr	r2, [r7, #20]
 80042b0:	440a      	add	r2, r1
 80042b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80042ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	015a      	lsls	r2, r3, #5
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	4413      	add	r3, r2
 80042c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042c8:	691a      	ldr	r2, [r3, #16]
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042d2:	6939      	ldr	r1, [r7, #16]
 80042d4:	0148      	lsls	r0, r1, #5
 80042d6:	6979      	ldr	r1, [r7, #20]
 80042d8:	4401      	add	r1, r0
 80042da:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80042de:	4313      	orrs	r3, r2
 80042e0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80042e2:	79fb      	ldrb	r3, [r7, #7]
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d11e      	bne.n	8004326 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	695b      	ldr	r3, [r3, #20]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d009      	beq.n	8004304 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	015a      	lsls	r2, r3, #5
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	4413      	add	r3, r2
 80042f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042fc:	461a      	mov	r2, r3
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	015a      	lsls	r2, r3, #5
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	4413      	add	r3, r2
 800430c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	693a      	ldr	r2, [r7, #16]
 8004314:	0151      	lsls	r1, r2, #5
 8004316:	697a      	ldr	r2, [r7, #20]
 8004318:	440a      	add	r2, r1
 800431a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800431e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004322:	6013      	str	r3, [r2, #0]
 8004324:	e097      	b.n	8004456 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	015a      	lsls	r2, r3, #5
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	4413      	add	r3, r2
 800432e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	0151      	lsls	r1, r2, #5
 8004338:	697a      	ldr	r2, [r7, #20]
 800433a:	440a      	add	r2, r1
 800433c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004340:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004344:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	699b      	ldr	r3, [r3, #24]
 800434a:	2b00      	cmp	r3, #0
 800434c:	f000 8083 	beq.w	8004456 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004356:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	f003 030f 	and.w	r3, r3, #15
 8004360:	2101      	movs	r1, #1
 8004362:	fa01 f303 	lsl.w	r3, r1, r3
 8004366:	6979      	ldr	r1, [r7, #20]
 8004368:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800436c:	4313      	orrs	r3, r2
 800436e:	634b      	str	r3, [r1, #52]	; 0x34
 8004370:	e071      	b.n	8004456 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	015a      	lsls	r2, r3, #5
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	4413      	add	r3, r2
 800437a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	693a      	ldr	r2, [r7, #16]
 8004382:	0151      	lsls	r1, r2, #5
 8004384:	697a      	ldr	r2, [r7, #20]
 8004386:	440a      	add	r2, r1
 8004388:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800438c:	0cdb      	lsrs	r3, r3, #19
 800438e:	04db      	lsls	r3, r3, #19
 8004390:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	015a      	lsls	r2, r3, #5
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	4413      	add	r3, r2
 800439a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800439e:	691b      	ldr	r3, [r3, #16]
 80043a0:	693a      	ldr	r2, [r7, #16]
 80043a2:	0151      	lsls	r1, r2, #5
 80043a4:	697a      	ldr	r2, [r7, #20]
 80043a6:	440a      	add	r2, r1
 80043a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043ac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80043b0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80043b4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d003      	beq.n	80043c6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	68da      	ldr	r2, [r3, #12]
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	68da      	ldr	r2, [r3, #12]
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	015a      	lsls	r2, r3, #5
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	4413      	add	r3, r2
 80043d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043da:	691b      	ldr	r3, [r3, #16]
 80043dc:	693a      	ldr	r2, [r7, #16]
 80043de:	0151      	lsls	r1, r2, #5
 80043e0:	697a      	ldr	r2, [r7, #20]
 80043e2:	440a      	add	r2, r1
 80043e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80043ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	015a      	lsls	r2, r3, #5
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	4413      	add	r3, r2
 80043f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043fa:	691a      	ldr	r2, [r3, #16]
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	69db      	ldr	r3, [r3, #28]
 8004400:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004404:	6939      	ldr	r1, [r7, #16]
 8004406:	0148      	lsls	r0, r1, #5
 8004408:	6979      	ldr	r1, [r7, #20]
 800440a:	4401      	add	r1, r0
 800440c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004410:	4313      	orrs	r3, r2
 8004412:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004414:	79fb      	ldrb	r3, [r7, #7]
 8004416:	2b01      	cmp	r3, #1
 8004418:	d10d      	bne.n	8004436 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d009      	beq.n	8004436 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	6919      	ldr	r1, [r3, #16]
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	015a      	lsls	r2, r3, #5
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	4413      	add	r3, r2
 800442e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004432:	460a      	mov	r2, r1
 8004434:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	015a      	lsls	r2, r3, #5
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	4413      	add	r3, r2
 800443e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	693a      	ldr	r2, [r7, #16]
 8004446:	0151      	lsls	r1, r2, #5
 8004448:	697a      	ldr	r2, [r7, #20]
 800444a:	440a      	add	r2, r1
 800444c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004450:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004454:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004456:	2300      	movs	r3, #0
}
 8004458:	4618      	mov	r0, r3
 800445a:	371c      	adds	r7, #28
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004464:	b480      	push	{r7}
 8004466:	b087      	sub	sp, #28
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800446e:	2300      	movs	r3, #0
 8004470:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004472:	2300      	movs	r3, #0
 8004474:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	785b      	ldrb	r3, [r3, #1]
 800447e:	2b01      	cmp	r3, #1
 8004480:	d14a      	bne.n	8004518 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	015a      	lsls	r2, r3, #5
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	4413      	add	r3, r2
 800448c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004496:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800449a:	f040 8086 	bne.w	80045aa <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	015a      	lsls	r2, r3, #5
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	4413      	add	r3, r2
 80044a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	683a      	ldr	r2, [r7, #0]
 80044b0:	7812      	ldrb	r2, [r2, #0]
 80044b2:	0151      	lsls	r1, r2, #5
 80044b4:	693a      	ldr	r2, [r7, #16]
 80044b6:	440a      	add	r2, r1
 80044b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044bc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80044c0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	015a      	lsls	r2, r3, #5
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	4413      	add	r3, r2
 80044cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	683a      	ldr	r2, [r7, #0]
 80044d4:	7812      	ldrb	r2, [r2, #0]
 80044d6:	0151      	lsls	r1, r2, #5
 80044d8:	693a      	ldr	r2, [r7, #16]
 80044da:	440a      	add	r2, r1
 80044dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80044e4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	3301      	adds	r3, #1
 80044ea:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f242 7210 	movw	r2, #10000	; 0x2710
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d902      	bls.n	80044fc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	75fb      	strb	r3, [r7, #23]
          break;
 80044fa:	e056      	b.n	80045aa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	015a      	lsls	r2, r3, #5
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	4413      	add	r3, r2
 8004506:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004510:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004514:	d0e7      	beq.n	80044e6 <USB_EPStopXfer+0x82>
 8004516:	e048      	b.n	80045aa <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	015a      	lsls	r2, r3, #5
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	4413      	add	r3, r2
 8004522:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800452c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004530:	d13b      	bne.n	80045aa <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	015a      	lsls	r2, r3, #5
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	4413      	add	r3, r2
 800453c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	683a      	ldr	r2, [r7, #0]
 8004544:	7812      	ldrb	r2, [r2, #0]
 8004546:	0151      	lsls	r1, r2, #5
 8004548:	693a      	ldr	r2, [r7, #16]
 800454a:	440a      	add	r2, r1
 800454c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004550:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004554:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	781b      	ldrb	r3, [r3, #0]
 800455a:	015a      	lsls	r2, r3, #5
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	4413      	add	r3, r2
 8004560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	683a      	ldr	r2, [r7, #0]
 8004568:	7812      	ldrb	r2, [r2, #0]
 800456a:	0151      	lsls	r1, r2, #5
 800456c:	693a      	ldr	r2, [r7, #16]
 800456e:	440a      	add	r2, r1
 8004570:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004574:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004578:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	3301      	adds	r3, #1
 800457e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f242 7210 	movw	r2, #10000	; 0x2710
 8004586:	4293      	cmp	r3, r2
 8004588:	d902      	bls.n	8004590 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	75fb      	strb	r3, [r7, #23]
          break;
 800458e:	e00c      	b.n	80045aa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	015a      	lsls	r2, r3, #5
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	4413      	add	r3, r2
 800459a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045a8:	d0e7      	beq.n	800457a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80045aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	371c      	adds	r7, #28
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b089      	sub	sp, #36	; 0x24
 80045bc:	af00      	add	r7, sp, #0
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	4611      	mov	r1, r2
 80045c4:	461a      	mov	r2, r3
 80045c6:	460b      	mov	r3, r1
 80045c8:	71fb      	strb	r3, [r7, #7]
 80045ca:	4613      	mov	r3, r2
 80045cc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80045d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d123      	bne.n	8004626 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80045de:	88bb      	ldrh	r3, [r7, #4]
 80045e0:	3303      	adds	r3, #3
 80045e2:	089b      	lsrs	r3, r3, #2
 80045e4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80045e6:	2300      	movs	r3, #0
 80045e8:	61bb      	str	r3, [r7, #24]
 80045ea:	e018      	b.n	800461e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80045ec:	79fb      	ldrb	r3, [r7, #7]
 80045ee:	031a      	lsls	r2, r3, #12
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	4413      	add	r3, r2
 80045f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045f8:	461a      	mov	r2, r3
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	3301      	adds	r3, #1
 8004604:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	3301      	adds	r3, #1
 800460a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	3301      	adds	r3, #1
 8004610:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	3301      	adds	r3, #1
 8004616:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004618:	69bb      	ldr	r3, [r7, #24]
 800461a:	3301      	adds	r3, #1
 800461c:	61bb      	str	r3, [r7, #24]
 800461e:	69ba      	ldr	r2, [r7, #24]
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	429a      	cmp	r2, r3
 8004624:	d3e2      	bcc.n	80045ec <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004626:	2300      	movs	r3, #0
}
 8004628:	4618      	mov	r0, r3
 800462a:	3724      	adds	r7, #36	; 0x24
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004634:	b480      	push	{r7}
 8004636:	b08b      	sub	sp, #44	; 0x2c
 8004638:	af00      	add	r7, sp, #0
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	4613      	mov	r3, r2
 8004640:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800464a:	88fb      	ldrh	r3, [r7, #6]
 800464c:	089b      	lsrs	r3, r3, #2
 800464e:	b29b      	uxth	r3, r3
 8004650:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004652:	88fb      	ldrh	r3, [r7, #6]
 8004654:	f003 0303 	and.w	r3, r3, #3
 8004658:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800465a:	2300      	movs	r3, #0
 800465c:	623b      	str	r3, [r7, #32]
 800465e:	e014      	b.n	800468a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004660:	69bb      	ldr	r3, [r7, #24]
 8004662:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466a:	601a      	str	r2, [r3, #0]
    pDest++;
 800466c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466e:	3301      	adds	r3, #1
 8004670:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004674:	3301      	adds	r3, #1
 8004676:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467a:	3301      	adds	r3, #1
 800467c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800467e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004680:	3301      	adds	r3, #1
 8004682:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004684:	6a3b      	ldr	r3, [r7, #32]
 8004686:	3301      	adds	r3, #1
 8004688:	623b      	str	r3, [r7, #32]
 800468a:	6a3a      	ldr	r2, [r7, #32]
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	429a      	cmp	r2, r3
 8004690:	d3e6      	bcc.n	8004660 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004692:	8bfb      	ldrh	r3, [r7, #30]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d01e      	beq.n	80046d6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004698:	2300      	movs	r3, #0
 800469a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046a2:	461a      	mov	r2, r3
 80046a4:	f107 0310 	add.w	r3, r7, #16
 80046a8:	6812      	ldr	r2, [r2, #0]
 80046aa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80046ac:	693a      	ldr	r2, [r7, #16]
 80046ae:	6a3b      	ldr	r3, [r7, #32]
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	00db      	lsls	r3, r3, #3
 80046b4:	fa22 f303 	lsr.w	r3, r2, r3
 80046b8:	b2da      	uxtb	r2, r3
 80046ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046bc:	701a      	strb	r2, [r3, #0]
      i++;
 80046be:	6a3b      	ldr	r3, [r7, #32]
 80046c0:	3301      	adds	r3, #1
 80046c2:	623b      	str	r3, [r7, #32]
      pDest++;
 80046c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c6:	3301      	adds	r3, #1
 80046c8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80046ca:	8bfb      	ldrh	r3, [r7, #30]
 80046cc:	3b01      	subs	r3, #1
 80046ce:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80046d0:	8bfb      	ldrh	r3, [r7, #30]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d1ea      	bne.n	80046ac <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80046d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80046d8:	4618      	mov	r0, r3
 80046da:	372c      	adds	r7, #44	; 0x2c
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b085      	sub	sp, #20
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	785b      	ldrb	r3, [r3, #1]
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d12c      	bne.n	800475a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	015a      	lsls	r2, r3, #5
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	4413      	add	r3, r2
 8004708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2b00      	cmp	r3, #0
 8004710:	db12      	blt.n	8004738 <USB_EPSetStall+0x54>
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d00f      	beq.n	8004738 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	015a      	lsls	r2, r3, #5
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	4413      	add	r3, r2
 8004720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	68ba      	ldr	r2, [r7, #8]
 8004728:	0151      	lsls	r1, r2, #5
 800472a:	68fa      	ldr	r2, [r7, #12]
 800472c:	440a      	add	r2, r1
 800472e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004732:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004736:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	015a      	lsls	r2, r3, #5
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	4413      	add	r3, r2
 8004740:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	68ba      	ldr	r2, [r7, #8]
 8004748:	0151      	lsls	r1, r2, #5
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	440a      	add	r2, r1
 800474e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004752:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004756:	6013      	str	r3, [r2, #0]
 8004758:	e02b      	b.n	80047b2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	015a      	lsls	r2, r3, #5
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	4413      	add	r3, r2
 8004762:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2b00      	cmp	r3, #0
 800476a:	db12      	blt.n	8004792 <USB_EPSetStall+0xae>
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00f      	beq.n	8004792 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	015a      	lsls	r2, r3, #5
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	4413      	add	r3, r2
 800477a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68ba      	ldr	r2, [r7, #8]
 8004782:	0151      	lsls	r1, r2, #5
 8004784:	68fa      	ldr	r2, [r7, #12]
 8004786:	440a      	add	r2, r1
 8004788:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800478c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004790:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	015a      	lsls	r2, r3, #5
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	4413      	add	r3, r2
 800479a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	68ba      	ldr	r2, [r7, #8]
 80047a2:	0151      	lsls	r1, r2, #5
 80047a4:	68fa      	ldr	r2, [r7, #12]
 80047a6:	440a      	add	r2, r1
 80047a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80047b0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3714      	adds	r7, #20
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b085      	sub	sp, #20
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	785b      	ldrb	r3, [r3, #1]
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d128      	bne.n	800482e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	015a      	lsls	r2, r3, #5
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	4413      	add	r3, r2
 80047e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68ba      	ldr	r2, [r7, #8]
 80047ec:	0151      	lsls	r1, r2, #5
 80047ee:	68fa      	ldr	r2, [r7, #12]
 80047f0:	440a      	add	r2, r1
 80047f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80047fa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	791b      	ldrb	r3, [r3, #4]
 8004800:	2b03      	cmp	r3, #3
 8004802:	d003      	beq.n	800480c <USB_EPClearStall+0x4c>
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	791b      	ldrb	r3, [r3, #4]
 8004808:	2b02      	cmp	r3, #2
 800480a:	d138      	bne.n	800487e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	015a      	lsls	r2, r3, #5
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	4413      	add	r3, r2
 8004814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	68ba      	ldr	r2, [r7, #8]
 800481c:	0151      	lsls	r1, r2, #5
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	440a      	add	r2, r1
 8004822:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004826:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800482a:	6013      	str	r3, [r2, #0]
 800482c:	e027      	b.n	800487e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	015a      	lsls	r2, r3, #5
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	4413      	add	r3, r2
 8004836:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68ba      	ldr	r2, [r7, #8]
 800483e:	0151      	lsls	r1, r2, #5
 8004840:	68fa      	ldr	r2, [r7, #12]
 8004842:	440a      	add	r2, r1
 8004844:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004848:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800484c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	791b      	ldrb	r3, [r3, #4]
 8004852:	2b03      	cmp	r3, #3
 8004854:	d003      	beq.n	800485e <USB_EPClearStall+0x9e>
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	791b      	ldrb	r3, [r3, #4]
 800485a:	2b02      	cmp	r3, #2
 800485c:	d10f      	bne.n	800487e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	015a      	lsls	r2, r3, #5
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	4413      	add	r3, r2
 8004866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	68ba      	ldr	r2, [r7, #8]
 800486e:	0151      	lsls	r1, r2, #5
 8004870:	68fa      	ldr	r2, [r7, #12]
 8004872:	440a      	add	r2, r1
 8004874:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800487c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800487e:	2300      	movs	r3, #0
}
 8004880:	4618      	mov	r0, r3
 8004882:	3714      	adds	r7, #20
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr

0800488c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	460b      	mov	r3, r1
 8004896:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68fa      	ldr	r2, [r7, #12]
 80048a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048aa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80048ae:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	78fb      	ldrb	r3, [r7, #3]
 80048ba:	011b      	lsls	r3, r3, #4
 80048bc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80048c0:	68f9      	ldr	r1, [r7, #12]
 80048c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048c6:	4313      	orrs	r3, r2
 80048c8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80048ca:	2300      	movs	r3, #0
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3714      	adds	r7, #20
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80048d8:	b480      	push	{r7}
 80048da:	b085      	sub	sp, #20
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	68fa      	ldr	r2, [r7, #12]
 80048ee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80048f2:	f023 0303 	bic.w	r3, r3, #3
 80048f6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	68fa      	ldr	r2, [r7, #12]
 8004902:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004906:	f023 0302 	bic.w	r3, r3, #2
 800490a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	3714      	adds	r7, #20
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr

0800491a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800491a:	b480      	push	{r7}
 800491c:	b085      	sub	sp, #20
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68fa      	ldr	r2, [r7, #12]
 8004930:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004934:	f023 0303 	bic.w	r3, r3, #3
 8004938:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	68fa      	ldr	r2, [r7, #12]
 8004944:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004948:	f043 0302 	orr.w	r3, r3, #2
 800494c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800494e:	2300      	movs	r3, #0
}
 8004950:	4618      	mov	r0, r3
 8004952:	3714      	adds	r7, #20
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800495c:	b480      	push	{r7}
 800495e:	b085      	sub	sp, #20
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	695b      	ldr	r3, [r3, #20]
 8004968:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	699b      	ldr	r3, [r3, #24]
 800496e:	68fa      	ldr	r2, [r7, #12]
 8004970:	4013      	ands	r3, r2
 8004972:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004974:	68fb      	ldr	r3, [r7, #12]
}
 8004976:	4618      	mov	r0, r3
 8004978:	3714      	adds	r7, #20
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr

08004982 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004982:	b480      	push	{r7}
 8004984:	b085      	sub	sp, #20
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004994:	699b      	ldr	r3, [r3, #24]
 8004996:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800499e:	69db      	ldr	r3, [r3, #28]
 80049a0:	68ba      	ldr	r2, [r7, #8]
 80049a2:	4013      	ands	r3, r2
 80049a4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	0c1b      	lsrs	r3, r3, #16
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3714      	adds	r7, #20
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr

080049b6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80049b6:	b480      	push	{r7}
 80049b8:	b085      	sub	sp, #20
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049c8:	699b      	ldr	r3, [r3, #24]
 80049ca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049d2:	69db      	ldr	r3, [r3, #28]
 80049d4:	68ba      	ldr	r2, [r7, #8]
 80049d6:	4013      	ands	r3, r2
 80049d8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	b29b      	uxth	r3, r3
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3714      	adds	r7, #20
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr

080049ea <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80049ea:	b480      	push	{r7}
 80049ec:	b085      	sub	sp, #20
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
 80049f2:	460b      	mov	r3, r1
 80049f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80049fa:	78fb      	ldrb	r3, [r7, #3]
 80049fc:	015a      	lsls	r2, r3, #5
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	4413      	add	r3, r2
 8004a02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a10:	695b      	ldr	r3, [r3, #20]
 8004a12:	68ba      	ldr	r2, [r7, #8]
 8004a14:	4013      	ands	r3, r2
 8004a16:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004a18:	68bb      	ldr	r3, [r7, #8]
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3714      	adds	r7, #20
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr

08004a26 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004a26:	b480      	push	{r7}
 8004a28:	b087      	sub	sp, #28
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
 8004a2e:	460b      	mov	r3, r1
 8004a30:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a48:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004a4a:	78fb      	ldrb	r3, [r7, #3]
 8004a4c:	f003 030f 	and.w	r3, r3, #15
 8004a50:	68fa      	ldr	r2, [r7, #12]
 8004a52:	fa22 f303 	lsr.w	r3, r2, r3
 8004a56:	01db      	lsls	r3, r3, #7
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	693a      	ldr	r2, [r7, #16]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004a60:	78fb      	ldrb	r3, [r7, #3]
 8004a62:	015a      	lsls	r2, r3, #5
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	4413      	add	r3, r2
 8004a68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	693a      	ldr	r2, [r7, #16]
 8004a70:	4013      	ands	r3, r2
 8004a72:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004a74:	68bb      	ldr	r3, [r7, #8]
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	371c      	adds	r7, #28
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr

08004a82 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004a82:	b480      	push	{r7}
 8004a84:	b083      	sub	sp, #12
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	695b      	ldr	r3, [r3, #20]
 8004a8e:	f003 0301 	and.w	r3, r3, #1
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	370c      	adds	r7, #12
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr

08004a9e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004a9e:	b480      	push	{r7}
 8004aa0:	b085      	sub	sp, #20
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ab8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004abc:	f023 0307 	bic.w	r3, r3, #7
 8004ac0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ad0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ad4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004ad6:	2300      	movs	r3, #0
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3714      	adds	r7, #20
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b087      	sub	sp, #28
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	460b      	mov	r3, r1
 8004aee:	607a      	str	r2, [r7, #4]
 8004af0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	333c      	adds	r3, #60	; 0x3c
 8004afa:	3304      	adds	r3, #4
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	4a26      	ldr	r2, [pc, #152]	; (8004b9c <USB_EP0_OutStart+0xb8>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d90a      	bls.n	8004b1e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b18:	d101      	bne.n	8004b1e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	e037      	b.n	8004b8e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b24:	461a      	mov	r2, r3
 8004b26:	2300      	movs	r3, #0
 8004b28:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	697a      	ldr	r2, [r7, #20]
 8004b34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b38:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b3c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	697a      	ldr	r2, [r7, #20]
 8004b48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b4c:	f043 0318 	orr.w	r3, r3, #24
 8004b50:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	697a      	ldr	r2, [r7, #20]
 8004b5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b60:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004b64:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004b66:	7afb      	ldrb	r3, [r7, #11]
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d10f      	bne.n	8004b8c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b72:	461a      	mov	r2, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	697a      	ldr	r2, [r7, #20]
 8004b82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b86:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004b8a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004b8c:	2300      	movs	r3, #0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	371c      	adds	r7, #28
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop
 8004b9c:	4f54300a 	.word	0x4f54300a

08004ba0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b085      	sub	sp, #20
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	3301      	adds	r3, #1
 8004bb0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	4a13      	ldr	r2, [pc, #76]	; (8004c04 <USB_CoreReset+0x64>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d901      	bls.n	8004bbe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e01b      	b.n	8004bf6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	daf2      	bge.n	8004bac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	f043 0201 	orr.w	r2, r3, #1
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	3301      	adds	r3, #1
 8004bda:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	4a09      	ldr	r2, [pc, #36]	; (8004c04 <USB_CoreReset+0x64>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d901      	bls.n	8004be8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004be4:	2303      	movs	r3, #3
 8004be6:	e006      	b.n	8004bf6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	691b      	ldr	r3, [r3, #16]
 8004bec:	f003 0301 	and.w	r3, r3, #1
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d0f0      	beq.n	8004bd6 <USB_CoreReset+0x36>

  return HAL_OK;
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3714      	adds	r7, #20
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop
 8004c04:	00030d40 	.word	0x00030d40

08004c08 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	460b      	mov	r3, r1
 8004c12:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004c14:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004c18:	f005 fa56 	bl	800a0c8 <USBD_static_malloc>
 8004c1c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d109      	bne.n	8004c38 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	32b0      	adds	r2, #176	; 0xb0
 8004c2e:	2100      	movs	r1, #0
 8004c30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004c34:	2302      	movs	r3, #2
 8004c36:	e0d4      	b.n	8004de2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004c38:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004c3c:	2100      	movs	r1, #0
 8004c3e:	68f8      	ldr	r0, [r7, #12]
 8004c40:	f005 faba 	bl	800a1b8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	32b0      	adds	r2, #176	; 0xb0
 8004c4e:	68f9      	ldr	r1, [r7, #12]
 8004c50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	32b0      	adds	r2, #176	; 0xb0
 8004c5e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	7c1b      	ldrb	r3, [r3, #16]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d138      	bne.n	8004ce2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004c70:	4b5e      	ldr	r3, [pc, #376]	; (8004dec <USBD_CDC_Init+0x1e4>)
 8004c72:	7819      	ldrb	r1, [r3, #0]
 8004c74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c78:	2202      	movs	r2, #2
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f005 f901 	bl	8009e82 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004c80:	4b5a      	ldr	r3, [pc, #360]	; (8004dec <USBD_CDC_Init+0x1e4>)
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	f003 020f 	and.w	r2, r3, #15
 8004c88:	6879      	ldr	r1, [r7, #4]
 8004c8a:	4613      	mov	r3, r2
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	4413      	add	r3, r2
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	440b      	add	r3, r1
 8004c94:	3324      	adds	r3, #36	; 0x24
 8004c96:	2201      	movs	r2, #1
 8004c98:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004c9a:	4b55      	ldr	r3, [pc, #340]	; (8004df0 <USBD_CDC_Init+0x1e8>)
 8004c9c:	7819      	ldrb	r1, [r3, #0]
 8004c9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ca2:	2202      	movs	r2, #2
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f005 f8ec 	bl	8009e82 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004caa:	4b51      	ldr	r3, [pc, #324]	; (8004df0 <USBD_CDC_Init+0x1e8>)
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	f003 020f 	and.w	r2, r3, #15
 8004cb2:	6879      	ldr	r1, [r7, #4]
 8004cb4:	4613      	mov	r3, r2
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	4413      	add	r3, r2
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	440b      	add	r3, r1
 8004cbe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004cc6:	4b4b      	ldr	r3, [pc, #300]	; (8004df4 <USBD_CDC_Init+0x1ec>)
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	f003 020f 	and.w	r2, r3, #15
 8004cce:	6879      	ldr	r1, [r7, #4]
 8004cd0:	4613      	mov	r3, r2
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	4413      	add	r3, r2
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	440b      	add	r3, r1
 8004cda:	3326      	adds	r3, #38	; 0x26
 8004cdc:	2210      	movs	r2, #16
 8004cde:	801a      	strh	r2, [r3, #0]
 8004ce0:	e035      	b.n	8004d4e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004ce2:	4b42      	ldr	r3, [pc, #264]	; (8004dec <USBD_CDC_Init+0x1e4>)
 8004ce4:	7819      	ldrb	r1, [r3, #0]
 8004ce6:	2340      	movs	r3, #64	; 0x40
 8004ce8:	2202      	movs	r2, #2
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f005 f8c9 	bl	8009e82 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004cf0:	4b3e      	ldr	r3, [pc, #248]	; (8004dec <USBD_CDC_Init+0x1e4>)
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	f003 020f 	and.w	r2, r3, #15
 8004cf8:	6879      	ldr	r1, [r7, #4]
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	4413      	add	r3, r2
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	440b      	add	r3, r1
 8004d04:	3324      	adds	r3, #36	; 0x24
 8004d06:	2201      	movs	r2, #1
 8004d08:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004d0a:	4b39      	ldr	r3, [pc, #228]	; (8004df0 <USBD_CDC_Init+0x1e8>)
 8004d0c:	7819      	ldrb	r1, [r3, #0]
 8004d0e:	2340      	movs	r3, #64	; 0x40
 8004d10:	2202      	movs	r2, #2
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f005 f8b5 	bl	8009e82 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004d18:	4b35      	ldr	r3, [pc, #212]	; (8004df0 <USBD_CDC_Init+0x1e8>)
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	f003 020f 	and.w	r2, r3, #15
 8004d20:	6879      	ldr	r1, [r7, #4]
 8004d22:	4613      	mov	r3, r2
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	4413      	add	r3, r2
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	440b      	add	r3, r1
 8004d2c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004d30:	2201      	movs	r2, #1
 8004d32:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004d34:	4b2f      	ldr	r3, [pc, #188]	; (8004df4 <USBD_CDC_Init+0x1ec>)
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	f003 020f 	and.w	r2, r3, #15
 8004d3c:	6879      	ldr	r1, [r7, #4]
 8004d3e:	4613      	mov	r3, r2
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	4413      	add	r3, r2
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	440b      	add	r3, r1
 8004d48:	3326      	adds	r3, #38	; 0x26
 8004d4a:	2210      	movs	r2, #16
 8004d4c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004d4e:	4b29      	ldr	r3, [pc, #164]	; (8004df4 <USBD_CDC_Init+0x1ec>)
 8004d50:	7819      	ldrb	r1, [r3, #0]
 8004d52:	2308      	movs	r3, #8
 8004d54:	2203      	movs	r2, #3
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f005 f893 	bl	8009e82 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004d5c:	4b25      	ldr	r3, [pc, #148]	; (8004df4 <USBD_CDC_Init+0x1ec>)
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	f003 020f 	and.w	r2, r3, #15
 8004d64:	6879      	ldr	r1, [r7, #4]
 8004d66:	4613      	mov	r3, r2
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	4413      	add	r3, r2
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	440b      	add	r3, r1
 8004d70:	3324      	adds	r3, #36	; 0x24
 8004d72:	2201      	movs	r2, #1
 8004d74:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	33b0      	adds	r3, #176	; 0xb0
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	4413      	add	r3, r2
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d101      	bne.n	8004db0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8004dac:	2302      	movs	r3, #2
 8004dae:	e018      	b.n	8004de2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	7c1b      	ldrb	r3, [r3, #16]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d10a      	bne.n	8004dce <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004db8:	4b0d      	ldr	r3, [pc, #52]	; (8004df0 <USBD_CDC_Init+0x1e8>)
 8004dba:	7819      	ldrb	r1, [r3, #0]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004dc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f005 f94a 	bl	800a060 <USBD_LL_PrepareReceive>
 8004dcc:	e008      	b.n	8004de0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004dce:	4b08      	ldr	r3, [pc, #32]	; (8004df0 <USBD_CDC_Init+0x1e8>)
 8004dd0:	7819      	ldrb	r1, [r3, #0]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004dd8:	2340      	movs	r3, #64	; 0x40
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f005 f940 	bl	800a060 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004de0:	2300      	movs	r3, #0
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3710      	adds	r7, #16
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	bf00      	nop
 8004dec:	20000093 	.word	0x20000093
 8004df0:	20000094 	.word	0x20000094
 8004df4:	20000095 	.word	0x20000095

08004df8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	460b      	mov	r3, r1
 8004e02:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8004e04:	4b3a      	ldr	r3, [pc, #232]	; (8004ef0 <USBD_CDC_DeInit+0xf8>)
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	4619      	mov	r1, r3
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f005 f85f 	bl	8009ece <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8004e10:	4b37      	ldr	r3, [pc, #220]	; (8004ef0 <USBD_CDC_DeInit+0xf8>)
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	f003 020f 	and.w	r2, r3, #15
 8004e18:	6879      	ldr	r1, [r7, #4]
 8004e1a:	4613      	mov	r3, r2
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	4413      	add	r3, r2
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	440b      	add	r3, r1
 8004e24:	3324      	adds	r3, #36	; 0x24
 8004e26:	2200      	movs	r2, #0
 8004e28:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8004e2a:	4b32      	ldr	r3, [pc, #200]	; (8004ef4 <USBD_CDC_DeInit+0xfc>)
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	4619      	mov	r1, r3
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f005 f84c 	bl	8009ece <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8004e36:	4b2f      	ldr	r3, [pc, #188]	; (8004ef4 <USBD_CDC_DeInit+0xfc>)
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	f003 020f 	and.w	r2, r3, #15
 8004e3e:	6879      	ldr	r1, [r7, #4]
 8004e40:	4613      	mov	r3, r2
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	4413      	add	r3, r2
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	440b      	add	r3, r1
 8004e4a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004e4e:	2200      	movs	r2, #0
 8004e50:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8004e52:	4b29      	ldr	r3, [pc, #164]	; (8004ef8 <USBD_CDC_DeInit+0x100>)
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	4619      	mov	r1, r3
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f005 f838 	bl	8009ece <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8004e5e:	4b26      	ldr	r3, [pc, #152]	; (8004ef8 <USBD_CDC_DeInit+0x100>)
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	f003 020f 	and.w	r2, r3, #15
 8004e66:	6879      	ldr	r1, [r7, #4]
 8004e68:	4613      	mov	r3, r2
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	4413      	add	r3, r2
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	440b      	add	r3, r1
 8004e72:	3324      	adds	r3, #36	; 0x24
 8004e74:	2200      	movs	r2, #0
 8004e76:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8004e78:	4b1f      	ldr	r3, [pc, #124]	; (8004ef8 <USBD_CDC_DeInit+0x100>)
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	f003 020f 	and.w	r2, r3, #15
 8004e80:	6879      	ldr	r1, [r7, #4]
 8004e82:	4613      	mov	r3, r2
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	4413      	add	r3, r2
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	440b      	add	r3, r1
 8004e8c:	3326      	adds	r3, #38	; 0x26
 8004e8e:	2200      	movs	r2, #0
 8004e90:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	32b0      	adds	r2, #176	; 0xb0
 8004e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d01f      	beq.n	8004ee4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	33b0      	adds	r3, #176	; 0xb0
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	4413      	add	r3, r2
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	32b0      	adds	r2, #176	; 0xb0
 8004ec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f005 f90c 	bl	800a0e4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	32b0      	adds	r2, #176	; 0xb0
 8004ed6:	2100      	movs	r1, #0
 8004ed8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3708      	adds	r7, #8
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	20000093 	.word	0x20000093
 8004ef4:	20000094 	.word	0x20000094
 8004ef8:	20000095 	.word	0x20000095

08004efc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b086      	sub	sp, #24
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	32b0      	adds	r2, #176	; 0xb0
 8004f10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f14:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004f16:	2300      	movs	r3, #0
 8004f18:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d101      	bne.n	8004f2c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8004f28:	2303      	movs	r3, #3
 8004f2a:	e0bf      	b.n	80050ac <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d050      	beq.n	8004fda <USBD_CDC_Setup+0xde>
 8004f38:	2b20      	cmp	r3, #32
 8004f3a:	f040 80af 	bne.w	800509c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	88db      	ldrh	r3, [r3, #6]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d03a      	beq.n	8004fbc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	b25b      	sxtb	r3, r3
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	da1b      	bge.n	8004f88 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	33b0      	adds	r3, #176	; 0xb0
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	4413      	add	r3, r2
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	683a      	ldr	r2, [r7, #0]
 8004f64:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8004f66:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004f68:	683a      	ldr	r2, [r7, #0]
 8004f6a:	88d2      	ldrh	r2, [r2, #6]
 8004f6c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	88db      	ldrh	r3, [r3, #6]
 8004f72:	2b07      	cmp	r3, #7
 8004f74:	bf28      	it	cs
 8004f76:	2307      	movcs	r3, #7
 8004f78:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	89fa      	ldrh	r2, [r7, #14]
 8004f7e:	4619      	mov	r1, r3
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f001 fd89 	bl	8006a98 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8004f86:	e090      	b.n	80050aa <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	785a      	ldrb	r2, [r3, #1]
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	88db      	ldrh	r3, [r3, #6]
 8004f96:	2b3f      	cmp	r3, #63	; 0x3f
 8004f98:	d803      	bhi.n	8004fa2 <USBD_CDC_Setup+0xa6>
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	88db      	ldrh	r3, [r3, #6]
 8004f9e:	b2da      	uxtb	r2, r3
 8004fa0:	e000      	b.n	8004fa4 <USBD_CDC_Setup+0xa8>
 8004fa2:	2240      	movs	r2, #64	; 0x40
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8004faa:	6939      	ldr	r1, [r7, #16]
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f001 fd9b 	bl	8006af0 <USBD_CtlPrepareRx>
      break;
 8004fba:	e076      	b.n	80050aa <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	33b0      	adds	r3, #176	; 0xb0
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	4413      	add	r3, r2
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	683a      	ldr	r2, [r7, #0]
 8004fd0:	7850      	ldrb	r0, [r2, #1]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	6839      	ldr	r1, [r7, #0]
 8004fd6:	4798      	blx	r3
      break;
 8004fd8:	e067      	b.n	80050aa <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	785b      	ldrb	r3, [r3, #1]
 8004fde:	2b0b      	cmp	r3, #11
 8004fe0:	d851      	bhi.n	8005086 <USBD_CDC_Setup+0x18a>
 8004fe2:	a201      	add	r2, pc, #4	; (adr r2, 8004fe8 <USBD_CDC_Setup+0xec>)
 8004fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe8:	08005019 	.word	0x08005019
 8004fec:	08005095 	.word	0x08005095
 8004ff0:	08005087 	.word	0x08005087
 8004ff4:	08005087 	.word	0x08005087
 8004ff8:	08005087 	.word	0x08005087
 8004ffc:	08005087 	.word	0x08005087
 8005000:	08005087 	.word	0x08005087
 8005004:	08005087 	.word	0x08005087
 8005008:	08005087 	.word	0x08005087
 800500c:	08005087 	.word	0x08005087
 8005010:	08005043 	.word	0x08005043
 8005014:	0800506d 	.word	0x0800506d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800501e:	b2db      	uxtb	r3, r3
 8005020:	2b03      	cmp	r3, #3
 8005022:	d107      	bne.n	8005034 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005024:	f107 030a 	add.w	r3, r7, #10
 8005028:	2202      	movs	r2, #2
 800502a:	4619      	mov	r1, r3
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f001 fd33 	bl	8006a98 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005032:	e032      	b.n	800509a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005034:	6839      	ldr	r1, [r7, #0]
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f001 fcbd 	bl	80069b6 <USBD_CtlError>
            ret = USBD_FAIL;
 800503c:	2303      	movs	r3, #3
 800503e:	75fb      	strb	r3, [r7, #23]
          break;
 8005040:	e02b      	b.n	800509a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005048:	b2db      	uxtb	r3, r3
 800504a:	2b03      	cmp	r3, #3
 800504c:	d107      	bne.n	800505e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800504e:	f107 030d 	add.w	r3, r7, #13
 8005052:	2201      	movs	r2, #1
 8005054:	4619      	mov	r1, r3
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f001 fd1e 	bl	8006a98 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800505c:	e01d      	b.n	800509a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800505e:	6839      	ldr	r1, [r7, #0]
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f001 fca8 	bl	80069b6 <USBD_CtlError>
            ret = USBD_FAIL;
 8005066:	2303      	movs	r3, #3
 8005068:	75fb      	strb	r3, [r7, #23]
          break;
 800506a:	e016      	b.n	800509a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005072:	b2db      	uxtb	r3, r3
 8005074:	2b03      	cmp	r3, #3
 8005076:	d00f      	beq.n	8005098 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005078:	6839      	ldr	r1, [r7, #0]
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f001 fc9b 	bl	80069b6 <USBD_CtlError>
            ret = USBD_FAIL;
 8005080:	2303      	movs	r3, #3
 8005082:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005084:	e008      	b.n	8005098 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005086:	6839      	ldr	r1, [r7, #0]
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f001 fc94 	bl	80069b6 <USBD_CtlError>
          ret = USBD_FAIL;
 800508e:	2303      	movs	r3, #3
 8005090:	75fb      	strb	r3, [r7, #23]
          break;
 8005092:	e002      	b.n	800509a <USBD_CDC_Setup+0x19e>
          break;
 8005094:	bf00      	nop
 8005096:	e008      	b.n	80050aa <USBD_CDC_Setup+0x1ae>
          break;
 8005098:	bf00      	nop
      }
      break;
 800509a:	e006      	b.n	80050aa <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800509c:	6839      	ldr	r1, [r7, #0]
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f001 fc89 	bl	80069b6 <USBD_CtlError>
      ret = USBD_FAIL;
 80050a4:	2303      	movs	r3, #3
 80050a6:	75fb      	strb	r3, [r7, #23]
      break;
 80050a8:	bf00      	nop
  }

  return (uint8_t)ret;
 80050aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3718      	adds	r7, #24
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}

080050b4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	460b      	mov	r3, r1
 80050be:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80050c6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	32b0      	adds	r2, #176	; 0xb0
 80050d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d101      	bne.n	80050de <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80050da:	2303      	movs	r3, #3
 80050dc:	e065      	b.n	80051aa <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	32b0      	adds	r2, #176	; 0xb0
 80050e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050ec:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80050ee:	78fb      	ldrb	r3, [r7, #3]
 80050f0:	f003 020f 	and.w	r2, r3, #15
 80050f4:	6879      	ldr	r1, [r7, #4]
 80050f6:	4613      	mov	r3, r2
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	4413      	add	r3, r2
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	440b      	add	r3, r1
 8005100:	3318      	adds	r3, #24
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d02f      	beq.n	8005168 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005108:	78fb      	ldrb	r3, [r7, #3]
 800510a:	f003 020f 	and.w	r2, r3, #15
 800510e:	6879      	ldr	r1, [r7, #4]
 8005110:	4613      	mov	r3, r2
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	4413      	add	r3, r2
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	440b      	add	r3, r1
 800511a:	3318      	adds	r3, #24
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	78fb      	ldrb	r3, [r7, #3]
 8005120:	f003 010f 	and.w	r1, r3, #15
 8005124:	68f8      	ldr	r0, [r7, #12]
 8005126:	460b      	mov	r3, r1
 8005128:	00db      	lsls	r3, r3, #3
 800512a:	440b      	add	r3, r1
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	4403      	add	r3, r0
 8005130:	3348      	adds	r3, #72	; 0x48
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	fbb2 f1f3 	udiv	r1, r2, r3
 8005138:	fb01 f303 	mul.w	r3, r1, r3
 800513c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800513e:	2b00      	cmp	r3, #0
 8005140:	d112      	bne.n	8005168 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005142:	78fb      	ldrb	r3, [r7, #3]
 8005144:	f003 020f 	and.w	r2, r3, #15
 8005148:	6879      	ldr	r1, [r7, #4]
 800514a:	4613      	mov	r3, r2
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	4413      	add	r3, r2
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	440b      	add	r3, r1
 8005154:	3318      	adds	r3, #24
 8005156:	2200      	movs	r2, #0
 8005158:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800515a:	78f9      	ldrb	r1, [r7, #3]
 800515c:	2300      	movs	r3, #0
 800515e:	2200      	movs	r2, #0
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f004 ff5c 	bl	800a01e <USBD_LL_Transmit>
 8005166:	e01f      	b.n	80051a8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	2200      	movs	r2, #0
 800516c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	33b0      	adds	r3, #176	; 0xb0
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	4413      	add	r3, r2
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d010      	beq.n	80051a8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	33b0      	adds	r3, #176	; 0xb0
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	4413      	add	r3, r2
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	691b      	ldr	r3, [r3, #16]
 8005198:	68ba      	ldr	r2, [r7, #8]
 800519a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800519e:	68ba      	ldr	r2, [r7, #8]
 80051a0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80051a4:	78fa      	ldrb	r2, [r7, #3]
 80051a6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3710      	adds	r7, #16
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}

080051b2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80051b2:	b580      	push	{r7, lr}
 80051b4:	b084      	sub	sp, #16
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
 80051ba:	460b      	mov	r3, r1
 80051bc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	32b0      	adds	r2, #176	; 0xb0
 80051c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051cc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	32b0      	adds	r2, #176	; 0xb0
 80051d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d101      	bne.n	80051e4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80051e0:	2303      	movs	r3, #3
 80051e2:	e01a      	b.n	800521a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80051e4:	78fb      	ldrb	r3, [r7, #3]
 80051e6:	4619      	mov	r1, r3
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f004 ff5a 	bl	800a0a2 <USBD_LL_GetRxDataSize>
 80051ee:	4602      	mov	r2, r0
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	33b0      	adds	r3, #176	; 0xb0
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	4413      	add	r3, r2
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800520e:	68fa      	ldr	r2, [r7, #12]
 8005210:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005214:	4611      	mov	r1, r2
 8005216:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3710      	adds	r7, #16
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}

08005222 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005222:	b580      	push	{r7, lr}
 8005224:	b084      	sub	sp, #16
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	32b0      	adds	r2, #176	; 0xb0
 8005234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005238:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d101      	bne.n	8005244 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005240:	2303      	movs	r3, #3
 8005242:	e025      	b.n	8005290 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	33b0      	adds	r3, #176	; 0xb0
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	4413      	add	r3, r2
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d01a      	beq.n	800528e <USBD_CDC_EP0_RxReady+0x6c>
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800525e:	2bff      	cmp	r3, #255	; 0xff
 8005260:	d015      	beq.n	800528e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	33b0      	adds	r3, #176	; 0xb0
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	4413      	add	r3, r2
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800527a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800527c:	68fa      	ldr	r2, [r7, #12]
 800527e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005282:	b292      	uxth	r2, r2
 8005284:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	22ff      	movs	r2, #255	; 0xff
 800528a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800528e:	2300      	movs	r3, #0
}
 8005290:	4618      	mov	r0, r3
 8005292:	3710      	adds	r7, #16
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}

08005298 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b086      	sub	sp, #24
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80052a0:	2182      	movs	r1, #130	; 0x82
 80052a2:	4818      	ldr	r0, [pc, #96]	; (8005304 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80052a4:	f000 fd4f 	bl	8005d46 <USBD_GetEpDesc>
 80052a8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80052aa:	2101      	movs	r1, #1
 80052ac:	4815      	ldr	r0, [pc, #84]	; (8005304 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80052ae:	f000 fd4a 	bl	8005d46 <USBD_GetEpDesc>
 80052b2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80052b4:	2181      	movs	r1, #129	; 0x81
 80052b6:	4813      	ldr	r0, [pc, #76]	; (8005304 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80052b8:	f000 fd45 	bl	8005d46 <USBD_GetEpDesc>
 80052bc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d002      	beq.n	80052ca <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	2210      	movs	r2, #16
 80052c8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d006      	beq.n	80052de <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052d8:	711a      	strb	r2, [r3, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d006      	beq.n	80052f2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2200      	movs	r2, #0
 80052e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052ec:	711a      	strb	r2, [r3, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2243      	movs	r2, #67	; 0x43
 80052f6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80052f8:	4b02      	ldr	r3, [pc, #8]	; (8005304 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3718      	adds	r7, #24
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
 8005302:	bf00      	nop
 8005304:	20000050 	.word	0x20000050

08005308 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b086      	sub	sp, #24
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005310:	2182      	movs	r1, #130	; 0x82
 8005312:	4818      	ldr	r0, [pc, #96]	; (8005374 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005314:	f000 fd17 	bl	8005d46 <USBD_GetEpDesc>
 8005318:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800531a:	2101      	movs	r1, #1
 800531c:	4815      	ldr	r0, [pc, #84]	; (8005374 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800531e:	f000 fd12 	bl	8005d46 <USBD_GetEpDesc>
 8005322:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005324:	2181      	movs	r1, #129	; 0x81
 8005326:	4813      	ldr	r0, [pc, #76]	; (8005374 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005328:	f000 fd0d 	bl	8005d46 <USBD_GetEpDesc>
 800532c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d002      	beq.n	800533a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	2210      	movs	r2, #16
 8005338:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d006      	beq.n	800534e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	2200      	movs	r2, #0
 8005344:	711a      	strb	r2, [r3, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	f042 0202 	orr.w	r2, r2, #2
 800534c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d006      	beq.n	8005362 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2200      	movs	r2, #0
 8005358:	711a      	strb	r2, [r3, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	f042 0202 	orr.w	r2, r2, #2
 8005360:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2243      	movs	r2, #67	; 0x43
 8005366:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005368:	4b02      	ldr	r3, [pc, #8]	; (8005374 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800536a:	4618      	mov	r0, r3
 800536c:	3718      	adds	r7, #24
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	20000050 	.word	0x20000050

08005378 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b086      	sub	sp, #24
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005380:	2182      	movs	r1, #130	; 0x82
 8005382:	4818      	ldr	r0, [pc, #96]	; (80053e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005384:	f000 fcdf 	bl	8005d46 <USBD_GetEpDesc>
 8005388:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800538a:	2101      	movs	r1, #1
 800538c:	4815      	ldr	r0, [pc, #84]	; (80053e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800538e:	f000 fcda 	bl	8005d46 <USBD_GetEpDesc>
 8005392:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005394:	2181      	movs	r1, #129	; 0x81
 8005396:	4813      	ldr	r0, [pc, #76]	; (80053e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005398:	f000 fcd5 	bl	8005d46 <USBD_GetEpDesc>
 800539c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d002      	beq.n	80053aa <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	2210      	movs	r2, #16
 80053a8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d006      	beq.n	80053be <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	2200      	movs	r2, #0
 80053b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053b8:	711a      	strb	r2, [r3, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d006      	beq.n	80053d2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2200      	movs	r2, #0
 80053c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053cc:	711a      	strb	r2, [r3, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2243      	movs	r2, #67	; 0x43
 80053d6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80053d8:	4b02      	ldr	r3, [pc, #8]	; (80053e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3718      	adds	r7, #24
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	bf00      	nop
 80053e4:	20000050 	.word	0x20000050

080053e8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	220a      	movs	r2, #10
 80053f4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80053f6:	4b03      	ldr	r3, [pc, #12]	; (8005404 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	370c      	adds	r7, #12
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr
 8005404:	2000000c 	.word	0x2000000c

08005408 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d101      	bne.n	800541c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005418:	2303      	movs	r3, #3
 800541a:	e009      	b.n	8005430 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	33b0      	adds	r3, #176	; 0xb0
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	4413      	add	r3, r2
 800542a:	683a      	ldr	r2, [r7, #0]
 800542c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800542e:	2300      	movs	r3, #0
}
 8005430:	4618      	mov	r0, r3
 8005432:	370c      	adds	r7, #12
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr

0800543c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800543c:	b480      	push	{r7}
 800543e:	b087      	sub	sp, #28
 8005440:	af00      	add	r7, sp, #0
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	32b0      	adds	r2, #176	; 0xb0
 8005452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005456:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d101      	bne.n	8005462 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800545e:	2303      	movs	r3, #3
 8005460:	e008      	b.n	8005474 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	68ba      	ldr	r2, [r7, #8]
 8005466:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005472:	2300      	movs	r3, #0
}
 8005474:	4618      	mov	r0, r3
 8005476:	371c      	adds	r7, #28
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr

08005480 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005480:	b480      	push	{r7}
 8005482:	b085      	sub	sp, #20
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	32b0      	adds	r2, #176	; 0xb0
 8005494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005498:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d101      	bne.n	80054a4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80054a0:	2303      	movs	r3, #3
 80054a2:	e004      	b.n	80054ae <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	683a      	ldr	r2, [r7, #0]
 80054a8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80054ac:	2300      	movs	r3, #0
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3714      	adds	r7, #20
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr
	...

080054bc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	32b0      	adds	r2, #176	; 0xb0
 80054ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054d2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80054d4:	2301      	movs	r3, #1
 80054d6:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	32b0      	adds	r2, #176	; 0xb0
 80054e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d101      	bne.n	80054ee <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80054ea:	2303      	movs	r3, #3
 80054ec:	e025      	b.n	800553a <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d11f      	bne.n	8005538 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005500:	4b10      	ldr	r3, [pc, #64]	; (8005544 <USBD_CDC_TransmitPacket+0x88>)
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	f003 020f 	and.w	r2, r3, #15
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	4613      	mov	r3, r2
 8005512:	009b      	lsls	r3, r3, #2
 8005514:	4413      	add	r3, r2
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	4403      	add	r3, r0
 800551a:	3318      	adds	r3, #24
 800551c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800551e:	4b09      	ldr	r3, [pc, #36]	; (8005544 <USBD_CDC_TransmitPacket+0x88>)
 8005520:	7819      	ldrb	r1, [r3, #0]
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f004 fd75 	bl	800a01e <USBD_LL_Transmit>

    ret = USBD_OK;
 8005534:	2300      	movs	r3, #0
 8005536:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005538:	7bfb      	ldrb	r3, [r7, #15]
}
 800553a:	4618      	mov	r0, r3
 800553c:	3710      	adds	r7, #16
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop
 8005544:	20000093 	.word	0x20000093

08005548 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	32b0      	adds	r2, #176	; 0xb0
 800555a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800555e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	32b0      	adds	r2, #176	; 0xb0
 800556a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d101      	bne.n	8005576 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005572:	2303      	movs	r3, #3
 8005574:	e018      	b.n	80055a8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	7c1b      	ldrb	r3, [r3, #16]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d10a      	bne.n	8005594 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800557e:	4b0c      	ldr	r3, [pc, #48]	; (80055b0 <USBD_CDC_ReceivePacket+0x68>)
 8005580:	7819      	ldrb	r1, [r3, #0]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005588:	f44f 7300 	mov.w	r3, #512	; 0x200
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f004 fd67 	bl	800a060 <USBD_LL_PrepareReceive>
 8005592:	e008      	b.n	80055a6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005594:	4b06      	ldr	r3, [pc, #24]	; (80055b0 <USBD_CDC_ReceivePacket+0x68>)
 8005596:	7819      	ldrb	r1, [r3, #0]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800559e:	2340      	movs	r3, #64	; 0x40
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f004 fd5d 	bl	800a060 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80055a6:	2300      	movs	r3, #0
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3710      	adds	r7, #16
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	20000094 	.word	0x20000094

080055b4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b086      	sub	sp, #24
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	60b9      	str	r1, [r7, #8]
 80055be:	4613      	mov	r3, r2
 80055c0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d101      	bne.n	80055cc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80055c8:	2303      	movs	r3, #3
 80055ca:	e01f      	b.n	800560c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2200      	movs	r2, #0
 80055d8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2200      	movs	r2, #0
 80055e0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d003      	beq.n	80055f2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	68ba      	ldr	r2, [r7, #8]
 80055ee:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2201      	movs	r2, #1
 80055f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	79fa      	ldrb	r2, [r7, #7]
 80055fe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005600:	68f8      	ldr	r0, [r7, #12]
 8005602:	f004 fbd7 	bl	8009db4 <USBD_LL_Init>
 8005606:	4603      	mov	r3, r0
 8005608:	75fb      	strb	r3, [r7, #23]

  return ret;
 800560a:	7dfb      	ldrb	r3, [r7, #23]
}
 800560c:	4618      	mov	r0, r3
 800560e:	3718      	adds	r7, #24
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}

08005614 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b084      	sub	sp, #16
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800561e:	2300      	movs	r3, #0
 8005620:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d101      	bne.n	800562c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005628:	2303      	movs	r3, #3
 800562a:	e025      	b.n	8005678 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	683a      	ldr	r2, [r7, #0]
 8005630:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	32ae      	adds	r2, #174	; 0xae
 800563e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005644:	2b00      	cmp	r3, #0
 8005646:	d00f      	beq.n	8005668 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	32ae      	adds	r2, #174	; 0xae
 8005652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005658:	f107 020e 	add.w	r2, r7, #14
 800565c:	4610      	mov	r0, r2
 800565e:	4798      	blx	r3
 8005660:	4602      	mov	r2, r0
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800566e:	1c5a      	adds	r2, r3, #1
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005676:	2300      	movs	r3, #0
}
 8005678:	4618      	mov	r0, r3
 800567a:	3710      	adds	r7, #16
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b082      	sub	sp, #8
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f004 fbdf 	bl	8009e4c <USBD_LL_Start>
 800568e:	4603      	mov	r3, r0
}
 8005690:	4618      	mov	r0, r3
 8005692:	3708      	adds	r7, #8
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}

08005698 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80056a0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	370c      	adds	r7, #12
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr

080056ae <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80056ae:	b580      	push	{r7, lr}
 80056b0:	b084      	sub	sp, #16
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	6078      	str	r0, [r7, #4]
 80056b6:	460b      	mov	r3, r1
 80056b8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80056ba:	2300      	movs	r3, #0
 80056bc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d009      	beq.n	80056dc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	78fa      	ldrb	r2, [r7, #3]
 80056d2:	4611      	mov	r1, r2
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	4798      	blx	r3
 80056d8:	4603      	mov	r3, r0
 80056da:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80056dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3710      	adds	r7, #16
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}

080056e6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80056e6:	b580      	push	{r7, lr}
 80056e8:	b084      	sub	sp, #16
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]
 80056ee:	460b      	mov	r3, r1
 80056f0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80056f2:	2300      	movs	r3, #0
 80056f4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	78fa      	ldrb	r2, [r7, #3]
 8005700:	4611      	mov	r1, r2
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	4798      	blx	r3
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d001      	beq.n	8005710 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800570c:	2303      	movs	r3, #3
 800570e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005710:	7bfb      	ldrb	r3, [r7, #15]
}
 8005712:	4618      	mov	r0, r3
 8005714:	3710      	adds	r7, #16
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}

0800571a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800571a:	b580      	push	{r7, lr}
 800571c:	b084      	sub	sp, #16
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
 8005722:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800572a:	6839      	ldr	r1, [r7, #0]
 800572c:	4618      	mov	r0, r3
 800572e:	f001 f908 	bl	8006942 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2201      	movs	r2, #1
 8005736:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005740:	461a      	mov	r2, r3
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800574e:	f003 031f 	and.w	r3, r3, #31
 8005752:	2b02      	cmp	r3, #2
 8005754:	d01a      	beq.n	800578c <USBD_LL_SetupStage+0x72>
 8005756:	2b02      	cmp	r3, #2
 8005758:	d822      	bhi.n	80057a0 <USBD_LL_SetupStage+0x86>
 800575a:	2b00      	cmp	r3, #0
 800575c:	d002      	beq.n	8005764 <USBD_LL_SetupStage+0x4a>
 800575e:	2b01      	cmp	r3, #1
 8005760:	d00a      	beq.n	8005778 <USBD_LL_SetupStage+0x5e>
 8005762:	e01d      	b.n	80057a0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800576a:	4619      	mov	r1, r3
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f000 fb5f 	bl	8005e30 <USBD_StdDevReq>
 8005772:	4603      	mov	r3, r0
 8005774:	73fb      	strb	r3, [r7, #15]
      break;
 8005776:	e020      	b.n	80057ba <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800577e:	4619      	mov	r1, r3
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f000 fbc7 	bl	8005f14 <USBD_StdItfReq>
 8005786:	4603      	mov	r3, r0
 8005788:	73fb      	strb	r3, [r7, #15]
      break;
 800578a:	e016      	b.n	80057ba <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005792:	4619      	mov	r1, r3
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f000 fc29 	bl	8005fec <USBD_StdEPReq>
 800579a:	4603      	mov	r3, r0
 800579c:	73fb      	strb	r3, [r7, #15]
      break;
 800579e:	e00c      	b.n	80057ba <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80057a6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	4619      	mov	r1, r3
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f004 fbac 	bl	8009f0c <USBD_LL_StallEP>
 80057b4:	4603      	mov	r3, r0
 80057b6:	73fb      	strb	r3, [r7, #15]
      break;
 80057b8:	bf00      	nop
  }

  return ret;
 80057ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3710      	adds	r7, #16
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b086      	sub	sp, #24
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	460b      	mov	r3, r1
 80057ce:	607a      	str	r2, [r7, #4]
 80057d0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80057d2:	2300      	movs	r3, #0
 80057d4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80057d6:	7afb      	ldrb	r3, [r7, #11]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d16e      	bne.n	80058ba <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80057e2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80057ea:	2b03      	cmp	r3, #3
 80057ec:	f040 8098 	bne.w	8005920 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	689a      	ldr	r2, [r3, #8]
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d913      	bls.n	8005824 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	689a      	ldr	r2, [r3, #8]
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	1ad2      	subs	r2, r2, r3
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	68da      	ldr	r2, [r3, #12]
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	4293      	cmp	r3, r2
 8005814:	bf28      	it	cs
 8005816:	4613      	movcs	r3, r2
 8005818:	461a      	mov	r2, r3
 800581a:	6879      	ldr	r1, [r7, #4]
 800581c:	68f8      	ldr	r0, [r7, #12]
 800581e:	f001 f984 	bl	8006b2a <USBD_CtlContinueRx>
 8005822:	e07d      	b.n	8005920 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800582a:	f003 031f 	and.w	r3, r3, #31
 800582e:	2b02      	cmp	r3, #2
 8005830:	d014      	beq.n	800585c <USBD_LL_DataOutStage+0x98>
 8005832:	2b02      	cmp	r3, #2
 8005834:	d81d      	bhi.n	8005872 <USBD_LL_DataOutStage+0xae>
 8005836:	2b00      	cmp	r3, #0
 8005838:	d002      	beq.n	8005840 <USBD_LL_DataOutStage+0x7c>
 800583a:	2b01      	cmp	r3, #1
 800583c:	d003      	beq.n	8005846 <USBD_LL_DataOutStage+0x82>
 800583e:	e018      	b.n	8005872 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005840:	2300      	movs	r3, #0
 8005842:	75bb      	strb	r3, [r7, #22]
            break;
 8005844:	e018      	b.n	8005878 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800584c:	b2db      	uxtb	r3, r3
 800584e:	4619      	mov	r1, r3
 8005850:	68f8      	ldr	r0, [r7, #12]
 8005852:	f000 fa5e 	bl	8005d12 <USBD_CoreFindIF>
 8005856:	4603      	mov	r3, r0
 8005858:	75bb      	strb	r3, [r7, #22]
            break;
 800585a:	e00d      	b.n	8005878 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005862:	b2db      	uxtb	r3, r3
 8005864:	4619      	mov	r1, r3
 8005866:	68f8      	ldr	r0, [r7, #12]
 8005868:	f000 fa60 	bl	8005d2c <USBD_CoreFindEP>
 800586c:	4603      	mov	r3, r0
 800586e:	75bb      	strb	r3, [r7, #22]
            break;
 8005870:	e002      	b.n	8005878 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005872:	2300      	movs	r3, #0
 8005874:	75bb      	strb	r3, [r7, #22]
            break;
 8005876:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005878:	7dbb      	ldrb	r3, [r7, #22]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d119      	bne.n	80058b2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005884:	b2db      	uxtb	r3, r3
 8005886:	2b03      	cmp	r3, #3
 8005888:	d113      	bne.n	80058b2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800588a:	7dba      	ldrb	r2, [r7, #22]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	32ae      	adds	r2, #174	; 0xae
 8005890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005894:	691b      	ldr	r3, [r3, #16]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d00b      	beq.n	80058b2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800589a:	7dba      	ldrb	r2, [r7, #22]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80058a2:	7dba      	ldrb	r2, [r7, #22]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	32ae      	adds	r2, #174	; 0xae
 80058a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058ac:	691b      	ldr	r3, [r3, #16]
 80058ae:	68f8      	ldr	r0, [r7, #12]
 80058b0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80058b2:	68f8      	ldr	r0, [r7, #12]
 80058b4:	f001 f94a 	bl	8006b4c <USBD_CtlSendStatus>
 80058b8:	e032      	b.n	8005920 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80058ba:	7afb      	ldrb	r3, [r7, #11]
 80058bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	4619      	mov	r1, r3
 80058c4:	68f8      	ldr	r0, [r7, #12]
 80058c6:	f000 fa31 	bl	8005d2c <USBD_CoreFindEP>
 80058ca:	4603      	mov	r3, r0
 80058cc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80058ce:	7dbb      	ldrb	r3, [r7, #22]
 80058d0:	2bff      	cmp	r3, #255	; 0xff
 80058d2:	d025      	beq.n	8005920 <USBD_LL_DataOutStage+0x15c>
 80058d4:	7dbb      	ldrb	r3, [r7, #22]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d122      	bne.n	8005920 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	2b03      	cmp	r3, #3
 80058e4:	d117      	bne.n	8005916 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80058e6:	7dba      	ldrb	r2, [r7, #22]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	32ae      	adds	r2, #174	; 0xae
 80058ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058f0:	699b      	ldr	r3, [r3, #24]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d00f      	beq.n	8005916 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80058f6:	7dba      	ldrb	r2, [r7, #22]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80058fe:	7dba      	ldrb	r2, [r7, #22]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	32ae      	adds	r2, #174	; 0xae
 8005904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005908:	699b      	ldr	r3, [r3, #24]
 800590a:	7afa      	ldrb	r2, [r7, #11]
 800590c:	4611      	mov	r1, r2
 800590e:	68f8      	ldr	r0, [r7, #12]
 8005910:	4798      	blx	r3
 8005912:	4603      	mov	r3, r0
 8005914:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005916:	7dfb      	ldrb	r3, [r7, #23]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d001      	beq.n	8005920 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800591c:	7dfb      	ldrb	r3, [r7, #23]
 800591e:	e000      	b.n	8005922 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005920:	2300      	movs	r3, #0
}
 8005922:	4618      	mov	r0, r3
 8005924:	3718      	adds	r7, #24
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}

0800592a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800592a:	b580      	push	{r7, lr}
 800592c:	b086      	sub	sp, #24
 800592e:	af00      	add	r7, sp, #0
 8005930:	60f8      	str	r0, [r7, #12]
 8005932:	460b      	mov	r3, r1
 8005934:	607a      	str	r2, [r7, #4]
 8005936:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005938:	7afb      	ldrb	r3, [r7, #11]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d16f      	bne.n	8005a1e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	3314      	adds	r3, #20
 8005942:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800594a:	2b02      	cmp	r3, #2
 800594c:	d15a      	bne.n	8005a04 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	689a      	ldr	r2, [r3, #8]
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	429a      	cmp	r2, r3
 8005958:	d914      	bls.n	8005984 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	689a      	ldr	r2, [r3, #8]
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	68db      	ldr	r3, [r3, #12]
 8005962:	1ad2      	subs	r2, r2, r3
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	461a      	mov	r2, r3
 800596e:	6879      	ldr	r1, [r7, #4]
 8005970:	68f8      	ldr	r0, [r7, #12]
 8005972:	f001 f8ac 	bl	8006ace <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005976:	2300      	movs	r3, #0
 8005978:	2200      	movs	r2, #0
 800597a:	2100      	movs	r1, #0
 800597c:	68f8      	ldr	r0, [r7, #12]
 800597e:	f004 fb6f 	bl	800a060 <USBD_LL_PrepareReceive>
 8005982:	e03f      	b.n	8005a04 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	68da      	ldr	r2, [r3, #12]
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	429a      	cmp	r2, r3
 800598e:	d11c      	bne.n	80059ca <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	685a      	ldr	r2, [r3, #4]
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005998:	429a      	cmp	r2, r3
 800599a:	d316      	bcc.n	80059ca <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	685a      	ldr	r2, [r3, #4]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d20f      	bcs.n	80059ca <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80059aa:	2200      	movs	r2, #0
 80059ac:	2100      	movs	r1, #0
 80059ae:	68f8      	ldr	r0, [r7, #12]
 80059b0:	f001 f88d 	bl	8006ace <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2200      	movs	r2, #0
 80059b8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80059bc:	2300      	movs	r3, #0
 80059be:	2200      	movs	r2, #0
 80059c0:	2100      	movs	r1, #0
 80059c2:	68f8      	ldr	r0, [r7, #12]
 80059c4:	f004 fb4c 	bl	800a060 <USBD_LL_PrepareReceive>
 80059c8:	e01c      	b.n	8005a04 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	2b03      	cmp	r3, #3
 80059d4:	d10f      	bne.n	80059f6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d009      	beq.n	80059f6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2200      	movs	r2, #0
 80059e6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	68f8      	ldr	r0, [r7, #12]
 80059f4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80059f6:	2180      	movs	r1, #128	; 0x80
 80059f8:	68f8      	ldr	r0, [r7, #12]
 80059fa:	f004 fa87 	bl	8009f0c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80059fe:	68f8      	ldr	r0, [r7, #12]
 8005a00:	f001 f8b7 	bl	8006b72 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d03a      	beq.n	8005a84 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005a0e:	68f8      	ldr	r0, [r7, #12]
 8005a10:	f7ff fe42 	bl	8005698 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2200      	movs	r2, #0
 8005a18:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005a1c:	e032      	b.n	8005a84 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005a1e:	7afb      	ldrb	r3, [r7, #11]
 8005a20:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	4619      	mov	r1, r3
 8005a28:	68f8      	ldr	r0, [r7, #12]
 8005a2a:	f000 f97f 	bl	8005d2c <USBD_CoreFindEP>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005a32:	7dfb      	ldrb	r3, [r7, #23]
 8005a34:	2bff      	cmp	r3, #255	; 0xff
 8005a36:	d025      	beq.n	8005a84 <USBD_LL_DataInStage+0x15a>
 8005a38:	7dfb      	ldrb	r3, [r7, #23]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d122      	bne.n	8005a84 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	2b03      	cmp	r3, #3
 8005a48:	d11c      	bne.n	8005a84 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005a4a:	7dfa      	ldrb	r2, [r7, #23]
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	32ae      	adds	r2, #174	; 0xae
 8005a50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a54:	695b      	ldr	r3, [r3, #20]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d014      	beq.n	8005a84 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005a5a:	7dfa      	ldrb	r2, [r7, #23]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005a62:	7dfa      	ldrb	r2, [r7, #23]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	32ae      	adds	r2, #174	; 0xae
 8005a68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a6c:	695b      	ldr	r3, [r3, #20]
 8005a6e:	7afa      	ldrb	r2, [r7, #11]
 8005a70:	4611      	mov	r1, r2
 8005a72:	68f8      	ldr	r0, [r7, #12]
 8005a74:	4798      	blx	r3
 8005a76:	4603      	mov	r3, r0
 8005a78:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005a7a:	7dbb      	ldrb	r3, [r7, #22]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d001      	beq.n	8005a84 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005a80:	7dbb      	ldrb	r3, [r7, #22]
 8005a82:	e000      	b.n	8005a86 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3718      	adds	r7, #24
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}

08005a8e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005a8e:	b580      	push	{r7, lr}
 8005a90:	b084      	sub	sp, #16
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a96:	2300      	movs	r3, #0
 8005a98:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d014      	beq.n	8005af4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d00e      	beq.n	8005af4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	6852      	ldr	r2, [r2, #4]
 8005ae2:	b2d2      	uxtb	r2, r2
 8005ae4:	4611      	mov	r1, r2
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	4798      	blx	r3
 8005aea:	4603      	mov	r3, r0
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d001      	beq.n	8005af4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005af0:	2303      	movs	r3, #3
 8005af2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005af4:	2340      	movs	r3, #64	; 0x40
 8005af6:	2200      	movs	r2, #0
 8005af8:	2100      	movs	r1, #0
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f004 f9c1 	bl	8009e82 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2240      	movs	r2, #64	; 0x40
 8005b0c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005b10:	2340      	movs	r3, #64	; 0x40
 8005b12:	2200      	movs	r2, #0
 8005b14:	2180      	movs	r1, #128	; 0x80
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f004 f9b3 	bl	8009e82 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2240      	movs	r2, #64	; 0x40
 8005b26:	621a      	str	r2, [r3, #32]

  return ret;
 8005b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3710      	adds	r7, #16
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}

08005b32 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005b32:	b480      	push	{r7}
 8005b34:	b083      	sub	sp, #12
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
 8005b3a:	460b      	mov	r3, r1
 8005b3c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	78fa      	ldrb	r2, [r7, #3]
 8005b42:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	370c      	adds	r7, #12
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr

08005b52 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005b52:	b480      	push	{r7}
 8005b54:	b083      	sub	sp, #12
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b60:	b2da      	uxtb	r2, r3
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2204      	movs	r2, #4
 8005b6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005b70:	2300      	movs	r3, #0
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	370c      	adds	r7, #12
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr

08005b7e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005b7e:	b480      	push	{r7}
 8005b80:	b083      	sub	sp, #12
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	2b04      	cmp	r3, #4
 8005b90:	d106      	bne.n	8005ba0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005b98:	b2da      	uxtb	r2, r3
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	370c      	adds	r7, #12
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr

08005bae <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005bae:	b580      	push	{r7, lr}
 8005bb0:	b082      	sub	sp, #8
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	2b03      	cmp	r3, #3
 8005bc0:	d110      	bne.n	8005be4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d00b      	beq.n	8005be4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bd2:	69db      	ldr	r3, [r3, #28]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d005      	beq.n	8005be4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bde:	69db      	ldr	r3, [r3, #28]
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005be4:	2300      	movs	r3, #0
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3708      	adds	r7, #8
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}

08005bee <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005bee:	b580      	push	{r7, lr}
 8005bf0:	b082      	sub	sp, #8
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
 8005bf6:	460b      	mov	r3, r1
 8005bf8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	32ae      	adds	r2, #174	; 0xae
 8005c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d101      	bne.n	8005c10 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005c0c:	2303      	movs	r3, #3
 8005c0e:	e01c      	b.n	8005c4a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	2b03      	cmp	r3, #3
 8005c1a:	d115      	bne.n	8005c48 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	32ae      	adds	r2, #174	; 0xae
 8005c26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c2a:	6a1b      	ldr	r3, [r3, #32]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d00b      	beq.n	8005c48 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	32ae      	adds	r2, #174	; 0xae
 8005c3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c3e:	6a1b      	ldr	r3, [r3, #32]
 8005c40:	78fa      	ldrb	r2, [r7, #3]
 8005c42:	4611      	mov	r1, r2
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3708      	adds	r7, #8
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}

08005c52 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005c52:	b580      	push	{r7, lr}
 8005c54:	b082      	sub	sp, #8
 8005c56:	af00      	add	r7, sp, #0
 8005c58:	6078      	str	r0, [r7, #4]
 8005c5a:	460b      	mov	r3, r1
 8005c5c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	32ae      	adds	r2, #174	; 0xae
 8005c68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d101      	bne.n	8005c74 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005c70:	2303      	movs	r3, #3
 8005c72:	e01c      	b.n	8005cae <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	2b03      	cmp	r3, #3
 8005c7e:	d115      	bne.n	8005cac <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	32ae      	adds	r2, #174	; 0xae
 8005c8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d00b      	beq.n	8005cac <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	32ae      	adds	r2, #174	; 0xae
 8005c9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca4:	78fa      	ldrb	r2, [r7, #3]
 8005ca6:	4611      	mov	r1, r2
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3708      	adds	r7, #8
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}

08005cb6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005cb6:	b480      	push	{r7}
 8005cb8:	b083      	sub	sp, #12
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005cbe:	2300      	movs	r3, #0
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	370c      	adds	r7, #12
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr

08005ccc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b084      	sub	sp, #16
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d00e      	beq.n	8005d08 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	6852      	ldr	r2, [r2, #4]
 8005cf6:	b2d2      	uxtb	r2, r2
 8005cf8:	4611      	mov	r1, r2
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	4798      	blx	r3
 8005cfe:	4603      	mov	r3, r0
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d001      	beq.n	8005d08 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005d04:	2303      	movs	r3, #3
 8005d06:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3710      	adds	r7, #16
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}

08005d12 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005d12:	b480      	push	{r7}
 8005d14:	b083      	sub	sp, #12
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	6078      	str	r0, [r7, #4]
 8005d1a:	460b      	mov	r3, r1
 8005d1c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005d1e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	370c      	adds	r7, #12
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr

08005d2c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	460b      	mov	r3, r1
 8005d36:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005d38:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	370c      	adds	r7, #12
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr

08005d46 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005d46:	b580      	push	{r7, lr}
 8005d48:	b086      	sub	sp, #24
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
 8005d4e:	460b      	mov	r3, r1
 8005d50:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	885b      	ldrh	r3, [r3, #2]
 8005d62:	b29a      	uxth	r2, r3
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d920      	bls.n	8005db0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005d76:	e013      	b.n	8005da0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005d78:	f107 030a 	add.w	r3, r7, #10
 8005d7c:	4619      	mov	r1, r3
 8005d7e:	6978      	ldr	r0, [r7, #20]
 8005d80:	f000 f81b 	bl	8005dba <USBD_GetNextDesc>
 8005d84:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	785b      	ldrb	r3, [r3, #1]
 8005d8a:	2b05      	cmp	r3, #5
 8005d8c:	d108      	bne.n	8005da0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	789b      	ldrb	r3, [r3, #2]
 8005d96:	78fa      	ldrb	r2, [r7, #3]
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d008      	beq.n	8005dae <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	885b      	ldrh	r3, [r3, #2]
 8005da4:	b29a      	uxth	r2, r3
 8005da6:	897b      	ldrh	r3, [r7, #10]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d8e5      	bhi.n	8005d78 <USBD_GetEpDesc+0x32>
 8005dac:	e000      	b.n	8005db0 <USBD_GetEpDesc+0x6a>
          break;
 8005dae:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005db0:	693b      	ldr	r3, [r7, #16]
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3718      	adds	r7, #24
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}

08005dba <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005dba:	b480      	push	{r7}
 8005dbc:	b085      	sub	sp, #20
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	6078      	str	r0, [r7, #4]
 8005dc2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	881a      	ldrh	r2, [r3, #0]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	4413      	add	r3, r2
 8005dd4:	b29a      	uxth	r2, r3
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	461a      	mov	r2, r3
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	4413      	add	r3, r2
 8005de4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005de6:	68fb      	ldr	r3, [r7, #12]
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3714      	adds	r7, #20
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b087      	sub	sp, #28
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	3301      	adds	r3, #1
 8005e0a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005e12:	8a3b      	ldrh	r3, [r7, #16]
 8005e14:	021b      	lsls	r3, r3, #8
 8005e16:	b21a      	sxth	r2, r3
 8005e18:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	b21b      	sxth	r3, r3
 8005e20:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005e22:	89fb      	ldrh	r3, [r7, #14]
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	371c      	adds	r7, #28
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005e46:	2b40      	cmp	r3, #64	; 0x40
 8005e48:	d005      	beq.n	8005e56 <USBD_StdDevReq+0x26>
 8005e4a:	2b40      	cmp	r3, #64	; 0x40
 8005e4c:	d857      	bhi.n	8005efe <USBD_StdDevReq+0xce>
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d00f      	beq.n	8005e72 <USBD_StdDevReq+0x42>
 8005e52:	2b20      	cmp	r3, #32
 8005e54:	d153      	bne.n	8005efe <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	32ae      	adds	r2, #174	; 0xae
 8005e60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	6839      	ldr	r1, [r7, #0]
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	4798      	blx	r3
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	73fb      	strb	r3, [r7, #15]
      break;
 8005e70:	e04a      	b.n	8005f08 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	785b      	ldrb	r3, [r3, #1]
 8005e76:	2b09      	cmp	r3, #9
 8005e78:	d83b      	bhi.n	8005ef2 <USBD_StdDevReq+0xc2>
 8005e7a:	a201      	add	r2, pc, #4	; (adr r2, 8005e80 <USBD_StdDevReq+0x50>)
 8005e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e80:	08005ed5 	.word	0x08005ed5
 8005e84:	08005ee9 	.word	0x08005ee9
 8005e88:	08005ef3 	.word	0x08005ef3
 8005e8c:	08005edf 	.word	0x08005edf
 8005e90:	08005ef3 	.word	0x08005ef3
 8005e94:	08005eb3 	.word	0x08005eb3
 8005e98:	08005ea9 	.word	0x08005ea9
 8005e9c:	08005ef3 	.word	0x08005ef3
 8005ea0:	08005ecb 	.word	0x08005ecb
 8005ea4:	08005ebd 	.word	0x08005ebd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005ea8:	6839      	ldr	r1, [r7, #0]
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f000 fa3c 	bl	8006328 <USBD_GetDescriptor>
          break;
 8005eb0:	e024      	b.n	8005efc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005eb2:	6839      	ldr	r1, [r7, #0]
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f000 fba1 	bl	80065fc <USBD_SetAddress>
          break;
 8005eba:	e01f      	b.n	8005efc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005ebc:	6839      	ldr	r1, [r7, #0]
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 fbe0 	bl	8006684 <USBD_SetConfig>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	73fb      	strb	r3, [r7, #15]
          break;
 8005ec8:	e018      	b.n	8005efc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005eca:	6839      	ldr	r1, [r7, #0]
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f000 fc83 	bl	80067d8 <USBD_GetConfig>
          break;
 8005ed2:	e013      	b.n	8005efc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005ed4:	6839      	ldr	r1, [r7, #0]
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 fcb4 	bl	8006844 <USBD_GetStatus>
          break;
 8005edc:	e00e      	b.n	8005efc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005ede:	6839      	ldr	r1, [r7, #0]
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f000 fce3 	bl	80068ac <USBD_SetFeature>
          break;
 8005ee6:	e009      	b.n	8005efc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005ee8:	6839      	ldr	r1, [r7, #0]
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 fd07 	bl	80068fe <USBD_ClrFeature>
          break;
 8005ef0:	e004      	b.n	8005efc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005ef2:	6839      	ldr	r1, [r7, #0]
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f000 fd5e 	bl	80069b6 <USBD_CtlError>
          break;
 8005efa:	bf00      	nop
      }
      break;
 8005efc:	e004      	b.n	8005f08 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005efe:	6839      	ldr	r1, [r7, #0]
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f000 fd58 	bl	80069b6 <USBD_CtlError>
      break;
 8005f06:	bf00      	nop
  }

  return ret;
 8005f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3710      	adds	r7, #16
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop

08005f14 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b084      	sub	sp, #16
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	781b      	ldrb	r3, [r3, #0]
 8005f26:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005f2a:	2b40      	cmp	r3, #64	; 0x40
 8005f2c:	d005      	beq.n	8005f3a <USBD_StdItfReq+0x26>
 8005f2e:	2b40      	cmp	r3, #64	; 0x40
 8005f30:	d852      	bhi.n	8005fd8 <USBD_StdItfReq+0xc4>
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d001      	beq.n	8005f3a <USBD_StdItfReq+0x26>
 8005f36:	2b20      	cmp	r3, #32
 8005f38:	d14e      	bne.n	8005fd8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	3b01      	subs	r3, #1
 8005f44:	2b02      	cmp	r3, #2
 8005f46:	d840      	bhi.n	8005fca <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	889b      	ldrh	r3, [r3, #4]
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d836      	bhi.n	8005fc0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	889b      	ldrh	r3, [r3, #4]
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	4619      	mov	r1, r3
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f7ff fed9 	bl	8005d12 <USBD_CoreFindIF>
 8005f60:	4603      	mov	r3, r0
 8005f62:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005f64:	7bbb      	ldrb	r3, [r7, #14]
 8005f66:	2bff      	cmp	r3, #255	; 0xff
 8005f68:	d01d      	beq.n	8005fa6 <USBD_StdItfReq+0x92>
 8005f6a:	7bbb      	ldrb	r3, [r7, #14]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d11a      	bne.n	8005fa6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005f70:	7bba      	ldrb	r2, [r7, #14]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	32ae      	adds	r2, #174	; 0xae
 8005f76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d00f      	beq.n	8005fa0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005f80:	7bba      	ldrb	r2, [r7, #14]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005f88:	7bba      	ldrb	r2, [r7, #14]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	32ae      	adds	r2, #174	; 0xae
 8005f8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	6839      	ldr	r1, [r7, #0]
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	4798      	blx	r3
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005f9e:	e004      	b.n	8005faa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005fa0:	2303      	movs	r3, #3
 8005fa2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005fa4:	e001      	b.n	8005faa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8005fa6:	2303      	movs	r3, #3
 8005fa8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	88db      	ldrh	r3, [r3, #6]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d110      	bne.n	8005fd4 <USBD_StdItfReq+0xc0>
 8005fb2:	7bfb      	ldrb	r3, [r7, #15]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d10d      	bne.n	8005fd4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f000 fdc7 	bl	8006b4c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005fbe:	e009      	b.n	8005fd4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005fc0:	6839      	ldr	r1, [r7, #0]
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 fcf7 	bl	80069b6 <USBD_CtlError>
          break;
 8005fc8:	e004      	b.n	8005fd4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005fca:	6839      	ldr	r1, [r7, #0]
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f000 fcf2 	bl	80069b6 <USBD_CtlError>
          break;
 8005fd2:	e000      	b.n	8005fd6 <USBD_StdItfReq+0xc2>
          break;
 8005fd4:	bf00      	nop
      }
      break;
 8005fd6:	e004      	b.n	8005fe2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005fd8:	6839      	ldr	r1, [r7, #0]
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f000 fceb 	bl	80069b6 <USBD_CtlError>
      break;
 8005fe0:	bf00      	nop
  }

  return ret;
 8005fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3710      	adds	r7, #16
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}

08005fec <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	889b      	ldrh	r3, [r3, #4]
 8005ffe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006008:	2b40      	cmp	r3, #64	; 0x40
 800600a:	d007      	beq.n	800601c <USBD_StdEPReq+0x30>
 800600c:	2b40      	cmp	r3, #64	; 0x40
 800600e:	f200 817f 	bhi.w	8006310 <USBD_StdEPReq+0x324>
 8006012:	2b00      	cmp	r3, #0
 8006014:	d02a      	beq.n	800606c <USBD_StdEPReq+0x80>
 8006016:	2b20      	cmp	r3, #32
 8006018:	f040 817a 	bne.w	8006310 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800601c:	7bbb      	ldrb	r3, [r7, #14]
 800601e:	4619      	mov	r1, r3
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f7ff fe83 	bl	8005d2c <USBD_CoreFindEP>
 8006026:	4603      	mov	r3, r0
 8006028:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800602a:	7b7b      	ldrb	r3, [r7, #13]
 800602c:	2bff      	cmp	r3, #255	; 0xff
 800602e:	f000 8174 	beq.w	800631a <USBD_StdEPReq+0x32e>
 8006032:	7b7b      	ldrb	r3, [r7, #13]
 8006034:	2b00      	cmp	r3, #0
 8006036:	f040 8170 	bne.w	800631a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800603a:	7b7a      	ldrb	r2, [r7, #13]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006042:	7b7a      	ldrb	r2, [r7, #13]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	32ae      	adds	r2, #174	; 0xae
 8006048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	2b00      	cmp	r3, #0
 8006050:	f000 8163 	beq.w	800631a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006054:	7b7a      	ldrb	r2, [r7, #13]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	32ae      	adds	r2, #174	; 0xae
 800605a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	6839      	ldr	r1, [r7, #0]
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	4798      	blx	r3
 8006066:	4603      	mov	r3, r0
 8006068:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800606a:	e156      	b.n	800631a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	785b      	ldrb	r3, [r3, #1]
 8006070:	2b03      	cmp	r3, #3
 8006072:	d008      	beq.n	8006086 <USBD_StdEPReq+0x9a>
 8006074:	2b03      	cmp	r3, #3
 8006076:	f300 8145 	bgt.w	8006304 <USBD_StdEPReq+0x318>
 800607a:	2b00      	cmp	r3, #0
 800607c:	f000 809b 	beq.w	80061b6 <USBD_StdEPReq+0x1ca>
 8006080:	2b01      	cmp	r3, #1
 8006082:	d03c      	beq.n	80060fe <USBD_StdEPReq+0x112>
 8006084:	e13e      	b.n	8006304 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800608c:	b2db      	uxtb	r3, r3
 800608e:	2b02      	cmp	r3, #2
 8006090:	d002      	beq.n	8006098 <USBD_StdEPReq+0xac>
 8006092:	2b03      	cmp	r3, #3
 8006094:	d016      	beq.n	80060c4 <USBD_StdEPReq+0xd8>
 8006096:	e02c      	b.n	80060f2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006098:	7bbb      	ldrb	r3, [r7, #14]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d00d      	beq.n	80060ba <USBD_StdEPReq+0xce>
 800609e:	7bbb      	ldrb	r3, [r7, #14]
 80060a0:	2b80      	cmp	r3, #128	; 0x80
 80060a2:	d00a      	beq.n	80060ba <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80060a4:	7bbb      	ldrb	r3, [r7, #14]
 80060a6:	4619      	mov	r1, r3
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f003 ff2f 	bl	8009f0c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80060ae:	2180      	movs	r1, #128	; 0x80
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f003 ff2b 	bl	8009f0c <USBD_LL_StallEP>
 80060b6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80060b8:	e020      	b.n	80060fc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80060ba:	6839      	ldr	r1, [r7, #0]
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f000 fc7a 	bl	80069b6 <USBD_CtlError>
              break;
 80060c2:	e01b      	b.n	80060fc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	885b      	ldrh	r3, [r3, #2]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d10e      	bne.n	80060ea <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80060cc:	7bbb      	ldrb	r3, [r7, #14]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d00b      	beq.n	80060ea <USBD_StdEPReq+0xfe>
 80060d2:	7bbb      	ldrb	r3, [r7, #14]
 80060d4:	2b80      	cmp	r3, #128	; 0x80
 80060d6:	d008      	beq.n	80060ea <USBD_StdEPReq+0xfe>
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	88db      	ldrh	r3, [r3, #6]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d104      	bne.n	80060ea <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80060e0:	7bbb      	ldrb	r3, [r7, #14]
 80060e2:	4619      	mov	r1, r3
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f003 ff11 	bl	8009f0c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f000 fd2e 	bl	8006b4c <USBD_CtlSendStatus>

              break;
 80060f0:	e004      	b.n	80060fc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80060f2:	6839      	ldr	r1, [r7, #0]
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f000 fc5e 	bl	80069b6 <USBD_CtlError>
              break;
 80060fa:	bf00      	nop
          }
          break;
 80060fc:	e107      	b.n	800630e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006104:	b2db      	uxtb	r3, r3
 8006106:	2b02      	cmp	r3, #2
 8006108:	d002      	beq.n	8006110 <USBD_StdEPReq+0x124>
 800610a:	2b03      	cmp	r3, #3
 800610c:	d016      	beq.n	800613c <USBD_StdEPReq+0x150>
 800610e:	e04b      	b.n	80061a8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006110:	7bbb      	ldrb	r3, [r7, #14]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d00d      	beq.n	8006132 <USBD_StdEPReq+0x146>
 8006116:	7bbb      	ldrb	r3, [r7, #14]
 8006118:	2b80      	cmp	r3, #128	; 0x80
 800611a:	d00a      	beq.n	8006132 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800611c:	7bbb      	ldrb	r3, [r7, #14]
 800611e:	4619      	mov	r1, r3
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f003 fef3 	bl	8009f0c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006126:	2180      	movs	r1, #128	; 0x80
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f003 feef 	bl	8009f0c <USBD_LL_StallEP>
 800612e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006130:	e040      	b.n	80061b4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006132:	6839      	ldr	r1, [r7, #0]
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f000 fc3e 	bl	80069b6 <USBD_CtlError>
              break;
 800613a:	e03b      	b.n	80061b4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	885b      	ldrh	r3, [r3, #2]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d136      	bne.n	80061b2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006144:	7bbb      	ldrb	r3, [r7, #14]
 8006146:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800614a:	2b00      	cmp	r3, #0
 800614c:	d004      	beq.n	8006158 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800614e:	7bbb      	ldrb	r3, [r7, #14]
 8006150:	4619      	mov	r1, r3
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f003 fef9 	bl	8009f4a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f000 fcf7 	bl	8006b4c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800615e:	7bbb      	ldrb	r3, [r7, #14]
 8006160:	4619      	mov	r1, r3
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f7ff fde2 	bl	8005d2c <USBD_CoreFindEP>
 8006168:	4603      	mov	r3, r0
 800616a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800616c:	7b7b      	ldrb	r3, [r7, #13]
 800616e:	2bff      	cmp	r3, #255	; 0xff
 8006170:	d01f      	beq.n	80061b2 <USBD_StdEPReq+0x1c6>
 8006172:	7b7b      	ldrb	r3, [r7, #13]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d11c      	bne.n	80061b2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006178:	7b7a      	ldrb	r2, [r7, #13]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006180:	7b7a      	ldrb	r2, [r7, #13]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	32ae      	adds	r2, #174	; 0xae
 8006186:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d010      	beq.n	80061b2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006190:	7b7a      	ldrb	r2, [r7, #13]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	32ae      	adds	r2, #174	; 0xae
 8006196:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	6839      	ldr	r1, [r7, #0]
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	4798      	blx	r3
 80061a2:	4603      	mov	r3, r0
 80061a4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80061a6:	e004      	b.n	80061b2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80061a8:	6839      	ldr	r1, [r7, #0]
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f000 fc03 	bl	80069b6 <USBD_CtlError>
              break;
 80061b0:	e000      	b.n	80061b4 <USBD_StdEPReq+0x1c8>
              break;
 80061b2:	bf00      	nop
          }
          break;
 80061b4:	e0ab      	b.n	800630e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	2b02      	cmp	r3, #2
 80061c0:	d002      	beq.n	80061c8 <USBD_StdEPReq+0x1dc>
 80061c2:	2b03      	cmp	r3, #3
 80061c4:	d032      	beq.n	800622c <USBD_StdEPReq+0x240>
 80061c6:	e097      	b.n	80062f8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80061c8:	7bbb      	ldrb	r3, [r7, #14]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d007      	beq.n	80061de <USBD_StdEPReq+0x1f2>
 80061ce:	7bbb      	ldrb	r3, [r7, #14]
 80061d0:	2b80      	cmp	r3, #128	; 0x80
 80061d2:	d004      	beq.n	80061de <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80061d4:	6839      	ldr	r1, [r7, #0]
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 fbed 	bl	80069b6 <USBD_CtlError>
                break;
 80061dc:	e091      	b.n	8006302 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80061de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	da0b      	bge.n	80061fe <USBD_StdEPReq+0x212>
 80061e6:	7bbb      	ldrb	r3, [r7, #14]
 80061e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80061ec:	4613      	mov	r3, r2
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	4413      	add	r3, r2
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	3310      	adds	r3, #16
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	4413      	add	r3, r2
 80061fa:	3304      	adds	r3, #4
 80061fc:	e00b      	b.n	8006216 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80061fe:	7bbb      	ldrb	r3, [r7, #14]
 8006200:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006204:	4613      	mov	r3, r2
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	4413      	add	r3, r2
 800620a:	009b      	lsls	r3, r3, #2
 800620c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	4413      	add	r3, r2
 8006214:	3304      	adds	r3, #4
 8006216:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	2200      	movs	r2, #0
 800621c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	2202      	movs	r2, #2
 8006222:	4619      	mov	r1, r3
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f000 fc37 	bl	8006a98 <USBD_CtlSendData>
              break;
 800622a:	e06a      	b.n	8006302 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800622c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006230:	2b00      	cmp	r3, #0
 8006232:	da11      	bge.n	8006258 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006234:	7bbb      	ldrb	r3, [r7, #14]
 8006236:	f003 020f 	and.w	r2, r3, #15
 800623a:	6879      	ldr	r1, [r7, #4]
 800623c:	4613      	mov	r3, r2
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	4413      	add	r3, r2
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	440b      	add	r3, r1
 8006246:	3324      	adds	r3, #36	; 0x24
 8006248:	881b      	ldrh	r3, [r3, #0]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d117      	bne.n	800627e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800624e:	6839      	ldr	r1, [r7, #0]
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f000 fbb0 	bl	80069b6 <USBD_CtlError>
                  break;
 8006256:	e054      	b.n	8006302 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006258:	7bbb      	ldrb	r3, [r7, #14]
 800625a:	f003 020f 	and.w	r2, r3, #15
 800625e:	6879      	ldr	r1, [r7, #4]
 8006260:	4613      	mov	r3, r2
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	4413      	add	r3, r2
 8006266:	009b      	lsls	r3, r3, #2
 8006268:	440b      	add	r3, r1
 800626a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800626e:	881b      	ldrh	r3, [r3, #0]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d104      	bne.n	800627e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006274:	6839      	ldr	r1, [r7, #0]
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 fb9d 	bl	80069b6 <USBD_CtlError>
                  break;
 800627c:	e041      	b.n	8006302 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800627e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006282:	2b00      	cmp	r3, #0
 8006284:	da0b      	bge.n	800629e <USBD_StdEPReq+0x2b2>
 8006286:	7bbb      	ldrb	r3, [r7, #14]
 8006288:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800628c:	4613      	mov	r3, r2
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	4413      	add	r3, r2
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	3310      	adds	r3, #16
 8006296:	687a      	ldr	r2, [r7, #4]
 8006298:	4413      	add	r3, r2
 800629a:	3304      	adds	r3, #4
 800629c:	e00b      	b.n	80062b6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800629e:	7bbb      	ldrb	r3, [r7, #14]
 80062a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80062a4:	4613      	mov	r3, r2
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	4413      	add	r3, r2
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	4413      	add	r3, r2
 80062b4:	3304      	adds	r3, #4
 80062b6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80062b8:	7bbb      	ldrb	r3, [r7, #14]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d002      	beq.n	80062c4 <USBD_StdEPReq+0x2d8>
 80062be:	7bbb      	ldrb	r3, [r7, #14]
 80062c0:	2b80      	cmp	r3, #128	; 0x80
 80062c2:	d103      	bne.n	80062cc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	2200      	movs	r2, #0
 80062c8:	601a      	str	r2, [r3, #0]
 80062ca:	e00e      	b.n	80062ea <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80062cc:	7bbb      	ldrb	r3, [r7, #14]
 80062ce:	4619      	mov	r1, r3
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f003 fe59 	bl	8009f88 <USBD_LL_IsStallEP>
 80062d6:	4603      	mov	r3, r0
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d003      	beq.n	80062e4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	2201      	movs	r2, #1
 80062e0:	601a      	str	r2, [r3, #0]
 80062e2:	e002      	b.n	80062ea <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	2200      	movs	r2, #0
 80062e8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	2202      	movs	r2, #2
 80062ee:	4619      	mov	r1, r3
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f000 fbd1 	bl	8006a98 <USBD_CtlSendData>
              break;
 80062f6:	e004      	b.n	8006302 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80062f8:	6839      	ldr	r1, [r7, #0]
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 fb5b 	bl	80069b6 <USBD_CtlError>
              break;
 8006300:	bf00      	nop
          }
          break;
 8006302:	e004      	b.n	800630e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006304:	6839      	ldr	r1, [r7, #0]
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 fb55 	bl	80069b6 <USBD_CtlError>
          break;
 800630c:	bf00      	nop
      }
      break;
 800630e:	e005      	b.n	800631c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006310:	6839      	ldr	r1, [r7, #0]
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f000 fb4f 	bl	80069b6 <USBD_CtlError>
      break;
 8006318:	e000      	b.n	800631c <USBD_StdEPReq+0x330>
      break;
 800631a:	bf00      	nop
  }

  return ret;
 800631c:	7bfb      	ldrb	r3, [r7, #15]
}
 800631e:	4618      	mov	r0, r3
 8006320:	3710      	adds	r7, #16
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
	...

08006328 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b084      	sub	sp, #16
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006332:	2300      	movs	r3, #0
 8006334:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006336:	2300      	movs	r3, #0
 8006338:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800633a:	2300      	movs	r3, #0
 800633c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	885b      	ldrh	r3, [r3, #2]
 8006342:	0a1b      	lsrs	r3, r3, #8
 8006344:	b29b      	uxth	r3, r3
 8006346:	3b01      	subs	r3, #1
 8006348:	2b06      	cmp	r3, #6
 800634a:	f200 8128 	bhi.w	800659e <USBD_GetDescriptor+0x276>
 800634e:	a201      	add	r2, pc, #4	; (adr r2, 8006354 <USBD_GetDescriptor+0x2c>)
 8006350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006354:	08006371 	.word	0x08006371
 8006358:	08006389 	.word	0x08006389
 800635c:	080063c9 	.word	0x080063c9
 8006360:	0800659f 	.word	0x0800659f
 8006364:	0800659f 	.word	0x0800659f
 8006368:	0800653f 	.word	0x0800653f
 800636c:	0800656b 	.word	0x0800656b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	7c12      	ldrb	r2, [r2, #16]
 800637c:	f107 0108 	add.w	r1, r7, #8
 8006380:	4610      	mov	r0, r2
 8006382:	4798      	blx	r3
 8006384:	60f8      	str	r0, [r7, #12]
      break;
 8006386:	e112      	b.n	80065ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	7c1b      	ldrb	r3, [r3, #16]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d10d      	bne.n	80063ac <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006398:	f107 0208 	add.w	r2, r7, #8
 800639c:	4610      	mov	r0, r2
 800639e:	4798      	blx	r3
 80063a0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	3301      	adds	r3, #1
 80063a6:	2202      	movs	r2, #2
 80063a8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80063aa:	e100      	b.n	80065ae <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b4:	f107 0208 	add.w	r2, r7, #8
 80063b8:	4610      	mov	r0, r2
 80063ba:	4798      	blx	r3
 80063bc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	3301      	adds	r3, #1
 80063c2:	2202      	movs	r2, #2
 80063c4:	701a      	strb	r2, [r3, #0]
      break;
 80063c6:	e0f2      	b.n	80065ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	885b      	ldrh	r3, [r3, #2]
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	2b05      	cmp	r3, #5
 80063d0:	f200 80ac 	bhi.w	800652c <USBD_GetDescriptor+0x204>
 80063d4:	a201      	add	r2, pc, #4	; (adr r2, 80063dc <USBD_GetDescriptor+0xb4>)
 80063d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063da:	bf00      	nop
 80063dc:	080063f5 	.word	0x080063f5
 80063e0:	08006429 	.word	0x08006429
 80063e4:	0800645d 	.word	0x0800645d
 80063e8:	08006491 	.word	0x08006491
 80063ec:	080064c5 	.word	0x080064c5
 80063f0:	080064f9 	.word	0x080064f9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d00b      	beq.n	8006418 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	7c12      	ldrb	r2, [r2, #16]
 800640c:	f107 0108 	add.w	r1, r7, #8
 8006410:	4610      	mov	r0, r2
 8006412:	4798      	blx	r3
 8006414:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006416:	e091      	b.n	800653c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006418:	6839      	ldr	r1, [r7, #0]
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f000 facb 	bl	80069b6 <USBD_CtlError>
            err++;
 8006420:	7afb      	ldrb	r3, [r7, #11]
 8006422:	3301      	adds	r3, #1
 8006424:	72fb      	strb	r3, [r7, #11]
          break;
 8006426:	e089      	b.n	800653c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d00b      	beq.n	800644c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	7c12      	ldrb	r2, [r2, #16]
 8006440:	f107 0108 	add.w	r1, r7, #8
 8006444:	4610      	mov	r0, r2
 8006446:	4798      	blx	r3
 8006448:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800644a:	e077      	b.n	800653c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800644c:	6839      	ldr	r1, [r7, #0]
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 fab1 	bl	80069b6 <USBD_CtlError>
            err++;
 8006454:	7afb      	ldrb	r3, [r7, #11]
 8006456:	3301      	adds	r3, #1
 8006458:	72fb      	strb	r3, [r7, #11]
          break;
 800645a:	e06f      	b.n	800653c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d00b      	beq.n	8006480 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	7c12      	ldrb	r2, [r2, #16]
 8006474:	f107 0108 	add.w	r1, r7, #8
 8006478:	4610      	mov	r0, r2
 800647a:	4798      	blx	r3
 800647c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800647e:	e05d      	b.n	800653c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006480:	6839      	ldr	r1, [r7, #0]
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f000 fa97 	bl	80069b6 <USBD_CtlError>
            err++;
 8006488:	7afb      	ldrb	r3, [r7, #11]
 800648a:	3301      	adds	r3, #1
 800648c:	72fb      	strb	r3, [r7, #11]
          break;
 800648e:	e055      	b.n	800653c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006496:	691b      	ldr	r3, [r3, #16]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d00b      	beq.n	80064b4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064a2:	691b      	ldr	r3, [r3, #16]
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	7c12      	ldrb	r2, [r2, #16]
 80064a8:	f107 0108 	add.w	r1, r7, #8
 80064ac:	4610      	mov	r0, r2
 80064ae:	4798      	blx	r3
 80064b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80064b2:	e043      	b.n	800653c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80064b4:	6839      	ldr	r1, [r7, #0]
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 fa7d 	bl	80069b6 <USBD_CtlError>
            err++;
 80064bc:	7afb      	ldrb	r3, [r7, #11]
 80064be:	3301      	adds	r3, #1
 80064c0:	72fb      	strb	r3, [r7, #11]
          break;
 80064c2:	e03b      	b.n	800653c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064ca:	695b      	ldr	r3, [r3, #20]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d00b      	beq.n	80064e8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064d6:	695b      	ldr	r3, [r3, #20]
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	7c12      	ldrb	r2, [r2, #16]
 80064dc:	f107 0108 	add.w	r1, r7, #8
 80064e0:	4610      	mov	r0, r2
 80064e2:	4798      	blx	r3
 80064e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80064e6:	e029      	b.n	800653c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80064e8:	6839      	ldr	r1, [r7, #0]
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f000 fa63 	bl	80069b6 <USBD_CtlError>
            err++;
 80064f0:	7afb      	ldrb	r3, [r7, #11]
 80064f2:	3301      	adds	r3, #1
 80064f4:	72fb      	strb	r3, [r7, #11]
          break;
 80064f6:	e021      	b.n	800653c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064fe:	699b      	ldr	r3, [r3, #24]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d00b      	beq.n	800651c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800650a:	699b      	ldr	r3, [r3, #24]
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	7c12      	ldrb	r2, [r2, #16]
 8006510:	f107 0108 	add.w	r1, r7, #8
 8006514:	4610      	mov	r0, r2
 8006516:	4798      	blx	r3
 8006518:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800651a:	e00f      	b.n	800653c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800651c:	6839      	ldr	r1, [r7, #0]
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 fa49 	bl	80069b6 <USBD_CtlError>
            err++;
 8006524:	7afb      	ldrb	r3, [r7, #11]
 8006526:	3301      	adds	r3, #1
 8006528:	72fb      	strb	r3, [r7, #11]
          break;
 800652a:	e007      	b.n	800653c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800652c:	6839      	ldr	r1, [r7, #0]
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f000 fa41 	bl	80069b6 <USBD_CtlError>
          err++;
 8006534:	7afb      	ldrb	r3, [r7, #11]
 8006536:	3301      	adds	r3, #1
 8006538:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800653a:	bf00      	nop
      }
      break;
 800653c:	e037      	b.n	80065ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	7c1b      	ldrb	r3, [r3, #16]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d109      	bne.n	800655a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800654c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800654e:	f107 0208 	add.w	r2, r7, #8
 8006552:	4610      	mov	r0, r2
 8006554:	4798      	blx	r3
 8006556:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006558:	e029      	b.n	80065ae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800655a:	6839      	ldr	r1, [r7, #0]
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 fa2a 	bl	80069b6 <USBD_CtlError>
        err++;
 8006562:	7afb      	ldrb	r3, [r7, #11]
 8006564:	3301      	adds	r3, #1
 8006566:	72fb      	strb	r3, [r7, #11]
      break;
 8006568:	e021      	b.n	80065ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	7c1b      	ldrb	r3, [r3, #16]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d10d      	bne.n	800658e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800657a:	f107 0208 	add.w	r2, r7, #8
 800657e:	4610      	mov	r0, r2
 8006580:	4798      	blx	r3
 8006582:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	3301      	adds	r3, #1
 8006588:	2207      	movs	r2, #7
 800658a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800658c:	e00f      	b.n	80065ae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800658e:	6839      	ldr	r1, [r7, #0]
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f000 fa10 	bl	80069b6 <USBD_CtlError>
        err++;
 8006596:	7afb      	ldrb	r3, [r7, #11]
 8006598:	3301      	adds	r3, #1
 800659a:	72fb      	strb	r3, [r7, #11]
      break;
 800659c:	e007      	b.n	80065ae <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800659e:	6839      	ldr	r1, [r7, #0]
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f000 fa08 	bl	80069b6 <USBD_CtlError>
      err++;
 80065a6:	7afb      	ldrb	r3, [r7, #11]
 80065a8:	3301      	adds	r3, #1
 80065aa:	72fb      	strb	r3, [r7, #11]
      break;
 80065ac:	bf00      	nop
  }

  if (err != 0U)
 80065ae:	7afb      	ldrb	r3, [r7, #11]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d11e      	bne.n	80065f2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	88db      	ldrh	r3, [r3, #6]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d016      	beq.n	80065ea <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80065bc:	893b      	ldrh	r3, [r7, #8]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d00e      	beq.n	80065e0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	88da      	ldrh	r2, [r3, #6]
 80065c6:	893b      	ldrh	r3, [r7, #8]
 80065c8:	4293      	cmp	r3, r2
 80065ca:	bf28      	it	cs
 80065cc:	4613      	movcs	r3, r2
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80065d2:	893b      	ldrh	r3, [r7, #8]
 80065d4:	461a      	mov	r2, r3
 80065d6:	68f9      	ldr	r1, [r7, #12]
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f000 fa5d 	bl	8006a98 <USBD_CtlSendData>
 80065de:	e009      	b.n	80065f4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80065e0:	6839      	ldr	r1, [r7, #0]
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f000 f9e7 	bl	80069b6 <USBD_CtlError>
 80065e8:	e004      	b.n	80065f4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 faae 	bl	8006b4c <USBD_CtlSendStatus>
 80065f0:	e000      	b.n	80065f4 <USBD_GetDescriptor+0x2cc>
    return;
 80065f2:	bf00      	nop
  }
}
 80065f4:	3710      	adds	r7, #16
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	bf00      	nop

080065fc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b084      	sub	sp, #16
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	889b      	ldrh	r3, [r3, #4]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d131      	bne.n	8006672 <USBD_SetAddress+0x76>
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	88db      	ldrh	r3, [r3, #6]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d12d      	bne.n	8006672 <USBD_SetAddress+0x76>
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	885b      	ldrh	r3, [r3, #2]
 800661a:	2b7f      	cmp	r3, #127	; 0x7f
 800661c:	d829      	bhi.n	8006672 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	885b      	ldrh	r3, [r3, #2]
 8006622:	b2db      	uxtb	r3, r3
 8006624:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006628:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006630:	b2db      	uxtb	r3, r3
 8006632:	2b03      	cmp	r3, #3
 8006634:	d104      	bne.n	8006640 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006636:	6839      	ldr	r1, [r7, #0]
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f000 f9bc 	bl	80069b6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800663e:	e01d      	b.n	800667c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	7bfa      	ldrb	r2, [r7, #15]
 8006644:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006648:	7bfb      	ldrb	r3, [r7, #15]
 800664a:	4619      	mov	r1, r3
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f003 fcc7 	bl	8009fe0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 fa7a 	bl	8006b4c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006658:	7bfb      	ldrb	r3, [r7, #15]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d004      	beq.n	8006668 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2202      	movs	r2, #2
 8006662:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006666:	e009      	b.n	800667c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2201      	movs	r2, #1
 800666c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006670:	e004      	b.n	800667c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006672:	6839      	ldr	r1, [r7, #0]
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f000 f99e 	bl	80069b6 <USBD_CtlError>
  }
}
 800667a:	bf00      	nop
 800667c:	bf00      	nop
 800667e:	3710      	adds	r7, #16
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}

08006684 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b084      	sub	sp, #16
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800668e:	2300      	movs	r3, #0
 8006690:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	885b      	ldrh	r3, [r3, #2]
 8006696:	b2da      	uxtb	r2, r3
 8006698:	4b4e      	ldr	r3, [pc, #312]	; (80067d4 <USBD_SetConfig+0x150>)
 800669a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800669c:	4b4d      	ldr	r3, [pc, #308]	; (80067d4 <USBD_SetConfig+0x150>)
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d905      	bls.n	80066b0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80066a4:	6839      	ldr	r1, [r7, #0]
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f000 f985 	bl	80069b6 <USBD_CtlError>
    return USBD_FAIL;
 80066ac:	2303      	movs	r3, #3
 80066ae:	e08c      	b.n	80067ca <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066b6:	b2db      	uxtb	r3, r3
 80066b8:	2b02      	cmp	r3, #2
 80066ba:	d002      	beq.n	80066c2 <USBD_SetConfig+0x3e>
 80066bc:	2b03      	cmp	r3, #3
 80066be:	d029      	beq.n	8006714 <USBD_SetConfig+0x90>
 80066c0:	e075      	b.n	80067ae <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80066c2:	4b44      	ldr	r3, [pc, #272]	; (80067d4 <USBD_SetConfig+0x150>)
 80066c4:	781b      	ldrb	r3, [r3, #0]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d020      	beq.n	800670c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80066ca:	4b42      	ldr	r3, [pc, #264]	; (80067d4 <USBD_SetConfig+0x150>)
 80066cc:	781b      	ldrb	r3, [r3, #0]
 80066ce:	461a      	mov	r2, r3
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80066d4:	4b3f      	ldr	r3, [pc, #252]	; (80067d4 <USBD_SetConfig+0x150>)
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	4619      	mov	r1, r3
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f7fe ffe7 	bl	80056ae <USBD_SetClassConfig>
 80066e0:	4603      	mov	r3, r0
 80066e2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80066e4:	7bfb      	ldrb	r3, [r7, #15]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d008      	beq.n	80066fc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80066ea:	6839      	ldr	r1, [r7, #0]
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f000 f962 	bl	80069b6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2202      	movs	r2, #2
 80066f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80066fa:	e065      	b.n	80067c8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f000 fa25 	bl	8006b4c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2203      	movs	r2, #3
 8006706:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800670a:	e05d      	b.n	80067c8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f000 fa1d 	bl	8006b4c <USBD_CtlSendStatus>
      break;
 8006712:	e059      	b.n	80067c8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006714:	4b2f      	ldr	r3, [pc, #188]	; (80067d4 <USBD_SetConfig+0x150>)
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d112      	bne.n	8006742 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2202      	movs	r2, #2
 8006720:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006724:	4b2b      	ldr	r3, [pc, #172]	; (80067d4 <USBD_SetConfig+0x150>)
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	461a      	mov	r2, r3
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800672e:	4b29      	ldr	r3, [pc, #164]	; (80067d4 <USBD_SetConfig+0x150>)
 8006730:	781b      	ldrb	r3, [r3, #0]
 8006732:	4619      	mov	r1, r3
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f7fe ffd6 	bl	80056e6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 fa06 	bl	8006b4c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006740:	e042      	b.n	80067c8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006742:	4b24      	ldr	r3, [pc, #144]	; (80067d4 <USBD_SetConfig+0x150>)
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	461a      	mov	r2, r3
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	429a      	cmp	r2, r3
 800674e:	d02a      	beq.n	80067a6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	b2db      	uxtb	r3, r3
 8006756:	4619      	mov	r1, r3
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f7fe ffc4 	bl	80056e6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800675e:	4b1d      	ldr	r3, [pc, #116]	; (80067d4 <USBD_SetConfig+0x150>)
 8006760:	781b      	ldrb	r3, [r3, #0]
 8006762:	461a      	mov	r2, r3
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006768:	4b1a      	ldr	r3, [pc, #104]	; (80067d4 <USBD_SetConfig+0x150>)
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	4619      	mov	r1, r3
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f7fe ff9d 	bl	80056ae <USBD_SetClassConfig>
 8006774:	4603      	mov	r3, r0
 8006776:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006778:	7bfb      	ldrb	r3, [r7, #15]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d00f      	beq.n	800679e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800677e:	6839      	ldr	r1, [r7, #0]
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f000 f918 	bl	80069b6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	b2db      	uxtb	r3, r3
 800678c:	4619      	mov	r1, r3
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f7fe ffa9 	bl	80056e6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2202      	movs	r2, #2
 8006798:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800679c:	e014      	b.n	80067c8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f000 f9d4 	bl	8006b4c <USBD_CtlSendStatus>
      break;
 80067a4:	e010      	b.n	80067c8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 f9d0 	bl	8006b4c <USBD_CtlSendStatus>
      break;
 80067ac:	e00c      	b.n	80067c8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80067ae:	6839      	ldr	r1, [r7, #0]
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f000 f900 	bl	80069b6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80067b6:	4b07      	ldr	r3, [pc, #28]	; (80067d4 <USBD_SetConfig+0x150>)
 80067b8:	781b      	ldrb	r3, [r3, #0]
 80067ba:	4619      	mov	r1, r3
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f7fe ff92 	bl	80056e6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80067c2:	2303      	movs	r3, #3
 80067c4:	73fb      	strb	r3, [r7, #15]
      break;
 80067c6:	bf00      	nop
  }

  return ret;
 80067c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3710      	adds	r7, #16
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
 80067d2:	bf00      	nop
 80067d4:	200001d8 	.word	0x200001d8

080067d8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b082      	sub	sp, #8
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	88db      	ldrh	r3, [r3, #6]
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d004      	beq.n	80067f4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80067ea:	6839      	ldr	r1, [r7, #0]
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f000 f8e2 	bl	80069b6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80067f2:	e023      	b.n	800683c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	2b02      	cmp	r3, #2
 80067fe:	dc02      	bgt.n	8006806 <USBD_GetConfig+0x2e>
 8006800:	2b00      	cmp	r3, #0
 8006802:	dc03      	bgt.n	800680c <USBD_GetConfig+0x34>
 8006804:	e015      	b.n	8006832 <USBD_GetConfig+0x5a>
 8006806:	2b03      	cmp	r3, #3
 8006808:	d00b      	beq.n	8006822 <USBD_GetConfig+0x4a>
 800680a:	e012      	b.n	8006832 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	3308      	adds	r3, #8
 8006816:	2201      	movs	r2, #1
 8006818:	4619      	mov	r1, r3
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f000 f93c 	bl	8006a98 <USBD_CtlSendData>
        break;
 8006820:	e00c      	b.n	800683c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	3304      	adds	r3, #4
 8006826:	2201      	movs	r2, #1
 8006828:	4619      	mov	r1, r3
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 f934 	bl	8006a98 <USBD_CtlSendData>
        break;
 8006830:	e004      	b.n	800683c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006832:	6839      	ldr	r1, [r7, #0]
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f000 f8be 	bl	80069b6 <USBD_CtlError>
        break;
 800683a:	bf00      	nop
}
 800683c:	bf00      	nop
 800683e:	3708      	adds	r7, #8
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}

08006844 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b082      	sub	sp, #8
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006854:	b2db      	uxtb	r3, r3
 8006856:	3b01      	subs	r3, #1
 8006858:	2b02      	cmp	r3, #2
 800685a:	d81e      	bhi.n	800689a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	88db      	ldrh	r3, [r3, #6]
 8006860:	2b02      	cmp	r3, #2
 8006862:	d004      	beq.n	800686e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006864:	6839      	ldr	r1, [r7, #0]
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f000 f8a5 	bl	80069b6 <USBD_CtlError>
        break;
 800686c:	e01a      	b.n	80068a4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2201      	movs	r2, #1
 8006872:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800687a:	2b00      	cmp	r3, #0
 800687c:	d005      	beq.n	800688a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	68db      	ldr	r3, [r3, #12]
 8006882:	f043 0202 	orr.w	r2, r3, #2
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	330c      	adds	r3, #12
 800688e:	2202      	movs	r2, #2
 8006890:	4619      	mov	r1, r3
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f000 f900 	bl	8006a98 <USBD_CtlSendData>
      break;
 8006898:	e004      	b.n	80068a4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800689a:	6839      	ldr	r1, [r7, #0]
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f000 f88a 	bl	80069b6 <USBD_CtlError>
      break;
 80068a2:	bf00      	nop
  }
}
 80068a4:	bf00      	nop
 80068a6:	3708      	adds	r7, #8
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b082      	sub	sp, #8
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	885b      	ldrh	r3, [r3, #2]
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d107      	bne.n	80068ce <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2201      	movs	r2, #1
 80068c2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 f940 	bl	8006b4c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80068cc:	e013      	b.n	80068f6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	885b      	ldrh	r3, [r3, #2]
 80068d2:	2b02      	cmp	r3, #2
 80068d4:	d10b      	bne.n	80068ee <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	889b      	ldrh	r3, [r3, #4]
 80068da:	0a1b      	lsrs	r3, r3, #8
 80068dc:	b29b      	uxth	r3, r3
 80068de:	b2da      	uxtb	r2, r3
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f000 f930 	bl	8006b4c <USBD_CtlSendStatus>
}
 80068ec:	e003      	b.n	80068f6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80068ee:	6839      	ldr	r1, [r7, #0]
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f000 f860 	bl	80069b6 <USBD_CtlError>
}
 80068f6:	bf00      	nop
 80068f8:	3708      	adds	r7, #8
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}

080068fe <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068fe:	b580      	push	{r7, lr}
 8006900:	b082      	sub	sp, #8
 8006902:	af00      	add	r7, sp, #0
 8006904:	6078      	str	r0, [r7, #4]
 8006906:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800690e:	b2db      	uxtb	r3, r3
 8006910:	3b01      	subs	r3, #1
 8006912:	2b02      	cmp	r3, #2
 8006914:	d80b      	bhi.n	800692e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	885b      	ldrh	r3, [r3, #2]
 800691a:	2b01      	cmp	r3, #1
 800691c:	d10c      	bne.n	8006938 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 f910 	bl	8006b4c <USBD_CtlSendStatus>
      }
      break;
 800692c:	e004      	b.n	8006938 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800692e:	6839      	ldr	r1, [r7, #0]
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f000 f840 	bl	80069b6 <USBD_CtlError>
      break;
 8006936:	e000      	b.n	800693a <USBD_ClrFeature+0x3c>
      break;
 8006938:	bf00      	nop
  }
}
 800693a:	bf00      	nop
 800693c:	3708      	adds	r7, #8
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}

08006942 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006942:	b580      	push	{r7, lr}
 8006944:	b084      	sub	sp, #16
 8006946:	af00      	add	r7, sp, #0
 8006948:	6078      	str	r0, [r7, #4]
 800694a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	781a      	ldrb	r2, [r3, #0]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	3301      	adds	r3, #1
 800695c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	781a      	ldrb	r2, [r3, #0]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	3301      	adds	r3, #1
 800696a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800696c:	68f8      	ldr	r0, [r7, #12]
 800696e:	f7ff fa41 	bl	8005df4 <SWAPBYTE>
 8006972:	4603      	mov	r3, r0
 8006974:	461a      	mov	r2, r3
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	3301      	adds	r3, #1
 800697e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	3301      	adds	r3, #1
 8006984:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006986:	68f8      	ldr	r0, [r7, #12]
 8006988:	f7ff fa34 	bl	8005df4 <SWAPBYTE>
 800698c:	4603      	mov	r3, r0
 800698e:	461a      	mov	r2, r3
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	3301      	adds	r3, #1
 8006998:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	3301      	adds	r3, #1
 800699e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80069a0:	68f8      	ldr	r0, [r7, #12]
 80069a2:	f7ff fa27 	bl	8005df4 <SWAPBYTE>
 80069a6:	4603      	mov	r3, r0
 80069a8:	461a      	mov	r2, r3
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	80da      	strh	r2, [r3, #6]
}
 80069ae:	bf00      	nop
 80069b0:	3710      	adds	r7, #16
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}

080069b6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069b6:	b580      	push	{r7, lr}
 80069b8:	b082      	sub	sp, #8
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	6078      	str	r0, [r7, #4]
 80069be:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80069c0:	2180      	movs	r1, #128	; 0x80
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f003 faa2 	bl	8009f0c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80069c8:	2100      	movs	r1, #0
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f003 fa9e 	bl	8009f0c <USBD_LL_StallEP>
}
 80069d0:	bf00      	nop
 80069d2:	3708      	adds	r7, #8
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b086      	sub	sp, #24
 80069dc:	af00      	add	r7, sp, #0
 80069de:	60f8      	str	r0, [r7, #12]
 80069e0:	60b9      	str	r1, [r7, #8]
 80069e2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80069e4:	2300      	movs	r3, #0
 80069e6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d036      	beq.n	8006a5c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80069f2:	6938      	ldr	r0, [r7, #16]
 80069f4:	f000 f836 	bl	8006a64 <USBD_GetLen>
 80069f8:	4603      	mov	r3, r0
 80069fa:	3301      	adds	r3, #1
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	005b      	lsls	r3, r3, #1
 8006a00:	b29a      	uxth	r2, r3
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006a06:	7dfb      	ldrb	r3, [r7, #23]
 8006a08:	68ba      	ldr	r2, [r7, #8]
 8006a0a:	4413      	add	r3, r2
 8006a0c:	687a      	ldr	r2, [r7, #4]
 8006a0e:	7812      	ldrb	r2, [r2, #0]
 8006a10:	701a      	strb	r2, [r3, #0]
  idx++;
 8006a12:	7dfb      	ldrb	r3, [r7, #23]
 8006a14:	3301      	adds	r3, #1
 8006a16:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006a18:	7dfb      	ldrb	r3, [r7, #23]
 8006a1a:	68ba      	ldr	r2, [r7, #8]
 8006a1c:	4413      	add	r3, r2
 8006a1e:	2203      	movs	r2, #3
 8006a20:	701a      	strb	r2, [r3, #0]
  idx++;
 8006a22:	7dfb      	ldrb	r3, [r7, #23]
 8006a24:	3301      	adds	r3, #1
 8006a26:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006a28:	e013      	b.n	8006a52 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006a2a:	7dfb      	ldrb	r3, [r7, #23]
 8006a2c:	68ba      	ldr	r2, [r7, #8]
 8006a2e:	4413      	add	r3, r2
 8006a30:	693a      	ldr	r2, [r7, #16]
 8006a32:	7812      	ldrb	r2, [r2, #0]
 8006a34:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	3301      	adds	r3, #1
 8006a3a:	613b      	str	r3, [r7, #16]
    idx++;
 8006a3c:	7dfb      	ldrb	r3, [r7, #23]
 8006a3e:	3301      	adds	r3, #1
 8006a40:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006a42:	7dfb      	ldrb	r3, [r7, #23]
 8006a44:	68ba      	ldr	r2, [r7, #8]
 8006a46:	4413      	add	r3, r2
 8006a48:	2200      	movs	r2, #0
 8006a4a:	701a      	strb	r2, [r3, #0]
    idx++;
 8006a4c:	7dfb      	ldrb	r3, [r7, #23]
 8006a4e:	3301      	adds	r3, #1
 8006a50:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d1e7      	bne.n	8006a2a <USBD_GetString+0x52>
 8006a5a:	e000      	b.n	8006a5e <USBD_GetString+0x86>
    return;
 8006a5c:	bf00      	nop
  }
}
 8006a5e:	3718      	adds	r7, #24
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b085      	sub	sp, #20
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006a74:	e005      	b.n	8006a82 <USBD_GetLen+0x1e>
  {
    len++;
 8006a76:	7bfb      	ldrb	r3, [r7, #15]
 8006a78:	3301      	adds	r3, #1
 8006a7a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	3301      	adds	r3, #1
 8006a80:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d1f5      	bne.n	8006a76 <USBD_GetLen+0x12>
  }

  return len;
 8006a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3714      	adds	r7, #20
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr

08006a98 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b084      	sub	sp, #16
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	60f8      	str	r0, [r7, #12]
 8006aa0:	60b9      	str	r1, [r7, #8]
 8006aa2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2202      	movs	r2, #2
 8006aa8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	68ba      	ldr	r2, [r7, #8]
 8006abc:	2100      	movs	r1, #0
 8006abe:	68f8      	ldr	r0, [r7, #12]
 8006ac0:	f003 faad 	bl	800a01e <USBD_LL_Transmit>

  return USBD_OK;
 8006ac4:	2300      	movs	r3, #0
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3710      	adds	r7, #16
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}

08006ace <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006ace:	b580      	push	{r7, lr}
 8006ad0:	b084      	sub	sp, #16
 8006ad2:	af00      	add	r7, sp, #0
 8006ad4:	60f8      	str	r0, [r7, #12]
 8006ad6:	60b9      	str	r1, [r7, #8]
 8006ad8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	68ba      	ldr	r2, [r7, #8]
 8006ade:	2100      	movs	r1, #0
 8006ae0:	68f8      	ldr	r0, [r7, #12]
 8006ae2:	f003 fa9c 	bl	800a01e <USBD_LL_Transmit>

  return USBD_OK;
 8006ae6:	2300      	movs	r3, #0
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3710      	adds	r7, #16
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}

08006af0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b084      	sub	sp, #16
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	60f8      	str	r0, [r7, #12]
 8006af8:	60b9      	str	r1, [r7, #8]
 8006afa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2203      	movs	r2, #3
 8006b00:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	687a      	ldr	r2, [r7, #4]
 8006b10:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	68ba      	ldr	r2, [r7, #8]
 8006b18:	2100      	movs	r1, #0
 8006b1a:	68f8      	ldr	r0, [r7, #12]
 8006b1c:	f003 faa0 	bl	800a060 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006b20:	2300      	movs	r3, #0
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3710      	adds	r7, #16
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}

08006b2a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006b2a:	b580      	push	{r7, lr}
 8006b2c:	b084      	sub	sp, #16
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	60f8      	str	r0, [r7, #12]
 8006b32:	60b9      	str	r1, [r7, #8]
 8006b34:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	68ba      	ldr	r2, [r7, #8]
 8006b3a:	2100      	movs	r1, #0
 8006b3c:	68f8      	ldr	r0, [r7, #12]
 8006b3e:	f003 fa8f 	bl	800a060 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006b42:	2300      	movs	r3, #0
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3710      	adds	r7, #16
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b082      	sub	sp, #8
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2204      	movs	r2, #4
 8006b58:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	2200      	movs	r2, #0
 8006b60:	2100      	movs	r1, #0
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f003 fa5b 	bl	800a01e <USBD_LL_Transmit>

  return USBD_OK;
 8006b68:	2300      	movs	r3, #0
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3708      	adds	r7, #8
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}

08006b72 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006b72:	b580      	push	{r7, lr}
 8006b74:	b082      	sub	sp, #8
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2205      	movs	r2, #5
 8006b7e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b82:	2300      	movs	r3, #0
 8006b84:	2200      	movs	r2, #0
 8006b86:	2100      	movs	r1, #0
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f003 fa69 	bl	800a060 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006b8e:	2300      	movs	r3, #0
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3708      	adds	r7, #8
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}

08006b98 <__NVIC_SetPriority>:
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b083      	sub	sp, #12
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	6039      	str	r1, [r7, #0]
 8006ba2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	db0a      	blt.n	8006bc2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	b2da      	uxtb	r2, r3
 8006bb0:	490c      	ldr	r1, [pc, #48]	; (8006be4 <__NVIC_SetPriority+0x4c>)
 8006bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bb6:	0112      	lsls	r2, r2, #4
 8006bb8:	b2d2      	uxtb	r2, r2
 8006bba:	440b      	add	r3, r1
 8006bbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006bc0:	e00a      	b.n	8006bd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	b2da      	uxtb	r2, r3
 8006bc6:	4908      	ldr	r1, [pc, #32]	; (8006be8 <__NVIC_SetPriority+0x50>)
 8006bc8:	79fb      	ldrb	r3, [r7, #7]
 8006bca:	f003 030f 	and.w	r3, r3, #15
 8006bce:	3b04      	subs	r3, #4
 8006bd0:	0112      	lsls	r2, r2, #4
 8006bd2:	b2d2      	uxtb	r2, r2
 8006bd4:	440b      	add	r3, r1
 8006bd6:	761a      	strb	r2, [r3, #24]
}
 8006bd8:	bf00      	nop
 8006bda:	370c      	adds	r7, #12
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr
 8006be4:	e000e100 	.word	0xe000e100
 8006be8:	e000ed00 	.word	0xe000ed00

08006bec <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006bec:	b580      	push	{r7, lr}
 8006bee:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006bf0:	4b05      	ldr	r3, [pc, #20]	; (8006c08 <SysTick_Handler+0x1c>)
 8006bf2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006bf4:	f001 fd28 	bl	8008648 <xTaskGetSchedulerState>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d001      	beq.n	8006c02 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006bfe:	f002 fb13 	bl	8009228 <xPortSysTickHandler>
  }
}
 8006c02:	bf00      	nop
 8006c04:	bd80      	pop	{r7, pc}
 8006c06:	bf00      	nop
 8006c08:	e000e010 	.word	0xe000e010

08006c0c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006c10:	2100      	movs	r1, #0
 8006c12:	f06f 0004 	mvn.w	r0, #4
 8006c16:	f7ff ffbf 	bl	8006b98 <__NVIC_SetPriority>
#endif
}
 8006c1a:	bf00      	nop
 8006c1c:	bd80      	pop	{r7, pc}
	...

08006c20 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006c20:	b480      	push	{r7}
 8006c22:	b083      	sub	sp, #12
 8006c24:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c26:	f3ef 8305 	mrs	r3, IPSR
 8006c2a:	603b      	str	r3, [r7, #0]
  return(result);
 8006c2c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d003      	beq.n	8006c3a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006c32:	f06f 0305 	mvn.w	r3, #5
 8006c36:	607b      	str	r3, [r7, #4]
 8006c38:	e00c      	b.n	8006c54 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006c3a:	4b0a      	ldr	r3, [pc, #40]	; (8006c64 <osKernelInitialize+0x44>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d105      	bne.n	8006c4e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006c42:	4b08      	ldr	r3, [pc, #32]	; (8006c64 <osKernelInitialize+0x44>)
 8006c44:	2201      	movs	r2, #1
 8006c46:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	607b      	str	r3, [r7, #4]
 8006c4c:	e002      	b.n	8006c54 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006c4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c52:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006c54:	687b      	ldr	r3, [r7, #4]
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	370c      	adds	r7, #12
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr
 8006c62:	bf00      	nop
 8006c64:	200001dc 	.word	0x200001dc

08006c68 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b082      	sub	sp, #8
 8006c6c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c6e:	f3ef 8305 	mrs	r3, IPSR
 8006c72:	603b      	str	r3, [r7, #0]
  return(result);
 8006c74:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d003      	beq.n	8006c82 <osKernelStart+0x1a>
    stat = osErrorISR;
 8006c7a:	f06f 0305 	mvn.w	r3, #5
 8006c7e:	607b      	str	r3, [r7, #4]
 8006c80:	e010      	b.n	8006ca4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006c82:	4b0b      	ldr	r3, [pc, #44]	; (8006cb0 <osKernelStart+0x48>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	2b01      	cmp	r3, #1
 8006c88:	d109      	bne.n	8006c9e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006c8a:	f7ff ffbf 	bl	8006c0c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006c8e:	4b08      	ldr	r3, [pc, #32]	; (8006cb0 <osKernelStart+0x48>)
 8006c90:	2202      	movs	r2, #2
 8006c92:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006c94:	f001 f87c 	bl	8007d90 <vTaskStartScheduler>
      stat = osOK;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	607b      	str	r3, [r7, #4]
 8006c9c:	e002      	b.n	8006ca4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006c9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ca2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006ca4:	687b      	ldr	r3, [r7, #4]
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3708      	adds	r7, #8
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
 8006cae:	bf00      	nop
 8006cb0:	200001dc 	.word	0x200001dc

08006cb4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b08e      	sub	sp, #56	; 0x38
 8006cb8:	af04      	add	r7, sp, #16
 8006cba:	60f8      	str	r0, [r7, #12]
 8006cbc:	60b9      	str	r1, [r7, #8]
 8006cbe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006cc4:	f3ef 8305 	mrs	r3, IPSR
 8006cc8:	617b      	str	r3, [r7, #20]
  return(result);
 8006cca:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d17e      	bne.n	8006dce <osThreadNew+0x11a>
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d07b      	beq.n	8006dce <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006cd6:	2380      	movs	r3, #128	; 0x80
 8006cd8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006cda:	2318      	movs	r3, #24
 8006cdc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006ce2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ce6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d045      	beq.n	8006d7a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d002      	beq.n	8006cfc <osThreadNew+0x48>
        name = attr->name;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	699b      	ldr	r3, [r3, #24]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d002      	beq.n	8006d0a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	699b      	ldr	r3, [r3, #24]
 8006d08:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006d0a:	69fb      	ldr	r3, [r7, #28]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d008      	beq.n	8006d22 <osThreadNew+0x6e>
 8006d10:	69fb      	ldr	r3, [r7, #28]
 8006d12:	2b38      	cmp	r3, #56	; 0x38
 8006d14:	d805      	bhi.n	8006d22 <osThreadNew+0x6e>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	f003 0301 	and.w	r3, r3, #1
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d001      	beq.n	8006d26 <osThreadNew+0x72>
        return (NULL);
 8006d22:	2300      	movs	r3, #0
 8006d24:	e054      	b.n	8006dd0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	695b      	ldr	r3, [r3, #20]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d003      	beq.n	8006d36 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	695b      	ldr	r3, [r3, #20]
 8006d32:	089b      	lsrs	r3, r3, #2
 8006d34:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d00e      	beq.n	8006d5c <osThreadNew+0xa8>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	68db      	ldr	r3, [r3, #12]
 8006d42:	2bbb      	cmp	r3, #187	; 0xbb
 8006d44:	d90a      	bls.n	8006d5c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d006      	beq.n	8006d5c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	695b      	ldr	r3, [r3, #20]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d002      	beq.n	8006d5c <osThreadNew+0xa8>
        mem = 1;
 8006d56:	2301      	movs	r3, #1
 8006d58:	61bb      	str	r3, [r7, #24]
 8006d5a:	e010      	b.n	8006d7e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	689b      	ldr	r3, [r3, #8]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d10c      	bne.n	8006d7e <osThreadNew+0xca>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	68db      	ldr	r3, [r3, #12]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d108      	bne.n	8006d7e <osThreadNew+0xca>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	691b      	ldr	r3, [r3, #16]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d104      	bne.n	8006d7e <osThreadNew+0xca>
          mem = 0;
 8006d74:	2300      	movs	r3, #0
 8006d76:	61bb      	str	r3, [r7, #24]
 8006d78:	e001      	b.n	8006d7e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006d7e:	69bb      	ldr	r3, [r7, #24]
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d110      	bne.n	8006da6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006d88:	687a      	ldr	r2, [r7, #4]
 8006d8a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006d8c:	9202      	str	r2, [sp, #8]
 8006d8e:	9301      	str	r3, [sp, #4]
 8006d90:	69fb      	ldr	r3, [r7, #28]
 8006d92:	9300      	str	r3, [sp, #0]
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	6a3a      	ldr	r2, [r7, #32]
 8006d98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006d9a:	68f8      	ldr	r0, [r7, #12]
 8006d9c:	f000 fe0c 	bl	80079b8 <xTaskCreateStatic>
 8006da0:	4603      	mov	r3, r0
 8006da2:	613b      	str	r3, [r7, #16]
 8006da4:	e013      	b.n	8006dce <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006da6:	69bb      	ldr	r3, [r7, #24]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d110      	bne.n	8006dce <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006dac:	6a3b      	ldr	r3, [r7, #32]
 8006dae:	b29a      	uxth	r2, r3
 8006db0:	f107 0310 	add.w	r3, r7, #16
 8006db4:	9301      	str	r3, [sp, #4]
 8006db6:	69fb      	ldr	r3, [r7, #28]
 8006db8:	9300      	str	r3, [sp, #0]
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006dbe:	68f8      	ldr	r0, [r7, #12]
 8006dc0:	f000 fe57 	bl	8007a72 <xTaskCreate>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	d001      	beq.n	8006dce <osThreadNew+0x11a>
            hTask = NULL;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006dce:	693b      	ldr	r3, [r7, #16]
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3728      	adds	r7, #40	; 0x28
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}

08006dd8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006de0:	f3ef 8305 	mrs	r3, IPSR
 8006de4:	60bb      	str	r3, [r7, #8]
  return(result);
 8006de6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d003      	beq.n	8006df4 <osDelay+0x1c>
    stat = osErrorISR;
 8006dec:	f06f 0305 	mvn.w	r3, #5
 8006df0:	60fb      	str	r3, [r7, #12]
 8006df2:	e007      	b.n	8006e04 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006df4:	2300      	movs	r3, #0
 8006df6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d002      	beq.n	8006e04 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 ff92 	bl	8007d28 <vTaskDelay>
    }
  }

  return (stat);
 8006e04:	68fb      	ldr	r3, [r7, #12]
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3710      	adds	r7, #16
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
	...

08006e10 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006e10:	b480      	push	{r7}
 8006e12:	b085      	sub	sp, #20
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	60f8      	str	r0, [r7, #12]
 8006e18:	60b9      	str	r1, [r7, #8]
 8006e1a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	4a07      	ldr	r2, [pc, #28]	; (8006e3c <vApplicationGetIdleTaskMemory+0x2c>)
 8006e20:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	4a06      	ldr	r2, [pc, #24]	; (8006e40 <vApplicationGetIdleTaskMemory+0x30>)
 8006e26:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2280      	movs	r2, #128	; 0x80
 8006e2c:	601a      	str	r2, [r3, #0]
}
 8006e2e:	bf00      	nop
 8006e30:	3714      	adds	r7, #20
 8006e32:	46bd      	mov	sp, r7
 8006e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e38:	4770      	bx	lr
 8006e3a:	bf00      	nop
 8006e3c:	200001e0 	.word	0x200001e0
 8006e40:	2000029c 	.word	0x2000029c

08006e44 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006e44:	b480      	push	{r7}
 8006e46:	b085      	sub	sp, #20
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	60f8      	str	r0, [r7, #12]
 8006e4c:	60b9      	str	r1, [r7, #8]
 8006e4e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	4a07      	ldr	r2, [pc, #28]	; (8006e70 <vApplicationGetTimerTaskMemory+0x2c>)
 8006e54:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	4a06      	ldr	r2, [pc, #24]	; (8006e74 <vApplicationGetTimerTaskMemory+0x30>)
 8006e5a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006e62:	601a      	str	r2, [r3, #0]
}
 8006e64:	bf00      	nop
 8006e66:	3714      	adds	r7, #20
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr
 8006e70:	2000049c 	.word	0x2000049c
 8006e74:	20000558 	.word	0x20000558

08006e78 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b083      	sub	sp, #12
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f103 0208 	add.w	r2, r3, #8
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006e90:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f103 0208 	add.w	r2, r3, #8
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f103 0208 	add.w	r2, r3, #8
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006eac:	bf00      	nop
 8006eae:	370c      	adds	r7, #12
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr

08006eb8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b083      	sub	sp, #12
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006ec6:	bf00      	nop
 8006ec8:	370c      	adds	r7, #12
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr

08006ed2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006ed2:	b480      	push	{r7}
 8006ed4:	b085      	sub	sp, #20
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	6078      	str	r0, [r7, #4]
 8006eda:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	68fa      	ldr	r2, [r7, #12]
 8006ee6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	689a      	ldr	r2, [r3, #8]
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	683a      	ldr	r2, [r7, #0]
 8006ef6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	683a      	ldr	r2, [r7, #0]
 8006efc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	687a      	ldr	r2, [r7, #4]
 8006f02:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	1c5a      	adds	r2, r3, #1
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	601a      	str	r2, [r3, #0]
}
 8006f0e:	bf00      	nop
 8006f10:	3714      	adds	r7, #20
 8006f12:	46bd      	mov	sp, r7
 8006f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f18:	4770      	bx	lr

08006f1a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006f1a:	b480      	push	{r7}
 8006f1c:	b085      	sub	sp, #20
 8006f1e:	af00      	add	r7, sp, #0
 8006f20:	6078      	str	r0, [r7, #4]
 8006f22:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f30:	d103      	bne.n	8006f3a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	691b      	ldr	r3, [r3, #16]
 8006f36:	60fb      	str	r3, [r7, #12]
 8006f38:	e00c      	b.n	8006f54 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	3308      	adds	r3, #8
 8006f3e:	60fb      	str	r3, [r7, #12]
 8006f40:	e002      	b.n	8006f48 <vListInsert+0x2e>
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	60fb      	str	r3, [r7, #12]
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	68ba      	ldr	r2, [r7, #8]
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d2f6      	bcs.n	8006f42 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	685a      	ldr	r2, [r3, #4]
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	683a      	ldr	r2, [r7, #0]
 8006f62:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	68fa      	ldr	r2, [r7, #12]
 8006f68:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	683a      	ldr	r2, [r7, #0]
 8006f6e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	687a      	ldr	r2, [r7, #4]
 8006f74:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	1c5a      	adds	r2, r3, #1
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	601a      	str	r2, [r3, #0]
}
 8006f80:	bf00      	nop
 8006f82:	3714      	adds	r7, #20
 8006f84:	46bd      	mov	sp, r7
 8006f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8a:	4770      	bx	lr

08006f8c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b085      	sub	sp, #20
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	691b      	ldr	r3, [r3, #16]
 8006f98:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	6892      	ldr	r2, [r2, #8]
 8006fa2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	687a      	ldr	r2, [r7, #4]
 8006faa:	6852      	ldr	r2, [r2, #4]
 8006fac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	687a      	ldr	r2, [r7, #4]
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d103      	bne.n	8006fc0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	689a      	ldr	r2, [r3, #8]
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	1e5a      	subs	r2, r3, #1
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3714      	adds	r7, #20
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr

08006fe0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b084      	sub	sp, #16
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d10a      	bne.n	800700a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff8:	f383 8811 	msr	BASEPRI, r3
 8006ffc:	f3bf 8f6f 	isb	sy
 8007000:	f3bf 8f4f 	dsb	sy
 8007004:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007006:	bf00      	nop
 8007008:	e7fe      	b.n	8007008 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800700a:	f002 f87b 	bl	8009104 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681a      	ldr	r2, [r3, #0]
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007016:	68f9      	ldr	r1, [r7, #12]
 8007018:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800701a:	fb01 f303 	mul.w	r3, r1, r3
 800701e:	441a      	add	r2, r3
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2200      	movs	r2, #0
 8007028:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681a      	ldr	r2, [r3, #0]
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800703a:	3b01      	subs	r3, #1
 800703c:	68f9      	ldr	r1, [r7, #12]
 800703e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007040:	fb01 f303 	mul.w	r3, r1, r3
 8007044:	441a      	add	r2, r3
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	22ff      	movs	r2, #255	; 0xff
 800704e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	22ff      	movs	r2, #255	; 0xff
 8007056:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d114      	bne.n	800708a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	691b      	ldr	r3, [r3, #16]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d01a      	beq.n	800709e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	3310      	adds	r3, #16
 800706c:	4618      	mov	r0, r3
 800706e:	f001 f929 	bl	80082c4 <xTaskRemoveFromEventList>
 8007072:	4603      	mov	r3, r0
 8007074:	2b00      	cmp	r3, #0
 8007076:	d012      	beq.n	800709e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007078:	4b0c      	ldr	r3, [pc, #48]	; (80070ac <xQueueGenericReset+0xcc>)
 800707a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800707e:	601a      	str	r2, [r3, #0]
 8007080:	f3bf 8f4f 	dsb	sy
 8007084:	f3bf 8f6f 	isb	sy
 8007088:	e009      	b.n	800709e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	3310      	adds	r3, #16
 800708e:	4618      	mov	r0, r3
 8007090:	f7ff fef2 	bl	8006e78 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	3324      	adds	r3, #36	; 0x24
 8007098:	4618      	mov	r0, r3
 800709a:	f7ff feed 	bl	8006e78 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800709e:	f002 f861 	bl	8009164 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80070a2:	2301      	movs	r3, #1
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3710      	adds	r7, #16
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}
 80070ac:	e000ed04 	.word	0xe000ed04

080070b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b08e      	sub	sp, #56	; 0x38
 80070b4:	af02      	add	r7, sp, #8
 80070b6:	60f8      	str	r0, [r7, #12]
 80070b8:	60b9      	str	r1, [r7, #8]
 80070ba:	607a      	str	r2, [r7, #4]
 80070bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d10a      	bne.n	80070da <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80070c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c8:	f383 8811 	msr	BASEPRI, r3
 80070cc:	f3bf 8f6f 	isb	sy
 80070d0:	f3bf 8f4f 	dsb	sy
 80070d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80070d6:	bf00      	nop
 80070d8:	e7fe      	b.n	80070d8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d10a      	bne.n	80070f6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80070e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e4:	f383 8811 	msr	BASEPRI, r3
 80070e8:	f3bf 8f6f 	isb	sy
 80070ec:	f3bf 8f4f 	dsb	sy
 80070f0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80070f2:	bf00      	nop
 80070f4:	e7fe      	b.n	80070f4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d002      	beq.n	8007102 <xQueueGenericCreateStatic+0x52>
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d001      	beq.n	8007106 <xQueueGenericCreateStatic+0x56>
 8007102:	2301      	movs	r3, #1
 8007104:	e000      	b.n	8007108 <xQueueGenericCreateStatic+0x58>
 8007106:	2300      	movs	r3, #0
 8007108:	2b00      	cmp	r3, #0
 800710a:	d10a      	bne.n	8007122 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800710c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007110:	f383 8811 	msr	BASEPRI, r3
 8007114:	f3bf 8f6f 	isb	sy
 8007118:	f3bf 8f4f 	dsb	sy
 800711c:	623b      	str	r3, [r7, #32]
}
 800711e:	bf00      	nop
 8007120:	e7fe      	b.n	8007120 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d102      	bne.n	800712e <xQueueGenericCreateStatic+0x7e>
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d101      	bne.n	8007132 <xQueueGenericCreateStatic+0x82>
 800712e:	2301      	movs	r3, #1
 8007130:	e000      	b.n	8007134 <xQueueGenericCreateStatic+0x84>
 8007132:	2300      	movs	r3, #0
 8007134:	2b00      	cmp	r3, #0
 8007136:	d10a      	bne.n	800714e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800713c:	f383 8811 	msr	BASEPRI, r3
 8007140:	f3bf 8f6f 	isb	sy
 8007144:	f3bf 8f4f 	dsb	sy
 8007148:	61fb      	str	r3, [r7, #28]
}
 800714a:	bf00      	nop
 800714c:	e7fe      	b.n	800714c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800714e:	2350      	movs	r3, #80	; 0x50
 8007150:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	2b50      	cmp	r3, #80	; 0x50
 8007156:	d00a      	beq.n	800716e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800715c:	f383 8811 	msr	BASEPRI, r3
 8007160:	f3bf 8f6f 	isb	sy
 8007164:	f3bf 8f4f 	dsb	sy
 8007168:	61bb      	str	r3, [r7, #24]
}
 800716a:	bf00      	nop
 800716c:	e7fe      	b.n	800716c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800716e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007176:	2b00      	cmp	r3, #0
 8007178:	d00d      	beq.n	8007196 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800717a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800717c:	2201      	movs	r2, #1
 800717e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007182:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007188:	9300      	str	r3, [sp, #0]
 800718a:	4613      	mov	r3, r2
 800718c:	687a      	ldr	r2, [r7, #4]
 800718e:	68b9      	ldr	r1, [r7, #8]
 8007190:	68f8      	ldr	r0, [r7, #12]
 8007192:	f000 f805 	bl	80071a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007198:	4618      	mov	r0, r3
 800719a:	3730      	adds	r7, #48	; 0x30
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b084      	sub	sp, #16
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	60f8      	str	r0, [r7, #12]
 80071a8:	60b9      	str	r1, [r7, #8]
 80071aa:	607a      	str	r2, [r7, #4]
 80071ac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d103      	bne.n	80071bc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80071b4:	69bb      	ldr	r3, [r7, #24]
 80071b6:	69ba      	ldr	r2, [r7, #24]
 80071b8:	601a      	str	r2, [r3, #0]
 80071ba:	e002      	b.n	80071c2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80071bc:	69bb      	ldr	r3, [r7, #24]
 80071be:	687a      	ldr	r2, [r7, #4]
 80071c0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80071c2:	69bb      	ldr	r3, [r7, #24]
 80071c4:	68fa      	ldr	r2, [r7, #12]
 80071c6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80071c8:	69bb      	ldr	r3, [r7, #24]
 80071ca:	68ba      	ldr	r2, [r7, #8]
 80071cc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80071ce:	2101      	movs	r1, #1
 80071d0:	69b8      	ldr	r0, [r7, #24]
 80071d2:	f7ff ff05 	bl	8006fe0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80071d6:	69bb      	ldr	r3, [r7, #24]
 80071d8:	78fa      	ldrb	r2, [r7, #3]
 80071da:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80071de:	bf00      	nop
 80071e0:	3710      	adds	r7, #16
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}
	...

080071e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b08e      	sub	sp, #56	; 0x38
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	60f8      	str	r0, [r7, #12]
 80071f0:	60b9      	str	r1, [r7, #8]
 80071f2:	607a      	str	r2, [r7, #4]
 80071f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80071f6:	2300      	movs	r3, #0
 80071f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80071fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007200:	2b00      	cmp	r3, #0
 8007202:	d10a      	bne.n	800721a <xQueueGenericSend+0x32>
	__asm volatile
 8007204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007208:	f383 8811 	msr	BASEPRI, r3
 800720c:	f3bf 8f6f 	isb	sy
 8007210:	f3bf 8f4f 	dsb	sy
 8007214:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007216:	bf00      	nop
 8007218:	e7fe      	b.n	8007218 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d103      	bne.n	8007228 <xQueueGenericSend+0x40>
 8007220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007224:	2b00      	cmp	r3, #0
 8007226:	d101      	bne.n	800722c <xQueueGenericSend+0x44>
 8007228:	2301      	movs	r3, #1
 800722a:	e000      	b.n	800722e <xQueueGenericSend+0x46>
 800722c:	2300      	movs	r3, #0
 800722e:	2b00      	cmp	r3, #0
 8007230:	d10a      	bne.n	8007248 <xQueueGenericSend+0x60>
	__asm volatile
 8007232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007236:	f383 8811 	msr	BASEPRI, r3
 800723a:	f3bf 8f6f 	isb	sy
 800723e:	f3bf 8f4f 	dsb	sy
 8007242:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007244:	bf00      	nop
 8007246:	e7fe      	b.n	8007246 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	2b02      	cmp	r3, #2
 800724c:	d103      	bne.n	8007256 <xQueueGenericSend+0x6e>
 800724e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007252:	2b01      	cmp	r3, #1
 8007254:	d101      	bne.n	800725a <xQueueGenericSend+0x72>
 8007256:	2301      	movs	r3, #1
 8007258:	e000      	b.n	800725c <xQueueGenericSend+0x74>
 800725a:	2300      	movs	r3, #0
 800725c:	2b00      	cmp	r3, #0
 800725e:	d10a      	bne.n	8007276 <xQueueGenericSend+0x8e>
	__asm volatile
 8007260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007264:	f383 8811 	msr	BASEPRI, r3
 8007268:	f3bf 8f6f 	isb	sy
 800726c:	f3bf 8f4f 	dsb	sy
 8007270:	623b      	str	r3, [r7, #32]
}
 8007272:	bf00      	nop
 8007274:	e7fe      	b.n	8007274 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007276:	f001 f9e7 	bl	8008648 <xTaskGetSchedulerState>
 800727a:	4603      	mov	r3, r0
 800727c:	2b00      	cmp	r3, #0
 800727e:	d102      	bne.n	8007286 <xQueueGenericSend+0x9e>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d101      	bne.n	800728a <xQueueGenericSend+0xa2>
 8007286:	2301      	movs	r3, #1
 8007288:	e000      	b.n	800728c <xQueueGenericSend+0xa4>
 800728a:	2300      	movs	r3, #0
 800728c:	2b00      	cmp	r3, #0
 800728e:	d10a      	bne.n	80072a6 <xQueueGenericSend+0xbe>
	__asm volatile
 8007290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007294:	f383 8811 	msr	BASEPRI, r3
 8007298:	f3bf 8f6f 	isb	sy
 800729c:	f3bf 8f4f 	dsb	sy
 80072a0:	61fb      	str	r3, [r7, #28]
}
 80072a2:	bf00      	nop
 80072a4:	e7fe      	b.n	80072a4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80072a6:	f001 ff2d 	bl	8009104 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80072aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072b2:	429a      	cmp	r2, r3
 80072b4:	d302      	bcc.n	80072bc <xQueueGenericSend+0xd4>
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	2b02      	cmp	r3, #2
 80072ba:	d129      	bne.n	8007310 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80072bc:	683a      	ldr	r2, [r7, #0]
 80072be:	68b9      	ldr	r1, [r7, #8]
 80072c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072c2:	f000 fa0b 	bl	80076dc <prvCopyDataToQueue>
 80072c6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80072c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d010      	beq.n	80072f2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80072d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d2:	3324      	adds	r3, #36	; 0x24
 80072d4:	4618      	mov	r0, r3
 80072d6:	f000 fff5 	bl	80082c4 <xTaskRemoveFromEventList>
 80072da:	4603      	mov	r3, r0
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d013      	beq.n	8007308 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80072e0:	4b3f      	ldr	r3, [pc, #252]	; (80073e0 <xQueueGenericSend+0x1f8>)
 80072e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072e6:	601a      	str	r2, [r3, #0]
 80072e8:	f3bf 8f4f 	dsb	sy
 80072ec:	f3bf 8f6f 	isb	sy
 80072f0:	e00a      	b.n	8007308 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80072f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d007      	beq.n	8007308 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80072f8:	4b39      	ldr	r3, [pc, #228]	; (80073e0 <xQueueGenericSend+0x1f8>)
 80072fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072fe:	601a      	str	r2, [r3, #0]
 8007300:	f3bf 8f4f 	dsb	sy
 8007304:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007308:	f001 ff2c 	bl	8009164 <vPortExitCritical>
				return pdPASS;
 800730c:	2301      	movs	r3, #1
 800730e:	e063      	b.n	80073d8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d103      	bne.n	800731e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007316:	f001 ff25 	bl	8009164 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800731a:	2300      	movs	r3, #0
 800731c:	e05c      	b.n	80073d8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800731e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007320:	2b00      	cmp	r3, #0
 8007322:	d106      	bne.n	8007332 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007324:	f107 0314 	add.w	r3, r7, #20
 8007328:	4618      	mov	r0, r3
 800732a:	f001 f82f 	bl	800838c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800732e:	2301      	movs	r3, #1
 8007330:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007332:	f001 ff17 	bl	8009164 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007336:	f000 fd9b 	bl	8007e70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800733a:	f001 fee3 	bl	8009104 <vPortEnterCritical>
 800733e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007340:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007344:	b25b      	sxtb	r3, r3
 8007346:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800734a:	d103      	bne.n	8007354 <xQueueGenericSend+0x16c>
 800734c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800734e:	2200      	movs	r2, #0
 8007350:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007356:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800735a:	b25b      	sxtb	r3, r3
 800735c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007360:	d103      	bne.n	800736a <xQueueGenericSend+0x182>
 8007362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007364:	2200      	movs	r2, #0
 8007366:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800736a:	f001 fefb 	bl	8009164 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800736e:	1d3a      	adds	r2, r7, #4
 8007370:	f107 0314 	add.w	r3, r7, #20
 8007374:	4611      	mov	r1, r2
 8007376:	4618      	mov	r0, r3
 8007378:	f001 f81e 	bl	80083b8 <xTaskCheckForTimeOut>
 800737c:	4603      	mov	r3, r0
 800737e:	2b00      	cmp	r3, #0
 8007380:	d124      	bne.n	80073cc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007382:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007384:	f000 faa2 	bl	80078cc <prvIsQueueFull>
 8007388:	4603      	mov	r3, r0
 800738a:	2b00      	cmp	r3, #0
 800738c:	d018      	beq.n	80073c0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800738e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007390:	3310      	adds	r3, #16
 8007392:	687a      	ldr	r2, [r7, #4]
 8007394:	4611      	mov	r1, r2
 8007396:	4618      	mov	r0, r3
 8007398:	f000 ff44 	bl	8008224 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800739c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800739e:	f000 fa2d 	bl	80077fc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80073a2:	f000 fd73 	bl	8007e8c <xTaskResumeAll>
 80073a6:	4603      	mov	r3, r0
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	f47f af7c 	bne.w	80072a6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80073ae:	4b0c      	ldr	r3, [pc, #48]	; (80073e0 <xQueueGenericSend+0x1f8>)
 80073b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073b4:	601a      	str	r2, [r3, #0]
 80073b6:	f3bf 8f4f 	dsb	sy
 80073ba:	f3bf 8f6f 	isb	sy
 80073be:	e772      	b.n	80072a6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80073c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80073c2:	f000 fa1b 	bl	80077fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80073c6:	f000 fd61 	bl	8007e8c <xTaskResumeAll>
 80073ca:	e76c      	b.n	80072a6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80073cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80073ce:	f000 fa15 	bl	80077fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80073d2:	f000 fd5b 	bl	8007e8c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80073d6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3738      	adds	r7, #56	; 0x38
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}
 80073e0:	e000ed04 	.word	0xe000ed04

080073e4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b090      	sub	sp, #64	; 0x40
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	60f8      	str	r0, [r7, #12]
 80073ec:	60b9      	str	r1, [r7, #8]
 80073ee:	607a      	str	r2, [r7, #4]
 80073f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80073f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d10a      	bne.n	8007412 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80073fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007400:	f383 8811 	msr	BASEPRI, r3
 8007404:	f3bf 8f6f 	isb	sy
 8007408:	f3bf 8f4f 	dsb	sy
 800740c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800740e:	bf00      	nop
 8007410:	e7fe      	b.n	8007410 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d103      	bne.n	8007420 <xQueueGenericSendFromISR+0x3c>
 8007418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800741a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800741c:	2b00      	cmp	r3, #0
 800741e:	d101      	bne.n	8007424 <xQueueGenericSendFromISR+0x40>
 8007420:	2301      	movs	r3, #1
 8007422:	e000      	b.n	8007426 <xQueueGenericSendFromISR+0x42>
 8007424:	2300      	movs	r3, #0
 8007426:	2b00      	cmp	r3, #0
 8007428:	d10a      	bne.n	8007440 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800742a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800742e:	f383 8811 	msr	BASEPRI, r3
 8007432:	f3bf 8f6f 	isb	sy
 8007436:	f3bf 8f4f 	dsb	sy
 800743a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800743c:	bf00      	nop
 800743e:	e7fe      	b.n	800743e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	2b02      	cmp	r3, #2
 8007444:	d103      	bne.n	800744e <xQueueGenericSendFromISR+0x6a>
 8007446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800744a:	2b01      	cmp	r3, #1
 800744c:	d101      	bne.n	8007452 <xQueueGenericSendFromISR+0x6e>
 800744e:	2301      	movs	r3, #1
 8007450:	e000      	b.n	8007454 <xQueueGenericSendFromISR+0x70>
 8007452:	2300      	movs	r3, #0
 8007454:	2b00      	cmp	r3, #0
 8007456:	d10a      	bne.n	800746e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800745c:	f383 8811 	msr	BASEPRI, r3
 8007460:	f3bf 8f6f 	isb	sy
 8007464:	f3bf 8f4f 	dsb	sy
 8007468:	623b      	str	r3, [r7, #32]
}
 800746a:	bf00      	nop
 800746c:	e7fe      	b.n	800746c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800746e:	f001 ff2b 	bl	80092c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007472:	f3ef 8211 	mrs	r2, BASEPRI
 8007476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800747a:	f383 8811 	msr	BASEPRI, r3
 800747e:	f3bf 8f6f 	isb	sy
 8007482:	f3bf 8f4f 	dsb	sy
 8007486:	61fa      	str	r2, [r7, #28]
 8007488:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800748a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800748c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800748e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007490:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007496:	429a      	cmp	r2, r3
 8007498:	d302      	bcc.n	80074a0 <xQueueGenericSendFromISR+0xbc>
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	2b02      	cmp	r3, #2
 800749e:	d12f      	bne.n	8007500 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80074a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80074a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80074aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ae:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80074b0:	683a      	ldr	r2, [r7, #0]
 80074b2:	68b9      	ldr	r1, [r7, #8]
 80074b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80074b6:	f000 f911 	bl	80076dc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80074ba:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80074be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074c2:	d112      	bne.n	80074ea <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80074c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d016      	beq.n	80074fa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80074cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ce:	3324      	adds	r3, #36	; 0x24
 80074d0:	4618      	mov	r0, r3
 80074d2:	f000 fef7 	bl	80082c4 <xTaskRemoveFromEventList>
 80074d6:	4603      	mov	r3, r0
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d00e      	beq.n	80074fa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d00b      	beq.n	80074fa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2201      	movs	r2, #1
 80074e6:	601a      	str	r2, [r3, #0]
 80074e8:	e007      	b.n	80074fa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80074ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80074ee:	3301      	adds	r3, #1
 80074f0:	b2db      	uxtb	r3, r3
 80074f2:	b25a      	sxtb	r2, r3
 80074f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80074fa:	2301      	movs	r3, #1
 80074fc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80074fe:	e001      	b.n	8007504 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007500:	2300      	movs	r3, #0
 8007502:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007506:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800750e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007510:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007512:	4618      	mov	r0, r3
 8007514:	3740      	adds	r7, #64	; 0x40
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}
	...

0800751c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b08c      	sub	sp, #48	; 0x30
 8007520:	af00      	add	r7, sp, #0
 8007522:	60f8      	str	r0, [r7, #12]
 8007524:	60b9      	str	r1, [r7, #8]
 8007526:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007528:	2300      	movs	r3, #0
 800752a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007532:	2b00      	cmp	r3, #0
 8007534:	d10a      	bne.n	800754c <xQueueReceive+0x30>
	__asm volatile
 8007536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800753a:	f383 8811 	msr	BASEPRI, r3
 800753e:	f3bf 8f6f 	isb	sy
 8007542:	f3bf 8f4f 	dsb	sy
 8007546:	623b      	str	r3, [r7, #32]
}
 8007548:	bf00      	nop
 800754a:	e7fe      	b.n	800754a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d103      	bne.n	800755a <xQueueReceive+0x3e>
 8007552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007556:	2b00      	cmp	r3, #0
 8007558:	d101      	bne.n	800755e <xQueueReceive+0x42>
 800755a:	2301      	movs	r3, #1
 800755c:	e000      	b.n	8007560 <xQueueReceive+0x44>
 800755e:	2300      	movs	r3, #0
 8007560:	2b00      	cmp	r3, #0
 8007562:	d10a      	bne.n	800757a <xQueueReceive+0x5e>
	__asm volatile
 8007564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007568:	f383 8811 	msr	BASEPRI, r3
 800756c:	f3bf 8f6f 	isb	sy
 8007570:	f3bf 8f4f 	dsb	sy
 8007574:	61fb      	str	r3, [r7, #28]
}
 8007576:	bf00      	nop
 8007578:	e7fe      	b.n	8007578 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800757a:	f001 f865 	bl	8008648 <xTaskGetSchedulerState>
 800757e:	4603      	mov	r3, r0
 8007580:	2b00      	cmp	r3, #0
 8007582:	d102      	bne.n	800758a <xQueueReceive+0x6e>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d101      	bne.n	800758e <xQueueReceive+0x72>
 800758a:	2301      	movs	r3, #1
 800758c:	e000      	b.n	8007590 <xQueueReceive+0x74>
 800758e:	2300      	movs	r3, #0
 8007590:	2b00      	cmp	r3, #0
 8007592:	d10a      	bne.n	80075aa <xQueueReceive+0x8e>
	__asm volatile
 8007594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007598:	f383 8811 	msr	BASEPRI, r3
 800759c:	f3bf 8f6f 	isb	sy
 80075a0:	f3bf 8f4f 	dsb	sy
 80075a4:	61bb      	str	r3, [r7, #24]
}
 80075a6:	bf00      	nop
 80075a8:	e7fe      	b.n	80075a8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80075aa:	f001 fdab 	bl	8009104 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80075ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075b2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80075b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d01f      	beq.n	80075fa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80075ba:	68b9      	ldr	r1, [r7, #8]
 80075bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075be:	f000 f8f7 	bl	80077b0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80075c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c4:	1e5a      	subs	r2, r3, #1
 80075c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80075ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075cc:	691b      	ldr	r3, [r3, #16]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d00f      	beq.n	80075f2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80075d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d4:	3310      	adds	r3, #16
 80075d6:	4618      	mov	r0, r3
 80075d8:	f000 fe74 	bl	80082c4 <xTaskRemoveFromEventList>
 80075dc:	4603      	mov	r3, r0
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d007      	beq.n	80075f2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80075e2:	4b3d      	ldr	r3, [pc, #244]	; (80076d8 <xQueueReceive+0x1bc>)
 80075e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075e8:	601a      	str	r2, [r3, #0]
 80075ea:	f3bf 8f4f 	dsb	sy
 80075ee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80075f2:	f001 fdb7 	bl	8009164 <vPortExitCritical>
				return pdPASS;
 80075f6:	2301      	movs	r3, #1
 80075f8:	e069      	b.n	80076ce <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d103      	bne.n	8007608 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007600:	f001 fdb0 	bl	8009164 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007604:	2300      	movs	r3, #0
 8007606:	e062      	b.n	80076ce <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800760a:	2b00      	cmp	r3, #0
 800760c:	d106      	bne.n	800761c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800760e:	f107 0310 	add.w	r3, r7, #16
 8007612:	4618      	mov	r0, r3
 8007614:	f000 feba 	bl	800838c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007618:	2301      	movs	r3, #1
 800761a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800761c:	f001 fda2 	bl	8009164 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007620:	f000 fc26 	bl	8007e70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007624:	f001 fd6e 	bl	8009104 <vPortEnterCritical>
 8007628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800762a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800762e:	b25b      	sxtb	r3, r3
 8007630:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007634:	d103      	bne.n	800763e <xQueueReceive+0x122>
 8007636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007638:	2200      	movs	r2, #0
 800763a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800763e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007640:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007644:	b25b      	sxtb	r3, r3
 8007646:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800764a:	d103      	bne.n	8007654 <xQueueReceive+0x138>
 800764c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800764e:	2200      	movs	r2, #0
 8007650:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007654:	f001 fd86 	bl	8009164 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007658:	1d3a      	adds	r2, r7, #4
 800765a:	f107 0310 	add.w	r3, r7, #16
 800765e:	4611      	mov	r1, r2
 8007660:	4618      	mov	r0, r3
 8007662:	f000 fea9 	bl	80083b8 <xTaskCheckForTimeOut>
 8007666:	4603      	mov	r3, r0
 8007668:	2b00      	cmp	r3, #0
 800766a:	d123      	bne.n	80076b4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800766c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800766e:	f000 f917 	bl	80078a0 <prvIsQueueEmpty>
 8007672:	4603      	mov	r3, r0
 8007674:	2b00      	cmp	r3, #0
 8007676:	d017      	beq.n	80076a8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800767a:	3324      	adds	r3, #36	; 0x24
 800767c:	687a      	ldr	r2, [r7, #4]
 800767e:	4611      	mov	r1, r2
 8007680:	4618      	mov	r0, r3
 8007682:	f000 fdcf 	bl	8008224 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007686:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007688:	f000 f8b8 	bl	80077fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800768c:	f000 fbfe 	bl	8007e8c <xTaskResumeAll>
 8007690:	4603      	mov	r3, r0
 8007692:	2b00      	cmp	r3, #0
 8007694:	d189      	bne.n	80075aa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007696:	4b10      	ldr	r3, [pc, #64]	; (80076d8 <xQueueReceive+0x1bc>)
 8007698:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800769c:	601a      	str	r2, [r3, #0]
 800769e:	f3bf 8f4f 	dsb	sy
 80076a2:	f3bf 8f6f 	isb	sy
 80076a6:	e780      	b.n	80075aa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80076a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076aa:	f000 f8a7 	bl	80077fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80076ae:	f000 fbed 	bl	8007e8c <xTaskResumeAll>
 80076b2:	e77a      	b.n	80075aa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80076b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076b6:	f000 f8a1 	bl	80077fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80076ba:	f000 fbe7 	bl	8007e8c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80076be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076c0:	f000 f8ee 	bl	80078a0 <prvIsQueueEmpty>
 80076c4:	4603      	mov	r3, r0
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	f43f af6f 	beq.w	80075aa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80076cc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3730      	adds	r7, #48	; 0x30
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}
 80076d6:	bf00      	nop
 80076d8:	e000ed04 	.word	0xe000ed04

080076dc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b086      	sub	sp, #24
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	60f8      	str	r0, [r7, #12]
 80076e4:	60b9      	str	r1, [r7, #8]
 80076e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80076e8:	2300      	movs	r3, #0
 80076ea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076f0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d10d      	bne.n	8007716 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d14d      	bne.n	800779e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	689b      	ldr	r3, [r3, #8]
 8007706:	4618      	mov	r0, r3
 8007708:	f000 ffbc 	bl	8008684 <xTaskPriorityDisinherit>
 800770c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2200      	movs	r2, #0
 8007712:	609a      	str	r2, [r3, #8]
 8007714:	e043      	b.n	800779e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d119      	bne.n	8007750 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	6858      	ldr	r0, [r3, #4]
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007724:	461a      	mov	r2, r3
 8007726:	68b9      	ldr	r1, [r7, #8]
 8007728:	f002 fd38 	bl	800a19c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	685a      	ldr	r2, [r3, #4]
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007734:	441a      	add	r2, r3
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	685a      	ldr	r2, [r3, #4]
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	429a      	cmp	r2, r3
 8007744:	d32b      	bcc.n	800779e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681a      	ldr	r2, [r3, #0]
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	605a      	str	r2, [r3, #4]
 800774e:	e026      	b.n	800779e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	68d8      	ldr	r0, [r3, #12]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007758:	461a      	mov	r2, r3
 800775a:	68b9      	ldr	r1, [r7, #8]
 800775c:	f002 fd1e 	bl	800a19c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	68da      	ldr	r2, [r3, #12]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007768:	425b      	negs	r3, r3
 800776a:	441a      	add	r2, r3
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	68da      	ldr	r2, [r3, #12]
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	429a      	cmp	r2, r3
 800777a:	d207      	bcs.n	800778c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	689a      	ldr	r2, [r3, #8]
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007784:	425b      	negs	r3, r3
 8007786:	441a      	add	r2, r3
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2b02      	cmp	r3, #2
 8007790:	d105      	bne.n	800779e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d002      	beq.n	800779e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	3b01      	subs	r3, #1
 800779c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	1c5a      	adds	r2, r3, #1
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80077a6:	697b      	ldr	r3, [r7, #20]
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3718      	adds	r7, #24
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}

080077b0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b082      	sub	sp, #8
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d018      	beq.n	80077f4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	68da      	ldr	r2, [r3, #12]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ca:	441a      	add	r2, r3
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	68da      	ldr	r2, [r3, #12]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	689b      	ldr	r3, [r3, #8]
 80077d8:	429a      	cmp	r2, r3
 80077da:	d303      	bcc.n	80077e4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681a      	ldr	r2, [r3, #0]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	68d9      	ldr	r1, [r3, #12]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ec:	461a      	mov	r2, r3
 80077ee:	6838      	ldr	r0, [r7, #0]
 80077f0:	f002 fcd4 	bl	800a19c <memcpy>
	}
}
 80077f4:	bf00      	nop
 80077f6:	3708      	adds	r7, #8
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}

080077fc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b084      	sub	sp, #16
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007804:	f001 fc7e 	bl	8009104 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800780e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007810:	e011      	b.n	8007836 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007816:	2b00      	cmp	r3, #0
 8007818:	d012      	beq.n	8007840 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	3324      	adds	r3, #36	; 0x24
 800781e:	4618      	mov	r0, r3
 8007820:	f000 fd50 	bl	80082c4 <xTaskRemoveFromEventList>
 8007824:	4603      	mov	r3, r0
 8007826:	2b00      	cmp	r3, #0
 8007828:	d001      	beq.n	800782e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800782a:	f000 fe27 	bl	800847c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800782e:	7bfb      	ldrb	r3, [r7, #15]
 8007830:	3b01      	subs	r3, #1
 8007832:	b2db      	uxtb	r3, r3
 8007834:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007836:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800783a:	2b00      	cmp	r3, #0
 800783c:	dce9      	bgt.n	8007812 <prvUnlockQueue+0x16>
 800783e:	e000      	b.n	8007842 <prvUnlockQueue+0x46>
					break;
 8007840:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	22ff      	movs	r2, #255	; 0xff
 8007846:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800784a:	f001 fc8b 	bl	8009164 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800784e:	f001 fc59 	bl	8009104 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007858:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800785a:	e011      	b.n	8007880 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	691b      	ldr	r3, [r3, #16]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d012      	beq.n	800788a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	3310      	adds	r3, #16
 8007868:	4618      	mov	r0, r3
 800786a:	f000 fd2b 	bl	80082c4 <xTaskRemoveFromEventList>
 800786e:	4603      	mov	r3, r0
 8007870:	2b00      	cmp	r3, #0
 8007872:	d001      	beq.n	8007878 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007874:	f000 fe02 	bl	800847c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007878:	7bbb      	ldrb	r3, [r7, #14]
 800787a:	3b01      	subs	r3, #1
 800787c:	b2db      	uxtb	r3, r3
 800787e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007880:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007884:	2b00      	cmp	r3, #0
 8007886:	dce9      	bgt.n	800785c <prvUnlockQueue+0x60>
 8007888:	e000      	b.n	800788c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800788a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	22ff      	movs	r2, #255	; 0xff
 8007890:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007894:	f001 fc66 	bl	8009164 <vPortExitCritical>
}
 8007898:	bf00      	nop
 800789a:	3710      	adds	r7, #16
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}

080078a0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b084      	sub	sp, #16
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80078a8:	f001 fc2c 	bl	8009104 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d102      	bne.n	80078ba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80078b4:	2301      	movs	r3, #1
 80078b6:	60fb      	str	r3, [r7, #12]
 80078b8:	e001      	b.n	80078be <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80078ba:	2300      	movs	r3, #0
 80078bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80078be:	f001 fc51 	bl	8009164 <vPortExitCritical>

	return xReturn;
 80078c2:	68fb      	ldr	r3, [r7, #12]
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3710      	adds	r7, #16
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}

080078cc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b084      	sub	sp, #16
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80078d4:	f001 fc16 	bl	8009104 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078e0:	429a      	cmp	r2, r3
 80078e2:	d102      	bne.n	80078ea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80078e4:	2301      	movs	r3, #1
 80078e6:	60fb      	str	r3, [r7, #12]
 80078e8:	e001      	b.n	80078ee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80078ea:	2300      	movs	r3, #0
 80078ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80078ee:	f001 fc39 	bl	8009164 <vPortExitCritical>

	return xReturn;
 80078f2:	68fb      	ldr	r3, [r7, #12]
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3710      	adds	r7, #16
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}

080078fc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80078fc:	b480      	push	{r7}
 80078fe:	b085      	sub	sp, #20
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007906:	2300      	movs	r3, #0
 8007908:	60fb      	str	r3, [r7, #12]
 800790a:	e014      	b.n	8007936 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800790c:	4a0f      	ldr	r2, [pc, #60]	; (800794c <vQueueAddToRegistry+0x50>)
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d10b      	bne.n	8007930 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007918:	490c      	ldr	r1, [pc, #48]	; (800794c <vQueueAddToRegistry+0x50>)
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	683a      	ldr	r2, [r7, #0]
 800791e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007922:	4a0a      	ldr	r2, [pc, #40]	; (800794c <vQueueAddToRegistry+0x50>)
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	00db      	lsls	r3, r3, #3
 8007928:	4413      	add	r3, r2
 800792a:	687a      	ldr	r2, [r7, #4]
 800792c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800792e:	e006      	b.n	800793e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	3301      	adds	r3, #1
 8007934:	60fb      	str	r3, [r7, #12]
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	2b07      	cmp	r3, #7
 800793a:	d9e7      	bls.n	800790c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800793c:	bf00      	nop
 800793e:	bf00      	nop
 8007940:	3714      	adds	r7, #20
 8007942:	46bd      	mov	sp, r7
 8007944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007948:	4770      	bx	lr
 800794a:	bf00      	nop
 800794c:	20000958 	.word	0x20000958

08007950 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007950:	b580      	push	{r7, lr}
 8007952:	b086      	sub	sp, #24
 8007954:	af00      	add	r7, sp, #0
 8007956:	60f8      	str	r0, [r7, #12]
 8007958:	60b9      	str	r1, [r7, #8]
 800795a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007960:	f001 fbd0 	bl	8009104 <vPortEnterCritical>
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800796a:	b25b      	sxtb	r3, r3
 800796c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007970:	d103      	bne.n	800797a <vQueueWaitForMessageRestricted+0x2a>
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	2200      	movs	r2, #0
 8007976:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007980:	b25b      	sxtb	r3, r3
 8007982:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007986:	d103      	bne.n	8007990 <vQueueWaitForMessageRestricted+0x40>
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	2200      	movs	r2, #0
 800798c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007990:	f001 fbe8 	bl	8009164 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007998:	2b00      	cmp	r3, #0
 800799a:	d106      	bne.n	80079aa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	3324      	adds	r3, #36	; 0x24
 80079a0:	687a      	ldr	r2, [r7, #4]
 80079a2:	68b9      	ldr	r1, [r7, #8]
 80079a4:	4618      	mov	r0, r3
 80079a6:	f000 fc61 	bl	800826c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80079aa:	6978      	ldr	r0, [r7, #20]
 80079ac:	f7ff ff26 	bl	80077fc <prvUnlockQueue>
	}
 80079b0:	bf00      	nop
 80079b2:	3718      	adds	r7, #24
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}

080079b8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b08e      	sub	sp, #56	; 0x38
 80079bc:	af04      	add	r7, sp, #16
 80079be:	60f8      	str	r0, [r7, #12]
 80079c0:	60b9      	str	r1, [r7, #8]
 80079c2:	607a      	str	r2, [r7, #4]
 80079c4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80079c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d10a      	bne.n	80079e2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80079cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d0:	f383 8811 	msr	BASEPRI, r3
 80079d4:	f3bf 8f6f 	isb	sy
 80079d8:	f3bf 8f4f 	dsb	sy
 80079dc:	623b      	str	r3, [r7, #32]
}
 80079de:	bf00      	nop
 80079e0:	e7fe      	b.n	80079e0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80079e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d10a      	bne.n	80079fe <xTaskCreateStatic+0x46>
	__asm volatile
 80079e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ec:	f383 8811 	msr	BASEPRI, r3
 80079f0:	f3bf 8f6f 	isb	sy
 80079f4:	f3bf 8f4f 	dsb	sy
 80079f8:	61fb      	str	r3, [r7, #28]
}
 80079fa:	bf00      	nop
 80079fc:	e7fe      	b.n	80079fc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80079fe:	23bc      	movs	r3, #188	; 0xbc
 8007a00:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	2bbc      	cmp	r3, #188	; 0xbc
 8007a06:	d00a      	beq.n	8007a1e <xTaskCreateStatic+0x66>
	__asm volatile
 8007a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a0c:	f383 8811 	msr	BASEPRI, r3
 8007a10:	f3bf 8f6f 	isb	sy
 8007a14:	f3bf 8f4f 	dsb	sy
 8007a18:	61bb      	str	r3, [r7, #24]
}
 8007a1a:	bf00      	nop
 8007a1c:	e7fe      	b.n	8007a1c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007a1e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d01e      	beq.n	8007a64 <xTaskCreateStatic+0xac>
 8007a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d01b      	beq.n	8007a64 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a2e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a34:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a38:	2202      	movs	r2, #2
 8007a3a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007a3e:	2300      	movs	r3, #0
 8007a40:	9303      	str	r3, [sp, #12]
 8007a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a44:	9302      	str	r3, [sp, #8]
 8007a46:	f107 0314 	add.w	r3, r7, #20
 8007a4a:	9301      	str	r3, [sp, #4]
 8007a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a4e:	9300      	str	r3, [sp, #0]
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	687a      	ldr	r2, [r7, #4]
 8007a54:	68b9      	ldr	r1, [r7, #8]
 8007a56:	68f8      	ldr	r0, [r7, #12]
 8007a58:	f000 f850 	bl	8007afc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007a5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007a5e:	f000 f8f3 	bl	8007c48 <prvAddNewTaskToReadyList>
 8007a62:	e001      	b.n	8007a68 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007a64:	2300      	movs	r3, #0
 8007a66:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007a68:	697b      	ldr	r3, [r7, #20]
	}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3728      	adds	r7, #40	; 0x28
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}

08007a72 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007a72:	b580      	push	{r7, lr}
 8007a74:	b08c      	sub	sp, #48	; 0x30
 8007a76:	af04      	add	r7, sp, #16
 8007a78:	60f8      	str	r0, [r7, #12]
 8007a7a:	60b9      	str	r1, [r7, #8]
 8007a7c:	603b      	str	r3, [r7, #0]
 8007a7e:	4613      	mov	r3, r2
 8007a80:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007a82:	88fb      	ldrh	r3, [r7, #6]
 8007a84:	009b      	lsls	r3, r3, #2
 8007a86:	4618      	mov	r0, r3
 8007a88:	f001 fc5e 	bl	8009348 <pvPortMalloc>
 8007a8c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d00e      	beq.n	8007ab2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007a94:	20bc      	movs	r0, #188	; 0xbc
 8007a96:	f001 fc57 	bl	8009348 <pvPortMalloc>
 8007a9a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007a9c:	69fb      	ldr	r3, [r7, #28]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d003      	beq.n	8007aaa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007aa2:	69fb      	ldr	r3, [r7, #28]
 8007aa4:	697a      	ldr	r2, [r7, #20]
 8007aa6:	631a      	str	r2, [r3, #48]	; 0x30
 8007aa8:	e005      	b.n	8007ab6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007aaa:	6978      	ldr	r0, [r7, #20]
 8007aac:	f001 fd18 	bl	80094e0 <vPortFree>
 8007ab0:	e001      	b.n	8007ab6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007ab6:	69fb      	ldr	r3, [r7, #28]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d017      	beq.n	8007aec <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007abc:	69fb      	ldr	r3, [r7, #28]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007ac4:	88fa      	ldrh	r2, [r7, #6]
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	9303      	str	r3, [sp, #12]
 8007aca:	69fb      	ldr	r3, [r7, #28]
 8007acc:	9302      	str	r3, [sp, #8]
 8007ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad0:	9301      	str	r3, [sp, #4]
 8007ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ad4:	9300      	str	r3, [sp, #0]
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	68b9      	ldr	r1, [r7, #8]
 8007ada:	68f8      	ldr	r0, [r7, #12]
 8007adc:	f000 f80e 	bl	8007afc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007ae0:	69f8      	ldr	r0, [r7, #28]
 8007ae2:	f000 f8b1 	bl	8007c48 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	61bb      	str	r3, [r7, #24]
 8007aea:	e002      	b.n	8007af2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007aec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007af0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007af2:	69bb      	ldr	r3, [r7, #24]
	}
 8007af4:	4618      	mov	r0, r3
 8007af6:	3720      	adds	r7, #32
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}

08007afc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b088      	sub	sp, #32
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	60f8      	str	r0, [r7, #12]
 8007b04:	60b9      	str	r1, [r7, #8]
 8007b06:	607a      	str	r2, [r7, #4]
 8007b08:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b0c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	009b      	lsls	r3, r3, #2
 8007b12:	461a      	mov	r2, r3
 8007b14:	21a5      	movs	r1, #165	; 0xa5
 8007b16:	f002 fb4f 	bl	800a1b8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007b24:	3b01      	subs	r3, #1
 8007b26:	009b      	lsls	r3, r3, #2
 8007b28:	4413      	add	r3, r2
 8007b2a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007b2c:	69bb      	ldr	r3, [r7, #24]
 8007b2e:	f023 0307 	bic.w	r3, r3, #7
 8007b32:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007b34:	69bb      	ldr	r3, [r7, #24]
 8007b36:	f003 0307 	and.w	r3, r3, #7
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d00a      	beq.n	8007b54 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b42:	f383 8811 	msr	BASEPRI, r3
 8007b46:	f3bf 8f6f 	isb	sy
 8007b4a:	f3bf 8f4f 	dsb	sy
 8007b4e:	617b      	str	r3, [r7, #20]
}
 8007b50:	bf00      	nop
 8007b52:	e7fe      	b.n	8007b52 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d01f      	beq.n	8007b9a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	61fb      	str	r3, [r7, #28]
 8007b5e:	e012      	b.n	8007b86 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007b60:	68ba      	ldr	r2, [r7, #8]
 8007b62:	69fb      	ldr	r3, [r7, #28]
 8007b64:	4413      	add	r3, r2
 8007b66:	7819      	ldrb	r1, [r3, #0]
 8007b68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b6a:	69fb      	ldr	r3, [r7, #28]
 8007b6c:	4413      	add	r3, r2
 8007b6e:	3334      	adds	r3, #52	; 0x34
 8007b70:	460a      	mov	r2, r1
 8007b72:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007b74:	68ba      	ldr	r2, [r7, #8]
 8007b76:	69fb      	ldr	r3, [r7, #28]
 8007b78:	4413      	add	r3, r2
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d006      	beq.n	8007b8e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007b80:	69fb      	ldr	r3, [r7, #28]
 8007b82:	3301      	adds	r3, #1
 8007b84:	61fb      	str	r3, [r7, #28]
 8007b86:	69fb      	ldr	r3, [r7, #28]
 8007b88:	2b0f      	cmp	r3, #15
 8007b8a:	d9e9      	bls.n	8007b60 <prvInitialiseNewTask+0x64>
 8007b8c:	e000      	b.n	8007b90 <prvInitialiseNewTask+0x94>
			{
				break;
 8007b8e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b92:	2200      	movs	r2, #0
 8007b94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007b98:	e003      	b.n	8007ba2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba4:	2b37      	cmp	r3, #55	; 0x37
 8007ba6:	d901      	bls.n	8007bac <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007ba8:	2337      	movs	r3, #55	; 0x37
 8007baa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007bb0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007bb6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bba:	2200      	movs	r2, #0
 8007bbc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc0:	3304      	adds	r3, #4
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f7ff f978 	bl	8006eb8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bca:	3318      	adds	r3, #24
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f7ff f973 	bl	8006eb8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bd6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bda:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007be6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bea:	2200      	movs	r2, #0
 8007bec:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bfa:	3354      	adds	r3, #84	; 0x54
 8007bfc:	2260      	movs	r2, #96	; 0x60
 8007bfe:	2100      	movs	r1, #0
 8007c00:	4618      	mov	r0, r3
 8007c02:	f002 fad9 	bl	800a1b8 <memset>
 8007c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c08:	4a0c      	ldr	r2, [pc, #48]	; (8007c3c <prvInitialiseNewTask+0x140>)
 8007c0a:	659a      	str	r2, [r3, #88]	; 0x58
 8007c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c0e:	4a0c      	ldr	r2, [pc, #48]	; (8007c40 <prvInitialiseNewTask+0x144>)
 8007c10:	65da      	str	r2, [r3, #92]	; 0x5c
 8007c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c14:	4a0b      	ldr	r2, [pc, #44]	; (8007c44 <prvInitialiseNewTask+0x148>)
 8007c16:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007c18:	683a      	ldr	r2, [r7, #0]
 8007c1a:	68f9      	ldr	r1, [r7, #12]
 8007c1c:	69b8      	ldr	r0, [r7, #24]
 8007c1e:	f001 f941 	bl	8008ea4 <pxPortInitialiseStack>
 8007c22:	4602      	mov	r2, r0
 8007c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c26:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d002      	beq.n	8007c34 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c32:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c34:	bf00      	nop
 8007c36:	3720      	adds	r7, #32
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}
 8007c3c:	0800a4a8 	.word	0x0800a4a8
 8007c40:	0800a4c8 	.word	0x0800a4c8
 8007c44:	0800a488 	.word	0x0800a488

08007c48 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b082      	sub	sp, #8
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007c50:	f001 fa58 	bl	8009104 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007c54:	4b2d      	ldr	r3, [pc, #180]	; (8007d0c <prvAddNewTaskToReadyList+0xc4>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	3301      	adds	r3, #1
 8007c5a:	4a2c      	ldr	r2, [pc, #176]	; (8007d0c <prvAddNewTaskToReadyList+0xc4>)
 8007c5c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007c5e:	4b2c      	ldr	r3, [pc, #176]	; (8007d10 <prvAddNewTaskToReadyList+0xc8>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d109      	bne.n	8007c7a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007c66:	4a2a      	ldr	r2, [pc, #168]	; (8007d10 <prvAddNewTaskToReadyList+0xc8>)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007c6c:	4b27      	ldr	r3, [pc, #156]	; (8007d0c <prvAddNewTaskToReadyList+0xc4>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	2b01      	cmp	r3, #1
 8007c72:	d110      	bne.n	8007c96 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007c74:	f000 fc26 	bl	80084c4 <prvInitialiseTaskLists>
 8007c78:	e00d      	b.n	8007c96 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007c7a:	4b26      	ldr	r3, [pc, #152]	; (8007d14 <prvAddNewTaskToReadyList+0xcc>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d109      	bne.n	8007c96 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007c82:	4b23      	ldr	r3, [pc, #140]	; (8007d10 <prvAddNewTaskToReadyList+0xc8>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c8c:	429a      	cmp	r2, r3
 8007c8e:	d802      	bhi.n	8007c96 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007c90:	4a1f      	ldr	r2, [pc, #124]	; (8007d10 <prvAddNewTaskToReadyList+0xc8>)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007c96:	4b20      	ldr	r3, [pc, #128]	; (8007d18 <prvAddNewTaskToReadyList+0xd0>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	3301      	adds	r3, #1
 8007c9c:	4a1e      	ldr	r2, [pc, #120]	; (8007d18 <prvAddNewTaskToReadyList+0xd0>)
 8007c9e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007ca0:	4b1d      	ldr	r3, [pc, #116]	; (8007d18 <prvAddNewTaskToReadyList+0xd0>)
 8007ca2:	681a      	ldr	r2, [r3, #0]
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cac:	4b1b      	ldr	r3, [pc, #108]	; (8007d1c <prvAddNewTaskToReadyList+0xd4>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	429a      	cmp	r2, r3
 8007cb2:	d903      	bls.n	8007cbc <prvAddNewTaskToReadyList+0x74>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cb8:	4a18      	ldr	r2, [pc, #96]	; (8007d1c <prvAddNewTaskToReadyList+0xd4>)
 8007cba:	6013      	str	r3, [r2, #0]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cc0:	4613      	mov	r3, r2
 8007cc2:	009b      	lsls	r3, r3, #2
 8007cc4:	4413      	add	r3, r2
 8007cc6:	009b      	lsls	r3, r3, #2
 8007cc8:	4a15      	ldr	r2, [pc, #84]	; (8007d20 <prvAddNewTaskToReadyList+0xd8>)
 8007cca:	441a      	add	r2, r3
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	3304      	adds	r3, #4
 8007cd0:	4619      	mov	r1, r3
 8007cd2:	4610      	mov	r0, r2
 8007cd4:	f7ff f8fd 	bl	8006ed2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007cd8:	f001 fa44 	bl	8009164 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007cdc:	4b0d      	ldr	r3, [pc, #52]	; (8007d14 <prvAddNewTaskToReadyList+0xcc>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d00e      	beq.n	8007d02 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007ce4:	4b0a      	ldr	r3, [pc, #40]	; (8007d10 <prvAddNewTaskToReadyList+0xc8>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cee:	429a      	cmp	r2, r3
 8007cf0:	d207      	bcs.n	8007d02 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007cf2:	4b0c      	ldr	r3, [pc, #48]	; (8007d24 <prvAddNewTaskToReadyList+0xdc>)
 8007cf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cf8:	601a      	str	r2, [r3, #0]
 8007cfa:	f3bf 8f4f 	dsb	sy
 8007cfe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d02:	bf00      	nop
 8007d04:	3708      	adds	r7, #8
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}
 8007d0a:	bf00      	nop
 8007d0c:	20000e6c 	.word	0x20000e6c
 8007d10:	20000998 	.word	0x20000998
 8007d14:	20000e78 	.word	0x20000e78
 8007d18:	20000e88 	.word	0x20000e88
 8007d1c:	20000e74 	.word	0x20000e74
 8007d20:	2000099c 	.word	0x2000099c
 8007d24:	e000ed04 	.word	0xe000ed04

08007d28 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b084      	sub	sp, #16
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007d30:	2300      	movs	r3, #0
 8007d32:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d017      	beq.n	8007d6a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007d3a:	4b13      	ldr	r3, [pc, #76]	; (8007d88 <vTaskDelay+0x60>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d00a      	beq.n	8007d58 <vTaskDelay+0x30>
	__asm volatile
 8007d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d46:	f383 8811 	msr	BASEPRI, r3
 8007d4a:	f3bf 8f6f 	isb	sy
 8007d4e:	f3bf 8f4f 	dsb	sy
 8007d52:	60bb      	str	r3, [r7, #8]
}
 8007d54:	bf00      	nop
 8007d56:	e7fe      	b.n	8007d56 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007d58:	f000 f88a 	bl	8007e70 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007d5c:	2100      	movs	r1, #0
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f000 fcfe 	bl	8008760 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007d64:	f000 f892 	bl	8007e8c <xTaskResumeAll>
 8007d68:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d107      	bne.n	8007d80 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007d70:	4b06      	ldr	r3, [pc, #24]	; (8007d8c <vTaskDelay+0x64>)
 8007d72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d76:	601a      	str	r2, [r3, #0]
 8007d78:	f3bf 8f4f 	dsb	sy
 8007d7c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007d80:	bf00      	nop
 8007d82:	3710      	adds	r7, #16
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}
 8007d88:	20000e94 	.word	0x20000e94
 8007d8c:	e000ed04 	.word	0xe000ed04

08007d90 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b08a      	sub	sp, #40	; 0x28
 8007d94:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007d96:	2300      	movs	r3, #0
 8007d98:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007d9e:	463a      	mov	r2, r7
 8007da0:	1d39      	adds	r1, r7, #4
 8007da2:	f107 0308 	add.w	r3, r7, #8
 8007da6:	4618      	mov	r0, r3
 8007da8:	f7ff f832 	bl	8006e10 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007dac:	6839      	ldr	r1, [r7, #0]
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	68ba      	ldr	r2, [r7, #8]
 8007db2:	9202      	str	r2, [sp, #8]
 8007db4:	9301      	str	r3, [sp, #4]
 8007db6:	2300      	movs	r3, #0
 8007db8:	9300      	str	r3, [sp, #0]
 8007dba:	2300      	movs	r3, #0
 8007dbc:	460a      	mov	r2, r1
 8007dbe:	4924      	ldr	r1, [pc, #144]	; (8007e50 <vTaskStartScheduler+0xc0>)
 8007dc0:	4824      	ldr	r0, [pc, #144]	; (8007e54 <vTaskStartScheduler+0xc4>)
 8007dc2:	f7ff fdf9 	bl	80079b8 <xTaskCreateStatic>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	4a23      	ldr	r2, [pc, #140]	; (8007e58 <vTaskStartScheduler+0xc8>)
 8007dca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007dcc:	4b22      	ldr	r3, [pc, #136]	; (8007e58 <vTaskStartScheduler+0xc8>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d002      	beq.n	8007dda <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	617b      	str	r3, [r7, #20]
 8007dd8:	e001      	b.n	8007dde <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	2b01      	cmp	r3, #1
 8007de2:	d102      	bne.n	8007dea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007de4:	f000 fd10 	bl	8008808 <xTimerCreateTimerTask>
 8007de8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	d11b      	bne.n	8007e28 <vTaskStartScheduler+0x98>
	__asm volatile
 8007df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df4:	f383 8811 	msr	BASEPRI, r3
 8007df8:	f3bf 8f6f 	isb	sy
 8007dfc:	f3bf 8f4f 	dsb	sy
 8007e00:	613b      	str	r3, [r7, #16]
}
 8007e02:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007e04:	4b15      	ldr	r3, [pc, #84]	; (8007e5c <vTaskStartScheduler+0xcc>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	3354      	adds	r3, #84	; 0x54
 8007e0a:	4a15      	ldr	r2, [pc, #84]	; (8007e60 <vTaskStartScheduler+0xd0>)
 8007e0c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007e0e:	4b15      	ldr	r3, [pc, #84]	; (8007e64 <vTaskStartScheduler+0xd4>)
 8007e10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007e14:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007e16:	4b14      	ldr	r3, [pc, #80]	; (8007e68 <vTaskStartScheduler+0xd8>)
 8007e18:	2201      	movs	r2, #1
 8007e1a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007e1c:	4b13      	ldr	r3, [pc, #76]	; (8007e6c <vTaskStartScheduler+0xdc>)
 8007e1e:	2200      	movs	r2, #0
 8007e20:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007e22:	f001 f8cd 	bl	8008fc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007e26:	e00e      	b.n	8007e46 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e2e:	d10a      	bne.n	8007e46 <vTaskStartScheduler+0xb6>
	__asm volatile
 8007e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e34:	f383 8811 	msr	BASEPRI, r3
 8007e38:	f3bf 8f6f 	isb	sy
 8007e3c:	f3bf 8f4f 	dsb	sy
 8007e40:	60fb      	str	r3, [r7, #12]
}
 8007e42:	bf00      	nop
 8007e44:	e7fe      	b.n	8007e44 <vTaskStartScheduler+0xb4>
}
 8007e46:	bf00      	nop
 8007e48:	3718      	adds	r7, #24
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}
 8007e4e:	bf00      	nop
 8007e50:	0800a3b0 	.word	0x0800a3b0
 8007e54:	08008495 	.word	0x08008495
 8007e58:	20000e90 	.word	0x20000e90
 8007e5c:	20000998 	.word	0x20000998
 8007e60:	20000100 	.word	0x20000100
 8007e64:	20000e8c 	.word	0x20000e8c
 8007e68:	20000e78 	.word	0x20000e78
 8007e6c:	20000e70 	.word	0x20000e70

08007e70 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007e70:	b480      	push	{r7}
 8007e72:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007e74:	4b04      	ldr	r3, [pc, #16]	; (8007e88 <vTaskSuspendAll+0x18>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	3301      	adds	r3, #1
 8007e7a:	4a03      	ldr	r2, [pc, #12]	; (8007e88 <vTaskSuspendAll+0x18>)
 8007e7c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007e7e:	bf00      	nop
 8007e80:	46bd      	mov	sp, r7
 8007e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e86:	4770      	bx	lr
 8007e88:	20000e94 	.word	0x20000e94

08007e8c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b084      	sub	sp, #16
 8007e90:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007e92:	2300      	movs	r3, #0
 8007e94:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007e96:	2300      	movs	r3, #0
 8007e98:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007e9a:	4b42      	ldr	r3, [pc, #264]	; (8007fa4 <xTaskResumeAll+0x118>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d10a      	bne.n	8007eb8 <xTaskResumeAll+0x2c>
	__asm volatile
 8007ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea6:	f383 8811 	msr	BASEPRI, r3
 8007eaa:	f3bf 8f6f 	isb	sy
 8007eae:	f3bf 8f4f 	dsb	sy
 8007eb2:	603b      	str	r3, [r7, #0]
}
 8007eb4:	bf00      	nop
 8007eb6:	e7fe      	b.n	8007eb6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007eb8:	f001 f924 	bl	8009104 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007ebc:	4b39      	ldr	r3, [pc, #228]	; (8007fa4 <xTaskResumeAll+0x118>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	3b01      	subs	r3, #1
 8007ec2:	4a38      	ldr	r2, [pc, #224]	; (8007fa4 <xTaskResumeAll+0x118>)
 8007ec4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ec6:	4b37      	ldr	r3, [pc, #220]	; (8007fa4 <xTaskResumeAll+0x118>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d162      	bne.n	8007f94 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007ece:	4b36      	ldr	r3, [pc, #216]	; (8007fa8 <xTaskResumeAll+0x11c>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d05e      	beq.n	8007f94 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007ed6:	e02f      	b.n	8007f38 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ed8:	4b34      	ldr	r3, [pc, #208]	; (8007fac <xTaskResumeAll+0x120>)
 8007eda:	68db      	ldr	r3, [r3, #12]
 8007edc:	68db      	ldr	r3, [r3, #12]
 8007ede:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	3318      	adds	r3, #24
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f7ff f851 	bl	8006f8c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	3304      	adds	r3, #4
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f7ff f84c 	bl	8006f8c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ef8:	4b2d      	ldr	r3, [pc, #180]	; (8007fb0 <xTaskResumeAll+0x124>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	429a      	cmp	r2, r3
 8007efe:	d903      	bls.n	8007f08 <xTaskResumeAll+0x7c>
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f04:	4a2a      	ldr	r2, [pc, #168]	; (8007fb0 <xTaskResumeAll+0x124>)
 8007f06:	6013      	str	r3, [r2, #0]
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f0c:	4613      	mov	r3, r2
 8007f0e:	009b      	lsls	r3, r3, #2
 8007f10:	4413      	add	r3, r2
 8007f12:	009b      	lsls	r3, r3, #2
 8007f14:	4a27      	ldr	r2, [pc, #156]	; (8007fb4 <xTaskResumeAll+0x128>)
 8007f16:	441a      	add	r2, r3
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	3304      	adds	r3, #4
 8007f1c:	4619      	mov	r1, r3
 8007f1e:	4610      	mov	r0, r2
 8007f20:	f7fe ffd7 	bl	8006ed2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f28:	4b23      	ldr	r3, [pc, #140]	; (8007fb8 <xTaskResumeAll+0x12c>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f2e:	429a      	cmp	r2, r3
 8007f30:	d302      	bcc.n	8007f38 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007f32:	4b22      	ldr	r3, [pc, #136]	; (8007fbc <xTaskResumeAll+0x130>)
 8007f34:	2201      	movs	r2, #1
 8007f36:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007f38:	4b1c      	ldr	r3, [pc, #112]	; (8007fac <xTaskResumeAll+0x120>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d1cb      	bne.n	8007ed8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d001      	beq.n	8007f4a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007f46:	f000 fb5f 	bl	8008608 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007f4a:	4b1d      	ldr	r3, [pc, #116]	; (8007fc0 <xTaskResumeAll+0x134>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d010      	beq.n	8007f78 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007f56:	f000 f847 	bl	8007fe8 <xTaskIncrementTick>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d002      	beq.n	8007f66 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007f60:	4b16      	ldr	r3, [pc, #88]	; (8007fbc <xTaskResumeAll+0x130>)
 8007f62:	2201      	movs	r2, #1
 8007f64:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	3b01      	subs	r3, #1
 8007f6a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d1f1      	bne.n	8007f56 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007f72:	4b13      	ldr	r3, [pc, #76]	; (8007fc0 <xTaskResumeAll+0x134>)
 8007f74:	2200      	movs	r2, #0
 8007f76:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007f78:	4b10      	ldr	r3, [pc, #64]	; (8007fbc <xTaskResumeAll+0x130>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d009      	beq.n	8007f94 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007f80:	2301      	movs	r3, #1
 8007f82:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007f84:	4b0f      	ldr	r3, [pc, #60]	; (8007fc4 <xTaskResumeAll+0x138>)
 8007f86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f8a:	601a      	str	r2, [r3, #0]
 8007f8c:	f3bf 8f4f 	dsb	sy
 8007f90:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007f94:	f001 f8e6 	bl	8009164 <vPortExitCritical>

	return xAlreadyYielded;
 8007f98:	68bb      	ldr	r3, [r7, #8]
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3710      	adds	r7, #16
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}
 8007fa2:	bf00      	nop
 8007fa4:	20000e94 	.word	0x20000e94
 8007fa8:	20000e6c 	.word	0x20000e6c
 8007fac:	20000e2c 	.word	0x20000e2c
 8007fb0:	20000e74 	.word	0x20000e74
 8007fb4:	2000099c 	.word	0x2000099c
 8007fb8:	20000998 	.word	0x20000998
 8007fbc:	20000e80 	.word	0x20000e80
 8007fc0:	20000e7c 	.word	0x20000e7c
 8007fc4:	e000ed04 	.word	0xe000ed04

08007fc8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b083      	sub	sp, #12
 8007fcc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007fce:	4b05      	ldr	r3, [pc, #20]	; (8007fe4 <xTaskGetTickCount+0x1c>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007fd4:	687b      	ldr	r3, [r7, #4]
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	370c      	adds	r7, #12
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe0:	4770      	bx	lr
 8007fe2:	bf00      	nop
 8007fe4:	20000e70 	.word	0x20000e70

08007fe8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b086      	sub	sp, #24
 8007fec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ff2:	4b4f      	ldr	r3, [pc, #316]	; (8008130 <xTaskIncrementTick+0x148>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	f040 808f 	bne.w	800811a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007ffc:	4b4d      	ldr	r3, [pc, #308]	; (8008134 <xTaskIncrementTick+0x14c>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	3301      	adds	r3, #1
 8008002:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008004:	4a4b      	ldr	r2, [pc, #300]	; (8008134 <xTaskIncrementTick+0x14c>)
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d120      	bne.n	8008052 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008010:	4b49      	ldr	r3, [pc, #292]	; (8008138 <xTaskIncrementTick+0x150>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d00a      	beq.n	8008030 <xTaskIncrementTick+0x48>
	__asm volatile
 800801a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800801e:	f383 8811 	msr	BASEPRI, r3
 8008022:	f3bf 8f6f 	isb	sy
 8008026:	f3bf 8f4f 	dsb	sy
 800802a:	603b      	str	r3, [r7, #0]
}
 800802c:	bf00      	nop
 800802e:	e7fe      	b.n	800802e <xTaskIncrementTick+0x46>
 8008030:	4b41      	ldr	r3, [pc, #260]	; (8008138 <xTaskIncrementTick+0x150>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	60fb      	str	r3, [r7, #12]
 8008036:	4b41      	ldr	r3, [pc, #260]	; (800813c <xTaskIncrementTick+0x154>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a3f      	ldr	r2, [pc, #252]	; (8008138 <xTaskIncrementTick+0x150>)
 800803c:	6013      	str	r3, [r2, #0]
 800803e:	4a3f      	ldr	r2, [pc, #252]	; (800813c <xTaskIncrementTick+0x154>)
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	6013      	str	r3, [r2, #0]
 8008044:	4b3e      	ldr	r3, [pc, #248]	; (8008140 <xTaskIncrementTick+0x158>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	3301      	adds	r3, #1
 800804a:	4a3d      	ldr	r2, [pc, #244]	; (8008140 <xTaskIncrementTick+0x158>)
 800804c:	6013      	str	r3, [r2, #0]
 800804e:	f000 fadb 	bl	8008608 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008052:	4b3c      	ldr	r3, [pc, #240]	; (8008144 <xTaskIncrementTick+0x15c>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	693a      	ldr	r2, [r7, #16]
 8008058:	429a      	cmp	r2, r3
 800805a:	d349      	bcc.n	80080f0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800805c:	4b36      	ldr	r3, [pc, #216]	; (8008138 <xTaskIncrementTick+0x150>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d104      	bne.n	8008070 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008066:	4b37      	ldr	r3, [pc, #220]	; (8008144 <xTaskIncrementTick+0x15c>)
 8008068:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800806c:	601a      	str	r2, [r3, #0]
					break;
 800806e:	e03f      	b.n	80080f0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008070:	4b31      	ldr	r3, [pc, #196]	; (8008138 <xTaskIncrementTick+0x150>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	68db      	ldr	r3, [r3, #12]
 8008076:	68db      	ldr	r3, [r3, #12]
 8008078:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008080:	693a      	ldr	r2, [r7, #16]
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	429a      	cmp	r2, r3
 8008086:	d203      	bcs.n	8008090 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008088:	4a2e      	ldr	r2, [pc, #184]	; (8008144 <xTaskIncrementTick+0x15c>)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800808e:	e02f      	b.n	80080f0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	3304      	adds	r3, #4
 8008094:	4618      	mov	r0, r3
 8008096:	f7fe ff79 	bl	8006f8c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d004      	beq.n	80080ac <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	3318      	adds	r3, #24
 80080a6:	4618      	mov	r0, r3
 80080a8:	f7fe ff70 	bl	8006f8c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080b0:	4b25      	ldr	r3, [pc, #148]	; (8008148 <xTaskIncrementTick+0x160>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	429a      	cmp	r2, r3
 80080b6:	d903      	bls.n	80080c0 <xTaskIncrementTick+0xd8>
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080bc:	4a22      	ldr	r2, [pc, #136]	; (8008148 <xTaskIncrementTick+0x160>)
 80080be:	6013      	str	r3, [r2, #0]
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080c4:	4613      	mov	r3, r2
 80080c6:	009b      	lsls	r3, r3, #2
 80080c8:	4413      	add	r3, r2
 80080ca:	009b      	lsls	r3, r3, #2
 80080cc:	4a1f      	ldr	r2, [pc, #124]	; (800814c <xTaskIncrementTick+0x164>)
 80080ce:	441a      	add	r2, r3
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	3304      	adds	r3, #4
 80080d4:	4619      	mov	r1, r3
 80080d6:	4610      	mov	r0, r2
 80080d8:	f7fe fefb 	bl	8006ed2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080e0:	4b1b      	ldr	r3, [pc, #108]	; (8008150 <xTaskIncrementTick+0x168>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080e6:	429a      	cmp	r2, r3
 80080e8:	d3b8      	bcc.n	800805c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80080ea:	2301      	movs	r3, #1
 80080ec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80080ee:	e7b5      	b.n	800805c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80080f0:	4b17      	ldr	r3, [pc, #92]	; (8008150 <xTaskIncrementTick+0x168>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080f6:	4915      	ldr	r1, [pc, #84]	; (800814c <xTaskIncrementTick+0x164>)
 80080f8:	4613      	mov	r3, r2
 80080fa:	009b      	lsls	r3, r3, #2
 80080fc:	4413      	add	r3, r2
 80080fe:	009b      	lsls	r3, r3, #2
 8008100:	440b      	add	r3, r1
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	2b01      	cmp	r3, #1
 8008106:	d901      	bls.n	800810c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008108:	2301      	movs	r3, #1
 800810a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800810c:	4b11      	ldr	r3, [pc, #68]	; (8008154 <xTaskIncrementTick+0x16c>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d007      	beq.n	8008124 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008114:	2301      	movs	r3, #1
 8008116:	617b      	str	r3, [r7, #20]
 8008118:	e004      	b.n	8008124 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800811a:	4b0f      	ldr	r3, [pc, #60]	; (8008158 <xTaskIncrementTick+0x170>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	3301      	adds	r3, #1
 8008120:	4a0d      	ldr	r2, [pc, #52]	; (8008158 <xTaskIncrementTick+0x170>)
 8008122:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008124:	697b      	ldr	r3, [r7, #20]
}
 8008126:	4618      	mov	r0, r3
 8008128:	3718      	adds	r7, #24
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}
 800812e:	bf00      	nop
 8008130:	20000e94 	.word	0x20000e94
 8008134:	20000e70 	.word	0x20000e70
 8008138:	20000e24 	.word	0x20000e24
 800813c:	20000e28 	.word	0x20000e28
 8008140:	20000e84 	.word	0x20000e84
 8008144:	20000e8c 	.word	0x20000e8c
 8008148:	20000e74 	.word	0x20000e74
 800814c:	2000099c 	.word	0x2000099c
 8008150:	20000998 	.word	0x20000998
 8008154:	20000e80 	.word	0x20000e80
 8008158:	20000e7c 	.word	0x20000e7c

0800815c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800815c:	b480      	push	{r7}
 800815e:	b085      	sub	sp, #20
 8008160:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008162:	4b2a      	ldr	r3, [pc, #168]	; (800820c <vTaskSwitchContext+0xb0>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d003      	beq.n	8008172 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800816a:	4b29      	ldr	r3, [pc, #164]	; (8008210 <vTaskSwitchContext+0xb4>)
 800816c:	2201      	movs	r2, #1
 800816e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008170:	e046      	b.n	8008200 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8008172:	4b27      	ldr	r3, [pc, #156]	; (8008210 <vTaskSwitchContext+0xb4>)
 8008174:	2200      	movs	r2, #0
 8008176:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008178:	4b26      	ldr	r3, [pc, #152]	; (8008214 <vTaskSwitchContext+0xb8>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	60fb      	str	r3, [r7, #12]
 800817e:	e010      	b.n	80081a2 <vTaskSwitchContext+0x46>
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d10a      	bne.n	800819c <vTaskSwitchContext+0x40>
	__asm volatile
 8008186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800818a:	f383 8811 	msr	BASEPRI, r3
 800818e:	f3bf 8f6f 	isb	sy
 8008192:	f3bf 8f4f 	dsb	sy
 8008196:	607b      	str	r3, [r7, #4]
}
 8008198:	bf00      	nop
 800819a:	e7fe      	b.n	800819a <vTaskSwitchContext+0x3e>
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	3b01      	subs	r3, #1
 80081a0:	60fb      	str	r3, [r7, #12]
 80081a2:	491d      	ldr	r1, [pc, #116]	; (8008218 <vTaskSwitchContext+0xbc>)
 80081a4:	68fa      	ldr	r2, [r7, #12]
 80081a6:	4613      	mov	r3, r2
 80081a8:	009b      	lsls	r3, r3, #2
 80081aa:	4413      	add	r3, r2
 80081ac:	009b      	lsls	r3, r3, #2
 80081ae:	440b      	add	r3, r1
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d0e4      	beq.n	8008180 <vTaskSwitchContext+0x24>
 80081b6:	68fa      	ldr	r2, [r7, #12]
 80081b8:	4613      	mov	r3, r2
 80081ba:	009b      	lsls	r3, r3, #2
 80081bc:	4413      	add	r3, r2
 80081be:	009b      	lsls	r3, r3, #2
 80081c0:	4a15      	ldr	r2, [pc, #84]	; (8008218 <vTaskSwitchContext+0xbc>)
 80081c2:	4413      	add	r3, r2
 80081c4:	60bb      	str	r3, [r7, #8]
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	685b      	ldr	r3, [r3, #4]
 80081ca:	685a      	ldr	r2, [r3, #4]
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	605a      	str	r2, [r3, #4]
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	685a      	ldr	r2, [r3, #4]
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	3308      	adds	r3, #8
 80081d8:	429a      	cmp	r2, r3
 80081da:	d104      	bne.n	80081e6 <vTaskSwitchContext+0x8a>
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	685a      	ldr	r2, [r3, #4]
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	605a      	str	r2, [r3, #4]
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	685b      	ldr	r3, [r3, #4]
 80081ea:	68db      	ldr	r3, [r3, #12]
 80081ec:	4a0b      	ldr	r2, [pc, #44]	; (800821c <vTaskSwitchContext+0xc0>)
 80081ee:	6013      	str	r3, [r2, #0]
 80081f0:	4a08      	ldr	r2, [pc, #32]	; (8008214 <vTaskSwitchContext+0xb8>)
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80081f6:	4b09      	ldr	r3, [pc, #36]	; (800821c <vTaskSwitchContext+0xc0>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	3354      	adds	r3, #84	; 0x54
 80081fc:	4a08      	ldr	r2, [pc, #32]	; (8008220 <vTaskSwitchContext+0xc4>)
 80081fe:	6013      	str	r3, [r2, #0]
}
 8008200:	bf00      	nop
 8008202:	3714      	adds	r7, #20
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr
 800820c:	20000e94 	.word	0x20000e94
 8008210:	20000e80 	.word	0x20000e80
 8008214:	20000e74 	.word	0x20000e74
 8008218:	2000099c 	.word	0x2000099c
 800821c:	20000998 	.word	0x20000998
 8008220:	20000100 	.word	0x20000100

08008224 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b084      	sub	sp, #16
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d10a      	bne.n	800824a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008238:	f383 8811 	msr	BASEPRI, r3
 800823c:	f3bf 8f6f 	isb	sy
 8008240:	f3bf 8f4f 	dsb	sy
 8008244:	60fb      	str	r3, [r7, #12]
}
 8008246:	bf00      	nop
 8008248:	e7fe      	b.n	8008248 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800824a:	4b07      	ldr	r3, [pc, #28]	; (8008268 <vTaskPlaceOnEventList+0x44>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	3318      	adds	r3, #24
 8008250:	4619      	mov	r1, r3
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f7fe fe61 	bl	8006f1a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008258:	2101      	movs	r1, #1
 800825a:	6838      	ldr	r0, [r7, #0]
 800825c:	f000 fa80 	bl	8008760 <prvAddCurrentTaskToDelayedList>
}
 8008260:	bf00      	nop
 8008262:	3710      	adds	r7, #16
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}
 8008268:	20000998 	.word	0x20000998

0800826c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800826c:	b580      	push	{r7, lr}
 800826e:	b086      	sub	sp, #24
 8008270:	af00      	add	r7, sp, #0
 8008272:	60f8      	str	r0, [r7, #12]
 8008274:	60b9      	str	r1, [r7, #8]
 8008276:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d10a      	bne.n	8008294 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800827e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008282:	f383 8811 	msr	BASEPRI, r3
 8008286:	f3bf 8f6f 	isb	sy
 800828a:	f3bf 8f4f 	dsb	sy
 800828e:	617b      	str	r3, [r7, #20]
}
 8008290:	bf00      	nop
 8008292:	e7fe      	b.n	8008292 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008294:	4b0a      	ldr	r3, [pc, #40]	; (80082c0 <vTaskPlaceOnEventListRestricted+0x54>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	3318      	adds	r3, #24
 800829a:	4619      	mov	r1, r3
 800829c:	68f8      	ldr	r0, [r7, #12]
 800829e:	f7fe fe18 	bl	8006ed2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d002      	beq.n	80082ae <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80082a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80082ac:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80082ae:	6879      	ldr	r1, [r7, #4]
 80082b0:	68b8      	ldr	r0, [r7, #8]
 80082b2:	f000 fa55 	bl	8008760 <prvAddCurrentTaskToDelayedList>
	}
 80082b6:	bf00      	nop
 80082b8:	3718      	adds	r7, #24
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}
 80082be:	bf00      	nop
 80082c0:	20000998 	.word	0x20000998

080082c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b086      	sub	sp, #24
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	68db      	ldr	r3, [r3, #12]
 80082d0:	68db      	ldr	r3, [r3, #12]
 80082d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80082d4:	693b      	ldr	r3, [r7, #16]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d10a      	bne.n	80082f0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80082da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082de:	f383 8811 	msr	BASEPRI, r3
 80082e2:	f3bf 8f6f 	isb	sy
 80082e6:	f3bf 8f4f 	dsb	sy
 80082ea:	60fb      	str	r3, [r7, #12]
}
 80082ec:	bf00      	nop
 80082ee:	e7fe      	b.n	80082ee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80082f0:	693b      	ldr	r3, [r7, #16]
 80082f2:	3318      	adds	r3, #24
 80082f4:	4618      	mov	r0, r3
 80082f6:	f7fe fe49 	bl	8006f8c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082fa:	4b1e      	ldr	r3, [pc, #120]	; (8008374 <xTaskRemoveFromEventList+0xb0>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d11d      	bne.n	800833e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	3304      	adds	r3, #4
 8008306:	4618      	mov	r0, r3
 8008308:	f7fe fe40 	bl	8006f8c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800830c:	693b      	ldr	r3, [r7, #16]
 800830e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008310:	4b19      	ldr	r3, [pc, #100]	; (8008378 <xTaskRemoveFromEventList+0xb4>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	429a      	cmp	r2, r3
 8008316:	d903      	bls.n	8008320 <xTaskRemoveFromEventList+0x5c>
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800831c:	4a16      	ldr	r2, [pc, #88]	; (8008378 <xTaskRemoveFromEventList+0xb4>)
 800831e:	6013      	str	r3, [r2, #0]
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008324:	4613      	mov	r3, r2
 8008326:	009b      	lsls	r3, r3, #2
 8008328:	4413      	add	r3, r2
 800832a:	009b      	lsls	r3, r3, #2
 800832c:	4a13      	ldr	r2, [pc, #76]	; (800837c <xTaskRemoveFromEventList+0xb8>)
 800832e:	441a      	add	r2, r3
 8008330:	693b      	ldr	r3, [r7, #16]
 8008332:	3304      	adds	r3, #4
 8008334:	4619      	mov	r1, r3
 8008336:	4610      	mov	r0, r2
 8008338:	f7fe fdcb 	bl	8006ed2 <vListInsertEnd>
 800833c:	e005      	b.n	800834a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800833e:	693b      	ldr	r3, [r7, #16]
 8008340:	3318      	adds	r3, #24
 8008342:	4619      	mov	r1, r3
 8008344:	480e      	ldr	r0, [pc, #56]	; (8008380 <xTaskRemoveFromEventList+0xbc>)
 8008346:	f7fe fdc4 	bl	8006ed2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800834e:	4b0d      	ldr	r3, [pc, #52]	; (8008384 <xTaskRemoveFromEventList+0xc0>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008354:	429a      	cmp	r2, r3
 8008356:	d905      	bls.n	8008364 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008358:	2301      	movs	r3, #1
 800835a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800835c:	4b0a      	ldr	r3, [pc, #40]	; (8008388 <xTaskRemoveFromEventList+0xc4>)
 800835e:	2201      	movs	r2, #1
 8008360:	601a      	str	r2, [r3, #0]
 8008362:	e001      	b.n	8008368 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008364:	2300      	movs	r3, #0
 8008366:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008368:	697b      	ldr	r3, [r7, #20]
}
 800836a:	4618      	mov	r0, r3
 800836c:	3718      	adds	r7, #24
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}
 8008372:	bf00      	nop
 8008374:	20000e94 	.word	0x20000e94
 8008378:	20000e74 	.word	0x20000e74
 800837c:	2000099c 	.word	0x2000099c
 8008380:	20000e2c 	.word	0x20000e2c
 8008384:	20000998 	.word	0x20000998
 8008388:	20000e80 	.word	0x20000e80

0800838c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800838c:	b480      	push	{r7}
 800838e:	b083      	sub	sp, #12
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008394:	4b06      	ldr	r3, [pc, #24]	; (80083b0 <vTaskInternalSetTimeOutState+0x24>)
 8008396:	681a      	ldr	r2, [r3, #0]
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800839c:	4b05      	ldr	r3, [pc, #20]	; (80083b4 <vTaskInternalSetTimeOutState+0x28>)
 800839e:	681a      	ldr	r2, [r3, #0]
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	605a      	str	r2, [r3, #4]
}
 80083a4:	bf00      	nop
 80083a6:	370c      	adds	r7, #12
 80083a8:	46bd      	mov	sp, r7
 80083aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ae:	4770      	bx	lr
 80083b0:	20000e84 	.word	0x20000e84
 80083b4:	20000e70 	.word	0x20000e70

080083b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b088      	sub	sp, #32
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
 80083c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d10a      	bne.n	80083de <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80083c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083cc:	f383 8811 	msr	BASEPRI, r3
 80083d0:	f3bf 8f6f 	isb	sy
 80083d4:	f3bf 8f4f 	dsb	sy
 80083d8:	613b      	str	r3, [r7, #16]
}
 80083da:	bf00      	nop
 80083dc:	e7fe      	b.n	80083dc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d10a      	bne.n	80083fa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80083e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083e8:	f383 8811 	msr	BASEPRI, r3
 80083ec:	f3bf 8f6f 	isb	sy
 80083f0:	f3bf 8f4f 	dsb	sy
 80083f4:	60fb      	str	r3, [r7, #12]
}
 80083f6:	bf00      	nop
 80083f8:	e7fe      	b.n	80083f8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80083fa:	f000 fe83 	bl	8009104 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80083fe:	4b1d      	ldr	r3, [pc, #116]	; (8008474 <xTaskCheckForTimeOut+0xbc>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	685b      	ldr	r3, [r3, #4]
 8008408:	69ba      	ldr	r2, [r7, #24]
 800840a:	1ad3      	subs	r3, r2, r3
 800840c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008416:	d102      	bne.n	800841e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008418:	2300      	movs	r3, #0
 800841a:	61fb      	str	r3, [r7, #28]
 800841c:	e023      	b.n	8008466 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681a      	ldr	r2, [r3, #0]
 8008422:	4b15      	ldr	r3, [pc, #84]	; (8008478 <xTaskCheckForTimeOut+0xc0>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	429a      	cmp	r2, r3
 8008428:	d007      	beq.n	800843a <xTaskCheckForTimeOut+0x82>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	685b      	ldr	r3, [r3, #4]
 800842e:	69ba      	ldr	r2, [r7, #24]
 8008430:	429a      	cmp	r2, r3
 8008432:	d302      	bcc.n	800843a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008434:	2301      	movs	r3, #1
 8008436:	61fb      	str	r3, [r7, #28]
 8008438:	e015      	b.n	8008466 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	697a      	ldr	r2, [r7, #20]
 8008440:	429a      	cmp	r2, r3
 8008442:	d20b      	bcs.n	800845c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	681a      	ldr	r2, [r3, #0]
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	1ad2      	subs	r2, r2, r3
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f7ff ff9b 	bl	800838c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008456:	2300      	movs	r3, #0
 8008458:	61fb      	str	r3, [r7, #28]
 800845a:	e004      	b.n	8008466 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	2200      	movs	r2, #0
 8008460:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008462:	2301      	movs	r3, #1
 8008464:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008466:	f000 fe7d 	bl	8009164 <vPortExitCritical>

	return xReturn;
 800846a:	69fb      	ldr	r3, [r7, #28]
}
 800846c:	4618      	mov	r0, r3
 800846e:	3720      	adds	r7, #32
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}
 8008474:	20000e70 	.word	0x20000e70
 8008478:	20000e84 	.word	0x20000e84

0800847c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800847c:	b480      	push	{r7}
 800847e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008480:	4b03      	ldr	r3, [pc, #12]	; (8008490 <vTaskMissedYield+0x14>)
 8008482:	2201      	movs	r2, #1
 8008484:	601a      	str	r2, [r3, #0]
}
 8008486:	bf00      	nop
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr
 8008490:	20000e80 	.word	0x20000e80

08008494 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b082      	sub	sp, #8
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800849c:	f000 f852 	bl	8008544 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80084a0:	4b06      	ldr	r3, [pc, #24]	; (80084bc <prvIdleTask+0x28>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	2b01      	cmp	r3, #1
 80084a6:	d9f9      	bls.n	800849c <prvIdleTask+0x8>
			{
				taskYIELD();
 80084a8:	4b05      	ldr	r3, [pc, #20]	; (80084c0 <prvIdleTask+0x2c>)
 80084aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084ae:	601a      	str	r2, [r3, #0]
 80084b0:	f3bf 8f4f 	dsb	sy
 80084b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80084b8:	e7f0      	b.n	800849c <prvIdleTask+0x8>
 80084ba:	bf00      	nop
 80084bc:	2000099c 	.word	0x2000099c
 80084c0:	e000ed04 	.word	0xe000ed04

080084c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b082      	sub	sp, #8
 80084c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80084ca:	2300      	movs	r3, #0
 80084cc:	607b      	str	r3, [r7, #4]
 80084ce:	e00c      	b.n	80084ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80084d0:	687a      	ldr	r2, [r7, #4]
 80084d2:	4613      	mov	r3, r2
 80084d4:	009b      	lsls	r3, r3, #2
 80084d6:	4413      	add	r3, r2
 80084d8:	009b      	lsls	r3, r3, #2
 80084da:	4a12      	ldr	r2, [pc, #72]	; (8008524 <prvInitialiseTaskLists+0x60>)
 80084dc:	4413      	add	r3, r2
 80084de:	4618      	mov	r0, r3
 80084e0:	f7fe fcca 	bl	8006e78 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	3301      	adds	r3, #1
 80084e8:	607b      	str	r3, [r7, #4]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2b37      	cmp	r3, #55	; 0x37
 80084ee:	d9ef      	bls.n	80084d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80084f0:	480d      	ldr	r0, [pc, #52]	; (8008528 <prvInitialiseTaskLists+0x64>)
 80084f2:	f7fe fcc1 	bl	8006e78 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80084f6:	480d      	ldr	r0, [pc, #52]	; (800852c <prvInitialiseTaskLists+0x68>)
 80084f8:	f7fe fcbe 	bl	8006e78 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80084fc:	480c      	ldr	r0, [pc, #48]	; (8008530 <prvInitialiseTaskLists+0x6c>)
 80084fe:	f7fe fcbb 	bl	8006e78 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008502:	480c      	ldr	r0, [pc, #48]	; (8008534 <prvInitialiseTaskLists+0x70>)
 8008504:	f7fe fcb8 	bl	8006e78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008508:	480b      	ldr	r0, [pc, #44]	; (8008538 <prvInitialiseTaskLists+0x74>)
 800850a:	f7fe fcb5 	bl	8006e78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800850e:	4b0b      	ldr	r3, [pc, #44]	; (800853c <prvInitialiseTaskLists+0x78>)
 8008510:	4a05      	ldr	r2, [pc, #20]	; (8008528 <prvInitialiseTaskLists+0x64>)
 8008512:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008514:	4b0a      	ldr	r3, [pc, #40]	; (8008540 <prvInitialiseTaskLists+0x7c>)
 8008516:	4a05      	ldr	r2, [pc, #20]	; (800852c <prvInitialiseTaskLists+0x68>)
 8008518:	601a      	str	r2, [r3, #0]
}
 800851a:	bf00      	nop
 800851c:	3708      	adds	r7, #8
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
 8008522:	bf00      	nop
 8008524:	2000099c 	.word	0x2000099c
 8008528:	20000dfc 	.word	0x20000dfc
 800852c:	20000e10 	.word	0x20000e10
 8008530:	20000e2c 	.word	0x20000e2c
 8008534:	20000e40 	.word	0x20000e40
 8008538:	20000e58 	.word	0x20000e58
 800853c:	20000e24 	.word	0x20000e24
 8008540:	20000e28 	.word	0x20000e28

08008544 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b082      	sub	sp, #8
 8008548:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800854a:	e019      	b.n	8008580 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800854c:	f000 fdda 	bl	8009104 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008550:	4b10      	ldr	r3, [pc, #64]	; (8008594 <prvCheckTasksWaitingTermination+0x50>)
 8008552:	68db      	ldr	r3, [r3, #12]
 8008554:	68db      	ldr	r3, [r3, #12]
 8008556:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	3304      	adds	r3, #4
 800855c:	4618      	mov	r0, r3
 800855e:	f7fe fd15 	bl	8006f8c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008562:	4b0d      	ldr	r3, [pc, #52]	; (8008598 <prvCheckTasksWaitingTermination+0x54>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	3b01      	subs	r3, #1
 8008568:	4a0b      	ldr	r2, [pc, #44]	; (8008598 <prvCheckTasksWaitingTermination+0x54>)
 800856a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800856c:	4b0b      	ldr	r3, [pc, #44]	; (800859c <prvCheckTasksWaitingTermination+0x58>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	3b01      	subs	r3, #1
 8008572:	4a0a      	ldr	r2, [pc, #40]	; (800859c <prvCheckTasksWaitingTermination+0x58>)
 8008574:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008576:	f000 fdf5 	bl	8009164 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f000 f810 	bl	80085a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008580:	4b06      	ldr	r3, [pc, #24]	; (800859c <prvCheckTasksWaitingTermination+0x58>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d1e1      	bne.n	800854c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008588:	bf00      	nop
 800858a:	bf00      	nop
 800858c:	3708      	adds	r7, #8
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}
 8008592:	bf00      	nop
 8008594:	20000e40 	.word	0x20000e40
 8008598:	20000e6c 	.word	0x20000e6c
 800859c:	20000e54 	.word	0x20000e54

080085a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b084      	sub	sp, #16
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	3354      	adds	r3, #84	; 0x54
 80085ac:	4618      	mov	r0, r3
 80085ae:	f001 fe19 	bl	800a1e4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d108      	bne.n	80085ce <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085c0:	4618      	mov	r0, r3
 80085c2:	f000 ff8d 	bl	80094e0 <vPortFree>
				vPortFree( pxTCB );
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f000 ff8a 	bl	80094e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80085cc:	e018      	b.n	8008600 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80085d4:	2b01      	cmp	r3, #1
 80085d6:	d103      	bne.n	80085e0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f000 ff81 	bl	80094e0 <vPortFree>
	}
 80085de:	e00f      	b.n	8008600 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80085e6:	2b02      	cmp	r3, #2
 80085e8:	d00a      	beq.n	8008600 <prvDeleteTCB+0x60>
	__asm volatile
 80085ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ee:	f383 8811 	msr	BASEPRI, r3
 80085f2:	f3bf 8f6f 	isb	sy
 80085f6:	f3bf 8f4f 	dsb	sy
 80085fa:	60fb      	str	r3, [r7, #12]
}
 80085fc:	bf00      	nop
 80085fe:	e7fe      	b.n	80085fe <prvDeleteTCB+0x5e>
	}
 8008600:	bf00      	nop
 8008602:	3710      	adds	r7, #16
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}

08008608 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008608:	b480      	push	{r7}
 800860a:	b083      	sub	sp, #12
 800860c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800860e:	4b0c      	ldr	r3, [pc, #48]	; (8008640 <prvResetNextTaskUnblockTime+0x38>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d104      	bne.n	8008622 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008618:	4b0a      	ldr	r3, [pc, #40]	; (8008644 <prvResetNextTaskUnblockTime+0x3c>)
 800861a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800861e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008620:	e008      	b.n	8008634 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008622:	4b07      	ldr	r3, [pc, #28]	; (8008640 <prvResetNextTaskUnblockTime+0x38>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	68db      	ldr	r3, [r3, #12]
 8008628:	68db      	ldr	r3, [r3, #12]
 800862a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	4a04      	ldr	r2, [pc, #16]	; (8008644 <prvResetNextTaskUnblockTime+0x3c>)
 8008632:	6013      	str	r3, [r2, #0]
}
 8008634:	bf00      	nop
 8008636:	370c      	adds	r7, #12
 8008638:	46bd      	mov	sp, r7
 800863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863e:	4770      	bx	lr
 8008640:	20000e24 	.word	0x20000e24
 8008644:	20000e8c 	.word	0x20000e8c

08008648 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008648:	b480      	push	{r7}
 800864a:	b083      	sub	sp, #12
 800864c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800864e:	4b0b      	ldr	r3, [pc, #44]	; (800867c <xTaskGetSchedulerState+0x34>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d102      	bne.n	800865c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008656:	2301      	movs	r3, #1
 8008658:	607b      	str	r3, [r7, #4]
 800865a:	e008      	b.n	800866e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800865c:	4b08      	ldr	r3, [pc, #32]	; (8008680 <xTaskGetSchedulerState+0x38>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d102      	bne.n	800866a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008664:	2302      	movs	r3, #2
 8008666:	607b      	str	r3, [r7, #4]
 8008668:	e001      	b.n	800866e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800866a:	2300      	movs	r3, #0
 800866c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800866e:	687b      	ldr	r3, [r7, #4]
	}
 8008670:	4618      	mov	r0, r3
 8008672:	370c      	adds	r7, #12
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr
 800867c:	20000e78 	.word	0x20000e78
 8008680:	20000e94 	.word	0x20000e94

08008684 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008684:	b580      	push	{r7, lr}
 8008686:	b086      	sub	sp, #24
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008690:	2300      	movs	r3, #0
 8008692:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d056      	beq.n	8008748 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800869a:	4b2e      	ldr	r3, [pc, #184]	; (8008754 <xTaskPriorityDisinherit+0xd0>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	693a      	ldr	r2, [r7, #16]
 80086a0:	429a      	cmp	r2, r3
 80086a2:	d00a      	beq.n	80086ba <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80086a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a8:	f383 8811 	msr	BASEPRI, r3
 80086ac:	f3bf 8f6f 	isb	sy
 80086b0:	f3bf 8f4f 	dsb	sy
 80086b4:	60fb      	str	r3, [r7, #12]
}
 80086b6:	bf00      	nop
 80086b8:	e7fe      	b.n	80086b8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d10a      	bne.n	80086d8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80086c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c6:	f383 8811 	msr	BASEPRI, r3
 80086ca:	f3bf 8f6f 	isb	sy
 80086ce:	f3bf 8f4f 	dsb	sy
 80086d2:	60bb      	str	r3, [r7, #8]
}
 80086d4:	bf00      	nop
 80086d6:	e7fe      	b.n	80086d6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086dc:	1e5a      	subs	r2, r3, #1
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086ea:	429a      	cmp	r2, r3
 80086ec:	d02c      	beq.n	8008748 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d128      	bne.n	8008748 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	3304      	adds	r3, #4
 80086fa:	4618      	mov	r0, r3
 80086fc:	f7fe fc46 	bl	8006f8c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800870c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008718:	4b0f      	ldr	r3, [pc, #60]	; (8008758 <xTaskPriorityDisinherit+0xd4>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	429a      	cmp	r2, r3
 800871e:	d903      	bls.n	8008728 <xTaskPriorityDisinherit+0xa4>
 8008720:	693b      	ldr	r3, [r7, #16]
 8008722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008724:	4a0c      	ldr	r2, [pc, #48]	; (8008758 <xTaskPriorityDisinherit+0xd4>)
 8008726:	6013      	str	r3, [r2, #0]
 8008728:	693b      	ldr	r3, [r7, #16]
 800872a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800872c:	4613      	mov	r3, r2
 800872e:	009b      	lsls	r3, r3, #2
 8008730:	4413      	add	r3, r2
 8008732:	009b      	lsls	r3, r3, #2
 8008734:	4a09      	ldr	r2, [pc, #36]	; (800875c <xTaskPriorityDisinherit+0xd8>)
 8008736:	441a      	add	r2, r3
 8008738:	693b      	ldr	r3, [r7, #16]
 800873a:	3304      	adds	r3, #4
 800873c:	4619      	mov	r1, r3
 800873e:	4610      	mov	r0, r2
 8008740:	f7fe fbc7 	bl	8006ed2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008744:	2301      	movs	r3, #1
 8008746:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008748:	697b      	ldr	r3, [r7, #20]
	}
 800874a:	4618      	mov	r0, r3
 800874c:	3718      	adds	r7, #24
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}
 8008752:	bf00      	nop
 8008754:	20000998 	.word	0x20000998
 8008758:	20000e74 	.word	0x20000e74
 800875c:	2000099c 	.word	0x2000099c

08008760 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b084      	sub	sp, #16
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
 8008768:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800876a:	4b21      	ldr	r3, [pc, #132]	; (80087f0 <prvAddCurrentTaskToDelayedList+0x90>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008770:	4b20      	ldr	r3, [pc, #128]	; (80087f4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	3304      	adds	r3, #4
 8008776:	4618      	mov	r0, r3
 8008778:	f7fe fc08 	bl	8006f8c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008782:	d10a      	bne.n	800879a <prvAddCurrentTaskToDelayedList+0x3a>
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d007      	beq.n	800879a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800878a:	4b1a      	ldr	r3, [pc, #104]	; (80087f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	3304      	adds	r3, #4
 8008790:	4619      	mov	r1, r3
 8008792:	4819      	ldr	r0, [pc, #100]	; (80087f8 <prvAddCurrentTaskToDelayedList+0x98>)
 8008794:	f7fe fb9d 	bl	8006ed2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008798:	e026      	b.n	80087e8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800879a:	68fa      	ldr	r2, [r7, #12]
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	4413      	add	r3, r2
 80087a0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80087a2:	4b14      	ldr	r3, [pc, #80]	; (80087f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	68ba      	ldr	r2, [r7, #8]
 80087a8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80087aa:	68ba      	ldr	r2, [r7, #8]
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	429a      	cmp	r2, r3
 80087b0:	d209      	bcs.n	80087c6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80087b2:	4b12      	ldr	r3, [pc, #72]	; (80087fc <prvAddCurrentTaskToDelayedList+0x9c>)
 80087b4:	681a      	ldr	r2, [r3, #0]
 80087b6:	4b0f      	ldr	r3, [pc, #60]	; (80087f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	3304      	adds	r3, #4
 80087bc:	4619      	mov	r1, r3
 80087be:	4610      	mov	r0, r2
 80087c0:	f7fe fbab 	bl	8006f1a <vListInsert>
}
 80087c4:	e010      	b.n	80087e8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80087c6:	4b0e      	ldr	r3, [pc, #56]	; (8008800 <prvAddCurrentTaskToDelayedList+0xa0>)
 80087c8:	681a      	ldr	r2, [r3, #0]
 80087ca:	4b0a      	ldr	r3, [pc, #40]	; (80087f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	3304      	adds	r3, #4
 80087d0:	4619      	mov	r1, r3
 80087d2:	4610      	mov	r0, r2
 80087d4:	f7fe fba1 	bl	8006f1a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80087d8:	4b0a      	ldr	r3, [pc, #40]	; (8008804 <prvAddCurrentTaskToDelayedList+0xa4>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	68ba      	ldr	r2, [r7, #8]
 80087de:	429a      	cmp	r2, r3
 80087e0:	d202      	bcs.n	80087e8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80087e2:	4a08      	ldr	r2, [pc, #32]	; (8008804 <prvAddCurrentTaskToDelayedList+0xa4>)
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	6013      	str	r3, [r2, #0]
}
 80087e8:	bf00      	nop
 80087ea:	3710      	adds	r7, #16
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}
 80087f0:	20000e70 	.word	0x20000e70
 80087f4:	20000998 	.word	0x20000998
 80087f8:	20000e58 	.word	0x20000e58
 80087fc:	20000e28 	.word	0x20000e28
 8008800:	20000e24 	.word	0x20000e24
 8008804:	20000e8c 	.word	0x20000e8c

08008808 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b08a      	sub	sp, #40	; 0x28
 800880c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800880e:	2300      	movs	r3, #0
 8008810:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008812:	f000 fb07 	bl	8008e24 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008816:	4b1c      	ldr	r3, [pc, #112]	; (8008888 <xTimerCreateTimerTask+0x80>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d021      	beq.n	8008862 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800881e:	2300      	movs	r3, #0
 8008820:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008822:	2300      	movs	r3, #0
 8008824:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008826:	1d3a      	adds	r2, r7, #4
 8008828:	f107 0108 	add.w	r1, r7, #8
 800882c:	f107 030c 	add.w	r3, r7, #12
 8008830:	4618      	mov	r0, r3
 8008832:	f7fe fb07 	bl	8006e44 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008836:	6879      	ldr	r1, [r7, #4]
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	68fa      	ldr	r2, [r7, #12]
 800883c:	9202      	str	r2, [sp, #8]
 800883e:	9301      	str	r3, [sp, #4]
 8008840:	2302      	movs	r3, #2
 8008842:	9300      	str	r3, [sp, #0]
 8008844:	2300      	movs	r3, #0
 8008846:	460a      	mov	r2, r1
 8008848:	4910      	ldr	r1, [pc, #64]	; (800888c <xTimerCreateTimerTask+0x84>)
 800884a:	4811      	ldr	r0, [pc, #68]	; (8008890 <xTimerCreateTimerTask+0x88>)
 800884c:	f7ff f8b4 	bl	80079b8 <xTaskCreateStatic>
 8008850:	4603      	mov	r3, r0
 8008852:	4a10      	ldr	r2, [pc, #64]	; (8008894 <xTimerCreateTimerTask+0x8c>)
 8008854:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008856:	4b0f      	ldr	r3, [pc, #60]	; (8008894 <xTimerCreateTimerTask+0x8c>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d001      	beq.n	8008862 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800885e:	2301      	movs	r3, #1
 8008860:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d10a      	bne.n	800887e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800886c:	f383 8811 	msr	BASEPRI, r3
 8008870:	f3bf 8f6f 	isb	sy
 8008874:	f3bf 8f4f 	dsb	sy
 8008878:	613b      	str	r3, [r7, #16]
}
 800887a:	bf00      	nop
 800887c:	e7fe      	b.n	800887c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800887e:	697b      	ldr	r3, [r7, #20]
}
 8008880:	4618      	mov	r0, r3
 8008882:	3718      	adds	r7, #24
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}
 8008888:	20000ec8 	.word	0x20000ec8
 800888c:	0800a3b8 	.word	0x0800a3b8
 8008890:	080089cd 	.word	0x080089cd
 8008894:	20000ecc 	.word	0x20000ecc

08008898 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b08a      	sub	sp, #40	; 0x28
 800889c:	af00      	add	r7, sp, #0
 800889e:	60f8      	str	r0, [r7, #12]
 80088a0:	60b9      	str	r1, [r7, #8]
 80088a2:	607a      	str	r2, [r7, #4]
 80088a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80088a6:	2300      	movs	r3, #0
 80088a8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d10a      	bne.n	80088c6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80088b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b4:	f383 8811 	msr	BASEPRI, r3
 80088b8:	f3bf 8f6f 	isb	sy
 80088bc:	f3bf 8f4f 	dsb	sy
 80088c0:	623b      	str	r3, [r7, #32]
}
 80088c2:	bf00      	nop
 80088c4:	e7fe      	b.n	80088c4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80088c6:	4b1a      	ldr	r3, [pc, #104]	; (8008930 <xTimerGenericCommand+0x98>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d02a      	beq.n	8008924 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	2b05      	cmp	r3, #5
 80088de:	dc18      	bgt.n	8008912 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80088e0:	f7ff feb2 	bl	8008648 <xTaskGetSchedulerState>
 80088e4:	4603      	mov	r3, r0
 80088e6:	2b02      	cmp	r3, #2
 80088e8:	d109      	bne.n	80088fe <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80088ea:	4b11      	ldr	r3, [pc, #68]	; (8008930 <xTimerGenericCommand+0x98>)
 80088ec:	6818      	ldr	r0, [r3, #0]
 80088ee:	f107 0110 	add.w	r1, r7, #16
 80088f2:	2300      	movs	r3, #0
 80088f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088f6:	f7fe fc77 	bl	80071e8 <xQueueGenericSend>
 80088fa:	6278      	str	r0, [r7, #36]	; 0x24
 80088fc:	e012      	b.n	8008924 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80088fe:	4b0c      	ldr	r3, [pc, #48]	; (8008930 <xTimerGenericCommand+0x98>)
 8008900:	6818      	ldr	r0, [r3, #0]
 8008902:	f107 0110 	add.w	r1, r7, #16
 8008906:	2300      	movs	r3, #0
 8008908:	2200      	movs	r2, #0
 800890a:	f7fe fc6d 	bl	80071e8 <xQueueGenericSend>
 800890e:	6278      	str	r0, [r7, #36]	; 0x24
 8008910:	e008      	b.n	8008924 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008912:	4b07      	ldr	r3, [pc, #28]	; (8008930 <xTimerGenericCommand+0x98>)
 8008914:	6818      	ldr	r0, [r3, #0]
 8008916:	f107 0110 	add.w	r1, r7, #16
 800891a:	2300      	movs	r3, #0
 800891c:	683a      	ldr	r2, [r7, #0]
 800891e:	f7fe fd61 	bl	80073e4 <xQueueGenericSendFromISR>
 8008922:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008926:	4618      	mov	r0, r3
 8008928:	3728      	adds	r7, #40	; 0x28
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}
 800892e:	bf00      	nop
 8008930:	20000ec8 	.word	0x20000ec8

08008934 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b088      	sub	sp, #32
 8008938:	af02      	add	r7, sp, #8
 800893a:	6078      	str	r0, [r7, #4]
 800893c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800893e:	4b22      	ldr	r3, [pc, #136]	; (80089c8 <prvProcessExpiredTimer+0x94>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	68db      	ldr	r3, [r3, #12]
 8008944:	68db      	ldr	r3, [r3, #12]
 8008946:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008948:	697b      	ldr	r3, [r7, #20]
 800894a:	3304      	adds	r3, #4
 800894c:	4618      	mov	r0, r3
 800894e:	f7fe fb1d 	bl	8006f8c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008958:	f003 0304 	and.w	r3, r3, #4
 800895c:	2b00      	cmp	r3, #0
 800895e:	d022      	beq.n	80089a6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	699a      	ldr	r2, [r3, #24]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	18d1      	adds	r1, r2, r3
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	683a      	ldr	r2, [r7, #0]
 800896c:	6978      	ldr	r0, [r7, #20]
 800896e:	f000 f8d1 	bl	8008b14 <prvInsertTimerInActiveList>
 8008972:	4603      	mov	r3, r0
 8008974:	2b00      	cmp	r3, #0
 8008976:	d01f      	beq.n	80089b8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008978:	2300      	movs	r3, #0
 800897a:	9300      	str	r3, [sp, #0]
 800897c:	2300      	movs	r3, #0
 800897e:	687a      	ldr	r2, [r7, #4]
 8008980:	2100      	movs	r1, #0
 8008982:	6978      	ldr	r0, [r7, #20]
 8008984:	f7ff ff88 	bl	8008898 <xTimerGenericCommand>
 8008988:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d113      	bne.n	80089b8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008994:	f383 8811 	msr	BASEPRI, r3
 8008998:	f3bf 8f6f 	isb	sy
 800899c:	f3bf 8f4f 	dsb	sy
 80089a0:	60fb      	str	r3, [r7, #12]
}
 80089a2:	bf00      	nop
 80089a4:	e7fe      	b.n	80089a4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80089ac:	f023 0301 	bic.w	r3, r3, #1
 80089b0:	b2da      	uxtb	r2, r3
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	6a1b      	ldr	r3, [r3, #32]
 80089bc:	6978      	ldr	r0, [r7, #20]
 80089be:	4798      	blx	r3
}
 80089c0:	bf00      	nop
 80089c2:	3718      	adds	r7, #24
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}
 80089c8:	20000ec0 	.word	0x20000ec0

080089cc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b084      	sub	sp, #16
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80089d4:	f107 0308 	add.w	r3, r7, #8
 80089d8:	4618      	mov	r0, r3
 80089da:	f000 f857 	bl	8008a8c <prvGetNextExpireTime>
 80089de:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	4619      	mov	r1, r3
 80089e4:	68f8      	ldr	r0, [r7, #12]
 80089e6:	f000 f803 	bl	80089f0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80089ea:	f000 f8d5 	bl	8008b98 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80089ee:	e7f1      	b.n	80089d4 <prvTimerTask+0x8>

080089f0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b084      	sub	sp, #16
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
 80089f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80089fa:	f7ff fa39 	bl	8007e70 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80089fe:	f107 0308 	add.w	r3, r7, #8
 8008a02:	4618      	mov	r0, r3
 8008a04:	f000 f866 	bl	8008ad4 <prvSampleTimeNow>
 8008a08:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d130      	bne.n	8008a72 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d10a      	bne.n	8008a2c <prvProcessTimerOrBlockTask+0x3c>
 8008a16:	687a      	ldr	r2, [r7, #4]
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	429a      	cmp	r2, r3
 8008a1c:	d806      	bhi.n	8008a2c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008a1e:	f7ff fa35 	bl	8007e8c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008a22:	68f9      	ldr	r1, [r7, #12]
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f7ff ff85 	bl	8008934 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008a2a:	e024      	b.n	8008a76 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d008      	beq.n	8008a44 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008a32:	4b13      	ldr	r3, [pc, #76]	; (8008a80 <prvProcessTimerOrBlockTask+0x90>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d101      	bne.n	8008a40 <prvProcessTimerOrBlockTask+0x50>
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	e000      	b.n	8008a42 <prvProcessTimerOrBlockTask+0x52>
 8008a40:	2300      	movs	r3, #0
 8008a42:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008a44:	4b0f      	ldr	r3, [pc, #60]	; (8008a84 <prvProcessTimerOrBlockTask+0x94>)
 8008a46:	6818      	ldr	r0, [r3, #0]
 8008a48:	687a      	ldr	r2, [r7, #4]
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	1ad3      	subs	r3, r2, r3
 8008a4e:	683a      	ldr	r2, [r7, #0]
 8008a50:	4619      	mov	r1, r3
 8008a52:	f7fe ff7d 	bl	8007950 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008a56:	f7ff fa19 	bl	8007e8c <xTaskResumeAll>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d10a      	bne.n	8008a76 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008a60:	4b09      	ldr	r3, [pc, #36]	; (8008a88 <prvProcessTimerOrBlockTask+0x98>)
 8008a62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a66:	601a      	str	r2, [r3, #0]
 8008a68:	f3bf 8f4f 	dsb	sy
 8008a6c:	f3bf 8f6f 	isb	sy
}
 8008a70:	e001      	b.n	8008a76 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008a72:	f7ff fa0b 	bl	8007e8c <xTaskResumeAll>
}
 8008a76:	bf00      	nop
 8008a78:	3710      	adds	r7, #16
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}
 8008a7e:	bf00      	nop
 8008a80:	20000ec4 	.word	0x20000ec4
 8008a84:	20000ec8 	.word	0x20000ec8
 8008a88:	e000ed04 	.word	0xe000ed04

08008a8c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b085      	sub	sp, #20
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008a94:	4b0e      	ldr	r3, [pc, #56]	; (8008ad0 <prvGetNextExpireTime+0x44>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d101      	bne.n	8008aa2 <prvGetNextExpireTime+0x16>
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	e000      	b.n	8008aa4 <prvGetNextExpireTime+0x18>
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d105      	bne.n	8008abc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008ab0:	4b07      	ldr	r3, [pc, #28]	; (8008ad0 <prvGetNextExpireTime+0x44>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	68db      	ldr	r3, [r3, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	60fb      	str	r3, [r7, #12]
 8008aba:	e001      	b.n	8008ac0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008abc:	2300      	movs	r3, #0
 8008abe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	3714      	adds	r7, #20
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008acc:	4770      	bx	lr
 8008ace:	bf00      	nop
 8008ad0:	20000ec0 	.word	0x20000ec0

08008ad4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b084      	sub	sp, #16
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008adc:	f7ff fa74 	bl	8007fc8 <xTaskGetTickCount>
 8008ae0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008ae2:	4b0b      	ldr	r3, [pc, #44]	; (8008b10 <prvSampleTimeNow+0x3c>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	68fa      	ldr	r2, [r7, #12]
 8008ae8:	429a      	cmp	r2, r3
 8008aea:	d205      	bcs.n	8008af8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008aec:	f000 f936 	bl	8008d5c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2201      	movs	r2, #1
 8008af4:	601a      	str	r2, [r3, #0]
 8008af6:	e002      	b.n	8008afe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2200      	movs	r2, #0
 8008afc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008afe:	4a04      	ldr	r2, [pc, #16]	; (8008b10 <prvSampleTimeNow+0x3c>)
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008b04:	68fb      	ldr	r3, [r7, #12]
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	3710      	adds	r7, #16
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}
 8008b0e:	bf00      	nop
 8008b10:	20000ed0 	.word	0x20000ed0

08008b14 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b086      	sub	sp, #24
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	60f8      	str	r0, [r7, #12]
 8008b1c:	60b9      	str	r1, [r7, #8]
 8008b1e:	607a      	str	r2, [r7, #4]
 8008b20:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008b22:	2300      	movs	r3, #0
 8008b24:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	68ba      	ldr	r2, [r7, #8]
 8008b2a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	68fa      	ldr	r2, [r7, #12]
 8008b30:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008b32:	68ba      	ldr	r2, [r7, #8]
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	429a      	cmp	r2, r3
 8008b38:	d812      	bhi.n	8008b60 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b3a:	687a      	ldr	r2, [r7, #4]
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	1ad2      	subs	r2, r2, r3
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	699b      	ldr	r3, [r3, #24]
 8008b44:	429a      	cmp	r2, r3
 8008b46:	d302      	bcc.n	8008b4e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008b48:	2301      	movs	r3, #1
 8008b4a:	617b      	str	r3, [r7, #20]
 8008b4c:	e01b      	b.n	8008b86 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008b4e:	4b10      	ldr	r3, [pc, #64]	; (8008b90 <prvInsertTimerInActiveList+0x7c>)
 8008b50:	681a      	ldr	r2, [r3, #0]
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	3304      	adds	r3, #4
 8008b56:	4619      	mov	r1, r3
 8008b58:	4610      	mov	r0, r2
 8008b5a:	f7fe f9de 	bl	8006f1a <vListInsert>
 8008b5e:	e012      	b.n	8008b86 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008b60:	687a      	ldr	r2, [r7, #4]
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	429a      	cmp	r2, r3
 8008b66:	d206      	bcs.n	8008b76 <prvInsertTimerInActiveList+0x62>
 8008b68:	68ba      	ldr	r2, [r7, #8]
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	429a      	cmp	r2, r3
 8008b6e:	d302      	bcc.n	8008b76 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008b70:	2301      	movs	r3, #1
 8008b72:	617b      	str	r3, [r7, #20]
 8008b74:	e007      	b.n	8008b86 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008b76:	4b07      	ldr	r3, [pc, #28]	; (8008b94 <prvInsertTimerInActiveList+0x80>)
 8008b78:	681a      	ldr	r2, [r3, #0]
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	3304      	adds	r3, #4
 8008b7e:	4619      	mov	r1, r3
 8008b80:	4610      	mov	r0, r2
 8008b82:	f7fe f9ca 	bl	8006f1a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008b86:	697b      	ldr	r3, [r7, #20]
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3718      	adds	r7, #24
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}
 8008b90:	20000ec4 	.word	0x20000ec4
 8008b94:	20000ec0 	.word	0x20000ec0

08008b98 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b08e      	sub	sp, #56	; 0x38
 8008b9c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008b9e:	e0ca      	b.n	8008d36 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	da18      	bge.n	8008bd8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008ba6:	1d3b      	adds	r3, r7, #4
 8008ba8:	3304      	adds	r3, #4
 8008baa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d10a      	bne.n	8008bc8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bb6:	f383 8811 	msr	BASEPRI, r3
 8008bba:	f3bf 8f6f 	isb	sy
 8008bbe:	f3bf 8f4f 	dsb	sy
 8008bc2:	61fb      	str	r3, [r7, #28]
}
 8008bc4:	bf00      	nop
 8008bc6:	e7fe      	b.n	8008bc6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bce:	6850      	ldr	r0, [r2, #4]
 8008bd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bd2:	6892      	ldr	r2, [r2, #8]
 8008bd4:	4611      	mov	r1, r2
 8008bd6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	f2c0 80aa 	blt.w	8008d34 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008be6:	695b      	ldr	r3, [r3, #20]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d004      	beq.n	8008bf6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bee:	3304      	adds	r3, #4
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f7fe f9cb 	bl	8006f8c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008bf6:	463b      	mov	r3, r7
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	f7ff ff6b 	bl	8008ad4 <prvSampleTimeNow>
 8008bfe:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2b09      	cmp	r3, #9
 8008c04:	f200 8097 	bhi.w	8008d36 <prvProcessReceivedCommands+0x19e>
 8008c08:	a201      	add	r2, pc, #4	; (adr r2, 8008c10 <prvProcessReceivedCommands+0x78>)
 8008c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c0e:	bf00      	nop
 8008c10:	08008c39 	.word	0x08008c39
 8008c14:	08008c39 	.word	0x08008c39
 8008c18:	08008c39 	.word	0x08008c39
 8008c1c:	08008cad 	.word	0x08008cad
 8008c20:	08008cc1 	.word	0x08008cc1
 8008c24:	08008d0b 	.word	0x08008d0b
 8008c28:	08008c39 	.word	0x08008c39
 8008c2c:	08008c39 	.word	0x08008c39
 8008c30:	08008cad 	.word	0x08008cad
 8008c34:	08008cc1 	.word	0x08008cc1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c3e:	f043 0301 	orr.w	r3, r3, #1
 8008c42:	b2da      	uxtb	r2, r3
 8008c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008c4a:	68ba      	ldr	r2, [r7, #8]
 8008c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c4e:	699b      	ldr	r3, [r3, #24]
 8008c50:	18d1      	adds	r1, r2, r3
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c58:	f7ff ff5c 	bl	8008b14 <prvInsertTimerInActiveList>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d069      	beq.n	8008d36 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c64:	6a1b      	ldr	r3, [r3, #32]
 8008c66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c68:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c70:	f003 0304 	and.w	r3, r3, #4
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d05e      	beq.n	8008d36 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008c78:	68ba      	ldr	r2, [r7, #8]
 8008c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c7c:	699b      	ldr	r3, [r3, #24]
 8008c7e:	441a      	add	r2, r3
 8008c80:	2300      	movs	r3, #0
 8008c82:	9300      	str	r3, [sp, #0]
 8008c84:	2300      	movs	r3, #0
 8008c86:	2100      	movs	r1, #0
 8008c88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c8a:	f7ff fe05 	bl	8008898 <xTimerGenericCommand>
 8008c8e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008c90:	6a3b      	ldr	r3, [r7, #32]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d14f      	bne.n	8008d36 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c9a:	f383 8811 	msr	BASEPRI, r3
 8008c9e:	f3bf 8f6f 	isb	sy
 8008ca2:	f3bf 8f4f 	dsb	sy
 8008ca6:	61bb      	str	r3, [r7, #24]
}
 8008ca8:	bf00      	nop
 8008caa:	e7fe      	b.n	8008caa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008cb2:	f023 0301 	bic.w	r3, r3, #1
 8008cb6:	b2da      	uxtb	r2, r3
 8008cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008cbe:	e03a      	b.n	8008d36 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cc2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008cc6:	f043 0301 	orr.w	r3, r3, #1
 8008cca:	b2da      	uxtb	r2, r3
 8008ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008cd2:	68ba      	ldr	r2, [r7, #8]
 8008cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cd6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cda:	699b      	ldr	r3, [r3, #24]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d10a      	bne.n	8008cf6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce4:	f383 8811 	msr	BASEPRI, r3
 8008ce8:	f3bf 8f6f 	isb	sy
 8008cec:	f3bf 8f4f 	dsb	sy
 8008cf0:	617b      	str	r3, [r7, #20]
}
 8008cf2:	bf00      	nop
 8008cf4:	e7fe      	b.n	8008cf4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cf8:	699a      	ldr	r2, [r3, #24]
 8008cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cfc:	18d1      	adds	r1, r2, r3
 8008cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d04:	f7ff ff06 	bl	8008b14 <prvInsertTimerInActiveList>
					break;
 8008d08:	e015      	b.n	8008d36 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d10:	f003 0302 	and.w	r3, r3, #2
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d103      	bne.n	8008d20 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008d18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d1a:	f000 fbe1 	bl	80094e0 <vPortFree>
 8008d1e:	e00a      	b.n	8008d36 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d26:	f023 0301 	bic.w	r3, r3, #1
 8008d2a:	b2da      	uxtb	r2, r3
 8008d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008d32:	e000      	b.n	8008d36 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008d34:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008d36:	4b08      	ldr	r3, [pc, #32]	; (8008d58 <prvProcessReceivedCommands+0x1c0>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	1d39      	adds	r1, r7, #4
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f7fe fbec 	bl	800751c <xQueueReceive>
 8008d44:	4603      	mov	r3, r0
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	f47f af2a 	bne.w	8008ba0 <prvProcessReceivedCommands+0x8>
	}
}
 8008d4c:	bf00      	nop
 8008d4e:	bf00      	nop
 8008d50:	3730      	adds	r7, #48	; 0x30
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}
 8008d56:	bf00      	nop
 8008d58:	20000ec8 	.word	0x20000ec8

08008d5c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b088      	sub	sp, #32
 8008d60:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008d62:	e048      	b.n	8008df6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008d64:	4b2d      	ldr	r3, [pc, #180]	; (8008e1c <prvSwitchTimerLists+0xc0>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	68db      	ldr	r3, [r3, #12]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d6e:	4b2b      	ldr	r3, [pc, #172]	; (8008e1c <prvSwitchTimerLists+0xc0>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	68db      	ldr	r3, [r3, #12]
 8008d74:	68db      	ldr	r3, [r3, #12]
 8008d76:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	3304      	adds	r3, #4
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f7fe f905 	bl	8006f8c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	6a1b      	ldr	r3, [r3, #32]
 8008d86:	68f8      	ldr	r0, [r7, #12]
 8008d88:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d90:	f003 0304 	and.w	r3, r3, #4
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d02e      	beq.n	8008df6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	699b      	ldr	r3, [r3, #24]
 8008d9c:	693a      	ldr	r2, [r7, #16]
 8008d9e:	4413      	add	r3, r2
 8008da0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008da2:	68ba      	ldr	r2, [r7, #8]
 8008da4:	693b      	ldr	r3, [r7, #16]
 8008da6:	429a      	cmp	r2, r3
 8008da8:	d90e      	bls.n	8008dc8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	68ba      	ldr	r2, [r7, #8]
 8008dae:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	68fa      	ldr	r2, [r7, #12]
 8008db4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008db6:	4b19      	ldr	r3, [pc, #100]	; (8008e1c <prvSwitchTimerLists+0xc0>)
 8008db8:	681a      	ldr	r2, [r3, #0]
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	3304      	adds	r3, #4
 8008dbe:	4619      	mov	r1, r3
 8008dc0:	4610      	mov	r0, r2
 8008dc2:	f7fe f8aa 	bl	8006f1a <vListInsert>
 8008dc6:	e016      	b.n	8008df6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008dc8:	2300      	movs	r3, #0
 8008dca:	9300      	str	r3, [sp, #0]
 8008dcc:	2300      	movs	r3, #0
 8008dce:	693a      	ldr	r2, [r7, #16]
 8008dd0:	2100      	movs	r1, #0
 8008dd2:	68f8      	ldr	r0, [r7, #12]
 8008dd4:	f7ff fd60 	bl	8008898 <xTimerGenericCommand>
 8008dd8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d10a      	bne.n	8008df6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008de4:	f383 8811 	msr	BASEPRI, r3
 8008de8:	f3bf 8f6f 	isb	sy
 8008dec:	f3bf 8f4f 	dsb	sy
 8008df0:	603b      	str	r3, [r7, #0]
}
 8008df2:	bf00      	nop
 8008df4:	e7fe      	b.n	8008df4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008df6:	4b09      	ldr	r3, [pc, #36]	; (8008e1c <prvSwitchTimerLists+0xc0>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d1b1      	bne.n	8008d64 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008e00:	4b06      	ldr	r3, [pc, #24]	; (8008e1c <prvSwitchTimerLists+0xc0>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008e06:	4b06      	ldr	r3, [pc, #24]	; (8008e20 <prvSwitchTimerLists+0xc4>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4a04      	ldr	r2, [pc, #16]	; (8008e1c <prvSwitchTimerLists+0xc0>)
 8008e0c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008e0e:	4a04      	ldr	r2, [pc, #16]	; (8008e20 <prvSwitchTimerLists+0xc4>)
 8008e10:	697b      	ldr	r3, [r7, #20]
 8008e12:	6013      	str	r3, [r2, #0]
}
 8008e14:	bf00      	nop
 8008e16:	3718      	adds	r7, #24
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}
 8008e1c:	20000ec0 	.word	0x20000ec0
 8008e20:	20000ec4 	.word	0x20000ec4

08008e24 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b082      	sub	sp, #8
 8008e28:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008e2a:	f000 f96b 	bl	8009104 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008e2e:	4b15      	ldr	r3, [pc, #84]	; (8008e84 <prvCheckForValidListAndQueue+0x60>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d120      	bne.n	8008e78 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008e36:	4814      	ldr	r0, [pc, #80]	; (8008e88 <prvCheckForValidListAndQueue+0x64>)
 8008e38:	f7fe f81e 	bl	8006e78 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008e3c:	4813      	ldr	r0, [pc, #76]	; (8008e8c <prvCheckForValidListAndQueue+0x68>)
 8008e3e:	f7fe f81b 	bl	8006e78 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008e42:	4b13      	ldr	r3, [pc, #76]	; (8008e90 <prvCheckForValidListAndQueue+0x6c>)
 8008e44:	4a10      	ldr	r2, [pc, #64]	; (8008e88 <prvCheckForValidListAndQueue+0x64>)
 8008e46:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008e48:	4b12      	ldr	r3, [pc, #72]	; (8008e94 <prvCheckForValidListAndQueue+0x70>)
 8008e4a:	4a10      	ldr	r2, [pc, #64]	; (8008e8c <prvCheckForValidListAndQueue+0x68>)
 8008e4c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008e4e:	2300      	movs	r3, #0
 8008e50:	9300      	str	r3, [sp, #0]
 8008e52:	4b11      	ldr	r3, [pc, #68]	; (8008e98 <prvCheckForValidListAndQueue+0x74>)
 8008e54:	4a11      	ldr	r2, [pc, #68]	; (8008e9c <prvCheckForValidListAndQueue+0x78>)
 8008e56:	2110      	movs	r1, #16
 8008e58:	200a      	movs	r0, #10
 8008e5a:	f7fe f929 	bl	80070b0 <xQueueGenericCreateStatic>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	4a08      	ldr	r2, [pc, #32]	; (8008e84 <prvCheckForValidListAndQueue+0x60>)
 8008e62:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008e64:	4b07      	ldr	r3, [pc, #28]	; (8008e84 <prvCheckForValidListAndQueue+0x60>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d005      	beq.n	8008e78 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008e6c:	4b05      	ldr	r3, [pc, #20]	; (8008e84 <prvCheckForValidListAndQueue+0x60>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	490b      	ldr	r1, [pc, #44]	; (8008ea0 <prvCheckForValidListAndQueue+0x7c>)
 8008e72:	4618      	mov	r0, r3
 8008e74:	f7fe fd42 	bl	80078fc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008e78:	f000 f974 	bl	8009164 <vPortExitCritical>
}
 8008e7c:	bf00      	nop
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}
 8008e82:	bf00      	nop
 8008e84:	20000ec8 	.word	0x20000ec8
 8008e88:	20000e98 	.word	0x20000e98
 8008e8c:	20000eac 	.word	0x20000eac
 8008e90:	20000ec0 	.word	0x20000ec0
 8008e94:	20000ec4 	.word	0x20000ec4
 8008e98:	20000f74 	.word	0x20000f74
 8008e9c:	20000ed4 	.word	0x20000ed4
 8008ea0:	0800a3c0 	.word	0x0800a3c0

08008ea4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b085      	sub	sp, #20
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	60f8      	str	r0, [r7, #12]
 8008eac:	60b9      	str	r1, [r7, #8]
 8008eae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	3b04      	subs	r3, #4
 8008eb4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008ebc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	3b04      	subs	r3, #4
 8008ec2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	f023 0201 	bic.w	r2, r3, #1
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	3b04      	subs	r3, #4
 8008ed2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008ed4:	4a0c      	ldr	r2, [pc, #48]	; (8008f08 <pxPortInitialiseStack+0x64>)
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	3b14      	subs	r3, #20
 8008ede:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008ee0:	687a      	ldr	r2, [r7, #4]
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	3b04      	subs	r3, #4
 8008eea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	f06f 0202 	mvn.w	r2, #2
 8008ef2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	3b20      	subs	r3, #32
 8008ef8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008efa:	68fb      	ldr	r3, [r7, #12]
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3714      	adds	r7, #20
 8008f00:	46bd      	mov	sp, r7
 8008f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f06:	4770      	bx	lr
 8008f08:	08008f0d 	.word	0x08008f0d

08008f0c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b085      	sub	sp, #20
 8008f10:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008f12:	2300      	movs	r3, #0
 8008f14:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008f16:	4b12      	ldr	r3, [pc, #72]	; (8008f60 <prvTaskExitError+0x54>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f1e:	d00a      	beq.n	8008f36 <prvTaskExitError+0x2a>
	__asm volatile
 8008f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f24:	f383 8811 	msr	BASEPRI, r3
 8008f28:	f3bf 8f6f 	isb	sy
 8008f2c:	f3bf 8f4f 	dsb	sy
 8008f30:	60fb      	str	r3, [r7, #12]
}
 8008f32:	bf00      	nop
 8008f34:	e7fe      	b.n	8008f34 <prvTaskExitError+0x28>
	__asm volatile
 8008f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f3a:	f383 8811 	msr	BASEPRI, r3
 8008f3e:	f3bf 8f6f 	isb	sy
 8008f42:	f3bf 8f4f 	dsb	sy
 8008f46:	60bb      	str	r3, [r7, #8]
}
 8008f48:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008f4a:	bf00      	nop
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d0fc      	beq.n	8008f4c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008f52:	bf00      	nop
 8008f54:	bf00      	nop
 8008f56:	3714      	adds	r7, #20
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5e:	4770      	bx	lr
 8008f60:	20000098 	.word	0x20000098
	...

08008f70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008f70:	4b07      	ldr	r3, [pc, #28]	; (8008f90 <pxCurrentTCBConst2>)
 8008f72:	6819      	ldr	r1, [r3, #0]
 8008f74:	6808      	ldr	r0, [r1, #0]
 8008f76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f7a:	f380 8809 	msr	PSP, r0
 8008f7e:	f3bf 8f6f 	isb	sy
 8008f82:	f04f 0000 	mov.w	r0, #0
 8008f86:	f380 8811 	msr	BASEPRI, r0
 8008f8a:	4770      	bx	lr
 8008f8c:	f3af 8000 	nop.w

08008f90 <pxCurrentTCBConst2>:
 8008f90:	20000998 	.word	0x20000998
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008f94:	bf00      	nop
 8008f96:	bf00      	nop

08008f98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008f98:	4808      	ldr	r0, [pc, #32]	; (8008fbc <prvPortStartFirstTask+0x24>)
 8008f9a:	6800      	ldr	r0, [r0, #0]
 8008f9c:	6800      	ldr	r0, [r0, #0]
 8008f9e:	f380 8808 	msr	MSP, r0
 8008fa2:	f04f 0000 	mov.w	r0, #0
 8008fa6:	f380 8814 	msr	CONTROL, r0
 8008faa:	b662      	cpsie	i
 8008fac:	b661      	cpsie	f
 8008fae:	f3bf 8f4f 	dsb	sy
 8008fb2:	f3bf 8f6f 	isb	sy
 8008fb6:	df00      	svc	0
 8008fb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008fba:	bf00      	nop
 8008fbc:	e000ed08 	.word	0xe000ed08

08008fc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b086      	sub	sp, #24
 8008fc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008fc6:	4b46      	ldr	r3, [pc, #280]	; (80090e0 <xPortStartScheduler+0x120>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	4a46      	ldr	r2, [pc, #280]	; (80090e4 <xPortStartScheduler+0x124>)
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d10a      	bne.n	8008fe6 <xPortStartScheduler+0x26>
	__asm volatile
 8008fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd4:	f383 8811 	msr	BASEPRI, r3
 8008fd8:	f3bf 8f6f 	isb	sy
 8008fdc:	f3bf 8f4f 	dsb	sy
 8008fe0:	613b      	str	r3, [r7, #16]
}
 8008fe2:	bf00      	nop
 8008fe4:	e7fe      	b.n	8008fe4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008fe6:	4b3e      	ldr	r3, [pc, #248]	; (80090e0 <xPortStartScheduler+0x120>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	4a3f      	ldr	r2, [pc, #252]	; (80090e8 <xPortStartScheduler+0x128>)
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d10a      	bne.n	8009006 <xPortStartScheduler+0x46>
	__asm volatile
 8008ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff4:	f383 8811 	msr	BASEPRI, r3
 8008ff8:	f3bf 8f6f 	isb	sy
 8008ffc:	f3bf 8f4f 	dsb	sy
 8009000:	60fb      	str	r3, [r7, #12]
}
 8009002:	bf00      	nop
 8009004:	e7fe      	b.n	8009004 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009006:	4b39      	ldr	r3, [pc, #228]	; (80090ec <xPortStartScheduler+0x12c>)
 8009008:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	781b      	ldrb	r3, [r3, #0]
 800900e:	b2db      	uxtb	r3, r3
 8009010:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009012:	697b      	ldr	r3, [r7, #20]
 8009014:	22ff      	movs	r2, #255	; 0xff
 8009016:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	781b      	ldrb	r3, [r3, #0]
 800901c:	b2db      	uxtb	r3, r3
 800901e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009020:	78fb      	ldrb	r3, [r7, #3]
 8009022:	b2db      	uxtb	r3, r3
 8009024:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009028:	b2da      	uxtb	r2, r3
 800902a:	4b31      	ldr	r3, [pc, #196]	; (80090f0 <xPortStartScheduler+0x130>)
 800902c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800902e:	4b31      	ldr	r3, [pc, #196]	; (80090f4 <xPortStartScheduler+0x134>)
 8009030:	2207      	movs	r2, #7
 8009032:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009034:	e009      	b.n	800904a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009036:	4b2f      	ldr	r3, [pc, #188]	; (80090f4 <xPortStartScheduler+0x134>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	3b01      	subs	r3, #1
 800903c:	4a2d      	ldr	r2, [pc, #180]	; (80090f4 <xPortStartScheduler+0x134>)
 800903e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009040:	78fb      	ldrb	r3, [r7, #3]
 8009042:	b2db      	uxtb	r3, r3
 8009044:	005b      	lsls	r3, r3, #1
 8009046:	b2db      	uxtb	r3, r3
 8009048:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800904a:	78fb      	ldrb	r3, [r7, #3]
 800904c:	b2db      	uxtb	r3, r3
 800904e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009052:	2b80      	cmp	r3, #128	; 0x80
 8009054:	d0ef      	beq.n	8009036 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009056:	4b27      	ldr	r3, [pc, #156]	; (80090f4 <xPortStartScheduler+0x134>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f1c3 0307 	rsb	r3, r3, #7
 800905e:	2b04      	cmp	r3, #4
 8009060:	d00a      	beq.n	8009078 <xPortStartScheduler+0xb8>
	__asm volatile
 8009062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009066:	f383 8811 	msr	BASEPRI, r3
 800906a:	f3bf 8f6f 	isb	sy
 800906e:	f3bf 8f4f 	dsb	sy
 8009072:	60bb      	str	r3, [r7, #8]
}
 8009074:	bf00      	nop
 8009076:	e7fe      	b.n	8009076 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009078:	4b1e      	ldr	r3, [pc, #120]	; (80090f4 <xPortStartScheduler+0x134>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	021b      	lsls	r3, r3, #8
 800907e:	4a1d      	ldr	r2, [pc, #116]	; (80090f4 <xPortStartScheduler+0x134>)
 8009080:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009082:	4b1c      	ldr	r3, [pc, #112]	; (80090f4 <xPortStartScheduler+0x134>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800908a:	4a1a      	ldr	r2, [pc, #104]	; (80090f4 <xPortStartScheduler+0x134>)
 800908c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	b2da      	uxtb	r2, r3
 8009092:	697b      	ldr	r3, [r7, #20]
 8009094:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009096:	4b18      	ldr	r3, [pc, #96]	; (80090f8 <xPortStartScheduler+0x138>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	4a17      	ldr	r2, [pc, #92]	; (80090f8 <xPortStartScheduler+0x138>)
 800909c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80090a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80090a2:	4b15      	ldr	r3, [pc, #84]	; (80090f8 <xPortStartScheduler+0x138>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	4a14      	ldr	r2, [pc, #80]	; (80090f8 <xPortStartScheduler+0x138>)
 80090a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80090ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80090ae:	f000 f8dd 	bl	800926c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80090b2:	4b12      	ldr	r3, [pc, #72]	; (80090fc <xPortStartScheduler+0x13c>)
 80090b4:	2200      	movs	r2, #0
 80090b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80090b8:	f000 f8fc 	bl	80092b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80090bc:	4b10      	ldr	r3, [pc, #64]	; (8009100 <xPortStartScheduler+0x140>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	4a0f      	ldr	r2, [pc, #60]	; (8009100 <xPortStartScheduler+0x140>)
 80090c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80090c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80090c8:	f7ff ff66 	bl	8008f98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80090cc:	f7ff f846 	bl	800815c <vTaskSwitchContext>
	prvTaskExitError();
 80090d0:	f7ff ff1c 	bl	8008f0c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80090d4:	2300      	movs	r3, #0
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3718      	adds	r7, #24
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}
 80090de:	bf00      	nop
 80090e0:	e000ed00 	.word	0xe000ed00
 80090e4:	410fc271 	.word	0x410fc271
 80090e8:	410fc270 	.word	0x410fc270
 80090ec:	e000e400 	.word	0xe000e400
 80090f0:	20000fc4 	.word	0x20000fc4
 80090f4:	20000fc8 	.word	0x20000fc8
 80090f8:	e000ed20 	.word	0xe000ed20
 80090fc:	20000098 	.word	0x20000098
 8009100:	e000ef34 	.word	0xe000ef34

08009104 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009104:	b480      	push	{r7}
 8009106:	b083      	sub	sp, #12
 8009108:	af00      	add	r7, sp, #0
	__asm volatile
 800910a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800910e:	f383 8811 	msr	BASEPRI, r3
 8009112:	f3bf 8f6f 	isb	sy
 8009116:	f3bf 8f4f 	dsb	sy
 800911a:	607b      	str	r3, [r7, #4]
}
 800911c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800911e:	4b0f      	ldr	r3, [pc, #60]	; (800915c <vPortEnterCritical+0x58>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	3301      	adds	r3, #1
 8009124:	4a0d      	ldr	r2, [pc, #52]	; (800915c <vPortEnterCritical+0x58>)
 8009126:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009128:	4b0c      	ldr	r3, [pc, #48]	; (800915c <vPortEnterCritical+0x58>)
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	2b01      	cmp	r3, #1
 800912e:	d10f      	bne.n	8009150 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009130:	4b0b      	ldr	r3, [pc, #44]	; (8009160 <vPortEnterCritical+0x5c>)
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	b2db      	uxtb	r3, r3
 8009136:	2b00      	cmp	r3, #0
 8009138:	d00a      	beq.n	8009150 <vPortEnterCritical+0x4c>
	__asm volatile
 800913a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800913e:	f383 8811 	msr	BASEPRI, r3
 8009142:	f3bf 8f6f 	isb	sy
 8009146:	f3bf 8f4f 	dsb	sy
 800914a:	603b      	str	r3, [r7, #0]
}
 800914c:	bf00      	nop
 800914e:	e7fe      	b.n	800914e <vPortEnterCritical+0x4a>
	}
}
 8009150:	bf00      	nop
 8009152:	370c      	adds	r7, #12
 8009154:	46bd      	mov	sp, r7
 8009156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915a:	4770      	bx	lr
 800915c:	20000098 	.word	0x20000098
 8009160:	e000ed04 	.word	0xe000ed04

08009164 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009164:	b480      	push	{r7}
 8009166:	b083      	sub	sp, #12
 8009168:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800916a:	4b12      	ldr	r3, [pc, #72]	; (80091b4 <vPortExitCritical+0x50>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d10a      	bne.n	8009188 <vPortExitCritical+0x24>
	__asm volatile
 8009172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009176:	f383 8811 	msr	BASEPRI, r3
 800917a:	f3bf 8f6f 	isb	sy
 800917e:	f3bf 8f4f 	dsb	sy
 8009182:	607b      	str	r3, [r7, #4]
}
 8009184:	bf00      	nop
 8009186:	e7fe      	b.n	8009186 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009188:	4b0a      	ldr	r3, [pc, #40]	; (80091b4 <vPortExitCritical+0x50>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	3b01      	subs	r3, #1
 800918e:	4a09      	ldr	r2, [pc, #36]	; (80091b4 <vPortExitCritical+0x50>)
 8009190:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009192:	4b08      	ldr	r3, [pc, #32]	; (80091b4 <vPortExitCritical+0x50>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d105      	bne.n	80091a6 <vPortExitCritical+0x42>
 800919a:	2300      	movs	r3, #0
 800919c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	f383 8811 	msr	BASEPRI, r3
}
 80091a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80091a6:	bf00      	nop
 80091a8:	370c      	adds	r7, #12
 80091aa:	46bd      	mov	sp, r7
 80091ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b0:	4770      	bx	lr
 80091b2:	bf00      	nop
 80091b4:	20000098 	.word	0x20000098
	...

080091c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80091c0:	f3ef 8009 	mrs	r0, PSP
 80091c4:	f3bf 8f6f 	isb	sy
 80091c8:	4b15      	ldr	r3, [pc, #84]	; (8009220 <pxCurrentTCBConst>)
 80091ca:	681a      	ldr	r2, [r3, #0]
 80091cc:	f01e 0f10 	tst.w	lr, #16
 80091d0:	bf08      	it	eq
 80091d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80091d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091da:	6010      	str	r0, [r2, #0]
 80091dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80091e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80091e4:	f380 8811 	msr	BASEPRI, r0
 80091e8:	f3bf 8f4f 	dsb	sy
 80091ec:	f3bf 8f6f 	isb	sy
 80091f0:	f7fe ffb4 	bl	800815c <vTaskSwitchContext>
 80091f4:	f04f 0000 	mov.w	r0, #0
 80091f8:	f380 8811 	msr	BASEPRI, r0
 80091fc:	bc09      	pop	{r0, r3}
 80091fe:	6819      	ldr	r1, [r3, #0]
 8009200:	6808      	ldr	r0, [r1, #0]
 8009202:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009206:	f01e 0f10 	tst.w	lr, #16
 800920a:	bf08      	it	eq
 800920c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009210:	f380 8809 	msr	PSP, r0
 8009214:	f3bf 8f6f 	isb	sy
 8009218:	4770      	bx	lr
 800921a:	bf00      	nop
 800921c:	f3af 8000 	nop.w

08009220 <pxCurrentTCBConst>:
 8009220:	20000998 	.word	0x20000998
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009224:	bf00      	nop
 8009226:	bf00      	nop

08009228 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b082      	sub	sp, #8
 800922c:	af00      	add	r7, sp, #0
	__asm volatile
 800922e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009232:	f383 8811 	msr	BASEPRI, r3
 8009236:	f3bf 8f6f 	isb	sy
 800923a:	f3bf 8f4f 	dsb	sy
 800923e:	607b      	str	r3, [r7, #4]
}
 8009240:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009242:	f7fe fed1 	bl	8007fe8 <xTaskIncrementTick>
 8009246:	4603      	mov	r3, r0
 8009248:	2b00      	cmp	r3, #0
 800924a:	d003      	beq.n	8009254 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800924c:	4b06      	ldr	r3, [pc, #24]	; (8009268 <xPortSysTickHandler+0x40>)
 800924e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009252:	601a      	str	r2, [r3, #0]
 8009254:	2300      	movs	r3, #0
 8009256:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	f383 8811 	msr	BASEPRI, r3
}
 800925e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009260:	bf00      	nop
 8009262:	3708      	adds	r7, #8
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}
 8009268:	e000ed04 	.word	0xe000ed04

0800926c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800926c:	b480      	push	{r7}
 800926e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009270:	4b0b      	ldr	r3, [pc, #44]	; (80092a0 <vPortSetupTimerInterrupt+0x34>)
 8009272:	2200      	movs	r2, #0
 8009274:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009276:	4b0b      	ldr	r3, [pc, #44]	; (80092a4 <vPortSetupTimerInterrupt+0x38>)
 8009278:	2200      	movs	r2, #0
 800927a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800927c:	4b0a      	ldr	r3, [pc, #40]	; (80092a8 <vPortSetupTimerInterrupt+0x3c>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	4a0a      	ldr	r2, [pc, #40]	; (80092ac <vPortSetupTimerInterrupt+0x40>)
 8009282:	fba2 2303 	umull	r2, r3, r2, r3
 8009286:	099b      	lsrs	r3, r3, #6
 8009288:	4a09      	ldr	r2, [pc, #36]	; (80092b0 <vPortSetupTimerInterrupt+0x44>)
 800928a:	3b01      	subs	r3, #1
 800928c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800928e:	4b04      	ldr	r3, [pc, #16]	; (80092a0 <vPortSetupTimerInterrupt+0x34>)
 8009290:	2207      	movs	r2, #7
 8009292:	601a      	str	r2, [r3, #0]
}
 8009294:	bf00      	nop
 8009296:	46bd      	mov	sp, r7
 8009298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929c:	4770      	bx	lr
 800929e:	bf00      	nop
 80092a0:	e000e010 	.word	0xe000e010
 80092a4:	e000e018 	.word	0xe000e018
 80092a8:	20000000 	.word	0x20000000
 80092ac:	10624dd3 	.word	0x10624dd3
 80092b0:	e000e014 	.word	0xe000e014

080092b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80092b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80092c4 <vPortEnableVFP+0x10>
 80092b8:	6801      	ldr	r1, [r0, #0]
 80092ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80092be:	6001      	str	r1, [r0, #0]
 80092c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80092c2:	bf00      	nop
 80092c4:	e000ed88 	.word	0xe000ed88

080092c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80092c8:	b480      	push	{r7}
 80092ca:	b085      	sub	sp, #20
 80092cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80092ce:	f3ef 8305 	mrs	r3, IPSR
 80092d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	2b0f      	cmp	r3, #15
 80092d8:	d914      	bls.n	8009304 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80092da:	4a17      	ldr	r2, [pc, #92]	; (8009338 <vPortValidateInterruptPriority+0x70>)
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	4413      	add	r3, r2
 80092e0:	781b      	ldrb	r3, [r3, #0]
 80092e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80092e4:	4b15      	ldr	r3, [pc, #84]	; (800933c <vPortValidateInterruptPriority+0x74>)
 80092e6:	781b      	ldrb	r3, [r3, #0]
 80092e8:	7afa      	ldrb	r2, [r7, #11]
 80092ea:	429a      	cmp	r2, r3
 80092ec:	d20a      	bcs.n	8009304 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80092ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092f2:	f383 8811 	msr	BASEPRI, r3
 80092f6:	f3bf 8f6f 	isb	sy
 80092fa:	f3bf 8f4f 	dsb	sy
 80092fe:	607b      	str	r3, [r7, #4]
}
 8009300:	bf00      	nop
 8009302:	e7fe      	b.n	8009302 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009304:	4b0e      	ldr	r3, [pc, #56]	; (8009340 <vPortValidateInterruptPriority+0x78>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800930c:	4b0d      	ldr	r3, [pc, #52]	; (8009344 <vPortValidateInterruptPriority+0x7c>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	429a      	cmp	r2, r3
 8009312:	d90a      	bls.n	800932a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009318:	f383 8811 	msr	BASEPRI, r3
 800931c:	f3bf 8f6f 	isb	sy
 8009320:	f3bf 8f4f 	dsb	sy
 8009324:	603b      	str	r3, [r7, #0]
}
 8009326:	bf00      	nop
 8009328:	e7fe      	b.n	8009328 <vPortValidateInterruptPriority+0x60>
	}
 800932a:	bf00      	nop
 800932c:	3714      	adds	r7, #20
 800932e:	46bd      	mov	sp, r7
 8009330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009334:	4770      	bx	lr
 8009336:	bf00      	nop
 8009338:	e000e3f0 	.word	0xe000e3f0
 800933c:	20000fc4 	.word	0x20000fc4
 8009340:	e000ed0c 	.word	0xe000ed0c
 8009344:	20000fc8 	.word	0x20000fc8

08009348 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b08a      	sub	sp, #40	; 0x28
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009350:	2300      	movs	r3, #0
 8009352:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009354:	f7fe fd8c 	bl	8007e70 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009358:	4b5b      	ldr	r3, [pc, #364]	; (80094c8 <pvPortMalloc+0x180>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d101      	bne.n	8009364 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009360:	f000 f920 	bl	80095a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009364:	4b59      	ldr	r3, [pc, #356]	; (80094cc <pvPortMalloc+0x184>)
 8009366:	681a      	ldr	r2, [r3, #0]
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	4013      	ands	r3, r2
 800936c:	2b00      	cmp	r3, #0
 800936e:	f040 8093 	bne.w	8009498 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d01d      	beq.n	80093b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009378:	2208      	movs	r2, #8
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	4413      	add	r3, r2
 800937e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f003 0307 	and.w	r3, r3, #7
 8009386:	2b00      	cmp	r3, #0
 8009388:	d014      	beq.n	80093b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f023 0307 	bic.w	r3, r3, #7
 8009390:	3308      	adds	r3, #8
 8009392:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f003 0307 	and.w	r3, r3, #7
 800939a:	2b00      	cmp	r3, #0
 800939c:	d00a      	beq.n	80093b4 <pvPortMalloc+0x6c>
	__asm volatile
 800939e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a2:	f383 8811 	msr	BASEPRI, r3
 80093a6:	f3bf 8f6f 	isb	sy
 80093aa:	f3bf 8f4f 	dsb	sy
 80093ae:	617b      	str	r3, [r7, #20]
}
 80093b0:	bf00      	nop
 80093b2:	e7fe      	b.n	80093b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d06e      	beq.n	8009498 <pvPortMalloc+0x150>
 80093ba:	4b45      	ldr	r3, [pc, #276]	; (80094d0 <pvPortMalloc+0x188>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	687a      	ldr	r2, [r7, #4]
 80093c0:	429a      	cmp	r2, r3
 80093c2:	d869      	bhi.n	8009498 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80093c4:	4b43      	ldr	r3, [pc, #268]	; (80094d4 <pvPortMalloc+0x18c>)
 80093c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80093c8:	4b42      	ldr	r3, [pc, #264]	; (80094d4 <pvPortMalloc+0x18c>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80093ce:	e004      	b.n	80093da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80093d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80093d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80093da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093dc:	685b      	ldr	r3, [r3, #4]
 80093de:	687a      	ldr	r2, [r7, #4]
 80093e0:	429a      	cmp	r2, r3
 80093e2:	d903      	bls.n	80093ec <pvPortMalloc+0xa4>
 80093e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d1f1      	bne.n	80093d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80093ec:	4b36      	ldr	r3, [pc, #216]	; (80094c8 <pvPortMalloc+0x180>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093f2:	429a      	cmp	r2, r3
 80093f4:	d050      	beq.n	8009498 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80093f6:	6a3b      	ldr	r3, [r7, #32]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	2208      	movs	r2, #8
 80093fc:	4413      	add	r3, r2
 80093fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009402:	681a      	ldr	r2, [r3, #0]
 8009404:	6a3b      	ldr	r3, [r7, #32]
 8009406:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800940a:	685a      	ldr	r2, [r3, #4]
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	1ad2      	subs	r2, r2, r3
 8009410:	2308      	movs	r3, #8
 8009412:	005b      	lsls	r3, r3, #1
 8009414:	429a      	cmp	r2, r3
 8009416:	d91f      	bls.n	8009458 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	4413      	add	r3, r2
 800941e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009420:	69bb      	ldr	r3, [r7, #24]
 8009422:	f003 0307 	and.w	r3, r3, #7
 8009426:	2b00      	cmp	r3, #0
 8009428:	d00a      	beq.n	8009440 <pvPortMalloc+0xf8>
	__asm volatile
 800942a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800942e:	f383 8811 	msr	BASEPRI, r3
 8009432:	f3bf 8f6f 	isb	sy
 8009436:	f3bf 8f4f 	dsb	sy
 800943a:	613b      	str	r3, [r7, #16]
}
 800943c:	bf00      	nop
 800943e:	e7fe      	b.n	800943e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009442:	685a      	ldr	r2, [r3, #4]
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	1ad2      	subs	r2, r2, r3
 8009448:	69bb      	ldr	r3, [r7, #24]
 800944a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800944c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800944e:	687a      	ldr	r2, [r7, #4]
 8009450:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009452:	69b8      	ldr	r0, [r7, #24]
 8009454:	f000 f908 	bl	8009668 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009458:	4b1d      	ldr	r3, [pc, #116]	; (80094d0 <pvPortMalloc+0x188>)
 800945a:	681a      	ldr	r2, [r3, #0]
 800945c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800945e:	685b      	ldr	r3, [r3, #4]
 8009460:	1ad3      	subs	r3, r2, r3
 8009462:	4a1b      	ldr	r2, [pc, #108]	; (80094d0 <pvPortMalloc+0x188>)
 8009464:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009466:	4b1a      	ldr	r3, [pc, #104]	; (80094d0 <pvPortMalloc+0x188>)
 8009468:	681a      	ldr	r2, [r3, #0]
 800946a:	4b1b      	ldr	r3, [pc, #108]	; (80094d8 <pvPortMalloc+0x190>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	429a      	cmp	r2, r3
 8009470:	d203      	bcs.n	800947a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009472:	4b17      	ldr	r3, [pc, #92]	; (80094d0 <pvPortMalloc+0x188>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	4a18      	ldr	r2, [pc, #96]	; (80094d8 <pvPortMalloc+0x190>)
 8009478:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800947a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800947c:	685a      	ldr	r2, [r3, #4]
 800947e:	4b13      	ldr	r3, [pc, #76]	; (80094cc <pvPortMalloc+0x184>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	431a      	orrs	r2, r3
 8009484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009486:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800948a:	2200      	movs	r2, #0
 800948c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800948e:	4b13      	ldr	r3, [pc, #76]	; (80094dc <pvPortMalloc+0x194>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	3301      	adds	r3, #1
 8009494:	4a11      	ldr	r2, [pc, #68]	; (80094dc <pvPortMalloc+0x194>)
 8009496:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009498:	f7fe fcf8 	bl	8007e8c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800949c:	69fb      	ldr	r3, [r7, #28]
 800949e:	f003 0307 	and.w	r3, r3, #7
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d00a      	beq.n	80094bc <pvPortMalloc+0x174>
	__asm volatile
 80094a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094aa:	f383 8811 	msr	BASEPRI, r3
 80094ae:	f3bf 8f6f 	isb	sy
 80094b2:	f3bf 8f4f 	dsb	sy
 80094b6:	60fb      	str	r3, [r7, #12]
}
 80094b8:	bf00      	nop
 80094ba:	e7fe      	b.n	80094ba <pvPortMalloc+0x172>
	return pvReturn;
 80094bc:	69fb      	ldr	r3, [r7, #28]
}
 80094be:	4618      	mov	r0, r3
 80094c0:	3728      	adds	r7, #40	; 0x28
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}
 80094c6:	bf00      	nop
 80094c8:	20004bd4 	.word	0x20004bd4
 80094cc:	20004be8 	.word	0x20004be8
 80094d0:	20004bd8 	.word	0x20004bd8
 80094d4:	20004bcc 	.word	0x20004bcc
 80094d8:	20004bdc 	.word	0x20004bdc
 80094dc:	20004be0 	.word	0x20004be0

080094e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b086      	sub	sp, #24
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d04d      	beq.n	800958e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80094f2:	2308      	movs	r3, #8
 80094f4:	425b      	negs	r3, r3
 80094f6:	697a      	ldr	r2, [r7, #20]
 80094f8:	4413      	add	r3, r2
 80094fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80094fc:	697b      	ldr	r3, [r7, #20]
 80094fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009500:	693b      	ldr	r3, [r7, #16]
 8009502:	685a      	ldr	r2, [r3, #4]
 8009504:	4b24      	ldr	r3, [pc, #144]	; (8009598 <vPortFree+0xb8>)
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	4013      	ands	r3, r2
 800950a:	2b00      	cmp	r3, #0
 800950c:	d10a      	bne.n	8009524 <vPortFree+0x44>
	__asm volatile
 800950e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009512:	f383 8811 	msr	BASEPRI, r3
 8009516:	f3bf 8f6f 	isb	sy
 800951a:	f3bf 8f4f 	dsb	sy
 800951e:	60fb      	str	r3, [r7, #12]
}
 8009520:	bf00      	nop
 8009522:	e7fe      	b.n	8009522 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009524:	693b      	ldr	r3, [r7, #16]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d00a      	beq.n	8009542 <vPortFree+0x62>
	__asm volatile
 800952c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009530:	f383 8811 	msr	BASEPRI, r3
 8009534:	f3bf 8f6f 	isb	sy
 8009538:	f3bf 8f4f 	dsb	sy
 800953c:	60bb      	str	r3, [r7, #8]
}
 800953e:	bf00      	nop
 8009540:	e7fe      	b.n	8009540 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009542:	693b      	ldr	r3, [r7, #16]
 8009544:	685a      	ldr	r2, [r3, #4]
 8009546:	4b14      	ldr	r3, [pc, #80]	; (8009598 <vPortFree+0xb8>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	4013      	ands	r3, r2
 800954c:	2b00      	cmp	r3, #0
 800954e:	d01e      	beq.n	800958e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009550:	693b      	ldr	r3, [r7, #16]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d11a      	bne.n	800958e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009558:	693b      	ldr	r3, [r7, #16]
 800955a:	685a      	ldr	r2, [r3, #4]
 800955c:	4b0e      	ldr	r3, [pc, #56]	; (8009598 <vPortFree+0xb8>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	43db      	mvns	r3, r3
 8009562:	401a      	ands	r2, r3
 8009564:	693b      	ldr	r3, [r7, #16]
 8009566:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009568:	f7fe fc82 	bl	8007e70 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800956c:	693b      	ldr	r3, [r7, #16]
 800956e:	685a      	ldr	r2, [r3, #4]
 8009570:	4b0a      	ldr	r3, [pc, #40]	; (800959c <vPortFree+0xbc>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	4413      	add	r3, r2
 8009576:	4a09      	ldr	r2, [pc, #36]	; (800959c <vPortFree+0xbc>)
 8009578:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800957a:	6938      	ldr	r0, [r7, #16]
 800957c:	f000 f874 	bl	8009668 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009580:	4b07      	ldr	r3, [pc, #28]	; (80095a0 <vPortFree+0xc0>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	3301      	adds	r3, #1
 8009586:	4a06      	ldr	r2, [pc, #24]	; (80095a0 <vPortFree+0xc0>)
 8009588:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800958a:	f7fe fc7f 	bl	8007e8c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800958e:	bf00      	nop
 8009590:	3718      	adds	r7, #24
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}
 8009596:	bf00      	nop
 8009598:	20004be8 	.word	0x20004be8
 800959c:	20004bd8 	.word	0x20004bd8
 80095a0:	20004be4 	.word	0x20004be4

080095a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80095a4:	b480      	push	{r7}
 80095a6:	b085      	sub	sp, #20
 80095a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80095aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80095ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80095b0:	4b27      	ldr	r3, [pc, #156]	; (8009650 <prvHeapInit+0xac>)
 80095b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	f003 0307 	and.w	r3, r3, #7
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d00c      	beq.n	80095d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	3307      	adds	r3, #7
 80095c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	f023 0307 	bic.w	r3, r3, #7
 80095ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80095cc:	68ba      	ldr	r2, [r7, #8]
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	1ad3      	subs	r3, r2, r3
 80095d2:	4a1f      	ldr	r2, [pc, #124]	; (8009650 <prvHeapInit+0xac>)
 80095d4:	4413      	add	r3, r2
 80095d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80095dc:	4a1d      	ldr	r2, [pc, #116]	; (8009654 <prvHeapInit+0xb0>)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80095e2:	4b1c      	ldr	r3, [pc, #112]	; (8009654 <prvHeapInit+0xb0>)
 80095e4:	2200      	movs	r2, #0
 80095e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	68ba      	ldr	r2, [r7, #8]
 80095ec:	4413      	add	r3, r2
 80095ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80095f0:	2208      	movs	r2, #8
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	1a9b      	subs	r3, r3, r2
 80095f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	f023 0307 	bic.w	r3, r3, #7
 80095fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	4a15      	ldr	r2, [pc, #84]	; (8009658 <prvHeapInit+0xb4>)
 8009604:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009606:	4b14      	ldr	r3, [pc, #80]	; (8009658 <prvHeapInit+0xb4>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	2200      	movs	r2, #0
 800960c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800960e:	4b12      	ldr	r3, [pc, #72]	; (8009658 <prvHeapInit+0xb4>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	2200      	movs	r2, #0
 8009614:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	68fa      	ldr	r2, [r7, #12]
 800961e:	1ad2      	subs	r2, r2, r3
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009624:	4b0c      	ldr	r3, [pc, #48]	; (8009658 <prvHeapInit+0xb4>)
 8009626:	681a      	ldr	r2, [r3, #0]
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	685b      	ldr	r3, [r3, #4]
 8009630:	4a0a      	ldr	r2, [pc, #40]	; (800965c <prvHeapInit+0xb8>)
 8009632:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	685b      	ldr	r3, [r3, #4]
 8009638:	4a09      	ldr	r2, [pc, #36]	; (8009660 <prvHeapInit+0xbc>)
 800963a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800963c:	4b09      	ldr	r3, [pc, #36]	; (8009664 <prvHeapInit+0xc0>)
 800963e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009642:	601a      	str	r2, [r3, #0]
}
 8009644:	bf00      	nop
 8009646:	3714      	adds	r7, #20
 8009648:	46bd      	mov	sp, r7
 800964a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964e:	4770      	bx	lr
 8009650:	20000fcc 	.word	0x20000fcc
 8009654:	20004bcc 	.word	0x20004bcc
 8009658:	20004bd4 	.word	0x20004bd4
 800965c:	20004bdc 	.word	0x20004bdc
 8009660:	20004bd8 	.word	0x20004bd8
 8009664:	20004be8 	.word	0x20004be8

08009668 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009668:	b480      	push	{r7}
 800966a:	b085      	sub	sp, #20
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009670:	4b28      	ldr	r3, [pc, #160]	; (8009714 <prvInsertBlockIntoFreeList+0xac>)
 8009672:	60fb      	str	r3, [r7, #12]
 8009674:	e002      	b.n	800967c <prvInsertBlockIntoFreeList+0x14>
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	60fb      	str	r3, [r7, #12]
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	687a      	ldr	r2, [r7, #4]
 8009682:	429a      	cmp	r2, r3
 8009684:	d8f7      	bhi.n	8009676 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	685b      	ldr	r3, [r3, #4]
 800968e:	68ba      	ldr	r2, [r7, #8]
 8009690:	4413      	add	r3, r2
 8009692:	687a      	ldr	r2, [r7, #4]
 8009694:	429a      	cmp	r2, r3
 8009696:	d108      	bne.n	80096aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	685a      	ldr	r2, [r3, #4]
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	685b      	ldr	r3, [r3, #4]
 80096a0:	441a      	add	r2, r3
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	685b      	ldr	r3, [r3, #4]
 80096b2:	68ba      	ldr	r2, [r7, #8]
 80096b4:	441a      	add	r2, r3
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	429a      	cmp	r2, r3
 80096bc:	d118      	bne.n	80096f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681a      	ldr	r2, [r3, #0]
 80096c2:	4b15      	ldr	r3, [pc, #84]	; (8009718 <prvInsertBlockIntoFreeList+0xb0>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	429a      	cmp	r2, r3
 80096c8:	d00d      	beq.n	80096e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	685a      	ldr	r2, [r3, #4]
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	685b      	ldr	r3, [r3, #4]
 80096d4:	441a      	add	r2, r3
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	681a      	ldr	r2, [r3, #0]
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	601a      	str	r2, [r3, #0]
 80096e4:	e008      	b.n	80096f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80096e6:	4b0c      	ldr	r3, [pc, #48]	; (8009718 <prvInsertBlockIntoFreeList+0xb0>)
 80096e8:	681a      	ldr	r2, [r3, #0]
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	601a      	str	r2, [r3, #0]
 80096ee:	e003      	b.n	80096f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	681a      	ldr	r2, [r3, #0]
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80096f8:	68fa      	ldr	r2, [r7, #12]
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	429a      	cmp	r2, r3
 80096fe:	d002      	beq.n	8009706 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	687a      	ldr	r2, [r7, #4]
 8009704:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009706:	bf00      	nop
 8009708:	3714      	adds	r7, #20
 800970a:	46bd      	mov	sp, r7
 800970c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009710:	4770      	bx	lr
 8009712:	bf00      	nop
 8009714:	20004bcc 	.word	0x20004bcc
 8009718:	20004bd4 	.word	0x20004bd4

0800971c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009720:	2200      	movs	r2, #0
 8009722:	4912      	ldr	r1, [pc, #72]	; (800976c <MX_USB_DEVICE_Init+0x50>)
 8009724:	4812      	ldr	r0, [pc, #72]	; (8009770 <MX_USB_DEVICE_Init+0x54>)
 8009726:	f7fb ff45 	bl	80055b4 <USBD_Init>
 800972a:	4603      	mov	r3, r0
 800972c:	2b00      	cmp	r3, #0
 800972e:	d001      	beq.n	8009734 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009730:	f7f7 f810 	bl	8000754 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009734:	490f      	ldr	r1, [pc, #60]	; (8009774 <MX_USB_DEVICE_Init+0x58>)
 8009736:	480e      	ldr	r0, [pc, #56]	; (8009770 <MX_USB_DEVICE_Init+0x54>)
 8009738:	f7fb ff6c 	bl	8005614 <USBD_RegisterClass>
 800973c:	4603      	mov	r3, r0
 800973e:	2b00      	cmp	r3, #0
 8009740:	d001      	beq.n	8009746 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009742:	f7f7 f807 	bl	8000754 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009746:	490c      	ldr	r1, [pc, #48]	; (8009778 <MX_USB_DEVICE_Init+0x5c>)
 8009748:	4809      	ldr	r0, [pc, #36]	; (8009770 <MX_USB_DEVICE_Init+0x54>)
 800974a:	f7fb fe5d 	bl	8005408 <USBD_CDC_RegisterInterface>
 800974e:	4603      	mov	r3, r0
 8009750:	2b00      	cmp	r3, #0
 8009752:	d001      	beq.n	8009758 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009754:	f7f6 fffe 	bl	8000754 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009758:	4805      	ldr	r0, [pc, #20]	; (8009770 <MX_USB_DEVICE_Init+0x54>)
 800975a:	f7fb ff91 	bl	8005680 <USBD_Start>
 800975e:	4603      	mov	r3, r0
 8009760:	2b00      	cmp	r3, #0
 8009762:	d001      	beq.n	8009768 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009764:	f7f6 fff6 	bl	8000754 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009768:	bf00      	nop
 800976a:	bd80      	pop	{r7, pc}
 800976c:	200000b0 	.word	0x200000b0
 8009770:	20004bec 	.word	0x20004bec
 8009774:	20000018 	.word	0x20000018
 8009778:	2000009c 	.word	0x2000009c

0800977c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009780:	2200      	movs	r2, #0
 8009782:	4905      	ldr	r1, [pc, #20]	; (8009798 <CDC_Init_FS+0x1c>)
 8009784:	4805      	ldr	r0, [pc, #20]	; (800979c <CDC_Init_FS+0x20>)
 8009786:	f7fb fe59 	bl	800543c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800978a:	4905      	ldr	r1, [pc, #20]	; (80097a0 <CDC_Init_FS+0x24>)
 800978c:	4803      	ldr	r0, [pc, #12]	; (800979c <CDC_Init_FS+0x20>)
 800978e:	f7fb fe77 	bl	8005480 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009792:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009794:	4618      	mov	r0, r3
 8009796:	bd80      	pop	{r7, pc}
 8009798:	200056c8 	.word	0x200056c8
 800979c:	20004bec 	.word	0x20004bec
 80097a0:	20004ec8 	.word	0x20004ec8

080097a4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80097a4:	b480      	push	{r7}
 80097a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80097a8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	46bd      	mov	sp, r7
 80097ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b2:	4770      	bx	lr

080097b4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80097b4:	b480      	push	{r7}
 80097b6:	b083      	sub	sp, #12
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	4603      	mov	r3, r0
 80097bc:	6039      	str	r1, [r7, #0]
 80097be:	71fb      	strb	r3, [r7, #7]
 80097c0:	4613      	mov	r3, r2
 80097c2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80097c4:	79fb      	ldrb	r3, [r7, #7]
 80097c6:	2b23      	cmp	r3, #35	; 0x23
 80097c8:	d84a      	bhi.n	8009860 <CDC_Control_FS+0xac>
 80097ca:	a201      	add	r2, pc, #4	; (adr r2, 80097d0 <CDC_Control_FS+0x1c>)
 80097cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097d0:	08009861 	.word	0x08009861
 80097d4:	08009861 	.word	0x08009861
 80097d8:	08009861 	.word	0x08009861
 80097dc:	08009861 	.word	0x08009861
 80097e0:	08009861 	.word	0x08009861
 80097e4:	08009861 	.word	0x08009861
 80097e8:	08009861 	.word	0x08009861
 80097ec:	08009861 	.word	0x08009861
 80097f0:	08009861 	.word	0x08009861
 80097f4:	08009861 	.word	0x08009861
 80097f8:	08009861 	.word	0x08009861
 80097fc:	08009861 	.word	0x08009861
 8009800:	08009861 	.word	0x08009861
 8009804:	08009861 	.word	0x08009861
 8009808:	08009861 	.word	0x08009861
 800980c:	08009861 	.word	0x08009861
 8009810:	08009861 	.word	0x08009861
 8009814:	08009861 	.word	0x08009861
 8009818:	08009861 	.word	0x08009861
 800981c:	08009861 	.word	0x08009861
 8009820:	08009861 	.word	0x08009861
 8009824:	08009861 	.word	0x08009861
 8009828:	08009861 	.word	0x08009861
 800982c:	08009861 	.word	0x08009861
 8009830:	08009861 	.word	0x08009861
 8009834:	08009861 	.word	0x08009861
 8009838:	08009861 	.word	0x08009861
 800983c:	08009861 	.word	0x08009861
 8009840:	08009861 	.word	0x08009861
 8009844:	08009861 	.word	0x08009861
 8009848:	08009861 	.word	0x08009861
 800984c:	08009861 	.word	0x08009861
 8009850:	08009861 	.word	0x08009861
 8009854:	08009861 	.word	0x08009861
 8009858:	08009861 	.word	0x08009861
 800985c:	08009861 	.word	0x08009861
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009860:	bf00      	nop
  }

  return (USBD_OK);
 8009862:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009864:	4618      	mov	r0, r3
 8009866:	370c      	adds	r7, #12
 8009868:	46bd      	mov	sp, r7
 800986a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986e:	4770      	bx	lr

08009870 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b082      	sub	sp, #8
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
 8009878:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800987a:	6879      	ldr	r1, [r7, #4]
 800987c:	4805      	ldr	r0, [pc, #20]	; (8009894 <CDC_Receive_FS+0x24>)
 800987e:	f7fb fdff 	bl	8005480 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009882:	4804      	ldr	r0, [pc, #16]	; (8009894 <CDC_Receive_FS+0x24>)
 8009884:	f7fb fe60 	bl	8005548 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009888:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800988a:	4618      	mov	r0, r3
 800988c:	3708      	adds	r7, #8
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}
 8009892:	bf00      	nop
 8009894:	20004bec 	.word	0x20004bec

08009898 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b084      	sub	sp, #16
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
 80098a0:	460b      	mov	r3, r1
 80098a2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80098a4:	2300      	movs	r3, #0
 80098a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80098a8:	4b0d      	ldr	r3, [pc, #52]	; (80098e0 <CDC_Transmit_FS+0x48>)
 80098aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80098ae:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d001      	beq.n	80098be <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80098ba:	2301      	movs	r3, #1
 80098bc:	e00b      	b.n	80098d6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80098be:	887b      	ldrh	r3, [r7, #2]
 80098c0:	461a      	mov	r2, r3
 80098c2:	6879      	ldr	r1, [r7, #4]
 80098c4:	4806      	ldr	r0, [pc, #24]	; (80098e0 <CDC_Transmit_FS+0x48>)
 80098c6:	f7fb fdb9 	bl	800543c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80098ca:	4805      	ldr	r0, [pc, #20]	; (80098e0 <CDC_Transmit_FS+0x48>)
 80098cc:	f7fb fdf6 	bl	80054bc <USBD_CDC_TransmitPacket>
 80098d0:	4603      	mov	r3, r0
 80098d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80098d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	3710      	adds	r7, #16
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}
 80098de:	bf00      	nop
 80098e0:	20004bec 	.word	0x20004bec

080098e4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80098e4:	b480      	push	{r7}
 80098e6:	b087      	sub	sp, #28
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	60f8      	str	r0, [r7, #12]
 80098ec:	60b9      	str	r1, [r7, #8]
 80098ee:	4613      	mov	r3, r2
 80098f0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80098f2:	2300      	movs	r3, #0
 80098f4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80098f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	371c      	adds	r7, #28
 80098fe:	46bd      	mov	sp, r7
 8009900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009904:	4770      	bx	lr
	...

08009908 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009908:	b480      	push	{r7}
 800990a:	b083      	sub	sp, #12
 800990c:	af00      	add	r7, sp, #0
 800990e:	4603      	mov	r3, r0
 8009910:	6039      	str	r1, [r7, #0]
 8009912:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	2212      	movs	r2, #18
 8009918:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800991a:	4b03      	ldr	r3, [pc, #12]	; (8009928 <USBD_FS_DeviceDescriptor+0x20>)
}
 800991c:	4618      	mov	r0, r3
 800991e:	370c      	adds	r7, #12
 8009920:	46bd      	mov	sp, r7
 8009922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009926:	4770      	bx	lr
 8009928:	200000cc 	.word	0x200000cc

0800992c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800992c:	b480      	push	{r7}
 800992e:	b083      	sub	sp, #12
 8009930:	af00      	add	r7, sp, #0
 8009932:	4603      	mov	r3, r0
 8009934:	6039      	str	r1, [r7, #0]
 8009936:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	2204      	movs	r2, #4
 800993c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800993e:	4b03      	ldr	r3, [pc, #12]	; (800994c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009940:	4618      	mov	r0, r3
 8009942:	370c      	adds	r7, #12
 8009944:	46bd      	mov	sp, r7
 8009946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994a:	4770      	bx	lr
 800994c:	200000e0 	.word	0x200000e0

08009950 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b082      	sub	sp, #8
 8009954:	af00      	add	r7, sp, #0
 8009956:	4603      	mov	r3, r0
 8009958:	6039      	str	r1, [r7, #0]
 800995a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800995c:	79fb      	ldrb	r3, [r7, #7]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d105      	bne.n	800996e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009962:	683a      	ldr	r2, [r7, #0]
 8009964:	4907      	ldr	r1, [pc, #28]	; (8009984 <USBD_FS_ProductStrDescriptor+0x34>)
 8009966:	4808      	ldr	r0, [pc, #32]	; (8009988 <USBD_FS_ProductStrDescriptor+0x38>)
 8009968:	f7fd f836 	bl	80069d8 <USBD_GetString>
 800996c:	e004      	b.n	8009978 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800996e:	683a      	ldr	r2, [r7, #0]
 8009970:	4904      	ldr	r1, [pc, #16]	; (8009984 <USBD_FS_ProductStrDescriptor+0x34>)
 8009972:	4805      	ldr	r0, [pc, #20]	; (8009988 <USBD_FS_ProductStrDescriptor+0x38>)
 8009974:	f7fd f830 	bl	80069d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009978:	4b02      	ldr	r3, [pc, #8]	; (8009984 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800997a:	4618      	mov	r0, r3
 800997c:	3708      	adds	r7, #8
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}
 8009982:	bf00      	nop
 8009984:	20005ec8 	.word	0x20005ec8
 8009988:	0800a3c8 	.word	0x0800a3c8

0800998c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b082      	sub	sp, #8
 8009990:	af00      	add	r7, sp, #0
 8009992:	4603      	mov	r3, r0
 8009994:	6039      	str	r1, [r7, #0]
 8009996:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009998:	683a      	ldr	r2, [r7, #0]
 800999a:	4904      	ldr	r1, [pc, #16]	; (80099ac <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800999c:	4804      	ldr	r0, [pc, #16]	; (80099b0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800999e:	f7fd f81b 	bl	80069d8 <USBD_GetString>
  return USBD_StrDesc;
 80099a2:	4b02      	ldr	r3, [pc, #8]	; (80099ac <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	3708      	adds	r7, #8
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}
 80099ac:	20005ec8 	.word	0x20005ec8
 80099b0:	0800a3d4 	.word	0x0800a3d4

080099b4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b082      	sub	sp, #8
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	4603      	mov	r3, r0
 80099bc:	6039      	str	r1, [r7, #0]
 80099be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	221a      	movs	r2, #26
 80099c4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80099c6:	f000 f843 	bl	8009a50 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80099ca:	4b02      	ldr	r3, [pc, #8]	; (80099d4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80099cc:	4618      	mov	r0, r3
 80099ce:	3708      	adds	r7, #8
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}
 80099d4:	200000e4 	.word	0x200000e4

080099d8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b082      	sub	sp, #8
 80099dc:	af00      	add	r7, sp, #0
 80099de:	4603      	mov	r3, r0
 80099e0:	6039      	str	r1, [r7, #0]
 80099e2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80099e4:	79fb      	ldrb	r3, [r7, #7]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d105      	bne.n	80099f6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80099ea:	683a      	ldr	r2, [r7, #0]
 80099ec:	4907      	ldr	r1, [pc, #28]	; (8009a0c <USBD_FS_ConfigStrDescriptor+0x34>)
 80099ee:	4808      	ldr	r0, [pc, #32]	; (8009a10 <USBD_FS_ConfigStrDescriptor+0x38>)
 80099f0:	f7fc fff2 	bl	80069d8 <USBD_GetString>
 80099f4:	e004      	b.n	8009a00 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80099f6:	683a      	ldr	r2, [r7, #0]
 80099f8:	4904      	ldr	r1, [pc, #16]	; (8009a0c <USBD_FS_ConfigStrDescriptor+0x34>)
 80099fa:	4805      	ldr	r0, [pc, #20]	; (8009a10 <USBD_FS_ConfigStrDescriptor+0x38>)
 80099fc:	f7fc ffec 	bl	80069d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009a00:	4b02      	ldr	r3, [pc, #8]	; (8009a0c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	3708      	adds	r7, #8
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}
 8009a0a:	bf00      	nop
 8009a0c:	20005ec8 	.word	0x20005ec8
 8009a10:	0800a3e8 	.word	0x0800a3e8

08009a14 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b082      	sub	sp, #8
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	6039      	str	r1, [r7, #0]
 8009a1e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009a20:	79fb      	ldrb	r3, [r7, #7]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d105      	bne.n	8009a32 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009a26:	683a      	ldr	r2, [r7, #0]
 8009a28:	4907      	ldr	r1, [pc, #28]	; (8009a48 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009a2a:	4808      	ldr	r0, [pc, #32]	; (8009a4c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009a2c:	f7fc ffd4 	bl	80069d8 <USBD_GetString>
 8009a30:	e004      	b.n	8009a3c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009a32:	683a      	ldr	r2, [r7, #0]
 8009a34:	4904      	ldr	r1, [pc, #16]	; (8009a48 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009a36:	4805      	ldr	r0, [pc, #20]	; (8009a4c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009a38:	f7fc ffce 	bl	80069d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009a3c:	4b02      	ldr	r3, [pc, #8]	; (8009a48 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	3708      	adds	r7, #8
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}
 8009a46:	bf00      	nop
 8009a48:	20005ec8 	.word	0x20005ec8
 8009a4c:	0800a3f4 	.word	0x0800a3f4

08009a50 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b084      	sub	sp, #16
 8009a54:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009a56:	4b0f      	ldr	r3, [pc, #60]	; (8009a94 <Get_SerialNum+0x44>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009a5c:	4b0e      	ldr	r3, [pc, #56]	; (8009a98 <Get_SerialNum+0x48>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009a62:	4b0e      	ldr	r3, [pc, #56]	; (8009a9c <Get_SerialNum+0x4c>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009a68:	68fa      	ldr	r2, [r7, #12]
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	4413      	add	r3, r2
 8009a6e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d009      	beq.n	8009a8a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009a76:	2208      	movs	r2, #8
 8009a78:	4909      	ldr	r1, [pc, #36]	; (8009aa0 <Get_SerialNum+0x50>)
 8009a7a:	68f8      	ldr	r0, [r7, #12]
 8009a7c:	f000 f814 	bl	8009aa8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009a80:	2204      	movs	r2, #4
 8009a82:	4908      	ldr	r1, [pc, #32]	; (8009aa4 <Get_SerialNum+0x54>)
 8009a84:	68b8      	ldr	r0, [r7, #8]
 8009a86:	f000 f80f 	bl	8009aa8 <IntToUnicode>
  }
}
 8009a8a:	bf00      	nop
 8009a8c:	3710      	adds	r7, #16
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd80      	pop	{r7, pc}
 8009a92:	bf00      	nop
 8009a94:	1fff7a10 	.word	0x1fff7a10
 8009a98:	1fff7a14 	.word	0x1fff7a14
 8009a9c:	1fff7a18 	.word	0x1fff7a18
 8009aa0:	200000e6 	.word	0x200000e6
 8009aa4:	200000f6 	.word	0x200000f6

08009aa8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	b087      	sub	sp, #28
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	60f8      	str	r0, [r7, #12]
 8009ab0:	60b9      	str	r1, [r7, #8]
 8009ab2:	4613      	mov	r3, r2
 8009ab4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009aba:	2300      	movs	r3, #0
 8009abc:	75fb      	strb	r3, [r7, #23]
 8009abe:	e027      	b.n	8009b10 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	0f1b      	lsrs	r3, r3, #28
 8009ac4:	2b09      	cmp	r3, #9
 8009ac6:	d80b      	bhi.n	8009ae0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	0f1b      	lsrs	r3, r3, #28
 8009acc:	b2da      	uxtb	r2, r3
 8009ace:	7dfb      	ldrb	r3, [r7, #23]
 8009ad0:	005b      	lsls	r3, r3, #1
 8009ad2:	4619      	mov	r1, r3
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	440b      	add	r3, r1
 8009ad8:	3230      	adds	r2, #48	; 0x30
 8009ada:	b2d2      	uxtb	r2, r2
 8009adc:	701a      	strb	r2, [r3, #0]
 8009ade:	e00a      	b.n	8009af6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	0f1b      	lsrs	r3, r3, #28
 8009ae4:	b2da      	uxtb	r2, r3
 8009ae6:	7dfb      	ldrb	r3, [r7, #23]
 8009ae8:	005b      	lsls	r3, r3, #1
 8009aea:	4619      	mov	r1, r3
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	440b      	add	r3, r1
 8009af0:	3237      	adds	r2, #55	; 0x37
 8009af2:	b2d2      	uxtb	r2, r2
 8009af4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	011b      	lsls	r3, r3, #4
 8009afa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009afc:	7dfb      	ldrb	r3, [r7, #23]
 8009afe:	005b      	lsls	r3, r3, #1
 8009b00:	3301      	adds	r3, #1
 8009b02:	68ba      	ldr	r2, [r7, #8]
 8009b04:	4413      	add	r3, r2
 8009b06:	2200      	movs	r2, #0
 8009b08:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009b0a:	7dfb      	ldrb	r3, [r7, #23]
 8009b0c:	3301      	adds	r3, #1
 8009b0e:	75fb      	strb	r3, [r7, #23]
 8009b10:	7dfa      	ldrb	r2, [r7, #23]
 8009b12:	79fb      	ldrb	r3, [r7, #7]
 8009b14:	429a      	cmp	r2, r3
 8009b16:	d3d3      	bcc.n	8009ac0 <IntToUnicode+0x18>
  }
}
 8009b18:	bf00      	nop
 8009b1a:	bf00      	nop
 8009b1c:	371c      	adds	r7, #28
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b24:	4770      	bx	lr
	...

08009b28 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b08a      	sub	sp, #40	; 0x28
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009b30:	f107 0314 	add.w	r3, r7, #20
 8009b34:	2200      	movs	r2, #0
 8009b36:	601a      	str	r2, [r3, #0]
 8009b38:	605a      	str	r2, [r3, #4]
 8009b3a:	609a      	str	r2, [r3, #8]
 8009b3c:	60da      	str	r2, [r3, #12]
 8009b3e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009b48:	d13a      	bne.n	8009bc0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	613b      	str	r3, [r7, #16]
 8009b4e:	4b1e      	ldr	r3, [pc, #120]	; (8009bc8 <HAL_PCD_MspInit+0xa0>)
 8009b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b52:	4a1d      	ldr	r2, [pc, #116]	; (8009bc8 <HAL_PCD_MspInit+0xa0>)
 8009b54:	f043 0301 	orr.w	r3, r3, #1
 8009b58:	6313      	str	r3, [r2, #48]	; 0x30
 8009b5a:	4b1b      	ldr	r3, [pc, #108]	; (8009bc8 <HAL_PCD_MspInit+0xa0>)
 8009b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b5e:	f003 0301 	and.w	r3, r3, #1
 8009b62:	613b      	str	r3, [r7, #16]
 8009b64:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009b66:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009b6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b6c:	2302      	movs	r3, #2
 8009b6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b70:	2300      	movs	r3, #0
 8009b72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009b74:	2303      	movs	r3, #3
 8009b76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009b78:	230a      	movs	r3, #10
 8009b7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009b7c:	f107 0314 	add.w	r3, r7, #20
 8009b80:	4619      	mov	r1, r3
 8009b82:	4812      	ldr	r0, [pc, #72]	; (8009bcc <HAL_PCD_MspInit+0xa4>)
 8009b84:	f7f7 f842 	bl	8000c0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009b88:	4b0f      	ldr	r3, [pc, #60]	; (8009bc8 <HAL_PCD_MspInit+0xa0>)
 8009b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b8c:	4a0e      	ldr	r2, [pc, #56]	; (8009bc8 <HAL_PCD_MspInit+0xa0>)
 8009b8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b92:	6353      	str	r3, [r2, #52]	; 0x34
 8009b94:	2300      	movs	r3, #0
 8009b96:	60fb      	str	r3, [r7, #12]
 8009b98:	4b0b      	ldr	r3, [pc, #44]	; (8009bc8 <HAL_PCD_MspInit+0xa0>)
 8009b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b9c:	4a0a      	ldr	r2, [pc, #40]	; (8009bc8 <HAL_PCD_MspInit+0xa0>)
 8009b9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009ba2:	6453      	str	r3, [r2, #68]	; 0x44
 8009ba4:	4b08      	ldr	r3, [pc, #32]	; (8009bc8 <HAL_PCD_MspInit+0xa0>)
 8009ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ba8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009bac:	60fb      	str	r3, [r7, #12]
 8009bae:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	2105      	movs	r1, #5
 8009bb4:	2043      	movs	r0, #67	; 0x43
 8009bb6:	f7f6 ffff 	bl	8000bb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009bba:	2043      	movs	r0, #67	; 0x43
 8009bbc:	f7f7 f818 	bl	8000bf0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009bc0:	bf00      	nop
 8009bc2:	3728      	adds	r7, #40	; 0x28
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bd80      	pop	{r7, pc}
 8009bc8:	40023800 	.word	0x40023800
 8009bcc:	40020000 	.word	0x40020000

08009bd0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b082      	sub	sp, #8
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009be4:	4619      	mov	r1, r3
 8009be6:	4610      	mov	r0, r2
 8009be8:	f7fb fd97 	bl	800571a <USBD_LL_SetupStage>
}
 8009bec:	bf00      	nop
 8009bee:	3708      	adds	r7, #8
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}

08009bf4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b082      	sub	sp, #8
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
 8009bfc:	460b      	mov	r3, r1
 8009bfe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009c06:	78fa      	ldrb	r2, [r7, #3]
 8009c08:	6879      	ldr	r1, [r7, #4]
 8009c0a:	4613      	mov	r3, r2
 8009c0c:	00db      	lsls	r3, r3, #3
 8009c0e:	4413      	add	r3, r2
 8009c10:	009b      	lsls	r3, r3, #2
 8009c12:	440b      	add	r3, r1
 8009c14:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009c18:	681a      	ldr	r2, [r3, #0]
 8009c1a:	78fb      	ldrb	r3, [r7, #3]
 8009c1c:	4619      	mov	r1, r3
 8009c1e:	f7fb fdd1 	bl	80057c4 <USBD_LL_DataOutStage>
}
 8009c22:	bf00      	nop
 8009c24:	3708      	adds	r7, #8
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}

08009c2a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c2a:	b580      	push	{r7, lr}
 8009c2c:	b082      	sub	sp, #8
 8009c2e:	af00      	add	r7, sp, #0
 8009c30:	6078      	str	r0, [r7, #4]
 8009c32:	460b      	mov	r3, r1
 8009c34:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009c3c:	78fa      	ldrb	r2, [r7, #3]
 8009c3e:	6879      	ldr	r1, [r7, #4]
 8009c40:	4613      	mov	r3, r2
 8009c42:	00db      	lsls	r3, r3, #3
 8009c44:	4413      	add	r3, r2
 8009c46:	009b      	lsls	r3, r3, #2
 8009c48:	440b      	add	r3, r1
 8009c4a:	334c      	adds	r3, #76	; 0x4c
 8009c4c:	681a      	ldr	r2, [r3, #0]
 8009c4e:	78fb      	ldrb	r3, [r7, #3]
 8009c50:	4619      	mov	r1, r3
 8009c52:	f7fb fe6a 	bl	800592a <USBD_LL_DataInStage>
}
 8009c56:	bf00      	nop
 8009c58:	3708      	adds	r7, #8
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}

08009c5e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c5e:	b580      	push	{r7, lr}
 8009c60:	b082      	sub	sp, #8
 8009c62:	af00      	add	r7, sp, #0
 8009c64:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f7fb ff9e 	bl	8005bae <USBD_LL_SOF>
}
 8009c72:	bf00      	nop
 8009c74:	3708      	adds	r7, #8
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}

08009c7a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c7a:	b580      	push	{r7, lr}
 8009c7c:	b084      	sub	sp, #16
 8009c7e:	af00      	add	r7, sp, #0
 8009c80:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009c82:	2301      	movs	r3, #1
 8009c84:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	68db      	ldr	r3, [r3, #12]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d102      	bne.n	8009c94 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009c8e:	2300      	movs	r3, #0
 8009c90:	73fb      	strb	r3, [r7, #15]
 8009c92:	e008      	b.n	8009ca6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	68db      	ldr	r3, [r3, #12]
 8009c98:	2b02      	cmp	r3, #2
 8009c9a:	d102      	bne.n	8009ca2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009c9c:	2301      	movs	r3, #1
 8009c9e:	73fb      	strb	r3, [r7, #15]
 8009ca0:	e001      	b.n	8009ca6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009ca2:	f7f6 fd57 	bl	8000754 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009cac:	7bfa      	ldrb	r2, [r7, #15]
 8009cae:	4611      	mov	r1, r2
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	f7fb ff3e 	bl	8005b32 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	f7fb fee6 	bl	8005a8e <USBD_LL_Reset>
}
 8009cc2:	bf00      	nop
 8009cc4:	3710      	adds	r7, #16
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}
	...

08009ccc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b082      	sub	sp, #8
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f7fb ff39 	bl	8005b52 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	687a      	ldr	r2, [r7, #4]
 8009cec:	6812      	ldr	r2, [r2, #0]
 8009cee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009cf2:	f043 0301 	orr.w	r3, r3, #1
 8009cf6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6a1b      	ldr	r3, [r3, #32]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d005      	beq.n	8009d0c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009d00:	4b04      	ldr	r3, [pc, #16]	; (8009d14 <HAL_PCD_SuspendCallback+0x48>)
 8009d02:	691b      	ldr	r3, [r3, #16]
 8009d04:	4a03      	ldr	r2, [pc, #12]	; (8009d14 <HAL_PCD_SuspendCallback+0x48>)
 8009d06:	f043 0306 	orr.w	r3, r3, #6
 8009d0a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009d0c:	bf00      	nop
 8009d0e:	3708      	adds	r7, #8
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}
 8009d14:	e000ed00 	.word	0xe000ed00

08009d18 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b082      	sub	sp, #8
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009d26:	4618      	mov	r0, r3
 8009d28:	f7fb ff29 	bl	8005b7e <USBD_LL_Resume>
}
 8009d2c:	bf00      	nop
 8009d2e:	3708      	adds	r7, #8
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}

08009d34 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b082      	sub	sp, #8
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
 8009d3c:	460b      	mov	r3, r1
 8009d3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009d46:	78fa      	ldrb	r2, [r7, #3]
 8009d48:	4611      	mov	r1, r2
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f7fb ff81 	bl	8005c52 <USBD_LL_IsoOUTIncomplete>
}
 8009d50:	bf00      	nop
 8009d52:	3708      	adds	r7, #8
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd80      	pop	{r7, pc}

08009d58 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b082      	sub	sp, #8
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
 8009d60:	460b      	mov	r3, r1
 8009d62:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009d6a:	78fa      	ldrb	r2, [r7, #3]
 8009d6c:	4611      	mov	r1, r2
 8009d6e:	4618      	mov	r0, r3
 8009d70:	f7fb ff3d 	bl	8005bee <USBD_LL_IsoINIncomplete>
}
 8009d74:	bf00      	nop
 8009d76:	3708      	adds	r7, #8
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}

08009d7c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b082      	sub	sp, #8
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	f7fb ff93 	bl	8005cb6 <USBD_LL_DevConnected>
}
 8009d90:	bf00      	nop
 8009d92:	3708      	adds	r7, #8
 8009d94:	46bd      	mov	sp, r7
 8009d96:	bd80      	pop	{r7, pc}

08009d98 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b082      	sub	sp, #8
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009da6:	4618      	mov	r0, r3
 8009da8:	f7fb ff90 	bl	8005ccc <USBD_LL_DevDisconnected>
}
 8009dac:	bf00      	nop
 8009dae:	3708      	adds	r7, #8
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}

08009db4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b082      	sub	sp, #8
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	781b      	ldrb	r3, [r3, #0]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d13c      	bne.n	8009e3e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009dc4:	4a20      	ldr	r2, [pc, #128]	; (8009e48 <USBD_LL_Init+0x94>)
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	4a1e      	ldr	r2, [pc, #120]	; (8009e48 <USBD_LL_Init+0x94>)
 8009dd0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009dd4:	4b1c      	ldr	r3, [pc, #112]	; (8009e48 <USBD_LL_Init+0x94>)
 8009dd6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009dda:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009ddc:	4b1a      	ldr	r3, [pc, #104]	; (8009e48 <USBD_LL_Init+0x94>)
 8009dde:	2204      	movs	r2, #4
 8009de0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009de2:	4b19      	ldr	r3, [pc, #100]	; (8009e48 <USBD_LL_Init+0x94>)
 8009de4:	2202      	movs	r2, #2
 8009de6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009de8:	4b17      	ldr	r3, [pc, #92]	; (8009e48 <USBD_LL_Init+0x94>)
 8009dea:	2200      	movs	r2, #0
 8009dec:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009dee:	4b16      	ldr	r3, [pc, #88]	; (8009e48 <USBD_LL_Init+0x94>)
 8009df0:	2202      	movs	r2, #2
 8009df2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009df4:	4b14      	ldr	r3, [pc, #80]	; (8009e48 <USBD_LL_Init+0x94>)
 8009df6:	2200      	movs	r2, #0
 8009df8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009dfa:	4b13      	ldr	r3, [pc, #76]	; (8009e48 <USBD_LL_Init+0x94>)
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009e00:	4b11      	ldr	r3, [pc, #68]	; (8009e48 <USBD_LL_Init+0x94>)
 8009e02:	2200      	movs	r2, #0
 8009e04:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009e06:	4b10      	ldr	r3, [pc, #64]	; (8009e48 <USBD_LL_Init+0x94>)
 8009e08:	2200      	movs	r2, #0
 8009e0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009e0c:	4b0e      	ldr	r3, [pc, #56]	; (8009e48 <USBD_LL_Init+0x94>)
 8009e0e:	2200      	movs	r2, #0
 8009e10:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009e12:	480d      	ldr	r0, [pc, #52]	; (8009e48 <USBD_LL_Init+0x94>)
 8009e14:	f7f7 f8c9 	bl	8000faa <HAL_PCD_Init>
 8009e18:	4603      	mov	r3, r0
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d001      	beq.n	8009e22 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009e1e:	f7f6 fc99 	bl	8000754 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009e22:	2180      	movs	r1, #128	; 0x80
 8009e24:	4808      	ldr	r0, [pc, #32]	; (8009e48 <USBD_LL_Init+0x94>)
 8009e26:	f7f8 fb20 	bl	800246a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009e2a:	2240      	movs	r2, #64	; 0x40
 8009e2c:	2100      	movs	r1, #0
 8009e2e:	4806      	ldr	r0, [pc, #24]	; (8009e48 <USBD_LL_Init+0x94>)
 8009e30:	f7f8 fad4 	bl	80023dc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009e34:	2280      	movs	r2, #128	; 0x80
 8009e36:	2101      	movs	r1, #1
 8009e38:	4803      	ldr	r0, [pc, #12]	; (8009e48 <USBD_LL_Init+0x94>)
 8009e3a:	f7f8 facf 	bl	80023dc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009e3e:	2300      	movs	r3, #0
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	3708      	adds	r7, #8
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bd80      	pop	{r7, pc}
 8009e48:	200060c8 	.word	0x200060c8

08009e4c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b084      	sub	sp, #16
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e54:	2300      	movs	r3, #0
 8009e56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e58:	2300      	movs	r3, #0
 8009e5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009e62:	4618      	mov	r0, r3
 8009e64:	f7f7 f9be 	bl	80011e4 <HAL_PCD_Start>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e6c:	7bfb      	ldrb	r3, [r7, #15]
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f000 f942 	bl	800a0f8 <USBD_Get_USB_Status>
 8009e74:	4603      	mov	r3, r0
 8009e76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e78:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	3710      	adds	r7, #16
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bd80      	pop	{r7, pc}

08009e82 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009e82:	b580      	push	{r7, lr}
 8009e84:	b084      	sub	sp, #16
 8009e86:	af00      	add	r7, sp, #0
 8009e88:	6078      	str	r0, [r7, #4]
 8009e8a:	4608      	mov	r0, r1
 8009e8c:	4611      	mov	r1, r2
 8009e8e:	461a      	mov	r2, r3
 8009e90:	4603      	mov	r3, r0
 8009e92:	70fb      	strb	r3, [r7, #3]
 8009e94:	460b      	mov	r3, r1
 8009e96:	70bb      	strb	r3, [r7, #2]
 8009e98:	4613      	mov	r3, r2
 8009e9a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009eaa:	78bb      	ldrb	r3, [r7, #2]
 8009eac:	883a      	ldrh	r2, [r7, #0]
 8009eae:	78f9      	ldrb	r1, [r7, #3]
 8009eb0:	f7f7 fe8f 	bl	8001bd2 <HAL_PCD_EP_Open>
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009eb8:	7bfb      	ldrb	r3, [r7, #15]
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f000 f91c 	bl	800a0f8 <USBD_Get_USB_Status>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ec4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	3710      	adds	r7, #16
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}

08009ece <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ece:	b580      	push	{r7, lr}
 8009ed0:	b084      	sub	sp, #16
 8009ed2:	af00      	add	r7, sp, #0
 8009ed4:	6078      	str	r0, [r7, #4]
 8009ed6:	460b      	mov	r3, r1
 8009ed8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009eda:	2300      	movs	r3, #0
 8009edc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ede:	2300      	movs	r3, #0
 8009ee0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009ee8:	78fa      	ldrb	r2, [r7, #3]
 8009eea:	4611      	mov	r1, r2
 8009eec:	4618      	mov	r0, r3
 8009eee:	f7f7 fed8 	bl	8001ca2 <HAL_PCD_EP_Close>
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ef6:	7bfb      	ldrb	r3, [r7, #15]
 8009ef8:	4618      	mov	r0, r3
 8009efa:	f000 f8fd 	bl	800a0f8 <USBD_Get_USB_Status>
 8009efe:	4603      	mov	r3, r0
 8009f00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f02:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f04:	4618      	mov	r0, r3
 8009f06:	3710      	adds	r7, #16
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	bd80      	pop	{r7, pc}

08009f0c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b084      	sub	sp, #16
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
 8009f14:	460b      	mov	r3, r1
 8009f16:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f18:	2300      	movs	r3, #0
 8009f1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009f26:	78fa      	ldrb	r2, [r7, #3]
 8009f28:	4611      	mov	r1, r2
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f7f7 ffb0 	bl	8001e90 <HAL_PCD_EP_SetStall>
 8009f30:	4603      	mov	r3, r0
 8009f32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f34:	7bfb      	ldrb	r3, [r7, #15]
 8009f36:	4618      	mov	r0, r3
 8009f38:	f000 f8de 	bl	800a0f8 <USBD_Get_USB_Status>
 8009f3c:	4603      	mov	r3, r0
 8009f3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f40:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f42:	4618      	mov	r0, r3
 8009f44:	3710      	adds	r7, #16
 8009f46:	46bd      	mov	sp, r7
 8009f48:	bd80      	pop	{r7, pc}

08009f4a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f4a:	b580      	push	{r7, lr}
 8009f4c:	b084      	sub	sp, #16
 8009f4e:	af00      	add	r7, sp, #0
 8009f50:	6078      	str	r0, [r7, #4]
 8009f52:	460b      	mov	r3, r1
 8009f54:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f56:	2300      	movs	r3, #0
 8009f58:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009f64:	78fa      	ldrb	r2, [r7, #3]
 8009f66:	4611      	mov	r1, r2
 8009f68:	4618      	mov	r0, r3
 8009f6a:	f7f7 fff5 	bl	8001f58 <HAL_PCD_EP_ClrStall>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f72:	7bfb      	ldrb	r3, [r7, #15]
 8009f74:	4618      	mov	r0, r3
 8009f76:	f000 f8bf 	bl	800a0f8 <USBD_Get_USB_Status>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f7e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f80:	4618      	mov	r0, r3
 8009f82:	3710      	adds	r7, #16
 8009f84:	46bd      	mov	sp, r7
 8009f86:	bd80      	pop	{r7, pc}

08009f88 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f88:	b480      	push	{r7}
 8009f8a:	b085      	sub	sp, #20
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
 8009f90:	460b      	mov	r3, r1
 8009f92:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009f9a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009f9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	da0b      	bge.n	8009fbc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009fa4:	78fb      	ldrb	r3, [r7, #3]
 8009fa6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009faa:	68f9      	ldr	r1, [r7, #12]
 8009fac:	4613      	mov	r3, r2
 8009fae:	00db      	lsls	r3, r3, #3
 8009fb0:	4413      	add	r3, r2
 8009fb2:	009b      	lsls	r3, r3, #2
 8009fb4:	440b      	add	r3, r1
 8009fb6:	333e      	adds	r3, #62	; 0x3e
 8009fb8:	781b      	ldrb	r3, [r3, #0]
 8009fba:	e00b      	b.n	8009fd4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009fbc:	78fb      	ldrb	r3, [r7, #3]
 8009fbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009fc2:	68f9      	ldr	r1, [r7, #12]
 8009fc4:	4613      	mov	r3, r2
 8009fc6:	00db      	lsls	r3, r3, #3
 8009fc8:	4413      	add	r3, r2
 8009fca:	009b      	lsls	r3, r3, #2
 8009fcc:	440b      	add	r3, r1
 8009fce:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8009fd2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	3714      	adds	r7, #20
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fde:	4770      	bx	lr

08009fe0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b084      	sub	sp, #16
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
 8009fe8:	460b      	mov	r3, r1
 8009fea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fec:	2300      	movs	r3, #0
 8009fee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009ffa:	78fa      	ldrb	r2, [r7, #3]
 8009ffc:	4611      	mov	r1, r2
 8009ffe:	4618      	mov	r0, r3
 800a000:	f7f7 fdc2 	bl	8001b88 <HAL_PCD_SetAddress>
 800a004:	4603      	mov	r3, r0
 800a006:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a008:	7bfb      	ldrb	r3, [r7, #15]
 800a00a:	4618      	mov	r0, r3
 800a00c:	f000 f874 	bl	800a0f8 <USBD_Get_USB_Status>
 800a010:	4603      	mov	r3, r0
 800a012:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a014:	7bbb      	ldrb	r3, [r7, #14]
}
 800a016:	4618      	mov	r0, r3
 800a018:	3710      	adds	r7, #16
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bd80      	pop	{r7, pc}

0800a01e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a01e:	b580      	push	{r7, lr}
 800a020:	b086      	sub	sp, #24
 800a022:	af00      	add	r7, sp, #0
 800a024:	60f8      	str	r0, [r7, #12]
 800a026:	607a      	str	r2, [r7, #4]
 800a028:	603b      	str	r3, [r7, #0]
 800a02a:	460b      	mov	r3, r1
 800a02c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a02e:	2300      	movs	r3, #0
 800a030:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a032:	2300      	movs	r3, #0
 800a034:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a03c:	7af9      	ldrb	r1, [r7, #11]
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	687a      	ldr	r2, [r7, #4]
 800a042:	f7f7 fedb 	bl	8001dfc <HAL_PCD_EP_Transmit>
 800a046:	4603      	mov	r3, r0
 800a048:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a04a:	7dfb      	ldrb	r3, [r7, #23]
 800a04c:	4618      	mov	r0, r3
 800a04e:	f000 f853 	bl	800a0f8 <USBD_Get_USB_Status>
 800a052:	4603      	mov	r3, r0
 800a054:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a056:	7dbb      	ldrb	r3, [r7, #22]
}
 800a058:	4618      	mov	r0, r3
 800a05a:	3718      	adds	r7, #24
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd80      	pop	{r7, pc}

0800a060 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b086      	sub	sp, #24
 800a064:	af00      	add	r7, sp, #0
 800a066:	60f8      	str	r0, [r7, #12]
 800a068:	607a      	str	r2, [r7, #4]
 800a06a:	603b      	str	r3, [r7, #0]
 800a06c:	460b      	mov	r3, r1
 800a06e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a070:	2300      	movs	r3, #0
 800a072:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a074:	2300      	movs	r3, #0
 800a076:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a07e:	7af9      	ldrb	r1, [r7, #11]
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	687a      	ldr	r2, [r7, #4]
 800a084:	f7f7 fe57 	bl	8001d36 <HAL_PCD_EP_Receive>
 800a088:	4603      	mov	r3, r0
 800a08a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a08c:	7dfb      	ldrb	r3, [r7, #23]
 800a08e:	4618      	mov	r0, r3
 800a090:	f000 f832 	bl	800a0f8 <USBD_Get_USB_Status>
 800a094:	4603      	mov	r3, r0
 800a096:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a098:	7dbb      	ldrb	r3, [r7, #22]
}
 800a09a:	4618      	mov	r0, r3
 800a09c:	3718      	adds	r7, #24
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd80      	pop	{r7, pc}

0800a0a2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a0a2:	b580      	push	{r7, lr}
 800a0a4:	b082      	sub	sp, #8
 800a0a6:	af00      	add	r7, sp, #0
 800a0a8:	6078      	str	r0, [r7, #4]
 800a0aa:	460b      	mov	r3, r1
 800a0ac:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a0b4:	78fa      	ldrb	r2, [r7, #3]
 800a0b6:	4611      	mov	r1, r2
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	f7f7 fe87 	bl	8001dcc <HAL_PCD_EP_GetRxCount>
 800a0be:	4603      	mov	r3, r0
}
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	3708      	adds	r7, #8
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	bd80      	pop	{r7, pc}

0800a0c8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	b083      	sub	sp, #12
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a0d0:	4b03      	ldr	r3, [pc, #12]	; (800a0e0 <USBD_static_malloc+0x18>)
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	370c      	adds	r7, #12
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0dc:	4770      	bx	lr
 800a0de:	bf00      	nop
 800a0e0:	200065d4 	.word	0x200065d4

0800a0e4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	b083      	sub	sp, #12
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]

}
 800a0ec:	bf00      	nop
 800a0ee:	370c      	adds	r7, #12
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f6:	4770      	bx	lr

0800a0f8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a0f8:	b480      	push	{r7}
 800a0fa:	b085      	sub	sp, #20
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	4603      	mov	r3, r0
 800a100:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a102:	2300      	movs	r3, #0
 800a104:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a106:	79fb      	ldrb	r3, [r7, #7]
 800a108:	2b03      	cmp	r3, #3
 800a10a:	d817      	bhi.n	800a13c <USBD_Get_USB_Status+0x44>
 800a10c:	a201      	add	r2, pc, #4	; (adr r2, 800a114 <USBD_Get_USB_Status+0x1c>)
 800a10e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a112:	bf00      	nop
 800a114:	0800a125 	.word	0x0800a125
 800a118:	0800a12b 	.word	0x0800a12b
 800a11c:	0800a131 	.word	0x0800a131
 800a120:	0800a137 	.word	0x0800a137
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a124:	2300      	movs	r3, #0
 800a126:	73fb      	strb	r3, [r7, #15]
    break;
 800a128:	e00b      	b.n	800a142 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a12a:	2303      	movs	r3, #3
 800a12c:	73fb      	strb	r3, [r7, #15]
    break;
 800a12e:	e008      	b.n	800a142 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a130:	2301      	movs	r3, #1
 800a132:	73fb      	strb	r3, [r7, #15]
    break;
 800a134:	e005      	b.n	800a142 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a136:	2303      	movs	r3, #3
 800a138:	73fb      	strb	r3, [r7, #15]
    break;
 800a13a:	e002      	b.n	800a142 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a13c:	2303      	movs	r3, #3
 800a13e:	73fb      	strb	r3, [r7, #15]
    break;
 800a140:	bf00      	nop
  }
  return usb_status;
 800a142:	7bfb      	ldrb	r3, [r7, #15]
}
 800a144:	4618      	mov	r0, r3
 800a146:	3714      	adds	r7, #20
 800a148:	46bd      	mov	sp, r7
 800a14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14e:	4770      	bx	lr

0800a150 <__libc_init_array>:
 800a150:	b570      	push	{r4, r5, r6, lr}
 800a152:	4d0d      	ldr	r5, [pc, #52]	; (800a188 <__libc_init_array+0x38>)
 800a154:	4c0d      	ldr	r4, [pc, #52]	; (800a18c <__libc_init_array+0x3c>)
 800a156:	1b64      	subs	r4, r4, r5
 800a158:	10a4      	asrs	r4, r4, #2
 800a15a:	2600      	movs	r6, #0
 800a15c:	42a6      	cmp	r6, r4
 800a15e:	d109      	bne.n	800a174 <__libc_init_array+0x24>
 800a160:	4d0b      	ldr	r5, [pc, #44]	; (800a190 <__libc_init_array+0x40>)
 800a162:	4c0c      	ldr	r4, [pc, #48]	; (800a194 <__libc_init_array+0x44>)
 800a164:	f000 f8f2 	bl	800a34c <_init>
 800a168:	1b64      	subs	r4, r4, r5
 800a16a:	10a4      	asrs	r4, r4, #2
 800a16c:	2600      	movs	r6, #0
 800a16e:	42a6      	cmp	r6, r4
 800a170:	d105      	bne.n	800a17e <__libc_init_array+0x2e>
 800a172:	bd70      	pop	{r4, r5, r6, pc}
 800a174:	f855 3b04 	ldr.w	r3, [r5], #4
 800a178:	4798      	blx	r3
 800a17a:	3601      	adds	r6, #1
 800a17c:	e7ee      	b.n	800a15c <__libc_init_array+0xc>
 800a17e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a182:	4798      	blx	r3
 800a184:	3601      	adds	r6, #1
 800a186:	e7f2      	b.n	800a16e <__libc_init_array+0x1e>
 800a188:	0800a4f0 	.word	0x0800a4f0
 800a18c:	0800a4f0 	.word	0x0800a4f0
 800a190:	0800a4f0 	.word	0x0800a4f0
 800a194:	0800a4f4 	.word	0x0800a4f4

0800a198 <__retarget_lock_acquire_recursive>:
 800a198:	4770      	bx	lr

0800a19a <__retarget_lock_release_recursive>:
 800a19a:	4770      	bx	lr

0800a19c <memcpy>:
 800a19c:	440a      	add	r2, r1
 800a19e:	4291      	cmp	r1, r2
 800a1a0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a1a4:	d100      	bne.n	800a1a8 <memcpy+0xc>
 800a1a6:	4770      	bx	lr
 800a1a8:	b510      	push	{r4, lr}
 800a1aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a1ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a1b2:	4291      	cmp	r1, r2
 800a1b4:	d1f9      	bne.n	800a1aa <memcpy+0xe>
 800a1b6:	bd10      	pop	{r4, pc}

0800a1b8 <memset>:
 800a1b8:	4402      	add	r2, r0
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	4293      	cmp	r3, r2
 800a1be:	d100      	bne.n	800a1c2 <memset+0xa>
 800a1c0:	4770      	bx	lr
 800a1c2:	f803 1b01 	strb.w	r1, [r3], #1
 800a1c6:	e7f9      	b.n	800a1bc <memset+0x4>

0800a1c8 <cleanup_glue>:
 800a1c8:	b538      	push	{r3, r4, r5, lr}
 800a1ca:	460c      	mov	r4, r1
 800a1cc:	6809      	ldr	r1, [r1, #0]
 800a1ce:	4605      	mov	r5, r0
 800a1d0:	b109      	cbz	r1, 800a1d6 <cleanup_glue+0xe>
 800a1d2:	f7ff fff9 	bl	800a1c8 <cleanup_glue>
 800a1d6:	4621      	mov	r1, r4
 800a1d8:	4628      	mov	r0, r5
 800a1da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a1de:	f000 b869 	b.w	800a2b4 <_free_r>
	...

0800a1e4 <_reclaim_reent>:
 800a1e4:	4b2c      	ldr	r3, [pc, #176]	; (800a298 <_reclaim_reent+0xb4>)
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	4283      	cmp	r3, r0
 800a1ea:	b570      	push	{r4, r5, r6, lr}
 800a1ec:	4604      	mov	r4, r0
 800a1ee:	d051      	beq.n	800a294 <_reclaim_reent+0xb0>
 800a1f0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a1f2:	b143      	cbz	r3, 800a206 <_reclaim_reent+0x22>
 800a1f4:	68db      	ldr	r3, [r3, #12]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d14a      	bne.n	800a290 <_reclaim_reent+0xac>
 800a1fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a1fc:	6819      	ldr	r1, [r3, #0]
 800a1fe:	b111      	cbz	r1, 800a206 <_reclaim_reent+0x22>
 800a200:	4620      	mov	r0, r4
 800a202:	f000 f857 	bl	800a2b4 <_free_r>
 800a206:	6961      	ldr	r1, [r4, #20]
 800a208:	b111      	cbz	r1, 800a210 <_reclaim_reent+0x2c>
 800a20a:	4620      	mov	r0, r4
 800a20c:	f000 f852 	bl	800a2b4 <_free_r>
 800a210:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a212:	b111      	cbz	r1, 800a21a <_reclaim_reent+0x36>
 800a214:	4620      	mov	r0, r4
 800a216:	f000 f84d 	bl	800a2b4 <_free_r>
 800a21a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a21c:	b111      	cbz	r1, 800a224 <_reclaim_reent+0x40>
 800a21e:	4620      	mov	r0, r4
 800a220:	f000 f848 	bl	800a2b4 <_free_r>
 800a224:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a226:	b111      	cbz	r1, 800a22e <_reclaim_reent+0x4a>
 800a228:	4620      	mov	r0, r4
 800a22a:	f000 f843 	bl	800a2b4 <_free_r>
 800a22e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a230:	b111      	cbz	r1, 800a238 <_reclaim_reent+0x54>
 800a232:	4620      	mov	r0, r4
 800a234:	f000 f83e 	bl	800a2b4 <_free_r>
 800a238:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a23a:	b111      	cbz	r1, 800a242 <_reclaim_reent+0x5e>
 800a23c:	4620      	mov	r0, r4
 800a23e:	f000 f839 	bl	800a2b4 <_free_r>
 800a242:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a244:	b111      	cbz	r1, 800a24c <_reclaim_reent+0x68>
 800a246:	4620      	mov	r0, r4
 800a248:	f000 f834 	bl	800a2b4 <_free_r>
 800a24c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a24e:	b111      	cbz	r1, 800a256 <_reclaim_reent+0x72>
 800a250:	4620      	mov	r0, r4
 800a252:	f000 f82f 	bl	800a2b4 <_free_r>
 800a256:	69a3      	ldr	r3, [r4, #24]
 800a258:	b1e3      	cbz	r3, 800a294 <_reclaim_reent+0xb0>
 800a25a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a25c:	4620      	mov	r0, r4
 800a25e:	4798      	blx	r3
 800a260:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a262:	b1b9      	cbz	r1, 800a294 <_reclaim_reent+0xb0>
 800a264:	4620      	mov	r0, r4
 800a266:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a26a:	f7ff bfad 	b.w	800a1c8 <cleanup_glue>
 800a26e:	5949      	ldr	r1, [r1, r5]
 800a270:	b941      	cbnz	r1, 800a284 <_reclaim_reent+0xa0>
 800a272:	3504      	adds	r5, #4
 800a274:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a276:	2d80      	cmp	r5, #128	; 0x80
 800a278:	68d9      	ldr	r1, [r3, #12]
 800a27a:	d1f8      	bne.n	800a26e <_reclaim_reent+0x8a>
 800a27c:	4620      	mov	r0, r4
 800a27e:	f000 f819 	bl	800a2b4 <_free_r>
 800a282:	e7ba      	b.n	800a1fa <_reclaim_reent+0x16>
 800a284:	680e      	ldr	r6, [r1, #0]
 800a286:	4620      	mov	r0, r4
 800a288:	f000 f814 	bl	800a2b4 <_free_r>
 800a28c:	4631      	mov	r1, r6
 800a28e:	e7ef      	b.n	800a270 <_reclaim_reent+0x8c>
 800a290:	2500      	movs	r5, #0
 800a292:	e7ef      	b.n	800a274 <_reclaim_reent+0x90>
 800a294:	bd70      	pop	{r4, r5, r6, pc}
 800a296:	bf00      	nop
 800a298:	20000100 	.word	0x20000100

0800a29c <__malloc_lock>:
 800a29c:	4801      	ldr	r0, [pc, #4]	; (800a2a4 <__malloc_lock+0x8>)
 800a29e:	f7ff bf7b 	b.w	800a198 <__retarget_lock_acquire_recursive>
 800a2a2:	bf00      	nop
 800a2a4:	200067f4 	.word	0x200067f4

0800a2a8 <__malloc_unlock>:
 800a2a8:	4801      	ldr	r0, [pc, #4]	; (800a2b0 <__malloc_unlock+0x8>)
 800a2aa:	f7ff bf76 	b.w	800a19a <__retarget_lock_release_recursive>
 800a2ae:	bf00      	nop
 800a2b0:	200067f4 	.word	0x200067f4

0800a2b4 <_free_r>:
 800a2b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a2b6:	2900      	cmp	r1, #0
 800a2b8:	d044      	beq.n	800a344 <_free_r+0x90>
 800a2ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2be:	9001      	str	r0, [sp, #4]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	f1a1 0404 	sub.w	r4, r1, #4
 800a2c6:	bfb8      	it	lt
 800a2c8:	18e4      	addlt	r4, r4, r3
 800a2ca:	f7ff ffe7 	bl	800a29c <__malloc_lock>
 800a2ce:	4a1e      	ldr	r2, [pc, #120]	; (800a348 <_free_r+0x94>)
 800a2d0:	9801      	ldr	r0, [sp, #4]
 800a2d2:	6813      	ldr	r3, [r2, #0]
 800a2d4:	b933      	cbnz	r3, 800a2e4 <_free_r+0x30>
 800a2d6:	6063      	str	r3, [r4, #4]
 800a2d8:	6014      	str	r4, [r2, #0]
 800a2da:	b003      	add	sp, #12
 800a2dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a2e0:	f7ff bfe2 	b.w	800a2a8 <__malloc_unlock>
 800a2e4:	42a3      	cmp	r3, r4
 800a2e6:	d908      	bls.n	800a2fa <_free_r+0x46>
 800a2e8:	6825      	ldr	r5, [r4, #0]
 800a2ea:	1961      	adds	r1, r4, r5
 800a2ec:	428b      	cmp	r3, r1
 800a2ee:	bf01      	itttt	eq
 800a2f0:	6819      	ldreq	r1, [r3, #0]
 800a2f2:	685b      	ldreq	r3, [r3, #4]
 800a2f4:	1949      	addeq	r1, r1, r5
 800a2f6:	6021      	streq	r1, [r4, #0]
 800a2f8:	e7ed      	b.n	800a2d6 <_free_r+0x22>
 800a2fa:	461a      	mov	r2, r3
 800a2fc:	685b      	ldr	r3, [r3, #4]
 800a2fe:	b10b      	cbz	r3, 800a304 <_free_r+0x50>
 800a300:	42a3      	cmp	r3, r4
 800a302:	d9fa      	bls.n	800a2fa <_free_r+0x46>
 800a304:	6811      	ldr	r1, [r2, #0]
 800a306:	1855      	adds	r5, r2, r1
 800a308:	42a5      	cmp	r5, r4
 800a30a:	d10b      	bne.n	800a324 <_free_r+0x70>
 800a30c:	6824      	ldr	r4, [r4, #0]
 800a30e:	4421      	add	r1, r4
 800a310:	1854      	adds	r4, r2, r1
 800a312:	42a3      	cmp	r3, r4
 800a314:	6011      	str	r1, [r2, #0]
 800a316:	d1e0      	bne.n	800a2da <_free_r+0x26>
 800a318:	681c      	ldr	r4, [r3, #0]
 800a31a:	685b      	ldr	r3, [r3, #4]
 800a31c:	6053      	str	r3, [r2, #4]
 800a31e:	4421      	add	r1, r4
 800a320:	6011      	str	r1, [r2, #0]
 800a322:	e7da      	b.n	800a2da <_free_r+0x26>
 800a324:	d902      	bls.n	800a32c <_free_r+0x78>
 800a326:	230c      	movs	r3, #12
 800a328:	6003      	str	r3, [r0, #0]
 800a32a:	e7d6      	b.n	800a2da <_free_r+0x26>
 800a32c:	6825      	ldr	r5, [r4, #0]
 800a32e:	1961      	adds	r1, r4, r5
 800a330:	428b      	cmp	r3, r1
 800a332:	bf04      	itt	eq
 800a334:	6819      	ldreq	r1, [r3, #0]
 800a336:	685b      	ldreq	r3, [r3, #4]
 800a338:	6063      	str	r3, [r4, #4]
 800a33a:	bf04      	itt	eq
 800a33c:	1949      	addeq	r1, r1, r5
 800a33e:	6021      	streq	r1, [r4, #0]
 800a340:	6054      	str	r4, [r2, #4]
 800a342:	e7ca      	b.n	800a2da <_free_r+0x26>
 800a344:	b003      	add	sp, #12
 800a346:	bd30      	pop	{r4, r5, pc}
 800a348:	200067f8 	.word	0x200067f8

0800a34c <_init>:
 800a34c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a34e:	bf00      	nop
 800a350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a352:	bc08      	pop	{r3}
 800a354:	469e      	mov	lr, r3
 800a356:	4770      	bx	lr

0800a358 <_fini>:
 800a358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a35a:	bf00      	nop
 800a35c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a35e:	bc08      	pop	{r3}
 800a360:	469e      	mov	lr, r3
 800a362:	4770      	bx	lr
