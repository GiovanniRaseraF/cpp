
usbandfreertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007404  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  0800758c  0800758c  0001758c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075f0  080075f0  00020100  2**0
                  CONTENTS
  4 .ARM          00000008  080075f0  080075f0  000175f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080075f8  080075f8  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075f8  080075f8  000175f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080075fc  080075fc  000175fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  08007600  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020100  2**0
                  CONTENTS
 10 .bss          00001c74  20000100  20000100  00020100  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001d74  20001d74  00020100  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 13 .debug_info   000137a2  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fad  00000000  00000000  000338d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010b0  00000000  00000000  00036880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f48  00000000  00000000  00037930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021f65  00000000  00000000  00038878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014c09  00000000  00000000  0005a7dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c1984  00000000  00000000  0006f3e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00130d6a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004518  00000000  00000000  00130dbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000100 	.word	0x20000100
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007574 	.word	0x08007574

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000104 	.word	0x20000104
 80001c4:	08007574 	.word	0x08007574

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b598      	push	{r3, r4, r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f000 fa0e 	bl	8000900 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e4:	f000 f818 	bl	8000518 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e8:	f000 f882 	bl	80005f0 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004ec:	f006 fafc 	bl	8006ae8 <MX_USB_DEVICE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  CDC_Transmit_FS((uint8_t *)tosend, strlen(tosend));
 80004f0:	4b08      	ldr	r3, [pc, #32]	; (8000514 <main+0x38>)
 80004f2:	681c      	ldr	r4, [r3, #0]
 80004f4:	4b07      	ldr	r3, [pc, #28]	; (8000514 <main+0x38>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4618      	mov	r0, r3
 80004fa:	f7ff fe65 	bl	80001c8 <strlen>
 80004fe:	4603      	mov	r3, r0
 8000500:	b29b      	uxth	r3, r3
 8000502:	4619      	mov	r1, r3
 8000504:	4620      	mov	r0, r4
 8000506:	f006 fbad 	bl	8006c64 <CDC_Transmit_FS>
	  HAL_Delay(1000);
 800050a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800050e:	f000 fa39 	bl	8000984 <HAL_Delay>
	  CDC_Transmit_FS((uint8_t *)tosend, strlen(tosend));
 8000512:	e7ed      	b.n	80004f0 <main+0x14>
 8000514:	20000000 	.word	0x20000000

08000518 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b094      	sub	sp, #80	; 0x50
 800051c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051e:	f107 0320 	add.w	r3, r7, #32
 8000522:	2230      	movs	r2, #48	; 0x30
 8000524:	2100      	movs	r1, #0
 8000526:	4618      	mov	r0, r3
 8000528:	f007 f81c 	bl	8007564 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800052c:	f107 030c 	add.w	r3, r7, #12
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]
 8000534:	605a      	str	r2, [r3, #4]
 8000536:	609a      	str	r2, [r3, #8]
 8000538:	60da      	str	r2, [r3, #12]
 800053a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800053c:	2300      	movs	r3, #0
 800053e:	60bb      	str	r3, [r7, #8]
 8000540:	4b29      	ldr	r3, [pc, #164]	; (80005e8 <SystemClock_Config+0xd0>)
 8000542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000544:	4a28      	ldr	r2, [pc, #160]	; (80005e8 <SystemClock_Config+0xd0>)
 8000546:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800054a:	6413      	str	r3, [r2, #64]	; 0x40
 800054c:	4b26      	ldr	r3, [pc, #152]	; (80005e8 <SystemClock_Config+0xd0>)
 800054e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000550:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000554:	60bb      	str	r3, [r7, #8]
 8000556:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000558:	2300      	movs	r3, #0
 800055a:	607b      	str	r3, [r7, #4]
 800055c:	4b23      	ldr	r3, [pc, #140]	; (80005ec <SystemClock_Config+0xd4>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a22      	ldr	r2, [pc, #136]	; (80005ec <SystemClock_Config+0xd4>)
 8000562:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000566:	6013      	str	r3, [r2, #0]
 8000568:	4b20      	ldr	r3, [pc, #128]	; (80005ec <SystemClock_Config+0xd4>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000570:	607b      	str	r3, [r7, #4]
 8000572:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000574:	2303      	movs	r3, #3
 8000576:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000578:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800057c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800057e:	2301      	movs	r3, #1
 8000580:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000582:	2310      	movs	r3, #16
 8000584:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000586:	2302      	movs	r3, #2
 8000588:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800058a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800058e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000590:	2304      	movs	r3, #4
 8000592:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000594:	2348      	movs	r3, #72	; 0x48
 8000596:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000598:	2302      	movs	r3, #2
 800059a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800059c:	2303      	movs	r3, #3
 800059e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a0:	f107 0320 	add.w	r3, r7, #32
 80005a4:	4618      	mov	r0, r3
 80005a6:	f001 ff25 	bl	80023f4 <HAL_RCC_OscConfig>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80005b0:	f000 f880 	bl	80006b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b4:	230f      	movs	r3, #15
 80005b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005b8:	2300      	movs	r3, #0
 80005ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005c8:	f107 030c 	add.w	r3, r7, #12
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f002 f988 	bl	80028e4 <HAL_RCC_ClockConfig>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005da:	f000 f86b 	bl	80006b4 <Error_Handler>
  }
}
 80005de:	bf00      	nop
 80005e0:	3750      	adds	r7, #80	; 0x50
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40023800 	.word	0x40023800
 80005ec:	40007000 	.word	0x40007000

080005f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b088      	sub	sp, #32
 80005f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f6:	f107 030c 	add.w	r3, r7, #12
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	605a      	str	r2, [r3, #4]
 8000600:	609a      	str	r2, [r3, #8]
 8000602:	60da      	str	r2, [r3, #12]
 8000604:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000606:	2300      	movs	r3, #0
 8000608:	60bb      	str	r3, [r7, #8]
 800060a:	4b1f      	ldr	r3, [pc, #124]	; (8000688 <MX_GPIO_Init+0x98>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	4a1e      	ldr	r2, [pc, #120]	; (8000688 <MX_GPIO_Init+0x98>)
 8000610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000614:	6313      	str	r3, [r2, #48]	; 0x30
 8000616:	4b1c      	ldr	r3, [pc, #112]	; (8000688 <MX_GPIO_Init+0x98>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800061e:	60bb      	str	r3, [r7, #8]
 8000620:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000622:	2300      	movs	r3, #0
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	4b18      	ldr	r3, [pc, #96]	; (8000688 <MX_GPIO_Init+0x98>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	4a17      	ldr	r2, [pc, #92]	; (8000688 <MX_GPIO_Init+0x98>)
 800062c:	f043 0301 	orr.w	r3, r3, #1
 8000630:	6313      	str	r3, [r2, #48]	; 0x30
 8000632:	4b15      	ldr	r3, [pc, #84]	; (8000688 <MX_GPIO_Init+0x98>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	f003 0301 	and.w	r3, r3, #1
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800063e:	2300      	movs	r3, #0
 8000640:	603b      	str	r3, [r7, #0]
 8000642:	4b11      	ldr	r3, [pc, #68]	; (8000688 <MX_GPIO_Init+0x98>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	4a10      	ldr	r2, [pc, #64]	; (8000688 <MX_GPIO_Init+0x98>)
 8000648:	f043 0302 	orr.w	r3, r3, #2
 800064c:	6313      	str	r3, [r2, #48]	; 0x30
 800064e:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <MX_GPIO_Init+0x98>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	f003 0302 	and.w	r3, r3, #2
 8000656:	603b      	str	r3, [r7, #0]
 8000658:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 800065a:	2200      	movs	r2, #0
 800065c:	2120      	movs	r1, #32
 800065e:	480b      	ldr	r0, [pc, #44]	; (800068c <MX_GPIO_Init+0x9c>)
 8000660:	f000 fc32 	bl	8000ec8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : led_Pin */
  GPIO_InitStruct.Pin = led_Pin;
 8000664:	2320      	movs	r3, #32
 8000666:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000668:	2301      	movs	r3, #1
 800066a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066c:	2300      	movs	r3, #0
 800066e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000670:	2300      	movs	r3, #0
 8000672:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 8000674:	f107 030c 	add.w	r3, r7, #12
 8000678:	4619      	mov	r1, r3
 800067a:	4804      	ldr	r0, [pc, #16]	; (800068c <MX_GPIO_Init+0x9c>)
 800067c:	f000 fa88 	bl	8000b90 <HAL_GPIO_Init>

}
 8000680:	bf00      	nop
 8000682:	3720      	adds	r7, #32
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40023800 	.word	0x40023800
 800068c:	40020400 	.word	0x40020400

08000690 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a04      	ldr	r2, [pc, #16]	; (80006b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d101      	bne.n	80006a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80006a2:	f000 f94f 	bl	8000944 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80006a6:	bf00      	nop
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40001000 	.word	0x40001000

080006b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006b8:	b672      	cpsid	i
}
 80006ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006bc:	e7fe      	b.n	80006bc <Error_Handler+0x8>
	...

080006c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	607b      	str	r3, [r7, #4]
 80006ca:	4b10      	ldr	r3, [pc, #64]	; (800070c <HAL_MspInit+0x4c>)
 80006cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ce:	4a0f      	ldr	r2, [pc, #60]	; (800070c <HAL_MspInit+0x4c>)
 80006d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006d4:	6453      	str	r3, [r2, #68]	; 0x44
 80006d6:	4b0d      	ldr	r3, [pc, #52]	; (800070c <HAL_MspInit+0x4c>)
 80006d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	603b      	str	r3, [r7, #0]
 80006e6:	4b09      	ldr	r3, [pc, #36]	; (800070c <HAL_MspInit+0x4c>)
 80006e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ea:	4a08      	ldr	r2, [pc, #32]	; (800070c <HAL_MspInit+0x4c>)
 80006ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f0:	6413      	str	r3, [r2, #64]	; 0x40
 80006f2:	4b06      	ldr	r3, [pc, #24]	; (800070c <HAL_MspInit+0x4c>)
 80006f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006fa:	603b      	str	r3, [r7, #0]
 80006fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006fe:	bf00      	nop
 8000700:	370c      	adds	r7, #12
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	40023800 	.word	0x40023800

08000710 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b08e      	sub	sp, #56	; 0x38
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000718:	2300      	movs	r3, #0
 800071a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800071c:	2300      	movs	r3, #0
 800071e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000720:	2300      	movs	r3, #0
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	4b33      	ldr	r3, [pc, #204]	; (80007f4 <HAL_InitTick+0xe4>)
 8000726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000728:	4a32      	ldr	r2, [pc, #200]	; (80007f4 <HAL_InitTick+0xe4>)
 800072a:	f043 0310 	orr.w	r3, r3, #16
 800072e:	6413      	str	r3, [r2, #64]	; 0x40
 8000730:	4b30      	ldr	r3, [pc, #192]	; (80007f4 <HAL_InitTick+0xe4>)
 8000732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000734:	f003 0310 	and.w	r3, r3, #16
 8000738:	60fb      	str	r3, [r7, #12]
 800073a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800073c:	f107 0210 	add.w	r2, r7, #16
 8000740:	f107 0314 	add.w	r3, r7, #20
 8000744:	4611      	mov	r1, r2
 8000746:	4618      	mov	r0, r3
 8000748:	f002 fad8 	bl	8002cfc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800074c:	6a3b      	ldr	r3, [r7, #32]
 800074e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000752:	2b00      	cmp	r3, #0
 8000754:	d103      	bne.n	800075e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000756:	f002 fabd 	bl	8002cd4 <HAL_RCC_GetPCLK1Freq>
 800075a:	6378      	str	r0, [r7, #52]	; 0x34
 800075c:	e004      	b.n	8000768 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800075e:	f002 fab9 	bl	8002cd4 <HAL_RCC_GetPCLK1Freq>
 8000762:	4603      	mov	r3, r0
 8000764:	005b      	lsls	r3, r3, #1
 8000766:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800076a:	4a23      	ldr	r2, [pc, #140]	; (80007f8 <HAL_InitTick+0xe8>)
 800076c:	fba2 2303 	umull	r2, r3, r2, r3
 8000770:	0c9b      	lsrs	r3, r3, #18
 8000772:	3b01      	subs	r3, #1
 8000774:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000776:	4b21      	ldr	r3, [pc, #132]	; (80007fc <HAL_InitTick+0xec>)
 8000778:	4a21      	ldr	r2, [pc, #132]	; (8000800 <HAL_InitTick+0xf0>)
 800077a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800077c:	4b1f      	ldr	r3, [pc, #124]	; (80007fc <HAL_InitTick+0xec>)
 800077e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000782:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000784:	4a1d      	ldr	r2, [pc, #116]	; (80007fc <HAL_InitTick+0xec>)
 8000786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000788:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800078a:	4b1c      	ldr	r3, [pc, #112]	; (80007fc <HAL_InitTick+0xec>)
 800078c:	2200      	movs	r2, #0
 800078e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000790:	4b1a      	ldr	r3, [pc, #104]	; (80007fc <HAL_InitTick+0xec>)
 8000792:	2200      	movs	r2, #0
 8000794:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000796:	4b19      	ldr	r3, [pc, #100]	; (80007fc <HAL_InitTick+0xec>)
 8000798:	2200      	movs	r2, #0
 800079a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800079c:	4817      	ldr	r0, [pc, #92]	; (80007fc <HAL_InitTick+0xec>)
 800079e:	f002 fadf 	bl	8002d60 <HAL_TIM_Base_Init>
 80007a2:	4603      	mov	r3, r0
 80007a4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80007a8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d11b      	bne.n	80007e8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80007b0:	4812      	ldr	r0, [pc, #72]	; (80007fc <HAL_InitTick+0xec>)
 80007b2:	f002 fb2f 	bl	8002e14 <HAL_TIM_Base_Start_IT>
 80007b6:	4603      	mov	r3, r0
 80007b8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80007bc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d111      	bne.n	80007e8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80007c4:	2036      	movs	r0, #54	; 0x36
 80007c6:	f000 f9d5 	bl	8000b74 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	2b0f      	cmp	r3, #15
 80007ce:	d808      	bhi.n	80007e2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80007d0:	2200      	movs	r2, #0
 80007d2:	6879      	ldr	r1, [r7, #4]
 80007d4:	2036      	movs	r0, #54	; 0x36
 80007d6:	f000 f9b1 	bl	8000b3c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007da:	4a0a      	ldr	r2, [pc, #40]	; (8000804 <HAL_InitTick+0xf4>)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	6013      	str	r3, [r2, #0]
 80007e0:	e002      	b.n	80007e8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80007e2:	2301      	movs	r3, #1
 80007e4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80007e8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	3738      	adds	r7, #56	; 0x38
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40023800 	.word	0x40023800
 80007f8:	431bde83 	.word	0x431bde83
 80007fc:	2000011c 	.word	0x2000011c
 8000800:	40001000 	.word	0x40001000
 8000804:	20000008 	.word	0x20000008

08000808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800080c:	e7fe      	b.n	800080c <NMI_Handler+0x4>

0800080e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800080e:	b480      	push	{r7}
 8000810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000812:	e7fe      	b.n	8000812 <HardFault_Handler+0x4>

08000814 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000818:	e7fe      	b.n	8000818 <MemManage_Handler+0x4>

0800081a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800081a:	b480      	push	{r7}
 800081c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800081e:	e7fe      	b.n	800081e <BusFault_Handler+0x4>

08000820 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000824:	e7fe      	b.n	8000824 <UsageFault_Handler+0x4>

08000826 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000826:	b480      	push	{r7}
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800082a:	bf00      	nop
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr

08000834 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000838:	bf00      	nop
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr

08000842 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000842:	b480      	push	{r7}
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000846:	bf00      	nop
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr

08000850 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000854:	bf00      	nop
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
	...

08000860 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000864:	4802      	ldr	r0, [pc, #8]	; (8000870 <TIM6_DAC_IRQHandler+0x10>)
 8000866:	f002 fb45 	bl	8002ef4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	2000011c 	.word	0x2000011c

08000874 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000878:	4802      	ldr	r0, [pc, #8]	; (8000884 <OTG_FS_IRQHandler+0x10>)
 800087a:	f000 fc8e 	bl	800119a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20001648 	.word	0x20001648

08000888 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800088c:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <SystemInit+0x20>)
 800088e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000892:	4a05      	ldr	r2, [pc, #20]	; (80008a8 <SystemInit+0x20>)
 8000894:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000898:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800089c:	bf00      	nop
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	e000ed00 	.word	0xe000ed00

080008ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80008ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008b0:	480d      	ldr	r0, [pc, #52]	; (80008e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80008b2:	490e      	ldr	r1, [pc, #56]	; (80008ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80008b4:	4a0e      	ldr	r2, [pc, #56]	; (80008f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008b8:	e002      	b.n	80008c0 <LoopCopyDataInit>

080008ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008be:	3304      	adds	r3, #4

080008c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008c4:	d3f9      	bcc.n	80008ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008c6:	4a0b      	ldr	r2, [pc, #44]	; (80008f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80008c8:	4c0b      	ldr	r4, [pc, #44]	; (80008f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80008ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008cc:	e001      	b.n	80008d2 <LoopFillZerobss>

080008ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008d0:	3204      	adds	r2, #4

080008d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008d4:	d3fb      	bcc.n	80008ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80008d6:	f7ff ffd7 	bl	8000888 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008da:	f006 fe1f 	bl	800751c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008de:	f7ff fdfd 	bl	80004dc <main>
  bx  lr    
 80008e2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80008e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008ec:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 80008f0:	08007600 	.word	0x08007600
  ldr r2, =_sbss
 80008f4:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 80008f8:	20001d74 	.word	0x20001d74

080008fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008fc:	e7fe      	b.n	80008fc <ADC_IRQHandler>
	...

08000900 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000904:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <HAL_Init+0x40>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a0d      	ldr	r2, [pc, #52]	; (8000940 <HAL_Init+0x40>)
 800090a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800090e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000910:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <HAL_Init+0x40>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a0a      	ldr	r2, [pc, #40]	; (8000940 <HAL_Init+0x40>)
 8000916:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800091a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800091c:	4b08      	ldr	r3, [pc, #32]	; (8000940 <HAL_Init+0x40>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a07      	ldr	r2, [pc, #28]	; (8000940 <HAL_Init+0x40>)
 8000922:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000926:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000928:	2003      	movs	r0, #3
 800092a:	f000 f8fc 	bl	8000b26 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800092e:	200f      	movs	r0, #15
 8000930:	f7ff feee 	bl	8000710 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000934:	f7ff fec4 	bl	80006c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000938:	2300      	movs	r3, #0
}
 800093a:	4618      	mov	r0, r3
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40023c00 	.word	0x40023c00

08000944 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <HAL_IncTick+0x20>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	461a      	mov	r2, r3
 800094e:	4b06      	ldr	r3, [pc, #24]	; (8000968 <HAL_IncTick+0x24>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4413      	add	r3, r2
 8000954:	4a04      	ldr	r2, [pc, #16]	; (8000968 <HAL_IncTick+0x24>)
 8000956:	6013      	str	r3, [r2, #0]
}
 8000958:	bf00      	nop
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	2000000c 	.word	0x2000000c
 8000968:	20000164 	.word	0x20000164

0800096c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  return uwTick;
 8000970:	4b03      	ldr	r3, [pc, #12]	; (8000980 <HAL_GetTick+0x14>)
 8000972:	681b      	ldr	r3, [r3, #0]
}
 8000974:	4618      	mov	r0, r3
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	20000164 	.word	0x20000164

08000984 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800098c:	f7ff ffee 	bl	800096c <HAL_GetTick>
 8000990:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800099c:	d005      	beq.n	80009aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800099e:	4b0a      	ldr	r3, [pc, #40]	; (80009c8 <HAL_Delay+0x44>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	461a      	mov	r2, r3
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	4413      	add	r3, r2
 80009a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80009aa:	bf00      	nop
 80009ac:	f7ff ffde 	bl	800096c <HAL_GetTick>
 80009b0:	4602      	mov	r2, r0
 80009b2:	68bb      	ldr	r3, [r7, #8]
 80009b4:	1ad3      	subs	r3, r2, r3
 80009b6:	68fa      	ldr	r2, [r7, #12]
 80009b8:	429a      	cmp	r2, r3
 80009ba:	d8f7      	bhi.n	80009ac <HAL_Delay+0x28>
  {
  }
}
 80009bc:	bf00      	nop
 80009be:	bf00      	nop
 80009c0:	3710      	adds	r7, #16
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	2000000c 	.word	0x2000000c

080009cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b085      	sub	sp, #20
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	f003 0307 	and.w	r3, r3, #7
 80009da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009dc:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <__NVIC_SetPriorityGrouping+0x44>)
 80009de:	68db      	ldr	r3, [r3, #12]
 80009e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009e2:	68ba      	ldr	r2, [r7, #8]
 80009e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009e8:	4013      	ands	r3, r2
 80009ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009fe:	4a04      	ldr	r2, [pc, #16]	; (8000a10 <__NVIC_SetPriorityGrouping+0x44>)
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	60d3      	str	r3, [r2, #12]
}
 8000a04:	bf00      	nop
 8000a06:	3714      	adds	r7, #20
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr
 8000a10:	e000ed00 	.word	0xe000ed00

08000a14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a18:	4b04      	ldr	r3, [pc, #16]	; (8000a2c <__NVIC_GetPriorityGrouping+0x18>)
 8000a1a:	68db      	ldr	r3, [r3, #12]
 8000a1c:	0a1b      	lsrs	r3, r3, #8
 8000a1e:	f003 0307 	and.w	r3, r3, #7
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr
 8000a2c:	e000ed00 	.word	0xe000ed00

08000a30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	db0b      	blt.n	8000a5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a42:	79fb      	ldrb	r3, [r7, #7]
 8000a44:	f003 021f 	and.w	r2, r3, #31
 8000a48:	4907      	ldr	r1, [pc, #28]	; (8000a68 <__NVIC_EnableIRQ+0x38>)
 8000a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4e:	095b      	lsrs	r3, r3, #5
 8000a50:	2001      	movs	r0, #1
 8000a52:	fa00 f202 	lsl.w	r2, r0, r2
 8000a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a5a:	bf00      	nop
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	e000e100 	.word	0xe000e100

08000a6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	6039      	str	r1, [r7, #0]
 8000a76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	db0a      	blt.n	8000a96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	b2da      	uxtb	r2, r3
 8000a84:	490c      	ldr	r1, [pc, #48]	; (8000ab8 <__NVIC_SetPriority+0x4c>)
 8000a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8a:	0112      	lsls	r2, r2, #4
 8000a8c:	b2d2      	uxtb	r2, r2
 8000a8e:	440b      	add	r3, r1
 8000a90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a94:	e00a      	b.n	8000aac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	b2da      	uxtb	r2, r3
 8000a9a:	4908      	ldr	r1, [pc, #32]	; (8000abc <__NVIC_SetPriority+0x50>)
 8000a9c:	79fb      	ldrb	r3, [r7, #7]
 8000a9e:	f003 030f 	and.w	r3, r3, #15
 8000aa2:	3b04      	subs	r3, #4
 8000aa4:	0112      	lsls	r2, r2, #4
 8000aa6:	b2d2      	uxtb	r2, r2
 8000aa8:	440b      	add	r3, r1
 8000aaa:	761a      	strb	r2, [r3, #24]
}
 8000aac:	bf00      	nop
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	e000e100 	.word	0xe000e100
 8000abc:	e000ed00 	.word	0xe000ed00

08000ac0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b089      	sub	sp, #36	; 0x24
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	60f8      	str	r0, [r7, #12]
 8000ac8:	60b9      	str	r1, [r7, #8]
 8000aca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	f003 0307 	and.w	r3, r3, #7
 8000ad2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ad4:	69fb      	ldr	r3, [r7, #28]
 8000ad6:	f1c3 0307 	rsb	r3, r3, #7
 8000ada:	2b04      	cmp	r3, #4
 8000adc:	bf28      	it	cs
 8000ade:	2304      	movcs	r3, #4
 8000ae0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ae2:	69fb      	ldr	r3, [r7, #28]
 8000ae4:	3304      	adds	r3, #4
 8000ae6:	2b06      	cmp	r3, #6
 8000ae8:	d902      	bls.n	8000af0 <NVIC_EncodePriority+0x30>
 8000aea:	69fb      	ldr	r3, [r7, #28]
 8000aec:	3b03      	subs	r3, #3
 8000aee:	e000      	b.n	8000af2 <NVIC_EncodePriority+0x32>
 8000af0:	2300      	movs	r3, #0
 8000af2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000af8:	69bb      	ldr	r3, [r7, #24]
 8000afa:	fa02 f303 	lsl.w	r3, r2, r3
 8000afe:	43da      	mvns	r2, r3
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	401a      	ands	r2, r3
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b12:	43d9      	mvns	r1, r3
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b18:	4313      	orrs	r3, r2
         );
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3724      	adds	r7, #36	; 0x24
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr

08000b26 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b082      	sub	sp, #8
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b2e:	6878      	ldr	r0, [r7, #4]
 8000b30:	f7ff ff4c 	bl	80009cc <__NVIC_SetPriorityGrouping>
}
 8000b34:	bf00      	nop
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	60b9      	str	r1, [r7, #8]
 8000b46:	607a      	str	r2, [r7, #4]
 8000b48:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b4e:	f7ff ff61 	bl	8000a14 <__NVIC_GetPriorityGrouping>
 8000b52:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b54:	687a      	ldr	r2, [r7, #4]
 8000b56:	68b9      	ldr	r1, [r7, #8]
 8000b58:	6978      	ldr	r0, [r7, #20]
 8000b5a:	f7ff ffb1 	bl	8000ac0 <NVIC_EncodePriority>
 8000b5e:	4602      	mov	r2, r0
 8000b60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b64:	4611      	mov	r1, r2
 8000b66:	4618      	mov	r0, r3
 8000b68:	f7ff ff80 	bl	8000a6c <__NVIC_SetPriority>
}
 8000b6c:	bf00      	nop
 8000b6e:	3718      	adds	r7, #24
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b82:	4618      	mov	r0, r3
 8000b84:	f7ff ff54 	bl	8000a30 <__NVIC_EnableIRQ>
}
 8000b88:	bf00      	nop
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b089      	sub	sp, #36	; 0x24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	61fb      	str	r3, [r7, #28]
 8000baa:	e16b      	b.n	8000e84 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000bac:	2201      	movs	r2, #1
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	697a      	ldr	r2, [r7, #20]
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000bc0:	693a      	ldr	r2, [r7, #16]
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	f040 815a 	bne.w	8000e7e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	f003 0303 	and.w	r3, r3, #3
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d005      	beq.n	8000be2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bde:	2b02      	cmp	r3, #2
 8000be0:	d130      	bne.n	8000c44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	689b      	ldr	r3, [r3, #8]
 8000be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000be8:	69fb      	ldr	r3, [r7, #28]
 8000bea:	005b      	lsls	r3, r3, #1
 8000bec:	2203      	movs	r2, #3
 8000bee:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf2:	43db      	mvns	r3, r3
 8000bf4:	69ba      	ldr	r2, [r7, #24]
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	68da      	ldr	r2, [r3, #12]
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	fa02 f303 	lsl.w	r3, r2, r3
 8000c06:	69ba      	ldr	r2, [r7, #24]
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	69ba      	ldr	r2, [r7, #24]
 8000c10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c18:	2201      	movs	r2, #1
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c20:	43db      	mvns	r3, r3
 8000c22:	69ba      	ldr	r2, [r7, #24]
 8000c24:	4013      	ands	r3, r2
 8000c26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	091b      	lsrs	r3, r3, #4
 8000c2e:	f003 0201 	and.w	r2, r3, #1
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	fa02 f303 	lsl.w	r3, r2, r3
 8000c38:	69ba      	ldr	r2, [r7, #24]
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	69ba      	ldr	r2, [r7, #24]
 8000c42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	f003 0303 	and.w	r3, r3, #3
 8000c4c:	2b03      	cmp	r3, #3
 8000c4e:	d017      	beq.n	8000c80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	68db      	ldr	r3, [r3, #12]
 8000c54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	2203      	movs	r2, #3
 8000c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c60:	43db      	mvns	r3, r3
 8000c62:	69ba      	ldr	r2, [r7, #24]
 8000c64:	4013      	ands	r3, r2
 8000c66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	689a      	ldr	r2, [r3, #8]
 8000c6c:	69fb      	ldr	r3, [r7, #28]
 8000c6e:	005b      	lsls	r3, r3, #1
 8000c70:	fa02 f303 	lsl.w	r3, r2, r3
 8000c74:	69ba      	ldr	r2, [r7, #24]
 8000c76:	4313      	orrs	r3, r2
 8000c78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	69ba      	ldr	r2, [r7, #24]
 8000c7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	f003 0303 	and.w	r3, r3, #3
 8000c88:	2b02      	cmp	r3, #2
 8000c8a:	d123      	bne.n	8000cd4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c8c:	69fb      	ldr	r3, [r7, #28]
 8000c8e:	08da      	lsrs	r2, r3, #3
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	3208      	adds	r2, #8
 8000c94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	f003 0307 	and.w	r3, r3, #7
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	220f      	movs	r2, #15
 8000ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca8:	43db      	mvns	r3, r3
 8000caa:	69ba      	ldr	r2, [r7, #24]
 8000cac:	4013      	ands	r3, r2
 8000cae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	691a      	ldr	r2, [r3, #16]
 8000cb4:	69fb      	ldr	r3, [r7, #28]
 8000cb6:	f003 0307 	and.w	r3, r3, #7
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc0:	69ba      	ldr	r2, [r7, #24]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	08da      	lsrs	r2, r3, #3
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	3208      	adds	r2, #8
 8000cce:	69b9      	ldr	r1, [r7, #24]
 8000cd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	005b      	lsls	r3, r3, #1
 8000cde:	2203      	movs	r2, #3
 8000ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce4:	43db      	mvns	r3, r3
 8000ce6:	69ba      	ldr	r2, [r7, #24]
 8000ce8:	4013      	ands	r3, r2
 8000cea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	f003 0203 	and.w	r2, r3, #3
 8000cf4:	69fb      	ldr	r3, [r7, #28]
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfc:	69ba      	ldr	r2, [r7, #24]
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	69ba      	ldr	r2, [r7, #24]
 8000d06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	f000 80b4 	beq.w	8000e7e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	60fb      	str	r3, [r7, #12]
 8000d1a:	4b60      	ldr	r3, [pc, #384]	; (8000e9c <HAL_GPIO_Init+0x30c>)
 8000d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1e:	4a5f      	ldr	r2, [pc, #380]	; (8000e9c <HAL_GPIO_Init+0x30c>)
 8000d20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d24:	6453      	str	r3, [r2, #68]	; 0x44
 8000d26:	4b5d      	ldr	r3, [pc, #372]	; (8000e9c <HAL_GPIO_Init+0x30c>)
 8000d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d32:	4a5b      	ldr	r2, [pc, #364]	; (8000ea0 <HAL_GPIO_Init+0x310>)
 8000d34:	69fb      	ldr	r3, [r7, #28]
 8000d36:	089b      	lsrs	r3, r3, #2
 8000d38:	3302      	adds	r3, #2
 8000d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	f003 0303 	and.w	r3, r3, #3
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	220f      	movs	r2, #15
 8000d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4e:	43db      	mvns	r3, r3
 8000d50:	69ba      	ldr	r2, [r7, #24]
 8000d52:	4013      	ands	r3, r2
 8000d54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4a52      	ldr	r2, [pc, #328]	; (8000ea4 <HAL_GPIO_Init+0x314>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d02b      	beq.n	8000db6 <HAL_GPIO_Init+0x226>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4a51      	ldr	r2, [pc, #324]	; (8000ea8 <HAL_GPIO_Init+0x318>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d025      	beq.n	8000db2 <HAL_GPIO_Init+0x222>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4a50      	ldr	r2, [pc, #320]	; (8000eac <HAL_GPIO_Init+0x31c>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d01f      	beq.n	8000dae <HAL_GPIO_Init+0x21e>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4a4f      	ldr	r2, [pc, #316]	; (8000eb0 <HAL_GPIO_Init+0x320>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d019      	beq.n	8000daa <HAL_GPIO_Init+0x21a>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4a4e      	ldr	r2, [pc, #312]	; (8000eb4 <HAL_GPIO_Init+0x324>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d013      	beq.n	8000da6 <HAL_GPIO_Init+0x216>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4a4d      	ldr	r2, [pc, #308]	; (8000eb8 <HAL_GPIO_Init+0x328>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d00d      	beq.n	8000da2 <HAL_GPIO_Init+0x212>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4a4c      	ldr	r2, [pc, #304]	; (8000ebc <HAL_GPIO_Init+0x32c>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d007      	beq.n	8000d9e <HAL_GPIO_Init+0x20e>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a4b      	ldr	r2, [pc, #300]	; (8000ec0 <HAL_GPIO_Init+0x330>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d101      	bne.n	8000d9a <HAL_GPIO_Init+0x20a>
 8000d96:	2307      	movs	r3, #7
 8000d98:	e00e      	b.n	8000db8 <HAL_GPIO_Init+0x228>
 8000d9a:	2308      	movs	r3, #8
 8000d9c:	e00c      	b.n	8000db8 <HAL_GPIO_Init+0x228>
 8000d9e:	2306      	movs	r3, #6
 8000da0:	e00a      	b.n	8000db8 <HAL_GPIO_Init+0x228>
 8000da2:	2305      	movs	r3, #5
 8000da4:	e008      	b.n	8000db8 <HAL_GPIO_Init+0x228>
 8000da6:	2304      	movs	r3, #4
 8000da8:	e006      	b.n	8000db8 <HAL_GPIO_Init+0x228>
 8000daa:	2303      	movs	r3, #3
 8000dac:	e004      	b.n	8000db8 <HAL_GPIO_Init+0x228>
 8000dae:	2302      	movs	r3, #2
 8000db0:	e002      	b.n	8000db8 <HAL_GPIO_Init+0x228>
 8000db2:	2301      	movs	r3, #1
 8000db4:	e000      	b.n	8000db8 <HAL_GPIO_Init+0x228>
 8000db6:	2300      	movs	r3, #0
 8000db8:	69fa      	ldr	r2, [r7, #28]
 8000dba:	f002 0203 	and.w	r2, r2, #3
 8000dbe:	0092      	lsls	r2, r2, #2
 8000dc0:	4093      	lsls	r3, r2
 8000dc2:	69ba      	ldr	r2, [r7, #24]
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000dc8:	4935      	ldr	r1, [pc, #212]	; (8000ea0 <HAL_GPIO_Init+0x310>)
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	089b      	lsrs	r3, r3, #2
 8000dce:	3302      	adds	r3, #2
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dd6:	4b3b      	ldr	r3, [pc, #236]	; (8000ec4 <HAL_GPIO_Init+0x334>)
 8000dd8:	689b      	ldr	r3, [r3, #8]
 8000dda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ddc:	693b      	ldr	r3, [r7, #16]
 8000dde:	43db      	mvns	r3, r3
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	4013      	ands	r3, r2
 8000de4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d003      	beq.n	8000dfa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	693b      	ldr	r3, [r7, #16]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000dfa:	4a32      	ldr	r2, [pc, #200]	; (8000ec4 <HAL_GPIO_Init+0x334>)
 8000dfc:	69bb      	ldr	r3, [r7, #24]
 8000dfe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e00:	4b30      	ldr	r3, [pc, #192]	; (8000ec4 <HAL_GPIO_Init+0x334>)
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	43db      	mvns	r3, r3
 8000e0a:	69ba      	ldr	r2, [r7, #24]
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d003      	beq.n	8000e24 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e24:	4a27      	ldr	r2, [pc, #156]	; (8000ec4 <HAL_GPIO_Init+0x334>)
 8000e26:	69bb      	ldr	r3, [r7, #24]
 8000e28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e2a:	4b26      	ldr	r3, [pc, #152]	; (8000ec4 <HAL_GPIO_Init+0x334>)
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	43db      	mvns	r3, r3
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	4013      	ands	r3, r2
 8000e38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d003      	beq.n	8000e4e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000e46:	69ba      	ldr	r2, [r7, #24]
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e4e:	4a1d      	ldr	r2, [pc, #116]	; (8000ec4 <HAL_GPIO_Init+0x334>)
 8000e50:	69bb      	ldr	r3, [r7, #24]
 8000e52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e54:	4b1b      	ldr	r3, [pc, #108]	; (8000ec4 <HAL_GPIO_Init+0x334>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	43db      	mvns	r3, r3
 8000e5e:	69ba      	ldr	r2, [r7, #24]
 8000e60:	4013      	ands	r3, r2
 8000e62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d003      	beq.n	8000e78 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e78:	4a12      	ldr	r2, [pc, #72]	; (8000ec4 <HAL_GPIO_Init+0x334>)
 8000e7a:	69bb      	ldr	r3, [r7, #24]
 8000e7c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	3301      	adds	r3, #1
 8000e82:	61fb      	str	r3, [r7, #28]
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	2b0f      	cmp	r3, #15
 8000e88:	f67f ae90 	bls.w	8000bac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e8c:	bf00      	nop
 8000e8e:	bf00      	nop
 8000e90:	3724      	adds	r7, #36	; 0x24
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	40023800 	.word	0x40023800
 8000ea0:	40013800 	.word	0x40013800
 8000ea4:	40020000 	.word	0x40020000
 8000ea8:	40020400 	.word	0x40020400
 8000eac:	40020800 	.word	0x40020800
 8000eb0:	40020c00 	.word	0x40020c00
 8000eb4:	40021000 	.word	0x40021000
 8000eb8:	40021400 	.word	0x40021400
 8000ebc:	40021800 	.word	0x40021800
 8000ec0:	40021c00 	.word	0x40021c00
 8000ec4:	40013c00 	.word	0x40013c00

08000ec8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	460b      	mov	r3, r1
 8000ed2:	807b      	strh	r3, [r7, #2]
 8000ed4:	4613      	mov	r3, r2
 8000ed6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ed8:	787b      	ldrb	r3, [r7, #1]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d003      	beq.n	8000ee6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ede:	887a      	ldrh	r2, [r7, #2]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000ee4:	e003      	b.n	8000eee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ee6:	887b      	ldrh	r3, [r7, #2]
 8000ee8:	041a      	lsls	r2, r3, #16
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	619a      	str	r2, [r3, #24]
}
 8000eee:	bf00      	nop
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000efa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000efc:	b08f      	sub	sp, #60	; 0x3c
 8000efe:	af0a      	add	r7, sp, #40	; 0x28
 8000f00:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d101      	bne.n	8000f0c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	e10f      	b.n	800112c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d106      	bne.n	8000f2c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2200      	movs	r2, #0
 8000f22:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f005 ffe4 	bl	8006ef4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2203      	movs	r2, #3
 8000f30:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d102      	bne.n	8000f46 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2200      	movs	r2, #0
 8000f44:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f002 facb 	bl	80034e6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	603b      	str	r3, [r7, #0]
 8000f56:	687e      	ldr	r6, [r7, #4]
 8000f58:	466d      	mov	r5, sp
 8000f5a:	f106 0410 	add.w	r4, r6, #16
 8000f5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f66:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000f6a:	e885 0003 	stmia.w	r5, {r0, r1}
 8000f6e:	1d33      	adds	r3, r6, #4
 8000f70:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f72:	6838      	ldr	r0, [r7, #0]
 8000f74:	f002 f9a2 	bl	80032bc <USB_CoreInit>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d005      	beq.n	8000f8a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2202      	movs	r2, #2
 8000f82:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	e0d0      	b.n	800112c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	2100      	movs	r1, #0
 8000f90:	4618      	mov	r0, r3
 8000f92:	f002 fab9 	bl	8003508 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f96:	2300      	movs	r3, #0
 8000f98:	73fb      	strb	r3, [r7, #15]
 8000f9a:	e04a      	b.n	8001032 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000f9c:	7bfa      	ldrb	r2, [r7, #15]
 8000f9e:	6879      	ldr	r1, [r7, #4]
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	00db      	lsls	r3, r3, #3
 8000fa4:	4413      	add	r3, r2
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	440b      	add	r3, r1
 8000faa:	333d      	adds	r3, #61	; 0x3d
 8000fac:	2201      	movs	r2, #1
 8000fae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000fb0:	7bfa      	ldrb	r2, [r7, #15]
 8000fb2:	6879      	ldr	r1, [r7, #4]
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	00db      	lsls	r3, r3, #3
 8000fb8:	4413      	add	r3, r2
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	440b      	add	r3, r1
 8000fbe:	333c      	adds	r3, #60	; 0x3c
 8000fc0:	7bfa      	ldrb	r2, [r7, #15]
 8000fc2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000fc4:	7bfa      	ldrb	r2, [r7, #15]
 8000fc6:	7bfb      	ldrb	r3, [r7, #15]
 8000fc8:	b298      	uxth	r0, r3
 8000fca:	6879      	ldr	r1, [r7, #4]
 8000fcc:	4613      	mov	r3, r2
 8000fce:	00db      	lsls	r3, r3, #3
 8000fd0:	4413      	add	r3, r2
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	440b      	add	r3, r1
 8000fd6:	3344      	adds	r3, #68	; 0x44
 8000fd8:	4602      	mov	r2, r0
 8000fda:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000fdc:	7bfa      	ldrb	r2, [r7, #15]
 8000fde:	6879      	ldr	r1, [r7, #4]
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	00db      	lsls	r3, r3, #3
 8000fe4:	4413      	add	r3, r2
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	440b      	add	r3, r1
 8000fea:	3340      	adds	r3, #64	; 0x40
 8000fec:	2200      	movs	r2, #0
 8000fee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000ff0:	7bfa      	ldrb	r2, [r7, #15]
 8000ff2:	6879      	ldr	r1, [r7, #4]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	00db      	lsls	r3, r3, #3
 8000ff8:	4413      	add	r3, r2
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	440b      	add	r3, r1
 8000ffe:	3348      	adds	r3, #72	; 0x48
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001004:	7bfa      	ldrb	r2, [r7, #15]
 8001006:	6879      	ldr	r1, [r7, #4]
 8001008:	4613      	mov	r3, r2
 800100a:	00db      	lsls	r3, r3, #3
 800100c:	4413      	add	r3, r2
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	440b      	add	r3, r1
 8001012:	334c      	adds	r3, #76	; 0x4c
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001018:	7bfa      	ldrb	r2, [r7, #15]
 800101a:	6879      	ldr	r1, [r7, #4]
 800101c:	4613      	mov	r3, r2
 800101e:	00db      	lsls	r3, r3, #3
 8001020:	4413      	add	r3, r2
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	440b      	add	r3, r1
 8001026:	3354      	adds	r3, #84	; 0x54
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800102c:	7bfb      	ldrb	r3, [r7, #15]
 800102e:	3301      	adds	r3, #1
 8001030:	73fb      	strb	r3, [r7, #15]
 8001032:	7bfa      	ldrb	r2, [r7, #15]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	429a      	cmp	r2, r3
 800103a:	d3af      	bcc.n	8000f9c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800103c:	2300      	movs	r3, #0
 800103e:	73fb      	strb	r3, [r7, #15]
 8001040:	e044      	b.n	80010cc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001042:	7bfa      	ldrb	r2, [r7, #15]
 8001044:	6879      	ldr	r1, [r7, #4]
 8001046:	4613      	mov	r3, r2
 8001048:	00db      	lsls	r3, r3, #3
 800104a:	4413      	add	r3, r2
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	440b      	add	r3, r1
 8001050:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001054:	2200      	movs	r2, #0
 8001056:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001058:	7bfa      	ldrb	r2, [r7, #15]
 800105a:	6879      	ldr	r1, [r7, #4]
 800105c:	4613      	mov	r3, r2
 800105e:	00db      	lsls	r3, r3, #3
 8001060:	4413      	add	r3, r2
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	440b      	add	r3, r1
 8001066:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800106a:	7bfa      	ldrb	r2, [r7, #15]
 800106c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800106e:	7bfa      	ldrb	r2, [r7, #15]
 8001070:	6879      	ldr	r1, [r7, #4]
 8001072:	4613      	mov	r3, r2
 8001074:	00db      	lsls	r3, r3, #3
 8001076:	4413      	add	r3, r2
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	440b      	add	r3, r1
 800107c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001080:	2200      	movs	r2, #0
 8001082:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001084:	7bfa      	ldrb	r2, [r7, #15]
 8001086:	6879      	ldr	r1, [r7, #4]
 8001088:	4613      	mov	r3, r2
 800108a:	00db      	lsls	r3, r3, #3
 800108c:	4413      	add	r3, r2
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	440b      	add	r3, r1
 8001092:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800109a:	7bfa      	ldrb	r2, [r7, #15]
 800109c:	6879      	ldr	r1, [r7, #4]
 800109e:	4613      	mov	r3, r2
 80010a0:	00db      	lsls	r3, r3, #3
 80010a2:	4413      	add	r3, r2
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	440b      	add	r3, r1
 80010a8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80010b0:	7bfa      	ldrb	r2, [r7, #15]
 80010b2:	6879      	ldr	r1, [r7, #4]
 80010b4:	4613      	mov	r3, r2
 80010b6:	00db      	lsls	r3, r3, #3
 80010b8:	4413      	add	r3, r2
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	440b      	add	r3, r1
 80010be:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010c6:	7bfb      	ldrb	r3, [r7, #15]
 80010c8:	3301      	adds	r3, #1
 80010ca:	73fb      	strb	r3, [r7, #15]
 80010cc:	7bfa      	ldrb	r2, [r7, #15]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	429a      	cmp	r2, r3
 80010d4:	d3b5      	bcc.n	8001042 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	603b      	str	r3, [r7, #0]
 80010dc:	687e      	ldr	r6, [r7, #4]
 80010de:	466d      	mov	r5, sp
 80010e0:	f106 0410 	add.w	r4, r6, #16
 80010e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 80010f0:	e885 0003 	stmia.w	r5, {r0, r1}
 80010f4:	1d33      	adds	r3, r6, #4
 80010f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010f8:	6838      	ldr	r0, [r7, #0]
 80010fa:	f002 fa51 	bl	80035a0 <USB_DevInit>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d005      	beq.n	8001110 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2202      	movs	r2, #2
 8001108:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800110c:	2301      	movs	r3, #1
 800110e:	e00d      	b.n	800112c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2200      	movs	r2, #0
 8001114:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2201      	movs	r2, #1
 800111c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4618      	mov	r0, r3
 8001126:	f003 fba0 	bl	800486a <USB_DevDisconnect>

  return HAL_OK;
 800112a:	2300      	movs	r3, #0
}
 800112c:	4618      	mov	r0, r3
 800112e:	3714      	adds	r7, #20
 8001130:	46bd      	mov	sp, r7
 8001132:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001134 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001148:	2b01      	cmp	r3, #1
 800114a:	d101      	bne.n	8001150 <HAL_PCD_Start+0x1c>
 800114c:	2302      	movs	r3, #2
 800114e:	e020      	b.n	8001192 <HAL_PCD_Start+0x5e>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2201      	movs	r2, #1
 8001154:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800115c:	2b01      	cmp	r3, #1
 800115e:	d109      	bne.n	8001174 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001164:	2b01      	cmp	r3, #1
 8001166:	d005      	beq.n	8001174 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800116c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4618      	mov	r0, r3
 800117a:	f002 f9a3 	bl	80034c4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4618      	mov	r0, r3
 8001184:	f003 fb50 	bl	8004828 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2200      	movs	r2, #0
 800118c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001190:	2300      	movs	r3, #0
}
 8001192:	4618      	mov	r0, r3
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800119a:	b590      	push	{r4, r7, lr}
 800119c:	b08d      	sub	sp, #52	; 0x34
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80011a8:	6a3b      	ldr	r3, [r7, #32]
 80011aa:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f003 fc0e 	bl	80049d2 <USB_GetMode>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	f040 848a 	bne.w	8001ad2 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f003 fb72 	bl	80048ac <USB_ReadInterrupts>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	f000 8480 	beq.w	8001ad0 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	0a1b      	lsrs	r3, r3, #8
 80011da:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f003 fb5f 	bl	80048ac <USB_ReadInterrupts>
 80011ee:	4603      	mov	r3, r0
 80011f0:	f003 0302 	and.w	r3, r3, #2
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d107      	bne.n	8001208 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	695a      	ldr	r2, [r3, #20]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f002 0202 	and.w	r2, r2, #2
 8001206:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4618      	mov	r0, r3
 800120e:	f003 fb4d 	bl	80048ac <USB_ReadInterrupts>
 8001212:	4603      	mov	r3, r0
 8001214:	f003 0310 	and.w	r3, r3, #16
 8001218:	2b10      	cmp	r3, #16
 800121a:	d161      	bne.n	80012e0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	699a      	ldr	r2, [r3, #24]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f022 0210 	bic.w	r2, r2, #16
 800122a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800122c:	6a3b      	ldr	r3, [r7, #32]
 800122e:	6a1b      	ldr	r3, [r3, #32]
 8001230:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	f003 020f 	and.w	r2, r3, #15
 8001238:	4613      	mov	r3, r2
 800123a:	00db      	lsls	r3, r3, #3
 800123c:	4413      	add	r3, r2
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	4413      	add	r3, r2
 8001248:	3304      	adds	r3, #4
 800124a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	0c5b      	lsrs	r3, r3, #17
 8001250:	f003 030f 	and.w	r3, r3, #15
 8001254:	2b02      	cmp	r3, #2
 8001256:	d124      	bne.n	80012a2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800125e:	4013      	ands	r3, r2
 8001260:	2b00      	cmp	r3, #0
 8001262:	d035      	beq.n	80012d0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	091b      	lsrs	r3, r3, #4
 800126c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800126e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001272:	b29b      	uxth	r3, r3
 8001274:	461a      	mov	r2, r3
 8001276:	6a38      	ldr	r0, [r7, #32]
 8001278:	f003 f984 	bl	8004584 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	691a      	ldr	r2, [r3, #16]
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	091b      	lsrs	r3, r3, #4
 8001284:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001288:	441a      	add	r2, r3
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	6a1a      	ldr	r2, [r3, #32]
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	091b      	lsrs	r3, r3, #4
 8001296:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800129a:	441a      	add	r2, r3
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	621a      	str	r2, [r3, #32]
 80012a0:	e016      	b.n	80012d0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	0c5b      	lsrs	r3, r3, #17
 80012a6:	f003 030f 	and.w	r3, r3, #15
 80012aa:	2b06      	cmp	r3, #6
 80012ac:	d110      	bne.n	80012d0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80012b4:	2208      	movs	r2, #8
 80012b6:	4619      	mov	r1, r3
 80012b8:	6a38      	ldr	r0, [r7, #32]
 80012ba:	f003 f963 	bl	8004584 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	6a1a      	ldr	r2, [r3, #32]
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	091b      	lsrs	r3, r3, #4
 80012c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012ca:	441a      	add	r2, r3
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	699a      	ldr	r2, [r3, #24]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f042 0210 	orr.w	r2, r2, #16
 80012de:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f003 fae1 	bl	80048ac <USB_ReadInterrupts>
 80012ea:	4603      	mov	r3, r0
 80012ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012f0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80012f4:	f040 80a7 	bne.w	8001446 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80012f8:	2300      	movs	r3, #0
 80012fa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4618      	mov	r0, r3
 8001302:	f003 fae6 	bl	80048d2 <USB_ReadDevAllOutEpInterrupt>
 8001306:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001308:	e099      	b.n	800143e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800130a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800130c:	f003 0301 	and.w	r3, r3, #1
 8001310:	2b00      	cmp	r3, #0
 8001312:	f000 808e 	beq.w	8001432 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800131c:	b2d2      	uxtb	r2, r2
 800131e:	4611      	mov	r1, r2
 8001320:	4618      	mov	r0, r3
 8001322:	f003 fb0a 	bl	800493a <USB_ReadDevOutEPInterrupt>
 8001326:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	2b00      	cmp	r3, #0
 8001330:	d00c      	beq.n	800134c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001334:	015a      	lsls	r2, r3, #5
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	4413      	add	r3, r2
 800133a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800133e:	461a      	mov	r2, r3
 8001340:	2301      	movs	r3, #1
 8001342:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001344:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f000 fec2 	bl	80020d0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	f003 0308 	and.w	r3, r3, #8
 8001352:	2b00      	cmp	r3, #0
 8001354:	d00c      	beq.n	8001370 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001358:	015a      	lsls	r2, r3, #5
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	4413      	add	r3, r2
 800135e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001362:	461a      	mov	r2, r3
 8001364:	2308      	movs	r3, #8
 8001366:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001368:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f000 ff98 	bl	80022a0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	f003 0310 	and.w	r3, r3, #16
 8001376:	2b00      	cmp	r3, #0
 8001378:	d008      	beq.n	800138c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800137a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137c:	015a      	lsls	r2, r3, #5
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	4413      	add	r3, r2
 8001382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001386:	461a      	mov	r2, r3
 8001388:	2310      	movs	r3, #16
 800138a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	2b00      	cmp	r3, #0
 8001394:	d030      	beq.n	80013f8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001396:	6a3b      	ldr	r3, [r7, #32]
 8001398:	695b      	ldr	r3, [r3, #20]
 800139a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800139e:	2b80      	cmp	r3, #128	; 0x80
 80013a0:	d109      	bne.n	80013b6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	69fa      	ldr	r2, [r7, #28]
 80013ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80013b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013b4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80013b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013b8:	4613      	mov	r3, r2
 80013ba:	00db      	lsls	r3, r3, #3
 80013bc:	4413      	add	r3, r2
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	4413      	add	r3, r2
 80013c8:	3304      	adds	r3, #4
 80013ca:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	78db      	ldrb	r3, [r3, #3]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d108      	bne.n	80013e6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	2200      	movs	r2, #0
 80013d8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80013da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	4619      	mov	r1, r3
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f005 fe8d 	bl	8007100 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80013e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e8:	015a      	lsls	r2, r3, #5
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	4413      	add	r3, r2
 80013ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013f2:	461a      	mov	r2, r3
 80013f4:	2302      	movs	r3, #2
 80013f6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	f003 0320 	and.w	r3, r3, #32
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d008      	beq.n	8001414 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001404:	015a      	lsls	r2, r3, #5
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	4413      	add	r3, r2
 800140a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800140e:	461a      	mov	r2, r3
 8001410:	2320      	movs	r3, #32
 8001412:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d009      	beq.n	8001432 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800141e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001420:	015a      	lsls	r2, r3, #5
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	4413      	add	r3, r2
 8001426:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800142a:	461a      	mov	r2, r3
 800142c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001430:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001434:	3301      	adds	r3, #1
 8001436:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800143a:	085b      	lsrs	r3, r3, #1
 800143c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800143e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001440:	2b00      	cmp	r3, #0
 8001442:	f47f af62 	bne.w	800130a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4618      	mov	r0, r3
 800144c:	f003 fa2e 	bl	80048ac <USB_ReadInterrupts>
 8001450:	4603      	mov	r3, r0
 8001452:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001456:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800145a:	f040 80db 	bne.w	8001614 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4618      	mov	r0, r3
 8001464:	f003 fa4f 	bl	8004906 <USB_ReadDevAllInEpInterrupt>
 8001468:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800146a:	2300      	movs	r3, #0
 800146c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800146e:	e0cd      	b.n	800160c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	2b00      	cmp	r3, #0
 8001478:	f000 80c2 	beq.w	8001600 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001482:	b2d2      	uxtb	r2, r2
 8001484:	4611      	mov	r1, r2
 8001486:	4618      	mov	r0, r3
 8001488:	f003 fa75 	bl	8004976 <USB_ReadDevInEPInterrupt>
 800148c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	f003 0301 	and.w	r3, r3, #1
 8001494:	2b00      	cmp	r3, #0
 8001496:	d057      	beq.n	8001548 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149a:	f003 030f 	and.w	r3, r3, #15
 800149e:	2201      	movs	r2, #1
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80014ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	43db      	mvns	r3, r3
 80014b2:	69f9      	ldr	r1, [r7, #28]
 80014b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80014b8:	4013      	ands	r3, r2
 80014ba:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80014bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014be:	015a      	lsls	r2, r3, #5
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	4413      	add	r3, r2
 80014c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014c8:	461a      	mov	r2, r3
 80014ca:	2301      	movs	r3, #1
 80014cc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	691b      	ldr	r3, [r3, #16]
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d132      	bne.n	800153c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80014d6:	6879      	ldr	r1, [r7, #4]
 80014d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014da:	4613      	mov	r3, r2
 80014dc:	00db      	lsls	r3, r3, #3
 80014de:	4413      	add	r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	440b      	add	r3, r1
 80014e4:	334c      	adds	r3, #76	; 0x4c
 80014e6:	6819      	ldr	r1, [r3, #0]
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014ec:	4613      	mov	r3, r2
 80014ee:	00db      	lsls	r3, r3, #3
 80014f0:	4413      	add	r3, r2
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	4403      	add	r3, r0
 80014f6:	3348      	adds	r3, #72	; 0x48
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4419      	add	r1, r3
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001500:	4613      	mov	r3, r2
 8001502:	00db      	lsls	r3, r3, #3
 8001504:	4413      	add	r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	4403      	add	r3, r0
 800150a:	334c      	adds	r3, #76	; 0x4c
 800150c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800150e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001510:	2b00      	cmp	r3, #0
 8001512:	d113      	bne.n	800153c <HAL_PCD_IRQHandler+0x3a2>
 8001514:	6879      	ldr	r1, [r7, #4]
 8001516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001518:	4613      	mov	r3, r2
 800151a:	00db      	lsls	r3, r3, #3
 800151c:	4413      	add	r3, r2
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	440b      	add	r3, r1
 8001522:	3354      	adds	r3, #84	; 0x54
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d108      	bne.n	800153c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6818      	ldr	r0, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001534:	461a      	mov	r2, r3
 8001536:	2101      	movs	r1, #1
 8001538:	f003 fa7c 	bl	8004a34 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800153c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153e:	b2db      	uxtb	r3, r3
 8001540:	4619      	mov	r1, r3
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f005 fd57 	bl	8006ff6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	f003 0308 	and.w	r3, r3, #8
 800154e:	2b00      	cmp	r3, #0
 8001550:	d008      	beq.n	8001564 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001554:	015a      	lsls	r2, r3, #5
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	4413      	add	r3, r2
 800155a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800155e:	461a      	mov	r2, r3
 8001560:	2308      	movs	r3, #8
 8001562:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	f003 0310 	and.w	r3, r3, #16
 800156a:	2b00      	cmp	r3, #0
 800156c:	d008      	beq.n	8001580 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800156e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001570:	015a      	lsls	r2, r3, #5
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	4413      	add	r3, r2
 8001576:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800157a:	461a      	mov	r2, r3
 800157c:	2310      	movs	r3, #16
 800157e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001586:	2b00      	cmp	r3, #0
 8001588:	d008      	beq.n	800159c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800158a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158c:	015a      	lsls	r2, r3, #5
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	4413      	add	r3, r2
 8001592:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001596:	461a      	mov	r2, r3
 8001598:	2340      	movs	r3, #64	; 0x40
 800159a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d023      	beq.n	80015ee <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80015a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015a8:	6a38      	ldr	r0, [r7, #32]
 80015aa:	f002 f95d 	bl	8003868 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80015ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015b0:	4613      	mov	r3, r2
 80015b2:	00db      	lsls	r3, r3, #3
 80015b4:	4413      	add	r3, r2
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	3338      	adds	r3, #56	; 0x38
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	4413      	add	r3, r2
 80015be:	3304      	adds	r3, #4
 80015c0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	78db      	ldrb	r3, [r3, #3]
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d108      	bne.n	80015dc <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	2200      	movs	r2, #0
 80015ce:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80015d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	4619      	mov	r1, r3
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f005 fda4 	bl	8007124 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80015dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015de:	015a      	lsls	r2, r3, #5
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	4413      	add	r3, r2
 80015e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015e8:	461a      	mov	r2, r3
 80015ea:	2302      	movs	r3, #2
 80015ec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d003      	beq.n	8001600 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80015f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f000 fcdb 	bl	8001fb6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001602:	3301      	adds	r3, #1
 8001604:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001608:	085b      	lsrs	r3, r3, #1
 800160a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800160c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800160e:	2b00      	cmp	r3, #0
 8001610:	f47f af2e 	bne.w	8001470 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4618      	mov	r0, r3
 800161a:	f003 f947 	bl	80048ac <USB_ReadInterrupts>
 800161e:	4603      	mov	r3, r0
 8001620:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001624:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001628:	d122      	bne.n	8001670 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	69fa      	ldr	r2, [r7, #28]
 8001634:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001638:	f023 0301 	bic.w	r3, r3, #1
 800163c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001644:	2b01      	cmp	r3, #1
 8001646:	d108      	bne.n	800165a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2200      	movs	r2, #0
 800164c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001650:	2100      	movs	r1, #0
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f000 fec2 	bl	80023dc <HAL_PCDEx_LPM_Callback>
 8001658:	e002      	b.n	8001660 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f005 fd42 	bl	80070e4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	695a      	ldr	r2, [r3, #20]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800166e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4618      	mov	r0, r3
 8001676:	f003 f919 	bl	80048ac <USB_ReadInterrupts>
 800167a:	4603      	mov	r3, r0
 800167c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001680:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001684:	d112      	bne.n	80016ac <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	2b01      	cmp	r3, #1
 8001694:	d102      	bne.n	800169c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f005 fcfe 	bl	8007098 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	695a      	ldr	r2, [r3, #20]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80016aa:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f003 f8fb 	bl	80048ac <USB_ReadInterrupts>
 80016b6:	4603      	mov	r3, r0
 80016b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016c0:	f040 80b7 	bne.w	8001832 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	69fa      	ldr	r2, [r7, #28]
 80016ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016d2:	f023 0301 	bic.w	r3, r3, #1
 80016d6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2110      	movs	r1, #16
 80016de:	4618      	mov	r0, r3
 80016e0:	f002 f8c2 	bl	8003868 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016e4:	2300      	movs	r3, #0
 80016e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016e8:	e046      	b.n	8001778 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80016ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016ec:	015a      	lsls	r2, r3, #5
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	4413      	add	r3, r2
 80016f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016f6:	461a      	mov	r2, r3
 80016f8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80016fc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80016fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001700:	015a      	lsls	r2, r3, #5
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	4413      	add	r3, r2
 8001706:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800170e:	0151      	lsls	r1, r2, #5
 8001710:	69fa      	ldr	r2, [r7, #28]
 8001712:	440a      	add	r2, r1
 8001714:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001718:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800171c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800171e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001720:	015a      	lsls	r2, r3, #5
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	4413      	add	r3, r2
 8001726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800172a:	461a      	mov	r2, r3
 800172c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001730:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001734:	015a      	lsls	r2, r3, #5
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	4413      	add	r3, r2
 800173a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001742:	0151      	lsls	r1, r2, #5
 8001744:	69fa      	ldr	r2, [r7, #28]
 8001746:	440a      	add	r2, r1
 8001748:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800174c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001750:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001754:	015a      	lsls	r2, r3, #5
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	4413      	add	r3, r2
 800175a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001762:	0151      	lsls	r1, r2, #5
 8001764:	69fa      	ldr	r2, [r7, #28]
 8001766:	440a      	add	r2, r1
 8001768:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800176c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001770:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001774:	3301      	adds	r3, #1
 8001776:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800177e:	429a      	cmp	r2, r3
 8001780:	d3b3      	bcc.n	80016ea <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001788:	69db      	ldr	r3, [r3, #28]
 800178a:	69fa      	ldr	r2, [r7, #28]
 800178c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001790:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001794:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	2b00      	cmp	r3, #0
 800179c:	d016      	beq.n	80017cc <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80017a8:	69fa      	ldr	r2, [r7, #28]
 80017aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017ae:	f043 030b 	orr.w	r3, r3, #11
 80017b2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017be:	69fa      	ldr	r2, [r7, #28]
 80017c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017c4:	f043 030b 	orr.w	r3, r3, #11
 80017c8:	6453      	str	r3, [r2, #68]	; 0x44
 80017ca:	e015      	b.n	80017f8 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017d2:	695b      	ldr	r3, [r3, #20]
 80017d4:	69fa      	ldr	r2, [r7, #28]
 80017d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017de:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80017e2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017ea:	691b      	ldr	r3, [r3, #16]
 80017ec:	69fa      	ldr	r2, [r7, #28]
 80017ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017f2:	f043 030b 	orr.w	r3, r3, #11
 80017f6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	69fa      	ldr	r2, [r7, #28]
 8001802:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001806:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800180a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6818      	ldr	r0, [r3, #0]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	691b      	ldr	r3, [r3, #16]
 8001814:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800181c:	461a      	mov	r2, r3
 800181e:	f003 f909 	bl	8004a34 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	695a      	ldr	r2, [r3, #20]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001830:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4618      	mov	r0, r3
 8001838:	f003 f838 	bl	80048ac <USB_ReadInterrupts>
 800183c:	4603      	mov	r3, r0
 800183e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001842:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001846:	d124      	bne.n	8001892 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4618      	mov	r0, r3
 800184e:	f003 f8ce 	bl	80049ee <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4618      	mov	r0, r3
 8001858:	f002 f883 	bl	8003962 <USB_GetDevSpeed>
 800185c:	4603      	mov	r3, r0
 800185e:	461a      	mov	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681c      	ldr	r4, [r3, #0]
 8001868:	f001 fa28 	bl	8002cbc <HAL_RCC_GetHCLKFreq>
 800186c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001872:	b2db      	uxtb	r3, r3
 8001874:	461a      	mov	r2, r3
 8001876:	4620      	mov	r0, r4
 8001878:	f001 fd82 	bl	8003380 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f005 fbe2 	bl	8007046 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	695a      	ldr	r2, [r3, #20]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001890:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4618      	mov	r0, r3
 8001898:	f003 f808 	bl	80048ac <USB_ReadInterrupts>
 800189c:	4603      	mov	r3, r0
 800189e:	f003 0308 	and.w	r3, r3, #8
 80018a2:	2b08      	cmp	r3, #8
 80018a4:	d10a      	bne.n	80018bc <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f005 fbbf 	bl	800702a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	695a      	ldr	r2, [r3, #20]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f002 0208 	and.w	r2, r2, #8
 80018ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f002 fff3 	bl	80048ac <USB_ReadInterrupts>
 80018c6:	4603      	mov	r3, r0
 80018c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018cc:	2b80      	cmp	r3, #128	; 0x80
 80018ce:	d122      	bne.n	8001916 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80018d0:	6a3b      	ldr	r3, [r7, #32]
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80018d8:	6a3b      	ldr	r3, [r7, #32]
 80018da:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80018dc:	2301      	movs	r3, #1
 80018de:	627b      	str	r3, [r7, #36]	; 0x24
 80018e0:	e014      	b.n	800190c <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80018e2:	6879      	ldr	r1, [r7, #4]
 80018e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018e6:	4613      	mov	r3, r2
 80018e8:	00db      	lsls	r3, r3, #3
 80018ea:	4413      	add	r3, r2
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	440b      	add	r3, r1
 80018f0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d105      	bne.n	8001906 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80018fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	4619      	mov	r1, r3
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f000 fb27 	bl	8001f54 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001908:	3301      	adds	r3, #1
 800190a:	627b      	str	r3, [r7, #36]	; 0x24
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001912:	429a      	cmp	r2, r3
 8001914:	d3e5      	bcc.n	80018e2 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f002 ffc6 	bl	80048ac <USB_ReadInterrupts>
 8001920:	4603      	mov	r3, r0
 8001922:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001926:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800192a:	d13b      	bne.n	80019a4 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800192c:	2301      	movs	r3, #1
 800192e:	627b      	str	r3, [r7, #36]	; 0x24
 8001930:	e02b      	b.n	800198a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001934:	015a      	lsls	r2, r3, #5
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	4413      	add	r3, r2
 800193a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001942:	6879      	ldr	r1, [r7, #4]
 8001944:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001946:	4613      	mov	r3, r2
 8001948:	00db      	lsls	r3, r3, #3
 800194a:	4413      	add	r3, r2
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	440b      	add	r3, r1
 8001950:	3340      	adds	r3, #64	; 0x40
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	2b01      	cmp	r3, #1
 8001956:	d115      	bne.n	8001984 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001958:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800195a:	2b00      	cmp	r3, #0
 800195c:	da12      	bge.n	8001984 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800195e:	6879      	ldr	r1, [r7, #4]
 8001960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001962:	4613      	mov	r3, r2
 8001964:	00db      	lsls	r3, r3, #3
 8001966:	4413      	add	r3, r2
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	440b      	add	r3, r1
 800196c:	333f      	adds	r3, #63	; 0x3f
 800196e:	2201      	movs	r2, #1
 8001970:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001974:	b2db      	uxtb	r3, r3
 8001976:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800197a:	b2db      	uxtb	r3, r3
 800197c:	4619      	mov	r1, r3
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f000 fae8 	bl	8001f54 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001986:	3301      	adds	r3, #1
 8001988:	627b      	str	r3, [r7, #36]	; 0x24
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001990:	429a      	cmp	r2, r3
 8001992:	d3ce      	bcc.n	8001932 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	695a      	ldr	r2, [r3, #20]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80019a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f002 ff7f 	bl	80048ac <USB_ReadInterrupts>
 80019ae:	4603      	mov	r3, r0
 80019b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80019b8:	d155      	bne.n	8001a66 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019ba:	2301      	movs	r3, #1
 80019bc:	627b      	str	r3, [r7, #36]	; 0x24
 80019be:	e045      	b.n	8001a4c <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80019c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c2:	015a      	lsls	r2, r3, #5
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	4413      	add	r3, r2
 80019c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80019d0:	6879      	ldr	r1, [r7, #4]
 80019d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019d4:	4613      	mov	r3, r2
 80019d6:	00db      	lsls	r3, r3, #3
 80019d8:	4413      	add	r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	440b      	add	r3, r1
 80019de:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d12e      	bne.n	8001a46 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80019e8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	da2b      	bge.n	8001a46 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80019fa:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d121      	bne.n	8001a46 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001a02:	6879      	ldr	r1, [r7, #4]
 8001a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a06:	4613      	mov	r3, r2
 8001a08:	00db      	lsls	r3, r3, #3
 8001a0a:	4413      	add	r3, r2
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	440b      	add	r3, r1
 8001a10:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001a14:	2201      	movs	r2, #1
 8001a16:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001a18:	6a3b      	ldr	r3, [r7, #32]
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001a20:	6a3b      	ldr	r3, [r7, #32]
 8001a22:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001a24:	6a3b      	ldr	r3, [r7, #32]
 8001a26:	695b      	ldr	r3, [r3, #20]
 8001a28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d10a      	bne.n	8001a46 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	69fa      	ldr	r2, [r7, #28]
 8001a3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a42:	6053      	str	r3, [r2, #4]
            break;
 8001a44:	e007      	b.n	8001a56 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a48:	3301      	adds	r3, #1
 8001a4a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d3b4      	bcc.n	80019c0 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	695a      	ldr	r2, [r3, #20]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001a64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f002 ff1e 	bl	80048ac <USB_ReadInterrupts>
 8001a70:	4603      	mov	r3, r0
 8001a72:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001a76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a7a:	d10a      	bne.n	8001a92 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f005 fb63 	bl	8007148 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	695a      	ldr	r2, [r3, #20]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001a90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f002 ff08 	bl	80048ac <USB_ReadInterrupts>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	f003 0304 	and.w	r3, r3, #4
 8001aa2:	2b04      	cmp	r3, #4
 8001aa4:	d115      	bne.n	8001ad2 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	f003 0304 	and.w	r3, r3, #4
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d002      	beq.n	8001abe <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f005 fb53 	bl	8007164 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	6859      	ldr	r1, [r3, #4]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	430a      	orrs	r2, r1
 8001acc:	605a      	str	r2, [r3, #4]
 8001ace:	e000      	b.n	8001ad2 <HAL_PCD_IRQHandler+0x938>
      return;
 8001ad0:	bf00      	nop
    }
  }
}
 8001ad2:	3734      	adds	r7, #52	; 0x34
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd90      	pop	{r4, r7, pc}

08001ad8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d101      	bne.n	8001af2 <HAL_PCD_SetAddress+0x1a>
 8001aee:	2302      	movs	r3, #2
 8001af0:	e013      	b.n	8001b1a <HAL_PCD_SetAddress+0x42>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2201      	movs	r2, #1
 8001af6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	78fa      	ldrb	r2, [r7, #3]
 8001afe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	78fa      	ldrb	r2, [r7, #3]
 8001b08:	4611      	mov	r1, r2
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f002 fe66 	bl	80047dc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b084      	sub	sp, #16
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
 8001b2a:	4608      	mov	r0, r1
 8001b2c:	4611      	mov	r1, r2
 8001b2e:	461a      	mov	r2, r3
 8001b30:	4603      	mov	r3, r0
 8001b32:	70fb      	strb	r3, [r7, #3]
 8001b34:	460b      	mov	r3, r1
 8001b36:	803b      	strh	r3, [r7, #0]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	da0f      	bge.n	8001b68 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b48:	78fb      	ldrb	r3, [r7, #3]
 8001b4a:	f003 020f 	and.w	r2, r3, #15
 8001b4e:	4613      	mov	r3, r2
 8001b50:	00db      	lsls	r3, r3, #3
 8001b52:	4413      	add	r3, r2
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	3338      	adds	r3, #56	; 0x38
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	3304      	adds	r3, #4
 8001b5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2201      	movs	r2, #1
 8001b64:	705a      	strb	r2, [r3, #1]
 8001b66:	e00f      	b.n	8001b88 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b68:	78fb      	ldrb	r3, [r7, #3]
 8001b6a:	f003 020f 	and.w	r2, r3, #15
 8001b6e:	4613      	mov	r3, r2
 8001b70:	00db      	lsls	r3, r3, #3
 8001b72:	4413      	add	r3, r2
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	3304      	adds	r3, #4
 8001b80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2200      	movs	r2, #0
 8001b86:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001b88:	78fb      	ldrb	r3, [r7, #3]
 8001b8a:	f003 030f 	and.w	r3, r3, #15
 8001b8e:	b2da      	uxtb	r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001b94:	883a      	ldrh	r2, [r7, #0]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	78ba      	ldrb	r2, [r7, #2]
 8001b9e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	785b      	ldrb	r3, [r3, #1]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d004      	beq.n	8001bb2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	b29a      	uxth	r2, r3
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001bb2:	78bb      	ldrb	r3, [r7, #2]
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d102      	bne.n	8001bbe <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d101      	bne.n	8001bcc <HAL_PCD_EP_Open+0xaa>
 8001bc8:	2302      	movs	r3, #2
 8001bca:	e00e      	b.n	8001bea <HAL_PCD_EP_Open+0xc8>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	68f9      	ldr	r1, [r7, #12]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f001 fee6 	bl	80039ac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001be8:	7afb      	ldrb	r3, [r7, #11]
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b084      	sub	sp, #16
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001bfe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	da0f      	bge.n	8001c26 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c06:	78fb      	ldrb	r3, [r7, #3]
 8001c08:	f003 020f 	and.w	r2, r3, #15
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	00db      	lsls	r3, r3, #3
 8001c10:	4413      	add	r3, r2
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	3338      	adds	r3, #56	; 0x38
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	4413      	add	r3, r2
 8001c1a:	3304      	adds	r3, #4
 8001c1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2201      	movs	r2, #1
 8001c22:	705a      	strb	r2, [r3, #1]
 8001c24:	e00f      	b.n	8001c46 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c26:	78fb      	ldrb	r3, [r7, #3]
 8001c28:	f003 020f 	and.w	r2, r3, #15
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	00db      	lsls	r3, r3, #3
 8001c30:	4413      	add	r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	3304      	adds	r3, #4
 8001c3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2200      	movs	r2, #0
 8001c44:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001c46:	78fb      	ldrb	r3, [r7, #3]
 8001c48:	f003 030f 	and.w	r3, r3, #15
 8001c4c:	b2da      	uxtb	r2, r3
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d101      	bne.n	8001c60 <HAL_PCD_EP_Close+0x6e>
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	e00e      	b.n	8001c7e <HAL_PCD_EP_Close+0x8c>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	68f9      	ldr	r1, [r7, #12]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f001 ff24 	bl	8003abc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b086      	sub	sp, #24
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	60f8      	str	r0, [r7, #12]
 8001c8e:	607a      	str	r2, [r7, #4]
 8001c90:	603b      	str	r3, [r7, #0]
 8001c92:	460b      	mov	r3, r1
 8001c94:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c96:	7afb      	ldrb	r3, [r7, #11]
 8001c98:	f003 020f 	and.w	r2, r3, #15
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	00db      	lsls	r3, r3, #3
 8001ca0:	4413      	add	r3, r2
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001ca8:	68fa      	ldr	r2, [r7, #12]
 8001caa:	4413      	add	r3, r2
 8001cac:	3304      	adds	r3, #4
 8001cae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cc8:	7afb      	ldrb	r3, [r7, #11]
 8001cca:	f003 030f 	and.w	r3, r3, #15
 8001cce:	b2da      	uxtb	r2, r3
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	691b      	ldr	r3, [r3, #16]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d102      	bne.n	8001ce2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ce2:	7afb      	ldrb	r3, [r7, #11]
 8001ce4:	f003 030f 	and.w	r3, r3, #15
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d109      	bne.n	8001d00 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	6818      	ldr	r0, [r3, #0]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	691b      	ldr	r3, [r3, #16]
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	6979      	ldr	r1, [r7, #20]
 8001cfa:	f002 fa03 	bl	8004104 <USB_EP0StartXfer>
 8001cfe:	e008      	b.n	8001d12 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	6818      	ldr	r0, [r3, #0]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	691b      	ldr	r3, [r3, #16]
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	6979      	ldr	r1, [r7, #20]
 8001d0e:	f001 ffb1 	bl	8003c74 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001d12:	2300      	movs	r3, #0
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3718      	adds	r7, #24
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	460b      	mov	r3, r1
 8001d26:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001d28:	78fb      	ldrb	r3, [r7, #3]
 8001d2a:	f003 020f 	and.w	r2, r3, #15
 8001d2e:	6879      	ldr	r1, [r7, #4]
 8001d30:	4613      	mov	r3, r2
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	4413      	add	r3, r2
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	440b      	add	r3, r1
 8001d3a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8001d3e:	681b      	ldr	r3, [r3, #0]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	607a      	str	r2, [r7, #4]
 8001d56:	603b      	str	r3, [r7, #0]
 8001d58:	460b      	mov	r3, r1
 8001d5a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d5c:	7afb      	ldrb	r3, [r7, #11]
 8001d5e:	f003 020f 	and.w	r2, r3, #15
 8001d62:	4613      	mov	r3, r2
 8001d64:	00db      	lsls	r3, r3, #3
 8001d66:	4413      	add	r3, r2
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	3338      	adds	r3, #56	; 0x38
 8001d6c:	68fa      	ldr	r2, [r7, #12]
 8001d6e:	4413      	add	r3, r2
 8001d70:	3304      	adds	r3, #4
 8001d72:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	683a      	ldr	r2, [r7, #0]
 8001d7e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	2200      	movs	r2, #0
 8001d84:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	2201      	movs	r2, #1
 8001d8a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d8c:	7afb      	ldrb	r3, [r7, #11]
 8001d8e:	f003 030f 	and.w	r3, r3, #15
 8001d92:	b2da      	uxtb	r2, r3
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	691b      	ldr	r3, [r3, #16]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d102      	bne.n	8001da6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001da6:	7afb      	ldrb	r3, [r7, #11]
 8001da8:	f003 030f 	and.w	r3, r3, #15
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d109      	bne.n	8001dc4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	6818      	ldr	r0, [r3, #0]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	691b      	ldr	r3, [r3, #16]
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	461a      	mov	r2, r3
 8001dbc:	6979      	ldr	r1, [r7, #20]
 8001dbe:	f002 f9a1 	bl	8004104 <USB_EP0StartXfer>
 8001dc2:	e008      	b.n	8001dd6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	6818      	ldr	r0, [r3, #0]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	691b      	ldr	r3, [r3, #16]
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	461a      	mov	r2, r3
 8001dd0:	6979      	ldr	r1, [r7, #20]
 8001dd2:	f001 ff4f 	bl	8003c74 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001dd6:	2300      	movs	r3, #0
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3718      	adds	r7, #24
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	460b      	mov	r3, r1
 8001dea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001dec:	78fb      	ldrb	r3, [r7, #3]
 8001dee:	f003 020f 	and.w	r2, r3, #15
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d901      	bls.n	8001dfe <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e050      	b.n	8001ea0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001dfe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	da0f      	bge.n	8001e26 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e06:	78fb      	ldrb	r3, [r7, #3]
 8001e08:	f003 020f 	and.w	r2, r3, #15
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	00db      	lsls	r3, r3, #3
 8001e10:	4413      	add	r3, r2
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	3338      	adds	r3, #56	; 0x38
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	4413      	add	r3, r2
 8001e1a:	3304      	adds	r3, #4
 8001e1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2201      	movs	r2, #1
 8001e22:	705a      	strb	r2, [r3, #1]
 8001e24:	e00d      	b.n	8001e42 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001e26:	78fa      	ldrb	r2, [r7, #3]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	4413      	add	r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	4413      	add	r3, r2
 8001e38:	3304      	adds	r3, #4
 8001e3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2201      	movs	r2, #1
 8001e46:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e48:	78fb      	ldrb	r3, [r7, #3]
 8001e4a:	f003 030f 	and.w	r3, r3, #15
 8001e4e:	b2da      	uxtb	r2, r3
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d101      	bne.n	8001e62 <HAL_PCD_EP_SetStall+0x82>
 8001e5e:	2302      	movs	r3, #2
 8001e60:	e01e      	b.n	8001ea0 <HAL_PCD_EP_SetStall+0xc0>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2201      	movs	r2, #1
 8001e66:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	68f9      	ldr	r1, [r7, #12]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f002 fbdf 	bl	8004634 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e76:	78fb      	ldrb	r3, [r7, #3]
 8001e78:	f003 030f 	and.w	r3, r3, #15
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d10a      	bne.n	8001e96 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6818      	ldr	r0, [r3, #0]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	691b      	ldr	r3, [r3, #16]
 8001e88:	b2d9      	uxtb	r1, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001e90:	461a      	mov	r2, r3
 8001e92:	f002 fdcf 	bl	8004a34 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3710      	adds	r7, #16
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001eb4:	78fb      	ldrb	r3, [r7, #3]
 8001eb6:	f003 020f 	and.w	r2, r3, #15
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d901      	bls.n	8001ec6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e042      	b.n	8001f4c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ec6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	da0f      	bge.n	8001eee <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ece:	78fb      	ldrb	r3, [r7, #3]
 8001ed0:	f003 020f 	and.w	r2, r3, #15
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	4413      	add	r3, r2
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	3338      	adds	r3, #56	; 0x38
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	3304      	adds	r3, #4
 8001ee4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	705a      	strb	r2, [r3, #1]
 8001eec:	e00f      	b.n	8001f0e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001eee:	78fb      	ldrb	r3, [r7, #3]
 8001ef0:	f003 020f 	and.w	r2, r3, #15
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	00db      	lsls	r3, r3, #3
 8001ef8:	4413      	add	r3, r2
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	4413      	add	r3, r2
 8001f04:	3304      	adds	r3, #4
 8001f06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2200      	movs	r2, #0
 8001f12:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f14:	78fb      	ldrb	r3, [r7, #3]
 8001f16:	f003 030f 	and.w	r3, r3, #15
 8001f1a:	b2da      	uxtb	r2, r3
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d101      	bne.n	8001f2e <HAL_PCD_EP_ClrStall+0x86>
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	e00e      	b.n	8001f4c <HAL_PCD_EP_ClrStall+0xa4>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2201      	movs	r2, #1
 8001f32:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	68f9      	ldr	r1, [r7, #12]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f002 fbe7 	bl	8004710 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3710      	adds	r7, #16
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001f60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	da0c      	bge.n	8001f82 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f68:	78fb      	ldrb	r3, [r7, #3]
 8001f6a:	f003 020f 	and.w	r2, r3, #15
 8001f6e:	4613      	mov	r3, r2
 8001f70:	00db      	lsls	r3, r3, #3
 8001f72:	4413      	add	r3, r2
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	3338      	adds	r3, #56	; 0x38
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	3304      	adds	r3, #4
 8001f7e:	60fb      	str	r3, [r7, #12]
 8001f80:	e00c      	b.n	8001f9c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f82:	78fb      	ldrb	r3, [r7, #3]
 8001f84:	f003 020f 	and.w	r2, r3, #15
 8001f88:	4613      	mov	r3, r2
 8001f8a:	00db      	lsls	r3, r3, #3
 8001f8c:	4413      	add	r3, r2
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	4413      	add	r3, r2
 8001f98:	3304      	adds	r3, #4
 8001f9a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	68f9      	ldr	r1, [r7, #12]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f002 fa06 	bl	80043b4 <USB_EPStopXfer>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001fac:	7afb      	ldrb	r3, [r7, #11]
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b08a      	sub	sp, #40	; 0x28
 8001fba:	af02      	add	r7, sp, #8
 8001fbc:	6078      	str	r0, [r7, #4]
 8001fbe:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001fca:	683a      	ldr	r2, [r7, #0]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	4413      	add	r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	3338      	adds	r3, #56	; 0x38
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	4413      	add	r3, r2
 8001fda:	3304      	adds	r3, #4
 8001fdc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	6a1a      	ldr	r2, [r3, #32]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d901      	bls.n	8001fee <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e06c      	b.n	80020c8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	699a      	ldr	r2, [r3, #24]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	6a1b      	ldr	r3, [r3, #32]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	69fa      	ldr	r2, [r7, #28]
 8002000:	429a      	cmp	r2, r3
 8002002:	d902      	bls.n	800200a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	3303      	adds	r3, #3
 800200e:	089b      	lsrs	r3, r3, #2
 8002010:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002012:	e02b      	b.n	800206c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	699a      	ldr	r2, [r3, #24]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6a1b      	ldr	r3, [r3, #32]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	69fa      	ldr	r2, [r7, #28]
 8002026:	429a      	cmp	r2, r3
 8002028:	d902      	bls.n	8002030 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	3303      	adds	r3, #3
 8002034:	089b      	lsrs	r3, r3, #2
 8002036:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6919      	ldr	r1, [r3, #16]
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	b2da      	uxtb	r2, r3
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002048:	b2db      	uxtb	r3, r3
 800204a:	9300      	str	r3, [sp, #0]
 800204c:	4603      	mov	r3, r0
 800204e:	6978      	ldr	r0, [r7, #20]
 8002050:	f002 fa5a 	bl	8004508 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	691a      	ldr	r2, [r3, #16]
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	441a      	add	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6a1a      	ldr	r2, [r3, #32]
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	441a      	add	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	015a      	lsls	r2, r3, #5
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	4413      	add	r3, r2
 8002074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	b29b      	uxth	r3, r3
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	429a      	cmp	r2, r3
 8002080:	d809      	bhi.n	8002096 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	6a1a      	ldr	r2, [r3, #32]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800208a:	429a      	cmp	r2, r3
 800208c:	d203      	bcs.n	8002096 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d1be      	bne.n	8002014 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	699a      	ldr	r2, [r3, #24]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6a1b      	ldr	r3, [r3, #32]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d811      	bhi.n	80020c6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	f003 030f 	and.w	r3, r3, #15
 80020a8:	2201      	movs	r2, #1
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	43db      	mvns	r3, r3
 80020bc:	6939      	ldr	r1, [r7, #16]
 80020be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80020c2:	4013      	ands	r3, r2
 80020c4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80020c6:	2300      	movs	r3, #0
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3720      	adds	r7, #32
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b088      	sub	sp, #32
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	333c      	adds	r3, #60	; 0x3c
 80020e8:	3304      	adds	r3, #4
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	015a      	lsls	r2, r3, #5
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	4413      	add	r3, r2
 80020f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d17b      	bne.n	80021fe <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	f003 0308 	and.w	r3, r3, #8
 800210c:	2b00      	cmp	r3, #0
 800210e:	d015      	beq.n	800213c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	4a61      	ldr	r2, [pc, #388]	; (8002298 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002114:	4293      	cmp	r3, r2
 8002116:	f240 80b9 	bls.w	800228c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002120:	2b00      	cmp	r3, #0
 8002122:	f000 80b3 	beq.w	800228c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	015a      	lsls	r2, r3, #5
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	4413      	add	r3, r2
 800212e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002132:	461a      	mov	r2, r3
 8002134:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002138:	6093      	str	r3, [r2, #8]
 800213a:	e0a7      	b.n	800228c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	f003 0320 	and.w	r3, r3, #32
 8002142:	2b00      	cmp	r3, #0
 8002144:	d009      	beq.n	800215a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	015a      	lsls	r2, r3, #5
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	4413      	add	r3, r2
 800214e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002152:	461a      	mov	r2, r3
 8002154:	2320      	movs	r3, #32
 8002156:	6093      	str	r3, [r2, #8]
 8002158:	e098      	b.n	800228c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002160:	2b00      	cmp	r3, #0
 8002162:	f040 8093 	bne.w	800228c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	4a4b      	ldr	r2, [pc, #300]	; (8002298 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d90f      	bls.n	800218e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002174:	2b00      	cmp	r3, #0
 8002176:	d00a      	beq.n	800218e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	015a      	lsls	r2, r3, #5
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	4413      	add	r3, r2
 8002180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002184:	461a      	mov	r2, r3
 8002186:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800218a:	6093      	str	r3, [r2, #8]
 800218c:	e07e      	b.n	800228c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800218e:	683a      	ldr	r2, [r7, #0]
 8002190:	4613      	mov	r3, r2
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	4413      	add	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	4413      	add	r3, r2
 80021a0:	3304      	adds	r3, #4
 80021a2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	69da      	ldr	r2, [r3, #28]
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	0159      	lsls	r1, r3, #5
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	440b      	add	r3, r1
 80021b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ba:	1ad2      	subs	r2, r2, r3
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d114      	bne.n	80021f0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d109      	bne.n	80021e2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6818      	ldr	r0, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80021d8:	461a      	mov	r2, r3
 80021da:	2101      	movs	r1, #1
 80021dc:	f002 fc2a 	bl	8004a34 <USB_EP0_OutStart>
 80021e0:	e006      	b.n	80021f0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	691a      	ldr	r2, [r3, #16]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	6a1b      	ldr	r3, [r3, #32]
 80021ea:	441a      	add	r2, r3
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	4619      	mov	r1, r3
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f004 fee2 	bl	8006fc0 <HAL_PCD_DataOutStageCallback>
 80021fc:	e046      	b.n	800228c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	4a26      	ldr	r2, [pc, #152]	; (800229c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d124      	bne.n	8002250 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d00a      	beq.n	8002226 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	015a      	lsls	r2, r3, #5
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	4413      	add	r3, r2
 8002218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800221c:	461a      	mov	r2, r3
 800221e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002222:	6093      	str	r3, [r2, #8]
 8002224:	e032      	b.n	800228c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	f003 0320 	and.w	r3, r3, #32
 800222c:	2b00      	cmp	r3, #0
 800222e:	d008      	beq.n	8002242 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	015a      	lsls	r2, r3, #5
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	4413      	add	r3, r2
 8002238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800223c:	461a      	mov	r2, r3
 800223e:	2320      	movs	r3, #32
 8002240:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	b2db      	uxtb	r3, r3
 8002246:	4619      	mov	r1, r3
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f004 feb9 	bl	8006fc0 <HAL_PCD_DataOutStageCallback>
 800224e:	e01d      	b.n	800228c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d114      	bne.n	8002280 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002256:	6879      	ldr	r1, [r7, #4]
 8002258:	683a      	ldr	r2, [r7, #0]
 800225a:	4613      	mov	r3, r2
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	4413      	add	r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	440b      	add	r3, r1
 8002264:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d108      	bne.n	8002280 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6818      	ldr	r0, [r3, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002278:	461a      	mov	r2, r3
 800227a:	2100      	movs	r1, #0
 800227c:	f002 fbda 	bl	8004a34 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	b2db      	uxtb	r3, r3
 8002284:	4619      	mov	r1, r3
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f004 fe9a 	bl	8006fc0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	3720      	adds	r7, #32
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	4f54300a 	.word	0x4f54300a
 800229c:	4f54310a 	.word	0x4f54310a

080022a0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	333c      	adds	r3, #60	; 0x3c
 80022b8:	3304      	adds	r3, #4
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	015a      	lsls	r2, r3, #5
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	4413      	add	r3, r2
 80022c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	4a15      	ldr	r2, [pc, #84]	; (8002328 <PCD_EP_OutSetupPacket_int+0x88>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d90e      	bls.n	80022f4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d009      	beq.n	80022f4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	015a      	lsls	r2, r3, #5
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	4413      	add	r3, r2
 80022e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022ec:	461a      	mov	r2, r3
 80022ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022f2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f004 fe51 	bl	8006f9c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	4a0a      	ldr	r2, [pc, #40]	; (8002328 <PCD_EP_OutSetupPacket_int+0x88>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d90c      	bls.n	800231c <PCD_EP_OutSetupPacket_int+0x7c>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d108      	bne.n	800231c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6818      	ldr	r0, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002314:	461a      	mov	r2, r3
 8002316:	2101      	movs	r1, #1
 8002318:	f002 fb8c 	bl	8004a34 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	3718      	adds	r7, #24
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	4f54300a 	.word	0x4f54300a

0800232c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800232c:	b480      	push	{r7}
 800232e:	b085      	sub	sp, #20
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	460b      	mov	r3, r1
 8002336:	70fb      	strb	r3, [r7, #3]
 8002338:	4613      	mov	r3, r2
 800233a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002342:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002344:	78fb      	ldrb	r3, [r7, #3]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d107      	bne.n	800235a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800234a:	883b      	ldrh	r3, [r7, #0]
 800234c:	0419      	lsls	r1, r3, #16
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	68ba      	ldr	r2, [r7, #8]
 8002354:	430a      	orrs	r2, r1
 8002356:	629a      	str	r2, [r3, #40]	; 0x28
 8002358:	e028      	b.n	80023ac <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002360:	0c1b      	lsrs	r3, r3, #16
 8002362:	68ba      	ldr	r2, [r7, #8]
 8002364:	4413      	add	r3, r2
 8002366:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002368:	2300      	movs	r3, #0
 800236a:	73fb      	strb	r3, [r7, #15]
 800236c:	e00d      	b.n	800238a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	7bfb      	ldrb	r3, [r7, #15]
 8002374:	3340      	adds	r3, #64	; 0x40
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	4413      	add	r3, r2
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	0c1b      	lsrs	r3, r3, #16
 800237e:	68ba      	ldr	r2, [r7, #8]
 8002380:	4413      	add	r3, r2
 8002382:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002384:	7bfb      	ldrb	r3, [r7, #15]
 8002386:	3301      	adds	r3, #1
 8002388:	73fb      	strb	r3, [r7, #15]
 800238a:	7bfa      	ldrb	r2, [r7, #15]
 800238c:	78fb      	ldrb	r3, [r7, #3]
 800238e:	3b01      	subs	r3, #1
 8002390:	429a      	cmp	r2, r3
 8002392:	d3ec      	bcc.n	800236e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002394:	883b      	ldrh	r3, [r7, #0]
 8002396:	0418      	lsls	r0, r3, #16
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6819      	ldr	r1, [r3, #0]
 800239c:	78fb      	ldrb	r3, [r7, #3]
 800239e:	3b01      	subs	r3, #1
 80023a0:	68ba      	ldr	r2, [r7, #8]
 80023a2:	4302      	orrs	r2, r0
 80023a4:	3340      	adds	r3, #64	; 0x40
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	440b      	add	r3, r1
 80023aa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3714      	adds	r7, #20
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr

080023ba <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80023ba:	b480      	push	{r7}
 80023bc:	b083      	sub	sp, #12
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
 80023c2:	460b      	mov	r3, r1
 80023c4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	887a      	ldrh	r2, [r7, #2]
 80023cc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	460b      	mov	r3, r1
 80023e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b086      	sub	sp, #24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d101      	bne.n	8002406 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e267      	b.n	80028d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b00      	cmp	r3, #0
 8002410:	d075      	beq.n	80024fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002412:	4b88      	ldr	r3, [pc, #544]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f003 030c 	and.w	r3, r3, #12
 800241a:	2b04      	cmp	r3, #4
 800241c:	d00c      	beq.n	8002438 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800241e:	4b85      	ldr	r3, [pc, #532]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002426:	2b08      	cmp	r3, #8
 8002428:	d112      	bne.n	8002450 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800242a:	4b82      	ldr	r3, [pc, #520]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002432:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002436:	d10b      	bne.n	8002450 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002438:	4b7e      	ldr	r3, [pc, #504]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d05b      	beq.n	80024fc <HAL_RCC_OscConfig+0x108>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d157      	bne.n	80024fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e242      	b.n	80028d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002458:	d106      	bne.n	8002468 <HAL_RCC_OscConfig+0x74>
 800245a:	4b76      	ldr	r3, [pc, #472]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a75      	ldr	r2, [pc, #468]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 8002460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002464:	6013      	str	r3, [r2, #0]
 8002466:	e01d      	b.n	80024a4 <HAL_RCC_OscConfig+0xb0>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002470:	d10c      	bne.n	800248c <HAL_RCC_OscConfig+0x98>
 8002472:	4b70      	ldr	r3, [pc, #448]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a6f      	ldr	r2, [pc, #444]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 8002478:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800247c:	6013      	str	r3, [r2, #0]
 800247e:	4b6d      	ldr	r3, [pc, #436]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a6c      	ldr	r2, [pc, #432]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 8002484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002488:	6013      	str	r3, [r2, #0]
 800248a:	e00b      	b.n	80024a4 <HAL_RCC_OscConfig+0xb0>
 800248c:	4b69      	ldr	r3, [pc, #420]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a68      	ldr	r2, [pc, #416]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 8002492:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002496:	6013      	str	r3, [r2, #0]
 8002498:	4b66      	ldr	r3, [pc, #408]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a65      	ldr	r2, [pc, #404]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 800249e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d013      	beq.n	80024d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ac:	f7fe fa5e 	bl	800096c <HAL_GetTick>
 80024b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024b2:	e008      	b.n	80024c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024b4:	f7fe fa5a 	bl	800096c <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b64      	cmp	r3, #100	; 0x64
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e207      	b.n	80028d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024c6:	4b5b      	ldr	r3, [pc, #364]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d0f0      	beq.n	80024b4 <HAL_RCC_OscConfig+0xc0>
 80024d2:	e014      	b.n	80024fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d4:	f7fe fa4a 	bl	800096c <HAL_GetTick>
 80024d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024da:	e008      	b.n	80024ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024dc:	f7fe fa46 	bl	800096c <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b64      	cmp	r3, #100	; 0x64
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e1f3      	b.n	80028d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ee:	4b51      	ldr	r3, [pc, #324]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d1f0      	bne.n	80024dc <HAL_RCC_OscConfig+0xe8>
 80024fa:	e000      	b.n	80024fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d063      	beq.n	80025d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800250a:	4b4a      	ldr	r3, [pc, #296]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f003 030c 	and.w	r3, r3, #12
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00b      	beq.n	800252e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002516:	4b47      	ldr	r3, [pc, #284]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800251e:	2b08      	cmp	r3, #8
 8002520:	d11c      	bne.n	800255c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002522:	4b44      	ldr	r3, [pc, #272]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d116      	bne.n	800255c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800252e:	4b41      	ldr	r3, [pc, #260]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d005      	beq.n	8002546 <HAL_RCC_OscConfig+0x152>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d001      	beq.n	8002546 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e1c7      	b.n	80028d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002546:	4b3b      	ldr	r3, [pc, #236]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	4937      	ldr	r1, [pc, #220]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 8002556:	4313      	orrs	r3, r2
 8002558:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800255a:	e03a      	b.n	80025d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d020      	beq.n	80025a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002564:	4b34      	ldr	r3, [pc, #208]	; (8002638 <HAL_RCC_OscConfig+0x244>)
 8002566:	2201      	movs	r2, #1
 8002568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800256a:	f7fe f9ff 	bl	800096c <HAL_GetTick>
 800256e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002570:	e008      	b.n	8002584 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002572:	f7fe f9fb 	bl	800096c <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	2b02      	cmp	r3, #2
 800257e:	d901      	bls.n	8002584 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e1a8      	b.n	80028d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002584:	4b2b      	ldr	r3, [pc, #172]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0302 	and.w	r3, r3, #2
 800258c:	2b00      	cmp	r3, #0
 800258e:	d0f0      	beq.n	8002572 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002590:	4b28      	ldr	r3, [pc, #160]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	691b      	ldr	r3, [r3, #16]
 800259c:	00db      	lsls	r3, r3, #3
 800259e:	4925      	ldr	r1, [pc, #148]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	600b      	str	r3, [r1, #0]
 80025a4:	e015      	b.n	80025d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025a6:	4b24      	ldr	r3, [pc, #144]	; (8002638 <HAL_RCC_OscConfig+0x244>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ac:	f7fe f9de 	bl	800096c <HAL_GetTick>
 80025b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025b2:	e008      	b.n	80025c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025b4:	f7fe f9da 	bl	800096c <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e187      	b.n	80028d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025c6:	4b1b      	ldr	r3, [pc, #108]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1f0      	bne.n	80025b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0308 	and.w	r3, r3, #8
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d036      	beq.n	800264c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	695b      	ldr	r3, [r3, #20]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d016      	beq.n	8002614 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025e6:	4b15      	ldr	r3, [pc, #84]	; (800263c <HAL_RCC_OscConfig+0x248>)
 80025e8:	2201      	movs	r2, #1
 80025ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ec:	f7fe f9be 	bl	800096c <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025f4:	f7fe f9ba 	bl	800096c <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e167      	b.n	80028d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002606:	4b0b      	ldr	r3, [pc, #44]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 8002608:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d0f0      	beq.n	80025f4 <HAL_RCC_OscConfig+0x200>
 8002612:	e01b      	b.n	800264c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002614:	4b09      	ldr	r3, [pc, #36]	; (800263c <HAL_RCC_OscConfig+0x248>)
 8002616:	2200      	movs	r2, #0
 8002618:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800261a:	f7fe f9a7 	bl	800096c <HAL_GetTick>
 800261e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002620:	e00e      	b.n	8002640 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002622:	f7fe f9a3 	bl	800096c <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	2b02      	cmp	r3, #2
 800262e:	d907      	bls.n	8002640 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e150      	b.n	80028d6 <HAL_RCC_OscConfig+0x4e2>
 8002634:	40023800 	.word	0x40023800
 8002638:	42470000 	.word	0x42470000
 800263c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002640:	4b88      	ldr	r3, [pc, #544]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 8002642:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d1ea      	bne.n	8002622 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0304 	and.w	r3, r3, #4
 8002654:	2b00      	cmp	r3, #0
 8002656:	f000 8097 	beq.w	8002788 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800265a:	2300      	movs	r3, #0
 800265c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800265e:	4b81      	ldr	r3, [pc, #516]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 8002660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d10f      	bne.n	800268a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800266a:	2300      	movs	r3, #0
 800266c:	60bb      	str	r3, [r7, #8]
 800266e:	4b7d      	ldr	r3, [pc, #500]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 8002670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002672:	4a7c      	ldr	r2, [pc, #496]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 8002674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002678:	6413      	str	r3, [r2, #64]	; 0x40
 800267a:	4b7a      	ldr	r3, [pc, #488]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 800267c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002682:	60bb      	str	r3, [r7, #8]
 8002684:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002686:	2301      	movs	r3, #1
 8002688:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800268a:	4b77      	ldr	r3, [pc, #476]	; (8002868 <HAL_RCC_OscConfig+0x474>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002692:	2b00      	cmp	r3, #0
 8002694:	d118      	bne.n	80026c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002696:	4b74      	ldr	r3, [pc, #464]	; (8002868 <HAL_RCC_OscConfig+0x474>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a73      	ldr	r2, [pc, #460]	; (8002868 <HAL_RCC_OscConfig+0x474>)
 800269c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026a2:	f7fe f963 	bl	800096c <HAL_GetTick>
 80026a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a8:	e008      	b.n	80026bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026aa:	f7fe f95f 	bl	800096c <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d901      	bls.n	80026bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e10c      	b.n	80028d6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026bc:	4b6a      	ldr	r3, [pc, #424]	; (8002868 <HAL_RCC_OscConfig+0x474>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d0f0      	beq.n	80026aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d106      	bne.n	80026de <HAL_RCC_OscConfig+0x2ea>
 80026d0:	4b64      	ldr	r3, [pc, #400]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 80026d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d4:	4a63      	ldr	r2, [pc, #396]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 80026d6:	f043 0301 	orr.w	r3, r3, #1
 80026da:	6713      	str	r3, [r2, #112]	; 0x70
 80026dc:	e01c      	b.n	8002718 <HAL_RCC_OscConfig+0x324>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	2b05      	cmp	r3, #5
 80026e4:	d10c      	bne.n	8002700 <HAL_RCC_OscConfig+0x30c>
 80026e6:	4b5f      	ldr	r3, [pc, #380]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 80026e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ea:	4a5e      	ldr	r2, [pc, #376]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 80026ec:	f043 0304 	orr.w	r3, r3, #4
 80026f0:	6713      	str	r3, [r2, #112]	; 0x70
 80026f2:	4b5c      	ldr	r3, [pc, #368]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 80026f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f6:	4a5b      	ldr	r2, [pc, #364]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 80026f8:	f043 0301 	orr.w	r3, r3, #1
 80026fc:	6713      	str	r3, [r2, #112]	; 0x70
 80026fe:	e00b      	b.n	8002718 <HAL_RCC_OscConfig+0x324>
 8002700:	4b58      	ldr	r3, [pc, #352]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 8002702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002704:	4a57      	ldr	r2, [pc, #348]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 8002706:	f023 0301 	bic.w	r3, r3, #1
 800270a:	6713      	str	r3, [r2, #112]	; 0x70
 800270c:	4b55      	ldr	r3, [pc, #340]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 800270e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002710:	4a54      	ldr	r2, [pc, #336]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 8002712:	f023 0304 	bic.w	r3, r3, #4
 8002716:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d015      	beq.n	800274c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002720:	f7fe f924 	bl	800096c <HAL_GetTick>
 8002724:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002726:	e00a      	b.n	800273e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002728:	f7fe f920 	bl	800096c <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	f241 3288 	movw	r2, #5000	; 0x1388
 8002736:	4293      	cmp	r3, r2
 8002738:	d901      	bls.n	800273e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e0cb      	b.n	80028d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800273e:	4b49      	ldr	r3, [pc, #292]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 8002740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002742:	f003 0302 	and.w	r3, r3, #2
 8002746:	2b00      	cmp	r3, #0
 8002748:	d0ee      	beq.n	8002728 <HAL_RCC_OscConfig+0x334>
 800274a:	e014      	b.n	8002776 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800274c:	f7fe f90e 	bl	800096c <HAL_GetTick>
 8002750:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002752:	e00a      	b.n	800276a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002754:	f7fe f90a 	bl	800096c <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002762:	4293      	cmp	r3, r2
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e0b5      	b.n	80028d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800276a:	4b3e      	ldr	r3, [pc, #248]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 800276c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1ee      	bne.n	8002754 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002776:	7dfb      	ldrb	r3, [r7, #23]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d105      	bne.n	8002788 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800277c:	4b39      	ldr	r3, [pc, #228]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 800277e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002780:	4a38      	ldr	r2, [pc, #224]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 8002782:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002786:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	2b00      	cmp	r3, #0
 800278e:	f000 80a1 	beq.w	80028d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002792:	4b34      	ldr	r3, [pc, #208]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f003 030c 	and.w	r3, r3, #12
 800279a:	2b08      	cmp	r3, #8
 800279c:	d05c      	beq.n	8002858 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	699b      	ldr	r3, [r3, #24]
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d141      	bne.n	800282a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027a6:	4b31      	ldr	r3, [pc, #196]	; (800286c <HAL_RCC_OscConfig+0x478>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ac:	f7fe f8de 	bl	800096c <HAL_GetTick>
 80027b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027b2:	e008      	b.n	80027c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027b4:	f7fe f8da 	bl	800096c <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e087      	b.n	80028d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027c6:	4b27      	ldr	r3, [pc, #156]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d1f0      	bne.n	80027b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	69da      	ldr	r2, [r3, #28]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a1b      	ldr	r3, [r3, #32]
 80027da:	431a      	orrs	r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e0:	019b      	lsls	r3, r3, #6
 80027e2:	431a      	orrs	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e8:	085b      	lsrs	r3, r3, #1
 80027ea:	3b01      	subs	r3, #1
 80027ec:	041b      	lsls	r3, r3, #16
 80027ee:	431a      	orrs	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f4:	061b      	lsls	r3, r3, #24
 80027f6:	491b      	ldr	r1, [pc, #108]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027fc:	4b1b      	ldr	r3, [pc, #108]	; (800286c <HAL_RCC_OscConfig+0x478>)
 80027fe:	2201      	movs	r2, #1
 8002800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002802:	f7fe f8b3 	bl	800096c <HAL_GetTick>
 8002806:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002808:	e008      	b.n	800281c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800280a:	f7fe f8af 	bl	800096c <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d901      	bls.n	800281c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e05c      	b.n	80028d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800281c:	4b11      	ldr	r3, [pc, #68]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d0f0      	beq.n	800280a <HAL_RCC_OscConfig+0x416>
 8002828:	e054      	b.n	80028d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800282a:	4b10      	ldr	r3, [pc, #64]	; (800286c <HAL_RCC_OscConfig+0x478>)
 800282c:	2200      	movs	r2, #0
 800282e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002830:	f7fe f89c 	bl	800096c <HAL_GetTick>
 8002834:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002836:	e008      	b.n	800284a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002838:	f7fe f898 	bl	800096c <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	2b02      	cmp	r3, #2
 8002844:	d901      	bls.n	800284a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e045      	b.n	80028d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800284a:	4b06      	ldr	r3, [pc, #24]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d1f0      	bne.n	8002838 <HAL_RCC_OscConfig+0x444>
 8002856:	e03d      	b.n	80028d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	699b      	ldr	r3, [r3, #24]
 800285c:	2b01      	cmp	r3, #1
 800285e:	d107      	bne.n	8002870 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e038      	b.n	80028d6 <HAL_RCC_OscConfig+0x4e2>
 8002864:	40023800 	.word	0x40023800
 8002868:	40007000 	.word	0x40007000
 800286c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002870:	4b1b      	ldr	r3, [pc, #108]	; (80028e0 <HAL_RCC_OscConfig+0x4ec>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d028      	beq.n	80028d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002888:	429a      	cmp	r2, r3
 800288a:	d121      	bne.n	80028d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002896:	429a      	cmp	r2, r3
 8002898:	d11a      	bne.n	80028d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800289a:	68fa      	ldr	r2, [r7, #12]
 800289c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028a0:	4013      	ands	r3, r2
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d111      	bne.n	80028d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b6:	085b      	lsrs	r3, r3, #1
 80028b8:	3b01      	subs	r3, #1
 80028ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028bc:	429a      	cmp	r2, r3
 80028be:	d107      	bne.n	80028d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d001      	beq.n	80028d4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e000      	b.n	80028d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3718      	adds	r7, #24
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	40023800 	.word	0x40023800

080028e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d101      	bne.n	80028f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e0cc      	b.n	8002a92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028f8:	4b68      	ldr	r3, [pc, #416]	; (8002a9c <HAL_RCC_ClockConfig+0x1b8>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0307 	and.w	r3, r3, #7
 8002900:	683a      	ldr	r2, [r7, #0]
 8002902:	429a      	cmp	r2, r3
 8002904:	d90c      	bls.n	8002920 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002906:	4b65      	ldr	r3, [pc, #404]	; (8002a9c <HAL_RCC_ClockConfig+0x1b8>)
 8002908:	683a      	ldr	r2, [r7, #0]
 800290a:	b2d2      	uxtb	r2, r2
 800290c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800290e:	4b63      	ldr	r3, [pc, #396]	; (8002a9c <HAL_RCC_ClockConfig+0x1b8>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0307 	and.w	r3, r3, #7
 8002916:	683a      	ldr	r2, [r7, #0]
 8002918:	429a      	cmp	r2, r3
 800291a:	d001      	beq.n	8002920 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e0b8      	b.n	8002a92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0302 	and.w	r3, r3, #2
 8002928:	2b00      	cmp	r3, #0
 800292a:	d020      	beq.n	800296e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0304 	and.w	r3, r3, #4
 8002934:	2b00      	cmp	r3, #0
 8002936:	d005      	beq.n	8002944 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002938:	4b59      	ldr	r3, [pc, #356]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	4a58      	ldr	r2, [pc, #352]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800293e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002942:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0308 	and.w	r3, r3, #8
 800294c:	2b00      	cmp	r3, #0
 800294e:	d005      	beq.n	800295c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002950:	4b53      	ldr	r3, [pc, #332]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	4a52      	ldr	r2, [pc, #328]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002956:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800295a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800295c:	4b50      	ldr	r3, [pc, #320]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	494d      	ldr	r1, [pc, #308]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800296a:	4313      	orrs	r3, r2
 800296c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0301 	and.w	r3, r3, #1
 8002976:	2b00      	cmp	r3, #0
 8002978:	d044      	beq.n	8002a04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	2b01      	cmp	r3, #1
 8002980:	d107      	bne.n	8002992 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002982:	4b47      	ldr	r3, [pc, #284]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d119      	bne.n	80029c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e07f      	b.n	8002a92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	2b02      	cmp	r3, #2
 8002998:	d003      	beq.n	80029a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800299e:	2b03      	cmp	r3, #3
 80029a0:	d107      	bne.n	80029b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029a2:	4b3f      	ldr	r3, [pc, #252]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d109      	bne.n	80029c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e06f      	b.n	8002a92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029b2:	4b3b      	ldr	r3, [pc, #236]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e067      	b.n	8002a92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029c2:	4b37      	ldr	r3, [pc, #220]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f023 0203 	bic.w	r2, r3, #3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	4934      	ldr	r1, [pc, #208]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029d4:	f7fd ffca 	bl	800096c <HAL_GetTick>
 80029d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029da:	e00a      	b.n	80029f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029dc:	f7fd ffc6 	bl	800096c <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e04f      	b.n	8002a92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029f2:	4b2b      	ldr	r3, [pc, #172]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f003 020c 	and.w	r2, r3, #12
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d1eb      	bne.n	80029dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a04:	4b25      	ldr	r3, [pc, #148]	; (8002a9c <HAL_RCC_ClockConfig+0x1b8>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0307 	and.w	r3, r3, #7
 8002a0c:	683a      	ldr	r2, [r7, #0]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d20c      	bcs.n	8002a2c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a12:	4b22      	ldr	r3, [pc, #136]	; (8002a9c <HAL_RCC_ClockConfig+0x1b8>)
 8002a14:	683a      	ldr	r2, [r7, #0]
 8002a16:	b2d2      	uxtb	r2, r2
 8002a18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a1a:	4b20      	ldr	r3, [pc, #128]	; (8002a9c <HAL_RCC_ClockConfig+0x1b8>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	683a      	ldr	r2, [r7, #0]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d001      	beq.n	8002a2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e032      	b.n	8002a92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0304 	and.w	r3, r3, #4
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d008      	beq.n	8002a4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a38:	4b19      	ldr	r3, [pc, #100]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	4916      	ldr	r1, [pc, #88]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0308 	and.w	r3, r3, #8
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d009      	beq.n	8002a6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a56:	4b12      	ldr	r3, [pc, #72]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	00db      	lsls	r3, r3, #3
 8002a64:	490e      	ldr	r1, [pc, #56]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a6a:	f000 f821 	bl	8002ab0 <HAL_RCC_GetSysClockFreq>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	4b0b      	ldr	r3, [pc, #44]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	091b      	lsrs	r3, r3, #4
 8002a76:	f003 030f 	and.w	r3, r3, #15
 8002a7a:	490a      	ldr	r1, [pc, #40]	; (8002aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a7c:	5ccb      	ldrb	r3, [r1, r3]
 8002a7e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a82:	4a09      	ldr	r2, [pc, #36]	; (8002aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a86:	4b09      	ldr	r3, [pc, #36]	; (8002aac <HAL_RCC_ClockConfig+0x1c8>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7fd fe40 	bl	8000710 <HAL_InitTick>

  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3710      	adds	r7, #16
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	40023c00 	.word	0x40023c00
 8002aa0:	40023800 	.word	0x40023800
 8002aa4:	080075d8 	.word	0x080075d8
 8002aa8:	20000004 	.word	0x20000004
 8002aac:	20000008 	.word	0x20000008

08002ab0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ab0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ab4:	b094      	sub	sp, #80	; 0x50
 8002ab6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	647b      	str	r3, [r7, #68]	; 0x44
 8002abc:	2300      	movs	r3, #0
 8002abe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ac8:	4b79      	ldr	r3, [pc, #484]	; (8002cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f003 030c 	and.w	r3, r3, #12
 8002ad0:	2b08      	cmp	r3, #8
 8002ad2:	d00d      	beq.n	8002af0 <HAL_RCC_GetSysClockFreq+0x40>
 8002ad4:	2b08      	cmp	r3, #8
 8002ad6:	f200 80e1 	bhi.w	8002c9c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d002      	beq.n	8002ae4 <HAL_RCC_GetSysClockFreq+0x34>
 8002ade:	2b04      	cmp	r3, #4
 8002ae0:	d003      	beq.n	8002aea <HAL_RCC_GetSysClockFreq+0x3a>
 8002ae2:	e0db      	b.n	8002c9c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ae4:	4b73      	ldr	r3, [pc, #460]	; (8002cb4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ae6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002ae8:	e0db      	b.n	8002ca2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002aea:	4b73      	ldr	r3, [pc, #460]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0x208>)
 8002aec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002aee:	e0d8      	b.n	8002ca2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002af0:	4b6f      	ldr	r3, [pc, #444]	; (8002cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002af8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002afa:	4b6d      	ldr	r3, [pc, #436]	; (8002cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d063      	beq.n	8002bce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b06:	4b6a      	ldr	r3, [pc, #424]	; (8002cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	099b      	lsrs	r3, r3, #6
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b10:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b18:	633b      	str	r3, [r7, #48]	; 0x30
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	637b      	str	r3, [r7, #52]	; 0x34
 8002b1e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002b22:	4622      	mov	r2, r4
 8002b24:	462b      	mov	r3, r5
 8002b26:	f04f 0000 	mov.w	r0, #0
 8002b2a:	f04f 0100 	mov.w	r1, #0
 8002b2e:	0159      	lsls	r1, r3, #5
 8002b30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b34:	0150      	lsls	r0, r2, #5
 8002b36:	4602      	mov	r2, r0
 8002b38:	460b      	mov	r3, r1
 8002b3a:	4621      	mov	r1, r4
 8002b3c:	1a51      	subs	r1, r2, r1
 8002b3e:	6139      	str	r1, [r7, #16]
 8002b40:	4629      	mov	r1, r5
 8002b42:	eb63 0301 	sbc.w	r3, r3, r1
 8002b46:	617b      	str	r3, [r7, #20]
 8002b48:	f04f 0200 	mov.w	r2, #0
 8002b4c:	f04f 0300 	mov.w	r3, #0
 8002b50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b54:	4659      	mov	r1, fp
 8002b56:	018b      	lsls	r3, r1, #6
 8002b58:	4651      	mov	r1, sl
 8002b5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b5e:	4651      	mov	r1, sl
 8002b60:	018a      	lsls	r2, r1, #6
 8002b62:	4651      	mov	r1, sl
 8002b64:	ebb2 0801 	subs.w	r8, r2, r1
 8002b68:	4659      	mov	r1, fp
 8002b6a:	eb63 0901 	sbc.w	r9, r3, r1
 8002b6e:	f04f 0200 	mov.w	r2, #0
 8002b72:	f04f 0300 	mov.w	r3, #0
 8002b76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b82:	4690      	mov	r8, r2
 8002b84:	4699      	mov	r9, r3
 8002b86:	4623      	mov	r3, r4
 8002b88:	eb18 0303 	adds.w	r3, r8, r3
 8002b8c:	60bb      	str	r3, [r7, #8]
 8002b8e:	462b      	mov	r3, r5
 8002b90:	eb49 0303 	adc.w	r3, r9, r3
 8002b94:	60fb      	str	r3, [r7, #12]
 8002b96:	f04f 0200 	mov.w	r2, #0
 8002b9a:	f04f 0300 	mov.w	r3, #0
 8002b9e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002ba2:	4629      	mov	r1, r5
 8002ba4:	024b      	lsls	r3, r1, #9
 8002ba6:	4621      	mov	r1, r4
 8002ba8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002bac:	4621      	mov	r1, r4
 8002bae:	024a      	lsls	r2, r1, #9
 8002bb0:	4610      	mov	r0, r2
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002bbc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002bc0:	f7fd fb0a 	bl	80001d8 <__aeabi_uldivmod>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	4613      	mov	r3, r2
 8002bca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bcc:	e058      	b.n	8002c80 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bce:	4b38      	ldr	r3, [pc, #224]	; (8002cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	099b      	lsrs	r3, r3, #6
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	4611      	mov	r1, r2
 8002bda:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002bde:	623b      	str	r3, [r7, #32]
 8002be0:	2300      	movs	r3, #0
 8002be2:	627b      	str	r3, [r7, #36]	; 0x24
 8002be4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002be8:	4642      	mov	r2, r8
 8002bea:	464b      	mov	r3, r9
 8002bec:	f04f 0000 	mov.w	r0, #0
 8002bf0:	f04f 0100 	mov.w	r1, #0
 8002bf4:	0159      	lsls	r1, r3, #5
 8002bf6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bfa:	0150      	lsls	r0, r2, #5
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	460b      	mov	r3, r1
 8002c00:	4641      	mov	r1, r8
 8002c02:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c06:	4649      	mov	r1, r9
 8002c08:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c0c:	f04f 0200 	mov.w	r2, #0
 8002c10:	f04f 0300 	mov.w	r3, #0
 8002c14:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c18:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c1c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c20:	ebb2 040a 	subs.w	r4, r2, sl
 8002c24:	eb63 050b 	sbc.w	r5, r3, fp
 8002c28:	f04f 0200 	mov.w	r2, #0
 8002c2c:	f04f 0300 	mov.w	r3, #0
 8002c30:	00eb      	lsls	r3, r5, #3
 8002c32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c36:	00e2      	lsls	r2, r4, #3
 8002c38:	4614      	mov	r4, r2
 8002c3a:	461d      	mov	r5, r3
 8002c3c:	4643      	mov	r3, r8
 8002c3e:	18e3      	adds	r3, r4, r3
 8002c40:	603b      	str	r3, [r7, #0]
 8002c42:	464b      	mov	r3, r9
 8002c44:	eb45 0303 	adc.w	r3, r5, r3
 8002c48:	607b      	str	r3, [r7, #4]
 8002c4a:	f04f 0200 	mov.w	r2, #0
 8002c4e:	f04f 0300 	mov.w	r3, #0
 8002c52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c56:	4629      	mov	r1, r5
 8002c58:	028b      	lsls	r3, r1, #10
 8002c5a:	4621      	mov	r1, r4
 8002c5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c60:	4621      	mov	r1, r4
 8002c62:	028a      	lsls	r2, r1, #10
 8002c64:	4610      	mov	r0, r2
 8002c66:	4619      	mov	r1, r3
 8002c68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	61bb      	str	r3, [r7, #24]
 8002c6e:	61fa      	str	r2, [r7, #28]
 8002c70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c74:	f7fd fab0 	bl	80001d8 <__aeabi_uldivmod>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c80:	4b0b      	ldr	r3, [pc, #44]	; (8002cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	0c1b      	lsrs	r3, r3, #16
 8002c86:	f003 0303 	and.w	r3, r3, #3
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	005b      	lsls	r3, r3, #1
 8002c8e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002c90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c98:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c9a:	e002      	b.n	8002ca2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c9c:	4b05      	ldr	r3, [pc, #20]	; (8002cb4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c9e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ca0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ca2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3750      	adds	r7, #80	; 0x50
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cae:	bf00      	nop
 8002cb0:	40023800 	.word	0x40023800
 8002cb4:	00f42400 	.word	0x00f42400
 8002cb8:	007a1200 	.word	0x007a1200

08002cbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cc0:	4b03      	ldr	r3, [pc, #12]	; (8002cd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	20000004 	.word	0x20000004

08002cd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002cd8:	f7ff fff0 	bl	8002cbc <HAL_RCC_GetHCLKFreq>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	4b05      	ldr	r3, [pc, #20]	; (8002cf4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	0a9b      	lsrs	r3, r3, #10
 8002ce4:	f003 0307 	and.w	r3, r3, #7
 8002ce8:	4903      	ldr	r1, [pc, #12]	; (8002cf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cea:	5ccb      	ldrb	r3, [r1, r3]
 8002cec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	40023800 	.word	0x40023800
 8002cf8:	080075e8 	.word	0x080075e8

08002cfc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	220f      	movs	r2, #15
 8002d0a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002d0c:	4b12      	ldr	r3, [pc, #72]	; (8002d58 <HAL_RCC_GetClockConfig+0x5c>)
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f003 0203 	and.w	r2, r3, #3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002d18:	4b0f      	ldr	r3, [pc, #60]	; (8002d58 <HAL_RCC_GetClockConfig+0x5c>)
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002d24:	4b0c      	ldr	r3, [pc, #48]	; (8002d58 <HAL_RCC_GetClockConfig+0x5c>)
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002d30:	4b09      	ldr	r3, [pc, #36]	; (8002d58 <HAL_RCC_GetClockConfig+0x5c>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	08db      	lsrs	r3, r3, #3
 8002d36:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002d3e:	4b07      	ldr	r3, [pc, #28]	; (8002d5c <HAL_RCC_GetClockConfig+0x60>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0207 	and.w	r2, r3, #7
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	601a      	str	r2, [r3, #0]
}
 8002d4a:	bf00      	nop
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	40023800 	.word	0x40023800
 8002d5c:	40023c00 	.word	0x40023c00

08002d60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e041      	b.n	8002df6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d106      	bne.n	8002d8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f000 f839 	bl	8002dfe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2202      	movs	r2, #2
 8002d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	3304      	adds	r3, #4
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	4610      	mov	r0, r2
 8002da0:	f000 f9d8 	bl	8003154 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3708      	adds	r7, #8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002dfe:	b480      	push	{r7}
 8002e00:	b083      	sub	sp, #12
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002e06:	bf00      	nop
 8002e08:	370c      	adds	r7, #12
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
	...

08002e14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b085      	sub	sp, #20
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d001      	beq.n	8002e2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e04e      	b.n	8002eca <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2202      	movs	r2, #2
 8002e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68da      	ldr	r2, [r3, #12]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f042 0201 	orr.w	r2, r2, #1
 8002e42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a23      	ldr	r2, [pc, #140]	; (8002ed8 <HAL_TIM_Base_Start_IT+0xc4>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d022      	beq.n	8002e94 <HAL_TIM_Base_Start_IT+0x80>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e56:	d01d      	beq.n	8002e94 <HAL_TIM_Base_Start_IT+0x80>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a1f      	ldr	r2, [pc, #124]	; (8002edc <HAL_TIM_Base_Start_IT+0xc8>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d018      	beq.n	8002e94 <HAL_TIM_Base_Start_IT+0x80>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a1e      	ldr	r2, [pc, #120]	; (8002ee0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d013      	beq.n	8002e94 <HAL_TIM_Base_Start_IT+0x80>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a1c      	ldr	r2, [pc, #112]	; (8002ee4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d00e      	beq.n	8002e94 <HAL_TIM_Base_Start_IT+0x80>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a1b      	ldr	r2, [pc, #108]	; (8002ee8 <HAL_TIM_Base_Start_IT+0xd4>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d009      	beq.n	8002e94 <HAL_TIM_Base_Start_IT+0x80>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a19      	ldr	r2, [pc, #100]	; (8002eec <HAL_TIM_Base_Start_IT+0xd8>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d004      	beq.n	8002e94 <HAL_TIM_Base_Start_IT+0x80>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a18      	ldr	r2, [pc, #96]	; (8002ef0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d111      	bne.n	8002eb8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f003 0307 	and.w	r3, r3, #7
 8002e9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2b06      	cmp	r3, #6
 8002ea4:	d010      	beq.n	8002ec8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f042 0201 	orr.w	r2, r2, #1
 8002eb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eb6:	e007      	b.n	8002ec8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f042 0201 	orr.w	r2, r2, #1
 8002ec6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3714      	adds	r7, #20
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	40010000 	.word	0x40010000
 8002edc:	40000400 	.word	0x40000400
 8002ee0:	40000800 	.word	0x40000800
 8002ee4:	40000c00 	.word	0x40000c00
 8002ee8:	40010400 	.word	0x40010400
 8002eec:	40014000 	.word	0x40014000
 8002ef0:	40001800 	.word	0x40001800

08002ef4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d122      	bne.n	8002f50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	f003 0302 	and.w	r3, r3, #2
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d11b      	bne.n	8002f50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f06f 0202 	mvn.w	r2, #2
 8002f20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2201      	movs	r2, #1
 8002f26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	f003 0303 	and.w	r3, r3, #3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d003      	beq.n	8002f3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 f8ee 	bl	8003118 <HAL_TIM_IC_CaptureCallback>
 8002f3c:	e005      	b.n	8002f4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 f8e0 	bl	8003104 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f000 f8f1 	bl	800312c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	f003 0304 	and.w	r3, r3, #4
 8002f5a:	2b04      	cmp	r3, #4
 8002f5c:	d122      	bne.n	8002fa4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	f003 0304 	and.w	r3, r3, #4
 8002f68:	2b04      	cmp	r3, #4
 8002f6a:	d11b      	bne.n	8002fa4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f06f 0204 	mvn.w	r2, #4
 8002f74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2202      	movs	r2, #2
 8002f7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	699b      	ldr	r3, [r3, #24]
 8002f82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d003      	beq.n	8002f92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 f8c4 	bl	8003118 <HAL_TIM_IC_CaptureCallback>
 8002f90:	e005      	b.n	8002f9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f000 f8b6 	bl	8003104 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f000 f8c7 	bl	800312c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	f003 0308 	and.w	r3, r3, #8
 8002fae:	2b08      	cmp	r3, #8
 8002fb0:	d122      	bne.n	8002ff8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	f003 0308 	and.w	r3, r3, #8
 8002fbc:	2b08      	cmp	r3, #8
 8002fbe:	d11b      	bne.n	8002ff8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f06f 0208 	mvn.w	r2, #8
 8002fc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2204      	movs	r2, #4
 8002fce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	69db      	ldr	r3, [r3, #28]
 8002fd6:	f003 0303 	and.w	r3, r3, #3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d003      	beq.n	8002fe6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 f89a 	bl	8003118 <HAL_TIM_IC_CaptureCallback>
 8002fe4:	e005      	b.n	8002ff2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f000 f88c 	bl	8003104 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f000 f89d 	bl	800312c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	f003 0310 	and.w	r3, r3, #16
 8003002:	2b10      	cmp	r3, #16
 8003004:	d122      	bne.n	800304c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	f003 0310 	and.w	r3, r3, #16
 8003010:	2b10      	cmp	r3, #16
 8003012:	d11b      	bne.n	800304c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f06f 0210 	mvn.w	r2, #16
 800301c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2208      	movs	r2, #8
 8003022:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	69db      	ldr	r3, [r3, #28]
 800302a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800302e:	2b00      	cmp	r3, #0
 8003030:	d003      	beq.n	800303a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 f870 	bl	8003118 <HAL_TIM_IC_CaptureCallback>
 8003038:	e005      	b.n	8003046 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 f862 	bl	8003104 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f000 f873 	bl	800312c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	2b01      	cmp	r3, #1
 8003058:	d10e      	bne.n	8003078 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	f003 0301 	and.w	r3, r3, #1
 8003064:	2b01      	cmp	r3, #1
 8003066:	d107      	bne.n	8003078 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f06f 0201 	mvn.w	r2, #1
 8003070:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f7fd fb0c 	bl	8000690 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003082:	2b80      	cmp	r3, #128	; 0x80
 8003084:	d10e      	bne.n	80030a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003090:	2b80      	cmp	r3, #128	; 0x80
 8003092:	d107      	bne.n	80030a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800309c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 f902 	bl	80032a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ae:	2b40      	cmp	r3, #64	; 0x40
 80030b0:	d10e      	bne.n	80030d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030bc:	2b40      	cmp	r3, #64	; 0x40
 80030be:	d107      	bne.n	80030d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80030c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 f838 	bl	8003140 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	f003 0320 	and.w	r3, r3, #32
 80030da:	2b20      	cmp	r3, #32
 80030dc:	d10e      	bne.n	80030fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	f003 0320 	and.w	r3, r3, #32
 80030e8:	2b20      	cmp	r3, #32
 80030ea:	d107      	bne.n	80030fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f06f 0220 	mvn.w	r2, #32
 80030f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 f8cc 	bl	8003294 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030fc:	bf00      	nop
 80030fe:	3708      	adds	r7, #8
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}

08003104 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003120:	bf00      	nop
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003134:	bf00      	nop
 8003136:	370c      	adds	r7, #12
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr

08003140 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003148:	bf00      	nop
 800314a:	370c      	adds	r7, #12
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003154:	b480      	push	{r7}
 8003156:	b085      	sub	sp, #20
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4a40      	ldr	r2, [pc, #256]	; (8003268 <TIM_Base_SetConfig+0x114>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d013      	beq.n	8003194 <TIM_Base_SetConfig+0x40>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003172:	d00f      	beq.n	8003194 <TIM_Base_SetConfig+0x40>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4a3d      	ldr	r2, [pc, #244]	; (800326c <TIM_Base_SetConfig+0x118>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d00b      	beq.n	8003194 <TIM_Base_SetConfig+0x40>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4a3c      	ldr	r2, [pc, #240]	; (8003270 <TIM_Base_SetConfig+0x11c>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d007      	beq.n	8003194 <TIM_Base_SetConfig+0x40>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4a3b      	ldr	r2, [pc, #236]	; (8003274 <TIM_Base_SetConfig+0x120>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d003      	beq.n	8003194 <TIM_Base_SetConfig+0x40>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4a3a      	ldr	r2, [pc, #232]	; (8003278 <TIM_Base_SetConfig+0x124>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d108      	bne.n	80031a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800319a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	68fa      	ldr	r2, [r7, #12]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a2f      	ldr	r2, [pc, #188]	; (8003268 <TIM_Base_SetConfig+0x114>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d02b      	beq.n	8003206 <TIM_Base_SetConfig+0xb2>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031b4:	d027      	beq.n	8003206 <TIM_Base_SetConfig+0xb2>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a2c      	ldr	r2, [pc, #176]	; (800326c <TIM_Base_SetConfig+0x118>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d023      	beq.n	8003206 <TIM_Base_SetConfig+0xb2>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a2b      	ldr	r2, [pc, #172]	; (8003270 <TIM_Base_SetConfig+0x11c>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d01f      	beq.n	8003206 <TIM_Base_SetConfig+0xb2>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a2a      	ldr	r2, [pc, #168]	; (8003274 <TIM_Base_SetConfig+0x120>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d01b      	beq.n	8003206 <TIM_Base_SetConfig+0xb2>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a29      	ldr	r2, [pc, #164]	; (8003278 <TIM_Base_SetConfig+0x124>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d017      	beq.n	8003206 <TIM_Base_SetConfig+0xb2>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a28      	ldr	r2, [pc, #160]	; (800327c <TIM_Base_SetConfig+0x128>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d013      	beq.n	8003206 <TIM_Base_SetConfig+0xb2>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a27      	ldr	r2, [pc, #156]	; (8003280 <TIM_Base_SetConfig+0x12c>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d00f      	beq.n	8003206 <TIM_Base_SetConfig+0xb2>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a26      	ldr	r2, [pc, #152]	; (8003284 <TIM_Base_SetConfig+0x130>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d00b      	beq.n	8003206 <TIM_Base_SetConfig+0xb2>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a25      	ldr	r2, [pc, #148]	; (8003288 <TIM_Base_SetConfig+0x134>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d007      	beq.n	8003206 <TIM_Base_SetConfig+0xb2>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a24      	ldr	r2, [pc, #144]	; (800328c <TIM_Base_SetConfig+0x138>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d003      	beq.n	8003206 <TIM_Base_SetConfig+0xb2>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a23      	ldr	r2, [pc, #140]	; (8003290 <TIM_Base_SetConfig+0x13c>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d108      	bne.n	8003218 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800320c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	4313      	orrs	r3, r2
 8003216:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	4313      	orrs	r3, r2
 8003224:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	68fa      	ldr	r2, [r7, #12]
 800322a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	689a      	ldr	r2, [r3, #8]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4a0a      	ldr	r2, [pc, #40]	; (8003268 <TIM_Base_SetConfig+0x114>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d003      	beq.n	800324c <TIM_Base_SetConfig+0xf8>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4a0c      	ldr	r2, [pc, #48]	; (8003278 <TIM_Base_SetConfig+0x124>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d103      	bne.n	8003254 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	691a      	ldr	r2, [r3, #16]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	615a      	str	r2, [r3, #20]
}
 800325a:	bf00      	nop
 800325c:	3714      	adds	r7, #20
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop
 8003268:	40010000 	.word	0x40010000
 800326c:	40000400 	.word	0x40000400
 8003270:	40000800 	.word	0x40000800
 8003274:	40000c00 	.word	0x40000c00
 8003278:	40010400 	.word	0x40010400
 800327c:	40014000 	.word	0x40014000
 8003280:	40014400 	.word	0x40014400
 8003284:	40014800 	.word	0x40014800
 8003288:	40001800 	.word	0x40001800
 800328c:	40001c00 	.word	0x40001c00
 8003290:	40002000 	.word	0x40002000

08003294 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800329c:	bf00      	nop
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80032b0:	bf00      	nop
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80032bc:	b084      	sub	sp, #16
 80032be:	b580      	push	{r7, lr}
 80032c0:	b084      	sub	sp, #16
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
 80032c6:	f107 001c 	add.w	r0, r7, #28
 80032ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80032ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d122      	bne.n	800331a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80032e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80032fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d105      	bne.n	800330e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f001 fbee 	bl	8004af0 <USB_CoreReset>
 8003314:	4603      	mov	r3, r0
 8003316:	73fb      	strb	r3, [r7, #15]
 8003318:	e01a      	b.n	8003350 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f001 fbe2 	bl	8004af0 <USB_CoreReset>
 800332c:	4603      	mov	r3, r0
 800332e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003330:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003332:	2b00      	cmp	r3, #0
 8003334:	d106      	bne.n	8003344 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800333a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	639a      	str	r2, [r3, #56]	; 0x38
 8003342:	e005      	b.n	8003350 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003348:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003352:	2b01      	cmp	r3, #1
 8003354:	d10b      	bne.n	800336e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f043 0206 	orr.w	r2, r3, #6
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f043 0220 	orr.w	r2, r3, #32
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800336e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003370:	4618      	mov	r0, r3
 8003372:	3710      	adds	r7, #16
 8003374:	46bd      	mov	sp, r7
 8003376:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800337a:	b004      	add	sp, #16
 800337c:	4770      	bx	lr
	...

08003380 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003380:	b480      	push	{r7}
 8003382:	b087      	sub	sp, #28
 8003384:	af00      	add	r7, sp, #0
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	60b9      	str	r1, [r7, #8]
 800338a:	4613      	mov	r3, r2
 800338c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800338e:	79fb      	ldrb	r3, [r7, #7]
 8003390:	2b02      	cmp	r3, #2
 8003392:	d165      	bne.n	8003460 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	4a41      	ldr	r2, [pc, #260]	; (800349c <USB_SetTurnaroundTime+0x11c>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d906      	bls.n	80033aa <USB_SetTurnaroundTime+0x2a>
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	4a40      	ldr	r2, [pc, #256]	; (80034a0 <USB_SetTurnaroundTime+0x120>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d202      	bcs.n	80033aa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80033a4:	230f      	movs	r3, #15
 80033a6:	617b      	str	r3, [r7, #20]
 80033a8:	e062      	b.n	8003470 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	4a3c      	ldr	r2, [pc, #240]	; (80034a0 <USB_SetTurnaroundTime+0x120>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d306      	bcc.n	80033c0 <USB_SetTurnaroundTime+0x40>
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	4a3b      	ldr	r2, [pc, #236]	; (80034a4 <USB_SetTurnaroundTime+0x124>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d202      	bcs.n	80033c0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80033ba:	230e      	movs	r3, #14
 80033bc:	617b      	str	r3, [r7, #20]
 80033be:	e057      	b.n	8003470 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	4a38      	ldr	r2, [pc, #224]	; (80034a4 <USB_SetTurnaroundTime+0x124>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d306      	bcc.n	80033d6 <USB_SetTurnaroundTime+0x56>
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	4a37      	ldr	r2, [pc, #220]	; (80034a8 <USB_SetTurnaroundTime+0x128>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d202      	bcs.n	80033d6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80033d0:	230d      	movs	r3, #13
 80033d2:	617b      	str	r3, [r7, #20]
 80033d4:	e04c      	b.n	8003470 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	4a33      	ldr	r2, [pc, #204]	; (80034a8 <USB_SetTurnaroundTime+0x128>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d306      	bcc.n	80033ec <USB_SetTurnaroundTime+0x6c>
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	4a32      	ldr	r2, [pc, #200]	; (80034ac <USB_SetTurnaroundTime+0x12c>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d802      	bhi.n	80033ec <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80033e6:	230c      	movs	r3, #12
 80033e8:	617b      	str	r3, [r7, #20]
 80033ea:	e041      	b.n	8003470 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	4a2f      	ldr	r2, [pc, #188]	; (80034ac <USB_SetTurnaroundTime+0x12c>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d906      	bls.n	8003402 <USB_SetTurnaroundTime+0x82>
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	4a2e      	ldr	r2, [pc, #184]	; (80034b0 <USB_SetTurnaroundTime+0x130>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d802      	bhi.n	8003402 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80033fc:	230b      	movs	r3, #11
 80033fe:	617b      	str	r3, [r7, #20]
 8003400:	e036      	b.n	8003470 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	4a2a      	ldr	r2, [pc, #168]	; (80034b0 <USB_SetTurnaroundTime+0x130>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d906      	bls.n	8003418 <USB_SetTurnaroundTime+0x98>
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	4a29      	ldr	r2, [pc, #164]	; (80034b4 <USB_SetTurnaroundTime+0x134>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d802      	bhi.n	8003418 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003412:	230a      	movs	r3, #10
 8003414:	617b      	str	r3, [r7, #20]
 8003416:	e02b      	b.n	8003470 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	4a26      	ldr	r2, [pc, #152]	; (80034b4 <USB_SetTurnaroundTime+0x134>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d906      	bls.n	800342e <USB_SetTurnaroundTime+0xae>
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	4a25      	ldr	r2, [pc, #148]	; (80034b8 <USB_SetTurnaroundTime+0x138>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d202      	bcs.n	800342e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003428:	2309      	movs	r3, #9
 800342a:	617b      	str	r3, [r7, #20]
 800342c:	e020      	b.n	8003470 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	4a21      	ldr	r2, [pc, #132]	; (80034b8 <USB_SetTurnaroundTime+0x138>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d306      	bcc.n	8003444 <USB_SetTurnaroundTime+0xc4>
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	4a20      	ldr	r2, [pc, #128]	; (80034bc <USB_SetTurnaroundTime+0x13c>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d802      	bhi.n	8003444 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800343e:	2308      	movs	r3, #8
 8003440:	617b      	str	r3, [r7, #20]
 8003442:	e015      	b.n	8003470 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	4a1d      	ldr	r2, [pc, #116]	; (80034bc <USB_SetTurnaroundTime+0x13c>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d906      	bls.n	800345a <USB_SetTurnaroundTime+0xda>
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	4a1c      	ldr	r2, [pc, #112]	; (80034c0 <USB_SetTurnaroundTime+0x140>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d202      	bcs.n	800345a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003454:	2307      	movs	r3, #7
 8003456:	617b      	str	r3, [r7, #20]
 8003458:	e00a      	b.n	8003470 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800345a:	2306      	movs	r3, #6
 800345c:	617b      	str	r3, [r7, #20]
 800345e:	e007      	b.n	8003470 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003460:	79fb      	ldrb	r3, [r7, #7]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d102      	bne.n	800346c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003466:	2309      	movs	r3, #9
 8003468:	617b      	str	r3, [r7, #20]
 800346a:	e001      	b.n	8003470 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800346c:	2309      	movs	r3, #9
 800346e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	68da      	ldr	r2, [r3, #12]
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	029b      	lsls	r3, r3, #10
 8003484:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003488:	431a      	orrs	r2, r3
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800348e:	2300      	movs	r3, #0
}
 8003490:	4618      	mov	r0, r3
 8003492:	371c      	adds	r7, #28
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr
 800349c:	00d8acbf 	.word	0x00d8acbf
 80034a0:	00e4e1c0 	.word	0x00e4e1c0
 80034a4:	00f42400 	.word	0x00f42400
 80034a8:	01067380 	.word	0x01067380
 80034ac:	011a499f 	.word	0x011a499f
 80034b0:	01312cff 	.word	0x01312cff
 80034b4:	014ca43f 	.word	0x014ca43f
 80034b8:	016e3600 	.word	0x016e3600
 80034bc:	01a6ab1f 	.word	0x01a6ab1f
 80034c0:	01e84800 	.word	0x01e84800

080034c4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	f043 0201 	orr.w	r2, r3, #1
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80034d8:	2300      	movs	r3, #0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	370c      	adds	r7, #12
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr

080034e6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80034e6:	b480      	push	{r7}
 80034e8:	b083      	sub	sp, #12
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f023 0201 	bic.w	r2, r3, #1
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80034fa:	2300      	movs	r3, #0
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	460b      	mov	r3, r1
 8003512:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003514:	2300      	movs	r3, #0
 8003516:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003524:	78fb      	ldrb	r3, [r7, #3]
 8003526:	2b01      	cmp	r3, #1
 8003528:	d115      	bne.n	8003556 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003536:	2001      	movs	r0, #1
 8003538:	f7fd fa24 	bl	8000984 <HAL_Delay>
      ms++;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	3301      	adds	r3, #1
 8003540:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f001 fa45 	bl	80049d2 <USB_GetMode>
 8003548:	4603      	mov	r3, r0
 800354a:	2b01      	cmp	r3, #1
 800354c:	d01e      	beq.n	800358c <USB_SetCurrentMode+0x84>
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2b31      	cmp	r3, #49	; 0x31
 8003552:	d9f0      	bls.n	8003536 <USB_SetCurrentMode+0x2e>
 8003554:	e01a      	b.n	800358c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003556:	78fb      	ldrb	r3, [r7, #3]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d115      	bne.n	8003588 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003568:	2001      	movs	r0, #1
 800356a:	f7fd fa0b 	bl	8000984 <HAL_Delay>
      ms++;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	3301      	adds	r3, #1
 8003572:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f001 fa2c 	bl	80049d2 <USB_GetMode>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d005      	beq.n	800358c <USB_SetCurrentMode+0x84>
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2b31      	cmp	r3, #49	; 0x31
 8003584:	d9f0      	bls.n	8003568 <USB_SetCurrentMode+0x60>
 8003586:	e001      	b.n	800358c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e005      	b.n	8003598 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2b32      	cmp	r3, #50	; 0x32
 8003590:	d101      	bne.n	8003596 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e000      	b.n	8003598 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003596:	2300      	movs	r3, #0
}
 8003598:	4618      	mov	r0, r3
 800359a:	3710      	adds	r7, #16
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80035a0:	b084      	sub	sp, #16
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b086      	sub	sp, #24
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
 80035aa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80035ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80035b2:	2300      	movs	r3, #0
 80035b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80035ba:	2300      	movs	r3, #0
 80035bc:	613b      	str	r3, [r7, #16]
 80035be:	e009      	b.n	80035d4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	3340      	adds	r3, #64	; 0x40
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	4413      	add	r3, r2
 80035ca:	2200      	movs	r2, #0
 80035cc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	3301      	adds	r3, #1
 80035d2:	613b      	str	r3, [r7, #16]
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	2b0e      	cmp	r3, #14
 80035d8:	d9f2      	bls.n	80035c0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80035da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d11c      	bne.n	800361a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	68fa      	ldr	r2, [r7, #12]
 80035ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035ee:	f043 0302 	orr.w	r3, r3, #2
 80035f2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003604:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003610:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	639a      	str	r2, [r3, #56]	; 0x38
 8003618:	e00b      	b.n	8003632 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800361e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800362a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003638:	461a      	mov	r2, r3
 800363a:	2300      	movs	r3, #0
 800363c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003644:	4619      	mov	r1, r3
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800364c:	461a      	mov	r2, r3
 800364e:	680b      	ldr	r3, [r1, #0]
 8003650:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003654:	2b01      	cmp	r3, #1
 8003656:	d10c      	bne.n	8003672 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800365a:	2b00      	cmp	r3, #0
 800365c:	d104      	bne.n	8003668 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800365e:	2100      	movs	r1, #0
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f000 f965 	bl	8003930 <USB_SetDevSpeed>
 8003666:	e008      	b.n	800367a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003668:	2101      	movs	r1, #1
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 f960 	bl	8003930 <USB_SetDevSpeed>
 8003670:	e003      	b.n	800367a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003672:	2103      	movs	r1, #3
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f000 f95b 	bl	8003930 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800367a:	2110      	movs	r1, #16
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f000 f8f3 	bl	8003868 <USB_FlushTxFifo>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d001      	beq.n	800368c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f000 f91f 	bl	80038d0 <USB_FlushRxFifo>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d001      	beq.n	800369c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036a2:	461a      	mov	r2, r3
 80036a4:	2300      	movs	r3, #0
 80036a6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036ae:	461a      	mov	r2, r3
 80036b0:	2300      	movs	r3, #0
 80036b2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036ba:	461a      	mov	r2, r3
 80036bc:	2300      	movs	r3, #0
 80036be:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80036c0:	2300      	movs	r3, #0
 80036c2:	613b      	str	r3, [r7, #16]
 80036c4:	e043      	b.n	800374e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	015a      	lsls	r2, r3, #5
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	4413      	add	r3, r2
 80036ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80036d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80036dc:	d118      	bne.n	8003710 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d10a      	bne.n	80036fa <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	015a      	lsls	r2, r3, #5
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	4413      	add	r3, r2
 80036ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036f0:	461a      	mov	r2, r3
 80036f2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80036f6:	6013      	str	r3, [r2, #0]
 80036f8:	e013      	b.n	8003722 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	015a      	lsls	r2, r3, #5
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	4413      	add	r3, r2
 8003702:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003706:	461a      	mov	r2, r3
 8003708:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800370c:	6013      	str	r3, [r2, #0]
 800370e:	e008      	b.n	8003722 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	015a      	lsls	r2, r3, #5
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	4413      	add	r3, r2
 8003718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800371c:	461a      	mov	r2, r3
 800371e:	2300      	movs	r3, #0
 8003720:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	015a      	lsls	r2, r3, #5
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	4413      	add	r3, r2
 800372a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800372e:	461a      	mov	r2, r3
 8003730:	2300      	movs	r3, #0
 8003732:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	015a      	lsls	r2, r3, #5
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	4413      	add	r3, r2
 800373c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003740:	461a      	mov	r2, r3
 8003742:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003746:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	3301      	adds	r3, #1
 800374c:	613b      	str	r3, [r7, #16]
 800374e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003750:	693a      	ldr	r2, [r7, #16]
 8003752:	429a      	cmp	r2, r3
 8003754:	d3b7      	bcc.n	80036c6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003756:	2300      	movs	r3, #0
 8003758:	613b      	str	r3, [r7, #16]
 800375a:	e043      	b.n	80037e4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	015a      	lsls	r2, r3, #5
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	4413      	add	r3, r2
 8003764:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800376e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003772:	d118      	bne.n	80037a6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d10a      	bne.n	8003790 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	015a      	lsls	r2, r3, #5
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	4413      	add	r3, r2
 8003782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003786:	461a      	mov	r2, r3
 8003788:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800378c:	6013      	str	r3, [r2, #0]
 800378e:	e013      	b.n	80037b8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	015a      	lsls	r2, r3, #5
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	4413      	add	r3, r2
 8003798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800379c:	461a      	mov	r2, r3
 800379e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80037a2:	6013      	str	r3, [r2, #0]
 80037a4:	e008      	b.n	80037b8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	015a      	lsls	r2, r3, #5
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	4413      	add	r3, r2
 80037ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037b2:	461a      	mov	r2, r3
 80037b4:	2300      	movs	r3, #0
 80037b6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	015a      	lsls	r2, r3, #5
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	4413      	add	r3, r2
 80037c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037c4:	461a      	mov	r2, r3
 80037c6:	2300      	movs	r3, #0
 80037c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	015a      	lsls	r2, r3, #5
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	4413      	add	r3, r2
 80037d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037d6:	461a      	mov	r2, r3
 80037d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80037dc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	3301      	adds	r3, #1
 80037e2:	613b      	str	r3, [r7, #16]
 80037e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e6:	693a      	ldr	r2, [r7, #16]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d3b7      	bcc.n	800375c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037f2:	691b      	ldr	r3, [r3, #16]
 80037f4:	68fa      	ldr	r2, [r7, #12]
 80037f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037fe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800380c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800380e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003810:	2b00      	cmp	r3, #0
 8003812:	d105      	bne.n	8003820 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	699b      	ldr	r3, [r3, #24]
 8003818:	f043 0210 	orr.w	r2, r3, #16
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	699a      	ldr	r2, [r3, #24]
 8003824:	4b0f      	ldr	r3, [pc, #60]	; (8003864 <USB_DevInit+0x2c4>)
 8003826:	4313      	orrs	r3, r2
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800382c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800382e:	2b00      	cmp	r3, #0
 8003830:	d005      	beq.n	800383e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	699b      	ldr	r3, [r3, #24]
 8003836:	f043 0208 	orr.w	r2, r3, #8
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800383e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003840:	2b01      	cmp	r3, #1
 8003842:	d107      	bne.n	8003854 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	699b      	ldr	r3, [r3, #24]
 8003848:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800384c:	f043 0304 	orr.w	r3, r3, #4
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003854:	7dfb      	ldrb	r3, [r7, #23]
}
 8003856:	4618      	mov	r0, r3
 8003858:	3718      	adds	r7, #24
 800385a:	46bd      	mov	sp, r7
 800385c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003860:	b004      	add	sp, #16
 8003862:	4770      	bx	lr
 8003864:	803c3800 	.word	0x803c3800

08003868 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003868:	b480      	push	{r7}
 800386a:	b085      	sub	sp, #20
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003872:	2300      	movs	r3, #0
 8003874:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	3301      	adds	r3, #1
 800387a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	4a13      	ldr	r2, [pc, #76]	; (80038cc <USB_FlushTxFifo+0x64>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d901      	bls.n	8003888 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	e01b      	b.n	80038c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	691b      	ldr	r3, [r3, #16]
 800388c:	2b00      	cmp	r3, #0
 800388e:	daf2      	bge.n	8003876 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003890:	2300      	movs	r3, #0
 8003892:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	019b      	lsls	r3, r3, #6
 8003898:	f043 0220 	orr.w	r2, r3, #32
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	3301      	adds	r3, #1
 80038a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	4a08      	ldr	r2, [pc, #32]	; (80038cc <USB_FlushTxFifo+0x64>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d901      	bls.n	80038b2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e006      	b.n	80038c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	f003 0320 	and.w	r3, r3, #32
 80038ba:	2b20      	cmp	r3, #32
 80038bc:	d0f0      	beq.n	80038a0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80038be:	2300      	movs	r3, #0
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3714      	adds	r7, #20
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr
 80038cc:	00030d40 	.word	0x00030d40

080038d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b085      	sub	sp, #20
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80038d8:	2300      	movs	r3, #0
 80038da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	3301      	adds	r3, #1
 80038e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	4a11      	ldr	r2, [pc, #68]	; (800392c <USB_FlushRxFifo+0x5c>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d901      	bls.n	80038ee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e018      	b.n	8003920 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	daf2      	bge.n	80038dc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80038f6:	2300      	movs	r3, #0
 80038f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2210      	movs	r2, #16
 80038fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	3301      	adds	r3, #1
 8003904:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	4a08      	ldr	r2, [pc, #32]	; (800392c <USB_FlushRxFifo+0x5c>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d901      	bls.n	8003912 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e006      	b.n	8003920 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	f003 0310 	and.w	r3, r3, #16
 800391a:	2b10      	cmp	r3, #16
 800391c:	d0f0      	beq.n	8003900 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800391e:	2300      	movs	r3, #0
}
 8003920:	4618      	mov	r0, r3
 8003922:	3714      	adds	r7, #20
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr
 800392c:	00030d40 	.word	0x00030d40

08003930 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003930:	b480      	push	{r7}
 8003932:	b085      	sub	sp, #20
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	460b      	mov	r3, r1
 800393a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	78fb      	ldrb	r3, [r7, #3]
 800394a:	68f9      	ldr	r1, [r7, #12]
 800394c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003950:	4313      	orrs	r3, r2
 8003952:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	3714      	adds	r7, #20
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr

08003962 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003962:	b480      	push	{r7}
 8003964:	b087      	sub	sp, #28
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f003 0306 	and.w	r3, r3, #6
 800397a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d102      	bne.n	8003988 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003982:	2300      	movs	r3, #0
 8003984:	75fb      	strb	r3, [r7, #23]
 8003986:	e00a      	b.n	800399e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2b02      	cmp	r3, #2
 800398c:	d002      	beq.n	8003994 <USB_GetDevSpeed+0x32>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2b06      	cmp	r3, #6
 8003992:	d102      	bne.n	800399a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003994:	2302      	movs	r3, #2
 8003996:	75fb      	strb	r3, [r7, #23]
 8003998:	e001      	b.n	800399e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800399a:	230f      	movs	r3, #15
 800399c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800399e:	7dfb      	ldrb	r3, [r7, #23]
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	371c      	adds	r7, #28
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b085      	sub	sp, #20
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	785b      	ldrb	r3, [r3, #1]
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d13a      	bne.n	8003a3e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039ce:	69da      	ldr	r2, [r3, #28]
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	f003 030f 	and.w	r3, r3, #15
 80039d8:	2101      	movs	r1, #1
 80039da:	fa01 f303 	lsl.w	r3, r1, r3
 80039de:	b29b      	uxth	r3, r3
 80039e0:	68f9      	ldr	r1, [r7, #12]
 80039e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039e6:	4313      	orrs	r3, r2
 80039e8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	015a      	lsls	r2, r3, #5
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	4413      	add	r3, r2
 80039f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d155      	bne.n	8003aac <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	015a      	lsls	r2, r3, #5
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	4413      	add	r3, r2
 8003a08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	791b      	ldrb	r3, [r3, #4]
 8003a1a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003a1c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	059b      	lsls	r3, r3, #22
 8003a22:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003a24:	4313      	orrs	r3, r2
 8003a26:	68ba      	ldr	r2, [r7, #8]
 8003a28:	0151      	lsls	r1, r2, #5
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	440a      	add	r2, r1
 8003a2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a3a:	6013      	str	r3, [r2, #0]
 8003a3c:	e036      	b.n	8003aac <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a44:	69da      	ldr	r2, [r3, #28]
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	f003 030f 	and.w	r3, r3, #15
 8003a4e:	2101      	movs	r1, #1
 8003a50:	fa01 f303 	lsl.w	r3, r1, r3
 8003a54:	041b      	lsls	r3, r3, #16
 8003a56:	68f9      	ldr	r1, [r7, #12]
 8003a58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	015a      	lsls	r2, r3, #5
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	4413      	add	r3, r2
 8003a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d11a      	bne.n	8003aac <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	015a      	lsls	r2, r3, #5
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	791b      	ldrb	r3, [r3, #4]
 8003a90:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003a92:	430b      	orrs	r3, r1
 8003a94:	4313      	orrs	r3, r2
 8003a96:	68ba      	ldr	r2, [r7, #8]
 8003a98:	0151      	lsls	r1, r2, #5
 8003a9a:	68fa      	ldr	r2, [r7, #12]
 8003a9c:	440a      	add	r2, r1
 8003a9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003aa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003aaa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3714      	adds	r7, #20
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
	...

08003abc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b085      	sub	sp, #20
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	785b      	ldrb	r3, [r3, #1]
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d161      	bne.n	8003b9c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	015a      	lsls	r2, r3, #5
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	4413      	add	r3, r2
 8003ae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003aea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003aee:	d11f      	bne.n	8003b30 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	015a      	lsls	r2, r3, #5
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	4413      	add	r3, r2
 8003af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68ba      	ldr	r2, [r7, #8]
 8003b00:	0151      	lsls	r1, r2, #5
 8003b02:	68fa      	ldr	r2, [r7, #12]
 8003b04:	440a      	add	r2, r1
 8003b06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b0a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003b0e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	015a      	lsls	r2, r3, #5
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	4413      	add	r3, r2
 8003b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68ba      	ldr	r2, [r7, #8]
 8003b20:	0151      	lsls	r1, r2, #5
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	440a      	add	r2, r1
 8003b26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b2a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b2e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	f003 030f 	and.w	r3, r3, #15
 8003b40:	2101      	movs	r1, #1
 8003b42:	fa01 f303 	lsl.w	r3, r1, r3
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	43db      	mvns	r3, r3
 8003b4a:	68f9      	ldr	r1, [r7, #12]
 8003b4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b50:	4013      	ands	r3, r2
 8003b52:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b5a:	69da      	ldr	r2, [r3, #28]
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	f003 030f 	and.w	r3, r3, #15
 8003b64:	2101      	movs	r1, #1
 8003b66:	fa01 f303 	lsl.w	r3, r1, r3
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	43db      	mvns	r3, r3
 8003b6e:	68f9      	ldr	r1, [r7, #12]
 8003b70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b74:	4013      	ands	r3, r2
 8003b76:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	015a      	lsls	r2, r3, #5
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	4413      	add	r3, r2
 8003b80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	0159      	lsls	r1, r3, #5
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	440b      	add	r3, r1
 8003b8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b92:	4619      	mov	r1, r3
 8003b94:	4b35      	ldr	r3, [pc, #212]	; (8003c6c <USB_DeactivateEndpoint+0x1b0>)
 8003b96:	4013      	ands	r3, r2
 8003b98:	600b      	str	r3, [r1, #0]
 8003b9a:	e060      	b.n	8003c5e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	015a      	lsls	r2, r3, #5
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003bae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003bb2:	d11f      	bne.n	8003bf4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	015a      	lsls	r2, r3, #5
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	4413      	add	r3, r2
 8003bbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68ba      	ldr	r2, [r7, #8]
 8003bc4:	0151      	lsls	r1, r2, #5
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	440a      	add	r2, r1
 8003bca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003bce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003bd2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	015a      	lsls	r2, r3, #5
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	4413      	add	r3, r2
 8003bdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	68ba      	ldr	r2, [r7, #8]
 8003be4:	0151      	lsls	r1, r2, #5
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	440a      	add	r2, r1
 8003bea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003bee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003bf2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	f003 030f 	and.w	r3, r3, #15
 8003c04:	2101      	movs	r1, #1
 8003c06:	fa01 f303 	lsl.w	r3, r1, r3
 8003c0a:	041b      	lsls	r3, r3, #16
 8003c0c:	43db      	mvns	r3, r3
 8003c0e:	68f9      	ldr	r1, [r7, #12]
 8003c10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c14:	4013      	ands	r3, r2
 8003c16:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c1e:	69da      	ldr	r2, [r3, #28]
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	f003 030f 	and.w	r3, r3, #15
 8003c28:	2101      	movs	r1, #1
 8003c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c2e:	041b      	lsls	r3, r3, #16
 8003c30:	43db      	mvns	r3, r3
 8003c32:	68f9      	ldr	r1, [r7, #12]
 8003c34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c38:	4013      	ands	r3, r2
 8003c3a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	015a      	lsls	r2, r3, #5
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	4413      	add	r3, r2
 8003c44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	0159      	lsls	r1, r3, #5
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	440b      	add	r3, r1
 8003c52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c56:	4619      	mov	r1, r3
 8003c58:	4b05      	ldr	r3, [pc, #20]	; (8003c70 <USB_DeactivateEndpoint+0x1b4>)
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3714      	adds	r7, #20
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr
 8003c6c:	ec337800 	.word	0xec337800
 8003c70:	eff37800 	.word	0xeff37800

08003c74 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b08a      	sub	sp, #40	; 0x28
 8003c78:	af02      	add	r7, sp, #8
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	4613      	mov	r3, r2
 8003c80:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	785b      	ldrb	r3, [r3, #1]
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	f040 815c 	bne.w	8003f4e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d132      	bne.n	8003d04 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	015a      	lsls	r2, r3, #5
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003caa:	691b      	ldr	r3, [r3, #16]
 8003cac:	69ba      	ldr	r2, [r7, #24]
 8003cae:	0151      	lsls	r1, r2, #5
 8003cb0:	69fa      	ldr	r2, [r7, #28]
 8003cb2:	440a      	add	r2, r1
 8003cb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cb8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003cbc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003cc0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	015a      	lsls	r2, r3, #5
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	4413      	add	r3, r2
 8003cca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cce:	691b      	ldr	r3, [r3, #16]
 8003cd0:	69ba      	ldr	r2, [r7, #24]
 8003cd2:	0151      	lsls	r1, r2, #5
 8003cd4:	69fa      	ldr	r2, [r7, #28]
 8003cd6:	440a      	add	r2, r1
 8003cd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cdc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003ce0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	015a      	lsls	r2, r3, #5
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	4413      	add	r3, r2
 8003cea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cee:	691b      	ldr	r3, [r3, #16]
 8003cf0:	69ba      	ldr	r2, [r7, #24]
 8003cf2:	0151      	lsls	r1, r2, #5
 8003cf4:	69fa      	ldr	r2, [r7, #28]
 8003cf6:	440a      	add	r2, r1
 8003cf8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cfc:	0cdb      	lsrs	r3, r3, #19
 8003cfe:	04db      	lsls	r3, r3, #19
 8003d00:	6113      	str	r3, [r2, #16]
 8003d02:	e074      	b.n	8003dee <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	015a      	lsls	r2, r3, #5
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	69ba      	ldr	r2, [r7, #24]
 8003d14:	0151      	lsls	r1, r2, #5
 8003d16:	69fa      	ldr	r2, [r7, #28]
 8003d18:	440a      	add	r2, r1
 8003d1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d1e:	0cdb      	lsrs	r3, r3, #19
 8003d20:	04db      	lsls	r3, r3, #19
 8003d22:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	015a      	lsls	r2, r3, #5
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	4413      	add	r3, r2
 8003d2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	69ba      	ldr	r2, [r7, #24]
 8003d34:	0151      	lsls	r1, r2, #5
 8003d36:	69fa      	ldr	r2, [r7, #28]
 8003d38:	440a      	add	r2, r1
 8003d3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d3e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003d42:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003d46:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	015a      	lsls	r2, r3, #5
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	4413      	add	r3, r2
 8003d50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d54:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	6999      	ldr	r1, [r3, #24]
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	440b      	add	r3, r1
 8003d60:	1e59      	subs	r1, r3, #1
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d6a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003d6c:	4b9d      	ldr	r3, [pc, #628]	; (8003fe4 <USB_EPStartXfer+0x370>)
 8003d6e:	400b      	ands	r3, r1
 8003d70:	69b9      	ldr	r1, [r7, #24]
 8003d72:	0148      	lsls	r0, r1, #5
 8003d74:	69f9      	ldr	r1, [r7, #28]
 8003d76:	4401      	add	r1, r0
 8003d78:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	015a      	lsls	r2, r3, #5
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	4413      	add	r3, r2
 8003d88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d8c:	691a      	ldr	r2, [r3, #16]
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d96:	69b9      	ldr	r1, [r7, #24]
 8003d98:	0148      	lsls	r0, r1, #5
 8003d9a:	69f9      	ldr	r1, [r7, #28]
 8003d9c:	4401      	add	r1, r0
 8003d9e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003da2:	4313      	orrs	r3, r2
 8003da4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	791b      	ldrb	r3, [r3, #4]
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d11f      	bne.n	8003dee <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003dae:	69bb      	ldr	r3, [r7, #24]
 8003db0:	015a      	lsls	r2, r3, #5
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	4413      	add	r3, r2
 8003db6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	69ba      	ldr	r2, [r7, #24]
 8003dbe:	0151      	lsls	r1, r2, #5
 8003dc0:	69fa      	ldr	r2, [r7, #28]
 8003dc2:	440a      	add	r2, r1
 8003dc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dc8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003dcc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	015a      	lsls	r2, r3, #5
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	4413      	add	r3, r2
 8003dd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dda:	691b      	ldr	r3, [r3, #16]
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	0151      	lsls	r1, r2, #5
 8003de0:	69fa      	ldr	r2, [r7, #28]
 8003de2:	440a      	add	r2, r1
 8003de4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003de8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003dec:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003dee:	79fb      	ldrb	r3, [r7, #7]
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d14b      	bne.n	8003e8c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	695b      	ldr	r3, [r3, #20]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d009      	beq.n	8003e10 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	015a      	lsls	r2, r3, #5
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	4413      	add	r3, r2
 8003e04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e08:	461a      	mov	r2, r3
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	695b      	ldr	r3, [r3, #20]
 8003e0e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	791b      	ldrb	r3, [r3, #4]
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d128      	bne.n	8003e6a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d110      	bne.n	8003e4a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	015a      	lsls	r2, r3, #5
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	4413      	add	r3, r2
 8003e30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	69ba      	ldr	r2, [r7, #24]
 8003e38:	0151      	lsls	r1, r2, #5
 8003e3a:	69fa      	ldr	r2, [r7, #28]
 8003e3c:	440a      	add	r2, r1
 8003e3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e42:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e46:	6013      	str	r3, [r2, #0]
 8003e48:	e00f      	b.n	8003e6a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	015a      	lsls	r2, r3, #5
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	4413      	add	r3, r2
 8003e52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	69ba      	ldr	r2, [r7, #24]
 8003e5a:	0151      	lsls	r1, r2, #5
 8003e5c:	69fa      	ldr	r2, [r7, #28]
 8003e5e:	440a      	add	r2, r1
 8003e60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e68:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	015a      	lsls	r2, r3, #5
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	4413      	add	r3, r2
 8003e72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	69ba      	ldr	r2, [r7, #24]
 8003e7a:	0151      	lsls	r1, r2, #5
 8003e7c:	69fa      	ldr	r2, [r7, #28]
 8003e7e:	440a      	add	r2, r1
 8003e80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e84:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003e88:	6013      	str	r3, [r2, #0]
 8003e8a:	e133      	b.n	80040f4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	015a      	lsls	r2, r3, #5
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	4413      	add	r3, r2
 8003e94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	69ba      	ldr	r2, [r7, #24]
 8003e9c:	0151      	lsls	r1, r2, #5
 8003e9e:	69fa      	ldr	r2, [r7, #28]
 8003ea0:	440a      	add	r2, r1
 8003ea2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ea6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003eaa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	791b      	ldrb	r3, [r3, #4]
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d015      	beq.n	8003ee0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	f000 811b 	beq.w	80040f4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ec4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	f003 030f 	and.w	r3, r3, #15
 8003ece:	2101      	movs	r1, #1
 8003ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ed4:	69f9      	ldr	r1, [r7, #28]
 8003ed6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003eda:	4313      	orrs	r3, r2
 8003edc:	634b      	str	r3, [r1, #52]	; 0x34
 8003ede:	e109      	b.n	80040f4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d110      	bne.n	8003f12 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	015a      	lsls	r2, r3, #5
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	4413      	add	r3, r2
 8003ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	69ba      	ldr	r2, [r7, #24]
 8003f00:	0151      	lsls	r1, r2, #5
 8003f02:	69fa      	ldr	r2, [r7, #28]
 8003f04:	440a      	add	r2, r1
 8003f06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f0a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003f0e:	6013      	str	r3, [r2, #0]
 8003f10:	e00f      	b.n	8003f32 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	015a      	lsls	r2, r3, #5
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	4413      	add	r3, r2
 8003f1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	69ba      	ldr	r2, [r7, #24]
 8003f22:	0151      	lsls	r1, r2, #5
 8003f24:	69fa      	ldr	r2, [r7, #28]
 8003f26:	440a      	add	r2, r1
 8003f28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f30:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	6919      	ldr	r1, [r3, #16]
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	781a      	ldrb	r2, [r3, #0]
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	699b      	ldr	r3, [r3, #24]
 8003f3e:	b298      	uxth	r0, r3
 8003f40:	79fb      	ldrb	r3, [r7, #7]
 8003f42:	9300      	str	r3, [sp, #0]
 8003f44:	4603      	mov	r3, r0
 8003f46:	68f8      	ldr	r0, [r7, #12]
 8003f48:	f000 fade 	bl	8004508 <USB_WritePacket>
 8003f4c:	e0d2      	b.n	80040f4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	015a      	lsls	r2, r3, #5
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	4413      	add	r3, r2
 8003f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f5a:	691b      	ldr	r3, [r3, #16]
 8003f5c:	69ba      	ldr	r2, [r7, #24]
 8003f5e:	0151      	lsls	r1, r2, #5
 8003f60:	69fa      	ldr	r2, [r7, #28]
 8003f62:	440a      	add	r2, r1
 8003f64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f68:	0cdb      	lsrs	r3, r3, #19
 8003f6a:	04db      	lsls	r3, r3, #19
 8003f6c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	015a      	lsls	r2, r3, #5
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	4413      	add	r3, r2
 8003f76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f7a:	691b      	ldr	r3, [r3, #16]
 8003f7c:	69ba      	ldr	r2, [r7, #24]
 8003f7e:	0151      	lsls	r1, r2, #5
 8003f80:	69fa      	ldr	r2, [r7, #28]
 8003f82:	440a      	add	r2, r1
 8003f84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f88:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003f8c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003f90:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d126      	bne.n	8003fe8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	015a      	lsls	r2, r3, #5
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fa6:	691a      	ldr	r2, [r3, #16]
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fb0:	69b9      	ldr	r1, [r7, #24]
 8003fb2:	0148      	lsls	r0, r1, #5
 8003fb4:	69f9      	ldr	r1, [r7, #28]
 8003fb6:	4401      	add	r1, r0
 8003fb8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	015a      	lsls	r2, r3, #5
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	4413      	add	r3, r2
 8003fc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	69ba      	ldr	r2, [r7, #24]
 8003fd0:	0151      	lsls	r1, r2, #5
 8003fd2:	69fa      	ldr	r2, [r7, #28]
 8003fd4:	440a      	add	r2, r1
 8003fd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fda:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003fde:	6113      	str	r3, [r2, #16]
 8003fe0:	e03a      	b.n	8004058 <USB_EPStartXfer+0x3e4>
 8003fe2:	bf00      	nop
 8003fe4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	699a      	ldr	r2, [r3, #24]
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	4413      	add	r3, r2
 8003ff2:	1e5a      	subs	r2, r3, #1
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ffc:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	8afa      	ldrh	r2, [r7, #22]
 8004004:	fb03 f202 	mul.w	r2, r3, r2
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	015a      	lsls	r2, r3, #5
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	4413      	add	r3, r2
 8004014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004018:	691a      	ldr	r2, [r3, #16]
 800401a:	8afb      	ldrh	r3, [r7, #22]
 800401c:	04d9      	lsls	r1, r3, #19
 800401e:	4b38      	ldr	r3, [pc, #224]	; (8004100 <USB_EPStartXfer+0x48c>)
 8004020:	400b      	ands	r3, r1
 8004022:	69b9      	ldr	r1, [r7, #24]
 8004024:	0148      	lsls	r0, r1, #5
 8004026:	69f9      	ldr	r1, [r7, #28]
 8004028:	4401      	add	r1, r0
 800402a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800402e:	4313      	orrs	r3, r2
 8004030:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	015a      	lsls	r2, r3, #5
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	4413      	add	r3, r2
 800403a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800403e:	691a      	ldr	r2, [r3, #16]
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	69db      	ldr	r3, [r3, #28]
 8004044:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004048:	69b9      	ldr	r1, [r7, #24]
 800404a:	0148      	lsls	r0, r1, #5
 800404c:	69f9      	ldr	r1, [r7, #28]
 800404e:	4401      	add	r1, r0
 8004050:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004054:	4313      	orrs	r3, r2
 8004056:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004058:	79fb      	ldrb	r3, [r7, #7]
 800405a:	2b01      	cmp	r3, #1
 800405c:	d10d      	bne.n	800407a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d009      	beq.n	800407a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	6919      	ldr	r1, [r3, #16]
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	015a      	lsls	r2, r3, #5
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	4413      	add	r3, r2
 8004072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004076:	460a      	mov	r2, r1
 8004078:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	791b      	ldrb	r3, [r3, #4]
 800407e:	2b01      	cmp	r3, #1
 8004080:	d128      	bne.n	80040d4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800408e:	2b00      	cmp	r3, #0
 8004090:	d110      	bne.n	80040b4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	015a      	lsls	r2, r3, #5
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	4413      	add	r3, r2
 800409a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	69ba      	ldr	r2, [r7, #24]
 80040a2:	0151      	lsls	r1, r2, #5
 80040a4:	69fa      	ldr	r2, [r7, #28]
 80040a6:	440a      	add	r2, r1
 80040a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80040b0:	6013      	str	r3, [r2, #0]
 80040b2:	e00f      	b.n	80040d4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	015a      	lsls	r2, r3, #5
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	4413      	add	r3, r2
 80040bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	69ba      	ldr	r2, [r7, #24]
 80040c4:	0151      	lsls	r1, r2, #5
 80040c6:	69fa      	ldr	r2, [r7, #28]
 80040c8:	440a      	add	r2, r1
 80040ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040d2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	015a      	lsls	r2, r3, #5
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	4413      	add	r3, r2
 80040dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	69ba      	ldr	r2, [r7, #24]
 80040e4:	0151      	lsls	r1, r2, #5
 80040e6:	69fa      	ldr	r2, [r7, #28]
 80040e8:	440a      	add	r2, r1
 80040ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040ee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80040f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3720      	adds	r7, #32
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	1ff80000 	.word	0x1ff80000

08004104 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004104:	b480      	push	{r7}
 8004106:	b087      	sub	sp, #28
 8004108:	af00      	add	r7, sp, #0
 800410a:	60f8      	str	r0, [r7, #12]
 800410c:	60b9      	str	r1, [r7, #8]
 800410e:	4613      	mov	r3, r2
 8004110:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	785b      	ldrb	r3, [r3, #1]
 8004120:	2b01      	cmp	r3, #1
 8004122:	f040 80ce 	bne.w	80042c2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d132      	bne.n	8004194 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	015a      	lsls	r2, r3, #5
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	4413      	add	r3, r2
 8004136:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	693a      	ldr	r2, [r7, #16]
 800413e:	0151      	lsls	r1, r2, #5
 8004140:	697a      	ldr	r2, [r7, #20]
 8004142:	440a      	add	r2, r1
 8004144:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004148:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800414c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004150:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	015a      	lsls	r2, r3, #5
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	4413      	add	r3, r2
 800415a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	693a      	ldr	r2, [r7, #16]
 8004162:	0151      	lsls	r1, r2, #5
 8004164:	697a      	ldr	r2, [r7, #20]
 8004166:	440a      	add	r2, r1
 8004168:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800416c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004170:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	015a      	lsls	r2, r3, #5
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	4413      	add	r3, r2
 800417a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800417e:	691b      	ldr	r3, [r3, #16]
 8004180:	693a      	ldr	r2, [r7, #16]
 8004182:	0151      	lsls	r1, r2, #5
 8004184:	697a      	ldr	r2, [r7, #20]
 8004186:	440a      	add	r2, r1
 8004188:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800418c:	0cdb      	lsrs	r3, r3, #19
 800418e:	04db      	lsls	r3, r3, #19
 8004190:	6113      	str	r3, [r2, #16]
 8004192:	e04e      	b.n	8004232 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	015a      	lsls	r2, r3, #5
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	4413      	add	r3, r2
 800419c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	693a      	ldr	r2, [r7, #16]
 80041a4:	0151      	lsls	r1, r2, #5
 80041a6:	697a      	ldr	r2, [r7, #20]
 80041a8:	440a      	add	r2, r1
 80041aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041ae:	0cdb      	lsrs	r3, r3, #19
 80041b0:	04db      	lsls	r3, r3, #19
 80041b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	015a      	lsls	r2, r3, #5
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	4413      	add	r3, r2
 80041bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	693a      	ldr	r2, [r7, #16]
 80041c4:	0151      	lsls	r1, r2, #5
 80041c6:	697a      	ldr	r2, [r7, #20]
 80041c8:	440a      	add	r2, r1
 80041ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041ce:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80041d2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80041d6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	699a      	ldr	r2, [r3, #24]
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d903      	bls.n	80041ec <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	68da      	ldr	r2, [r3, #12]
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	015a      	lsls	r2, r3, #5
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	4413      	add	r3, r2
 80041f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	693a      	ldr	r2, [r7, #16]
 80041fc:	0151      	lsls	r1, r2, #5
 80041fe:	697a      	ldr	r2, [r7, #20]
 8004200:	440a      	add	r2, r1
 8004202:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004206:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800420a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	015a      	lsls	r2, r3, #5
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	4413      	add	r3, r2
 8004214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004218:	691a      	ldr	r2, [r3, #16]
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004222:	6939      	ldr	r1, [r7, #16]
 8004224:	0148      	lsls	r0, r1, #5
 8004226:	6979      	ldr	r1, [r7, #20]
 8004228:	4401      	add	r1, r0
 800422a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800422e:	4313      	orrs	r3, r2
 8004230:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004232:	79fb      	ldrb	r3, [r7, #7]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d11e      	bne.n	8004276 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	695b      	ldr	r3, [r3, #20]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d009      	beq.n	8004254 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	015a      	lsls	r2, r3, #5
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	4413      	add	r3, r2
 8004248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800424c:	461a      	mov	r2, r3
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	015a      	lsls	r2, r3, #5
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	4413      	add	r3, r2
 800425c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	693a      	ldr	r2, [r7, #16]
 8004264:	0151      	lsls	r1, r2, #5
 8004266:	697a      	ldr	r2, [r7, #20]
 8004268:	440a      	add	r2, r1
 800426a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800426e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004272:	6013      	str	r3, [r2, #0]
 8004274:	e097      	b.n	80043a6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	015a      	lsls	r2, r3, #5
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	4413      	add	r3, r2
 800427e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	693a      	ldr	r2, [r7, #16]
 8004286:	0151      	lsls	r1, r2, #5
 8004288:	697a      	ldr	r2, [r7, #20]
 800428a:	440a      	add	r2, r1
 800428c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004290:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004294:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	699b      	ldr	r3, [r3, #24]
 800429a:	2b00      	cmp	r3, #0
 800429c:	f000 8083 	beq.w	80043a6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	f003 030f 	and.w	r3, r3, #15
 80042b0:	2101      	movs	r1, #1
 80042b2:	fa01 f303 	lsl.w	r3, r1, r3
 80042b6:	6979      	ldr	r1, [r7, #20]
 80042b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042bc:	4313      	orrs	r3, r2
 80042be:	634b      	str	r3, [r1, #52]	; 0x34
 80042c0:	e071      	b.n	80043a6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	015a      	lsls	r2, r3, #5
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	4413      	add	r3, r2
 80042ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	693a      	ldr	r2, [r7, #16]
 80042d2:	0151      	lsls	r1, r2, #5
 80042d4:	697a      	ldr	r2, [r7, #20]
 80042d6:	440a      	add	r2, r1
 80042d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042dc:	0cdb      	lsrs	r3, r3, #19
 80042de:	04db      	lsls	r3, r3, #19
 80042e0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	015a      	lsls	r2, r3, #5
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	4413      	add	r3, r2
 80042ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ee:	691b      	ldr	r3, [r3, #16]
 80042f0:	693a      	ldr	r2, [r7, #16]
 80042f2:	0151      	lsls	r1, r2, #5
 80042f4:	697a      	ldr	r2, [r7, #20]
 80042f6:	440a      	add	r2, r1
 80042f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042fc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004300:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004304:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d003      	beq.n	8004316 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	68da      	ldr	r2, [r3, #12]
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	68da      	ldr	r2, [r3, #12]
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	015a      	lsls	r2, r3, #5
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	4413      	add	r3, r2
 8004326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	693a      	ldr	r2, [r7, #16]
 800432e:	0151      	lsls	r1, r2, #5
 8004330:	697a      	ldr	r2, [r7, #20]
 8004332:	440a      	add	r2, r1
 8004334:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004338:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800433c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	015a      	lsls	r2, r3, #5
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	4413      	add	r3, r2
 8004346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800434a:	691a      	ldr	r2, [r3, #16]
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	69db      	ldr	r3, [r3, #28]
 8004350:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004354:	6939      	ldr	r1, [r7, #16]
 8004356:	0148      	lsls	r0, r1, #5
 8004358:	6979      	ldr	r1, [r7, #20]
 800435a:	4401      	add	r1, r0
 800435c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004360:	4313      	orrs	r3, r2
 8004362:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004364:	79fb      	ldrb	r3, [r7, #7]
 8004366:	2b01      	cmp	r3, #1
 8004368:	d10d      	bne.n	8004386 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d009      	beq.n	8004386 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	6919      	ldr	r1, [r3, #16]
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	015a      	lsls	r2, r3, #5
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	4413      	add	r3, r2
 800437e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004382:	460a      	mov	r2, r1
 8004384:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	015a      	lsls	r2, r3, #5
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	4413      	add	r3, r2
 800438e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	693a      	ldr	r2, [r7, #16]
 8004396:	0151      	lsls	r1, r2, #5
 8004398:	697a      	ldr	r2, [r7, #20]
 800439a:	440a      	add	r2, r1
 800439c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043a0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80043a4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80043a6:	2300      	movs	r3, #0
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	371c      	adds	r7, #28
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b087      	sub	sp, #28
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80043be:	2300      	movs	r3, #0
 80043c0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80043c2:	2300      	movs	r3, #0
 80043c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	785b      	ldrb	r3, [r3, #1]
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d14a      	bne.n	8004468 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	015a      	lsls	r2, r3, #5
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	4413      	add	r3, r2
 80043dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043ea:	f040 8086 	bne.w	80044fa <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	015a      	lsls	r2, r3, #5
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	4413      	add	r3, r2
 80043f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	683a      	ldr	r2, [r7, #0]
 8004400:	7812      	ldrb	r2, [r2, #0]
 8004402:	0151      	lsls	r1, r2, #5
 8004404:	693a      	ldr	r2, [r7, #16]
 8004406:	440a      	add	r2, r1
 8004408:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800440c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004410:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	015a      	lsls	r2, r3, #5
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	4413      	add	r3, r2
 800441c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	683a      	ldr	r2, [r7, #0]
 8004424:	7812      	ldrb	r2, [r2, #0]
 8004426:	0151      	lsls	r1, r2, #5
 8004428:	693a      	ldr	r2, [r7, #16]
 800442a:	440a      	add	r2, r1
 800442c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004430:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004434:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	3301      	adds	r3, #1
 800443a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f242 7210 	movw	r2, #10000	; 0x2710
 8004442:	4293      	cmp	r3, r2
 8004444:	d902      	bls.n	800444c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	75fb      	strb	r3, [r7, #23]
          break;
 800444a:	e056      	b.n	80044fa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	015a      	lsls	r2, r3, #5
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	4413      	add	r3, r2
 8004456:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004460:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004464:	d0e7      	beq.n	8004436 <USB_EPStopXfer+0x82>
 8004466:	e048      	b.n	80044fa <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	015a      	lsls	r2, r3, #5
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	4413      	add	r3, r2
 8004472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800447c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004480:	d13b      	bne.n	80044fa <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	015a      	lsls	r2, r3, #5
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	4413      	add	r3, r2
 800448c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	683a      	ldr	r2, [r7, #0]
 8004494:	7812      	ldrb	r2, [r2, #0]
 8004496:	0151      	lsls	r1, r2, #5
 8004498:	693a      	ldr	r2, [r7, #16]
 800449a:	440a      	add	r2, r1
 800449c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044a0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80044a4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	015a      	lsls	r2, r3, #5
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	4413      	add	r3, r2
 80044b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	683a      	ldr	r2, [r7, #0]
 80044b8:	7812      	ldrb	r2, [r2, #0]
 80044ba:	0151      	lsls	r1, r2, #5
 80044bc:	693a      	ldr	r2, [r7, #16]
 80044be:	440a      	add	r2, r1
 80044c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80044c8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	3301      	adds	r3, #1
 80044ce:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f242 7210 	movw	r2, #10000	; 0x2710
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d902      	bls.n	80044e0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	75fb      	strb	r3, [r7, #23]
          break;
 80044de:	e00c      	b.n	80044fa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	015a      	lsls	r2, r3, #5
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	4413      	add	r3, r2
 80044ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80044f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80044f8:	d0e7      	beq.n	80044ca <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80044fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	371c      	adds	r7, #28
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004508:	b480      	push	{r7}
 800450a:	b089      	sub	sp, #36	; 0x24
 800450c:	af00      	add	r7, sp, #0
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	4611      	mov	r1, r2
 8004514:	461a      	mov	r2, r3
 8004516:	460b      	mov	r3, r1
 8004518:	71fb      	strb	r3, [r7, #7]
 800451a:	4613      	mov	r3, r2
 800451c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004526:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800452a:	2b00      	cmp	r3, #0
 800452c:	d123      	bne.n	8004576 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800452e:	88bb      	ldrh	r3, [r7, #4]
 8004530:	3303      	adds	r3, #3
 8004532:	089b      	lsrs	r3, r3, #2
 8004534:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004536:	2300      	movs	r3, #0
 8004538:	61bb      	str	r3, [r7, #24]
 800453a:	e018      	b.n	800456e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800453c:	79fb      	ldrb	r3, [r7, #7]
 800453e:	031a      	lsls	r2, r3, #12
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	4413      	add	r3, r2
 8004544:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004548:	461a      	mov	r2, r3
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	3301      	adds	r3, #1
 8004554:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	3301      	adds	r3, #1
 800455a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	3301      	adds	r3, #1
 8004560:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	3301      	adds	r3, #1
 8004566:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	3301      	adds	r3, #1
 800456c:	61bb      	str	r3, [r7, #24]
 800456e:	69ba      	ldr	r2, [r7, #24]
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	429a      	cmp	r2, r3
 8004574:	d3e2      	bcc.n	800453c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004576:	2300      	movs	r3, #0
}
 8004578:	4618      	mov	r0, r3
 800457a:	3724      	adds	r7, #36	; 0x24
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004584:	b480      	push	{r7}
 8004586:	b08b      	sub	sp, #44	; 0x2c
 8004588:	af00      	add	r7, sp, #0
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	60b9      	str	r1, [r7, #8]
 800458e:	4613      	mov	r3, r2
 8004590:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800459a:	88fb      	ldrh	r3, [r7, #6]
 800459c:	089b      	lsrs	r3, r3, #2
 800459e:	b29b      	uxth	r3, r3
 80045a0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80045a2:	88fb      	ldrh	r3, [r7, #6]
 80045a4:	f003 0303 	and.w	r3, r3, #3
 80045a8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80045aa:	2300      	movs	r3, #0
 80045ac:	623b      	str	r3, [r7, #32]
 80045ae:	e014      	b.n	80045da <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ba:	601a      	str	r2, [r3, #0]
    pDest++;
 80045bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045be:	3301      	adds	r3, #1
 80045c0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80045c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c4:	3301      	adds	r3, #1
 80045c6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80045c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ca:	3301      	adds	r3, #1
 80045cc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80045ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d0:	3301      	adds	r3, #1
 80045d2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80045d4:	6a3b      	ldr	r3, [r7, #32]
 80045d6:	3301      	adds	r3, #1
 80045d8:	623b      	str	r3, [r7, #32]
 80045da:	6a3a      	ldr	r2, [r7, #32]
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	429a      	cmp	r2, r3
 80045e0:	d3e6      	bcc.n	80045b0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80045e2:	8bfb      	ldrh	r3, [r7, #30]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d01e      	beq.n	8004626 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80045e8:	2300      	movs	r3, #0
 80045ea:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045f2:	461a      	mov	r2, r3
 80045f4:	f107 0310 	add.w	r3, r7, #16
 80045f8:	6812      	ldr	r2, [r2, #0]
 80045fa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80045fc:	693a      	ldr	r2, [r7, #16]
 80045fe:	6a3b      	ldr	r3, [r7, #32]
 8004600:	b2db      	uxtb	r3, r3
 8004602:	00db      	lsls	r3, r3, #3
 8004604:	fa22 f303 	lsr.w	r3, r2, r3
 8004608:	b2da      	uxtb	r2, r3
 800460a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460c:	701a      	strb	r2, [r3, #0]
      i++;
 800460e:	6a3b      	ldr	r3, [r7, #32]
 8004610:	3301      	adds	r3, #1
 8004612:	623b      	str	r3, [r7, #32]
      pDest++;
 8004614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004616:	3301      	adds	r3, #1
 8004618:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800461a:	8bfb      	ldrh	r3, [r7, #30]
 800461c:	3b01      	subs	r3, #1
 800461e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004620:	8bfb      	ldrh	r3, [r7, #30]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1ea      	bne.n	80045fc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004628:	4618      	mov	r0, r3
 800462a:	372c      	adds	r7, #44	; 0x2c
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004634:	b480      	push	{r7}
 8004636:	b085      	sub	sp, #20
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	785b      	ldrb	r3, [r3, #1]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d12c      	bne.n	80046aa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	015a      	lsls	r2, r3, #5
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	4413      	add	r3, r2
 8004658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2b00      	cmp	r3, #0
 8004660:	db12      	blt.n	8004688 <USB_EPSetStall+0x54>
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00f      	beq.n	8004688 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	015a      	lsls	r2, r3, #5
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	4413      	add	r3, r2
 8004670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68ba      	ldr	r2, [r7, #8]
 8004678:	0151      	lsls	r1, r2, #5
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	440a      	add	r2, r1
 800467e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004682:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004686:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	015a      	lsls	r2, r3, #5
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	4413      	add	r3, r2
 8004690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68ba      	ldr	r2, [r7, #8]
 8004698:	0151      	lsls	r1, r2, #5
 800469a:	68fa      	ldr	r2, [r7, #12]
 800469c:	440a      	add	r2, r1
 800469e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80046a6:	6013      	str	r3, [r2, #0]
 80046a8:	e02b      	b.n	8004702 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	015a      	lsls	r2, r3, #5
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	4413      	add	r3, r2
 80046b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	db12      	blt.n	80046e2 <USB_EPSetStall+0xae>
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d00f      	beq.n	80046e2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	015a      	lsls	r2, r3, #5
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	4413      	add	r3, r2
 80046ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68ba      	ldr	r2, [r7, #8]
 80046d2:	0151      	lsls	r1, r2, #5
 80046d4:	68fa      	ldr	r2, [r7, #12]
 80046d6:	440a      	add	r2, r1
 80046d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046dc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80046e0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	015a      	lsls	r2, r3, #5
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	4413      	add	r3, r2
 80046ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	68ba      	ldr	r2, [r7, #8]
 80046f2:	0151      	lsls	r1, r2, #5
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	440a      	add	r2, r1
 80046f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004700:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004702:	2300      	movs	r3, #0
}
 8004704:	4618      	mov	r0, r3
 8004706:	3714      	adds	r7, #20
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004710:	b480      	push	{r7}
 8004712:	b085      	sub	sp, #20
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	785b      	ldrb	r3, [r3, #1]
 8004728:	2b01      	cmp	r3, #1
 800472a:	d128      	bne.n	800477e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	015a      	lsls	r2, r3, #5
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	4413      	add	r3, r2
 8004734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	68ba      	ldr	r2, [r7, #8]
 800473c:	0151      	lsls	r1, r2, #5
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	440a      	add	r2, r1
 8004742:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004746:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800474a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	791b      	ldrb	r3, [r3, #4]
 8004750:	2b03      	cmp	r3, #3
 8004752:	d003      	beq.n	800475c <USB_EPClearStall+0x4c>
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	791b      	ldrb	r3, [r3, #4]
 8004758:	2b02      	cmp	r3, #2
 800475a:	d138      	bne.n	80047ce <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	015a      	lsls	r2, r3, #5
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	4413      	add	r3, r2
 8004764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68ba      	ldr	r2, [r7, #8]
 800476c:	0151      	lsls	r1, r2, #5
 800476e:	68fa      	ldr	r2, [r7, #12]
 8004770:	440a      	add	r2, r1
 8004772:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004776:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800477a:	6013      	str	r3, [r2, #0]
 800477c:	e027      	b.n	80047ce <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	015a      	lsls	r2, r3, #5
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	4413      	add	r3, r2
 8004786:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	68ba      	ldr	r2, [r7, #8]
 800478e:	0151      	lsls	r1, r2, #5
 8004790:	68fa      	ldr	r2, [r7, #12]
 8004792:	440a      	add	r2, r1
 8004794:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004798:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800479c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	791b      	ldrb	r3, [r3, #4]
 80047a2:	2b03      	cmp	r3, #3
 80047a4:	d003      	beq.n	80047ae <USB_EPClearStall+0x9e>
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	791b      	ldrb	r3, [r3, #4]
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d10f      	bne.n	80047ce <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	015a      	lsls	r2, r3, #5
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	4413      	add	r3, r2
 80047b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68ba      	ldr	r2, [r7, #8]
 80047be:	0151      	lsls	r1, r2, #5
 80047c0:	68fa      	ldr	r2, [r7, #12]
 80047c2:	440a      	add	r2, r1
 80047c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047cc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80047ce:	2300      	movs	r3, #0
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3714      	adds	r7, #20
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr

080047dc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80047dc:	b480      	push	{r7}
 80047de:	b085      	sub	sp, #20
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	460b      	mov	r3, r1
 80047e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	68fa      	ldr	r2, [r7, #12]
 80047f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047fa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80047fe:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	78fb      	ldrb	r3, [r7, #3]
 800480a:	011b      	lsls	r3, r3, #4
 800480c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004810:	68f9      	ldr	r1, [r7, #12]
 8004812:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004816:	4313      	orrs	r3, r2
 8004818:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800481a:	2300      	movs	r3, #0
}
 800481c:	4618      	mov	r0, r3
 800481e:	3714      	adds	r7, #20
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004828:	b480      	push	{r7}
 800482a:	b085      	sub	sp, #20
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68fa      	ldr	r2, [r7, #12]
 800483e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004842:	f023 0303 	bic.w	r3, r3, #3
 8004846:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004856:	f023 0302 	bic.w	r3, r3, #2
 800485a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800485c:	2300      	movs	r3, #0
}
 800485e:	4618      	mov	r0, r3
 8004860:	3714      	adds	r7, #20
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr

0800486a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800486a:	b480      	push	{r7}
 800486c:	b085      	sub	sp, #20
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	68fa      	ldr	r2, [r7, #12]
 8004880:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004884:	f023 0303 	bic.w	r3, r3, #3
 8004888:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004898:	f043 0302 	orr.w	r3, r3, #2
 800489c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800489e:	2300      	movs	r3, #0
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3714      	adds	r7, #20
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	695b      	ldr	r3, [r3, #20]
 80048b8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	68fa      	ldr	r2, [r7, #12]
 80048c0:	4013      	ands	r3, r2
 80048c2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80048c4:	68fb      	ldr	r3, [r7, #12]
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3714      	adds	r7, #20
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr

080048d2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80048d2:	b480      	push	{r7}
 80048d4:	b085      	sub	sp, #20
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048ee:	69db      	ldr	r3, [r3, #28]
 80048f0:	68ba      	ldr	r2, [r7, #8]
 80048f2:	4013      	ands	r3, r2
 80048f4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	0c1b      	lsrs	r3, r3, #16
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3714      	adds	r7, #20
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr

08004906 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004906:	b480      	push	{r7}
 8004908:	b085      	sub	sp, #20
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004918:	699b      	ldr	r3, [r3, #24]
 800491a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004922:	69db      	ldr	r3, [r3, #28]
 8004924:	68ba      	ldr	r2, [r7, #8]
 8004926:	4013      	ands	r3, r2
 8004928:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	b29b      	uxth	r3, r3
}
 800492e:	4618      	mov	r0, r3
 8004930:	3714      	adds	r7, #20
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr

0800493a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800493a:	b480      	push	{r7}
 800493c:	b085      	sub	sp, #20
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
 8004942:	460b      	mov	r3, r1
 8004944:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800494a:	78fb      	ldrb	r3, [r7, #3]
 800494c:	015a      	lsls	r2, r3, #5
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	4413      	add	r3, r2
 8004952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	68ba      	ldr	r2, [r7, #8]
 8004964:	4013      	ands	r3, r2
 8004966:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004968:	68bb      	ldr	r3, [r7, #8]
}
 800496a:	4618      	mov	r0, r3
 800496c:	3714      	adds	r7, #20
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr

08004976 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004976:	b480      	push	{r7}
 8004978:	b087      	sub	sp, #28
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
 800497e:	460b      	mov	r3, r1
 8004980:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004998:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800499a:	78fb      	ldrb	r3, [r7, #3]
 800499c:	f003 030f 	and.w	r3, r3, #15
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	fa22 f303 	lsr.w	r3, r2, r3
 80049a6:	01db      	lsls	r3, r3, #7
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	693a      	ldr	r2, [r7, #16]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80049b0:	78fb      	ldrb	r3, [r7, #3]
 80049b2:	015a      	lsls	r2, r3, #5
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	4413      	add	r3, r2
 80049b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	693a      	ldr	r2, [r7, #16]
 80049c0:	4013      	ands	r3, r2
 80049c2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80049c4:	68bb      	ldr	r3, [r7, #8]
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	371c      	adds	r7, #28
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr

080049d2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80049d2:	b480      	push	{r7}
 80049d4:	b083      	sub	sp, #12
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	695b      	ldr	r3, [r3, #20]
 80049de:	f003 0301 	and.w	r3, r3, #1
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	370c      	adds	r7, #12
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr

080049ee <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80049ee:	b480      	push	{r7}
 80049f0:	b085      	sub	sp, #20
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a08:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004a0c:	f023 0307 	bic.w	r3, r3, #7
 8004a10:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	68fa      	ldr	r2, [r7, #12]
 8004a1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a24:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004a26:	2300      	movs	r3, #0
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3714      	adds	r7, #20
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr

08004a34 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b087      	sub	sp, #28
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	607a      	str	r2, [r7, #4]
 8004a40:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	333c      	adds	r3, #60	; 0x3c
 8004a4a:	3304      	adds	r3, #4
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	4a26      	ldr	r2, [pc, #152]	; (8004aec <USB_EP0_OutStart+0xb8>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d90a      	bls.n	8004a6e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a68:	d101      	bne.n	8004a6e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	e037      	b.n	8004ade <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a74:	461a      	mov	r2, r3
 8004a76:	2300      	movs	r3, #0
 8004a78:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	697a      	ldr	r2, [r7, #20]
 8004a84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a88:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a8c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	697a      	ldr	r2, [r7, #20]
 8004a98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a9c:	f043 0318 	orr.w	r3, r3, #24
 8004aa0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	697a      	ldr	r2, [r7, #20]
 8004aac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ab0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004ab4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004ab6:	7afb      	ldrb	r3, [r7, #11]
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d10f      	bne.n	8004adc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	697a      	ldr	r2, [r7, #20]
 8004ad2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ad6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004ada:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	371c      	adds	r7, #28
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop
 8004aec:	4f54300a 	.word	0x4f54300a

08004af0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b085      	sub	sp, #20
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004af8:	2300      	movs	r3, #0
 8004afa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	3301      	adds	r3, #1
 8004b00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	4a13      	ldr	r2, [pc, #76]	; (8004b54 <USB_CoreReset+0x64>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d901      	bls.n	8004b0e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e01b      	b.n	8004b46 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	daf2      	bge.n	8004afc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004b16:	2300      	movs	r3, #0
 8004b18:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	691b      	ldr	r3, [r3, #16]
 8004b1e:	f043 0201 	orr.w	r2, r3, #1
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	3301      	adds	r3, #1
 8004b2a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	4a09      	ldr	r2, [pc, #36]	; (8004b54 <USB_CoreReset+0x64>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d901      	bls.n	8004b38 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004b34:	2303      	movs	r3, #3
 8004b36:	e006      	b.n	8004b46 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	691b      	ldr	r3, [r3, #16]
 8004b3c:	f003 0301 	and.w	r3, r3, #1
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d0f0      	beq.n	8004b26 <USB_CoreReset+0x36>

  return HAL_OK;
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3714      	adds	r7, #20
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr
 8004b52:	bf00      	nop
 8004b54:	00030d40 	.word	0x00030d40

08004b58 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	460b      	mov	r3, r1
 8004b62:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004b64:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004b68:	f002 fc94 	bl	8007494 <USBD_static_malloc>
 8004b6c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d109      	bne.n	8004b88 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	32b0      	adds	r2, #176	; 0xb0
 8004b7e:	2100      	movs	r1, #0
 8004b80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004b84:	2302      	movs	r3, #2
 8004b86:	e0d4      	b.n	8004d32 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004b88:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004b8c:	2100      	movs	r1, #0
 8004b8e:	68f8      	ldr	r0, [r7, #12]
 8004b90:	f002 fce8 	bl	8007564 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	32b0      	adds	r2, #176	; 0xb0
 8004b9e:	68f9      	ldr	r1, [r7, #12]
 8004ba0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	32b0      	adds	r2, #176	; 0xb0
 8004bae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	7c1b      	ldrb	r3, [r3, #16]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d138      	bne.n	8004c32 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004bc0:	4b5e      	ldr	r3, [pc, #376]	; (8004d3c <USBD_CDC_Init+0x1e4>)
 8004bc2:	7819      	ldrb	r1, [r3, #0]
 8004bc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004bc8:	2202      	movs	r2, #2
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f002 fb3f 	bl	800724e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004bd0:	4b5a      	ldr	r3, [pc, #360]	; (8004d3c <USBD_CDC_Init+0x1e4>)
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	f003 020f 	and.w	r2, r3, #15
 8004bd8:	6879      	ldr	r1, [r7, #4]
 8004bda:	4613      	mov	r3, r2
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	4413      	add	r3, r2
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	440b      	add	r3, r1
 8004be4:	3324      	adds	r3, #36	; 0x24
 8004be6:	2201      	movs	r2, #1
 8004be8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004bea:	4b55      	ldr	r3, [pc, #340]	; (8004d40 <USBD_CDC_Init+0x1e8>)
 8004bec:	7819      	ldrb	r1, [r3, #0]
 8004bee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004bf2:	2202      	movs	r2, #2
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f002 fb2a 	bl	800724e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004bfa:	4b51      	ldr	r3, [pc, #324]	; (8004d40 <USBD_CDC_Init+0x1e8>)
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	f003 020f 	and.w	r2, r3, #15
 8004c02:	6879      	ldr	r1, [r7, #4]
 8004c04:	4613      	mov	r3, r2
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	4413      	add	r3, r2
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	440b      	add	r3, r1
 8004c0e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004c12:	2201      	movs	r2, #1
 8004c14:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004c16:	4b4b      	ldr	r3, [pc, #300]	; (8004d44 <USBD_CDC_Init+0x1ec>)
 8004c18:	781b      	ldrb	r3, [r3, #0]
 8004c1a:	f003 020f 	and.w	r2, r3, #15
 8004c1e:	6879      	ldr	r1, [r7, #4]
 8004c20:	4613      	mov	r3, r2
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	4413      	add	r3, r2
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	440b      	add	r3, r1
 8004c2a:	3326      	adds	r3, #38	; 0x26
 8004c2c:	2210      	movs	r2, #16
 8004c2e:	801a      	strh	r2, [r3, #0]
 8004c30:	e035      	b.n	8004c9e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004c32:	4b42      	ldr	r3, [pc, #264]	; (8004d3c <USBD_CDC_Init+0x1e4>)
 8004c34:	7819      	ldrb	r1, [r3, #0]
 8004c36:	2340      	movs	r3, #64	; 0x40
 8004c38:	2202      	movs	r2, #2
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f002 fb07 	bl	800724e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004c40:	4b3e      	ldr	r3, [pc, #248]	; (8004d3c <USBD_CDC_Init+0x1e4>)
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	f003 020f 	and.w	r2, r3, #15
 8004c48:	6879      	ldr	r1, [r7, #4]
 8004c4a:	4613      	mov	r3, r2
 8004c4c:	009b      	lsls	r3, r3, #2
 8004c4e:	4413      	add	r3, r2
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	440b      	add	r3, r1
 8004c54:	3324      	adds	r3, #36	; 0x24
 8004c56:	2201      	movs	r2, #1
 8004c58:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004c5a:	4b39      	ldr	r3, [pc, #228]	; (8004d40 <USBD_CDC_Init+0x1e8>)
 8004c5c:	7819      	ldrb	r1, [r3, #0]
 8004c5e:	2340      	movs	r3, #64	; 0x40
 8004c60:	2202      	movs	r2, #2
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f002 faf3 	bl	800724e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004c68:	4b35      	ldr	r3, [pc, #212]	; (8004d40 <USBD_CDC_Init+0x1e8>)
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	f003 020f 	and.w	r2, r3, #15
 8004c70:	6879      	ldr	r1, [r7, #4]
 8004c72:	4613      	mov	r3, r2
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	4413      	add	r3, r2
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	440b      	add	r3, r1
 8004c7c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004c80:	2201      	movs	r2, #1
 8004c82:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004c84:	4b2f      	ldr	r3, [pc, #188]	; (8004d44 <USBD_CDC_Init+0x1ec>)
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	f003 020f 	and.w	r2, r3, #15
 8004c8c:	6879      	ldr	r1, [r7, #4]
 8004c8e:	4613      	mov	r3, r2
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	4413      	add	r3, r2
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	440b      	add	r3, r1
 8004c98:	3326      	adds	r3, #38	; 0x26
 8004c9a:	2210      	movs	r2, #16
 8004c9c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004c9e:	4b29      	ldr	r3, [pc, #164]	; (8004d44 <USBD_CDC_Init+0x1ec>)
 8004ca0:	7819      	ldrb	r1, [r3, #0]
 8004ca2:	2308      	movs	r3, #8
 8004ca4:	2203      	movs	r2, #3
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f002 fad1 	bl	800724e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004cac:	4b25      	ldr	r3, [pc, #148]	; (8004d44 <USBD_CDC_Init+0x1ec>)
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	f003 020f 	and.w	r2, r3, #15
 8004cb4:	6879      	ldr	r1, [r7, #4]
 8004cb6:	4613      	mov	r3, r2
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	4413      	add	r3, r2
 8004cbc:	009b      	lsls	r3, r3, #2
 8004cbe:	440b      	add	r3, r1
 8004cc0:	3324      	adds	r3, #36	; 0x24
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	33b0      	adds	r3, #176	; 0xb0
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	4413      	add	r3, r2
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d101      	bne.n	8004d00 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8004cfc:	2302      	movs	r3, #2
 8004cfe:	e018      	b.n	8004d32 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	7c1b      	ldrb	r3, [r3, #16]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d10a      	bne.n	8004d1e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004d08:	4b0d      	ldr	r3, [pc, #52]	; (8004d40 <USBD_CDC_Init+0x1e8>)
 8004d0a:	7819      	ldrb	r1, [r3, #0]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004d12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f002 fb88 	bl	800742c <USBD_LL_PrepareReceive>
 8004d1c:	e008      	b.n	8004d30 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004d1e:	4b08      	ldr	r3, [pc, #32]	; (8004d40 <USBD_CDC_Init+0x1e8>)
 8004d20:	7819      	ldrb	r1, [r3, #0]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004d28:	2340      	movs	r3, #64	; 0x40
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f002 fb7e 	bl	800742c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3710      	adds	r7, #16
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	20000097 	.word	0x20000097
 8004d40:	20000098 	.word	0x20000098
 8004d44:	20000099 	.word	0x20000099

08004d48 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b082      	sub	sp, #8
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	460b      	mov	r3, r1
 8004d52:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8004d54:	4b3a      	ldr	r3, [pc, #232]	; (8004e40 <USBD_CDC_DeInit+0xf8>)
 8004d56:	781b      	ldrb	r3, [r3, #0]
 8004d58:	4619      	mov	r1, r3
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f002 fa9d 	bl	800729a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8004d60:	4b37      	ldr	r3, [pc, #220]	; (8004e40 <USBD_CDC_DeInit+0xf8>)
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	f003 020f 	and.w	r2, r3, #15
 8004d68:	6879      	ldr	r1, [r7, #4]
 8004d6a:	4613      	mov	r3, r2
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	4413      	add	r3, r2
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	440b      	add	r3, r1
 8004d74:	3324      	adds	r3, #36	; 0x24
 8004d76:	2200      	movs	r2, #0
 8004d78:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8004d7a:	4b32      	ldr	r3, [pc, #200]	; (8004e44 <USBD_CDC_DeInit+0xfc>)
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	4619      	mov	r1, r3
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f002 fa8a 	bl	800729a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8004d86:	4b2f      	ldr	r3, [pc, #188]	; (8004e44 <USBD_CDC_DeInit+0xfc>)
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	f003 020f 	and.w	r2, r3, #15
 8004d8e:	6879      	ldr	r1, [r7, #4]
 8004d90:	4613      	mov	r3, r2
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	4413      	add	r3, r2
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	440b      	add	r3, r1
 8004d9a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004d9e:	2200      	movs	r2, #0
 8004da0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8004da2:	4b29      	ldr	r3, [pc, #164]	; (8004e48 <USBD_CDC_DeInit+0x100>)
 8004da4:	781b      	ldrb	r3, [r3, #0]
 8004da6:	4619      	mov	r1, r3
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f002 fa76 	bl	800729a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8004dae:	4b26      	ldr	r3, [pc, #152]	; (8004e48 <USBD_CDC_DeInit+0x100>)
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	f003 020f 	and.w	r2, r3, #15
 8004db6:	6879      	ldr	r1, [r7, #4]
 8004db8:	4613      	mov	r3, r2
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	4413      	add	r3, r2
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	440b      	add	r3, r1
 8004dc2:	3324      	adds	r3, #36	; 0x24
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8004dc8:	4b1f      	ldr	r3, [pc, #124]	; (8004e48 <USBD_CDC_DeInit+0x100>)
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	f003 020f 	and.w	r2, r3, #15
 8004dd0:	6879      	ldr	r1, [r7, #4]
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	4413      	add	r3, r2
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	440b      	add	r3, r1
 8004ddc:	3326      	adds	r3, #38	; 0x26
 8004dde:	2200      	movs	r2, #0
 8004de0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	32b0      	adds	r2, #176	; 0xb0
 8004dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d01f      	beq.n	8004e34 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	33b0      	adds	r3, #176	; 0xb0
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	4413      	add	r3, r2
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	32b0      	adds	r2, #176	; 0xb0
 8004e12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e16:	4618      	mov	r0, r3
 8004e18:	f002 fb4a 	bl	80074b0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	32b0      	adds	r2, #176	; 0xb0
 8004e26:	2100      	movs	r1, #0
 8004e28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004e34:	2300      	movs	r3, #0
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3708      	adds	r7, #8
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	20000097 	.word	0x20000097
 8004e44:	20000098 	.word	0x20000098
 8004e48:	20000099 	.word	0x20000099

08004e4c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b086      	sub	sp, #24
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	32b0      	adds	r2, #176	; 0xb0
 8004e60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e64:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004e66:	2300      	movs	r3, #0
 8004e68:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d101      	bne.n	8004e7c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	e0bf      	b.n	8004ffc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d050      	beq.n	8004f2a <USBD_CDC_Setup+0xde>
 8004e88:	2b20      	cmp	r3, #32
 8004e8a:	f040 80af 	bne.w	8004fec <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	88db      	ldrh	r3, [r3, #6]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d03a      	beq.n	8004f0c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	b25b      	sxtb	r3, r3
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	da1b      	bge.n	8004ed8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	33b0      	adds	r3, #176	; 0xb0
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	4413      	add	r3, r2
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	683a      	ldr	r2, [r7, #0]
 8004eb4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8004eb6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004eb8:	683a      	ldr	r2, [r7, #0]
 8004eba:	88d2      	ldrh	r2, [r2, #6]
 8004ebc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	88db      	ldrh	r3, [r3, #6]
 8004ec2:	2b07      	cmp	r3, #7
 8004ec4:	bf28      	it	cs
 8004ec6:	2307      	movcs	r3, #7
 8004ec8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	89fa      	ldrh	r2, [r7, #14]
 8004ece:	4619      	mov	r1, r3
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f001 fd89 	bl	80069e8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8004ed6:	e090      	b.n	8004ffa <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	785a      	ldrb	r2, [r3, #1]
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	88db      	ldrh	r3, [r3, #6]
 8004ee6:	2b3f      	cmp	r3, #63	; 0x3f
 8004ee8:	d803      	bhi.n	8004ef2 <USBD_CDC_Setup+0xa6>
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	88db      	ldrh	r3, [r3, #6]
 8004eee:	b2da      	uxtb	r2, r3
 8004ef0:	e000      	b.n	8004ef4 <USBD_CDC_Setup+0xa8>
 8004ef2:	2240      	movs	r2, #64	; 0x40
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8004efa:	6939      	ldr	r1, [r7, #16]
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8004f02:	461a      	mov	r2, r3
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f001 fd9b 	bl	8006a40 <USBD_CtlPrepareRx>
      break;
 8004f0a:	e076      	b.n	8004ffa <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	33b0      	adds	r3, #176	; 0xb0
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	4413      	add	r3, r2
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	683a      	ldr	r2, [r7, #0]
 8004f20:	7850      	ldrb	r0, [r2, #1]
 8004f22:	2200      	movs	r2, #0
 8004f24:	6839      	ldr	r1, [r7, #0]
 8004f26:	4798      	blx	r3
      break;
 8004f28:	e067      	b.n	8004ffa <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	785b      	ldrb	r3, [r3, #1]
 8004f2e:	2b0b      	cmp	r3, #11
 8004f30:	d851      	bhi.n	8004fd6 <USBD_CDC_Setup+0x18a>
 8004f32:	a201      	add	r2, pc, #4	; (adr r2, 8004f38 <USBD_CDC_Setup+0xec>)
 8004f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f38:	08004f69 	.word	0x08004f69
 8004f3c:	08004fe5 	.word	0x08004fe5
 8004f40:	08004fd7 	.word	0x08004fd7
 8004f44:	08004fd7 	.word	0x08004fd7
 8004f48:	08004fd7 	.word	0x08004fd7
 8004f4c:	08004fd7 	.word	0x08004fd7
 8004f50:	08004fd7 	.word	0x08004fd7
 8004f54:	08004fd7 	.word	0x08004fd7
 8004f58:	08004fd7 	.word	0x08004fd7
 8004f5c:	08004fd7 	.word	0x08004fd7
 8004f60:	08004f93 	.word	0x08004f93
 8004f64:	08004fbd 	.word	0x08004fbd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	2b03      	cmp	r3, #3
 8004f72:	d107      	bne.n	8004f84 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004f74:	f107 030a 	add.w	r3, r7, #10
 8004f78:	2202      	movs	r2, #2
 8004f7a:	4619      	mov	r1, r3
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f001 fd33 	bl	80069e8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004f82:	e032      	b.n	8004fea <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004f84:	6839      	ldr	r1, [r7, #0]
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f001 fcbd 	bl	8006906 <USBD_CtlError>
            ret = USBD_FAIL;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	75fb      	strb	r3, [r7, #23]
          break;
 8004f90:	e02b      	b.n	8004fea <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	2b03      	cmp	r3, #3
 8004f9c:	d107      	bne.n	8004fae <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004f9e:	f107 030d 	add.w	r3, r7, #13
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f001 fd1e 	bl	80069e8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004fac:	e01d      	b.n	8004fea <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004fae:	6839      	ldr	r1, [r7, #0]
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f001 fca8 	bl	8006906 <USBD_CtlError>
            ret = USBD_FAIL;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	75fb      	strb	r3, [r7, #23]
          break;
 8004fba:	e016      	b.n	8004fea <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	2b03      	cmp	r3, #3
 8004fc6:	d00f      	beq.n	8004fe8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8004fc8:	6839      	ldr	r1, [r7, #0]
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f001 fc9b 	bl	8006906 <USBD_CtlError>
            ret = USBD_FAIL;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004fd4:	e008      	b.n	8004fe8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004fd6:	6839      	ldr	r1, [r7, #0]
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f001 fc94 	bl	8006906 <USBD_CtlError>
          ret = USBD_FAIL;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	75fb      	strb	r3, [r7, #23]
          break;
 8004fe2:	e002      	b.n	8004fea <USBD_CDC_Setup+0x19e>
          break;
 8004fe4:	bf00      	nop
 8004fe6:	e008      	b.n	8004ffa <USBD_CDC_Setup+0x1ae>
          break;
 8004fe8:	bf00      	nop
      }
      break;
 8004fea:	e006      	b.n	8004ffa <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8004fec:	6839      	ldr	r1, [r7, #0]
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f001 fc89 	bl	8006906 <USBD_CtlError>
      ret = USBD_FAIL;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	75fb      	strb	r3, [r7, #23]
      break;
 8004ff8:	bf00      	nop
  }

  return (uint8_t)ret;
 8004ffa:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3718      	adds	r7, #24
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	460b      	mov	r3, r1
 800500e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005016:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	32b0      	adds	r2, #176	; 0xb0
 8005022:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d101      	bne.n	800502e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800502a:	2303      	movs	r3, #3
 800502c:	e065      	b.n	80050fa <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	32b0      	adds	r2, #176	; 0xb0
 8005038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800503c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800503e:	78fb      	ldrb	r3, [r7, #3]
 8005040:	f003 020f 	and.w	r2, r3, #15
 8005044:	6879      	ldr	r1, [r7, #4]
 8005046:	4613      	mov	r3, r2
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	4413      	add	r3, r2
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	440b      	add	r3, r1
 8005050:	3318      	adds	r3, #24
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d02f      	beq.n	80050b8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005058:	78fb      	ldrb	r3, [r7, #3]
 800505a:	f003 020f 	and.w	r2, r3, #15
 800505e:	6879      	ldr	r1, [r7, #4]
 8005060:	4613      	mov	r3, r2
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	4413      	add	r3, r2
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	440b      	add	r3, r1
 800506a:	3318      	adds	r3, #24
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	78fb      	ldrb	r3, [r7, #3]
 8005070:	f003 010f 	and.w	r1, r3, #15
 8005074:	68f8      	ldr	r0, [r7, #12]
 8005076:	460b      	mov	r3, r1
 8005078:	00db      	lsls	r3, r3, #3
 800507a:	440b      	add	r3, r1
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	4403      	add	r3, r0
 8005080:	3348      	adds	r3, #72	; 0x48
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	fbb2 f1f3 	udiv	r1, r2, r3
 8005088:	fb01 f303 	mul.w	r3, r1, r3
 800508c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800508e:	2b00      	cmp	r3, #0
 8005090:	d112      	bne.n	80050b8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005092:	78fb      	ldrb	r3, [r7, #3]
 8005094:	f003 020f 	and.w	r2, r3, #15
 8005098:	6879      	ldr	r1, [r7, #4]
 800509a:	4613      	mov	r3, r2
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	4413      	add	r3, r2
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	440b      	add	r3, r1
 80050a4:	3318      	adds	r3, #24
 80050a6:	2200      	movs	r2, #0
 80050a8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80050aa:	78f9      	ldrb	r1, [r7, #3]
 80050ac:	2300      	movs	r3, #0
 80050ae:	2200      	movs	r2, #0
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f002 f99a 	bl	80073ea <USBD_LL_Transmit>
 80050b6:	e01f      	b.n	80050f8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	33b0      	adds	r3, #176	; 0xb0
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	4413      	add	r3, r2
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d010      	beq.n	80050f8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	33b0      	adds	r3, #176	; 0xb0
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	4413      	add	r3, r2
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	691b      	ldr	r3, [r3, #16]
 80050e8:	68ba      	ldr	r2, [r7, #8]
 80050ea:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80050ee:	68ba      	ldr	r2, [r7, #8]
 80050f0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80050f4:	78fa      	ldrb	r2, [r7, #3]
 80050f6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3710      	adds	r7, #16
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}

08005102 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005102:	b580      	push	{r7, lr}
 8005104:	b084      	sub	sp, #16
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
 800510a:	460b      	mov	r3, r1
 800510c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	32b0      	adds	r2, #176	; 0xb0
 8005118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800511c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	32b0      	adds	r2, #176	; 0xb0
 8005128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d101      	bne.n	8005134 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005130:	2303      	movs	r3, #3
 8005132:	e01a      	b.n	800516a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005134:	78fb      	ldrb	r3, [r7, #3]
 8005136:	4619      	mov	r1, r3
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f002 f998 	bl	800746e <USBD_LL_GetRxDataSize>
 800513e:	4602      	mov	r2, r0
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	33b0      	adds	r3, #176	; 0xb0
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	4413      	add	r3, r2
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	68fa      	ldr	r2, [r7, #12]
 800515a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800515e:	68fa      	ldr	r2, [r7, #12]
 8005160:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005164:	4611      	mov	r1, r2
 8005166:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	3710      	adds	r7, #16
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}

08005172 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005172:	b580      	push	{r7, lr}
 8005174:	b084      	sub	sp, #16
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	32b0      	adds	r2, #176	; 0xb0
 8005184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005188:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d101      	bne.n	8005194 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005190:	2303      	movs	r3, #3
 8005192:	e025      	b.n	80051e0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	33b0      	adds	r3, #176	; 0xb0
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	4413      	add	r3, r2
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d01a      	beq.n	80051de <USBD_CDC_EP0_RxReady+0x6c>
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80051ae:	2bff      	cmp	r3, #255	; 0xff
 80051b0:	d015      	beq.n	80051de <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	33b0      	adds	r3, #176	; 0xb0
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	4413      	add	r3, r2
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	68fa      	ldr	r2, [r7, #12]
 80051c6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80051ca:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80051cc:	68fa      	ldr	r2, [r7, #12]
 80051ce:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80051d2:	b292      	uxth	r2, r2
 80051d4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	22ff      	movs	r2, #255	; 0xff
 80051da:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80051de:	2300      	movs	r3, #0
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3710      	adds	r7, #16
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b086      	sub	sp, #24
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80051f0:	2182      	movs	r1, #130	; 0x82
 80051f2:	4818      	ldr	r0, [pc, #96]	; (8005254 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80051f4:	f000 fd4f 	bl	8005c96 <USBD_GetEpDesc>
 80051f8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80051fa:	2101      	movs	r1, #1
 80051fc:	4815      	ldr	r0, [pc, #84]	; (8005254 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80051fe:	f000 fd4a 	bl	8005c96 <USBD_GetEpDesc>
 8005202:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005204:	2181      	movs	r1, #129	; 0x81
 8005206:	4813      	ldr	r0, [pc, #76]	; (8005254 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005208:	f000 fd45 	bl	8005c96 <USBD_GetEpDesc>
 800520c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d002      	beq.n	800521a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	2210      	movs	r2, #16
 8005218:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d006      	beq.n	800522e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	2200      	movs	r2, #0
 8005224:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005228:	711a      	strb	r2, [r3, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d006      	beq.n	8005242 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2200      	movs	r2, #0
 8005238:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800523c:	711a      	strb	r2, [r3, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2243      	movs	r2, #67	; 0x43
 8005246:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005248:	4b02      	ldr	r3, [pc, #8]	; (8005254 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800524a:	4618      	mov	r0, r3
 800524c:	3718      	adds	r7, #24
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	20000054 	.word	0x20000054

08005258 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b086      	sub	sp, #24
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005260:	2182      	movs	r1, #130	; 0x82
 8005262:	4818      	ldr	r0, [pc, #96]	; (80052c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005264:	f000 fd17 	bl	8005c96 <USBD_GetEpDesc>
 8005268:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800526a:	2101      	movs	r1, #1
 800526c:	4815      	ldr	r0, [pc, #84]	; (80052c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800526e:	f000 fd12 	bl	8005c96 <USBD_GetEpDesc>
 8005272:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005274:	2181      	movs	r1, #129	; 0x81
 8005276:	4813      	ldr	r0, [pc, #76]	; (80052c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005278:	f000 fd0d 	bl	8005c96 <USBD_GetEpDesc>
 800527c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d002      	beq.n	800528a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	2210      	movs	r2, #16
 8005288:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d006      	beq.n	800529e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	2200      	movs	r2, #0
 8005294:	711a      	strb	r2, [r3, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	f042 0202 	orr.w	r2, r2, #2
 800529c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d006      	beq.n	80052b2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2200      	movs	r2, #0
 80052a8:	711a      	strb	r2, [r3, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	f042 0202 	orr.w	r2, r2, #2
 80052b0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2243      	movs	r2, #67	; 0x43
 80052b6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80052b8:	4b02      	ldr	r3, [pc, #8]	; (80052c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3718      	adds	r7, #24
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	20000054 	.word	0x20000054

080052c8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b086      	sub	sp, #24
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80052d0:	2182      	movs	r1, #130	; 0x82
 80052d2:	4818      	ldr	r0, [pc, #96]	; (8005334 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80052d4:	f000 fcdf 	bl	8005c96 <USBD_GetEpDesc>
 80052d8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80052da:	2101      	movs	r1, #1
 80052dc:	4815      	ldr	r0, [pc, #84]	; (8005334 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80052de:	f000 fcda 	bl	8005c96 <USBD_GetEpDesc>
 80052e2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80052e4:	2181      	movs	r1, #129	; 0x81
 80052e6:	4813      	ldr	r0, [pc, #76]	; (8005334 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80052e8:	f000 fcd5 	bl	8005c96 <USBD_GetEpDesc>
 80052ec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d002      	beq.n	80052fa <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	2210      	movs	r2, #16
 80052f8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d006      	beq.n	800530e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	2200      	movs	r2, #0
 8005304:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005308:	711a      	strb	r2, [r3, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d006      	beq.n	8005322 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2200      	movs	r2, #0
 8005318:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800531c:	711a      	strb	r2, [r3, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2243      	movs	r2, #67	; 0x43
 8005326:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005328:	4b02      	ldr	r3, [pc, #8]	; (8005334 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800532a:	4618      	mov	r0, r3
 800532c:	3718      	adds	r7, #24
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop
 8005334:	20000054 	.word	0x20000054

08005338 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	220a      	movs	r2, #10
 8005344:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005346:	4b03      	ldr	r3, [pc, #12]	; (8005354 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005348:	4618      	mov	r0, r3
 800534a:	370c      	adds	r7, #12
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr
 8005354:	20000010 	.word	0x20000010

08005358 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005358:	b480      	push	{r7}
 800535a:	b083      	sub	sp, #12
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d101      	bne.n	800536c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005368:	2303      	movs	r3, #3
 800536a:	e009      	b.n	8005380 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	33b0      	adds	r3, #176	; 0xb0
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	4413      	add	r3, r2
 800537a:	683a      	ldr	r2, [r7, #0]
 800537c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800537e:	2300      	movs	r3, #0
}
 8005380:	4618      	mov	r0, r3
 8005382:	370c      	adds	r7, #12
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800538c:	b480      	push	{r7}
 800538e:	b087      	sub	sp, #28
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	32b0      	adds	r2, #176	; 0xb0
 80053a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053a6:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d101      	bne.n	80053b2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80053ae:	2303      	movs	r3, #3
 80053b0:	e008      	b.n	80053c4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	68ba      	ldr	r2, [r7, #8]
 80053b6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80053c2:	2300      	movs	r3, #0
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	371c      	adds	r7, #28
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b085      	sub	sp, #20
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	32b0      	adds	r2, #176	; 0xb0
 80053e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053e8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d101      	bne.n	80053f4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80053f0:	2303      	movs	r3, #3
 80053f2:	e004      	b.n	80053fe <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	683a      	ldr	r2, [r7, #0]
 80053f8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80053fc:	2300      	movs	r3, #0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3714      	adds	r7, #20
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr
	...

0800540c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b084      	sub	sp, #16
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	32b0      	adds	r2, #176	; 0xb0
 800541e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005422:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005424:	2301      	movs	r3, #1
 8005426:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	32b0      	adds	r2, #176	; 0xb0
 8005432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d101      	bne.n	800543e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800543a:	2303      	movs	r3, #3
 800543c:	e025      	b.n	800548a <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005444:	2b00      	cmp	r3, #0
 8005446:	d11f      	bne.n	8005488 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	2201      	movs	r2, #1
 800544c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005450:	4b10      	ldr	r3, [pc, #64]	; (8005494 <USBD_CDC_TransmitPacket+0x88>)
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	f003 020f 	and.w	r2, r3, #15
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	4613      	mov	r3, r2
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	4413      	add	r3, r2
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	4403      	add	r3, r0
 800546a:	3318      	adds	r3, #24
 800546c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800546e:	4b09      	ldr	r3, [pc, #36]	; (8005494 <USBD_CDC_TransmitPacket+0x88>)
 8005470:	7819      	ldrb	r1, [r3, #0]
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f001 ffb3 	bl	80073ea <USBD_LL_Transmit>

    ret = USBD_OK;
 8005484:	2300      	movs	r3, #0
 8005486:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005488:	7bfb      	ldrb	r3, [r7, #15]
}
 800548a:	4618      	mov	r0, r3
 800548c:	3710      	adds	r7, #16
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
 8005492:	bf00      	nop
 8005494:	20000097 	.word	0x20000097

08005498 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b084      	sub	sp, #16
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	32b0      	adds	r2, #176	; 0xb0
 80054aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054ae:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	32b0      	adds	r2, #176	; 0xb0
 80054ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d101      	bne.n	80054c6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80054c2:	2303      	movs	r3, #3
 80054c4:	e018      	b.n	80054f8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	7c1b      	ldrb	r3, [r3, #16]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d10a      	bne.n	80054e4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80054ce:	4b0c      	ldr	r3, [pc, #48]	; (8005500 <USBD_CDC_ReceivePacket+0x68>)
 80054d0:	7819      	ldrb	r1, [r3, #0]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80054d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f001 ffa5 	bl	800742c <USBD_LL_PrepareReceive>
 80054e2:	e008      	b.n	80054f6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80054e4:	4b06      	ldr	r3, [pc, #24]	; (8005500 <USBD_CDC_ReceivePacket+0x68>)
 80054e6:	7819      	ldrb	r1, [r3, #0]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80054ee:	2340      	movs	r3, #64	; 0x40
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f001 ff9b 	bl	800742c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80054f6:	2300      	movs	r3, #0
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3710      	adds	r7, #16
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}
 8005500:	20000098 	.word	0x20000098

08005504 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b086      	sub	sp, #24
 8005508:	af00      	add	r7, sp, #0
 800550a:	60f8      	str	r0, [r7, #12]
 800550c:	60b9      	str	r1, [r7, #8]
 800550e:	4613      	mov	r3, r2
 8005510:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d101      	bne.n	800551c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005518:	2303      	movs	r3, #3
 800551a:	e01f      	b.n	800555c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2200      	movs	r2, #0
 8005520:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2200      	movs	r2, #0
 8005528:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2200      	movs	r2, #0
 8005530:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d003      	beq.n	8005542 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	68ba      	ldr	r2, [r7, #8]
 800553e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2201      	movs	r2, #1
 8005546:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	79fa      	ldrb	r2, [r7, #7]
 800554e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005550:	68f8      	ldr	r0, [r7, #12]
 8005552:	f001 fe15 	bl	8007180 <USBD_LL_Init>
 8005556:	4603      	mov	r3, r0
 8005558:	75fb      	strb	r3, [r7, #23]

  return ret;
 800555a:	7dfb      	ldrb	r3, [r7, #23]
}
 800555c:	4618      	mov	r0, r3
 800555e:	3718      	adds	r7, #24
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800556e:	2300      	movs	r3, #0
 8005570:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d101      	bne.n	800557c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005578:	2303      	movs	r3, #3
 800557a:	e025      	b.n	80055c8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	683a      	ldr	r2, [r7, #0]
 8005580:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	32ae      	adds	r2, #174	; 0xae
 800558e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005594:	2b00      	cmp	r3, #0
 8005596:	d00f      	beq.n	80055b8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	32ae      	adds	r2, #174	; 0xae
 80055a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a8:	f107 020e 	add.w	r2, r7, #14
 80055ac:	4610      	mov	r0, r2
 80055ae:	4798      	blx	r3
 80055b0:	4602      	mov	r2, r0
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80055be:	1c5a      	adds	r2, r3, #1
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80055c6:	2300      	movs	r3, #0
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3710      	adds	r7, #16
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}

080055d0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b082      	sub	sp, #8
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f001 fe1d 	bl	8007218 <USBD_LL_Start>
 80055de:	4603      	mov	r3, r0
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3708      	adds	r7, #8
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80055f0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	370c      	adds	r7, #12
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr

080055fe <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80055fe:	b580      	push	{r7, lr}
 8005600:	b084      	sub	sp, #16
 8005602:	af00      	add	r7, sp, #0
 8005604:	6078      	str	r0, [r7, #4]
 8005606:	460b      	mov	r3, r1
 8005608:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800560a:	2300      	movs	r3, #0
 800560c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005614:	2b00      	cmp	r3, #0
 8005616:	d009      	beq.n	800562c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	78fa      	ldrb	r2, [r7, #3]
 8005622:	4611      	mov	r1, r2
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	4798      	blx	r3
 8005628:	4603      	mov	r3, r0
 800562a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800562c:	7bfb      	ldrb	r3, [r7, #15]
}
 800562e:	4618      	mov	r0, r3
 8005630:	3710      	adds	r7, #16
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}

08005636 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005636:	b580      	push	{r7, lr}
 8005638:	b084      	sub	sp, #16
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
 800563e:	460b      	mov	r3, r1
 8005640:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005642:	2300      	movs	r3, #0
 8005644:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	78fa      	ldrb	r2, [r7, #3]
 8005650:	4611      	mov	r1, r2
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	4798      	blx	r3
 8005656:	4603      	mov	r3, r0
 8005658:	2b00      	cmp	r3, #0
 800565a:	d001      	beq.n	8005660 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800565c:	2303      	movs	r3, #3
 800565e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005660:	7bfb      	ldrb	r3, [r7, #15]
}
 8005662:	4618      	mov	r0, r3
 8005664:	3710      	adds	r7, #16
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}

0800566a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800566a:	b580      	push	{r7, lr}
 800566c:	b084      	sub	sp, #16
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
 8005672:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800567a:	6839      	ldr	r1, [r7, #0]
 800567c:	4618      	mov	r0, r3
 800567e:	f001 f908 	bl	8006892 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2201      	movs	r2, #1
 8005686:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005690:	461a      	mov	r2, r3
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800569e:	f003 031f 	and.w	r3, r3, #31
 80056a2:	2b02      	cmp	r3, #2
 80056a4:	d01a      	beq.n	80056dc <USBD_LL_SetupStage+0x72>
 80056a6:	2b02      	cmp	r3, #2
 80056a8:	d822      	bhi.n	80056f0 <USBD_LL_SetupStage+0x86>
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d002      	beq.n	80056b4 <USBD_LL_SetupStage+0x4a>
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d00a      	beq.n	80056c8 <USBD_LL_SetupStage+0x5e>
 80056b2:	e01d      	b.n	80056f0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80056ba:	4619      	mov	r1, r3
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f000 fb5f 	bl	8005d80 <USBD_StdDevReq>
 80056c2:	4603      	mov	r3, r0
 80056c4:	73fb      	strb	r3, [r7, #15]
      break;
 80056c6:	e020      	b.n	800570a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80056ce:	4619      	mov	r1, r3
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f000 fbc7 	bl	8005e64 <USBD_StdItfReq>
 80056d6:	4603      	mov	r3, r0
 80056d8:	73fb      	strb	r3, [r7, #15]
      break;
 80056da:	e016      	b.n	800570a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80056e2:	4619      	mov	r1, r3
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f000 fc29 	bl	8005f3c <USBD_StdEPReq>
 80056ea:	4603      	mov	r3, r0
 80056ec:	73fb      	strb	r3, [r7, #15]
      break;
 80056ee:	e00c      	b.n	800570a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80056f6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	4619      	mov	r1, r3
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f001 fdea 	bl	80072d8 <USBD_LL_StallEP>
 8005704:	4603      	mov	r3, r0
 8005706:	73fb      	strb	r3, [r7, #15]
      break;
 8005708:	bf00      	nop
  }

  return ret;
 800570a:	7bfb      	ldrb	r3, [r7, #15]
}
 800570c:	4618      	mov	r0, r3
 800570e:	3710      	adds	r7, #16
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}

08005714 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b086      	sub	sp, #24
 8005718:	af00      	add	r7, sp, #0
 800571a:	60f8      	str	r0, [r7, #12]
 800571c:	460b      	mov	r3, r1
 800571e:	607a      	str	r2, [r7, #4]
 8005720:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005722:	2300      	movs	r3, #0
 8005724:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005726:	7afb      	ldrb	r3, [r7, #11]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d16e      	bne.n	800580a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005732:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800573a:	2b03      	cmp	r3, #3
 800573c:	f040 8098 	bne.w	8005870 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	689a      	ldr	r2, [r3, #8]
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	429a      	cmp	r2, r3
 800574a:	d913      	bls.n	8005774 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	689a      	ldr	r2, [r3, #8]
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	1ad2      	subs	r2, r2, r3
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	68da      	ldr	r2, [r3, #12]
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	4293      	cmp	r3, r2
 8005764:	bf28      	it	cs
 8005766:	4613      	movcs	r3, r2
 8005768:	461a      	mov	r2, r3
 800576a:	6879      	ldr	r1, [r7, #4]
 800576c:	68f8      	ldr	r0, [r7, #12]
 800576e:	f001 f984 	bl	8006a7a <USBD_CtlContinueRx>
 8005772:	e07d      	b.n	8005870 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800577a:	f003 031f 	and.w	r3, r3, #31
 800577e:	2b02      	cmp	r3, #2
 8005780:	d014      	beq.n	80057ac <USBD_LL_DataOutStage+0x98>
 8005782:	2b02      	cmp	r3, #2
 8005784:	d81d      	bhi.n	80057c2 <USBD_LL_DataOutStage+0xae>
 8005786:	2b00      	cmp	r3, #0
 8005788:	d002      	beq.n	8005790 <USBD_LL_DataOutStage+0x7c>
 800578a:	2b01      	cmp	r3, #1
 800578c:	d003      	beq.n	8005796 <USBD_LL_DataOutStage+0x82>
 800578e:	e018      	b.n	80057c2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005790:	2300      	movs	r3, #0
 8005792:	75bb      	strb	r3, [r7, #22]
            break;
 8005794:	e018      	b.n	80057c8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800579c:	b2db      	uxtb	r3, r3
 800579e:	4619      	mov	r1, r3
 80057a0:	68f8      	ldr	r0, [r7, #12]
 80057a2:	f000 fa5e 	bl	8005c62 <USBD_CoreFindIF>
 80057a6:	4603      	mov	r3, r0
 80057a8:	75bb      	strb	r3, [r7, #22]
            break;
 80057aa:	e00d      	b.n	80057c8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	4619      	mov	r1, r3
 80057b6:	68f8      	ldr	r0, [r7, #12]
 80057b8:	f000 fa60 	bl	8005c7c <USBD_CoreFindEP>
 80057bc:	4603      	mov	r3, r0
 80057be:	75bb      	strb	r3, [r7, #22]
            break;
 80057c0:	e002      	b.n	80057c8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80057c2:	2300      	movs	r3, #0
 80057c4:	75bb      	strb	r3, [r7, #22]
            break;
 80057c6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80057c8:	7dbb      	ldrb	r3, [r7, #22]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d119      	bne.n	8005802 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	2b03      	cmp	r3, #3
 80057d8:	d113      	bne.n	8005802 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80057da:	7dba      	ldrb	r2, [r7, #22]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	32ae      	adds	r2, #174	; 0xae
 80057e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057e4:	691b      	ldr	r3, [r3, #16]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d00b      	beq.n	8005802 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80057ea:	7dba      	ldrb	r2, [r7, #22]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80057f2:	7dba      	ldrb	r2, [r7, #22]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	32ae      	adds	r2, #174	; 0xae
 80057f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	68f8      	ldr	r0, [r7, #12]
 8005800:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005802:	68f8      	ldr	r0, [r7, #12]
 8005804:	f001 f94a 	bl	8006a9c <USBD_CtlSendStatus>
 8005808:	e032      	b.n	8005870 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800580a:	7afb      	ldrb	r3, [r7, #11]
 800580c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005810:	b2db      	uxtb	r3, r3
 8005812:	4619      	mov	r1, r3
 8005814:	68f8      	ldr	r0, [r7, #12]
 8005816:	f000 fa31 	bl	8005c7c <USBD_CoreFindEP>
 800581a:	4603      	mov	r3, r0
 800581c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800581e:	7dbb      	ldrb	r3, [r7, #22]
 8005820:	2bff      	cmp	r3, #255	; 0xff
 8005822:	d025      	beq.n	8005870 <USBD_LL_DataOutStage+0x15c>
 8005824:	7dbb      	ldrb	r3, [r7, #22]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d122      	bne.n	8005870 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005830:	b2db      	uxtb	r3, r3
 8005832:	2b03      	cmp	r3, #3
 8005834:	d117      	bne.n	8005866 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005836:	7dba      	ldrb	r2, [r7, #22]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	32ae      	adds	r2, #174	; 0xae
 800583c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005840:	699b      	ldr	r3, [r3, #24]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d00f      	beq.n	8005866 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005846:	7dba      	ldrb	r2, [r7, #22]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800584e:	7dba      	ldrb	r2, [r7, #22]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	32ae      	adds	r2, #174	; 0xae
 8005854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005858:	699b      	ldr	r3, [r3, #24]
 800585a:	7afa      	ldrb	r2, [r7, #11]
 800585c:	4611      	mov	r1, r2
 800585e:	68f8      	ldr	r0, [r7, #12]
 8005860:	4798      	blx	r3
 8005862:	4603      	mov	r3, r0
 8005864:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005866:	7dfb      	ldrb	r3, [r7, #23]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d001      	beq.n	8005870 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800586c:	7dfb      	ldrb	r3, [r7, #23]
 800586e:	e000      	b.n	8005872 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005870:	2300      	movs	r3, #0
}
 8005872:	4618      	mov	r0, r3
 8005874:	3718      	adds	r7, #24
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}

0800587a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800587a:	b580      	push	{r7, lr}
 800587c:	b086      	sub	sp, #24
 800587e:	af00      	add	r7, sp, #0
 8005880:	60f8      	str	r0, [r7, #12]
 8005882:	460b      	mov	r3, r1
 8005884:	607a      	str	r2, [r7, #4]
 8005886:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005888:	7afb      	ldrb	r3, [r7, #11]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d16f      	bne.n	800596e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	3314      	adds	r3, #20
 8005892:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800589a:	2b02      	cmp	r3, #2
 800589c:	d15a      	bne.n	8005954 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	689a      	ldr	r2, [r3, #8]
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d914      	bls.n	80058d4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	689a      	ldr	r2, [r3, #8]
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	1ad2      	subs	r2, r2, r3
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	461a      	mov	r2, r3
 80058be:	6879      	ldr	r1, [r7, #4]
 80058c0:	68f8      	ldr	r0, [r7, #12]
 80058c2:	f001 f8ac 	bl	8006a1e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80058c6:	2300      	movs	r3, #0
 80058c8:	2200      	movs	r2, #0
 80058ca:	2100      	movs	r1, #0
 80058cc:	68f8      	ldr	r0, [r7, #12]
 80058ce:	f001 fdad 	bl	800742c <USBD_LL_PrepareReceive>
 80058d2:	e03f      	b.n	8005954 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	68da      	ldr	r2, [r3, #12]
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	429a      	cmp	r2, r3
 80058de:	d11c      	bne.n	800591a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	685a      	ldr	r2, [r3, #4]
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d316      	bcc.n	800591a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	685a      	ldr	r2, [r3, #4]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d20f      	bcs.n	800591a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80058fa:	2200      	movs	r2, #0
 80058fc:	2100      	movs	r1, #0
 80058fe:	68f8      	ldr	r0, [r7, #12]
 8005900:	f001 f88d 	bl	8006a1e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2200      	movs	r2, #0
 8005908:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800590c:	2300      	movs	r3, #0
 800590e:	2200      	movs	r2, #0
 8005910:	2100      	movs	r1, #0
 8005912:	68f8      	ldr	r0, [r7, #12]
 8005914:	f001 fd8a 	bl	800742c <USBD_LL_PrepareReceive>
 8005918:	e01c      	b.n	8005954 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005920:	b2db      	uxtb	r3, r3
 8005922:	2b03      	cmp	r3, #3
 8005924:	d10f      	bne.n	8005946 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d009      	beq.n	8005946 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2200      	movs	r2, #0
 8005936:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	68f8      	ldr	r0, [r7, #12]
 8005944:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005946:	2180      	movs	r1, #128	; 0x80
 8005948:	68f8      	ldr	r0, [r7, #12]
 800594a:	f001 fcc5 	bl	80072d8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800594e:	68f8      	ldr	r0, [r7, #12]
 8005950:	f001 f8b7 	bl	8006ac2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800595a:	2b00      	cmp	r3, #0
 800595c:	d03a      	beq.n	80059d4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800595e:	68f8      	ldr	r0, [r7, #12]
 8005960:	f7ff fe42 	bl	80055e8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2200      	movs	r2, #0
 8005968:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800596c:	e032      	b.n	80059d4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800596e:	7afb      	ldrb	r3, [r7, #11]
 8005970:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005974:	b2db      	uxtb	r3, r3
 8005976:	4619      	mov	r1, r3
 8005978:	68f8      	ldr	r0, [r7, #12]
 800597a:	f000 f97f 	bl	8005c7c <USBD_CoreFindEP>
 800597e:	4603      	mov	r3, r0
 8005980:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005982:	7dfb      	ldrb	r3, [r7, #23]
 8005984:	2bff      	cmp	r3, #255	; 0xff
 8005986:	d025      	beq.n	80059d4 <USBD_LL_DataInStage+0x15a>
 8005988:	7dfb      	ldrb	r3, [r7, #23]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d122      	bne.n	80059d4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005994:	b2db      	uxtb	r3, r3
 8005996:	2b03      	cmp	r3, #3
 8005998:	d11c      	bne.n	80059d4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800599a:	7dfa      	ldrb	r2, [r7, #23]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	32ae      	adds	r2, #174	; 0xae
 80059a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059a4:	695b      	ldr	r3, [r3, #20]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d014      	beq.n	80059d4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80059aa:	7dfa      	ldrb	r2, [r7, #23]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80059b2:	7dfa      	ldrb	r2, [r7, #23]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	32ae      	adds	r2, #174	; 0xae
 80059b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059bc:	695b      	ldr	r3, [r3, #20]
 80059be:	7afa      	ldrb	r2, [r7, #11]
 80059c0:	4611      	mov	r1, r2
 80059c2:	68f8      	ldr	r0, [r7, #12]
 80059c4:	4798      	blx	r3
 80059c6:	4603      	mov	r3, r0
 80059c8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80059ca:	7dbb      	ldrb	r3, [r7, #22]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d001      	beq.n	80059d4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80059d0:	7dbb      	ldrb	r3, [r7, #22]
 80059d2:	e000      	b.n	80059d6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3718      	adds	r7, #24
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}

080059de <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80059de:	b580      	push	{r7, lr}
 80059e0:	b084      	sub	sp, #16
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80059e6:	2300      	movs	r3, #0
 80059e8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2201      	movs	r2, #1
 80059ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d014      	beq.n	8005a44 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00e      	beq.n	8005a44 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	6852      	ldr	r2, [r2, #4]
 8005a32:	b2d2      	uxtb	r2, r2
 8005a34:	4611      	mov	r1, r2
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	4798      	blx	r3
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d001      	beq.n	8005a44 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005a40:	2303      	movs	r3, #3
 8005a42:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005a44:	2340      	movs	r3, #64	; 0x40
 8005a46:	2200      	movs	r2, #0
 8005a48:	2100      	movs	r1, #0
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f001 fbff 	bl	800724e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2201      	movs	r2, #1
 8005a54:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2240      	movs	r2, #64	; 0x40
 8005a5c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005a60:	2340      	movs	r3, #64	; 0x40
 8005a62:	2200      	movs	r2, #0
 8005a64:	2180      	movs	r1, #128	; 0x80
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f001 fbf1 	bl	800724e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2240      	movs	r2, #64	; 0x40
 8005a76:	621a      	str	r2, [r3, #32]

  return ret;
 8005a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3710      	adds	r7, #16
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}

08005a82 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005a82:	b480      	push	{r7}
 8005a84:	b083      	sub	sp, #12
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
 8005a8a:	460b      	mov	r3, r1
 8005a8c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	78fa      	ldrb	r2, [r7, #3]
 8005a92:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	370c      	adds	r7, #12
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr

08005aa2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005aa2:	b480      	push	{r7}
 8005aa4:	b083      	sub	sp, #12
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ab0:	b2da      	uxtb	r2, r3
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2204      	movs	r2, #4
 8005abc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005ac0:	2300      	movs	r3, #0
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	370c      	adds	r7, #12
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr

08005ace <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005ace:	b480      	push	{r7}
 8005ad0:	b083      	sub	sp, #12
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	2b04      	cmp	r3, #4
 8005ae0:	d106      	bne.n	8005af0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005ae8:	b2da      	uxtb	r2, r3
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005af0:	2300      	movs	r3, #0
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	370c      	adds	r7, #12
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr

08005afe <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005afe:	b580      	push	{r7, lr}
 8005b00:	b082      	sub	sp, #8
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	2b03      	cmp	r3, #3
 8005b10:	d110      	bne.n	8005b34 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d00b      	beq.n	8005b34 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b22:	69db      	ldr	r3, [r3, #28]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d005      	beq.n	8005b34 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b2e:	69db      	ldr	r3, [r3, #28]
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005b34:	2300      	movs	r3, #0
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3708      	adds	r7, #8
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}

08005b3e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005b3e:	b580      	push	{r7, lr}
 8005b40:	b082      	sub	sp, #8
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	6078      	str	r0, [r7, #4]
 8005b46:	460b      	mov	r3, r1
 8005b48:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	32ae      	adds	r2, #174	; 0xae
 8005b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d101      	bne.n	8005b60 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005b5c:	2303      	movs	r3, #3
 8005b5e:	e01c      	b.n	8005b9a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	2b03      	cmp	r3, #3
 8005b6a:	d115      	bne.n	8005b98 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	32ae      	adds	r2, #174	; 0xae
 8005b76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b7a:	6a1b      	ldr	r3, [r3, #32]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d00b      	beq.n	8005b98 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	32ae      	adds	r2, #174	; 0xae
 8005b8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b8e:	6a1b      	ldr	r3, [r3, #32]
 8005b90:	78fa      	ldrb	r2, [r7, #3]
 8005b92:	4611      	mov	r1, r2
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3708      	adds	r7, #8
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}

08005ba2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005ba2:	b580      	push	{r7, lr}
 8005ba4:	b082      	sub	sp, #8
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
 8005baa:	460b      	mov	r3, r1
 8005bac:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	32ae      	adds	r2, #174	; 0xae
 8005bb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d101      	bne.n	8005bc4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005bc0:	2303      	movs	r3, #3
 8005bc2:	e01c      	b.n	8005bfe <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	2b03      	cmp	r3, #3
 8005bce:	d115      	bne.n	8005bfc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	32ae      	adds	r2, #174	; 0xae
 8005bda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d00b      	beq.n	8005bfc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	32ae      	adds	r2, #174	; 0xae
 8005bee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf4:	78fa      	ldrb	r2, [r7, #3]
 8005bf6:	4611      	mov	r1, r2
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005bfc:	2300      	movs	r3, #0
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3708      	adds	r7, #8
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}

08005c06 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005c06:	b480      	push	{r7}
 8005c08:	b083      	sub	sp, #12
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005c0e:	2300      	movs	r3, #0
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	370c      	adds	r7, #12
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr

08005c1c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005c24:	2300      	movs	r3, #0
 8005c26:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d00e      	beq.n	8005c58 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	6852      	ldr	r2, [r2, #4]
 8005c46:	b2d2      	uxtb	r2, r2
 8005c48:	4611      	mov	r1, r2
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	4798      	blx	r3
 8005c4e:	4603      	mov	r3, r0
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d001      	beq.n	8005c58 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005c54:	2303      	movs	r3, #3
 8005c56:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3710      	adds	r7, #16
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}

08005c62 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005c62:	b480      	push	{r7}
 8005c64:	b083      	sub	sp, #12
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	6078      	str	r0, [r7, #4]
 8005c6a:	460b      	mov	r3, r1
 8005c6c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005c6e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	370c      	adds	r7, #12
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr

08005c7c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	460b      	mov	r3, r1
 8005c86:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005c88:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	370c      	adds	r7, #12
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr

08005c96 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005c96:	b580      	push	{r7, lr}
 8005c98:	b086      	sub	sp, #24
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
 8005c9e:	460b      	mov	r3, r1
 8005ca0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005caa:	2300      	movs	r3, #0
 8005cac:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	885b      	ldrh	r3, [r3, #2]
 8005cb2:	b29a      	uxth	r2, r3
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d920      	bls.n	8005d00 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005cc6:	e013      	b.n	8005cf0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005cc8:	f107 030a 	add.w	r3, r7, #10
 8005ccc:	4619      	mov	r1, r3
 8005cce:	6978      	ldr	r0, [r7, #20]
 8005cd0:	f000 f81b 	bl	8005d0a <USBD_GetNextDesc>
 8005cd4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	785b      	ldrb	r3, [r3, #1]
 8005cda:	2b05      	cmp	r3, #5
 8005cdc:	d108      	bne.n	8005cf0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	789b      	ldrb	r3, [r3, #2]
 8005ce6:	78fa      	ldrb	r2, [r7, #3]
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d008      	beq.n	8005cfe <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005cec:	2300      	movs	r3, #0
 8005cee:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	885b      	ldrh	r3, [r3, #2]
 8005cf4:	b29a      	uxth	r2, r3
 8005cf6:	897b      	ldrh	r3, [r7, #10]
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d8e5      	bhi.n	8005cc8 <USBD_GetEpDesc+0x32>
 8005cfc:	e000      	b.n	8005d00 <USBD_GetEpDesc+0x6a>
          break;
 8005cfe:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005d00:	693b      	ldr	r3, [r7, #16]
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3718      	adds	r7, #24
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}

08005d0a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005d0a:	b480      	push	{r7}
 8005d0c:	b085      	sub	sp, #20
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	6078      	str	r0, [r7, #4]
 8005d12:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	881a      	ldrh	r2, [r3, #0]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	4413      	add	r3, r2
 8005d24:	b29a      	uxth	r2, r3
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	461a      	mov	r2, r3
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4413      	add	r3, r2
 8005d34:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005d36:	68fb      	ldr	r3, [r7, #12]
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3714      	adds	r7, #20
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr

08005d44 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b087      	sub	sp, #28
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	3301      	adds	r3, #1
 8005d5a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005d62:	8a3b      	ldrh	r3, [r7, #16]
 8005d64:	021b      	lsls	r3, r3, #8
 8005d66:	b21a      	sxth	r2, r3
 8005d68:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	b21b      	sxth	r3, r3
 8005d70:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005d72:	89fb      	ldrh	r3, [r7, #14]
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	371c      	adds	r7, #28
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr

08005d80 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005d96:	2b40      	cmp	r3, #64	; 0x40
 8005d98:	d005      	beq.n	8005da6 <USBD_StdDevReq+0x26>
 8005d9a:	2b40      	cmp	r3, #64	; 0x40
 8005d9c:	d857      	bhi.n	8005e4e <USBD_StdDevReq+0xce>
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d00f      	beq.n	8005dc2 <USBD_StdDevReq+0x42>
 8005da2:	2b20      	cmp	r3, #32
 8005da4:	d153      	bne.n	8005e4e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	32ae      	adds	r2, #174	; 0xae
 8005db0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	6839      	ldr	r1, [r7, #0]
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	4798      	blx	r3
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	73fb      	strb	r3, [r7, #15]
      break;
 8005dc0:	e04a      	b.n	8005e58 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	785b      	ldrb	r3, [r3, #1]
 8005dc6:	2b09      	cmp	r3, #9
 8005dc8:	d83b      	bhi.n	8005e42 <USBD_StdDevReq+0xc2>
 8005dca:	a201      	add	r2, pc, #4	; (adr r2, 8005dd0 <USBD_StdDevReq+0x50>)
 8005dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dd0:	08005e25 	.word	0x08005e25
 8005dd4:	08005e39 	.word	0x08005e39
 8005dd8:	08005e43 	.word	0x08005e43
 8005ddc:	08005e2f 	.word	0x08005e2f
 8005de0:	08005e43 	.word	0x08005e43
 8005de4:	08005e03 	.word	0x08005e03
 8005de8:	08005df9 	.word	0x08005df9
 8005dec:	08005e43 	.word	0x08005e43
 8005df0:	08005e1b 	.word	0x08005e1b
 8005df4:	08005e0d 	.word	0x08005e0d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005df8:	6839      	ldr	r1, [r7, #0]
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f000 fa3c 	bl	8006278 <USBD_GetDescriptor>
          break;
 8005e00:	e024      	b.n	8005e4c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005e02:	6839      	ldr	r1, [r7, #0]
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f000 fba1 	bl	800654c <USBD_SetAddress>
          break;
 8005e0a:	e01f      	b.n	8005e4c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005e0c:	6839      	ldr	r1, [r7, #0]
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f000 fbe0 	bl	80065d4 <USBD_SetConfig>
 8005e14:	4603      	mov	r3, r0
 8005e16:	73fb      	strb	r3, [r7, #15]
          break;
 8005e18:	e018      	b.n	8005e4c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005e1a:	6839      	ldr	r1, [r7, #0]
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f000 fc83 	bl	8006728 <USBD_GetConfig>
          break;
 8005e22:	e013      	b.n	8005e4c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005e24:	6839      	ldr	r1, [r7, #0]
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 fcb4 	bl	8006794 <USBD_GetStatus>
          break;
 8005e2c:	e00e      	b.n	8005e4c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005e2e:	6839      	ldr	r1, [r7, #0]
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f000 fce3 	bl	80067fc <USBD_SetFeature>
          break;
 8005e36:	e009      	b.n	8005e4c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005e38:	6839      	ldr	r1, [r7, #0]
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 fd07 	bl	800684e <USBD_ClrFeature>
          break;
 8005e40:	e004      	b.n	8005e4c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005e42:	6839      	ldr	r1, [r7, #0]
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f000 fd5e 	bl	8006906 <USBD_CtlError>
          break;
 8005e4a:	bf00      	nop
      }
      break;
 8005e4c:	e004      	b.n	8005e58 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005e4e:	6839      	ldr	r1, [r7, #0]
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f000 fd58 	bl	8006906 <USBD_CtlError>
      break;
 8005e56:	bf00      	nop
  }

  return ret;
 8005e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3710      	adds	r7, #16
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
 8005e62:	bf00      	nop

08005e64 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b084      	sub	sp, #16
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005e7a:	2b40      	cmp	r3, #64	; 0x40
 8005e7c:	d005      	beq.n	8005e8a <USBD_StdItfReq+0x26>
 8005e7e:	2b40      	cmp	r3, #64	; 0x40
 8005e80:	d852      	bhi.n	8005f28 <USBD_StdItfReq+0xc4>
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d001      	beq.n	8005e8a <USBD_StdItfReq+0x26>
 8005e86:	2b20      	cmp	r3, #32
 8005e88:	d14e      	bne.n	8005f28 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	3b01      	subs	r3, #1
 8005e94:	2b02      	cmp	r3, #2
 8005e96:	d840      	bhi.n	8005f1a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	889b      	ldrh	r3, [r3, #4]
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d836      	bhi.n	8005f10 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	889b      	ldrh	r3, [r3, #4]
 8005ea6:	b2db      	uxtb	r3, r3
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f7ff fed9 	bl	8005c62 <USBD_CoreFindIF>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005eb4:	7bbb      	ldrb	r3, [r7, #14]
 8005eb6:	2bff      	cmp	r3, #255	; 0xff
 8005eb8:	d01d      	beq.n	8005ef6 <USBD_StdItfReq+0x92>
 8005eba:	7bbb      	ldrb	r3, [r7, #14]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d11a      	bne.n	8005ef6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005ec0:	7bba      	ldrb	r2, [r7, #14]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	32ae      	adds	r2, #174	; 0xae
 8005ec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d00f      	beq.n	8005ef0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005ed0:	7bba      	ldrb	r2, [r7, #14]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005ed8:	7bba      	ldrb	r2, [r7, #14]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	32ae      	adds	r2, #174	; 0xae
 8005ede:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	6839      	ldr	r1, [r7, #0]
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	4798      	blx	r3
 8005eea:	4603      	mov	r3, r0
 8005eec:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005eee:	e004      	b.n	8005efa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005ef0:	2303      	movs	r3, #3
 8005ef2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005ef4:	e001      	b.n	8005efa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	88db      	ldrh	r3, [r3, #6]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d110      	bne.n	8005f24 <USBD_StdItfReq+0xc0>
 8005f02:	7bfb      	ldrb	r3, [r7, #15]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d10d      	bne.n	8005f24 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f000 fdc7 	bl	8006a9c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005f0e:	e009      	b.n	8005f24 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005f10:	6839      	ldr	r1, [r7, #0]
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 fcf7 	bl	8006906 <USBD_CtlError>
          break;
 8005f18:	e004      	b.n	8005f24 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005f1a:	6839      	ldr	r1, [r7, #0]
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f000 fcf2 	bl	8006906 <USBD_CtlError>
          break;
 8005f22:	e000      	b.n	8005f26 <USBD_StdItfReq+0xc2>
          break;
 8005f24:	bf00      	nop
      }
      break;
 8005f26:	e004      	b.n	8005f32 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005f28:	6839      	ldr	r1, [r7, #0]
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 fceb 	bl	8006906 <USBD_CtlError>
      break;
 8005f30:	bf00      	nop
  }

  return ret;
 8005f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3710      	adds	r7, #16
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}

08005f3c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005f46:	2300      	movs	r3, #0
 8005f48:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	889b      	ldrh	r3, [r3, #4]
 8005f4e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005f58:	2b40      	cmp	r3, #64	; 0x40
 8005f5a:	d007      	beq.n	8005f6c <USBD_StdEPReq+0x30>
 8005f5c:	2b40      	cmp	r3, #64	; 0x40
 8005f5e:	f200 817f 	bhi.w	8006260 <USBD_StdEPReq+0x324>
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d02a      	beq.n	8005fbc <USBD_StdEPReq+0x80>
 8005f66:	2b20      	cmp	r3, #32
 8005f68:	f040 817a 	bne.w	8006260 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005f6c:	7bbb      	ldrb	r3, [r7, #14]
 8005f6e:	4619      	mov	r1, r3
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f7ff fe83 	bl	8005c7c <USBD_CoreFindEP>
 8005f76:	4603      	mov	r3, r0
 8005f78:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005f7a:	7b7b      	ldrb	r3, [r7, #13]
 8005f7c:	2bff      	cmp	r3, #255	; 0xff
 8005f7e:	f000 8174 	beq.w	800626a <USBD_StdEPReq+0x32e>
 8005f82:	7b7b      	ldrb	r3, [r7, #13]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	f040 8170 	bne.w	800626a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8005f8a:	7b7a      	ldrb	r2, [r7, #13]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005f92:	7b7a      	ldrb	r2, [r7, #13]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	32ae      	adds	r2, #174	; 0xae
 8005f98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	f000 8163 	beq.w	800626a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005fa4:	7b7a      	ldrb	r2, [r7, #13]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	32ae      	adds	r2, #174	; 0xae
 8005faa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	6839      	ldr	r1, [r7, #0]
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	4798      	blx	r3
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005fba:	e156      	b.n	800626a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	785b      	ldrb	r3, [r3, #1]
 8005fc0:	2b03      	cmp	r3, #3
 8005fc2:	d008      	beq.n	8005fd6 <USBD_StdEPReq+0x9a>
 8005fc4:	2b03      	cmp	r3, #3
 8005fc6:	f300 8145 	bgt.w	8006254 <USBD_StdEPReq+0x318>
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	f000 809b 	beq.w	8006106 <USBD_StdEPReq+0x1ca>
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d03c      	beq.n	800604e <USBD_StdEPReq+0x112>
 8005fd4:	e13e      	b.n	8006254 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	2b02      	cmp	r3, #2
 8005fe0:	d002      	beq.n	8005fe8 <USBD_StdEPReq+0xac>
 8005fe2:	2b03      	cmp	r3, #3
 8005fe4:	d016      	beq.n	8006014 <USBD_StdEPReq+0xd8>
 8005fe6:	e02c      	b.n	8006042 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005fe8:	7bbb      	ldrb	r3, [r7, #14]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d00d      	beq.n	800600a <USBD_StdEPReq+0xce>
 8005fee:	7bbb      	ldrb	r3, [r7, #14]
 8005ff0:	2b80      	cmp	r3, #128	; 0x80
 8005ff2:	d00a      	beq.n	800600a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005ff4:	7bbb      	ldrb	r3, [r7, #14]
 8005ff6:	4619      	mov	r1, r3
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f001 f96d 	bl	80072d8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005ffe:	2180      	movs	r1, #128	; 0x80
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f001 f969 	bl	80072d8 <USBD_LL_StallEP>
 8006006:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006008:	e020      	b.n	800604c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800600a:	6839      	ldr	r1, [r7, #0]
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f000 fc7a 	bl	8006906 <USBD_CtlError>
              break;
 8006012:	e01b      	b.n	800604c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	885b      	ldrh	r3, [r3, #2]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d10e      	bne.n	800603a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800601c:	7bbb      	ldrb	r3, [r7, #14]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d00b      	beq.n	800603a <USBD_StdEPReq+0xfe>
 8006022:	7bbb      	ldrb	r3, [r7, #14]
 8006024:	2b80      	cmp	r3, #128	; 0x80
 8006026:	d008      	beq.n	800603a <USBD_StdEPReq+0xfe>
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	88db      	ldrh	r3, [r3, #6]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d104      	bne.n	800603a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006030:	7bbb      	ldrb	r3, [r7, #14]
 8006032:	4619      	mov	r1, r3
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f001 f94f 	bl	80072d8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 fd2e 	bl	8006a9c <USBD_CtlSendStatus>

              break;
 8006040:	e004      	b.n	800604c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006042:	6839      	ldr	r1, [r7, #0]
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f000 fc5e 	bl	8006906 <USBD_CtlError>
              break;
 800604a:	bf00      	nop
          }
          break;
 800604c:	e107      	b.n	800625e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006054:	b2db      	uxtb	r3, r3
 8006056:	2b02      	cmp	r3, #2
 8006058:	d002      	beq.n	8006060 <USBD_StdEPReq+0x124>
 800605a:	2b03      	cmp	r3, #3
 800605c:	d016      	beq.n	800608c <USBD_StdEPReq+0x150>
 800605e:	e04b      	b.n	80060f8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006060:	7bbb      	ldrb	r3, [r7, #14]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d00d      	beq.n	8006082 <USBD_StdEPReq+0x146>
 8006066:	7bbb      	ldrb	r3, [r7, #14]
 8006068:	2b80      	cmp	r3, #128	; 0x80
 800606a:	d00a      	beq.n	8006082 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800606c:	7bbb      	ldrb	r3, [r7, #14]
 800606e:	4619      	mov	r1, r3
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f001 f931 	bl	80072d8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006076:	2180      	movs	r1, #128	; 0x80
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f001 f92d 	bl	80072d8 <USBD_LL_StallEP>
 800607e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006080:	e040      	b.n	8006104 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006082:	6839      	ldr	r1, [r7, #0]
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f000 fc3e 	bl	8006906 <USBD_CtlError>
              break;
 800608a:	e03b      	b.n	8006104 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	885b      	ldrh	r3, [r3, #2]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d136      	bne.n	8006102 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006094:	7bbb      	ldrb	r3, [r7, #14]
 8006096:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800609a:	2b00      	cmp	r3, #0
 800609c:	d004      	beq.n	80060a8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800609e:	7bbb      	ldrb	r3, [r7, #14]
 80060a0:	4619      	mov	r1, r3
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f001 f937 	bl	8007316 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f000 fcf7 	bl	8006a9c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80060ae:	7bbb      	ldrb	r3, [r7, #14]
 80060b0:	4619      	mov	r1, r3
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f7ff fde2 	bl	8005c7c <USBD_CoreFindEP>
 80060b8:	4603      	mov	r3, r0
 80060ba:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80060bc:	7b7b      	ldrb	r3, [r7, #13]
 80060be:	2bff      	cmp	r3, #255	; 0xff
 80060c0:	d01f      	beq.n	8006102 <USBD_StdEPReq+0x1c6>
 80060c2:	7b7b      	ldrb	r3, [r7, #13]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d11c      	bne.n	8006102 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80060c8:	7b7a      	ldrb	r2, [r7, #13]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80060d0:	7b7a      	ldrb	r2, [r7, #13]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	32ae      	adds	r2, #174	; 0xae
 80060d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d010      	beq.n	8006102 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80060e0:	7b7a      	ldrb	r2, [r7, #13]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	32ae      	adds	r2, #174	; 0xae
 80060e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	6839      	ldr	r1, [r7, #0]
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	4798      	blx	r3
 80060f2:	4603      	mov	r3, r0
 80060f4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80060f6:	e004      	b.n	8006102 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80060f8:	6839      	ldr	r1, [r7, #0]
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 fc03 	bl	8006906 <USBD_CtlError>
              break;
 8006100:	e000      	b.n	8006104 <USBD_StdEPReq+0x1c8>
              break;
 8006102:	bf00      	nop
          }
          break;
 8006104:	e0ab      	b.n	800625e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800610c:	b2db      	uxtb	r3, r3
 800610e:	2b02      	cmp	r3, #2
 8006110:	d002      	beq.n	8006118 <USBD_StdEPReq+0x1dc>
 8006112:	2b03      	cmp	r3, #3
 8006114:	d032      	beq.n	800617c <USBD_StdEPReq+0x240>
 8006116:	e097      	b.n	8006248 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006118:	7bbb      	ldrb	r3, [r7, #14]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d007      	beq.n	800612e <USBD_StdEPReq+0x1f2>
 800611e:	7bbb      	ldrb	r3, [r7, #14]
 8006120:	2b80      	cmp	r3, #128	; 0x80
 8006122:	d004      	beq.n	800612e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006124:	6839      	ldr	r1, [r7, #0]
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f000 fbed 	bl	8006906 <USBD_CtlError>
                break;
 800612c:	e091      	b.n	8006252 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800612e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006132:	2b00      	cmp	r3, #0
 8006134:	da0b      	bge.n	800614e <USBD_StdEPReq+0x212>
 8006136:	7bbb      	ldrb	r3, [r7, #14]
 8006138:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800613c:	4613      	mov	r3, r2
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	4413      	add	r3, r2
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	3310      	adds	r3, #16
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	4413      	add	r3, r2
 800614a:	3304      	adds	r3, #4
 800614c:	e00b      	b.n	8006166 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800614e:	7bbb      	ldrb	r3, [r7, #14]
 8006150:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006154:	4613      	mov	r3, r2
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	4413      	add	r3, r2
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	4413      	add	r3, r2
 8006164:	3304      	adds	r3, #4
 8006166:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	2200      	movs	r2, #0
 800616c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	2202      	movs	r2, #2
 8006172:	4619      	mov	r1, r3
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f000 fc37 	bl	80069e8 <USBD_CtlSendData>
              break;
 800617a:	e06a      	b.n	8006252 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800617c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006180:	2b00      	cmp	r3, #0
 8006182:	da11      	bge.n	80061a8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006184:	7bbb      	ldrb	r3, [r7, #14]
 8006186:	f003 020f 	and.w	r2, r3, #15
 800618a:	6879      	ldr	r1, [r7, #4]
 800618c:	4613      	mov	r3, r2
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	4413      	add	r3, r2
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	440b      	add	r3, r1
 8006196:	3324      	adds	r3, #36	; 0x24
 8006198:	881b      	ldrh	r3, [r3, #0]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d117      	bne.n	80061ce <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800619e:	6839      	ldr	r1, [r7, #0]
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f000 fbb0 	bl	8006906 <USBD_CtlError>
                  break;
 80061a6:	e054      	b.n	8006252 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80061a8:	7bbb      	ldrb	r3, [r7, #14]
 80061aa:	f003 020f 	and.w	r2, r3, #15
 80061ae:	6879      	ldr	r1, [r7, #4]
 80061b0:	4613      	mov	r3, r2
 80061b2:	009b      	lsls	r3, r3, #2
 80061b4:	4413      	add	r3, r2
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	440b      	add	r3, r1
 80061ba:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80061be:	881b      	ldrh	r3, [r3, #0]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d104      	bne.n	80061ce <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80061c4:	6839      	ldr	r1, [r7, #0]
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 fb9d 	bl	8006906 <USBD_CtlError>
                  break;
 80061cc:	e041      	b.n	8006252 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80061ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	da0b      	bge.n	80061ee <USBD_StdEPReq+0x2b2>
 80061d6:	7bbb      	ldrb	r3, [r7, #14]
 80061d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80061dc:	4613      	mov	r3, r2
 80061de:	009b      	lsls	r3, r3, #2
 80061e0:	4413      	add	r3, r2
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	3310      	adds	r3, #16
 80061e6:	687a      	ldr	r2, [r7, #4]
 80061e8:	4413      	add	r3, r2
 80061ea:	3304      	adds	r3, #4
 80061ec:	e00b      	b.n	8006206 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80061ee:	7bbb      	ldrb	r3, [r7, #14]
 80061f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80061f4:	4613      	mov	r3, r2
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	4413      	add	r3, r2
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	4413      	add	r3, r2
 8006204:	3304      	adds	r3, #4
 8006206:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006208:	7bbb      	ldrb	r3, [r7, #14]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d002      	beq.n	8006214 <USBD_StdEPReq+0x2d8>
 800620e:	7bbb      	ldrb	r3, [r7, #14]
 8006210:	2b80      	cmp	r3, #128	; 0x80
 8006212:	d103      	bne.n	800621c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	2200      	movs	r2, #0
 8006218:	601a      	str	r2, [r3, #0]
 800621a:	e00e      	b.n	800623a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800621c:	7bbb      	ldrb	r3, [r7, #14]
 800621e:	4619      	mov	r1, r3
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f001 f897 	bl	8007354 <USBD_LL_IsStallEP>
 8006226:	4603      	mov	r3, r0
 8006228:	2b00      	cmp	r3, #0
 800622a:	d003      	beq.n	8006234 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	2201      	movs	r2, #1
 8006230:	601a      	str	r2, [r3, #0]
 8006232:	e002      	b.n	800623a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	2200      	movs	r2, #0
 8006238:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	2202      	movs	r2, #2
 800623e:	4619      	mov	r1, r3
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f000 fbd1 	bl	80069e8 <USBD_CtlSendData>
              break;
 8006246:	e004      	b.n	8006252 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006248:	6839      	ldr	r1, [r7, #0]
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f000 fb5b 	bl	8006906 <USBD_CtlError>
              break;
 8006250:	bf00      	nop
          }
          break;
 8006252:	e004      	b.n	800625e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006254:	6839      	ldr	r1, [r7, #0]
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f000 fb55 	bl	8006906 <USBD_CtlError>
          break;
 800625c:	bf00      	nop
      }
      break;
 800625e:	e005      	b.n	800626c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006260:	6839      	ldr	r1, [r7, #0]
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 fb4f 	bl	8006906 <USBD_CtlError>
      break;
 8006268:	e000      	b.n	800626c <USBD_StdEPReq+0x330>
      break;
 800626a:	bf00      	nop
  }

  return ret;
 800626c:	7bfb      	ldrb	r3, [r7, #15]
}
 800626e:	4618      	mov	r0, r3
 8006270:	3710      	adds	r7, #16
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
	...

08006278 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b084      	sub	sp, #16
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006282:	2300      	movs	r3, #0
 8006284:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006286:	2300      	movs	r3, #0
 8006288:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800628a:	2300      	movs	r3, #0
 800628c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	885b      	ldrh	r3, [r3, #2]
 8006292:	0a1b      	lsrs	r3, r3, #8
 8006294:	b29b      	uxth	r3, r3
 8006296:	3b01      	subs	r3, #1
 8006298:	2b06      	cmp	r3, #6
 800629a:	f200 8128 	bhi.w	80064ee <USBD_GetDescriptor+0x276>
 800629e:	a201      	add	r2, pc, #4	; (adr r2, 80062a4 <USBD_GetDescriptor+0x2c>)
 80062a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062a4:	080062c1 	.word	0x080062c1
 80062a8:	080062d9 	.word	0x080062d9
 80062ac:	08006319 	.word	0x08006319
 80062b0:	080064ef 	.word	0x080064ef
 80062b4:	080064ef 	.word	0x080064ef
 80062b8:	0800648f 	.word	0x0800648f
 80062bc:	080064bb 	.word	0x080064bb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	7c12      	ldrb	r2, [r2, #16]
 80062cc:	f107 0108 	add.w	r1, r7, #8
 80062d0:	4610      	mov	r0, r2
 80062d2:	4798      	blx	r3
 80062d4:	60f8      	str	r0, [r7, #12]
      break;
 80062d6:	e112      	b.n	80064fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	7c1b      	ldrb	r3, [r3, #16]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d10d      	bne.n	80062fc <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e8:	f107 0208 	add.w	r2, r7, #8
 80062ec:	4610      	mov	r0, r2
 80062ee:	4798      	blx	r3
 80062f0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	3301      	adds	r3, #1
 80062f6:	2202      	movs	r2, #2
 80062f8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80062fa:	e100      	b.n	80064fe <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006304:	f107 0208 	add.w	r2, r7, #8
 8006308:	4610      	mov	r0, r2
 800630a:	4798      	blx	r3
 800630c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	3301      	adds	r3, #1
 8006312:	2202      	movs	r2, #2
 8006314:	701a      	strb	r2, [r3, #0]
      break;
 8006316:	e0f2      	b.n	80064fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	885b      	ldrh	r3, [r3, #2]
 800631c:	b2db      	uxtb	r3, r3
 800631e:	2b05      	cmp	r3, #5
 8006320:	f200 80ac 	bhi.w	800647c <USBD_GetDescriptor+0x204>
 8006324:	a201      	add	r2, pc, #4	; (adr r2, 800632c <USBD_GetDescriptor+0xb4>)
 8006326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800632a:	bf00      	nop
 800632c:	08006345 	.word	0x08006345
 8006330:	08006379 	.word	0x08006379
 8006334:	080063ad 	.word	0x080063ad
 8006338:	080063e1 	.word	0x080063e1
 800633c:	08006415 	.word	0x08006415
 8006340:	08006449 	.word	0x08006449
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d00b      	beq.n	8006368 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	7c12      	ldrb	r2, [r2, #16]
 800635c:	f107 0108 	add.w	r1, r7, #8
 8006360:	4610      	mov	r0, r2
 8006362:	4798      	blx	r3
 8006364:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006366:	e091      	b.n	800648c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006368:	6839      	ldr	r1, [r7, #0]
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 facb 	bl	8006906 <USBD_CtlError>
            err++;
 8006370:	7afb      	ldrb	r3, [r7, #11]
 8006372:	3301      	adds	r3, #1
 8006374:	72fb      	strb	r3, [r7, #11]
          break;
 8006376:	e089      	b.n	800648c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d00b      	beq.n	800639c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	687a      	ldr	r2, [r7, #4]
 800638e:	7c12      	ldrb	r2, [r2, #16]
 8006390:	f107 0108 	add.w	r1, r7, #8
 8006394:	4610      	mov	r0, r2
 8006396:	4798      	blx	r3
 8006398:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800639a:	e077      	b.n	800648c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800639c:	6839      	ldr	r1, [r7, #0]
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f000 fab1 	bl	8006906 <USBD_CtlError>
            err++;
 80063a4:	7afb      	ldrb	r3, [r7, #11]
 80063a6:	3301      	adds	r3, #1
 80063a8:	72fb      	strb	r3, [r7, #11]
          break;
 80063aa:	e06f      	b.n	800648c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d00b      	beq.n	80063d0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063be:	68db      	ldr	r3, [r3, #12]
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	7c12      	ldrb	r2, [r2, #16]
 80063c4:	f107 0108 	add.w	r1, r7, #8
 80063c8:	4610      	mov	r0, r2
 80063ca:	4798      	blx	r3
 80063cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80063ce:	e05d      	b.n	800648c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80063d0:	6839      	ldr	r1, [r7, #0]
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 fa97 	bl	8006906 <USBD_CtlError>
            err++;
 80063d8:	7afb      	ldrb	r3, [r7, #11]
 80063da:	3301      	adds	r3, #1
 80063dc:	72fb      	strb	r3, [r7, #11]
          break;
 80063de:	e055      	b.n	800648c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063e6:	691b      	ldr	r3, [r3, #16]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d00b      	beq.n	8006404 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063f2:	691b      	ldr	r3, [r3, #16]
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	7c12      	ldrb	r2, [r2, #16]
 80063f8:	f107 0108 	add.w	r1, r7, #8
 80063fc:	4610      	mov	r0, r2
 80063fe:	4798      	blx	r3
 8006400:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006402:	e043      	b.n	800648c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006404:	6839      	ldr	r1, [r7, #0]
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f000 fa7d 	bl	8006906 <USBD_CtlError>
            err++;
 800640c:	7afb      	ldrb	r3, [r7, #11]
 800640e:	3301      	adds	r3, #1
 8006410:	72fb      	strb	r3, [r7, #11]
          break;
 8006412:	e03b      	b.n	800648c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800641a:	695b      	ldr	r3, [r3, #20]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d00b      	beq.n	8006438 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006426:	695b      	ldr	r3, [r3, #20]
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	7c12      	ldrb	r2, [r2, #16]
 800642c:	f107 0108 	add.w	r1, r7, #8
 8006430:	4610      	mov	r0, r2
 8006432:	4798      	blx	r3
 8006434:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006436:	e029      	b.n	800648c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006438:	6839      	ldr	r1, [r7, #0]
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f000 fa63 	bl	8006906 <USBD_CtlError>
            err++;
 8006440:	7afb      	ldrb	r3, [r7, #11]
 8006442:	3301      	adds	r3, #1
 8006444:	72fb      	strb	r3, [r7, #11]
          break;
 8006446:	e021      	b.n	800648c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800644e:	699b      	ldr	r3, [r3, #24]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d00b      	beq.n	800646c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800645a:	699b      	ldr	r3, [r3, #24]
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	7c12      	ldrb	r2, [r2, #16]
 8006460:	f107 0108 	add.w	r1, r7, #8
 8006464:	4610      	mov	r0, r2
 8006466:	4798      	blx	r3
 8006468:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800646a:	e00f      	b.n	800648c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800646c:	6839      	ldr	r1, [r7, #0]
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 fa49 	bl	8006906 <USBD_CtlError>
            err++;
 8006474:	7afb      	ldrb	r3, [r7, #11]
 8006476:	3301      	adds	r3, #1
 8006478:	72fb      	strb	r3, [r7, #11]
          break;
 800647a:	e007      	b.n	800648c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800647c:	6839      	ldr	r1, [r7, #0]
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f000 fa41 	bl	8006906 <USBD_CtlError>
          err++;
 8006484:	7afb      	ldrb	r3, [r7, #11]
 8006486:	3301      	adds	r3, #1
 8006488:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800648a:	bf00      	nop
      }
      break;
 800648c:	e037      	b.n	80064fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	7c1b      	ldrb	r3, [r3, #16]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d109      	bne.n	80064aa <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800649c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800649e:	f107 0208 	add.w	r2, r7, #8
 80064a2:	4610      	mov	r0, r2
 80064a4:	4798      	blx	r3
 80064a6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80064a8:	e029      	b.n	80064fe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80064aa:	6839      	ldr	r1, [r7, #0]
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f000 fa2a 	bl	8006906 <USBD_CtlError>
        err++;
 80064b2:	7afb      	ldrb	r3, [r7, #11]
 80064b4:	3301      	adds	r3, #1
 80064b6:	72fb      	strb	r3, [r7, #11]
      break;
 80064b8:	e021      	b.n	80064fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	7c1b      	ldrb	r3, [r3, #16]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d10d      	bne.n	80064de <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ca:	f107 0208 	add.w	r2, r7, #8
 80064ce:	4610      	mov	r0, r2
 80064d0:	4798      	blx	r3
 80064d2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	3301      	adds	r3, #1
 80064d8:	2207      	movs	r2, #7
 80064da:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80064dc:	e00f      	b.n	80064fe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80064de:	6839      	ldr	r1, [r7, #0]
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f000 fa10 	bl	8006906 <USBD_CtlError>
        err++;
 80064e6:	7afb      	ldrb	r3, [r7, #11]
 80064e8:	3301      	adds	r3, #1
 80064ea:	72fb      	strb	r3, [r7, #11]
      break;
 80064ec:	e007      	b.n	80064fe <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80064ee:	6839      	ldr	r1, [r7, #0]
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f000 fa08 	bl	8006906 <USBD_CtlError>
      err++;
 80064f6:	7afb      	ldrb	r3, [r7, #11]
 80064f8:	3301      	adds	r3, #1
 80064fa:	72fb      	strb	r3, [r7, #11]
      break;
 80064fc:	bf00      	nop
  }

  if (err != 0U)
 80064fe:	7afb      	ldrb	r3, [r7, #11]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d11e      	bne.n	8006542 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	88db      	ldrh	r3, [r3, #6]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d016      	beq.n	800653a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800650c:	893b      	ldrh	r3, [r7, #8]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d00e      	beq.n	8006530 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	88da      	ldrh	r2, [r3, #6]
 8006516:	893b      	ldrh	r3, [r7, #8]
 8006518:	4293      	cmp	r3, r2
 800651a:	bf28      	it	cs
 800651c:	4613      	movcs	r3, r2
 800651e:	b29b      	uxth	r3, r3
 8006520:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006522:	893b      	ldrh	r3, [r7, #8]
 8006524:	461a      	mov	r2, r3
 8006526:	68f9      	ldr	r1, [r7, #12]
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f000 fa5d 	bl	80069e8 <USBD_CtlSendData>
 800652e:	e009      	b.n	8006544 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006530:	6839      	ldr	r1, [r7, #0]
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 f9e7 	bl	8006906 <USBD_CtlError>
 8006538:	e004      	b.n	8006544 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 faae 	bl	8006a9c <USBD_CtlSendStatus>
 8006540:	e000      	b.n	8006544 <USBD_GetDescriptor+0x2cc>
    return;
 8006542:	bf00      	nop
  }
}
 8006544:	3710      	adds	r7, #16
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
 800654a:	bf00      	nop

0800654c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b084      	sub	sp, #16
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	889b      	ldrh	r3, [r3, #4]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d131      	bne.n	80065c2 <USBD_SetAddress+0x76>
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	88db      	ldrh	r3, [r3, #6]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d12d      	bne.n	80065c2 <USBD_SetAddress+0x76>
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	885b      	ldrh	r3, [r3, #2]
 800656a:	2b7f      	cmp	r3, #127	; 0x7f
 800656c:	d829      	bhi.n	80065c2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	885b      	ldrh	r3, [r3, #2]
 8006572:	b2db      	uxtb	r3, r3
 8006574:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006578:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006580:	b2db      	uxtb	r3, r3
 8006582:	2b03      	cmp	r3, #3
 8006584:	d104      	bne.n	8006590 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006586:	6839      	ldr	r1, [r7, #0]
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f000 f9bc 	bl	8006906 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800658e:	e01d      	b.n	80065cc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	7bfa      	ldrb	r2, [r7, #15]
 8006594:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006598:	7bfb      	ldrb	r3, [r7, #15]
 800659a:	4619      	mov	r1, r3
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 ff05 	bl	80073ac <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 fa7a 	bl	8006a9c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80065a8:	7bfb      	ldrb	r3, [r7, #15]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d004      	beq.n	80065b8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2202      	movs	r2, #2
 80065b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065b6:	e009      	b.n	80065cc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2201      	movs	r2, #1
 80065bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065c0:	e004      	b.n	80065cc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80065c2:	6839      	ldr	r1, [r7, #0]
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f000 f99e 	bl	8006906 <USBD_CtlError>
  }
}
 80065ca:	bf00      	nop
 80065cc:	bf00      	nop
 80065ce:	3710      	adds	r7, #16
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80065de:	2300      	movs	r3, #0
 80065e0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	885b      	ldrh	r3, [r3, #2]
 80065e6:	b2da      	uxtb	r2, r3
 80065e8:	4b4e      	ldr	r3, [pc, #312]	; (8006724 <USBD_SetConfig+0x150>)
 80065ea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80065ec:	4b4d      	ldr	r3, [pc, #308]	; (8006724 <USBD_SetConfig+0x150>)
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d905      	bls.n	8006600 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80065f4:	6839      	ldr	r1, [r7, #0]
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 f985 	bl	8006906 <USBD_CtlError>
    return USBD_FAIL;
 80065fc:	2303      	movs	r3, #3
 80065fe:	e08c      	b.n	800671a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006606:	b2db      	uxtb	r3, r3
 8006608:	2b02      	cmp	r3, #2
 800660a:	d002      	beq.n	8006612 <USBD_SetConfig+0x3e>
 800660c:	2b03      	cmp	r3, #3
 800660e:	d029      	beq.n	8006664 <USBD_SetConfig+0x90>
 8006610:	e075      	b.n	80066fe <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006612:	4b44      	ldr	r3, [pc, #272]	; (8006724 <USBD_SetConfig+0x150>)
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d020      	beq.n	800665c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800661a:	4b42      	ldr	r3, [pc, #264]	; (8006724 <USBD_SetConfig+0x150>)
 800661c:	781b      	ldrb	r3, [r3, #0]
 800661e:	461a      	mov	r2, r3
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006624:	4b3f      	ldr	r3, [pc, #252]	; (8006724 <USBD_SetConfig+0x150>)
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	4619      	mov	r1, r3
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f7fe ffe7 	bl	80055fe <USBD_SetClassConfig>
 8006630:	4603      	mov	r3, r0
 8006632:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006634:	7bfb      	ldrb	r3, [r7, #15]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d008      	beq.n	800664c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800663a:	6839      	ldr	r1, [r7, #0]
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f000 f962 	bl	8006906 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2202      	movs	r2, #2
 8006646:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800664a:	e065      	b.n	8006718 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f000 fa25 	bl	8006a9c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2203      	movs	r2, #3
 8006656:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800665a:	e05d      	b.n	8006718 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f000 fa1d 	bl	8006a9c <USBD_CtlSendStatus>
      break;
 8006662:	e059      	b.n	8006718 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006664:	4b2f      	ldr	r3, [pc, #188]	; (8006724 <USBD_SetConfig+0x150>)
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d112      	bne.n	8006692 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2202      	movs	r2, #2
 8006670:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006674:	4b2b      	ldr	r3, [pc, #172]	; (8006724 <USBD_SetConfig+0x150>)
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	461a      	mov	r2, r3
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800667e:	4b29      	ldr	r3, [pc, #164]	; (8006724 <USBD_SetConfig+0x150>)
 8006680:	781b      	ldrb	r3, [r3, #0]
 8006682:	4619      	mov	r1, r3
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f7fe ffd6 	bl	8005636 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f000 fa06 	bl	8006a9c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006690:	e042      	b.n	8006718 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006692:	4b24      	ldr	r3, [pc, #144]	; (8006724 <USBD_SetConfig+0x150>)
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	461a      	mov	r2, r3
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	429a      	cmp	r2, r3
 800669e:	d02a      	beq.n	80066f6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	4619      	mov	r1, r3
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f7fe ffc4 	bl	8005636 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80066ae:	4b1d      	ldr	r3, [pc, #116]	; (8006724 <USBD_SetConfig+0x150>)
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	461a      	mov	r2, r3
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80066b8:	4b1a      	ldr	r3, [pc, #104]	; (8006724 <USBD_SetConfig+0x150>)
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	4619      	mov	r1, r3
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f7fe ff9d 	bl	80055fe <USBD_SetClassConfig>
 80066c4:	4603      	mov	r3, r0
 80066c6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80066c8:	7bfb      	ldrb	r3, [r7, #15]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d00f      	beq.n	80066ee <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80066ce:	6839      	ldr	r1, [r7, #0]
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f000 f918 	bl	8006906 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	b2db      	uxtb	r3, r3
 80066dc:	4619      	mov	r1, r3
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f7fe ffa9 	bl	8005636 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2202      	movs	r2, #2
 80066e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80066ec:	e014      	b.n	8006718 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 f9d4 	bl	8006a9c <USBD_CtlSendStatus>
      break;
 80066f4:	e010      	b.n	8006718 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 f9d0 	bl	8006a9c <USBD_CtlSendStatus>
      break;
 80066fc:	e00c      	b.n	8006718 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80066fe:	6839      	ldr	r1, [r7, #0]
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f000 f900 	bl	8006906 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006706:	4b07      	ldr	r3, [pc, #28]	; (8006724 <USBD_SetConfig+0x150>)
 8006708:	781b      	ldrb	r3, [r3, #0]
 800670a:	4619      	mov	r1, r3
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f7fe ff92 	bl	8005636 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006712:	2303      	movs	r3, #3
 8006714:	73fb      	strb	r3, [r7, #15]
      break;
 8006716:	bf00      	nop
  }

  return ret;
 8006718:	7bfb      	ldrb	r3, [r7, #15]
}
 800671a:	4618      	mov	r0, r3
 800671c:	3710      	adds	r7, #16
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}
 8006722:	bf00      	nop
 8006724:	20000168 	.word	0x20000168

08006728 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b082      	sub	sp, #8
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	88db      	ldrh	r3, [r3, #6]
 8006736:	2b01      	cmp	r3, #1
 8006738:	d004      	beq.n	8006744 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800673a:	6839      	ldr	r1, [r7, #0]
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f000 f8e2 	bl	8006906 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006742:	e023      	b.n	800678c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800674a:	b2db      	uxtb	r3, r3
 800674c:	2b02      	cmp	r3, #2
 800674e:	dc02      	bgt.n	8006756 <USBD_GetConfig+0x2e>
 8006750:	2b00      	cmp	r3, #0
 8006752:	dc03      	bgt.n	800675c <USBD_GetConfig+0x34>
 8006754:	e015      	b.n	8006782 <USBD_GetConfig+0x5a>
 8006756:	2b03      	cmp	r3, #3
 8006758:	d00b      	beq.n	8006772 <USBD_GetConfig+0x4a>
 800675a:	e012      	b.n	8006782 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2200      	movs	r2, #0
 8006760:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	3308      	adds	r3, #8
 8006766:	2201      	movs	r2, #1
 8006768:	4619      	mov	r1, r3
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f000 f93c 	bl	80069e8 <USBD_CtlSendData>
        break;
 8006770:	e00c      	b.n	800678c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	3304      	adds	r3, #4
 8006776:	2201      	movs	r2, #1
 8006778:	4619      	mov	r1, r3
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 f934 	bl	80069e8 <USBD_CtlSendData>
        break;
 8006780:	e004      	b.n	800678c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006782:	6839      	ldr	r1, [r7, #0]
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f000 f8be 	bl	8006906 <USBD_CtlError>
        break;
 800678a:	bf00      	nop
}
 800678c:	bf00      	nop
 800678e:	3708      	adds	r7, #8
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b082      	sub	sp, #8
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	3b01      	subs	r3, #1
 80067a8:	2b02      	cmp	r3, #2
 80067aa:	d81e      	bhi.n	80067ea <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	88db      	ldrh	r3, [r3, #6]
 80067b0:	2b02      	cmp	r3, #2
 80067b2:	d004      	beq.n	80067be <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80067b4:	6839      	ldr	r1, [r7, #0]
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f000 f8a5 	bl	8006906 <USBD_CtlError>
        break;
 80067bc:	e01a      	b.n	80067f4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2201      	movs	r2, #1
 80067c2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d005      	beq.n	80067da <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	68db      	ldr	r3, [r3, #12]
 80067d2:	f043 0202 	orr.w	r2, r3, #2
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	330c      	adds	r3, #12
 80067de:	2202      	movs	r2, #2
 80067e0:	4619      	mov	r1, r3
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f000 f900 	bl	80069e8 <USBD_CtlSendData>
      break;
 80067e8:	e004      	b.n	80067f4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80067ea:	6839      	ldr	r1, [r7, #0]
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f000 f88a 	bl	8006906 <USBD_CtlError>
      break;
 80067f2:	bf00      	nop
  }
}
 80067f4:	bf00      	nop
 80067f6:	3708      	adds	r7, #8
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}

080067fc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b082      	sub	sp, #8
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	885b      	ldrh	r3, [r3, #2]
 800680a:	2b01      	cmp	r3, #1
 800680c:	d107      	bne.n	800681e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2201      	movs	r2, #1
 8006812:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 f940 	bl	8006a9c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800681c:	e013      	b.n	8006846 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	885b      	ldrh	r3, [r3, #2]
 8006822:	2b02      	cmp	r3, #2
 8006824:	d10b      	bne.n	800683e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	889b      	ldrh	r3, [r3, #4]
 800682a:	0a1b      	lsrs	r3, r3, #8
 800682c:	b29b      	uxth	r3, r3
 800682e:	b2da      	uxtb	r2, r3
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 f930 	bl	8006a9c <USBD_CtlSendStatus>
}
 800683c:	e003      	b.n	8006846 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800683e:	6839      	ldr	r1, [r7, #0]
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f000 f860 	bl	8006906 <USBD_CtlError>
}
 8006846:	bf00      	nop
 8006848:	3708      	adds	r7, #8
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}

0800684e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800684e:	b580      	push	{r7, lr}
 8006850:	b082      	sub	sp, #8
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]
 8006856:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800685e:	b2db      	uxtb	r3, r3
 8006860:	3b01      	subs	r3, #1
 8006862:	2b02      	cmp	r3, #2
 8006864:	d80b      	bhi.n	800687e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	885b      	ldrh	r3, [r3, #2]
 800686a:	2b01      	cmp	r3, #1
 800686c:	d10c      	bne.n	8006888 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2200      	movs	r2, #0
 8006872:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f000 f910 	bl	8006a9c <USBD_CtlSendStatus>
      }
      break;
 800687c:	e004      	b.n	8006888 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800687e:	6839      	ldr	r1, [r7, #0]
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f000 f840 	bl	8006906 <USBD_CtlError>
      break;
 8006886:	e000      	b.n	800688a <USBD_ClrFeature+0x3c>
      break;
 8006888:	bf00      	nop
  }
}
 800688a:	bf00      	nop
 800688c:	3708      	adds	r7, #8
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}

08006892 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006892:	b580      	push	{r7, lr}
 8006894:	b084      	sub	sp, #16
 8006896:	af00      	add	r7, sp, #0
 8006898:	6078      	str	r0, [r7, #4]
 800689a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	781a      	ldrb	r2, [r3, #0]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	3301      	adds	r3, #1
 80068ac:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	781a      	ldrb	r2, [r3, #0]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	3301      	adds	r3, #1
 80068ba:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80068bc:	68f8      	ldr	r0, [r7, #12]
 80068be:	f7ff fa41 	bl	8005d44 <SWAPBYTE>
 80068c2:	4603      	mov	r3, r0
 80068c4:	461a      	mov	r2, r3
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	3301      	adds	r3, #1
 80068ce:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	3301      	adds	r3, #1
 80068d4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80068d6:	68f8      	ldr	r0, [r7, #12]
 80068d8:	f7ff fa34 	bl	8005d44 <SWAPBYTE>
 80068dc:	4603      	mov	r3, r0
 80068de:	461a      	mov	r2, r3
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	3301      	adds	r3, #1
 80068e8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	3301      	adds	r3, #1
 80068ee:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80068f0:	68f8      	ldr	r0, [r7, #12]
 80068f2:	f7ff fa27 	bl	8005d44 <SWAPBYTE>
 80068f6:	4603      	mov	r3, r0
 80068f8:	461a      	mov	r2, r3
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	80da      	strh	r2, [r3, #6]
}
 80068fe:	bf00      	nop
 8006900:	3710      	adds	r7, #16
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}

08006906 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006906:	b580      	push	{r7, lr}
 8006908:	b082      	sub	sp, #8
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
 800690e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006910:	2180      	movs	r1, #128	; 0x80
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 fce0 	bl	80072d8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006918:	2100      	movs	r1, #0
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f000 fcdc 	bl	80072d8 <USBD_LL_StallEP>
}
 8006920:	bf00      	nop
 8006922:	3708      	adds	r7, #8
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}

08006928 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b086      	sub	sp, #24
 800692c:	af00      	add	r7, sp, #0
 800692e:	60f8      	str	r0, [r7, #12]
 8006930:	60b9      	str	r1, [r7, #8]
 8006932:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006934:	2300      	movs	r3, #0
 8006936:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d036      	beq.n	80069ac <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006942:	6938      	ldr	r0, [r7, #16]
 8006944:	f000 f836 	bl	80069b4 <USBD_GetLen>
 8006948:	4603      	mov	r3, r0
 800694a:	3301      	adds	r3, #1
 800694c:	b29b      	uxth	r3, r3
 800694e:	005b      	lsls	r3, r3, #1
 8006950:	b29a      	uxth	r2, r3
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006956:	7dfb      	ldrb	r3, [r7, #23]
 8006958:	68ba      	ldr	r2, [r7, #8]
 800695a:	4413      	add	r3, r2
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	7812      	ldrb	r2, [r2, #0]
 8006960:	701a      	strb	r2, [r3, #0]
  idx++;
 8006962:	7dfb      	ldrb	r3, [r7, #23]
 8006964:	3301      	adds	r3, #1
 8006966:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006968:	7dfb      	ldrb	r3, [r7, #23]
 800696a:	68ba      	ldr	r2, [r7, #8]
 800696c:	4413      	add	r3, r2
 800696e:	2203      	movs	r2, #3
 8006970:	701a      	strb	r2, [r3, #0]
  idx++;
 8006972:	7dfb      	ldrb	r3, [r7, #23]
 8006974:	3301      	adds	r3, #1
 8006976:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006978:	e013      	b.n	80069a2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800697a:	7dfb      	ldrb	r3, [r7, #23]
 800697c:	68ba      	ldr	r2, [r7, #8]
 800697e:	4413      	add	r3, r2
 8006980:	693a      	ldr	r2, [r7, #16]
 8006982:	7812      	ldrb	r2, [r2, #0]
 8006984:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	3301      	adds	r3, #1
 800698a:	613b      	str	r3, [r7, #16]
    idx++;
 800698c:	7dfb      	ldrb	r3, [r7, #23]
 800698e:	3301      	adds	r3, #1
 8006990:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006992:	7dfb      	ldrb	r3, [r7, #23]
 8006994:	68ba      	ldr	r2, [r7, #8]
 8006996:	4413      	add	r3, r2
 8006998:	2200      	movs	r2, #0
 800699a:	701a      	strb	r2, [r3, #0]
    idx++;
 800699c:	7dfb      	ldrb	r3, [r7, #23]
 800699e:	3301      	adds	r3, #1
 80069a0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d1e7      	bne.n	800697a <USBD_GetString+0x52>
 80069aa:	e000      	b.n	80069ae <USBD_GetString+0x86>
    return;
 80069ac:	bf00      	nop
  }
}
 80069ae:	3718      	adds	r7, #24
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b085      	sub	sp, #20
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80069bc:	2300      	movs	r3, #0
 80069be:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80069c4:	e005      	b.n	80069d2 <USBD_GetLen+0x1e>
  {
    len++;
 80069c6:	7bfb      	ldrb	r3, [r7, #15]
 80069c8:	3301      	adds	r3, #1
 80069ca:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	3301      	adds	r3, #1
 80069d0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d1f5      	bne.n	80069c6 <USBD_GetLen+0x12>
  }

  return len;
 80069da:	7bfb      	ldrb	r3, [r7, #15]
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3714      	adds	r7, #20
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr

080069e8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b084      	sub	sp, #16
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	60b9      	str	r1, [r7, #8]
 80069f2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2202      	movs	r2, #2
 80069f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	68ba      	ldr	r2, [r7, #8]
 8006a0c:	2100      	movs	r1, #0
 8006a0e:	68f8      	ldr	r0, [r7, #12]
 8006a10:	f000 fceb 	bl	80073ea <USBD_LL_Transmit>

  return USBD_OK;
 8006a14:	2300      	movs	r3, #0
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3710      	adds	r7, #16
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}

08006a1e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006a1e:	b580      	push	{r7, lr}
 8006a20:	b084      	sub	sp, #16
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	60f8      	str	r0, [r7, #12]
 8006a26:	60b9      	str	r1, [r7, #8]
 8006a28:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	68ba      	ldr	r2, [r7, #8]
 8006a2e:	2100      	movs	r1, #0
 8006a30:	68f8      	ldr	r0, [r7, #12]
 8006a32:	f000 fcda 	bl	80073ea <USBD_LL_Transmit>

  return USBD_OK;
 8006a36:	2300      	movs	r3, #0
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3710      	adds	r7, #16
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b084      	sub	sp, #16
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	60f8      	str	r0, [r7, #12]
 8006a48:	60b9      	str	r1, [r7, #8]
 8006a4a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2203      	movs	r2, #3
 8006a50:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	687a      	ldr	r2, [r7, #4]
 8006a58:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	68ba      	ldr	r2, [r7, #8]
 8006a68:	2100      	movs	r1, #0
 8006a6a:	68f8      	ldr	r0, [r7, #12]
 8006a6c:	f000 fcde 	bl	800742c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006a70:	2300      	movs	r3, #0
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3710      	adds	r7, #16
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}

08006a7a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006a7a:	b580      	push	{r7, lr}
 8006a7c:	b084      	sub	sp, #16
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	60f8      	str	r0, [r7, #12]
 8006a82:	60b9      	str	r1, [r7, #8]
 8006a84:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	68ba      	ldr	r2, [r7, #8]
 8006a8a:	2100      	movs	r1, #0
 8006a8c:	68f8      	ldr	r0, [r7, #12]
 8006a8e:	f000 fccd 	bl	800742c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006a92:	2300      	movs	r3, #0
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3710      	adds	r7, #16
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}

08006a9c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b082      	sub	sp, #8
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2204      	movs	r2, #4
 8006aa8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006aac:	2300      	movs	r3, #0
 8006aae:	2200      	movs	r2, #0
 8006ab0:	2100      	movs	r1, #0
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f000 fc99 	bl	80073ea <USBD_LL_Transmit>

  return USBD_OK;
 8006ab8:	2300      	movs	r3, #0
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3708      	adds	r7, #8
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}

08006ac2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006ac2:	b580      	push	{r7, lr}
 8006ac4:	b082      	sub	sp, #8
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2205      	movs	r2, #5
 8006ace:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	2100      	movs	r1, #0
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f000 fca7 	bl	800742c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006ade:	2300      	movs	r3, #0
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3708      	adds	r7, #8
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006aec:	2200      	movs	r2, #0
 8006aee:	4912      	ldr	r1, [pc, #72]	; (8006b38 <MX_USB_DEVICE_Init+0x50>)
 8006af0:	4812      	ldr	r0, [pc, #72]	; (8006b3c <MX_USB_DEVICE_Init+0x54>)
 8006af2:	f7fe fd07 	bl	8005504 <USBD_Init>
 8006af6:	4603      	mov	r3, r0
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d001      	beq.n	8006b00 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006afc:	f7f9 fdda 	bl	80006b4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006b00:	490f      	ldr	r1, [pc, #60]	; (8006b40 <MX_USB_DEVICE_Init+0x58>)
 8006b02:	480e      	ldr	r0, [pc, #56]	; (8006b3c <MX_USB_DEVICE_Init+0x54>)
 8006b04:	f7fe fd2e 	bl	8005564 <USBD_RegisterClass>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d001      	beq.n	8006b12 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006b0e:	f7f9 fdd1 	bl	80006b4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006b12:	490c      	ldr	r1, [pc, #48]	; (8006b44 <MX_USB_DEVICE_Init+0x5c>)
 8006b14:	4809      	ldr	r0, [pc, #36]	; (8006b3c <MX_USB_DEVICE_Init+0x54>)
 8006b16:	f7fe fc1f 	bl	8005358 <USBD_CDC_RegisterInterface>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d001      	beq.n	8006b24 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006b20:	f7f9 fdc8 	bl	80006b4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006b24:	4805      	ldr	r0, [pc, #20]	; (8006b3c <MX_USB_DEVICE_Init+0x54>)
 8006b26:	f7fe fd53 	bl	80055d0 <USBD_Start>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d001      	beq.n	8006b34 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006b30:	f7f9 fdc0 	bl	80006b4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006b34:	bf00      	nop
 8006b36:	bd80      	pop	{r7, pc}
 8006b38:	200000b0 	.word	0x200000b0
 8006b3c:	2000016c 	.word	0x2000016c
 8006b40:	2000001c 	.word	0x2000001c
 8006b44:	2000009c 	.word	0x2000009c

08006b48 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	4905      	ldr	r1, [pc, #20]	; (8006b64 <CDC_Init_FS+0x1c>)
 8006b50:	4805      	ldr	r0, [pc, #20]	; (8006b68 <CDC_Init_FS+0x20>)
 8006b52:	f7fe fc1b 	bl	800538c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006b56:	4905      	ldr	r1, [pc, #20]	; (8006b6c <CDC_Init_FS+0x24>)
 8006b58:	4803      	ldr	r0, [pc, #12]	; (8006b68 <CDC_Init_FS+0x20>)
 8006b5a:	f7fe fc39 	bl	80053d0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006b5e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	bd80      	pop	{r7, pc}
 8006b64:	20000c48 	.word	0x20000c48
 8006b68:	2000016c 	.word	0x2000016c
 8006b6c:	20000448 	.word	0x20000448

08006b70 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006b70:	b480      	push	{r7}
 8006b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006b74:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr

08006b80 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b083      	sub	sp, #12
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	4603      	mov	r3, r0
 8006b88:	6039      	str	r1, [r7, #0]
 8006b8a:	71fb      	strb	r3, [r7, #7]
 8006b8c:	4613      	mov	r3, r2
 8006b8e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006b90:	79fb      	ldrb	r3, [r7, #7]
 8006b92:	2b23      	cmp	r3, #35	; 0x23
 8006b94:	d84a      	bhi.n	8006c2c <CDC_Control_FS+0xac>
 8006b96:	a201      	add	r2, pc, #4	; (adr r2, 8006b9c <CDC_Control_FS+0x1c>)
 8006b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b9c:	08006c2d 	.word	0x08006c2d
 8006ba0:	08006c2d 	.word	0x08006c2d
 8006ba4:	08006c2d 	.word	0x08006c2d
 8006ba8:	08006c2d 	.word	0x08006c2d
 8006bac:	08006c2d 	.word	0x08006c2d
 8006bb0:	08006c2d 	.word	0x08006c2d
 8006bb4:	08006c2d 	.word	0x08006c2d
 8006bb8:	08006c2d 	.word	0x08006c2d
 8006bbc:	08006c2d 	.word	0x08006c2d
 8006bc0:	08006c2d 	.word	0x08006c2d
 8006bc4:	08006c2d 	.word	0x08006c2d
 8006bc8:	08006c2d 	.word	0x08006c2d
 8006bcc:	08006c2d 	.word	0x08006c2d
 8006bd0:	08006c2d 	.word	0x08006c2d
 8006bd4:	08006c2d 	.word	0x08006c2d
 8006bd8:	08006c2d 	.word	0x08006c2d
 8006bdc:	08006c2d 	.word	0x08006c2d
 8006be0:	08006c2d 	.word	0x08006c2d
 8006be4:	08006c2d 	.word	0x08006c2d
 8006be8:	08006c2d 	.word	0x08006c2d
 8006bec:	08006c2d 	.word	0x08006c2d
 8006bf0:	08006c2d 	.word	0x08006c2d
 8006bf4:	08006c2d 	.word	0x08006c2d
 8006bf8:	08006c2d 	.word	0x08006c2d
 8006bfc:	08006c2d 	.word	0x08006c2d
 8006c00:	08006c2d 	.word	0x08006c2d
 8006c04:	08006c2d 	.word	0x08006c2d
 8006c08:	08006c2d 	.word	0x08006c2d
 8006c0c:	08006c2d 	.word	0x08006c2d
 8006c10:	08006c2d 	.word	0x08006c2d
 8006c14:	08006c2d 	.word	0x08006c2d
 8006c18:	08006c2d 	.word	0x08006c2d
 8006c1c:	08006c2d 	.word	0x08006c2d
 8006c20:	08006c2d 	.word	0x08006c2d
 8006c24:	08006c2d 	.word	0x08006c2d
 8006c28:	08006c2d 	.word	0x08006c2d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006c2c:	bf00      	nop
  }

  return (USBD_OK);
 8006c2e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	370c      	adds	r7, #12
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr

08006c3c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b082      	sub	sp, #8
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
 8006c44:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006c46:	6879      	ldr	r1, [r7, #4]
 8006c48:	4805      	ldr	r0, [pc, #20]	; (8006c60 <CDC_Receive_FS+0x24>)
 8006c4a:	f7fe fbc1 	bl	80053d0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006c4e:	4804      	ldr	r0, [pc, #16]	; (8006c60 <CDC_Receive_FS+0x24>)
 8006c50:	f7fe fc22 	bl	8005498 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006c54:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3708      	adds	r7, #8
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}
 8006c5e:	bf00      	nop
 8006c60:	2000016c 	.word	0x2000016c

08006c64 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b084      	sub	sp, #16
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	460b      	mov	r3, r1
 8006c6e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006c70:	2300      	movs	r3, #0
 8006c72:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006c74:	4b0d      	ldr	r3, [pc, #52]	; (8006cac <CDC_Transmit_FS+0x48>)
 8006c76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c7a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d001      	beq.n	8006c8a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006c86:	2301      	movs	r3, #1
 8006c88:	e00b      	b.n	8006ca2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006c8a:	887b      	ldrh	r3, [r7, #2]
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	6879      	ldr	r1, [r7, #4]
 8006c90:	4806      	ldr	r0, [pc, #24]	; (8006cac <CDC_Transmit_FS+0x48>)
 8006c92:	f7fe fb7b 	bl	800538c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006c96:	4805      	ldr	r0, [pc, #20]	; (8006cac <CDC_Transmit_FS+0x48>)
 8006c98:	f7fe fbb8 	bl	800540c <USBD_CDC_TransmitPacket>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3710      	adds	r7, #16
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}
 8006caa:	bf00      	nop
 8006cac:	2000016c 	.word	0x2000016c

08006cb0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b087      	sub	sp, #28
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	60f8      	str	r0, [r7, #12]
 8006cb8:	60b9      	str	r1, [r7, #8]
 8006cba:	4613      	mov	r3, r2
 8006cbc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006cc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	371c      	adds	r7, #28
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr
	...

08006cd4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b083      	sub	sp, #12
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	4603      	mov	r3, r0
 8006cdc:	6039      	str	r1, [r7, #0]
 8006cde:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	2212      	movs	r2, #18
 8006ce4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006ce6:	4b03      	ldr	r3, [pc, #12]	; (8006cf4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	370c      	adds	r7, #12
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr
 8006cf4:	200000cc 	.word	0x200000cc

08006cf8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b083      	sub	sp, #12
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	4603      	mov	r3, r0
 8006d00:	6039      	str	r1, [r7, #0]
 8006d02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	2204      	movs	r2, #4
 8006d08:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006d0a:	4b03      	ldr	r3, [pc, #12]	; (8006d18 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	370c      	adds	r7, #12
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr
 8006d18:	200000e0 	.word	0x200000e0

08006d1c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b082      	sub	sp, #8
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	4603      	mov	r3, r0
 8006d24:	6039      	str	r1, [r7, #0]
 8006d26:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006d28:	79fb      	ldrb	r3, [r7, #7]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d105      	bne.n	8006d3a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006d2e:	683a      	ldr	r2, [r7, #0]
 8006d30:	4907      	ldr	r1, [pc, #28]	; (8006d50 <USBD_FS_ProductStrDescriptor+0x34>)
 8006d32:	4808      	ldr	r0, [pc, #32]	; (8006d54 <USBD_FS_ProductStrDescriptor+0x38>)
 8006d34:	f7ff fdf8 	bl	8006928 <USBD_GetString>
 8006d38:	e004      	b.n	8006d44 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006d3a:	683a      	ldr	r2, [r7, #0]
 8006d3c:	4904      	ldr	r1, [pc, #16]	; (8006d50 <USBD_FS_ProductStrDescriptor+0x34>)
 8006d3e:	4805      	ldr	r0, [pc, #20]	; (8006d54 <USBD_FS_ProductStrDescriptor+0x38>)
 8006d40:	f7ff fdf2 	bl	8006928 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006d44:	4b02      	ldr	r3, [pc, #8]	; (8006d50 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3708      	adds	r7, #8
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}
 8006d4e:	bf00      	nop
 8006d50:	20001448 	.word	0x20001448
 8006d54:	0800759c 	.word	0x0800759c

08006d58 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b082      	sub	sp, #8
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	4603      	mov	r3, r0
 8006d60:	6039      	str	r1, [r7, #0]
 8006d62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006d64:	683a      	ldr	r2, [r7, #0]
 8006d66:	4904      	ldr	r1, [pc, #16]	; (8006d78 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006d68:	4804      	ldr	r0, [pc, #16]	; (8006d7c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006d6a:	f7ff fddd 	bl	8006928 <USBD_GetString>
  return USBD_StrDesc;
 8006d6e:	4b02      	ldr	r3, [pc, #8]	; (8006d78 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3708      	adds	r7, #8
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}
 8006d78:	20001448 	.word	0x20001448
 8006d7c:	080075a8 	.word	0x080075a8

08006d80 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b082      	sub	sp, #8
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	4603      	mov	r3, r0
 8006d88:	6039      	str	r1, [r7, #0]
 8006d8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	221a      	movs	r2, #26
 8006d90:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006d92:	f000 f843 	bl	8006e1c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006d96:	4b02      	ldr	r3, [pc, #8]	; (8006da0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3708      	adds	r7, #8
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}
 8006da0:	200000e4 	.word	0x200000e4

08006da4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b082      	sub	sp, #8
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	4603      	mov	r3, r0
 8006dac:	6039      	str	r1, [r7, #0]
 8006dae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006db0:	79fb      	ldrb	r3, [r7, #7]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d105      	bne.n	8006dc2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006db6:	683a      	ldr	r2, [r7, #0]
 8006db8:	4907      	ldr	r1, [pc, #28]	; (8006dd8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006dba:	4808      	ldr	r0, [pc, #32]	; (8006ddc <USBD_FS_ConfigStrDescriptor+0x38>)
 8006dbc:	f7ff fdb4 	bl	8006928 <USBD_GetString>
 8006dc0:	e004      	b.n	8006dcc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006dc2:	683a      	ldr	r2, [r7, #0]
 8006dc4:	4904      	ldr	r1, [pc, #16]	; (8006dd8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006dc6:	4805      	ldr	r0, [pc, #20]	; (8006ddc <USBD_FS_ConfigStrDescriptor+0x38>)
 8006dc8:	f7ff fdae 	bl	8006928 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006dcc:	4b02      	ldr	r3, [pc, #8]	; (8006dd8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3708      	adds	r7, #8
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}
 8006dd6:	bf00      	nop
 8006dd8:	20001448 	.word	0x20001448
 8006ddc:	080075bc 	.word	0x080075bc

08006de0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b082      	sub	sp, #8
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	4603      	mov	r3, r0
 8006de8:	6039      	str	r1, [r7, #0]
 8006dea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006dec:	79fb      	ldrb	r3, [r7, #7]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d105      	bne.n	8006dfe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006df2:	683a      	ldr	r2, [r7, #0]
 8006df4:	4907      	ldr	r1, [pc, #28]	; (8006e14 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006df6:	4808      	ldr	r0, [pc, #32]	; (8006e18 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006df8:	f7ff fd96 	bl	8006928 <USBD_GetString>
 8006dfc:	e004      	b.n	8006e08 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006dfe:	683a      	ldr	r2, [r7, #0]
 8006e00:	4904      	ldr	r1, [pc, #16]	; (8006e14 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006e02:	4805      	ldr	r0, [pc, #20]	; (8006e18 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006e04:	f7ff fd90 	bl	8006928 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006e08:	4b02      	ldr	r3, [pc, #8]	; (8006e14 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3708      	adds	r7, #8
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
 8006e12:	bf00      	nop
 8006e14:	20001448 	.word	0x20001448
 8006e18:	080075c8 	.word	0x080075c8

08006e1c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b084      	sub	sp, #16
 8006e20:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006e22:	4b0f      	ldr	r3, [pc, #60]	; (8006e60 <Get_SerialNum+0x44>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006e28:	4b0e      	ldr	r3, [pc, #56]	; (8006e64 <Get_SerialNum+0x48>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006e2e:	4b0e      	ldr	r3, [pc, #56]	; (8006e68 <Get_SerialNum+0x4c>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006e34:	68fa      	ldr	r2, [r7, #12]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	4413      	add	r3, r2
 8006e3a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d009      	beq.n	8006e56 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006e42:	2208      	movs	r2, #8
 8006e44:	4909      	ldr	r1, [pc, #36]	; (8006e6c <Get_SerialNum+0x50>)
 8006e46:	68f8      	ldr	r0, [r7, #12]
 8006e48:	f000 f814 	bl	8006e74 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006e4c:	2204      	movs	r2, #4
 8006e4e:	4908      	ldr	r1, [pc, #32]	; (8006e70 <Get_SerialNum+0x54>)
 8006e50:	68b8      	ldr	r0, [r7, #8]
 8006e52:	f000 f80f 	bl	8006e74 <IntToUnicode>
  }
}
 8006e56:	bf00      	nop
 8006e58:	3710      	adds	r7, #16
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}
 8006e5e:	bf00      	nop
 8006e60:	1fff7a10 	.word	0x1fff7a10
 8006e64:	1fff7a14 	.word	0x1fff7a14
 8006e68:	1fff7a18 	.word	0x1fff7a18
 8006e6c:	200000e6 	.word	0x200000e6
 8006e70:	200000f6 	.word	0x200000f6

08006e74 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b087      	sub	sp, #28
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	4613      	mov	r3, r2
 8006e80:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006e82:	2300      	movs	r3, #0
 8006e84:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006e86:	2300      	movs	r3, #0
 8006e88:	75fb      	strb	r3, [r7, #23]
 8006e8a:	e027      	b.n	8006edc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	0f1b      	lsrs	r3, r3, #28
 8006e90:	2b09      	cmp	r3, #9
 8006e92:	d80b      	bhi.n	8006eac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	0f1b      	lsrs	r3, r3, #28
 8006e98:	b2da      	uxtb	r2, r3
 8006e9a:	7dfb      	ldrb	r3, [r7, #23]
 8006e9c:	005b      	lsls	r3, r3, #1
 8006e9e:	4619      	mov	r1, r3
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	440b      	add	r3, r1
 8006ea4:	3230      	adds	r2, #48	; 0x30
 8006ea6:	b2d2      	uxtb	r2, r2
 8006ea8:	701a      	strb	r2, [r3, #0]
 8006eaa:	e00a      	b.n	8006ec2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	0f1b      	lsrs	r3, r3, #28
 8006eb0:	b2da      	uxtb	r2, r3
 8006eb2:	7dfb      	ldrb	r3, [r7, #23]
 8006eb4:	005b      	lsls	r3, r3, #1
 8006eb6:	4619      	mov	r1, r3
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	440b      	add	r3, r1
 8006ebc:	3237      	adds	r2, #55	; 0x37
 8006ebe:	b2d2      	uxtb	r2, r2
 8006ec0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	011b      	lsls	r3, r3, #4
 8006ec6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006ec8:	7dfb      	ldrb	r3, [r7, #23]
 8006eca:	005b      	lsls	r3, r3, #1
 8006ecc:	3301      	adds	r3, #1
 8006ece:	68ba      	ldr	r2, [r7, #8]
 8006ed0:	4413      	add	r3, r2
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006ed6:	7dfb      	ldrb	r3, [r7, #23]
 8006ed8:	3301      	adds	r3, #1
 8006eda:	75fb      	strb	r3, [r7, #23]
 8006edc:	7dfa      	ldrb	r2, [r7, #23]
 8006ede:	79fb      	ldrb	r3, [r7, #7]
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d3d3      	bcc.n	8006e8c <IntToUnicode+0x18>
  }
}
 8006ee4:	bf00      	nop
 8006ee6:	bf00      	nop
 8006ee8:	371c      	adds	r7, #28
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr
	...

08006ef4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b08a      	sub	sp, #40	; 0x28
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006efc:	f107 0314 	add.w	r3, r7, #20
 8006f00:	2200      	movs	r2, #0
 8006f02:	601a      	str	r2, [r3, #0]
 8006f04:	605a      	str	r2, [r3, #4]
 8006f06:	609a      	str	r2, [r3, #8]
 8006f08:	60da      	str	r2, [r3, #12]
 8006f0a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006f14:	d13a      	bne.n	8006f8c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f16:	2300      	movs	r3, #0
 8006f18:	613b      	str	r3, [r7, #16]
 8006f1a:	4b1e      	ldr	r3, [pc, #120]	; (8006f94 <HAL_PCD_MspInit+0xa0>)
 8006f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f1e:	4a1d      	ldr	r2, [pc, #116]	; (8006f94 <HAL_PCD_MspInit+0xa0>)
 8006f20:	f043 0301 	orr.w	r3, r3, #1
 8006f24:	6313      	str	r3, [r2, #48]	; 0x30
 8006f26:	4b1b      	ldr	r3, [pc, #108]	; (8006f94 <HAL_PCD_MspInit+0xa0>)
 8006f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f2a:	f003 0301 	and.w	r3, r3, #1
 8006f2e:	613b      	str	r3, [r7, #16]
 8006f30:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006f32:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006f36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f38:	2302      	movs	r3, #2
 8006f3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f40:	2303      	movs	r3, #3
 8006f42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006f44:	230a      	movs	r3, #10
 8006f46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f48:	f107 0314 	add.w	r3, r7, #20
 8006f4c:	4619      	mov	r1, r3
 8006f4e:	4812      	ldr	r0, [pc, #72]	; (8006f98 <HAL_PCD_MspInit+0xa4>)
 8006f50:	f7f9 fe1e 	bl	8000b90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006f54:	4b0f      	ldr	r3, [pc, #60]	; (8006f94 <HAL_PCD_MspInit+0xa0>)
 8006f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f58:	4a0e      	ldr	r2, [pc, #56]	; (8006f94 <HAL_PCD_MspInit+0xa0>)
 8006f5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f5e:	6353      	str	r3, [r2, #52]	; 0x34
 8006f60:	2300      	movs	r3, #0
 8006f62:	60fb      	str	r3, [r7, #12]
 8006f64:	4b0b      	ldr	r3, [pc, #44]	; (8006f94 <HAL_PCD_MspInit+0xa0>)
 8006f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f68:	4a0a      	ldr	r2, [pc, #40]	; (8006f94 <HAL_PCD_MspInit+0xa0>)
 8006f6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006f6e:	6453      	str	r3, [r2, #68]	; 0x44
 8006f70:	4b08      	ldr	r3, [pc, #32]	; (8006f94 <HAL_PCD_MspInit+0xa0>)
 8006f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f78:	60fb      	str	r3, [r7, #12]
 8006f7a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	2100      	movs	r1, #0
 8006f80:	2043      	movs	r0, #67	; 0x43
 8006f82:	f7f9 fddb 	bl	8000b3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006f86:	2043      	movs	r0, #67	; 0x43
 8006f88:	f7f9 fdf4 	bl	8000b74 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006f8c:	bf00      	nop
 8006f8e:	3728      	adds	r7, #40	; 0x28
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}
 8006f94:	40023800 	.word	0x40023800
 8006f98:	40020000 	.word	0x40020000

08006f9c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b082      	sub	sp, #8
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006fb0:	4619      	mov	r1, r3
 8006fb2:	4610      	mov	r0, r2
 8006fb4:	f7fe fb59 	bl	800566a <USBD_LL_SetupStage>
}
 8006fb8:	bf00      	nop
 8006fba:	3708      	adds	r7, #8
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}

08006fc0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b082      	sub	sp, #8
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	460b      	mov	r3, r1
 8006fca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006fd2:	78fa      	ldrb	r2, [r7, #3]
 8006fd4:	6879      	ldr	r1, [r7, #4]
 8006fd6:	4613      	mov	r3, r2
 8006fd8:	00db      	lsls	r3, r3, #3
 8006fda:	4413      	add	r3, r2
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	440b      	add	r3, r1
 8006fe0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	78fb      	ldrb	r3, [r7, #3]
 8006fe8:	4619      	mov	r1, r3
 8006fea:	f7fe fb93 	bl	8005714 <USBD_LL_DataOutStage>
}
 8006fee:	bf00      	nop
 8006ff0:	3708      	adds	r7, #8
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}

08006ff6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ff6:	b580      	push	{r7, lr}
 8006ff8:	b082      	sub	sp, #8
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	6078      	str	r0, [r7, #4]
 8006ffe:	460b      	mov	r3, r1
 8007000:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007008:	78fa      	ldrb	r2, [r7, #3]
 800700a:	6879      	ldr	r1, [r7, #4]
 800700c:	4613      	mov	r3, r2
 800700e:	00db      	lsls	r3, r3, #3
 8007010:	4413      	add	r3, r2
 8007012:	009b      	lsls	r3, r3, #2
 8007014:	440b      	add	r3, r1
 8007016:	334c      	adds	r3, #76	; 0x4c
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	78fb      	ldrb	r3, [r7, #3]
 800701c:	4619      	mov	r1, r3
 800701e:	f7fe fc2c 	bl	800587a <USBD_LL_DataInStage>
}
 8007022:	bf00      	nop
 8007024:	3708      	adds	r7, #8
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}

0800702a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800702a:	b580      	push	{r7, lr}
 800702c:	b082      	sub	sp, #8
 800702e:	af00      	add	r7, sp, #0
 8007030:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007038:	4618      	mov	r0, r3
 800703a:	f7fe fd60 	bl	8005afe <USBD_LL_SOF>
}
 800703e:	bf00      	nop
 8007040:	3708      	adds	r7, #8
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}

08007046 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007046:	b580      	push	{r7, lr}
 8007048:	b084      	sub	sp, #16
 800704a:	af00      	add	r7, sp, #0
 800704c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800704e:	2301      	movs	r3, #1
 8007050:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	68db      	ldr	r3, [r3, #12]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d102      	bne.n	8007060 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800705a:	2300      	movs	r3, #0
 800705c:	73fb      	strb	r3, [r7, #15]
 800705e:	e008      	b.n	8007072 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	68db      	ldr	r3, [r3, #12]
 8007064:	2b02      	cmp	r3, #2
 8007066:	d102      	bne.n	800706e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007068:	2301      	movs	r3, #1
 800706a:	73fb      	strb	r3, [r7, #15]
 800706c:	e001      	b.n	8007072 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800706e:	f7f9 fb21 	bl	80006b4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007078:	7bfa      	ldrb	r2, [r7, #15]
 800707a:	4611      	mov	r1, r2
 800707c:	4618      	mov	r0, r3
 800707e:	f7fe fd00 	bl	8005a82 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007088:	4618      	mov	r0, r3
 800708a:	f7fe fca8 	bl	80059de <USBD_LL_Reset>
}
 800708e:	bf00      	nop
 8007090:	3710      	adds	r7, #16
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}
	...

08007098 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b082      	sub	sp, #8
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80070a6:	4618      	mov	r0, r3
 80070a8:	f7fe fcfb 	bl	8005aa2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	687a      	ldr	r2, [r7, #4]
 80070b8:	6812      	ldr	r2, [r2, #0]
 80070ba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80070be:	f043 0301 	orr.w	r3, r3, #1
 80070c2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6a1b      	ldr	r3, [r3, #32]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d005      	beq.n	80070d8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80070cc:	4b04      	ldr	r3, [pc, #16]	; (80070e0 <HAL_PCD_SuspendCallback+0x48>)
 80070ce:	691b      	ldr	r3, [r3, #16]
 80070d0:	4a03      	ldr	r2, [pc, #12]	; (80070e0 <HAL_PCD_SuspendCallback+0x48>)
 80070d2:	f043 0306 	orr.w	r3, r3, #6
 80070d6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80070d8:	bf00      	nop
 80070da:	3708      	adds	r7, #8
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}
 80070e0:	e000ed00 	.word	0xe000ed00

080070e4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b082      	sub	sp, #8
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80070f2:	4618      	mov	r0, r3
 80070f4:	f7fe fceb 	bl	8005ace <USBD_LL_Resume>
}
 80070f8:	bf00      	nop
 80070fa:	3708      	adds	r7, #8
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}

08007100 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b082      	sub	sp, #8
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	460b      	mov	r3, r1
 800710a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007112:	78fa      	ldrb	r2, [r7, #3]
 8007114:	4611      	mov	r1, r2
 8007116:	4618      	mov	r0, r3
 8007118:	f7fe fd43 	bl	8005ba2 <USBD_LL_IsoOUTIncomplete>
}
 800711c:	bf00      	nop
 800711e:	3708      	adds	r7, #8
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}

08007124 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b082      	sub	sp, #8
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	460b      	mov	r3, r1
 800712e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007136:	78fa      	ldrb	r2, [r7, #3]
 8007138:	4611      	mov	r1, r2
 800713a:	4618      	mov	r0, r3
 800713c:	f7fe fcff 	bl	8005b3e <USBD_LL_IsoINIncomplete>
}
 8007140:	bf00      	nop
 8007142:	3708      	adds	r7, #8
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}

08007148 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b082      	sub	sp, #8
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007156:	4618      	mov	r0, r3
 8007158:	f7fe fd55 	bl	8005c06 <USBD_LL_DevConnected>
}
 800715c:	bf00      	nop
 800715e:	3708      	adds	r7, #8
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}

08007164 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b082      	sub	sp, #8
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007172:	4618      	mov	r0, r3
 8007174:	f7fe fd52 	bl	8005c1c <USBD_LL_DevDisconnected>
}
 8007178:	bf00      	nop
 800717a:	3708      	adds	r7, #8
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}

08007180 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b082      	sub	sp, #8
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d13c      	bne.n	800720a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007190:	4a20      	ldr	r2, [pc, #128]	; (8007214 <USBD_LL_Init+0x94>)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	4a1e      	ldr	r2, [pc, #120]	; (8007214 <USBD_LL_Init+0x94>)
 800719c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80071a0:	4b1c      	ldr	r3, [pc, #112]	; (8007214 <USBD_LL_Init+0x94>)
 80071a2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80071a6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80071a8:	4b1a      	ldr	r3, [pc, #104]	; (8007214 <USBD_LL_Init+0x94>)
 80071aa:	2204      	movs	r2, #4
 80071ac:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80071ae:	4b19      	ldr	r3, [pc, #100]	; (8007214 <USBD_LL_Init+0x94>)
 80071b0:	2202      	movs	r2, #2
 80071b2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80071b4:	4b17      	ldr	r3, [pc, #92]	; (8007214 <USBD_LL_Init+0x94>)
 80071b6:	2200      	movs	r2, #0
 80071b8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80071ba:	4b16      	ldr	r3, [pc, #88]	; (8007214 <USBD_LL_Init+0x94>)
 80071bc:	2202      	movs	r2, #2
 80071be:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80071c0:	4b14      	ldr	r3, [pc, #80]	; (8007214 <USBD_LL_Init+0x94>)
 80071c2:	2200      	movs	r2, #0
 80071c4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80071c6:	4b13      	ldr	r3, [pc, #76]	; (8007214 <USBD_LL_Init+0x94>)
 80071c8:	2200      	movs	r2, #0
 80071ca:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80071cc:	4b11      	ldr	r3, [pc, #68]	; (8007214 <USBD_LL_Init+0x94>)
 80071ce:	2200      	movs	r2, #0
 80071d0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80071d2:	4b10      	ldr	r3, [pc, #64]	; (8007214 <USBD_LL_Init+0x94>)
 80071d4:	2200      	movs	r2, #0
 80071d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80071d8:	4b0e      	ldr	r3, [pc, #56]	; (8007214 <USBD_LL_Init+0x94>)
 80071da:	2200      	movs	r2, #0
 80071dc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80071de:	480d      	ldr	r0, [pc, #52]	; (8007214 <USBD_LL_Init+0x94>)
 80071e0:	f7f9 fe8b 	bl	8000efa <HAL_PCD_Init>
 80071e4:	4603      	mov	r3, r0
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d001      	beq.n	80071ee <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80071ea:	f7f9 fa63 	bl	80006b4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80071ee:	2180      	movs	r1, #128	; 0x80
 80071f0:	4808      	ldr	r0, [pc, #32]	; (8007214 <USBD_LL_Init+0x94>)
 80071f2:	f7fb f8e2 	bl	80023ba <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80071f6:	2240      	movs	r2, #64	; 0x40
 80071f8:	2100      	movs	r1, #0
 80071fa:	4806      	ldr	r0, [pc, #24]	; (8007214 <USBD_LL_Init+0x94>)
 80071fc:	f7fb f896 	bl	800232c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007200:	2280      	movs	r2, #128	; 0x80
 8007202:	2101      	movs	r1, #1
 8007204:	4803      	ldr	r0, [pc, #12]	; (8007214 <USBD_LL_Init+0x94>)
 8007206:	f7fb f891 	bl	800232c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800720a:	2300      	movs	r3, #0
}
 800720c:	4618      	mov	r0, r3
 800720e:	3708      	adds	r7, #8
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}
 8007214:	20001648 	.word	0x20001648

08007218 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b084      	sub	sp, #16
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007220:	2300      	movs	r3, #0
 8007222:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007224:	2300      	movs	r3, #0
 8007226:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800722e:	4618      	mov	r0, r3
 8007230:	f7f9 ff80 	bl	8001134 <HAL_PCD_Start>
 8007234:	4603      	mov	r3, r0
 8007236:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007238:	7bfb      	ldrb	r3, [r7, #15]
 800723a:	4618      	mov	r0, r3
 800723c:	f000 f942 	bl	80074c4 <USBD_Get_USB_Status>
 8007240:	4603      	mov	r3, r0
 8007242:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007244:	7bbb      	ldrb	r3, [r7, #14]
}
 8007246:	4618      	mov	r0, r3
 8007248:	3710      	adds	r7, #16
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}

0800724e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800724e:	b580      	push	{r7, lr}
 8007250:	b084      	sub	sp, #16
 8007252:	af00      	add	r7, sp, #0
 8007254:	6078      	str	r0, [r7, #4]
 8007256:	4608      	mov	r0, r1
 8007258:	4611      	mov	r1, r2
 800725a:	461a      	mov	r2, r3
 800725c:	4603      	mov	r3, r0
 800725e:	70fb      	strb	r3, [r7, #3]
 8007260:	460b      	mov	r3, r1
 8007262:	70bb      	strb	r3, [r7, #2]
 8007264:	4613      	mov	r3, r2
 8007266:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007268:	2300      	movs	r3, #0
 800726a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800726c:	2300      	movs	r3, #0
 800726e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007276:	78bb      	ldrb	r3, [r7, #2]
 8007278:	883a      	ldrh	r2, [r7, #0]
 800727a:	78f9      	ldrb	r1, [r7, #3]
 800727c:	f7fa fc51 	bl	8001b22 <HAL_PCD_EP_Open>
 8007280:	4603      	mov	r3, r0
 8007282:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007284:	7bfb      	ldrb	r3, [r7, #15]
 8007286:	4618      	mov	r0, r3
 8007288:	f000 f91c 	bl	80074c4 <USBD_Get_USB_Status>
 800728c:	4603      	mov	r3, r0
 800728e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007290:	7bbb      	ldrb	r3, [r7, #14]
}
 8007292:	4618      	mov	r0, r3
 8007294:	3710      	adds	r7, #16
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}

0800729a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800729a:	b580      	push	{r7, lr}
 800729c:	b084      	sub	sp, #16
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6078      	str	r0, [r7, #4]
 80072a2:	460b      	mov	r3, r1
 80072a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072a6:	2300      	movs	r3, #0
 80072a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80072aa:	2300      	movs	r3, #0
 80072ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80072b4:	78fa      	ldrb	r2, [r7, #3]
 80072b6:	4611      	mov	r1, r2
 80072b8:	4618      	mov	r0, r3
 80072ba:	f7fa fc9a 	bl	8001bf2 <HAL_PCD_EP_Close>
 80072be:	4603      	mov	r3, r0
 80072c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80072c2:	7bfb      	ldrb	r3, [r7, #15]
 80072c4:	4618      	mov	r0, r3
 80072c6:	f000 f8fd 	bl	80074c4 <USBD_Get_USB_Status>
 80072ca:	4603      	mov	r3, r0
 80072cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80072ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3710      	adds	r7, #16
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b084      	sub	sp, #16
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	460b      	mov	r3, r1
 80072e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072e4:	2300      	movs	r3, #0
 80072e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80072e8:	2300      	movs	r3, #0
 80072ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80072f2:	78fa      	ldrb	r2, [r7, #3]
 80072f4:	4611      	mov	r1, r2
 80072f6:	4618      	mov	r0, r3
 80072f8:	f7fa fd72 	bl	8001de0 <HAL_PCD_EP_SetStall>
 80072fc:	4603      	mov	r3, r0
 80072fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007300:	7bfb      	ldrb	r3, [r7, #15]
 8007302:	4618      	mov	r0, r3
 8007304:	f000 f8de 	bl	80074c4 <USBD_Get_USB_Status>
 8007308:	4603      	mov	r3, r0
 800730a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800730c:	7bbb      	ldrb	r3, [r7, #14]
}
 800730e:	4618      	mov	r0, r3
 8007310:	3710      	adds	r7, #16
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}

08007316 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007316:	b580      	push	{r7, lr}
 8007318:	b084      	sub	sp, #16
 800731a:	af00      	add	r7, sp, #0
 800731c:	6078      	str	r0, [r7, #4]
 800731e:	460b      	mov	r3, r1
 8007320:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007322:	2300      	movs	r3, #0
 8007324:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007326:	2300      	movs	r3, #0
 8007328:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007330:	78fa      	ldrb	r2, [r7, #3]
 8007332:	4611      	mov	r1, r2
 8007334:	4618      	mov	r0, r3
 8007336:	f7fa fdb7 	bl	8001ea8 <HAL_PCD_EP_ClrStall>
 800733a:	4603      	mov	r3, r0
 800733c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800733e:	7bfb      	ldrb	r3, [r7, #15]
 8007340:	4618      	mov	r0, r3
 8007342:	f000 f8bf 	bl	80074c4 <USBD_Get_USB_Status>
 8007346:	4603      	mov	r3, r0
 8007348:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800734a:	7bbb      	ldrb	r3, [r7, #14]
}
 800734c:	4618      	mov	r0, r3
 800734e:	3710      	adds	r7, #16
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}

08007354 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007354:	b480      	push	{r7}
 8007356:	b085      	sub	sp, #20
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	460b      	mov	r3, r1
 800735e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007366:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007368:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800736c:	2b00      	cmp	r3, #0
 800736e:	da0b      	bge.n	8007388 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007370:	78fb      	ldrb	r3, [r7, #3]
 8007372:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007376:	68f9      	ldr	r1, [r7, #12]
 8007378:	4613      	mov	r3, r2
 800737a:	00db      	lsls	r3, r3, #3
 800737c:	4413      	add	r3, r2
 800737e:	009b      	lsls	r3, r3, #2
 8007380:	440b      	add	r3, r1
 8007382:	333e      	adds	r3, #62	; 0x3e
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	e00b      	b.n	80073a0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007388:	78fb      	ldrb	r3, [r7, #3]
 800738a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800738e:	68f9      	ldr	r1, [r7, #12]
 8007390:	4613      	mov	r3, r2
 8007392:	00db      	lsls	r3, r3, #3
 8007394:	4413      	add	r3, r2
 8007396:	009b      	lsls	r3, r3, #2
 8007398:	440b      	add	r3, r1
 800739a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800739e:	781b      	ldrb	r3, [r3, #0]
  }
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3714      	adds	r7, #20
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr

080073ac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b084      	sub	sp, #16
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	460b      	mov	r3, r1
 80073b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073b8:	2300      	movs	r3, #0
 80073ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073bc:	2300      	movs	r3, #0
 80073be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80073c6:	78fa      	ldrb	r2, [r7, #3]
 80073c8:	4611      	mov	r1, r2
 80073ca:	4618      	mov	r0, r3
 80073cc:	f7fa fb84 	bl	8001ad8 <HAL_PCD_SetAddress>
 80073d0:	4603      	mov	r3, r0
 80073d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80073d4:	7bfb      	ldrb	r3, [r7, #15]
 80073d6:	4618      	mov	r0, r3
 80073d8:	f000 f874 	bl	80074c4 <USBD_Get_USB_Status>
 80073dc:	4603      	mov	r3, r0
 80073de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80073e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3710      	adds	r7, #16
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}

080073ea <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80073ea:	b580      	push	{r7, lr}
 80073ec:	b086      	sub	sp, #24
 80073ee:	af00      	add	r7, sp, #0
 80073f0:	60f8      	str	r0, [r7, #12]
 80073f2:	607a      	str	r2, [r7, #4]
 80073f4:	603b      	str	r3, [r7, #0]
 80073f6:	460b      	mov	r3, r1
 80073f8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073fa:	2300      	movs	r3, #0
 80073fc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073fe:	2300      	movs	r3, #0
 8007400:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007408:	7af9      	ldrb	r1, [r7, #11]
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	687a      	ldr	r2, [r7, #4]
 800740e:	f7fa fc9d 	bl	8001d4c <HAL_PCD_EP_Transmit>
 8007412:	4603      	mov	r3, r0
 8007414:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007416:	7dfb      	ldrb	r3, [r7, #23]
 8007418:	4618      	mov	r0, r3
 800741a:	f000 f853 	bl	80074c4 <USBD_Get_USB_Status>
 800741e:	4603      	mov	r3, r0
 8007420:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007422:	7dbb      	ldrb	r3, [r7, #22]
}
 8007424:	4618      	mov	r0, r3
 8007426:	3718      	adds	r7, #24
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}

0800742c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b086      	sub	sp, #24
 8007430:	af00      	add	r7, sp, #0
 8007432:	60f8      	str	r0, [r7, #12]
 8007434:	607a      	str	r2, [r7, #4]
 8007436:	603b      	str	r3, [r7, #0]
 8007438:	460b      	mov	r3, r1
 800743a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800743c:	2300      	movs	r3, #0
 800743e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007440:	2300      	movs	r3, #0
 8007442:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800744a:	7af9      	ldrb	r1, [r7, #11]
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	f7fa fc19 	bl	8001c86 <HAL_PCD_EP_Receive>
 8007454:	4603      	mov	r3, r0
 8007456:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007458:	7dfb      	ldrb	r3, [r7, #23]
 800745a:	4618      	mov	r0, r3
 800745c:	f000 f832 	bl	80074c4 <USBD_Get_USB_Status>
 8007460:	4603      	mov	r3, r0
 8007462:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007464:	7dbb      	ldrb	r3, [r7, #22]
}
 8007466:	4618      	mov	r0, r3
 8007468:	3718      	adds	r7, #24
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}

0800746e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800746e:	b580      	push	{r7, lr}
 8007470:	b082      	sub	sp, #8
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]
 8007476:	460b      	mov	r3, r1
 8007478:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007480:	78fa      	ldrb	r2, [r7, #3]
 8007482:	4611      	mov	r1, r2
 8007484:	4618      	mov	r0, r3
 8007486:	f7fa fc49 	bl	8001d1c <HAL_PCD_EP_GetRxCount>
 800748a:	4603      	mov	r3, r0
}
 800748c:	4618      	mov	r0, r3
 800748e:	3708      	adds	r7, #8
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}

08007494 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007494:	b480      	push	{r7}
 8007496:	b083      	sub	sp, #12
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800749c:	4b03      	ldr	r3, [pc, #12]	; (80074ac <USBD_static_malloc+0x18>)
}
 800749e:	4618      	mov	r0, r3
 80074a0:	370c      	adds	r7, #12
 80074a2:	46bd      	mov	sp, r7
 80074a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a8:	4770      	bx	lr
 80074aa:	bf00      	nop
 80074ac:	20001b54 	.word	0x20001b54

080074b0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b083      	sub	sp, #12
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]

}
 80074b8:	bf00      	nop
 80074ba:	370c      	adds	r7, #12
 80074bc:	46bd      	mov	sp, r7
 80074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c2:	4770      	bx	lr

080074c4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b085      	sub	sp, #20
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	4603      	mov	r3, r0
 80074cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074ce:	2300      	movs	r3, #0
 80074d0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80074d2:	79fb      	ldrb	r3, [r7, #7]
 80074d4:	2b03      	cmp	r3, #3
 80074d6:	d817      	bhi.n	8007508 <USBD_Get_USB_Status+0x44>
 80074d8:	a201      	add	r2, pc, #4	; (adr r2, 80074e0 <USBD_Get_USB_Status+0x1c>)
 80074da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074de:	bf00      	nop
 80074e0:	080074f1 	.word	0x080074f1
 80074e4:	080074f7 	.word	0x080074f7
 80074e8:	080074fd 	.word	0x080074fd
 80074ec:	08007503 	.word	0x08007503
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80074f0:	2300      	movs	r3, #0
 80074f2:	73fb      	strb	r3, [r7, #15]
    break;
 80074f4:	e00b      	b.n	800750e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80074f6:	2303      	movs	r3, #3
 80074f8:	73fb      	strb	r3, [r7, #15]
    break;
 80074fa:	e008      	b.n	800750e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80074fc:	2301      	movs	r3, #1
 80074fe:	73fb      	strb	r3, [r7, #15]
    break;
 8007500:	e005      	b.n	800750e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007502:	2303      	movs	r3, #3
 8007504:	73fb      	strb	r3, [r7, #15]
    break;
 8007506:	e002      	b.n	800750e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007508:	2303      	movs	r3, #3
 800750a:	73fb      	strb	r3, [r7, #15]
    break;
 800750c:	bf00      	nop
  }
  return usb_status;
 800750e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007510:	4618      	mov	r0, r3
 8007512:	3714      	adds	r7, #20
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr

0800751c <__libc_init_array>:
 800751c:	b570      	push	{r4, r5, r6, lr}
 800751e:	4d0d      	ldr	r5, [pc, #52]	; (8007554 <__libc_init_array+0x38>)
 8007520:	4c0d      	ldr	r4, [pc, #52]	; (8007558 <__libc_init_array+0x3c>)
 8007522:	1b64      	subs	r4, r4, r5
 8007524:	10a4      	asrs	r4, r4, #2
 8007526:	2600      	movs	r6, #0
 8007528:	42a6      	cmp	r6, r4
 800752a:	d109      	bne.n	8007540 <__libc_init_array+0x24>
 800752c:	4d0b      	ldr	r5, [pc, #44]	; (800755c <__libc_init_array+0x40>)
 800752e:	4c0c      	ldr	r4, [pc, #48]	; (8007560 <__libc_init_array+0x44>)
 8007530:	f000 f820 	bl	8007574 <_init>
 8007534:	1b64      	subs	r4, r4, r5
 8007536:	10a4      	asrs	r4, r4, #2
 8007538:	2600      	movs	r6, #0
 800753a:	42a6      	cmp	r6, r4
 800753c:	d105      	bne.n	800754a <__libc_init_array+0x2e>
 800753e:	bd70      	pop	{r4, r5, r6, pc}
 8007540:	f855 3b04 	ldr.w	r3, [r5], #4
 8007544:	4798      	blx	r3
 8007546:	3601      	adds	r6, #1
 8007548:	e7ee      	b.n	8007528 <__libc_init_array+0xc>
 800754a:	f855 3b04 	ldr.w	r3, [r5], #4
 800754e:	4798      	blx	r3
 8007550:	3601      	adds	r6, #1
 8007552:	e7f2      	b.n	800753a <__libc_init_array+0x1e>
 8007554:	080075f8 	.word	0x080075f8
 8007558:	080075f8 	.word	0x080075f8
 800755c:	080075f8 	.word	0x080075f8
 8007560:	080075fc 	.word	0x080075fc

08007564 <memset>:
 8007564:	4402      	add	r2, r0
 8007566:	4603      	mov	r3, r0
 8007568:	4293      	cmp	r3, r2
 800756a:	d100      	bne.n	800756e <memset+0xa>
 800756c:	4770      	bx	lr
 800756e:	f803 1b01 	strb.w	r1, [r3], #1
 8007572:	e7f9      	b.n	8007568 <memset+0x4>

08007574 <_init>:
 8007574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007576:	bf00      	nop
 8007578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800757a:	bc08      	pop	{r3}
 800757c:	469e      	mov	lr, r3
 800757e:	4770      	bx	lr

08007580 <_fini>:
 8007580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007582:	bf00      	nop
 8007584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007586:	bc08      	pop	{r3}
 8007588:	469e      	mov	lr, r3
 800758a:	4770      	bx	lr
