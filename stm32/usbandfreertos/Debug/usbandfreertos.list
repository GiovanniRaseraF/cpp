
usbandfreertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a694  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d0  0800a824  0800a824  0001a824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a9f4  0800a9f4  00020164  2**0
                  CONTENTS
  4 .ARM          00000008  0800a9f4  0800a9f4  0001a9f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a9fc  0800a9fc  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a9fc  0800a9fc  0001a9fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aa00  0800aa00  0001aa00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  0800aa04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020164  2**0
                  CONTENTS
 10 .bss          000066ac  20000164  20000164  00020164  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20006810  20006810  00020164  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002bf92  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005513  00000000  00000000  0004c126  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019d0  00000000  00000000  00051640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000017c8  00000000  00000000  00053010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000af02  00000000  00000000  000547d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f932  00000000  00000000  0005f6da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db265  00000000  00000000  0007f00c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015a271  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000083f4  00000000  00000000  0015a2c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000164 	.word	0x20000164
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a80c 	.word	0x0800a80c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000168 	.word	0x20000168
 80001cc:	0800a80c 	.word	0x0800a80c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e8:	f000 fafe 	bl	8000ae8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ec:	f000 f834 	bl	8000558 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f0:	f000 f8a8 	bl	8000644 <_ZL12MX_GPIO_Initv>
  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init();
 80004f4:	f009 f9c2 	bl	800987c <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004f8:	f006 fc48 	bl	8006d8c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004fc:	4a0d      	ldr	r2, [pc, #52]	; (8000534 <main+0x50>)
 80004fe:	2100      	movs	r1, #0
 8000500:	480d      	ldr	r0, [pc, #52]	; (8000538 <main+0x54>)
 8000502:	f006 fc8d 	bl	8006e20 <osThreadNew>
 8000506:	4603      	mov	r3, r0
 8000508:	4a0c      	ldr	r2, [pc, #48]	; (800053c <main+0x58>)
 800050a:	6013      	str	r3, [r2, #0]

  /* creation of ledtoggle */
  ledtoggleHandle = osThreadNew(ledstatustoggle, NULL, &ledtoggle_attributes);
 800050c:	4a0c      	ldr	r2, [pc, #48]	; (8000540 <main+0x5c>)
 800050e:	2100      	movs	r1, #0
 8000510:	480c      	ldr	r0, [pc, #48]	; (8000544 <main+0x60>)
 8000512:	f006 fc85 	bl	8006e20 <osThreadNew>
 8000516:	4603      	mov	r3, r0
 8000518:	4a0b      	ldr	r2, [pc, #44]	; (8000548 <main+0x64>)
 800051a:	6013      	str	r3, [r2, #0]

  /* creation of usbcomunication */
  usbcomunicationHandle = osThreadNew(usbcomunicationserial, NULL, &usbcomunication_attributes);
 800051c:	4a0b      	ldr	r2, [pc, #44]	; (800054c <main+0x68>)
 800051e:	2100      	movs	r1, #0
 8000520:	480b      	ldr	r0, [pc, #44]	; (8000550 <main+0x6c>)
 8000522:	f006 fc7d 	bl	8006e20 <osThreadNew>
 8000526:	4603      	mov	r3, r0
 8000528:	4a0a      	ldr	r2, [pc, #40]	; (8000554 <main+0x70>)
 800052a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800052c:	f006 fc52 	bl	8006dd4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000530:	e7fe      	b.n	8000530 <main+0x4c>
 8000532:	bf00      	nop
 8000534:	0800a8cc 	.word	0x0800a8cc
 8000538:	080006e5 	.word	0x080006e5
 800053c:	20000180 	.word	0x20000180
 8000540:	0800a8f0 	.word	0x0800a8f0
 8000544:	080006f9 	.word	0x080006f9
 8000548:	20000184 	.word	0x20000184
 800054c:	0800a914 	.word	0x0800a914
 8000550:	08000719 	.word	0x08000719
 8000554:	20000188 	.word	0x20000188

08000558 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b094      	sub	sp, #80	; 0x50
 800055c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055e:	f107 0320 	add.w	r3, r7, #32
 8000562:	2230      	movs	r2, #48	; 0x30
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f009 ff9e 	bl	800a4a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056c:	f107 030c 	add.w	r3, r7, #12
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
 800057a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800057c:	2300      	movs	r3, #0
 800057e:	60bb      	str	r3, [r7, #8]
 8000580:	4b2e      	ldr	r3, [pc, #184]	; (800063c <_Z18SystemClock_Configv+0xe4>)
 8000582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000584:	4a2d      	ldr	r2, [pc, #180]	; (800063c <_Z18SystemClock_Configv+0xe4>)
 8000586:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800058a:	6413      	str	r3, [r2, #64]	; 0x40
 800058c:	4b2b      	ldr	r3, [pc, #172]	; (800063c <_Z18SystemClock_Configv+0xe4>)
 800058e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000594:	60bb      	str	r3, [r7, #8]
 8000596:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000598:	2300      	movs	r3, #0
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	4b28      	ldr	r3, [pc, #160]	; (8000640 <_Z18SystemClock_Configv+0xe8>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a27      	ldr	r2, [pc, #156]	; (8000640 <_Z18SystemClock_Configv+0xe8>)
 80005a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005a6:	6013      	str	r3, [r2, #0]
 80005a8:	4b25      	ldr	r3, [pc, #148]	; (8000640 <_Z18SystemClock_Configv+0xe8>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005b0:	607b      	str	r3, [r7, #4]
 80005b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80005b4:	2303      	movs	r3, #3
 80005b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005be:	2301      	movs	r3, #1
 80005c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c2:	2310      	movs	r3, #16
 80005c4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c6:	2302      	movs	r3, #2
 80005c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005d0:	2304      	movs	r3, #4
 80005d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005d4:	2348      	movs	r3, #72	; 0x48
 80005d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005d8:	2302      	movs	r3, #2
 80005da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80005dc:	2303      	movs	r3, #3
 80005de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e0:	f107 0320 	add.w	r3, r7, #32
 80005e4:	4618      	mov	r0, r3
 80005e6:	f002 f813 	bl	8002610 <HAL_RCC_OscConfig>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	bf14      	ite	ne
 80005f0:	2301      	movne	r3, #1
 80005f2:	2300      	moveq	r3, #0
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 80005fa:	f000 f8df 	bl	80007bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fe:	230f      	movs	r3, #15
 8000600:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000602:	2300      	movs	r3, #0
 8000604:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000606:	2300      	movs	r3, #0
 8000608:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800060a:	2300      	movs	r3, #0
 800060c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800060e:	2300      	movs	r3, #0
 8000610:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000612:	f107 030c 	add.w	r3, r7, #12
 8000616:	2100      	movs	r1, #0
 8000618:	4618      	mov	r0, r3
 800061a:	f002 fa71 	bl	8002b00 <HAL_RCC_ClockConfig>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	bf14      	ite	ne
 8000624:	2301      	movne	r3, #1
 8000626:	2300      	moveq	r3, #0
 8000628:	b2db      	uxtb	r3, r3
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 800062e:	f000 f8c5 	bl	80007bc <Error_Handler>
  }
}
 8000632:	bf00      	nop
 8000634:	3750      	adds	r7, #80	; 0x50
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	40023800 	.word	0x40023800
 8000640:	40007000 	.word	0x40007000

08000644 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b088      	sub	sp, #32
 8000648:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064a:	f107 030c 	add.w	r3, r7, #12
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	605a      	str	r2, [r3, #4]
 8000654:	609a      	str	r2, [r3, #8]
 8000656:	60da      	str	r2, [r3, #12]
 8000658:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800065a:	2300      	movs	r3, #0
 800065c:	60bb      	str	r3, [r7, #8]
 800065e:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <_ZL12MX_GPIO_Initv+0x98>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	4a1e      	ldr	r2, [pc, #120]	; (80006dc <_ZL12MX_GPIO_Initv+0x98>)
 8000664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000668:	6313      	str	r3, [r2, #48]	; 0x30
 800066a:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <_ZL12MX_GPIO_Initv+0x98>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000672:	60bb      	str	r3, [r7, #8]
 8000674:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	4b18      	ldr	r3, [pc, #96]	; (80006dc <_ZL12MX_GPIO_Initv+0x98>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	4a17      	ldr	r2, [pc, #92]	; (80006dc <_ZL12MX_GPIO_Initv+0x98>)
 8000680:	f043 0301 	orr.w	r3, r3, #1
 8000684:	6313      	str	r3, [r2, #48]	; 0x30
 8000686:	4b15      	ldr	r3, [pc, #84]	; (80006dc <_ZL12MX_GPIO_Initv+0x98>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	f003 0301 	and.w	r3, r3, #1
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000692:	2300      	movs	r3, #0
 8000694:	603b      	str	r3, [r7, #0]
 8000696:	4b11      	ldr	r3, [pc, #68]	; (80006dc <_ZL12MX_GPIO_Initv+0x98>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	4a10      	ldr	r2, [pc, #64]	; (80006dc <_ZL12MX_GPIO_Initv+0x98>)
 800069c:	f043 0302 	orr.w	r3, r3, #2
 80006a0:	6313      	str	r3, [r2, #48]	; 0x30
 80006a2:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <_ZL12MX_GPIO_Initv+0x98>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	f003 0302 	and.w	r3, r3, #2
 80006aa:	603b      	str	r3, [r7, #0]
 80006ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 80006ae:	2200      	movs	r2, #0
 80006b0:	2120      	movs	r1, #32
 80006b2:	480b      	ldr	r0, [pc, #44]	; (80006e0 <_ZL12MX_GPIO_Initv+0x9c>)
 80006b4:	f000 fcfc 	bl	80010b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : led_Pin */
  GPIO_InitStruct.Pin = led_Pin;
 80006b8:	2320      	movs	r3, #32
 80006ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006bc:	2301      	movs	r3, #1
 80006be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c0:	2300      	movs	r3, #0
 80006c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c4:	2300      	movs	r3, #0
 80006c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 80006c8:	f107 030c 	add.w	r3, r7, #12
 80006cc:	4619      	mov	r1, r3
 80006ce:	4804      	ldr	r0, [pc, #16]	; (80006e0 <_ZL12MX_GPIO_Initv+0x9c>)
 80006d0:	f000 fb52 	bl	8000d78 <HAL_GPIO_Init>

}
 80006d4:	bf00      	nop
 80006d6:	3720      	adds	r7, #32
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	40023800 	.word	0x40023800
 80006e0:	40020400 	.word	0x40020400

080006e4 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80006ec:	f009 f8c6 	bl	800987c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80006f0:	2001      	movs	r0, #1
 80006f2:	f006 fc27 	bl	8006f44 <osDelay>
 80006f6:	e7fb      	b.n	80006f0 <_Z16StartDefaultTaskPv+0xc>

080006f8 <_Z15ledstatustogglePv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ledstatustoggle */
void ledstatustoggle(void *argument)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ledstatustoggle */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(led_GPIO_Port, led_Pin);
 8000700:	2120      	movs	r1, #32
 8000702:	4804      	ldr	r0, [pc, #16]	; (8000714 <_Z15ledstatustogglePv+0x1c>)
 8000704:	f000 fced 	bl	80010e2 <HAL_GPIO_TogglePin>
	  osDelay(1000);
 8000708:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800070c:	f006 fc1a 	bl	8006f44 <osDelay>
	  HAL_GPIO_TogglePin(led_GPIO_Port, led_Pin);
 8000710:	e7f6      	b.n	8000700 <_Z15ledstatustogglePv+0x8>
 8000712:	bf00      	nop
 8000714:	40020400 	.word	0x40020400

08000718 <_Z21usbcomunicationserialPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_usbcomunicationserial */
void usbcomunicationserial(void *argument)
{
 8000718:	b590      	push	{r4, r7, lr}
 800071a:	b091      	sub	sp, #68	; 0x44
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN usbcomunicationserial */
	std::string tosend = "Hello";
 8000720:	f107 0320 	add.w	r3, r7, #32
 8000724:	4618      	mov	r0, r3
 8000726:	f009 fdc3 	bl	800a2b0 <_ZNSaIcEC1Ev>
 800072a:	f107 0220 	add.w	r2, r7, #32
 800072e:	f107 0308 	add.w	r3, r7, #8
 8000732:	4917      	ldr	r1, [pc, #92]	; (8000790 <_Z21usbcomunicationserialPv+0x78>)
 8000734:	4618      	mov	r0, r3
 8000736:	f009 fe2b 	bl	800a390 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800073a:	f107 0320 	add.w	r3, r7, #32
 800073e:	4618      	mov	r0, r3
 8000740:	f009 fdb7 	bl	800a2b2 <_ZNSaIcED1Ev>
  /* Infinite loop */
  for(;;)
  {

	Vesp::getprinter().log("Ciao come stai ?\n");
 8000744:	f000 f862 	bl	800080c <_ZN4Vesp10getprinterEv>
 8000748:	4604      	mov	r4, r0
 800074a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800074e:	4618      	mov	r0, r3
 8000750:	f009 fdae 	bl	800a2b0 <_ZNSaIcEC1Ev>
 8000754:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8000758:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800075c:	490d      	ldr	r1, [pc, #52]	; (8000794 <_Z21usbcomunicationserialPv+0x7c>)
 800075e:	4618      	mov	r0, r3
 8000760:	f009 fe16 	bl	800a390 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8000764:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000768:	4619      	mov	r1, r3
 800076a:	4620      	mov	r0, r4
 800076c:	f000 f838 	bl	80007e0 <_ZN7printer3logENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8000770:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000774:	4618      	mov	r0, r3
 8000776:	f009 fddc 	bl	800a332 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800077a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800077e:	4618      	mov	r0, r3
 8000780:	f009 fd97 	bl	800a2b2 <_ZNSaIcED1Ev>
	//Vesp::getprinter().log(tosend);
	osDelay(2000);
 8000784:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000788:	f006 fbdc 	bl	8006f44 <osDelay>
	Vesp::getprinter().log("Ciao come stai ?\n");
 800078c:	e7da      	b.n	8000744 <_Z21usbcomunicationserialPv+0x2c>
 800078e:	bf00      	nop
 8000790:	0800a85c 	.word	0x0800a85c
 8000794:	0800a864 	.word	0x0800a864

08000798 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a04      	ldr	r2, [pc, #16]	; (80007b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d101      	bne.n	80007ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007aa:	f000 f9bf 	bl	8000b2c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40001000 	.word	0x40001000

080007bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c0:	b672      	cpsid	i
}
 80007c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c4:	e7fe      	b.n	80007c4 <Error_Handler+0x8>
	...

080007c8 <_ZN7printer13get_singletonEv>:
	printer() = default;
    printer(const printer &) = delete;
    printer& operator=(const printer &) = delete;

public:
	static printer *get_singleton(void){
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
		static printer *singleton;
		return singleton;
 80007cc:	4b03      	ldr	r3, [pc, #12]	; (80007dc <_ZN7printer13get_singletonEv+0x14>)
 80007ce:	681b      	ldr	r3, [r3, #0]
	}
 80007d0:	4618      	mov	r0, r3
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	2000018c 	.word	0x2000018c

080007e0 <_ZN7printer3logENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
 *      Author: giovannirasera
 */

#include "printer.h"

void printer::log(std::string toprint){
 80007e0:	b590      	push	{r4, r7, lr}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	6039      	str	r1, [r7, #0]
	CDC_Transmit_FS((uint8_t *)toprint.c_str(), toprint.length());
 80007ea:	6838      	ldr	r0, [r7, #0]
 80007ec:	f009 fda9 	bl	800a342 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80007f0:	4604      	mov	r4, r0
 80007f2:	6838      	ldr	r0, [r7, #0]
 80007f4:	f009 fda3 	bl	800a33e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 80007f8:	4603      	mov	r3, r0
 80007fa:	b29b      	uxth	r3, r3
 80007fc:	4619      	mov	r1, r3
 80007fe:	4620      	mov	r0, r4
 8000800:	f009 f8fa 	bl	80099f8 <CDC_Transmit_FS>
}
 8000804:	bf00      	nop
 8000806:	370c      	adds	r7, #12
 8000808:	46bd      	mov	sp, r7
 800080a:	bd90      	pop	{r4, r7, pc}

0800080c <_ZN4Vesp10getprinterEv>:

namespace Vesp{
	printer &getprinter(){
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
		return *printer::get_singleton();
 8000810:	f7ff ffda 	bl	80007c8 <_ZN7printer13get_singletonEv>
 8000814:	4603      	mov	r3, r0
	}
 8000816:	4618      	mov	r0, r3
 8000818:	bd80      	pop	{r7, pc}
	...

0800081c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	4b12      	ldr	r3, [pc, #72]	; (8000870 <HAL_MspInit+0x54>)
 8000828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800082a:	4a11      	ldr	r2, [pc, #68]	; (8000870 <HAL_MspInit+0x54>)
 800082c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000830:	6453      	str	r3, [r2, #68]	; 0x44
 8000832:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <HAL_MspInit+0x54>)
 8000834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000836:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	603b      	str	r3, [r7, #0]
 8000842:	4b0b      	ldr	r3, [pc, #44]	; (8000870 <HAL_MspInit+0x54>)
 8000844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000846:	4a0a      	ldr	r2, [pc, #40]	; (8000870 <HAL_MspInit+0x54>)
 8000848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800084c:	6413      	str	r3, [r2, #64]	; 0x40
 800084e:	4b08      	ldr	r3, [pc, #32]	; (8000870 <HAL_MspInit+0x54>)
 8000850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000856:	603b      	str	r3, [r7, #0]
 8000858:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800085a:	2200      	movs	r2, #0
 800085c:	210f      	movs	r1, #15
 800085e:	f06f 0001 	mvn.w	r0, #1
 8000862:	f000 fa5f 	bl	8000d24 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40023800 	.word	0x40023800

08000874 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b08e      	sub	sp, #56	; 0x38
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800087c:	2300      	movs	r3, #0
 800087e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000880:	2300      	movs	r3, #0
 8000882:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000884:	2300      	movs	r3, #0
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	4b33      	ldr	r3, [pc, #204]	; (8000958 <HAL_InitTick+0xe4>)
 800088a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088c:	4a32      	ldr	r2, [pc, #200]	; (8000958 <HAL_InitTick+0xe4>)
 800088e:	f043 0310 	orr.w	r3, r3, #16
 8000892:	6413      	str	r3, [r2, #64]	; 0x40
 8000894:	4b30      	ldr	r3, [pc, #192]	; (8000958 <HAL_InitTick+0xe4>)
 8000896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000898:	f003 0310 	and.w	r3, r3, #16
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008a0:	f107 0210 	add.w	r2, r7, #16
 80008a4:	f107 0314 	add.w	r3, r7, #20
 80008a8:	4611      	mov	r1, r2
 80008aa:	4618      	mov	r0, r3
 80008ac:	f002 fb34 	bl	8002f18 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80008b0:	6a3b      	ldr	r3, [r7, #32]
 80008b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80008b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d103      	bne.n	80008c2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80008ba:	f002 fb19 	bl	8002ef0 <HAL_RCC_GetPCLK1Freq>
 80008be:	6378      	str	r0, [r7, #52]	; 0x34
 80008c0:	e004      	b.n	80008cc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80008c2:	f002 fb15 	bl	8002ef0 <HAL_RCC_GetPCLK1Freq>
 80008c6:	4603      	mov	r3, r0
 80008c8:	005b      	lsls	r3, r3, #1
 80008ca:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008ce:	4a23      	ldr	r2, [pc, #140]	; (800095c <HAL_InitTick+0xe8>)
 80008d0:	fba2 2303 	umull	r2, r3, r2, r3
 80008d4:	0c9b      	lsrs	r3, r3, #18
 80008d6:	3b01      	subs	r3, #1
 80008d8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80008da:	4b21      	ldr	r3, [pc, #132]	; (8000960 <HAL_InitTick+0xec>)
 80008dc:	4a21      	ldr	r2, [pc, #132]	; (8000964 <HAL_InitTick+0xf0>)
 80008de:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80008e0:	4b1f      	ldr	r3, [pc, #124]	; (8000960 <HAL_InitTick+0xec>)
 80008e2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008e6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80008e8:	4a1d      	ldr	r2, [pc, #116]	; (8000960 <HAL_InitTick+0xec>)
 80008ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008ec:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80008ee:	4b1c      	ldr	r3, [pc, #112]	; (8000960 <HAL_InitTick+0xec>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f4:	4b1a      	ldr	r3, [pc, #104]	; (8000960 <HAL_InitTick+0xec>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008fa:	4b19      	ldr	r3, [pc, #100]	; (8000960 <HAL_InitTick+0xec>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000900:	4817      	ldr	r0, [pc, #92]	; (8000960 <HAL_InitTick+0xec>)
 8000902:	f002 fb3b 	bl	8002f7c <HAL_TIM_Base_Init>
 8000906:	4603      	mov	r3, r0
 8000908:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800090c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000910:	2b00      	cmp	r3, #0
 8000912:	d11b      	bne.n	800094c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000914:	4812      	ldr	r0, [pc, #72]	; (8000960 <HAL_InitTick+0xec>)
 8000916:	f002 fb8b 	bl	8003030 <HAL_TIM_Base_Start_IT>
 800091a:	4603      	mov	r3, r0
 800091c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000920:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000924:	2b00      	cmp	r3, #0
 8000926:	d111      	bne.n	800094c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000928:	2036      	movs	r0, #54	; 0x36
 800092a:	f000 fa17 	bl	8000d5c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	2b0f      	cmp	r3, #15
 8000932:	d808      	bhi.n	8000946 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000934:	2200      	movs	r2, #0
 8000936:	6879      	ldr	r1, [r7, #4]
 8000938:	2036      	movs	r0, #54	; 0x36
 800093a:	f000 f9f3 	bl	8000d24 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800093e:	4a0a      	ldr	r2, [pc, #40]	; (8000968 <HAL_InitTick+0xf4>)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	6013      	str	r3, [r2, #0]
 8000944:	e002      	b.n	800094c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000946:	2301      	movs	r3, #1
 8000948:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800094c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000950:	4618      	mov	r0, r3
 8000952:	3738      	adds	r7, #56	; 0x38
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	40023800 	.word	0x40023800
 800095c:	431bde83 	.word	0x431bde83
 8000960:	20000190 	.word	0x20000190
 8000964:	40001000 	.word	0x40001000
 8000968:	20000004 	.word	0x20000004

0800096c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000970:	e7fe      	b.n	8000970 <NMI_Handler+0x4>

08000972 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000976:	e7fe      	b.n	8000976 <HardFault_Handler+0x4>

08000978 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800097c:	e7fe      	b.n	800097c <MemManage_Handler+0x4>

0800097e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000982:	e7fe      	b.n	8000982 <BusFault_Handler+0x4>

08000984 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000988:	e7fe      	b.n	8000988 <UsageFault_Handler+0x4>

0800098a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800099c:	4802      	ldr	r0, [pc, #8]	; (80009a8 <TIM6_DAC_IRQHandler+0x10>)
 800099e:	f002 fbb7 	bl	8003110 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	20000190 	.word	0x20000190

080009ac <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80009b0:	4802      	ldr	r0, [pc, #8]	; (80009bc <OTG_FS_IRQHandler+0x10>)
 80009b2:	f000 fd00 	bl	80013b6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	200060d0 	.word	0x200060d0

080009c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
	return 1;
 80009c4:	2301      	movs	r3, #1
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr

080009d0 <_kill>:

int _kill(int pid, int sig)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80009da:	f009 fd1b 	bl	800a414 <__errno>
 80009de:	4603      	mov	r3, r0
 80009e0:	2216      	movs	r2, #22
 80009e2:	601a      	str	r2, [r3, #0]
	return -1;
 80009e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	3708      	adds	r7, #8
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <_exit>:

void _exit (int status)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80009f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	f7ff ffe7 	bl	80009d0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000a02:	e7fe      	b.n	8000a02 <_exit+0x12>

08000a04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b086      	sub	sp, #24
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a0c:	4a14      	ldr	r2, [pc, #80]	; (8000a60 <_sbrk+0x5c>)
 8000a0e:	4b15      	ldr	r3, [pc, #84]	; (8000a64 <_sbrk+0x60>)
 8000a10:	1ad3      	subs	r3, r2, r3
 8000a12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a18:	4b13      	ldr	r3, [pc, #76]	; (8000a68 <_sbrk+0x64>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d102      	bne.n	8000a26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a20:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <_sbrk+0x64>)
 8000a22:	4a12      	ldr	r2, [pc, #72]	; (8000a6c <_sbrk+0x68>)
 8000a24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a26:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <_sbrk+0x64>)
 8000a28:	681a      	ldr	r2, [r3, #0]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	693a      	ldr	r2, [r7, #16]
 8000a30:	429a      	cmp	r2, r3
 8000a32:	d207      	bcs.n	8000a44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a34:	f009 fcee 	bl	800a414 <__errno>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	220c      	movs	r2, #12
 8000a3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a42:	e009      	b.n	8000a58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a44:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <_sbrk+0x64>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a4a:	4b07      	ldr	r3, [pc, #28]	; (8000a68 <_sbrk+0x64>)
 8000a4c:	681a      	ldr	r2, [r3, #0]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	4413      	add	r3, r2
 8000a52:	4a05      	ldr	r2, [pc, #20]	; (8000a68 <_sbrk+0x64>)
 8000a54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a56:	68fb      	ldr	r3, [r7, #12]
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	3718      	adds	r7, #24
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	20020000 	.word	0x20020000
 8000a64:	00000400 	.word	0x00000400
 8000a68:	200001d8 	.word	0x200001d8
 8000a6c:	20006810 	.word	0x20006810

08000a70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a74:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <SystemInit+0x20>)
 8000a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a7a:	4a05      	ldr	r2, [pc, #20]	; (8000a90 <SystemInit+0x20>)
 8000a7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a84:	bf00      	nop
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000acc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a98:	480d      	ldr	r0, [pc, #52]	; (8000ad0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a9a:	490e      	ldr	r1, [pc, #56]	; (8000ad4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a9c:	4a0e      	ldr	r2, [pc, #56]	; (8000ad8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aa0:	e002      	b.n	8000aa8 <LoopCopyDataInit>

08000aa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aa6:	3304      	adds	r3, #4

08000aa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aac:	d3f9      	bcc.n	8000aa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aae:	4a0b      	ldr	r2, [pc, #44]	; (8000adc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ab0:	4c0b      	ldr	r4, [pc, #44]	; (8000ae0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ab2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ab4:	e001      	b.n	8000aba <LoopFillZerobss>

08000ab6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ab6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ab8:	3204      	adds	r2, #4

08000aba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000abc:	d3fb      	bcc.n	8000ab6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000abe:	f7ff ffd7 	bl	8000a70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ac2:	f009 fcad 	bl	800a420 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ac6:	f7ff fd0d 	bl	80004e4 <main>
  bx  lr    
 8000aca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000acc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ad0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ad4:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 8000ad8:	0800aa04 	.word	0x0800aa04
  ldr r2, =_sbss
 8000adc:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 8000ae0:	20006810 	.word	0x20006810

08000ae4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ae4:	e7fe      	b.n	8000ae4 <ADC_IRQHandler>
	...

08000ae8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000aec:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <HAL_Init+0x40>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a0d      	ldr	r2, [pc, #52]	; (8000b28 <HAL_Init+0x40>)
 8000af2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000af6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000af8:	4b0b      	ldr	r3, [pc, #44]	; (8000b28 <HAL_Init+0x40>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a0a      	ldr	r2, [pc, #40]	; (8000b28 <HAL_Init+0x40>)
 8000afe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b04:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <HAL_Init+0x40>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a07      	ldr	r2, [pc, #28]	; (8000b28 <HAL_Init+0x40>)
 8000b0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b10:	2003      	movs	r0, #3
 8000b12:	f000 f8fc 	bl	8000d0e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b16:	200f      	movs	r0, #15
 8000b18:	f7ff feac 	bl	8000874 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b1c:	f7ff fe7e 	bl	800081c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b20:	2300      	movs	r3, #0
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40023c00 	.word	0x40023c00

08000b2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <HAL_IncTick+0x20>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	461a      	mov	r2, r3
 8000b36:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <HAL_IncTick+0x24>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4413      	add	r3, r2
 8000b3c:	4a04      	ldr	r2, [pc, #16]	; (8000b50 <HAL_IncTick+0x24>)
 8000b3e:	6013      	str	r3, [r2, #0]
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	20000008 	.word	0x20000008
 8000b50:	200001dc 	.word	0x200001dc

08000b54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  return uwTick;
 8000b58:	4b03      	ldr	r3, [pc, #12]	; (8000b68 <HAL_GetTick+0x14>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	200001dc 	.word	0x200001dc

08000b6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b74:	f7ff ffee 	bl	8000b54 <HAL_GetTick>
 8000b78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b84:	d005      	beq.n	8000b92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b86:	4b0a      	ldr	r3, [pc, #40]	; (8000bb0 <HAL_Delay+0x44>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	4413      	add	r3, r2
 8000b90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b92:	bf00      	nop
 8000b94:	f7ff ffde 	bl	8000b54 <HAL_GetTick>
 8000b98:	4602      	mov	r2, r0
 8000b9a:	68bb      	ldr	r3, [r7, #8]
 8000b9c:	1ad3      	subs	r3, r2, r3
 8000b9e:	68fa      	ldr	r2, [r7, #12]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	d8f7      	bhi.n	8000b94 <HAL_Delay+0x28>
  {
  }
}
 8000ba4:	bf00      	nop
 8000ba6:	bf00      	nop
 8000ba8:	3710      	adds	r7, #16
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	20000008 	.word	0x20000008

08000bb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b085      	sub	sp, #20
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	f003 0307 	and.w	r3, r3, #7
 8000bc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bc4:	4b0c      	ldr	r3, [pc, #48]	; (8000bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bca:	68ba      	ldr	r2, [r7, #8]
 8000bcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000be0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000be4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000be6:	4a04      	ldr	r2, [pc, #16]	; (8000bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	60d3      	str	r3, [r2, #12]
}
 8000bec:	bf00      	nop
 8000bee:	3714      	adds	r7, #20
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c00:	4b04      	ldr	r3, [pc, #16]	; (8000c14 <__NVIC_GetPriorityGrouping+0x18>)
 8000c02:	68db      	ldr	r3, [r3, #12]
 8000c04:	0a1b      	lsrs	r3, r3, #8
 8000c06:	f003 0307 	and.w	r3, r3, #7
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	e000ed00 	.word	0xe000ed00

08000c18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	db0b      	blt.n	8000c42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c2a:	79fb      	ldrb	r3, [r7, #7]
 8000c2c:	f003 021f 	and.w	r2, r3, #31
 8000c30:	4907      	ldr	r1, [pc, #28]	; (8000c50 <__NVIC_EnableIRQ+0x38>)
 8000c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c36:	095b      	lsrs	r3, r3, #5
 8000c38:	2001      	movs	r0, #1
 8000c3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c42:	bf00      	nop
 8000c44:	370c      	adds	r7, #12
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	e000e100 	.word	0xe000e100

08000c54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	6039      	str	r1, [r7, #0]
 8000c5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	db0a      	blt.n	8000c7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	b2da      	uxtb	r2, r3
 8000c6c:	490c      	ldr	r1, [pc, #48]	; (8000ca0 <__NVIC_SetPriority+0x4c>)
 8000c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c72:	0112      	lsls	r2, r2, #4
 8000c74:	b2d2      	uxtb	r2, r2
 8000c76:	440b      	add	r3, r1
 8000c78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c7c:	e00a      	b.n	8000c94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	b2da      	uxtb	r2, r3
 8000c82:	4908      	ldr	r1, [pc, #32]	; (8000ca4 <__NVIC_SetPriority+0x50>)
 8000c84:	79fb      	ldrb	r3, [r7, #7]
 8000c86:	f003 030f 	and.w	r3, r3, #15
 8000c8a:	3b04      	subs	r3, #4
 8000c8c:	0112      	lsls	r2, r2, #4
 8000c8e:	b2d2      	uxtb	r2, r2
 8000c90:	440b      	add	r3, r1
 8000c92:	761a      	strb	r2, [r3, #24]
}
 8000c94:	bf00      	nop
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	e000e100 	.word	0xe000e100
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b089      	sub	sp, #36	; 0x24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60f8      	str	r0, [r7, #12]
 8000cb0:	60b9      	str	r1, [r7, #8]
 8000cb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	f003 0307 	and.w	r3, r3, #7
 8000cba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cbc:	69fb      	ldr	r3, [r7, #28]
 8000cbe:	f1c3 0307 	rsb	r3, r3, #7
 8000cc2:	2b04      	cmp	r3, #4
 8000cc4:	bf28      	it	cs
 8000cc6:	2304      	movcs	r3, #4
 8000cc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	3304      	adds	r3, #4
 8000cce:	2b06      	cmp	r3, #6
 8000cd0:	d902      	bls.n	8000cd8 <NVIC_EncodePriority+0x30>
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	3b03      	subs	r3, #3
 8000cd6:	e000      	b.n	8000cda <NVIC_EncodePriority+0x32>
 8000cd8:	2300      	movs	r3, #0
 8000cda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ce0:	69bb      	ldr	r3, [r7, #24]
 8000ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce6:	43da      	mvns	r2, r3
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	401a      	ands	r2, r3
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cf0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfa:	43d9      	mvns	r1, r3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d00:	4313      	orrs	r3, r2
         );
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3724      	adds	r7, #36	; 0x24
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr

08000d0e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b082      	sub	sp, #8
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f7ff ff4c 	bl	8000bb4 <__NVIC_SetPriorityGrouping>
}
 8000d1c:	bf00      	nop
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b086      	sub	sp, #24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
 8000d30:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d32:	2300      	movs	r3, #0
 8000d34:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d36:	f7ff ff61 	bl	8000bfc <__NVIC_GetPriorityGrouping>
 8000d3a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d3c:	687a      	ldr	r2, [r7, #4]
 8000d3e:	68b9      	ldr	r1, [r7, #8]
 8000d40:	6978      	ldr	r0, [r7, #20]
 8000d42:	f7ff ffb1 	bl	8000ca8 <NVIC_EncodePriority>
 8000d46:	4602      	mov	r2, r0
 8000d48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d4c:	4611      	mov	r1, r2
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff ff80 	bl	8000c54 <__NVIC_SetPriority>
}
 8000d54:	bf00      	nop
 8000d56:	3718      	adds	r7, #24
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f7ff ff54 	bl	8000c18 <__NVIC_EnableIRQ>
}
 8000d70:	bf00      	nop
 8000d72:	3708      	adds	r7, #8
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b089      	sub	sp, #36	; 0x24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d82:	2300      	movs	r3, #0
 8000d84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d86:	2300      	movs	r3, #0
 8000d88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61fb      	str	r3, [r7, #28]
 8000d92:	e16b      	b.n	800106c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d94:	2201      	movs	r2, #1
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	697a      	ldr	r2, [r7, #20]
 8000da4:	4013      	ands	r3, r2
 8000da6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000da8:	693a      	ldr	r2, [r7, #16]
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	f040 815a 	bne.w	8001066 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f003 0303 	and.w	r3, r3, #3
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d005      	beq.n	8000dca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dc6:	2b02      	cmp	r3, #2
 8000dc8:	d130      	bne.n	8000e2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	689b      	ldr	r3, [r3, #8]
 8000dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	2203      	movs	r2, #3
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	43db      	mvns	r3, r3
 8000ddc:	69ba      	ldr	r2, [r7, #24]
 8000dde:	4013      	ands	r3, r2
 8000de0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	68da      	ldr	r2, [r3, #12]
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	005b      	lsls	r3, r3, #1
 8000dea:	fa02 f303 	lsl.w	r3, r2, r3
 8000dee:	69ba      	ldr	r2, [r7, #24]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	69ba      	ldr	r2, [r7, #24]
 8000df8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e00:	2201      	movs	r2, #1
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	43db      	mvns	r3, r3
 8000e0a:	69ba      	ldr	r2, [r7, #24]
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	091b      	lsrs	r3, r3, #4
 8000e16:	f003 0201 	and.w	r2, r3, #1
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	4313      	orrs	r3, r2
 8000e24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f003 0303 	and.w	r3, r3, #3
 8000e34:	2b03      	cmp	r3, #3
 8000e36:	d017      	beq.n	8000e68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	2203      	movs	r2, #3
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	689a      	ldr	r2, [r3, #8]
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f003 0303 	and.w	r3, r3, #3
 8000e70:	2b02      	cmp	r3, #2
 8000e72:	d123      	bne.n	8000ebc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	08da      	lsrs	r2, r3, #3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	3208      	adds	r2, #8
 8000e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	f003 0307 	and.w	r3, r3, #7
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	220f      	movs	r2, #15
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	43db      	mvns	r3, r3
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	4013      	ands	r3, r2
 8000e96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	691a      	ldr	r2, [r3, #16]
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	f003 0307 	and.w	r3, r3, #7
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	08da      	lsrs	r2, r3, #3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	3208      	adds	r2, #8
 8000eb6:	69b9      	ldr	r1, [r7, #24]
 8000eb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	2203      	movs	r2, #3
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	69ba      	ldr	r2, [r7, #24]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f003 0203 	and.w	r2, r3, #3
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	f000 80b4 	beq.w	8001066 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	4b60      	ldr	r3, [pc, #384]	; (8001084 <HAL_GPIO_Init+0x30c>)
 8000f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f06:	4a5f      	ldr	r2, [pc, #380]	; (8001084 <HAL_GPIO_Init+0x30c>)
 8000f08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f0e:	4b5d      	ldr	r3, [pc, #372]	; (8001084 <HAL_GPIO_Init+0x30c>)
 8000f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f1a:	4a5b      	ldr	r2, [pc, #364]	; (8001088 <HAL_GPIO_Init+0x310>)
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	089b      	lsrs	r3, r3, #2
 8000f20:	3302      	adds	r3, #2
 8000f22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	f003 0303 	and.w	r3, r3, #3
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	220f      	movs	r2, #15
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	43db      	mvns	r3, r3
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a52      	ldr	r2, [pc, #328]	; (800108c <HAL_GPIO_Init+0x314>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d02b      	beq.n	8000f9e <HAL_GPIO_Init+0x226>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a51      	ldr	r2, [pc, #324]	; (8001090 <HAL_GPIO_Init+0x318>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d025      	beq.n	8000f9a <HAL_GPIO_Init+0x222>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a50      	ldr	r2, [pc, #320]	; (8001094 <HAL_GPIO_Init+0x31c>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d01f      	beq.n	8000f96 <HAL_GPIO_Init+0x21e>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a4f      	ldr	r2, [pc, #316]	; (8001098 <HAL_GPIO_Init+0x320>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d019      	beq.n	8000f92 <HAL_GPIO_Init+0x21a>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a4e      	ldr	r2, [pc, #312]	; (800109c <HAL_GPIO_Init+0x324>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d013      	beq.n	8000f8e <HAL_GPIO_Init+0x216>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a4d      	ldr	r2, [pc, #308]	; (80010a0 <HAL_GPIO_Init+0x328>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d00d      	beq.n	8000f8a <HAL_GPIO_Init+0x212>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a4c      	ldr	r2, [pc, #304]	; (80010a4 <HAL_GPIO_Init+0x32c>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d007      	beq.n	8000f86 <HAL_GPIO_Init+0x20e>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a4b      	ldr	r2, [pc, #300]	; (80010a8 <HAL_GPIO_Init+0x330>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d101      	bne.n	8000f82 <HAL_GPIO_Init+0x20a>
 8000f7e:	2307      	movs	r3, #7
 8000f80:	e00e      	b.n	8000fa0 <HAL_GPIO_Init+0x228>
 8000f82:	2308      	movs	r3, #8
 8000f84:	e00c      	b.n	8000fa0 <HAL_GPIO_Init+0x228>
 8000f86:	2306      	movs	r3, #6
 8000f88:	e00a      	b.n	8000fa0 <HAL_GPIO_Init+0x228>
 8000f8a:	2305      	movs	r3, #5
 8000f8c:	e008      	b.n	8000fa0 <HAL_GPIO_Init+0x228>
 8000f8e:	2304      	movs	r3, #4
 8000f90:	e006      	b.n	8000fa0 <HAL_GPIO_Init+0x228>
 8000f92:	2303      	movs	r3, #3
 8000f94:	e004      	b.n	8000fa0 <HAL_GPIO_Init+0x228>
 8000f96:	2302      	movs	r3, #2
 8000f98:	e002      	b.n	8000fa0 <HAL_GPIO_Init+0x228>
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e000      	b.n	8000fa0 <HAL_GPIO_Init+0x228>
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	69fa      	ldr	r2, [r7, #28]
 8000fa2:	f002 0203 	and.w	r2, r2, #3
 8000fa6:	0092      	lsls	r2, r2, #2
 8000fa8:	4093      	lsls	r3, r2
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fb0:	4935      	ldr	r1, [pc, #212]	; (8001088 <HAL_GPIO_Init+0x310>)
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	089b      	lsrs	r3, r3, #2
 8000fb6:	3302      	adds	r3, #2
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fbe:	4b3b      	ldr	r3, [pc, #236]	; (80010ac <HAL_GPIO_Init+0x334>)
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	43db      	mvns	r3, r3
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d003      	beq.n	8000fe2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fe2:	4a32      	ldr	r2, [pc, #200]	; (80010ac <HAL_GPIO_Init+0x334>)
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fe8:	4b30      	ldr	r3, [pc, #192]	; (80010ac <HAL_GPIO_Init+0x334>)
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001000:	2b00      	cmp	r3, #0
 8001002:	d003      	beq.n	800100c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	4313      	orrs	r3, r2
 800100a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800100c:	4a27      	ldr	r2, [pc, #156]	; (80010ac <HAL_GPIO_Init+0x334>)
 800100e:	69bb      	ldr	r3, [r7, #24]
 8001010:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001012:	4b26      	ldr	r3, [pc, #152]	; (80010ac <HAL_GPIO_Init+0x334>)
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	43db      	mvns	r3, r3
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	4013      	ands	r3, r2
 8001020:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800102a:	2b00      	cmp	r3, #0
 800102c:	d003      	beq.n	8001036 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	4313      	orrs	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001036:	4a1d      	ldr	r2, [pc, #116]	; (80010ac <HAL_GPIO_Init+0x334>)
 8001038:	69bb      	ldr	r3, [r7, #24]
 800103a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800103c:	4b1b      	ldr	r3, [pc, #108]	; (80010ac <HAL_GPIO_Init+0x334>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	43db      	mvns	r3, r3
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	4013      	ands	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001054:	2b00      	cmp	r3, #0
 8001056:	d003      	beq.n	8001060 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	4313      	orrs	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001060:	4a12      	ldr	r2, [pc, #72]	; (80010ac <HAL_GPIO_Init+0x334>)
 8001062:	69bb      	ldr	r3, [r7, #24]
 8001064:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	3301      	adds	r3, #1
 800106a:	61fb      	str	r3, [r7, #28]
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	2b0f      	cmp	r3, #15
 8001070:	f67f ae90 	bls.w	8000d94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001074:	bf00      	nop
 8001076:	bf00      	nop
 8001078:	3724      	adds	r7, #36	; 0x24
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	40023800 	.word	0x40023800
 8001088:	40013800 	.word	0x40013800
 800108c:	40020000 	.word	0x40020000
 8001090:	40020400 	.word	0x40020400
 8001094:	40020800 	.word	0x40020800
 8001098:	40020c00 	.word	0x40020c00
 800109c:	40021000 	.word	0x40021000
 80010a0:	40021400 	.word	0x40021400
 80010a4:	40021800 	.word	0x40021800
 80010a8:	40021c00 	.word	0x40021c00
 80010ac:	40013c00 	.word	0x40013c00

080010b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	460b      	mov	r3, r1
 80010ba:	807b      	strh	r3, [r7, #2]
 80010bc:	4613      	mov	r3, r2
 80010be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010c0:	787b      	ldrb	r3, [r7, #1]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d003      	beq.n	80010ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010c6:	887a      	ldrh	r2, [r7, #2]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010cc:	e003      	b.n	80010d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010ce:	887b      	ldrh	r3, [r7, #2]
 80010d0:	041a      	lsls	r2, r3, #16
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	619a      	str	r2, [r3, #24]
}
 80010d6:	bf00      	nop
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr

080010e2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010e2:	b480      	push	{r7}
 80010e4:	b085      	sub	sp, #20
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
 80010ea:	460b      	mov	r3, r1
 80010ec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	695b      	ldr	r3, [r3, #20]
 80010f2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010f4:	887a      	ldrh	r2, [r7, #2]
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	4013      	ands	r3, r2
 80010fa:	041a      	lsls	r2, r3, #16
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	43d9      	mvns	r1, r3
 8001100:	887b      	ldrh	r3, [r7, #2]
 8001102:	400b      	ands	r3, r1
 8001104:	431a      	orrs	r2, r3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	619a      	str	r2, [r3, #24]
}
 800110a:	bf00      	nop
 800110c:	3714      	adds	r7, #20
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr

08001116 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001116:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001118:	b08f      	sub	sp, #60	; 0x3c
 800111a:	af0a      	add	r7, sp, #40	; 0x28
 800111c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d101      	bne.n	8001128 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001124:	2301      	movs	r3, #1
 8001126:	e10f      	b.n	8001348 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001134:	b2db      	uxtb	r3, r3
 8001136:	2b00      	cmp	r3, #0
 8001138:	d106      	bne.n	8001148 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2200      	movs	r2, #0
 800113e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f008 fda0 	bl	8009c88 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2203      	movs	r2, #3
 800114c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001158:	2b00      	cmp	r3, #0
 800115a:	d102      	bne.n	8001162 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2200      	movs	r2, #0
 8001160:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4618      	mov	r0, r3
 8001168:	f002 facb 	bl	8003702 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	603b      	str	r3, [r7, #0]
 8001172:	687e      	ldr	r6, [r7, #4]
 8001174:	466d      	mov	r5, sp
 8001176:	f106 0410 	add.w	r4, r6, #16
 800117a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800117c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800117e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001180:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001182:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001186:	e885 0003 	stmia.w	r5, {r0, r1}
 800118a:	1d33      	adds	r3, r6, #4
 800118c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800118e:	6838      	ldr	r0, [r7, #0]
 8001190:	f002 f9a2 	bl	80034d8 <USB_CoreInit>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d005      	beq.n	80011a6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2202      	movs	r2, #2
 800119e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e0d0      	b.n	8001348 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2100      	movs	r1, #0
 80011ac:	4618      	mov	r0, r3
 80011ae:	f002 fab9 	bl	8003724 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011b2:	2300      	movs	r3, #0
 80011b4:	73fb      	strb	r3, [r7, #15]
 80011b6:	e04a      	b.n	800124e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80011b8:	7bfa      	ldrb	r2, [r7, #15]
 80011ba:	6879      	ldr	r1, [r7, #4]
 80011bc:	4613      	mov	r3, r2
 80011be:	00db      	lsls	r3, r3, #3
 80011c0:	4413      	add	r3, r2
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	440b      	add	r3, r1
 80011c6:	333d      	adds	r3, #61	; 0x3d
 80011c8:	2201      	movs	r2, #1
 80011ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80011cc:	7bfa      	ldrb	r2, [r7, #15]
 80011ce:	6879      	ldr	r1, [r7, #4]
 80011d0:	4613      	mov	r3, r2
 80011d2:	00db      	lsls	r3, r3, #3
 80011d4:	4413      	add	r3, r2
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	440b      	add	r3, r1
 80011da:	333c      	adds	r3, #60	; 0x3c
 80011dc:	7bfa      	ldrb	r2, [r7, #15]
 80011de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80011e0:	7bfa      	ldrb	r2, [r7, #15]
 80011e2:	7bfb      	ldrb	r3, [r7, #15]
 80011e4:	b298      	uxth	r0, r3
 80011e6:	6879      	ldr	r1, [r7, #4]
 80011e8:	4613      	mov	r3, r2
 80011ea:	00db      	lsls	r3, r3, #3
 80011ec:	4413      	add	r3, r2
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	440b      	add	r3, r1
 80011f2:	3344      	adds	r3, #68	; 0x44
 80011f4:	4602      	mov	r2, r0
 80011f6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80011f8:	7bfa      	ldrb	r2, [r7, #15]
 80011fa:	6879      	ldr	r1, [r7, #4]
 80011fc:	4613      	mov	r3, r2
 80011fe:	00db      	lsls	r3, r3, #3
 8001200:	4413      	add	r3, r2
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	440b      	add	r3, r1
 8001206:	3340      	adds	r3, #64	; 0x40
 8001208:	2200      	movs	r2, #0
 800120a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800120c:	7bfa      	ldrb	r2, [r7, #15]
 800120e:	6879      	ldr	r1, [r7, #4]
 8001210:	4613      	mov	r3, r2
 8001212:	00db      	lsls	r3, r3, #3
 8001214:	4413      	add	r3, r2
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	440b      	add	r3, r1
 800121a:	3348      	adds	r3, #72	; 0x48
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001220:	7bfa      	ldrb	r2, [r7, #15]
 8001222:	6879      	ldr	r1, [r7, #4]
 8001224:	4613      	mov	r3, r2
 8001226:	00db      	lsls	r3, r3, #3
 8001228:	4413      	add	r3, r2
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	440b      	add	r3, r1
 800122e:	334c      	adds	r3, #76	; 0x4c
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001234:	7bfa      	ldrb	r2, [r7, #15]
 8001236:	6879      	ldr	r1, [r7, #4]
 8001238:	4613      	mov	r3, r2
 800123a:	00db      	lsls	r3, r3, #3
 800123c:	4413      	add	r3, r2
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	440b      	add	r3, r1
 8001242:	3354      	adds	r3, #84	; 0x54
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001248:	7bfb      	ldrb	r3, [r7, #15]
 800124a:	3301      	adds	r3, #1
 800124c:	73fb      	strb	r3, [r7, #15]
 800124e:	7bfa      	ldrb	r2, [r7, #15]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	429a      	cmp	r2, r3
 8001256:	d3af      	bcc.n	80011b8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001258:	2300      	movs	r3, #0
 800125a:	73fb      	strb	r3, [r7, #15]
 800125c:	e044      	b.n	80012e8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800125e:	7bfa      	ldrb	r2, [r7, #15]
 8001260:	6879      	ldr	r1, [r7, #4]
 8001262:	4613      	mov	r3, r2
 8001264:	00db      	lsls	r3, r3, #3
 8001266:	4413      	add	r3, r2
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	440b      	add	r3, r1
 800126c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001270:	2200      	movs	r2, #0
 8001272:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001274:	7bfa      	ldrb	r2, [r7, #15]
 8001276:	6879      	ldr	r1, [r7, #4]
 8001278:	4613      	mov	r3, r2
 800127a:	00db      	lsls	r3, r3, #3
 800127c:	4413      	add	r3, r2
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	440b      	add	r3, r1
 8001282:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001286:	7bfa      	ldrb	r2, [r7, #15]
 8001288:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800128a:	7bfa      	ldrb	r2, [r7, #15]
 800128c:	6879      	ldr	r1, [r7, #4]
 800128e:	4613      	mov	r3, r2
 8001290:	00db      	lsls	r3, r3, #3
 8001292:	4413      	add	r3, r2
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	440b      	add	r3, r1
 8001298:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800129c:	2200      	movs	r2, #0
 800129e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80012a0:	7bfa      	ldrb	r2, [r7, #15]
 80012a2:	6879      	ldr	r1, [r7, #4]
 80012a4:	4613      	mov	r3, r2
 80012a6:	00db      	lsls	r3, r3, #3
 80012a8:	4413      	add	r3, r2
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	440b      	add	r3, r1
 80012ae:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80012b6:	7bfa      	ldrb	r2, [r7, #15]
 80012b8:	6879      	ldr	r1, [r7, #4]
 80012ba:	4613      	mov	r3, r2
 80012bc:	00db      	lsls	r3, r3, #3
 80012be:	4413      	add	r3, r2
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	440b      	add	r3, r1
 80012c4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80012cc:	7bfa      	ldrb	r2, [r7, #15]
 80012ce:	6879      	ldr	r1, [r7, #4]
 80012d0:	4613      	mov	r3, r2
 80012d2:	00db      	lsls	r3, r3, #3
 80012d4:	4413      	add	r3, r2
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	440b      	add	r3, r1
 80012da:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012e2:	7bfb      	ldrb	r3, [r7, #15]
 80012e4:	3301      	adds	r3, #1
 80012e6:	73fb      	strb	r3, [r7, #15]
 80012e8:	7bfa      	ldrb	r2, [r7, #15]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d3b5      	bcc.n	800125e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	603b      	str	r3, [r7, #0]
 80012f8:	687e      	ldr	r6, [r7, #4]
 80012fa:	466d      	mov	r5, sp
 80012fc:	f106 0410 	add.w	r4, r6, #16
 8001300:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001302:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001304:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001306:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001308:	e894 0003 	ldmia.w	r4, {r0, r1}
 800130c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001310:	1d33      	adds	r3, r6, #4
 8001312:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001314:	6838      	ldr	r0, [r7, #0]
 8001316:	f002 fa51 	bl	80037bc <USB_DevInit>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d005      	beq.n	800132c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2202      	movs	r2, #2
 8001324:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001328:	2301      	movs	r3, #1
 800132a:	e00d      	b.n	8001348 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2200      	movs	r2, #0
 8001330:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2201      	movs	r2, #1
 8001338:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4618      	mov	r0, r3
 8001342:	f003 fba0 	bl	8004a86 <USB_DevDisconnect>

  return HAL_OK;
 8001346:	2300      	movs	r3, #0
}
 8001348:	4618      	mov	r0, r3
 800134a:	3714      	adds	r7, #20
 800134c:	46bd      	mov	sp, r7
 800134e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001350 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001364:	2b01      	cmp	r3, #1
 8001366:	d101      	bne.n	800136c <HAL_PCD_Start+0x1c>
 8001368:	2302      	movs	r3, #2
 800136a:	e020      	b.n	80013ae <HAL_PCD_Start+0x5e>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2201      	movs	r2, #1
 8001370:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001378:	2b01      	cmp	r3, #1
 800137a:	d109      	bne.n	8001390 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001380:	2b01      	cmp	r3, #1
 8001382:	d005      	beq.n	8001390 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001388:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4618      	mov	r0, r3
 8001396:	f002 f9a3 	bl	80036e0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4618      	mov	r0, r3
 80013a0:	f003 fb50 	bl	8004a44 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2200      	movs	r2, #0
 80013a8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3710      	adds	r7, #16
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80013b6:	b590      	push	{r4, r7, lr}
 80013b8:	b08d      	sub	sp, #52	; 0x34
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80013c4:	6a3b      	ldr	r3, [r7, #32]
 80013c6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f003 fc0e 	bl	8004bee <USB_GetMode>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	f040 848a 	bne.w	8001cee <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4618      	mov	r0, r3
 80013e0:	f003 fb72 	bl	8004ac8 <USB_ReadInterrupts>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	f000 8480 	beq.w	8001cec <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	0a1b      	lsrs	r3, r3, #8
 80013f6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4618      	mov	r0, r3
 8001406:	f003 fb5f 	bl	8004ac8 <USB_ReadInterrupts>
 800140a:	4603      	mov	r3, r0
 800140c:	f003 0302 	and.w	r3, r3, #2
 8001410:	2b02      	cmp	r3, #2
 8001412:	d107      	bne.n	8001424 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	695a      	ldr	r2, [r3, #20]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f002 0202 	and.w	r2, r2, #2
 8001422:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4618      	mov	r0, r3
 800142a:	f003 fb4d 	bl	8004ac8 <USB_ReadInterrupts>
 800142e:	4603      	mov	r3, r0
 8001430:	f003 0310 	and.w	r3, r3, #16
 8001434:	2b10      	cmp	r3, #16
 8001436:	d161      	bne.n	80014fc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	699a      	ldr	r2, [r3, #24]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f022 0210 	bic.w	r2, r2, #16
 8001446:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001448:	6a3b      	ldr	r3, [r7, #32]
 800144a:	6a1b      	ldr	r3, [r3, #32]
 800144c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	f003 020f 	and.w	r2, r3, #15
 8001454:	4613      	mov	r3, r2
 8001456:	00db      	lsls	r3, r3, #3
 8001458:	4413      	add	r3, r2
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001460:	687a      	ldr	r2, [r7, #4]
 8001462:	4413      	add	r3, r2
 8001464:	3304      	adds	r3, #4
 8001466:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	0c5b      	lsrs	r3, r3, #17
 800146c:	f003 030f 	and.w	r3, r3, #15
 8001470:	2b02      	cmp	r3, #2
 8001472:	d124      	bne.n	80014be <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800147a:	4013      	ands	r3, r2
 800147c:	2b00      	cmp	r3, #0
 800147e:	d035      	beq.n	80014ec <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	091b      	lsrs	r3, r3, #4
 8001488:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800148a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800148e:	b29b      	uxth	r3, r3
 8001490:	461a      	mov	r2, r3
 8001492:	6a38      	ldr	r0, [r7, #32]
 8001494:	f003 f984 	bl	80047a0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	691a      	ldr	r2, [r3, #16]
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	091b      	lsrs	r3, r3, #4
 80014a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014a4:	441a      	add	r2, r3
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	6a1a      	ldr	r2, [r3, #32]
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	091b      	lsrs	r3, r3, #4
 80014b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014b6:	441a      	add	r2, r3
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	621a      	str	r2, [r3, #32]
 80014bc:	e016      	b.n	80014ec <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	0c5b      	lsrs	r3, r3, #17
 80014c2:	f003 030f 	and.w	r3, r3, #15
 80014c6:	2b06      	cmp	r3, #6
 80014c8:	d110      	bne.n	80014ec <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80014d0:	2208      	movs	r2, #8
 80014d2:	4619      	mov	r1, r3
 80014d4:	6a38      	ldr	r0, [r7, #32]
 80014d6:	f003 f963 	bl	80047a0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	6a1a      	ldr	r2, [r3, #32]
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	091b      	lsrs	r3, r3, #4
 80014e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014e6:	441a      	add	r2, r3
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	699a      	ldr	r2, [r3, #24]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f042 0210 	orr.w	r2, r2, #16
 80014fa:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4618      	mov	r0, r3
 8001502:	f003 fae1 	bl	8004ac8 <USB_ReadInterrupts>
 8001506:	4603      	mov	r3, r0
 8001508:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800150c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001510:	f040 80a7 	bne.w	8001662 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001514:	2300      	movs	r3, #0
 8001516:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4618      	mov	r0, r3
 800151e:	f003 fae6 	bl	8004aee <USB_ReadDevAllOutEpInterrupt>
 8001522:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001524:	e099      	b.n	800165a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001528:	f003 0301 	and.w	r3, r3, #1
 800152c:	2b00      	cmp	r3, #0
 800152e:	f000 808e 	beq.w	800164e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001538:	b2d2      	uxtb	r2, r2
 800153a:	4611      	mov	r1, r2
 800153c:	4618      	mov	r0, r3
 800153e:	f003 fb0a 	bl	8004b56 <USB_ReadDevOutEPInterrupt>
 8001542:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	2b00      	cmp	r3, #0
 800154c:	d00c      	beq.n	8001568 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800154e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001550:	015a      	lsls	r2, r3, #5
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	4413      	add	r3, r2
 8001556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800155a:	461a      	mov	r2, r3
 800155c:	2301      	movs	r3, #1
 800155e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001560:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f000 fec2 	bl	80022ec <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	f003 0308 	and.w	r3, r3, #8
 800156e:	2b00      	cmp	r3, #0
 8001570:	d00c      	beq.n	800158c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001574:	015a      	lsls	r2, r3, #5
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	4413      	add	r3, r2
 800157a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800157e:	461a      	mov	r2, r3
 8001580:	2308      	movs	r3, #8
 8001582:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001584:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f000 ff98 	bl	80024bc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	f003 0310 	and.w	r3, r3, #16
 8001592:	2b00      	cmp	r3, #0
 8001594:	d008      	beq.n	80015a8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001598:	015a      	lsls	r2, r3, #5
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	4413      	add	r3, r2
 800159e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015a2:	461a      	mov	r2, r3
 80015a4:	2310      	movs	r3, #16
 80015a6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d030      	beq.n	8001614 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80015b2:	6a3b      	ldr	r3, [r7, #32]
 80015b4:	695b      	ldr	r3, [r3, #20]
 80015b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015ba:	2b80      	cmp	r3, #128	; 0x80
 80015bc:	d109      	bne.n	80015d2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	69fa      	ldr	r2, [r7, #28]
 80015c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015d0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80015d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015d4:	4613      	mov	r3, r2
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	4413      	add	r3, r2
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	4413      	add	r3, r2
 80015e4:	3304      	adds	r3, #4
 80015e6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	78db      	ldrb	r3, [r3, #3]
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d108      	bne.n	8001602 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	2200      	movs	r2, #0
 80015f4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80015f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	4619      	mov	r1, r3
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f008 fc49 	bl	8009e94 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001604:	015a      	lsls	r2, r3, #5
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	4413      	add	r3, r2
 800160a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800160e:	461a      	mov	r2, r3
 8001610:	2302      	movs	r3, #2
 8001612:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	f003 0320 	and.w	r3, r3, #32
 800161a:	2b00      	cmp	r3, #0
 800161c:	d008      	beq.n	8001630 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800161e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001620:	015a      	lsls	r2, r3, #5
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	4413      	add	r3, r2
 8001626:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800162a:	461a      	mov	r2, r3
 800162c:	2320      	movs	r3, #32
 800162e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d009      	beq.n	800164e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800163a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163c:	015a      	lsls	r2, r3, #5
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	4413      	add	r3, r2
 8001642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001646:	461a      	mov	r2, r3
 8001648:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800164c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800164e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001650:	3301      	adds	r3, #1
 8001652:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001656:	085b      	lsrs	r3, r3, #1
 8001658:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800165a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800165c:	2b00      	cmp	r3, #0
 800165e:	f47f af62 	bne.w	8001526 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4618      	mov	r0, r3
 8001668:	f003 fa2e 	bl	8004ac8 <USB_ReadInterrupts>
 800166c:	4603      	mov	r3, r0
 800166e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001672:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001676:	f040 80db 	bne.w	8001830 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4618      	mov	r0, r3
 8001680:	f003 fa4f 	bl	8004b22 <USB_ReadDevAllInEpInterrupt>
 8001684:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001686:	2300      	movs	r3, #0
 8001688:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800168a:	e0cd      	b.n	8001828 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800168c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	2b00      	cmp	r3, #0
 8001694:	f000 80c2 	beq.w	800181c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800169e:	b2d2      	uxtb	r2, r2
 80016a0:	4611      	mov	r1, r2
 80016a2:	4618      	mov	r0, r3
 80016a4:	f003 fa75 	bl	8004b92 <USB_ReadDevInEPInterrupt>
 80016a8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	f003 0301 	and.w	r3, r3, #1
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d057      	beq.n	8001764 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80016b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b6:	f003 030f 	and.w	r3, r3, #15
 80016ba:	2201      	movs	r2, #1
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	43db      	mvns	r3, r3
 80016ce:	69f9      	ldr	r1, [r7, #28]
 80016d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80016d4:	4013      	ands	r3, r2
 80016d6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80016d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016da:	015a      	lsls	r2, r3, #5
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	4413      	add	r3, r2
 80016e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016e4:	461a      	mov	r2, r3
 80016e6:	2301      	movs	r3, #1
 80016e8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	691b      	ldr	r3, [r3, #16]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d132      	bne.n	8001758 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80016f2:	6879      	ldr	r1, [r7, #4]
 80016f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016f6:	4613      	mov	r3, r2
 80016f8:	00db      	lsls	r3, r3, #3
 80016fa:	4413      	add	r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	440b      	add	r3, r1
 8001700:	334c      	adds	r3, #76	; 0x4c
 8001702:	6819      	ldr	r1, [r3, #0]
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001708:	4613      	mov	r3, r2
 800170a:	00db      	lsls	r3, r3, #3
 800170c:	4413      	add	r3, r2
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	4403      	add	r3, r0
 8001712:	3348      	adds	r3, #72	; 0x48
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4419      	add	r1, r3
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800171c:	4613      	mov	r3, r2
 800171e:	00db      	lsls	r3, r3, #3
 8001720:	4413      	add	r3, r2
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	4403      	add	r3, r0
 8001726:	334c      	adds	r3, #76	; 0x4c
 8001728:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800172a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172c:	2b00      	cmp	r3, #0
 800172e:	d113      	bne.n	8001758 <HAL_PCD_IRQHandler+0x3a2>
 8001730:	6879      	ldr	r1, [r7, #4]
 8001732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001734:	4613      	mov	r3, r2
 8001736:	00db      	lsls	r3, r3, #3
 8001738:	4413      	add	r3, r2
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	440b      	add	r3, r1
 800173e:	3354      	adds	r3, #84	; 0x54
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d108      	bne.n	8001758 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6818      	ldr	r0, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001750:	461a      	mov	r2, r3
 8001752:	2101      	movs	r1, #1
 8001754:	f003 fa7c 	bl	8004c50 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175a:	b2db      	uxtb	r3, r3
 800175c:	4619      	mov	r1, r3
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f008 fb13 	bl	8009d8a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	f003 0308 	and.w	r3, r3, #8
 800176a:	2b00      	cmp	r3, #0
 800176c:	d008      	beq.n	8001780 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800176e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001770:	015a      	lsls	r2, r3, #5
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	4413      	add	r3, r2
 8001776:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800177a:	461a      	mov	r2, r3
 800177c:	2308      	movs	r3, #8
 800177e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	f003 0310 	and.w	r3, r3, #16
 8001786:	2b00      	cmp	r3, #0
 8001788:	d008      	beq.n	800179c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800178a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178c:	015a      	lsls	r2, r3, #5
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	4413      	add	r3, r2
 8001792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001796:	461a      	mov	r2, r3
 8001798:	2310      	movs	r3, #16
 800179a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d008      	beq.n	80017b8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80017a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a8:	015a      	lsls	r2, r3, #5
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	4413      	add	r3, r2
 80017ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017b2:	461a      	mov	r2, r3
 80017b4:	2340      	movs	r3, #64	; 0x40
 80017b6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d023      	beq.n	800180a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80017c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017c4:	6a38      	ldr	r0, [r7, #32]
 80017c6:	f002 f95d 	bl	8003a84 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80017ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017cc:	4613      	mov	r3, r2
 80017ce:	00db      	lsls	r3, r3, #3
 80017d0:	4413      	add	r3, r2
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	3338      	adds	r3, #56	; 0x38
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	4413      	add	r3, r2
 80017da:	3304      	adds	r3, #4
 80017dc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	78db      	ldrb	r3, [r3, #3]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d108      	bne.n	80017f8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	2200      	movs	r2, #0
 80017ea:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80017ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	4619      	mov	r1, r3
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f008 fb60 	bl	8009eb8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80017f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fa:	015a      	lsls	r2, r3, #5
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	4413      	add	r3, r2
 8001800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001804:	461a      	mov	r2, r3
 8001806:	2302      	movs	r3, #2
 8001808:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001810:	2b00      	cmp	r3, #0
 8001812:	d003      	beq.n	800181c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001814:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f000 fcdb 	bl	80021d2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800181c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181e:	3301      	adds	r3, #1
 8001820:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001824:	085b      	lsrs	r3, r3, #1
 8001826:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800182a:	2b00      	cmp	r3, #0
 800182c:	f47f af2e 	bne.w	800168c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4618      	mov	r0, r3
 8001836:	f003 f947 	bl	8004ac8 <USB_ReadInterrupts>
 800183a:	4603      	mov	r3, r0
 800183c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001840:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001844:	d122      	bne.n	800188c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	69fa      	ldr	r2, [r7, #28]
 8001850:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001854:	f023 0301 	bic.w	r3, r3, #1
 8001858:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001860:	2b01      	cmp	r3, #1
 8001862:	d108      	bne.n	8001876 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800186c:	2100      	movs	r1, #0
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f000 fec2 	bl	80025f8 <HAL_PCDEx_LPM_Callback>
 8001874:	e002      	b.n	800187c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f008 fafe 	bl	8009e78 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	695a      	ldr	r2, [r3, #20]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800188a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4618      	mov	r0, r3
 8001892:	f003 f919 	bl	8004ac8 <USB_ReadInterrupts>
 8001896:	4603      	mov	r3, r0
 8001898:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800189c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80018a0:	d112      	bne.n	80018c8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d102      	bne.n	80018b8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f008 faba 	bl	8009e2c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	695a      	ldr	r2, [r3, #20]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80018c6:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f003 f8fb 	bl	8004ac8 <USB_ReadInterrupts>
 80018d2:	4603      	mov	r3, r0
 80018d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018dc:	f040 80b7 	bne.w	8001a4e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	69fa      	ldr	r2, [r7, #28]
 80018ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018ee:	f023 0301 	bic.w	r3, r3, #1
 80018f2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2110      	movs	r1, #16
 80018fa:	4618      	mov	r0, r3
 80018fc:	f002 f8c2 	bl	8003a84 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001900:	2300      	movs	r3, #0
 8001902:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001904:	e046      	b.n	8001994 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001908:	015a      	lsls	r2, r3, #5
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	4413      	add	r3, r2
 800190e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001912:	461a      	mov	r2, r3
 8001914:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001918:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800191a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800191c:	015a      	lsls	r2, r3, #5
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	4413      	add	r3, r2
 8001922:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800192a:	0151      	lsls	r1, r2, #5
 800192c:	69fa      	ldr	r2, [r7, #28]
 800192e:	440a      	add	r2, r1
 8001930:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001934:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001938:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800193a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800193c:	015a      	lsls	r2, r3, #5
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	4413      	add	r3, r2
 8001942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001946:	461a      	mov	r2, r3
 8001948:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800194c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800194e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001950:	015a      	lsls	r2, r3, #5
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	4413      	add	r3, r2
 8001956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800195e:	0151      	lsls	r1, r2, #5
 8001960:	69fa      	ldr	r2, [r7, #28]
 8001962:	440a      	add	r2, r1
 8001964:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001968:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800196c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800196e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001970:	015a      	lsls	r2, r3, #5
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	4413      	add	r3, r2
 8001976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800197e:	0151      	lsls	r1, r2, #5
 8001980:	69fa      	ldr	r2, [r7, #28]
 8001982:	440a      	add	r2, r1
 8001984:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001988:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800198c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800198e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001990:	3301      	adds	r3, #1
 8001992:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800199a:	429a      	cmp	r2, r3
 800199c:	d3b3      	bcc.n	8001906 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019a4:	69db      	ldr	r3, [r3, #28]
 80019a6:	69fa      	ldr	r2, [r7, #28]
 80019a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019ac:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80019b0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d016      	beq.n	80019e8 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80019c4:	69fa      	ldr	r2, [r7, #28]
 80019c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019ca:	f043 030b 	orr.w	r3, r3, #11
 80019ce:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019da:	69fa      	ldr	r2, [r7, #28]
 80019dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019e0:	f043 030b 	orr.w	r3, r3, #11
 80019e4:	6453      	str	r3, [r2, #68]	; 0x44
 80019e6:	e015      	b.n	8001a14 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019ee:	695b      	ldr	r3, [r3, #20]
 80019f0:	69fa      	ldr	r2, [r7, #28]
 80019f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019f6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019fa:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80019fe:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a06:	691b      	ldr	r3, [r3, #16]
 8001a08:	69fa      	ldr	r2, [r7, #28]
 8001a0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a0e:	f043 030b 	orr.w	r3, r3, #11
 8001a12:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	69fa      	ldr	r2, [r7, #28]
 8001a1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a22:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001a26:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6818      	ldr	r0, [r3, #0]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	691b      	ldr	r3, [r3, #16]
 8001a30:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001a38:	461a      	mov	r2, r3
 8001a3a:	f003 f909 	bl	8004c50 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	695a      	ldr	r2, [r3, #20]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001a4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f003 f838 	bl	8004ac8 <USB_ReadInterrupts>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a62:	d124      	bne.n	8001aae <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f003 f8ce 	bl	8004c0a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f002 f883 	bl	8003b7e <USB_GetDevSpeed>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681c      	ldr	r4, [r3, #0]
 8001a84:	f001 fa28 	bl	8002ed8 <HAL_RCC_GetHCLKFreq>
 8001a88:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	461a      	mov	r2, r3
 8001a92:	4620      	mov	r0, r4
 8001a94:	f001 fd82 	bl	800359c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f008 f99e 	bl	8009dda <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	695a      	ldr	r2, [r3, #20]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001aac:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f003 f808 	bl	8004ac8 <USB_ReadInterrupts>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	f003 0308 	and.w	r3, r3, #8
 8001abe:	2b08      	cmp	r3, #8
 8001ac0:	d10a      	bne.n	8001ad8 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f008 f97b 	bl	8009dbe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	695a      	ldr	r2, [r3, #20]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f002 0208 	and.w	r2, r2, #8
 8001ad6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f002 fff3 	bl	8004ac8 <USB_ReadInterrupts>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ae8:	2b80      	cmp	r3, #128	; 0x80
 8001aea:	d122      	bne.n	8001b32 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001aec:	6a3b      	ldr	r3, [r7, #32]
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001af4:	6a3b      	ldr	r3, [r7, #32]
 8001af6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001af8:	2301      	movs	r3, #1
 8001afa:	627b      	str	r3, [r7, #36]	; 0x24
 8001afc:	e014      	b.n	8001b28 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001afe:	6879      	ldr	r1, [r7, #4]
 8001b00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b02:	4613      	mov	r3, r2
 8001b04:	00db      	lsls	r3, r3, #3
 8001b06:	4413      	add	r3, r2
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	440b      	add	r3, r1
 8001b0c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d105      	bne.n	8001b22 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f000 fb27 	bl	8002170 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b24:	3301      	adds	r3, #1
 8001b26:	627b      	str	r3, [r7, #36]	; 0x24
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d3e5      	bcc.n	8001afe <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f002 ffc6 	bl	8004ac8 <USB_ReadInterrupts>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b46:	d13b      	bne.n	8001bc0 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b48:	2301      	movs	r3, #1
 8001b4a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b4c:	e02b      	b.n	8001ba6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b50:	015a      	lsls	r2, r3, #5
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	4413      	add	r3, r2
 8001b56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b5e:	6879      	ldr	r1, [r7, #4]
 8001b60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b62:	4613      	mov	r3, r2
 8001b64:	00db      	lsls	r3, r3, #3
 8001b66:	4413      	add	r3, r2
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	440b      	add	r3, r1
 8001b6c:	3340      	adds	r3, #64	; 0x40
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d115      	bne.n	8001ba0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001b74:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	da12      	bge.n	8001ba0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001b7a:	6879      	ldr	r1, [r7, #4]
 8001b7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b7e:	4613      	mov	r3, r2
 8001b80:	00db      	lsls	r3, r3, #3
 8001b82:	4413      	add	r3, r2
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	440b      	add	r3, r1
 8001b88:	333f      	adds	r3, #63	; 0x3f
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	4619      	mov	r1, r3
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f000 fae8 	bl	8002170 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d3ce      	bcc.n	8001b4e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	695a      	ldr	r2, [r3, #20]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001bbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f002 ff7f 	bl	8004ac8 <USB_ReadInterrupts>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bd0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001bd4:	d155      	bne.n	8001c82 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	627b      	str	r3, [r7, #36]	; 0x24
 8001bda:	e045      	b.n	8001c68 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bde:	015a      	lsls	r2, r3, #5
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	4413      	add	r3, r2
 8001be4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001bec:	6879      	ldr	r1, [r7, #4]
 8001bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	00db      	lsls	r3, r3, #3
 8001bf4:	4413      	add	r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	440b      	add	r3, r1
 8001bfa:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d12e      	bne.n	8001c62 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001c04:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	da2b      	bge.n	8001c62 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001c16:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d121      	bne.n	8001c62 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001c1e:	6879      	ldr	r1, [r7, #4]
 8001c20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c22:	4613      	mov	r3, r2
 8001c24:	00db      	lsls	r3, r3, #3
 8001c26:	4413      	add	r3, r2
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	440b      	add	r3, r1
 8001c2c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001c30:	2201      	movs	r2, #1
 8001c32:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001c34:	6a3b      	ldr	r3, [r7, #32]
 8001c36:	699b      	ldr	r3, [r3, #24]
 8001c38:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001c3c:	6a3b      	ldr	r3, [r7, #32]
 8001c3e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001c40:	6a3b      	ldr	r3, [r7, #32]
 8001c42:	695b      	ldr	r3, [r3, #20]
 8001c44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d10a      	bne.n	8001c62 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	69fa      	ldr	r2, [r7, #28]
 8001c56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c5e:	6053      	str	r3, [r2, #4]
            break;
 8001c60:	e007      	b.n	8001c72 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c64:	3301      	adds	r3, #1
 8001c66:	627b      	str	r3, [r7, #36]	; 0x24
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d3b4      	bcc.n	8001bdc <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	695a      	ldr	r2, [r3, #20]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001c80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f002 ff1e 	bl	8004ac8 <USB_ReadInterrupts>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001c92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c96:	d10a      	bne.n	8001cae <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f008 f91f 	bl	8009edc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	695a      	ldr	r2, [r3, #20]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001cac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f002 ff08 	bl	8004ac8 <USB_ReadInterrupts>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	f003 0304 	and.w	r3, r3, #4
 8001cbe:	2b04      	cmp	r3, #4
 8001cc0:	d115      	bne.n	8001cee <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	f003 0304 	and.w	r3, r3, #4
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d002      	beq.n	8001cda <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f008 f90f 	bl	8009ef8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	6859      	ldr	r1, [r3, #4]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	605a      	str	r2, [r3, #4]
 8001cea:	e000      	b.n	8001cee <HAL_PCD_IRQHandler+0x938>
      return;
 8001cec:	bf00      	nop
    }
  }
}
 8001cee:	3734      	adds	r7, #52	; 0x34
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd90      	pop	{r4, r7, pc}

08001cf4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d101      	bne.n	8001d0e <HAL_PCD_SetAddress+0x1a>
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	e013      	b.n	8001d36 <HAL_PCD_SetAddress+0x42>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2201      	movs	r2, #1
 8001d12:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	78fa      	ldrb	r2, [r7, #3]
 8001d1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	78fa      	ldrb	r2, [r7, #3]
 8001d24:	4611      	mov	r1, r2
 8001d26:	4618      	mov	r0, r3
 8001d28:	f002 fe66 	bl	80049f8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b084      	sub	sp, #16
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
 8001d46:	4608      	mov	r0, r1
 8001d48:	4611      	mov	r1, r2
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	70fb      	strb	r3, [r7, #3]
 8001d50:	460b      	mov	r3, r1
 8001d52:	803b      	strh	r3, [r7, #0]
 8001d54:	4613      	mov	r3, r2
 8001d56:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	da0f      	bge.n	8001d84 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d64:	78fb      	ldrb	r3, [r7, #3]
 8001d66:	f003 020f 	and.w	r2, r3, #15
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	00db      	lsls	r3, r3, #3
 8001d6e:	4413      	add	r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	3338      	adds	r3, #56	; 0x38
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	4413      	add	r3, r2
 8001d78:	3304      	adds	r3, #4
 8001d7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	705a      	strb	r2, [r3, #1]
 8001d82:	e00f      	b.n	8001da4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d84:	78fb      	ldrb	r3, [r7, #3]
 8001d86:	f003 020f 	and.w	r2, r3, #15
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	00db      	lsls	r3, r3, #3
 8001d8e:	4413      	add	r3, r2
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	4413      	add	r3, r2
 8001d9a:	3304      	adds	r3, #4
 8001d9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2200      	movs	r2, #0
 8001da2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001da4:	78fb      	ldrb	r3, [r7, #3]
 8001da6:	f003 030f 	and.w	r3, r3, #15
 8001daa:	b2da      	uxtb	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001db0:	883a      	ldrh	r2, [r7, #0]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	78ba      	ldrb	r2, [r7, #2]
 8001dba:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	785b      	ldrb	r3, [r3, #1]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d004      	beq.n	8001dce <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	b29a      	uxth	r2, r3
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001dce:	78bb      	ldrb	r3, [r7, #2]
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d102      	bne.n	8001dda <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d101      	bne.n	8001de8 <HAL_PCD_EP_Open+0xaa>
 8001de4:	2302      	movs	r3, #2
 8001de6:	e00e      	b.n	8001e06 <HAL_PCD_EP_Open+0xc8>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	68f9      	ldr	r1, [r7, #12]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f001 fee6 	bl	8003bc8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001e04:	7afb      	ldrb	r3, [r7, #11]
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b084      	sub	sp, #16
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
 8001e16:	460b      	mov	r3, r1
 8001e18:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	da0f      	bge.n	8001e42 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e22:	78fb      	ldrb	r3, [r7, #3]
 8001e24:	f003 020f 	and.w	r2, r3, #15
 8001e28:	4613      	mov	r3, r2
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	4413      	add	r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	3338      	adds	r3, #56	; 0x38
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	4413      	add	r3, r2
 8001e36:	3304      	adds	r3, #4
 8001e38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	705a      	strb	r2, [r3, #1]
 8001e40:	e00f      	b.n	8001e62 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e42:	78fb      	ldrb	r3, [r7, #3]
 8001e44:	f003 020f 	and.w	r2, r3, #15
 8001e48:	4613      	mov	r3, r2
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	4413      	add	r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	4413      	add	r3, r2
 8001e58:	3304      	adds	r3, #4
 8001e5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001e62:	78fb      	ldrb	r3, [r7, #3]
 8001e64:	f003 030f 	and.w	r3, r3, #15
 8001e68:	b2da      	uxtb	r2, r3
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d101      	bne.n	8001e7c <HAL_PCD_EP_Close+0x6e>
 8001e78:	2302      	movs	r3, #2
 8001e7a:	e00e      	b.n	8001e9a <HAL_PCD_EP_Close+0x8c>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	68f9      	ldr	r1, [r7, #12]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f001 ff24 	bl	8003cd8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b086      	sub	sp, #24
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	60f8      	str	r0, [r7, #12]
 8001eaa:	607a      	str	r2, [r7, #4]
 8001eac:	603b      	str	r3, [r7, #0]
 8001eae:	460b      	mov	r3, r1
 8001eb0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001eb2:	7afb      	ldrb	r3, [r7, #11]
 8001eb4:	f003 020f 	and.w	r2, r3, #15
 8001eb8:	4613      	mov	r3, r2
 8001eba:	00db      	lsls	r3, r3, #3
 8001ebc:	4413      	add	r3, r2
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001ec4:	68fa      	ldr	r2, [r7, #12]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	3304      	adds	r3, #4
 8001eca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	683a      	ldr	r2, [r7, #0]
 8001ed6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	2200      	movs	r2, #0
 8001edc:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ee4:	7afb      	ldrb	r3, [r7, #11]
 8001ee6:	f003 030f 	and.w	r3, r3, #15
 8001eea:	b2da      	uxtb	r2, r3
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	691b      	ldr	r3, [r3, #16]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d102      	bne.n	8001efe <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001efe:	7afb      	ldrb	r3, [r7, #11]
 8001f00:	f003 030f 	and.w	r3, r3, #15
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d109      	bne.n	8001f1c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6818      	ldr	r0, [r3, #0]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	461a      	mov	r2, r3
 8001f14:	6979      	ldr	r1, [r7, #20]
 8001f16:	f002 fa03 	bl	8004320 <USB_EP0StartXfer>
 8001f1a:	e008      	b.n	8001f2e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	6818      	ldr	r0, [r3, #0]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	691b      	ldr	r3, [r3, #16]
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	461a      	mov	r2, r3
 8001f28:	6979      	ldr	r1, [r7, #20]
 8001f2a:	f001 ffb1 	bl	8003e90 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f2e:	2300      	movs	r3, #0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3718      	adds	r7, #24
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	460b      	mov	r3, r1
 8001f42:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001f44:	78fb      	ldrb	r3, [r7, #3]
 8001f46:	f003 020f 	and.w	r2, r3, #15
 8001f4a:	6879      	ldr	r1, [r7, #4]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	4413      	add	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	440b      	add	r3, r1
 8001f56:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8001f5a:	681b      	ldr	r3, [r3, #0]
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	607a      	str	r2, [r7, #4]
 8001f72:	603b      	str	r3, [r7, #0]
 8001f74:	460b      	mov	r3, r1
 8001f76:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f78:	7afb      	ldrb	r3, [r7, #11]
 8001f7a:	f003 020f 	and.w	r2, r3, #15
 8001f7e:	4613      	mov	r3, r2
 8001f80:	00db      	lsls	r3, r3, #3
 8001f82:	4413      	add	r3, r2
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	3338      	adds	r3, #56	; 0x38
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	3304      	adds	r3, #4
 8001f8e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	683a      	ldr	r2, [r7, #0]
 8001f9a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fa8:	7afb      	ldrb	r3, [r7, #11]
 8001faa:	f003 030f 	and.w	r3, r3, #15
 8001fae:	b2da      	uxtb	r2, r3
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d102      	bne.n	8001fc2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001fc2:	7afb      	ldrb	r3, [r7, #11]
 8001fc4:	f003 030f 	and.w	r3, r3, #15
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d109      	bne.n	8001fe0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	6818      	ldr	r0, [r3, #0]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	691b      	ldr	r3, [r3, #16]
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	6979      	ldr	r1, [r7, #20]
 8001fda:	f002 f9a1 	bl	8004320 <USB_EP0StartXfer>
 8001fde:	e008      	b.n	8001ff2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6818      	ldr	r0, [r3, #0]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	691b      	ldr	r3, [r3, #16]
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	461a      	mov	r2, r3
 8001fec:	6979      	ldr	r1, [r7, #20]
 8001fee:	f001 ff4f 	bl	8003e90 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001ff2:	2300      	movs	r3, #0
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3718      	adds	r7, #24
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	460b      	mov	r3, r1
 8002006:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002008:	78fb      	ldrb	r3, [r7, #3]
 800200a:	f003 020f 	and.w	r2, r3, #15
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	429a      	cmp	r2, r3
 8002014:	d901      	bls.n	800201a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e050      	b.n	80020bc <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800201a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800201e:	2b00      	cmp	r3, #0
 8002020:	da0f      	bge.n	8002042 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002022:	78fb      	ldrb	r3, [r7, #3]
 8002024:	f003 020f 	and.w	r2, r3, #15
 8002028:	4613      	mov	r3, r2
 800202a:	00db      	lsls	r3, r3, #3
 800202c:	4413      	add	r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	3338      	adds	r3, #56	; 0x38
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	4413      	add	r3, r2
 8002036:	3304      	adds	r3, #4
 8002038:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2201      	movs	r2, #1
 800203e:	705a      	strb	r2, [r3, #1]
 8002040:	e00d      	b.n	800205e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002042:	78fa      	ldrb	r2, [r7, #3]
 8002044:	4613      	mov	r3, r2
 8002046:	00db      	lsls	r3, r3, #3
 8002048:	4413      	add	r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	4413      	add	r3, r2
 8002054:	3304      	adds	r3, #4
 8002056:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2200      	movs	r2, #0
 800205c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2201      	movs	r2, #1
 8002062:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002064:	78fb      	ldrb	r3, [r7, #3]
 8002066:	f003 030f 	and.w	r3, r3, #15
 800206a:	b2da      	uxtb	r2, r3
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002076:	2b01      	cmp	r3, #1
 8002078:	d101      	bne.n	800207e <HAL_PCD_EP_SetStall+0x82>
 800207a:	2302      	movs	r3, #2
 800207c:	e01e      	b.n	80020bc <HAL_PCD_EP_SetStall+0xc0>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2201      	movs	r2, #1
 8002082:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	68f9      	ldr	r1, [r7, #12]
 800208c:	4618      	mov	r0, r3
 800208e:	f002 fbdf 	bl	8004850 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002092:	78fb      	ldrb	r3, [r7, #3]
 8002094:	f003 030f 	and.w	r3, r3, #15
 8002098:	2b00      	cmp	r3, #0
 800209a:	d10a      	bne.n	80020b2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6818      	ldr	r0, [r3, #0]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	691b      	ldr	r3, [r3, #16]
 80020a4:	b2d9      	uxtb	r1, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80020ac:	461a      	mov	r2, r3
 80020ae:	f002 fdcf 	bl	8004c50 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80020ba:	2300      	movs	r3, #0
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3710      	adds	r7, #16
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	460b      	mov	r3, r1
 80020ce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80020d0:	78fb      	ldrb	r3, [r7, #3]
 80020d2:	f003 020f 	and.w	r2, r3, #15
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d901      	bls.n	80020e2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e042      	b.n	8002168 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80020e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	da0f      	bge.n	800210a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020ea:	78fb      	ldrb	r3, [r7, #3]
 80020ec:	f003 020f 	and.w	r2, r3, #15
 80020f0:	4613      	mov	r3, r2
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	4413      	add	r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	3338      	adds	r3, #56	; 0x38
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	4413      	add	r3, r2
 80020fe:	3304      	adds	r3, #4
 8002100:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2201      	movs	r2, #1
 8002106:	705a      	strb	r2, [r3, #1]
 8002108:	e00f      	b.n	800212a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800210a:	78fb      	ldrb	r3, [r7, #3]
 800210c:	f003 020f 	and.w	r2, r3, #15
 8002110:	4613      	mov	r3, r2
 8002112:	00db      	lsls	r3, r3, #3
 8002114:	4413      	add	r3, r2
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	4413      	add	r3, r2
 8002120:	3304      	adds	r3, #4
 8002122:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2200      	movs	r2, #0
 8002128:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2200      	movs	r2, #0
 800212e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002130:	78fb      	ldrb	r3, [r7, #3]
 8002132:	f003 030f 	and.w	r3, r3, #15
 8002136:	b2da      	uxtb	r2, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002142:	2b01      	cmp	r3, #1
 8002144:	d101      	bne.n	800214a <HAL_PCD_EP_ClrStall+0x86>
 8002146:	2302      	movs	r3, #2
 8002148:	e00e      	b.n	8002168 <HAL_PCD_EP_ClrStall+0xa4>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2201      	movs	r2, #1
 800214e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	68f9      	ldr	r1, [r7, #12]
 8002158:	4618      	mov	r0, r3
 800215a:	f002 fbe7 	bl	800492c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002166:	2300      	movs	r3, #0
}
 8002168:	4618      	mov	r0, r3
 800216a:	3710      	adds	r7, #16
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	460b      	mov	r3, r1
 800217a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800217c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002180:	2b00      	cmp	r3, #0
 8002182:	da0c      	bge.n	800219e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002184:	78fb      	ldrb	r3, [r7, #3]
 8002186:	f003 020f 	and.w	r2, r3, #15
 800218a:	4613      	mov	r3, r2
 800218c:	00db      	lsls	r3, r3, #3
 800218e:	4413      	add	r3, r2
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	3338      	adds	r3, #56	; 0x38
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	4413      	add	r3, r2
 8002198:	3304      	adds	r3, #4
 800219a:	60fb      	str	r3, [r7, #12]
 800219c:	e00c      	b.n	80021b8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800219e:	78fb      	ldrb	r3, [r7, #3]
 80021a0:	f003 020f 	and.w	r2, r3, #15
 80021a4:	4613      	mov	r3, r2
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	4413      	add	r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	4413      	add	r3, r2
 80021b4:	3304      	adds	r3, #4
 80021b6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	68f9      	ldr	r1, [r7, #12]
 80021be:	4618      	mov	r0, r3
 80021c0:	f002 fa06 	bl	80045d0 <USB_EPStopXfer>
 80021c4:	4603      	mov	r3, r0
 80021c6:	72fb      	strb	r3, [r7, #11]

  return ret;
 80021c8:	7afb      	ldrb	r3, [r7, #11]
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3710      	adds	r7, #16
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b08a      	sub	sp, #40	; 0x28
 80021d6:	af02      	add	r7, sp, #8
 80021d8:	6078      	str	r0, [r7, #4]
 80021da:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80021e6:	683a      	ldr	r2, [r7, #0]
 80021e8:	4613      	mov	r3, r2
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	4413      	add	r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	3338      	adds	r3, #56	; 0x38
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	4413      	add	r3, r2
 80021f6:	3304      	adds	r3, #4
 80021f8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6a1a      	ldr	r2, [r3, #32]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	429a      	cmp	r2, r3
 8002204:	d901      	bls.n	800220a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e06c      	b.n	80022e4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	699a      	ldr	r2, [r3, #24]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6a1b      	ldr	r3, [r3, #32]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	69fa      	ldr	r2, [r7, #28]
 800221c:	429a      	cmp	r2, r3
 800221e:	d902      	bls.n	8002226 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	3303      	adds	r3, #3
 800222a:	089b      	lsrs	r3, r3, #2
 800222c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800222e:	e02b      	b.n	8002288 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	699a      	ldr	r2, [r3, #24]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6a1b      	ldr	r3, [r3, #32]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	69fa      	ldr	r2, [r7, #28]
 8002242:	429a      	cmp	r2, r3
 8002244:	d902      	bls.n	800224c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	3303      	adds	r3, #3
 8002250:	089b      	lsrs	r3, r3, #2
 8002252:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6919      	ldr	r1, [r3, #16]
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	b2da      	uxtb	r2, r3
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002264:	b2db      	uxtb	r3, r3
 8002266:	9300      	str	r3, [sp, #0]
 8002268:	4603      	mov	r3, r0
 800226a:	6978      	ldr	r0, [r7, #20]
 800226c:	f002 fa5a 	bl	8004724 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	691a      	ldr	r2, [r3, #16]
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	441a      	add	r2, r3
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6a1a      	ldr	r2, [r3, #32]
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	441a      	add	r2, r3
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	015a      	lsls	r2, r3, #5
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	4413      	add	r3, r2
 8002290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002294:	699b      	ldr	r3, [r3, #24]
 8002296:	b29b      	uxth	r3, r3
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	429a      	cmp	r2, r3
 800229c:	d809      	bhi.n	80022b2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	6a1a      	ldr	r2, [r3, #32]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d203      	bcs.n	80022b2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1be      	bne.n	8002230 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	699a      	ldr	r2, [r3, #24]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6a1b      	ldr	r3, [r3, #32]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d811      	bhi.n	80022e2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	f003 030f 	and.w	r3, r3, #15
 80022c4:	2201      	movs	r2, #1
 80022c6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ca:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	43db      	mvns	r3, r3
 80022d8:	6939      	ldr	r1, [r7, #16]
 80022da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80022de:	4013      	ands	r3, r2
 80022e0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3720      	adds	r7, #32
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b088      	sub	sp, #32
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	333c      	adds	r3, #60	; 0x3c
 8002304:	3304      	adds	r3, #4
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	015a      	lsls	r2, r3, #5
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	4413      	add	r3, r2
 8002312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d17b      	bne.n	800241a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	f003 0308 	and.w	r3, r3, #8
 8002328:	2b00      	cmp	r3, #0
 800232a:	d015      	beq.n	8002358 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	4a61      	ldr	r2, [pc, #388]	; (80024b4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002330:	4293      	cmp	r3, r2
 8002332:	f240 80b9 	bls.w	80024a8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800233c:	2b00      	cmp	r3, #0
 800233e:	f000 80b3 	beq.w	80024a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	015a      	lsls	r2, r3, #5
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	4413      	add	r3, r2
 800234a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800234e:	461a      	mov	r2, r3
 8002350:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002354:	6093      	str	r3, [r2, #8]
 8002356:	e0a7      	b.n	80024a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	f003 0320 	and.w	r3, r3, #32
 800235e:	2b00      	cmp	r3, #0
 8002360:	d009      	beq.n	8002376 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	015a      	lsls	r2, r3, #5
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	4413      	add	r3, r2
 800236a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800236e:	461a      	mov	r2, r3
 8002370:	2320      	movs	r3, #32
 8002372:	6093      	str	r3, [r2, #8]
 8002374:	e098      	b.n	80024a8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800237c:	2b00      	cmp	r3, #0
 800237e:	f040 8093 	bne.w	80024a8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	4a4b      	ldr	r2, [pc, #300]	; (80024b4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d90f      	bls.n	80023aa <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002390:	2b00      	cmp	r3, #0
 8002392:	d00a      	beq.n	80023aa <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	015a      	lsls	r2, r3, #5
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	4413      	add	r3, r2
 800239c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023a0:	461a      	mov	r2, r3
 80023a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023a6:	6093      	str	r3, [r2, #8]
 80023a8:	e07e      	b.n	80024a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80023aa:	683a      	ldr	r2, [r7, #0]
 80023ac:	4613      	mov	r3, r2
 80023ae:	00db      	lsls	r3, r3, #3
 80023b0:	4413      	add	r3, r2
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	4413      	add	r3, r2
 80023bc:	3304      	adds	r3, #4
 80023be:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	69da      	ldr	r2, [r3, #28]
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	0159      	lsls	r1, r3, #5
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	440b      	add	r3, r1
 80023cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023d6:	1ad2      	subs	r2, r2, r3
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d114      	bne.n	800240c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d109      	bne.n	80023fe <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6818      	ldr	r0, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80023f4:	461a      	mov	r2, r3
 80023f6:	2101      	movs	r1, #1
 80023f8:	f002 fc2a 	bl	8004c50 <USB_EP0_OutStart>
 80023fc:	e006      	b.n	800240c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	691a      	ldr	r2, [r3, #16]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6a1b      	ldr	r3, [r3, #32]
 8002406:	441a      	add	r2, r3
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	b2db      	uxtb	r3, r3
 8002410:	4619      	mov	r1, r3
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f007 fc9e 	bl	8009d54 <HAL_PCD_DataOutStageCallback>
 8002418:	e046      	b.n	80024a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	4a26      	ldr	r2, [pc, #152]	; (80024b8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d124      	bne.n	800246c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d00a      	beq.n	8002442 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	015a      	lsls	r2, r3, #5
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	4413      	add	r3, r2
 8002434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002438:	461a      	mov	r2, r3
 800243a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800243e:	6093      	str	r3, [r2, #8]
 8002440:	e032      	b.n	80024a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	f003 0320 	and.w	r3, r3, #32
 8002448:	2b00      	cmp	r3, #0
 800244a:	d008      	beq.n	800245e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	015a      	lsls	r2, r3, #5
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	4413      	add	r3, r2
 8002454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002458:	461a      	mov	r2, r3
 800245a:	2320      	movs	r3, #32
 800245c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	b2db      	uxtb	r3, r3
 8002462:	4619      	mov	r1, r3
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f007 fc75 	bl	8009d54 <HAL_PCD_DataOutStageCallback>
 800246a:	e01d      	b.n	80024a8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d114      	bne.n	800249c <PCD_EP_OutXfrComplete_int+0x1b0>
 8002472:	6879      	ldr	r1, [r7, #4]
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	4613      	mov	r3, r2
 8002478:	00db      	lsls	r3, r3, #3
 800247a:	4413      	add	r3, r2
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	440b      	add	r3, r1
 8002480:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d108      	bne.n	800249c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6818      	ldr	r0, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002494:	461a      	mov	r2, r3
 8002496:	2100      	movs	r1, #0
 8002498:	f002 fbda 	bl	8004c50 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	4619      	mov	r1, r3
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f007 fc56 	bl	8009d54 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3720      	adds	r7, #32
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	4f54300a 	.word	0x4f54300a
 80024b8:	4f54310a 	.word	0x4f54310a

080024bc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b086      	sub	sp, #24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	333c      	adds	r3, #60	; 0x3c
 80024d4:	3304      	adds	r3, #4
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	015a      	lsls	r2, r3, #5
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	4413      	add	r3, r2
 80024e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	4a15      	ldr	r2, [pc, #84]	; (8002544 <PCD_EP_OutSetupPacket_int+0x88>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d90e      	bls.n	8002510 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d009      	beq.n	8002510 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	015a      	lsls	r2, r3, #5
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	4413      	add	r3, r2
 8002504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002508:	461a      	mov	r2, r3
 800250a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800250e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f007 fc0d 	bl	8009d30 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	4a0a      	ldr	r2, [pc, #40]	; (8002544 <PCD_EP_OutSetupPacket_int+0x88>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d90c      	bls.n	8002538 <PCD_EP_OutSetupPacket_int+0x7c>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	2b01      	cmp	r3, #1
 8002524:	d108      	bne.n	8002538 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6818      	ldr	r0, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002530:	461a      	mov	r2, r3
 8002532:	2101      	movs	r1, #1
 8002534:	f002 fb8c 	bl	8004c50 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3718      	adds	r7, #24
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	4f54300a 	.word	0x4f54300a

08002548 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002548:	b480      	push	{r7}
 800254a:	b085      	sub	sp, #20
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	460b      	mov	r3, r1
 8002552:	70fb      	strb	r3, [r7, #3]
 8002554:	4613      	mov	r3, r2
 8002556:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002560:	78fb      	ldrb	r3, [r7, #3]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d107      	bne.n	8002576 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002566:	883b      	ldrh	r3, [r7, #0]
 8002568:	0419      	lsls	r1, r3, #16
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	68ba      	ldr	r2, [r7, #8]
 8002570:	430a      	orrs	r2, r1
 8002572:	629a      	str	r2, [r3, #40]	; 0x28
 8002574:	e028      	b.n	80025c8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800257c:	0c1b      	lsrs	r3, r3, #16
 800257e:	68ba      	ldr	r2, [r7, #8]
 8002580:	4413      	add	r3, r2
 8002582:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002584:	2300      	movs	r3, #0
 8002586:	73fb      	strb	r3, [r7, #15]
 8002588:	e00d      	b.n	80025a6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	7bfb      	ldrb	r3, [r7, #15]
 8002590:	3340      	adds	r3, #64	; 0x40
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	4413      	add	r3, r2
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	0c1b      	lsrs	r3, r3, #16
 800259a:	68ba      	ldr	r2, [r7, #8]
 800259c:	4413      	add	r3, r2
 800259e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80025a0:	7bfb      	ldrb	r3, [r7, #15]
 80025a2:	3301      	adds	r3, #1
 80025a4:	73fb      	strb	r3, [r7, #15]
 80025a6:	7bfa      	ldrb	r2, [r7, #15]
 80025a8:	78fb      	ldrb	r3, [r7, #3]
 80025aa:	3b01      	subs	r3, #1
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d3ec      	bcc.n	800258a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80025b0:	883b      	ldrh	r3, [r7, #0]
 80025b2:	0418      	lsls	r0, r3, #16
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6819      	ldr	r1, [r3, #0]
 80025b8:	78fb      	ldrb	r3, [r7, #3]
 80025ba:	3b01      	subs	r3, #1
 80025bc:	68ba      	ldr	r2, [r7, #8]
 80025be:	4302      	orrs	r2, r0
 80025c0:	3340      	adds	r3, #64	; 0x40
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	440b      	add	r3, r1
 80025c6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3714      	adds	r7, #20
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr

080025d6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80025d6:	b480      	push	{r7}
 80025d8:	b083      	sub	sp, #12
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
 80025de:	460b      	mov	r3, r1
 80025e0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	887a      	ldrh	r2, [r7, #2]
 80025e8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	460b      	mov	r3, r1
 8002602:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002604:	bf00      	nop
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b086      	sub	sp, #24
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d101      	bne.n	8002622 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e267      	b.n	8002af2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	2b00      	cmp	r3, #0
 800262c:	d075      	beq.n	800271a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800262e:	4b88      	ldr	r3, [pc, #544]	; (8002850 <HAL_RCC_OscConfig+0x240>)
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f003 030c 	and.w	r3, r3, #12
 8002636:	2b04      	cmp	r3, #4
 8002638:	d00c      	beq.n	8002654 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800263a:	4b85      	ldr	r3, [pc, #532]	; (8002850 <HAL_RCC_OscConfig+0x240>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002642:	2b08      	cmp	r3, #8
 8002644:	d112      	bne.n	800266c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002646:	4b82      	ldr	r3, [pc, #520]	; (8002850 <HAL_RCC_OscConfig+0x240>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800264e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002652:	d10b      	bne.n	800266c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002654:	4b7e      	ldr	r3, [pc, #504]	; (8002850 <HAL_RCC_OscConfig+0x240>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d05b      	beq.n	8002718 <HAL_RCC_OscConfig+0x108>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d157      	bne.n	8002718 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e242      	b.n	8002af2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002674:	d106      	bne.n	8002684 <HAL_RCC_OscConfig+0x74>
 8002676:	4b76      	ldr	r3, [pc, #472]	; (8002850 <HAL_RCC_OscConfig+0x240>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a75      	ldr	r2, [pc, #468]	; (8002850 <HAL_RCC_OscConfig+0x240>)
 800267c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002680:	6013      	str	r3, [r2, #0]
 8002682:	e01d      	b.n	80026c0 <HAL_RCC_OscConfig+0xb0>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800268c:	d10c      	bne.n	80026a8 <HAL_RCC_OscConfig+0x98>
 800268e:	4b70      	ldr	r3, [pc, #448]	; (8002850 <HAL_RCC_OscConfig+0x240>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a6f      	ldr	r2, [pc, #444]	; (8002850 <HAL_RCC_OscConfig+0x240>)
 8002694:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002698:	6013      	str	r3, [r2, #0]
 800269a:	4b6d      	ldr	r3, [pc, #436]	; (8002850 <HAL_RCC_OscConfig+0x240>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a6c      	ldr	r2, [pc, #432]	; (8002850 <HAL_RCC_OscConfig+0x240>)
 80026a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026a4:	6013      	str	r3, [r2, #0]
 80026a6:	e00b      	b.n	80026c0 <HAL_RCC_OscConfig+0xb0>
 80026a8:	4b69      	ldr	r3, [pc, #420]	; (8002850 <HAL_RCC_OscConfig+0x240>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a68      	ldr	r2, [pc, #416]	; (8002850 <HAL_RCC_OscConfig+0x240>)
 80026ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026b2:	6013      	str	r3, [r2, #0]
 80026b4:	4b66      	ldr	r3, [pc, #408]	; (8002850 <HAL_RCC_OscConfig+0x240>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a65      	ldr	r2, [pc, #404]	; (8002850 <HAL_RCC_OscConfig+0x240>)
 80026ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d013      	beq.n	80026f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c8:	f7fe fa44 	bl	8000b54 <HAL_GetTick>
 80026cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ce:	e008      	b.n	80026e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026d0:	f7fe fa40 	bl	8000b54 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b64      	cmp	r3, #100	; 0x64
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e207      	b.n	8002af2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026e2:	4b5b      	ldr	r3, [pc, #364]	; (8002850 <HAL_RCC_OscConfig+0x240>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d0f0      	beq.n	80026d0 <HAL_RCC_OscConfig+0xc0>
 80026ee:	e014      	b.n	800271a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f0:	f7fe fa30 	bl	8000b54 <HAL_GetTick>
 80026f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026f6:	e008      	b.n	800270a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026f8:	f7fe fa2c 	bl	8000b54 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b64      	cmp	r3, #100	; 0x64
 8002704:	d901      	bls.n	800270a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e1f3      	b.n	8002af2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800270a:	4b51      	ldr	r3, [pc, #324]	; (8002850 <HAL_RCC_OscConfig+0x240>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d1f0      	bne.n	80026f8 <HAL_RCC_OscConfig+0xe8>
 8002716:	e000      	b.n	800271a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002718:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d063      	beq.n	80027ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002726:	4b4a      	ldr	r3, [pc, #296]	; (8002850 <HAL_RCC_OscConfig+0x240>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f003 030c 	and.w	r3, r3, #12
 800272e:	2b00      	cmp	r3, #0
 8002730:	d00b      	beq.n	800274a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002732:	4b47      	ldr	r3, [pc, #284]	; (8002850 <HAL_RCC_OscConfig+0x240>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800273a:	2b08      	cmp	r3, #8
 800273c:	d11c      	bne.n	8002778 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800273e:	4b44      	ldr	r3, [pc, #272]	; (8002850 <HAL_RCC_OscConfig+0x240>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d116      	bne.n	8002778 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800274a:	4b41      	ldr	r3, [pc, #260]	; (8002850 <HAL_RCC_OscConfig+0x240>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d005      	beq.n	8002762 <HAL_RCC_OscConfig+0x152>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d001      	beq.n	8002762 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e1c7      	b.n	8002af2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002762:	4b3b      	ldr	r3, [pc, #236]	; (8002850 <HAL_RCC_OscConfig+0x240>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	4937      	ldr	r1, [pc, #220]	; (8002850 <HAL_RCC_OscConfig+0x240>)
 8002772:	4313      	orrs	r3, r2
 8002774:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002776:	e03a      	b.n	80027ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d020      	beq.n	80027c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002780:	4b34      	ldr	r3, [pc, #208]	; (8002854 <HAL_RCC_OscConfig+0x244>)
 8002782:	2201      	movs	r2, #1
 8002784:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002786:	f7fe f9e5 	bl	8000b54 <HAL_GetTick>
 800278a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800278c:	e008      	b.n	80027a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800278e:	f7fe f9e1 	bl	8000b54 <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	2b02      	cmp	r3, #2
 800279a:	d901      	bls.n	80027a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e1a8      	b.n	8002af2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027a0:	4b2b      	ldr	r3, [pc, #172]	; (8002850 <HAL_RCC_OscConfig+0x240>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0302 	and.w	r3, r3, #2
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d0f0      	beq.n	800278e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ac:	4b28      	ldr	r3, [pc, #160]	; (8002850 <HAL_RCC_OscConfig+0x240>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	00db      	lsls	r3, r3, #3
 80027ba:	4925      	ldr	r1, [pc, #148]	; (8002850 <HAL_RCC_OscConfig+0x240>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	600b      	str	r3, [r1, #0]
 80027c0:	e015      	b.n	80027ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027c2:	4b24      	ldr	r3, [pc, #144]	; (8002854 <HAL_RCC_OscConfig+0x244>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c8:	f7fe f9c4 	bl	8000b54 <HAL_GetTick>
 80027cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ce:	e008      	b.n	80027e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027d0:	f7fe f9c0 	bl	8000b54 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e187      	b.n	8002af2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027e2:	4b1b      	ldr	r3, [pc, #108]	; (8002850 <HAL_RCC_OscConfig+0x240>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d1f0      	bne.n	80027d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0308 	and.w	r3, r3, #8
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d036      	beq.n	8002868 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	695b      	ldr	r3, [r3, #20]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d016      	beq.n	8002830 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002802:	4b15      	ldr	r3, [pc, #84]	; (8002858 <HAL_RCC_OscConfig+0x248>)
 8002804:	2201      	movs	r2, #1
 8002806:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002808:	f7fe f9a4 	bl	8000b54 <HAL_GetTick>
 800280c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800280e:	e008      	b.n	8002822 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002810:	f7fe f9a0 	bl	8000b54 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b02      	cmp	r3, #2
 800281c:	d901      	bls.n	8002822 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e167      	b.n	8002af2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002822:	4b0b      	ldr	r3, [pc, #44]	; (8002850 <HAL_RCC_OscConfig+0x240>)
 8002824:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	2b00      	cmp	r3, #0
 800282c:	d0f0      	beq.n	8002810 <HAL_RCC_OscConfig+0x200>
 800282e:	e01b      	b.n	8002868 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002830:	4b09      	ldr	r3, [pc, #36]	; (8002858 <HAL_RCC_OscConfig+0x248>)
 8002832:	2200      	movs	r2, #0
 8002834:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002836:	f7fe f98d 	bl	8000b54 <HAL_GetTick>
 800283a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800283c:	e00e      	b.n	800285c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800283e:	f7fe f989 	bl	8000b54 <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	2b02      	cmp	r3, #2
 800284a:	d907      	bls.n	800285c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e150      	b.n	8002af2 <HAL_RCC_OscConfig+0x4e2>
 8002850:	40023800 	.word	0x40023800
 8002854:	42470000 	.word	0x42470000
 8002858:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800285c:	4b88      	ldr	r3, [pc, #544]	; (8002a80 <HAL_RCC_OscConfig+0x470>)
 800285e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002860:	f003 0302 	and.w	r3, r3, #2
 8002864:	2b00      	cmp	r3, #0
 8002866:	d1ea      	bne.n	800283e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0304 	and.w	r3, r3, #4
 8002870:	2b00      	cmp	r3, #0
 8002872:	f000 8097 	beq.w	80029a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002876:	2300      	movs	r3, #0
 8002878:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800287a:	4b81      	ldr	r3, [pc, #516]	; (8002a80 <HAL_RCC_OscConfig+0x470>)
 800287c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d10f      	bne.n	80028a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002886:	2300      	movs	r3, #0
 8002888:	60bb      	str	r3, [r7, #8]
 800288a:	4b7d      	ldr	r3, [pc, #500]	; (8002a80 <HAL_RCC_OscConfig+0x470>)
 800288c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288e:	4a7c      	ldr	r2, [pc, #496]	; (8002a80 <HAL_RCC_OscConfig+0x470>)
 8002890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002894:	6413      	str	r3, [r2, #64]	; 0x40
 8002896:	4b7a      	ldr	r3, [pc, #488]	; (8002a80 <HAL_RCC_OscConfig+0x470>)
 8002898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800289e:	60bb      	str	r3, [r7, #8]
 80028a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028a2:	2301      	movs	r3, #1
 80028a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a6:	4b77      	ldr	r3, [pc, #476]	; (8002a84 <HAL_RCC_OscConfig+0x474>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d118      	bne.n	80028e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028b2:	4b74      	ldr	r3, [pc, #464]	; (8002a84 <HAL_RCC_OscConfig+0x474>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a73      	ldr	r2, [pc, #460]	; (8002a84 <HAL_RCC_OscConfig+0x474>)
 80028b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028be:	f7fe f949 	bl	8000b54 <HAL_GetTick>
 80028c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028c4:	e008      	b.n	80028d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028c6:	f7fe f945 	bl	8000b54 <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d901      	bls.n	80028d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e10c      	b.n	8002af2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d8:	4b6a      	ldr	r3, [pc, #424]	; (8002a84 <HAL_RCC_OscConfig+0x474>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d0f0      	beq.n	80028c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d106      	bne.n	80028fa <HAL_RCC_OscConfig+0x2ea>
 80028ec:	4b64      	ldr	r3, [pc, #400]	; (8002a80 <HAL_RCC_OscConfig+0x470>)
 80028ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f0:	4a63      	ldr	r2, [pc, #396]	; (8002a80 <HAL_RCC_OscConfig+0x470>)
 80028f2:	f043 0301 	orr.w	r3, r3, #1
 80028f6:	6713      	str	r3, [r2, #112]	; 0x70
 80028f8:	e01c      	b.n	8002934 <HAL_RCC_OscConfig+0x324>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	2b05      	cmp	r3, #5
 8002900:	d10c      	bne.n	800291c <HAL_RCC_OscConfig+0x30c>
 8002902:	4b5f      	ldr	r3, [pc, #380]	; (8002a80 <HAL_RCC_OscConfig+0x470>)
 8002904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002906:	4a5e      	ldr	r2, [pc, #376]	; (8002a80 <HAL_RCC_OscConfig+0x470>)
 8002908:	f043 0304 	orr.w	r3, r3, #4
 800290c:	6713      	str	r3, [r2, #112]	; 0x70
 800290e:	4b5c      	ldr	r3, [pc, #368]	; (8002a80 <HAL_RCC_OscConfig+0x470>)
 8002910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002912:	4a5b      	ldr	r2, [pc, #364]	; (8002a80 <HAL_RCC_OscConfig+0x470>)
 8002914:	f043 0301 	orr.w	r3, r3, #1
 8002918:	6713      	str	r3, [r2, #112]	; 0x70
 800291a:	e00b      	b.n	8002934 <HAL_RCC_OscConfig+0x324>
 800291c:	4b58      	ldr	r3, [pc, #352]	; (8002a80 <HAL_RCC_OscConfig+0x470>)
 800291e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002920:	4a57      	ldr	r2, [pc, #348]	; (8002a80 <HAL_RCC_OscConfig+0x470>)
 8002922:	f023 0301 	bic.w	r3, r3, #1
 8002926:	6713      	str	r3, [r2, #112]	; 0x70
 8002928:	4b55      	ldr	r3, [pc, #340]	; (8002a80 <HAL_RCC_OscConfig+0x470>)
 800292a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800292c:	4a54      	ldr	r2, [pc, #336]	; (8002a80 <HAL_RCC_OscConfig+0x470>)
 800292e:	f023 0304 	bic.w	r3, r3, #4
 8002932:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d015      	beq.n	8002968 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800293c:	f7fe f90a 	bl	8000b54 <HAL_GetTick>
 8002940:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002942:	e00a      	b.n	800295a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002944:	f7fe f906 	bl	8000b54 <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002952:	4293      	cmp	r3, r2
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e0cb      	b.n	8002af2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800295a:	4b49      	ldr	r3, [pc, #292]	; (8002a80 <HAL_RCC_OscConfig+0x470>)
 800295c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	2b00      	cmp	r3, #0
 8002964:	d0ee      	beq.n	8002944 <HAL_RCC_OscConfig+0x334>
 8002966:	e014      	b.n	8002992 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002968:	f7fe f8f4 	bl	8000b54 <HAL_GetTick>
 800296c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800296e:	e00a      	b.n	8002986 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002970:	f7fe f8f0 	bl	8000b54 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	f241 3288 	movw	r2, #5000	; 0x1388
 800297e:	4293      	cmp	r3, r2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e0b5      	b.n	8002af2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002986:	4b3e      	ldr	r3, [pc, #248]	; (8002a80 <HAL_RCC_OscConfig+0x470>)
 8002988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1ee      	bne.n	8002970 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002992:	7dfb      	ldrb	r3, [r7, #23]
 8002994:	2b01      	cmp	r3, #1
 8002996:	d105      	bne.n	80029a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002998:	4b39      	ldr	r3, [pc, #228]	; (8002a80 <HAL_RCC_OscConfig+0x470>)
 800299a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299c:	4a38      	ldr	r2, [pc, #224]	; (8002a80 <HAL_RCC_OscConfig+0x470>)
 800299e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	699b      	ldr	r3, [r3, #24]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	f000 80a1 	beq.w	8002af0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029ae:	4b34      	ldr	r3, [pc, #208]	; (8002a80 <HAL_RCC_OscConfig+0x470>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f003 030c 	and.w	r3, r3, #12
 80029b6:	2b08      	cmp	r3, #8
 80029b8:	d05c      	beq.n	8002a74 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d141      	bne.n	8002a46 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029c2:	4b31      	ldr	r3, [pc, #196]	; (8002a88 <HAL_RCC_OscConfig+0x478>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c8:	f7fe f8c4 	bl	8000b54 <HAL_GetTick>
 80029cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ce:	e008      	b.n	80029e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029d0:	f7fe f8c0 	bl	8000b54 <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e087      	b.n	8002af2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029e2:	4b27      	ldr	r3, [pc, #156]	; (8002a80 <HAL_RCC_OscConfig+0x470>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d1f0      	bne.n	80029d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	69da      	ldr	r2, [r3, #28]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a1b      	ldr	r3, [r3, #32]
 80029f6:	431a      	orrs	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fc:	019b      	lsls	r3, r3, #6
 80029fe:	431a      	orrs	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a04:	085b      	lsrs	r3, r3, #1
 8002a06:	3b01      	subs	r3, #1
 8002a08:	041b      	lsls	r3, r3, #16
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a10:	061b      	lsls	r3, r3, #24
 8002a12:	491b      	ldr	r1, [pc, #108]	; (8002a80 <HAL_RCC_OscConfig+0x470>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a18:	4b1b      	ldr	r3, [pc, #108]	; (8002a88 <HAL_RCC_OscConfig+0x478>)
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a1e:	f7fe f899 	bl	8000b54 <HAL_GetTick>
 8002a22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a24:	e008      	b.n	8002a38 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a26:	f7fe f895 	bl	8000b54 <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d901      	bls.n	8002a38 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e05c      	b.n	8002af2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a38:	4b11      	ldr	r3, [pc, #68]	; (8002a80 <HAL_RCC_OscConfig+0x470>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d0f0      	beq.n	8002a26 <HAL_RCC_OscConfig+0x416>
 8002a44:	e054      	b.n	8002af0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a46:	4b10      	ldr	r3, [pc, #64]	; (8002a88 <HAL_RCC_OscConfig+0x478>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a4c:	f7fe f882 	bl	8000b54 <HAL_GetTick>
 8002a50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a52:	e008      	b.n	8002a66 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a54:	f7fe f87e 	bl	8000b54 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e045      	b.n	8002af2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a66:	4b06      	ldr	r3, [pc, #24]	; (8002a80 <HAL_RCC_OscConfig+0x470>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1f0      	bne.n	8002a54 <HAL_RCC_OscConfig+0x444>
 8002a72:	e03d      	b.n	8002af0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d107      	bne.n	8002a8c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e038      	b.n	8002af2 <HAL_RCC_OscConfig+0x4e2>
 8002a80:	40023800 	.word	0x40023800
 8002a84:	40007000 	.word	0x40007000
 8002a88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a8c:	4b1b      	ldr	r3, [pc, #108]	; (8002afc <HAL_RCC_OscConfig+0x4ec>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d028      	beq.n	8002aec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d121      	bne.n	8002aec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d11a      	bne.n	8002aec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002abc:	4013      	ands	r3, r2
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ac2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d111      	bne.n	8002aec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad2:	085b      	lsrs	r3, r3, #1
 8002ad4:	3b01      	subs	r3, #1
 8002ad6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d107      	bne.n	8002aec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d001      	beq.n	8002af0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e000      	b.n	8002af2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3718      	adds	r7, #24
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	40023800 	.word	0x40023800

08002b00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d101      	bne.n	8002b14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e0cc      	b.n	8002cae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b14:	4b68      	ldr	r3, [pc, #416]	; (8002cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0307 	and.w	r3, r3, #7
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d90c      	bls.n	8002b3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b22:	4b65      	ldr	r3, [pc, #404]	; (8002cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b24:	683a      	ldr	r2, [r7, #0]
 8002b26:	b2d2      	uxtb	r2, r2
 8002b28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b2a:	4b63      	ldr	r3, [pc, #396]	; (8002cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0307 	and.w	r3, r3, #7
 8002b32:	683a      	ldr	r2, [r7, #0]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d001      	beq.n	8002b3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e0b8      	b.n	8002cae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0302 	and.w	r3, r3, #2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d020      	beq.n	8002b8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0304 	and.w	r3, r3, #4
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d005      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b54:	4b59      	ldr	r3, [pc, #356]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	4a58      	ldr	r2, [pc, #352]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002b5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0308 	and.w	r3, r3, #8
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d005      	beq.n	8002b78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b6c:	4b53      	ldr	r3, [pc, #332]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	4a52      	ldr	r2, [pc, #328]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002b72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b78:	4b50      	ldr	r3, [pc, #320]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	494d      	ldr	r1, [pc, #308]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d044      	beq.n	8002c20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d107      	bne.n	8002bae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b9e:	4b47      	ldr	r3, [pc, #284]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d119      	bne.n	8002bde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e07f      	b.n	8002cae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d003      	beq.n	8002bbe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bba:	2b03      	cmp	r3, #3
 8002bbc:	d107      	bne.n	8002bce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bbe:	4b3f      	ldr	r3, [pc, #252]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d109      	bne.n	8002bde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e06f      	b.n	8002cae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bce:	4b3b      	ldr	r3, [pc, #236]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d101      	bne.n	8002bde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e067      	b.n	8002cae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bde:	4b37      	ldr	r3, [pc, #220]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f023 0203 	bic.w	r2, r3, #3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	4934      	ldr	r1, [pc, #208]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bf0:	f7fd ffb0 	bl	8000b54 <HAL_GetTick>
 8002bf4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bf6:	e00a      	b.n	8002c0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bf8:	f7fd ffac 	bl	8000b54 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e04f      	b.n	8002cae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c0e:	4b2b      	ldr	r3, [pc, #172]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f003 020c 	and.w	r2, r3, #12
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d1eb      	bne.n	8002bf8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c20:	4b25      	ldr	r3, [pc, #148]	; (8002cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0307 	and.w	r3, r3, #7
 8002c28:	683a      	ldr	r2, [r7, #0]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d20c      	bcs.n	8002c48 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c2e:	4b22      	ldr	r3, [pc, #136]	; (8002cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c30:	683a      	ldr	r2, [r7, #0]
 8002c32:	b2d2      	uxtb	r2, r2
 8002c34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c36:	4b20      	ldr	r3, [pc, #128]	; (8002cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0307 	and.w	r3, r3, #7
 8002c3e:	683a      	ldr	r2, [r7, #0]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d001      	beq.n	8002c48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e032      	b.n	8002cae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0304 	and.w	r3, r3, #4
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d008      	beq.n	8002c66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c54:	4b19      	ldr	r3, [pc, #100]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	4916      	ldr	r1, [pc, #88]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0308 	and.w	r3, r3, #8
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d009      	beq.n	8002c86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c72:	4b12      	ldr	r3, [pc, #72]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	490e      	ldr	r1, [pc, #56]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c86:	f000 f821 	bl	8002ccc <HAL_RCC_GetSysClockFreq>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	4b0b      	ldr	r3, [pc, #44]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	091b      	lsrs	r3, r3, #4
 8002c92:	f003 030f 	and.w	r3, r3, #15
 8002c96:	490a      	ldr	r1, [pc, #40]	; (8002cc0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c98:	5ccb      	ldrb	r3, [r1, r3]
 8002c9a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c9e:	4a09      	ldr	r2, [pc, #36]	; (8002cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ca0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ca2:	4b09      	ldr	r3, [pc, #36]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7fd fde4 	bl	8000874 <HAL_InitTick>

  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3710      	adds	r7, #16
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	40023c00 	.word	0x40023c00
 8002cbc:	40023800 	.word	0x40023800
 8002cc0:	0800a938 	.word	0x0800a938
 8002cc4:	20000000 	.word	0x20000000
 8002cc8:	20000004 	.word	0x20000004

08002ccc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ccc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cd0:	b094      	sub	sp, #80	; 0x50
 8002cd2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	647b      	str	r3, [r7, #68]	; 0x44
 8002cd8:	2300      	movs	r3, #0
 8002cda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cdc:	2300      	movs	r3, #0
 8002cde:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ce4:	4b79      	ldr	r3, [pc, #484]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x200>)
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f003 030c 	and.w	r3, r3, #12
 8002cec:	2b08      	cmp	r3, #8
 8002cee:	d00d      	beq.n	8002d0c <HAL_RCC_GetSysClockFreq+0x40>
 8002cf0:	2b08      	cmp	r3, #8
 8002cf2:	f200 80e1 	bhi.w	8002eb8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d002      	beq.n	8002d00 <HAL_RCC_GetSysClockFreq+0x34>
 8002cfa:	2b04      	cmp	r3, #4
 8002cfc:	d003      	beq.n	8002d06 <HAL_RCC_GetSysClockFreq+0x3a>
 8002cfe:	e0db      	b.n	8002eb8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d00:	4b73      	ldr	r3, [pc, #460]	; (8002ed0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d02:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002d04:	e0db      	b.n	8002ebe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d06:	4b73      	ldr	r3, [pc, #460]	; (8002ed4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002d08:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d0a:	e0d8      	b.n	8002ebe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d0c:	4b6f      	ldr	r3, [pc, #444]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x200>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d14:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d16:	4b6d      	ldr	r3, [pc, #436]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x200>)
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d063      	beq.n	8002dea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d22:	4b6a      	ldr	r3, [pc, #424]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x200>)
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	099b      	lsrs	r3, r3, #6
 8002d28:	2200      	movs	r2, #0
 8002d2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d2c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d34:	633b      	str	r3, [r7, #48]	; 0x30
 8002d36:	2300      	movs	r3, #0
 8002d38:	637b      	str	r3, [r7, #52]	; 0x34
 8002d3a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002d3e:	4622      	mov	r2, r4
 8002d40:	462b      	mov	r3, r5
 8002d42:	f04f 0000 	mov.w	r0, #0
 8002d46:	f04f 0100 	mov.w	r1, #0
 8002d4a:	0159      	lsls	r1, r3, #5
 8002d4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d50:	0150      	lsls	r0, r2, #5
 8002d52:	4602      	mov	r2, r0
 8002d54:	460b      	mov	r3, r1
 8002d56:	4621      	mov	r1, r4
 8002d58:	1a51      	subs	r1, r2, r1
 8002d5a:	6139      	str	r1, [r7, #16]
 8002d5c:	4629      	mov	r1, r5
 8002d5e:	eb63 0301 	sbc.w	r3, r3, r1
 8002d62:	617b      	str	r3, [r7, #20]
 8002d64:	f04f 0200 	mov.w	r2, #0
 8002d68:	f04f 0300 	mov.w	r3, #0
 8002d6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d70:	4659      	mov	r1, fp
 8002d72:	018b      	lsls	r3, r1, #6
 8002d74:	4651      	mov	r1, sl
 8002d76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d7a:	4651      	mov	r1, sl
 8002d7c:	018a      	lsls	r2, r1, #6
 8002d7e:	4651      	mov	r1, sl
 8002d80:	ebb2 0801 	subs.w	r8, r2, r1
 8002d84:	4659      	mov	r1, fp
 8002d86:	eb63 0901 	sbc.w	r9, r3, r1
 8002d8a:	f04f 0200 	mov.w	r2, #0
 8002d8e:	f04f 0300 	mov.w	r3, #0
 8002d92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d9e:	4690      	mov	r8, r2
 8002da0:	4699      	mov	r9, r3
 8002da2:	4623      	mov	r3, r4
 8002da4:	eb18 0303 	adds.w	r3, r8, r3
 8002da8:	60bb      	str	r3, [r7, #8]
 8002daa:	462b      	mov	r3, r5
 8002dac:	eb49 0303 	adc.w	r3, r9, r3
 8002db0:	60fb      	str	r3, [r7, #12]
 8002db2:	f04f 0200 	mov.w	r2, #0
 8002db6:	f04f 0300 	mov.w	r3, #0
 8002dba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002dbe:	4629      	mov	r1, r5
 8002dc0:	024b      	lsls	r3, r1, #9
 8002dc2:	4621      	mov	r1, r4
 8002dc4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002dc8:	4621      	mov	r1, r4
 8002dca:	024a      	lsls	r2, r1, #9
 8002dcc:	4610      	mov	r0, r2
 8002dce:	4619      	mov	r1, r3
 8002dd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dd6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002dd8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ddc:	f7fd fa00 	bl	80001e0 <__aeabi_uldivmod>
 8002de0:	4602      	mov	r2, r0
 8002de2:	460b      	mov	r3, r1
 8002de4:	4613      	mov	r3, r2
 8002de6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002de8:	e058      	b.n	8002e9c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dea:	4b38      	ldr	r3, [pc, #224]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x200>)
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	099b      	lsrs	r3, r3, #6
 8002df0:	2200      	movs	r2, #0
 8002df2:	4618      	mov	r0, r3
 8002df4:	4611      	mov	r1, r2
 8002df6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002dfa:	623b      	str	r3, [r7, #32]
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	627b      	str	r3, [r7, #36]	; 0x24
 8002e00:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002e04:	4642      	mov	r2, r8
 8002e06:	464b      	mov	r3, r9
 8002e08:	f04f 0000 	mov.w	r0, #0
 8002e0c:	f04f 0100 	mov.w	r1, #0
 8002e10:	0159      	lsls	r1, r3, #5
 8002e12:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e16:	0150      	lsls	r0, r2, #5
 8002e18:	4602      	mov	r2, r0
 8002e1a:	460b      	mov	r3, r1
 8002e1c:	4641      	mov	r1, r8
 8002e1e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e22:	4649      	mov	r1, r9
 8002e24:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e28:	f04f 0200 	mov.w	r2, #0
 8002e2c:	f04f 0300 	mov.w	r3, #0
 8002e30:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e34:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e38:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e3c:	ebb2 040a 	subs.w	r4, r2, sl
 8002e40:	eb63 050b 	sbc.w	r5, r3, fp
 8002e44:	f04f 0200 	mov.w	r2, #0
 8002e48:	f04f 0300 	mov.w	r3, #0
 8002e4c:	00eb      	lsls	r3, r5, #3
 8002e4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e52:	00e2      	lsls	r2, r4, #3
 8002e54:	4614      	mov	r4, r2
 8002e56:	461d      	mov	r5, r3
 8002e58:	4643      	mov	r3, r8
 8002e5a:	18e3      	adds	r3, r4, r3
 8002e5c:	603b      	str	r3, [r7, #0]
 8002e5e:	464b      	mov	r3, r9
 8002e60:	eb45 0303 	adc.w	r3, r5, r3
 8002e64:	607b      	str	r3, [r7, #4]
 8002e66:	f04f 0200 	mov.w	r2, #0
 8002e6a:	f04f 0300 	mov.w	r3, #0
 8002e6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e72:	4629      	mov	r1, r5
 8002e74:	028b      	lsls	r3, r1, #10
 8002e76:	4621      	mov	r1, r4
 8002e78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e7c:	4621      	mov	r1, r4
 8002e7e:	028a      	lsls	r2, r1, #10
 8002e80:	4610      	mov	r0, r2
 8002e82:	4619      	mov	r1, r3
 8002e84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e86:	2200      	movs	r2, #0
 8002e88:	61bb      	str	r3, [r7, #24]
 8002e8a:	61fa      	str	r2, [r7, #28]
 8002e8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e90:	f7fd f9a6 	bl	80001e0 <__aeabi_uldivmod>
 8002e94:	4602      	mov	r2, r0
 8002e96:	460b      	mov	r3, r1
 8002e98:	4613      	mov	r3, r2
 8002e9a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e9c:	4b0b      	ldr	r3, [pc, #44]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x200>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	0c1b      	lsrs	r3, r3, #16
 8002ea2:	f003 0303 	and.w	r3, r3, #3
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	005b      	lsls	r3, r3, #1
 8002eaa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002eac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002eae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eb4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002eb6:	e002      	b.n	8002ebe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002eb8:	4b05      	ldr	r3, [pc, #20]	; (8002ed0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002eba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ebc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ebe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3750      	adds	r7, #80	; 0x50
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002eca:	bf00      	nop
 8002ecc:	40023800 	.word	0x40023800
 8002ed0:	00f42400 	.word	0x00f42400
 8002ed4:	007a1200 	.word	0x007a1200

08002ed8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002edc:	4b03      	ldr	r3, [pc, #12]	; (8002eec <HAL_RCC_GetHCLKFreq+0x14>)
 8002ede:	681b      	ldr	r3, [r3, #0]
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	20000000 	.word	0x20000000

08002ef0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ef4:	f7ff fff0 	bl	8002ed8 <HAL_RCC_GetHCLKFreq>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	4b05      	ldr	r3, [pc, #20]	; (8002f10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	0a9b      	lsrs	r3, r3, #10
 8002f00:	f003 0307 	and.w	r3, r3, #7
 8002f04:	4903      	ldr	r1, [pc, #12]	; (8002f14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f06:	5ccb      	ldrb	r3, [r1, r3]
 8002f08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	40023800 	.word	0x40023800
 8002f14:	0800a948 	.word	0x0800a948

08002f18 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	220f      	movs	r2, #15
 8002f26:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002f28:	4b12      	ldr	r3, [pc, #72]	; (8002f74 <HAL_RCC_GetClockConfig+0x5c>)
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f003 0203 	and.w	r2, r3, #3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002f34:	4b0f      	ldr	r3, [pc, #60]	; (8002f74 <HAL_RCC_GetClockConfig+0x5c>)
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002f40:	4b0c      	ldr	r3, [pc, #48]	; (8002f74 <HAL_RCC_GetClockConfig+0x5c>)
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002f4c:	4b09      	ldr	r3, [pc, #36]	; (8002f74 <HAL_RCC_GetClockConfig+0x5c>)
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	08db      	lsrs	r3, r3, #3
 8002f52:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002f5a:	4b07      	ldr	r3, [pc, #28]	; (8002f78 <HAL_RCC_GetClockConfig+0x60>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0207 	and.w	r2, r3, #7
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	601a      	str	r2, [r3, #0]
}
 8002f66:	bf00      	nop
 8002f68:	370c      	adds	r7, #12
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	40023800 	.word	0x40023800
 8002f78:	40023c00 	.word	0x40023c00

08002f7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e041      	b.n	8003012 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d106      	bne.n	8002fa8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 f839 	bl	800301a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2202      	movs	r2, #2
 8002fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	3304      	adds	r3, #4
 8002fb8:	4619      	mov	r1, r3
 8002fba:	4610      	mov	r0, r2
 8002fbc:	f000 f9d8 	bl	8003370 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3708      	adds	r7, #8
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800301a:	b480      	push	{r7}
 800301c:	b083      	sub	sp, #12
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003022:	bf00      	nop
 8003024:	370c      	adds	r7, #12
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
	...

08003030 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003030:	b480      	push	{r7}
 8003032:	b085      	sub	sp, #20
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800303e:	b2db      	uxtb	r3, r3
 8003040:	2b01      	cmp	r3, #1
 8003042:	d001      	beq.n	8003048 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e04e      	b.n	80030e6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2202      	movs	r2, #2
 800304c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68da      	ldr	r2, [r3, #12]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f042 0201 	orr.w	r2, r2, #1
 800305e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a23      	ldr	r2, [pc, #140]	; (80030f4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d022      	beq.n	80030b0 <HAL_TIM_Base_Start_IT+0x80>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003072:	d01d      	beq.n	80030b0 <HAL_TIM_Base_Start_IT+0x80>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a1f      	ldr	r2, [pc, #124]	; (80030f8 <HAL_TIM_Base_Start_IT+0xc8>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d018      	beq.n	80030b0 <HAL_TIM_Base_Start_IT+0x80>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a1e      	ldr	r2, [pc, #120]	; (80030fc <HAL_TIM_Base_Start_IT+0xcc>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d013      	beq.n	80030b0 <HAL_TIM_Base_Start_IT+0x80>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a1c      	ldr	r2, [pc, #112]	; (8003100 <HAL_TIM_Base_Start_IT+0xd0>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d00e      	beq.n	80030b0 <HAL_TIM_Base_Start_IT+0x80>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a1b      	ldr	r2, [pc, #108]	; (8003104 <HAL_TIM_Base_Start_IT+0xd4>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d009      	beq.n	80030b0 <HAL_TIM_Base_Start_IT+0x80>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a19      	ldr	r2, [pc, #100]	; (8003108 <HAL_TIM_Base_Start_IT+0xd8>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d004      	beq.n	80030b0 <HAL_TIM_Base_Start_IT+0x80>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a18      	ldr	r2, [pc, #96]	; (800310c <HAL_TIM_Base_Start_IT+0xdc>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d111      	bne.n	80030d4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f003 0307 	and.w	r3, r3, #7
 80030ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2b06      	cmp	r3, #6
 80030c0:	d010      	beq.n	80030e4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f042 0201 	orr.w	r2, r2, #1
 80030d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030d2:	e007      	b.n	80030e4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f042 0201 	orr.w	r2, r2, #1
 80030e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3714      	adds	r7, #20
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop
 80030f4:	40010000 	.word	0x40010000
 80030f8:	40000400 	.word	0x40000400
 80030fc:	40000800 	.word	0x40000800
 8003100:	40000c00 	.word	0x40000c00
 8003104:	40010400 	.word	0x40010400
 8003108:	40014000 	.word	0x40014000
 800310c:	40001800 	.word	0x40001800

08003110 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	2b02      	cmp	r3, #2
 8003124:	d122      	bne.n	800316c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	f003 0302 	and.w	r3, r3, #2
 8003130:	2b02      	cmp	r3, #2
 8003132:	d11b      	bne.n	800316c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f06f 0202 	mvn.w	r2, #2
 800313c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2201      	movs	r2, #1
 8003142:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	f003 0303 	and.w	r3, r3, #3
 800314e:	2b00      	cmp	r3, #0
 8003150:	d003      	beq.n	800315a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 f8ee 	bl	8003334 <HAL_TIM_IC_CaptureCallback>
 8003158:	e005      	b.n	8003166 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 f8e0 	bl	8003320 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f000 f8f1 	bl	8003348 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	f003 0304 	and.w	r3, r3, #4
 8003176:	2b04      	cmp	r3, #4
 8003178:	d122      	bne.n	80031c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	f003 0304 	and.w	r3, r3, #4
 8003184:	2b04      	cmp	r3, #4
 8003186:	d11b      	bne.n	80031c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f06f 0204 	mvn.w	r2, #4
 8003190:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2202      	movs	r2, #2
 8003196:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	699b      	ldr	r3, [r3, #24]
 800319e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d003      	beq.n	80031ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 f8c4 	bl	8003334 <HAL_TIM_IC_CaptureCallback>
 80031ac:	e005      	b.n	80031ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 f8b6 	bl	8003320 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f000 f8c7 	bl	8003348 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	f003 0308 	and.w	r3, r3, #8
 80031ca:	2b08      	cmp	r3, #8
 80031cc:	d122      	bne.n	8003214 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	f003 0308 	and.w	r3, r3, #8
 80031d8:	2b08      	cmp	r3, #8
 80031da:	d11b      	bne.n	8003214 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f06f 0208 	mvn.w	r2, #8
 80031e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2204      	movs	r2, #4
 80031ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	69db      	ldr	r3, [r3, #28]
 80031f2:	f003 0303 	and.w	r3, r3, #3
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d003      	beq.n	8003202 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 f89a 	bl	8003334 <HAL_TIM_IC_CaptureCallback>
 8003200:	e005      	b.n	800320e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 f88c 	bl	8003320 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f000 f89d 	bl	8003348 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	f003 0310 	and.w	r3, r3, #16
 800321e:	2b10      	cmp	r3, #16
 8003220:	d122      	bne.n	8003268 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	f003 0310 	and.w	r3, r3, #16
 800322c:	2b10      	cmp	r3, #16
 800322e:	d11b      	bne.n	8003268 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f06f 0210 	mvn.w	r2, #16
 8003238:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2208      	movs	r2, #8
 800323e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	69db      	ldr	r3, [r3, #28]
 8003246:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800324a:	2b00      	cmp	r3, #0
 800324c:	d003      	beq.n	8003256 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 f870 	bl	8003334 <HAL_TIM_IC_CaptureCallback>
 8003254:	e005      	b.n	8003262 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 f862 	bl	8003320 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f000 f873 	bl	8003348 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	2b01      	cmp	r3, #1
 8003274:	d10e      	bne.n	8003294 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	f003 0301 	and.w	r3, r3, #1
 8003280:	2b01      	cmp	r3, #1
 8003282:	d107      	bne.n	8003294 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f06f 0201 	mvn.w	r2, #1
 800328c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f7fd fa82 	bl	8000798 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800329e:	2b80      	cmp	r3, #128	; 0x80
 80032a0:	d10e      	bne.n	80032c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ac:	2b80      	cmp	r3, #128	; 0x80
 80032ae:	d107      	bne.n	80032c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80032b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 f902 	bl	80034c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ca:	2b40      	cmp	r3, #64	; 0x40
 80032cc:	d10e      	bne.n	80032ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032d8:	2b40      	cmp	r3, #64	; 0x40
 80032da:	d107      	bne.n	80032ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f000 f838 	bl	800335c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	f003 0320 	and.w	r3, r3, #32
 80032f6:	2b20      	cmp	r3, #32
 80032f8:	d10e      	bne.n	8003318 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	f003 0320 	and.w	r3, r3, #32
 8003304:	2b20      	cmp	r3, #32
 8003306:	d107      	bne.n	8003318 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f06f 0220 	mvn.w	r2, #32
 8003310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 f8cc 	bl	80034b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003318:	bf00      	nop
 800331a:	3708      	adds	r7, #8
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}

08003320 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003328:	bf00      	nop
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800333c:	bf00      	nop
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr

08003348 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003350:	bf00      	nop
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003364:	bf00      	nop
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003370:	b480      	push	{r7}
 8003372:	b085      	sub	sp, #20
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a40      	ldr	r2, [pc, #256]	; (8003484 <TIM_Base_SetConfig+0x114>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d013      	beq.n	80033b0 <TIM_Base_SetConfig+0x40>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800338e:	d00f      	beq.n	80033b0 <TIM_Base_SetConfig+0x40>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4a3d      	ldr	r2, [pc, #244]	; (8003488 <TIM_Base_SetConfig+0x118>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d00b      	beq.n	80033b0 <TIM_Base_SetConfig+0x40>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	4a3c      	ldr	r2, [pc, #240]	; (800348c <TIM_Base_SetConfig+0x11c>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d007      	beq.n	80033b0 <TIM_Base_SetConfig+0x40>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4a3b      	ldr	r2, [pc, #236]	; (8003490 <TIM_Base_SetConfig+0x120>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d003      	beq.n	80033b0 <TIM_Base_SetConfig+0x40>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4a3a      	ldr	r2, [pc, #232]	; (8003494 <TIM_Base_SetConfig+0x124>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d108      	bne.n	80033c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	68fa      	ldr	r2, [r7, #12]
 80033be:	4313      	orrs	r3, r2
 80033c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a2f      	ldr	r2, [pc, #188]	; (8003484 <TIM_Base_SetConfig+0x114>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d02b      	beq.n	8003422 <TIM_Base_SetConfig+0xb2>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033d0:	d027      	beq.n	8003422 <TIM_Base_SetConfig+0xb2>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a2c      	ldr	r2, [pc, #176]	; (8003488 <TIM_Base_SetConfig+0x118>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d023      	beq.n	8003422 <TIM_Base_SetConfig+0xb2>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a2b      	ldr	r2, [pc, #172]	; (800348c <TIM_Base_SetConfig+0x11c>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d01f      	beq.n	8003422 <TIM_Base_SetConfig+0xb2>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a2a      	ldr	r2, [pc, #168]	; (8003490 <TIM_Base_SetConfig+0x120>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d01b      	beq.n	8003422 <TIM_Base_SetConfig+0xb2>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a29      	ldr	r2, [pc, #164]	; (8003494 <TIM_Base_SetConfig+0x124>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d017      	beq.n	8003422 <TIM_Base_SetConfig+0xb2>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a28      	ldr	r2, [pc, #160]	; (8003498 <TIM_Base_SetConfig+0x128>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d013      	beq.n	8003422 <TIM_Base_SetConfig+0xb2>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a27      	ldr	r2, [pc, #156]	; (800349c <TIM_Base_SetConfig+0x12c>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d00f      	beq.n	8003422 <TIM_Base_SetConfig+0xb2>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a26      	ldr	r2, [pc, #152]	; (80034a0 <TIM_Base_SetConfig+0x130>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d00b      	beq.n	8003422 <TIM_Base_SetConfig+0xb2>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a25      	ldr	r2, [pc, #148]	; (80034a4 <TIM_Base_SetConfig+0x134>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d007      	beq.n	8003422 <TIM_Base_SetConfig+0xb2>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a24      	ldr	r2, [pc, #144]	; (80034a8 <TIM_Base_SetConfig+0x138>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d003      	beq.n	8003422 <TIM_Base_SetConfig+0xb2>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a23      	ldr	r2, [pc, #140]	; (80034ac <TIM_Base_SetConfig+0x13c>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d108      	bne.n	8003434 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003428:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	4313      	orrs	r3, r2
 8003432:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	4313      	orrs	r3, r2
 8003440:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	68fa      	ldr	r2, [r7, #12]
 8003446:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	689a      	ldr	r2, [r3, #8]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4a0a      	ldr	r2, [pc, #40]	; (8003484 <TIM_Base_SetConfig+0x114>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d003      	beq.n	8003468 <TIM_Base_SetConfig+0xf8>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4a0c      	ldr	r2, [pc, #48]	; (8003494 <TIM_Base_SetConfig+0x124>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d103      	bne.n	8003470 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	691a      	ldr	r2, [r3, #16]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	615a      	str	r2, [r3, #20]
}
 8003476:	bf00      	nop
 8003478:	3714      	adds	r7, #20
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	40010000 	.word	0x40010000
 8003488:	40000400 	.word	0x40000400
 800348c:	40000800 	.word	0x40000800
 8003490:	40000c00 	.word	0x40000c00
 8003494:	40010400 	.word	0x40010400
 8003498:	40014000 	.word	0x40014000
 800349c:	40014400 	.word	0x40014400
 80034a0:	40014800 	.word	0x40014800
 80034a4:	40001800 	.word	0x40001800
 80034a8:	40001c00 	.word	0x40001c00
 80034ac:	40002000 	.word	0x40002000

080034b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034b8:	bf00      	nop
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr

080034c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034cc:	bf00      	nop
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80034d8:	b084      	sub	sp, #16
 80034da:	b580      	push	{r7, lr}
 80034dc:	b084      	sub	sp, #16
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
 80034e2:	f107 001c 	add.w	r0, r7, #28
 80034e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80034ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d122      	bne.n	8003536 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003504:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003518:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800351a:	2b01      	cmp	r3, #1
 800351c:	d105      	bne.n	800352a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f001 fbee 	bl	8004d0c <USB_CoreReset>
 8003530:	4603      	mov	r3, r0
 8003532:	73fb      	strb	r3, [r7, #15]
 8003534:	e01a      	b.n	800356c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f001 fbe2 	bl	8004d0c <USB_CoreReset>
 8003548:	4603      	mov	r3, r0
 800354a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800354c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800354e:	2b00      	cmp	r3, #0
 8003550:	d106      	bne.n	8003560 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003556:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	639a      	str	r2, [r3, #56]	; 0x38
 800355e:	e005      	b.n	800356c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003564:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800356c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800356e:	2b01      	cmp	r3, #1
 8003570:	d10b      	bne.n	800358a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	f043 0206 	orr.w	r2, r3, #6
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f043 0220 	orr.w	r2, r3, #32
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800358a:	7bfb      	ldrb	r3, [r7, #15]
}
 800358c:	4618      	mov	r0, r3
 800358e:	3710      	adds	r7, #16
 8003590:	46bd      	mov	sp, r7
 8003592:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003596:	b004      	add	sp, #16
 8003598:	4770      	bx	lr
	...

0800359c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800359c:	b480      	push	{r7}
 800359e:	b087      	sub	sp, #28
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	4613      	mov	r3, r2
 80035a8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80035aa:	79fb      	ldrb	r3, [r7, #7]
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d165      	bne.n	800367c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	4a41      	ldr	r2, [pc, #260]	; (80036b8 <USB_SetTurnaroundTime+0x11c>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d906      	bls.n	80035c6 <USB_SetTurnaroundTime+0x2a>
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	4a40      	ldr	r2, [pc, #256]	; (80036bc <USB_SetTurnaroundTime+0x120>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d202      	bcs.n	80035c6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80035c0:	230f      	movs	r3, #15
 80035c2:	617b      	str	r3, [r7, #20]
 80035c4:	e062      	b.n	800368c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	4a3c      	ldr	r2, [pc, #240]	; (80036bc <USB_SetTurnaroundTime+0x120>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d306      	bcc.n	80035dc <USB_SetTurnaroundTime+0x40>
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	4a3b      	ldr	r2, [pc, #236]	; (80036c0 <USB_SetTurnaroundTime+0x124>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d202      	bcs.n	80035dc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80035d6:	230e      	movs	r3, #14
 80035d8:	617b      	str	r3, [r7, #20]
 80035da:	e057      	b.n	800368c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	4a38      	ldr	r2, [pc, #224]	; (80036c0 <USB_SetTurnaroundTime+0x124>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d306      	bcc.n	80035f2 <USB_SetTurnaroundTime+0x56>
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	4a37      	ldr	r2, [pc, #220]	; (80036c4 <USB_SetTurnaroundTime+0x128>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d202      	bcs.n	80035f2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80035ec:	230d      	movs	r3, #13
 80035ee:	617b      	str	r3, [r7, #20]
 80035f0:	e04c      	b.n	800368c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	4a33      	ldr	r2, [pc, #204]	; (80036c4 <USB_SetTurnaroundTime+0x128>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d306      	bcc.n	8003608 <USB_SetTurnaroundTime+0x6c>
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	4a32      	ldr	r2, [pc, #200]	; (80036c8 <USB_SetTurnaroundTime+0x12c>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d802      	bhi.n	8003608 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003602:	230c      	movs	r3, #12
 8003604:	617b      	str	r3, [r7, #20]
 8003606:	e041      	b.n	800368c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	4a2f      	ldr	r2, [pc, #188]	; (80036c8 <USB_SetTurnaroundTime+0x12c>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d906      	bls.n	800361e <USB_SetTurnaroundTime+0x82>
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	4a2e      	ldr	r2, [pc, #184]	; (80036cc <USB_SetTurnaroundTime+0x130>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d802      	bhi.n	800361e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003618:	230b      	movs	r3, #11
 800361a:	617b      	str	r3, [r7, #20]
 800361c:	e036      	b.n	800368c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	4a2a      	ldr	r2, [pc, #168]	; (80036cc <USB_SetTurnaroundTime+0x130>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d906      	bls.n	8003634 <USB_SetTurnaroundTime+0x98>
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	4a29      	ldr	r2, [pc, #164]	; (80036d0 <USB_SetTurnaroundTime+0x134>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d802      	bhi.n	8003634 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800362e:	230a      	movs	r3, #10
 8003630:	617b      	str	r3, [r7, #20]
 8003632:	e02b      	b.n	800368c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	4a26      	ldr	r2, [pc, #152]	; (80036d0 <USB_SetTurnaroundTime+0x134>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d906      	bls.n	800364a <USB_SetTurnaroundTime+0xae>
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	4a25      	ldr	r2, [pc, #148]	; (80036d4 <USB_SetTurnaroundTime+0x138>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d202      	bcs.n	800364a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003644:	2309      	movs	r3, #9
 8003646:	617b      	str	r3, [r7, #20]
 8003648:	e020      	b.n	800368c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	4a21      	ldr	r2, [pc, #132]	; (80036d4 <USB_SetTurnaroundTime+0x138>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d306      	bcc.n	8003660 <USB_SetTurnaroundTime+0xc4>
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	4a20      	ldr	r2, [pc, #128]	; (80036d8 <USB_SetTurnaroundTime+0x13c>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d802      	bhi.n	8003660 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800365a:	2308      	movs	r3, #8
 800365c:	617b      	str	r3, [r7, #20]
 800365e:	e015      	b.n	800368c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	4a1d      	ldr	r2, [pc, #116]	; (80036d8 <USB_SetTurnaroundTime+0x13c>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d906      	bls.n	8003676 <USB_SetTurnaroundTime+0xda>
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	4a1c      	ldr	r2, [pc, #112]	; (80036dc <USB_SetTurnaroundTime+0x140>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d202      	bcs.n	8003676 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003670:	2307      	movs	r3, #7
 8003672:	617b      	str	r3, [r7, #20]
 8003674:	e00a      	b.n	800368c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003676:	2306      	movs	r3, #6
 8003678:	617b      	str	r3, [r7, #20]
 800367a:	e007      	b.n	800368c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800367c:	79fb      	ldrb	r3, [r7, #7]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d102      	bne.n	8003688 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003682:	2309      	movs	r3, #9
 8003684:	617b      	str	r3, [r7, #20]
 8003686:	e001      	b.n	800368c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003688:	2309      	movs	r3, #9
 800368a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	68da      	ldr	r2, [r3, #12]
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	029b      	lsls	r3, r3, #10
 80036a0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80036a4:	431a      	orrs	r2, r3
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	371c      	adds	r7, #28
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr
 80036b8:	00d8acbf 	.word	0x00d8acbf
 80036bc:	00e4e1c0 	.word	0x00e4e1c0
 80036c0:	00f42400 	.word	0x00f42400
 80036c4:	01067380 	.word	0x01067380
 80036c8:	011a499f 	.word	0x011a499f
 80036cc:	01312cff 	.word	0x01312cff
 80036d0:	014ca43f 	.word	0x014ca43f
 80036d4:	016e3600 	.word	0x016e3600
 80036d8:	01a6ab1f 	.word	0x01a6ab1f
 80036dc:	01e84800 	.word	0x01e84800

080036e0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f043 0201 	orr.w	r2, r3, #1
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003702:	b480      	push	{r7}
 8003704:	b083      	sub	sp, #12
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	f023 0201 	bic.w	r2, r3, #1
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	460b      	mov	r3, r1
 800372e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003730:	2300      	movs	r3, #0
 8003732:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003740:	78fb      	ldrb	r3, [r7, #3]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d115      	bne.n	8003772 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003752:	2001      	movs	r0, #1
 8003754:	f7fd fa0a 	bl	8000b6c <HAL_Delay>
      ms++;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	3301      	adds	r3, #1
 800375c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f001 fa45 	bl	8004bee <USB_GetMode>
 8003764:	4603      	mov	r3, r0
 8003766:	2b01      	cmp	r3, #1
 8003768:	d01e      	beq.n	80037a8 <USB_SetCurrentMode+0x84>
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2b31      	cmp	r3, #49	; 0x31
 800376e:	d9f0      	bls.n	8003752 <USB_SetCurrentMode+0x2e>
 8003770:	e01a      	b.n	80037a8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003772:	78fb      	ldrb	r3, [r7, #3]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d115      	bne.n	80037a4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003784:	2001      	movs	r0, #1
 8003786:	f7fd f9f1 	bl	8000b6c <HAL_Delay>
      ms++;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	3301      	adds	r3, #1
 800378e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f001 fa2c 	bl	8004bee <USB_GetMode>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d005      	beq.n	80037a8 <USB_SetCurrentMode+0x84>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2b31      	cmp	r3, #49	; 0x31
 80037a0:	d9f0      	bls.n	8003784 <USB_SetCurrentMode+0x60>
 80037a2:	e001      	b.n	80037a8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e005      	b.n	80037b4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2b32      	cmp	r3, #50	; 0x32
 80037ac:	d101      	bne.n	80037b2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e000      	b.n	80037b4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80037b2:	2300      	movs	r3, #0
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3710      	adds	r7, #16
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80037bc:	b084      	sub	sp, #16
 80037be:	b580      	push	{r7, lr}
 80037c0:	b086      	sub	sp, #24
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
 80037c6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80037ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80037ce:	2300      	movs	r3, #0
 80037d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80037d6:	2300      	movs	r3, #0
 80037d8:	613b      	str	r3, [r7, #16]
 80037da:	e009      	b.n	80037f0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	3340      	adds	r3, #64	; 0x40
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	4413      	add	r3, r2
 80037e6:	2200      	movs	r2, #0
 80037e8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	3301      	adds	r3, #1
 80037ee:	613b      	str	r3, [r7, #16]
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	2b0e      	cmp	r3, #14
 80037f4:	d9f2      	bls.n	80037dc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80037f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d11c      	bne.n	8003836 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	68fa      	ldr	r2, [r7, #12]
 8003806:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800380a:	f043 0302 	orr.w	r3, r3, #2
 800380e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003814:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003820:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	639a      	str	r2, [r3, #56]	; 0x38
 8003834:	e00b      	b.n	800384e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800383a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003846:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003854:	461a      	mov	r2, r3
 8003856:	2300      	movs	r3, #0
 8003858:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003860:	4619      	mov	r1, r3
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003868:	461a      	mov	r2, r3
 800386a:	680b      	ldr	r3, [r1, #0]
 800386c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800386e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003870:	2b01      	cmp	r3, #1
 8003872:	d10c      	bne.n	800388e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003876:	2b00      	cmp	r3, #0
 8003878:	d104      	bne.n	8003884 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800387a:	2100      	movs	r1, #0
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f000 f965 	bl	8003b4c <USB_SetDevSpeed>
 8003882:	e008      	b.n	8003896 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003884:	2101      	movs	r1, #1
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f000 f960 	bl	8003b4c <USB_SetDevSpeed>
 800388c:	e003      	b.n	8003896 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800388e:	2103      	movs	r1, #3
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f000 f95b 	bl	8003b4c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003896:	2110      	movs	r1, #16
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f000 f8f3 	bl	8003a84 <USB_FlushTxFifo>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d001      	beq.n	80038a8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f000 f91f 	bl	8003aec <USB_FlushRxFifo>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d001      	beq.n	80038b8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038be:	461a      	mov	r2, r3
 80038c0:	2300      	movs	r3, #0
 80038c2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038ca:	461a      	mov	r2, r3
 80038cc:	2300      	movs	r3, #0
 80038ce:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038d6:	461a      	mov	r2, r3
 80038d8:	2300      	movs	r3, #0
 80038da:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80038dc:	2300      	movs	r3, #0
 80038de:	613b      	str	r3, [r7, #16]
 80038e0:	e043      	b.n	800396a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	015a      	lsls	r2, r3, #5
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	4413      	add	r3, r2
 80038ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80038f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80038f8:	d118      	bne.n	800392c <USB_DevInit+0x170>
    {
      if (i == 0U)
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d10a      	bne.n	8003916 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	015a      	lsls	r2, r3, #5
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	4413      	add	r3, r2
 8003908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800390c:	461a      	mov	r2, r3
 800390e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003912:	6013      	str	r3, [r2, #0]
 8003914:	e013      	b.n	800393e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	015a      	lsls	r2, r3, #5
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	4413      	add	r3, r2
 800391e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003922:	461a      	mov	r2, r3
 8003924:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003928:	6013      	str	r3, [r2, #0]
 800392a:	e008      	b.n	800393e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	015a      	lsls	r2, r3, #5
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	4413      	add	r3, r2
 8003934:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003938:	461a      	mov	r2, r3
 800393a:	2300      	movs	r3, #0
 800393c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	015a      	lsls	r2, r3, #5
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	4413      	add	r3, r2
 8003946:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800394a:	461a      	mov	r2, r3
 800394c:	2300      	movs	r3, #0
 800394e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	015a      	lsls	r2, r3, #5
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	4413      	add	r3, r2
 8003958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800395c:	461a      	mov	r2, r3
 800395e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003962:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	3301      	adds	r3, #1
 8003968:	613b      	str	r3, [r7, #16]
 800396a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396c:	693a      	ldr	r2, [r7, #16]
 800396e:	429a      	cmp	r2, r3
 8003970:	d3b7      	bcc.n	80038e2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003972:	2300      	movs	r3, #0
 8003974:	613b      	str	r3, [r7, #16]
 8003976:	e043      	b.n	8003a00 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	015a      	lsls	r2, r3, #5
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	4413      	add	r3, r2
 8003980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800398a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800398e:	d118      	bne.n	80039c2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d10a      	bne.n	80039ac <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	015a      	lsls	r2, r3, #5
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	4413      	add	r3, r2
 800399e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039a2:	461a      	mov	r2, r3
 80039a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80039a8:	6013      	str	r3, [r2, #0]
 80039aa:	e013      	b.n	80039d4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	015a      	lsls	r2, r3, #5
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	4413      	add	r3, r2
 80039b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039b8:	461a      	mov	r2, r3
 80039ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80039be:	6013      	str	r3, [r2, #0]
 80039c0:	e008      	b.n	80039d4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	015a      	lsls	r2, r3, #5
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	4413      	add	r3, r2
 80039ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039ce:	461a      	mov	r2, r3
 80039d0:	2300      	movs	r3, #0
 80039d2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	015a      	lsls	r2, r3, #5
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	4413      	add	r3, r2
 80039dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039e0:	461a      	mov	r2, r3
 80039e2:	2300      	movs	r3, #0
 80039e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	015a      	lsls	r2, r3, #5
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	4413      	add	r3, r2
 80039ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039f2:	461a      	mov	r2, r3
 80039f4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80039f8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	3301      	adds	r3, #1
 80039fe:	613b      	str	r3, [r7, #16]
 8003a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a02:	693a      	ldr	r2, [r7, #16]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d3b7      	bcc.n	8003978 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a0e:	691b      	ldr	r3, [r3, #16]
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a1a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003a28:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d105      	bne.n	8003a3c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	699b      	ldr	r3, [r3, #24]
 8003a34:	f043 0210 	orr.w	r2, r3, #16
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	699a      	ldr	r2, [r3, #24]
 8003a40:	4b0f      	ldr	r3, [pc, #60]	; (8003a80 <USB_DevInit+0x2c4>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003a48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d005      	beq.n	8003a5a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	699b      	ldr	r3, [r3, #24]
 8003a52:	f043 0208 	orr.w	r2, r3, #8
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003a5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d107      	bne.n	8003a70 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	699b      	ldr	r3, [r3, #24]
 8003a64:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003a68:	f043 0304 	orr.w	r3, r3, #4
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003a70:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3718      	adds	r7, #24
 8003a76:	46bd      	mov	sp, r7
 8003a78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003a7c:	b004      	add	sp, #16
 8003a7e:	4770      	bx	lr
 8003a80:	803c3800 	.word	0x803c3800

08003a84 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b085      	sub	sp, #20
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	3301      	adds	r3, #1
 8003a96:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	4a13      	ldr	r2, [pc, #76]	; (8003ae8 <USB_FlushTxFifo+0x64>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d901      	bls.n	8003aa4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e01b      	b.n	8003adc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	691b      	ldr	r3, [r3, #16]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	daf2      	bge.n	8003a92 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003aac:	2300      	movs	r3, #0
 8003aae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	019b      	lsls	r3, r3, #6
 8003ab4:	f043 0220 	orr.w	r2, r3, #32
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	3301      	adds	r3, #1
 8003ac0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	4a08      	ldr	r2, [pc, #32]	; (8003ae8 <USB_FlushTxFifo+0x64>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d901      	bls.n	8003ace <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e006      	b.n	8003adc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	f003 0320 	and.w	r3, r3, #32
 8003ad6:	2b20      	cmp	r3, #32
 8003ad8:	d0f0      	beq.n	8003abc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003ada:	2300      	movs	r3, #0
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3714      	adds	r7, #20
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr
 8003ae8:	00030d40 	.word	0x00030d40

08003aec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b085      	sub	sp, #20
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003af4:	2300      	movs	r3, #0
 8003af6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	3301      	adds	r3, #1
 8003afc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	4a11      	ldr	r2, [pc, #68]	; (8003b48 <USB_FlushRxFifo+0x5c>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d901      	bls.n	8003b0a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e018      	b.n	8003b3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	daf2      	bge.n	8003af8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003b12:	2300      	movs	r3, #0
 8003b14:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2210      	movs	r2, #16
 8003b1a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	3301      	adds	r3, #1
 8003b20:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	4a08      	ldr	r2, [pc, #32]	; (8003b48 <USB_FlushRxFifo+0x5c>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d901      	bls.n	8003b2e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e006      	b.n	8003b3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	f003 0310 	and.w	r3, r3, #16
 8003b36:	2b10      	cmp	r3, #16
 8003b38:	d0f0      	beq.n	8003b1c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003b3a:	2300      	movs	r3, #0
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3714      	adds	r7, #20
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr
 8003b48:	00030d40 	.word	0x00030d40

08003b4c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	460b      	mov	r3, r1
 8003b56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	78fb      	ldrb	r3, [r7, #3]
 8003b66:	68f9      	ldr	r1, [r7, #12]
 8003b68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003b70:	2300      	movs	r3, #0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3714      	adds	r7, #20
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr

08003b7e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003b7e:	b480      	push	{r7}
 8003b80:	b087      	sub	sp, #28
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f003 0306 	and.w	r3, r3, #6
 8003b96:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d102      	bne.n	8003ba4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	75fb      	strb	r3, [r7, #23]
 8003ba2:	e00a      	b.n	8003bba <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d002      	beq.n	8003bb0 <USB_GetDevSpeed+0x32>
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2b06      	cmp	r3, #6
 8003bae:	d102      	bne.n	8003bb6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003bb0:	2302      	movs	r3, #2
 8003bb2:	75fb      	strb	r3, [r7, #23]
 8003bb4:	e001      	b.n	8003bba <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003bb6:	230f      	movs	r3, #15
 8003bb8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003bba:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	371c      	adds	r7, #28
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b085      	sub	sp, #20
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	785b      	ldrb	r3, [r3, #1]
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d13a      	bne.n	8003c5a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bea:	69da      	ldr	r2, [r3, #28]
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	f003 030f 	and.w	r3, r3, #15
 8003bf4:	2101      	movs	r1, #1
 8003bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	68f9      	ldr	r1, [r7, #12]
 8003bfe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c02:	4313      	orrs	r3, r2
 8003c04:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	015a      	lsls	r2, r3, #5
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d155      	bne.n	8003cc8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	015a      	lsls	r2, r3, #5
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	4413      	add	r3, r2
 8003c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	791b      	ldrb	r3, [r3, #4]
 8003c36:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003c38:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	059b      	lsls	r3, r3, #22
 8003c3e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003c40:	4313      	orrs	r3, r2
 8003c42:	68ba      	ldr	r2, [r7, #8]
 8003c44:	0151      	lsls	r1, r2, #5
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	440a      	add	r2, r1
 8003c4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c56:	6013      	str	r3, [r2, #0]
 8003c58:	e036      	b.n	8003cc8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c60:	69da      	ldr	r2, [r3, #28]
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	f003 030f 	and.w	r3, r3, #15
 8003c6a:	2101      	movs	r1, #1
 8003c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c70:	041b      	lsls	r3, r3, #16
 8003c72:	68f9      	ldr	r1, [r7, #12]
 8003c74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	015a      	lsls	r2, r3, #5
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	4413      	add	r3, r2
 8003c84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d11a      	bne.n	8003cc8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	015a      	lsls	r2, r3, #5
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	4413      	add	r3, r2
 8003c9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	791b      	ldrb	r3, [r3, #4]
 8003cac:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003cae:	430b      	orrs	r3, r1
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	68ba      	ldr	r2, [r7, #8]
 8003cb4:	0151      	lsls	r1, r2, #5
 8003cb6:	68fa      	ldr	r2, [r7, #12]
 8003cb8:	440a      	add	r2, r1
 8003cba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cc6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3714      	adds	r7, #20
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
	...

08003cd8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	785b      	ldrb	r3, [r3, #1]
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d161      	bne.n	8003db8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	015a      	lsls	r2, r3, #5
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d0a:	d11f      	bne.n	8003d4c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	015a      	lsls	r2, r3, #5
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	4413      	add	r3, r2
 8003d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68ba      	ldr	r2, [r7, #8]
 8003d1c:	0151      	lsls	r1, r2, #5
 8003d1e:	68fa      	ldr	r2, [r7, #12]
 8003d20:	440a      	add	r2, r1
 8003d22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d26:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003d2a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	015a      	lsls	r2, r3, #5
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	4413      	add	r3, r2
 8003d34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	68ba      	ldr	r2, [r7, #8]
 8003d3c:	0151      	lsls	r1, r2, #5
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	440a      	add	r2, r1
 8003d42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d46:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d4a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	f003 030f 	and.w	r3, r3, #15
 8003d5c:	2101      	movs	r1, #1
 8003d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	43db      	mvns	r3, r3
 8003d66:	68f9      	ldr	r1, [r7, #12]
 8003d68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d76:	69da      	ldr	r2, [r3, #28]
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	f003 030f 	and.w	r3, r3, #15
 8003d80:	2101      	movs	r1, #1
 8003d82:	fa01 f303 	lsl.w	r3, r1, r3
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	43db      	mvns	r3, r3
 8003d8a:	68f9      	ldr	r1, [r7, #12]
 8003d8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d90:	4013      	ands	r3, r2
 8003d92:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	015a      	lsls	r2, r3, #5
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	0159      	lsls	r1, r3, #5
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	440b      	add	r3, r1
 8003daa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dae:	4619      	mov	r1, r3
 8003db0:	4b35      	ldr	r3, [pc, #212]	; (8003e88 <USB_DeactivateEndpoint+0x1b0>)
 8003db2:	4013      	ands	r3, r2
 8003db4:	600b      	str	r3, [r1, #0]
 8003db6:	e060      	b.n	8003e7a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	015a      	lsls	r2, r3, #5
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003dca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003dce:	d11f      	bne.n	8003e10 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	015a      	lsls	r2, r3, #5
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	4413      	add	r3, r2
 8003dd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	68ba      	ldr	r2, [r7, #8]
 8003de0:	0151      	lsls	r1, r2, #5
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	440a      	add	r2, r1
 8003de6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003dea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003dee:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	015a      	lsls	r2, r3, #5
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	4413      	add	r3, r2
 8003df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68ba      	ldr	r2, [r7, #8]
 8003e00:	0151      	lsls	r1, r2, #5
 8003e02:	68fa      	ldr	r2, [r7, #12]
 8003e04:	440a      	add	r2, r1
 8003e06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e0a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e0e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	f003 030f 	and.w	r3, r3, #15
 8003e20:	2101      	movs	r1, #1
 8003e22:	fa01 f303 	lsl.w	r3, r1, r3
 8003e26:	041b      	lsls	r3, r3, #16
 8003e28:	43db      	mvns	r3, r3
 8003e2a:	68f9      	ldr	r1, [r7, #12]
 8003e2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e30:	4013      	ands	r3, r2
 8003e32:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e3a:	69da      	ldr	r2, [r3, #28]
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	f003 030f 	and.w	r3, r3, #15
 8003e44:	2101      	movs	r1, #1
 8003e46:	fa01 f303 	lsl.w	r3, r1, r3
 8003e4a:	041b      	lsls	r3, r3, #16
 8003e4c:	43db      	mvns	r3, r3
 8003e4e:	68f9      	ldr	r1, [r7, #12]
 8003e50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e54:	4013      	ands	r3, r2
 8003e56:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	015a      	lsls	r2, r3, #5
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	4413      	add	r3, r2
 8003e60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	0159      	lsls	r1, r3, #5
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	440b      	add	r3, r1
 8003e6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e72:	4619      	mov	r1, r3
 8003e74:	4b05      	ldr	r3, [pc, #20]	; (8003e8c <USB_DeactivateEndpoint+0x1b4>)
 8003e76:	4013      	ands	r3, r2
 8003e78:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003e7a:	2300      	movs	r3, #0
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3714      	adds	r7, #20
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr
 8003e88:	ec337800 	.word	0xec337800
 8003e8c:	eff37800 	.word	0xeff37800

08003e90 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b08a      	sub	sp, #40	; 0x28
 8003e94:	af02      	add	r7, sp, #8
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	785b      	ldrb	r3, [r3, #1]
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	f040 815c 	bne.w	800416a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d132      	bne.n	8003f20 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	015a      	lsls	r2, r3, #5
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ec6:	691b      	ldr	r3, [r3, #16]
 8003ec8:	69ba      	ldr	r2, [r7, #24]
 8003eca:	0151      	lsls	r1, r2, #5
 8003ecc:	69fa      	ldr	r2, [r7, #28]
 8003ece:	440a      	add	r2, r1
 8003ed0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ed4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003ed8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003edc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	015a      	lsls	r2, r3, #5
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	4413      	add	r3, r2
 8003ee6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	69ba      	ldr	r2, [r7, #24]
 8003eee:	0151      	lsls	r1, r2, #5
 8003ef0:	69fa      	ldr	r2, [r7, #28]
 8003ef2:	440a      	add	r2, r1
 8003ef4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ef8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003efc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	015a      	lsls	r2, r3, #5
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	4413      	add	r3, r2
 8003f06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f0a:	691b      	ldr	r3, [r3, #16]
 8003f0c:	69ba      	ldr	r2, [r7, #24]
 8003f0e:	0151      	lsls	r1, r2, #5
 8003f10:	69fa      	ldr	r2, [r7, #28]
 8003f12:	440a      	add	r2, r1
 8003f14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f18:	0cdb      	lsrs	r3, r3, #19
 8003f1a:	04db      	lsls	r3, r3, #19
 8003f1c:	6113      	str	r3, [r2, #16]
 8003f1e:	e074      	b.n	800400a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	015a      	lsls	r2, r3, #5
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	4413      	add	r3, r2
 8003f28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	69ba      	ldr	r2, [r7, #24]
 8003f30:	0151      	lsls	r1, r2, #5
 8003f32:	69fa      	ldr	r2, [r7, #28]
 8003f34:	440a      	add	r2, r1
 8003f36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f3a:	0cdb      	lsrs	r3, r3, #19
 8003f3c:	04db      	lsls	r3, r3, #19
 8003f3e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	015a      	lsls	r2, r3, #5
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	4413      	add	r3, r2
 8003f48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f4c:	691b      	ldr	r3, [r3, #16]
 8003f4e:	69ba      	ldr	r2, [r7, #24]
 8003f50:	0151      	lsls	r1, r2, #5
 8003f52:	69fa      	ldr	r2, [r7, #28]
 8003f54:	440a      	add	r2, r1
 8003f56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f5a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003f5e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003f62:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	015a      	lsls	r2, r3, #5
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f70:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	6999      	ldr	r1, [r3, #24]
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	440b      	add	r3, r1
 8003f7c:	1e59      	subs	r1, r3, #1
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f86:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003f88:	4b9d      	ldr	r3, [pc, #628]	; (8004200 <USB_EPStartXfer+0x370>)
 8003f8a:	400b      	ands	r3, r1
 8003f8c:	69b9      	ldr	r1, [r7, #24]
 8003f8e:	0148      	lsls	r0, r1, #5
 8003f90:	69f9      	ldr	r1, [r7, #28]
 8003f92:	4401      	add	r1, r0
 8003f94:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	015a      	lsls	r2, r3, #5
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	4413      	add	r3, r2
 8003fa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fa8:	691a      	ldr	r2, [r3, #16]
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	699b      	ldr	r3, [r3, #24]
 8003fae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fb2:	69b9      	ldr	r1, [r7, #24]
 8003fb4:	0148      	lsls	r0, r1, #5
 8003fb6:	69f9      	ldr	r1, [r7, #28]
 8003fb8:	4401      	add	r1, r0
 8003fba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	791b      	ldrb	r3, [r3, #4]
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d11f      	bne.n	800400a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	015a      	lsls	r2, r3, #5
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	4413      	add	r3, r2
 8003fd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	69ba      	ldr	r2, [r7, #24]
 8003fda:	0151      	lsls	r1, r2, #5
 8003fdc:	69fa      	ldr	r2, [r7, #28]
 8003fde:	440a      	add	r2, r1
 8003fe0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fe4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003fe8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	015a      	lsls	r2, r3, #5
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	4413      	add	r3, r2
 8003ff2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ff6:	691b      	ldr	r3, [r3, #16]
 8003ff8:	69ba      	ldr	r2, [r7, #24]
 8003ffa:	0151      	lsls	r1, r2, #5
 8003ffc:	69fa      	ldr	r2, [r7, #28]
 8003ffe:	440a      	add	r2, r1
 8004000:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004004:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004008:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800400a:	79fb      	ldrb	r3, [r7, #7]
 800400c:	2b01      	cmp	r3, #1
 800400e:	d14b      	bne.n	80040a8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	695b      	ldr	r3, [r3, #20]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d009      	beq.n	800402c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	015a      	lsls	r2, r3, #5
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	4413      	add	r3, r2
 8004020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004024:	461a      	mov	r2, r3
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	695b      	ldr	r3, [r3, #20]
 800402a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	791b      	ldrb	r3, [r3, #4]
 8004030:	2b01      	cmp	r3, #1
 8004032:	d128      	bne.n	8004086 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004040:	2b00      	cmp	r3, #0
 8004042:	d110      	bne.n	8004066 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	015a      	lsls	r2, r3, #5
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	4413      	add	r3, r2
 800404c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	69ba      	ldr	r2, [r7, #24]
 8004054:	0151      	lsls	r1, r2, #5
 8004056:	69fa      	ldr	r2, [r7, #28]
 8004058:	440a      	add	r2, r1
 800405a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800405e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004062:	6013      	str	r3, [r2, #0]
 8004064:	e00f      	b.n	8004086 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004066:	69bb      	ldr	r3, [r7, #24]
 8004068:	015a      	lsls	r2, r3, #5
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	4413      	add	r3, r2
 800406e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	69ba      	ldr	r2, [r7, #24]
 8004076:	0151      	lsls	r1, r2, #5
 8004078:	69fa      	ldr	r2, [r7, #28]
 800407a:	440a      	add	r2, r1
 800407c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004080:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004084:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	015a      	lsls	r2, r3, #5
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	4413      	add	r3, r2
 800408e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	69ba      	ldr	r2, [r7, #24]
 8004096:	0151      	lsls	r1, r2, #5
 8004098:	69fa      	ldr	r2, [r7, #28]
 800409a:	440a      	add	r2, r1
 800409c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040a0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80040a4:	6013      	str	r3, [r2, #0]
 80040a6:	e133      	b.n	8004310 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	015a      	lsls	r2, r3, #5
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	4413      	add	r3, r2
 80040b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	69ba      	ldr	r2, [r7, #24]
 80040b8:	0151      	lsls	r1, r2, #5
 80040ba:	69fa      	ldr	r2, [r7, #28]
 80040bc:	440a      	add	r2, r1
 80040be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80040c6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	791b      	ldrb	r3, [r3, #4]
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d015      	beq.n	80040fc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	699b      	ldr	r3, [r3, #24]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	f000 811b 	beq.w	8004310 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	f003 030f 	and.w	r3, r3, #15
 80040ea:	2101      	movs	r1, #1
 80040ec:	fa01 f303 	lsl.w	r3, r1, r3
 80040f0:	69f9      	ldr	r1, [r7, #28]
 80040f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80040f6:	4313      	orrs	r3, r2
 80040f8:	634b      	str	r3, [r1, #52]	; 0x34
 80040fa:	e109      	b.n	8004310 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004108:	2b00      	cmp	r3, #0
 800410a:	d110      	bne.n	800412e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	015a      	lsls	r2, r3, #5
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	4413      	add	r3, r2
 8004114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	69ba      	ldr	r2, [r7, #24]
 800411c:	0151      	lsls	r1, r2, #5
 800411e:	69fa      	ldr	r2, [r7, #28]
 8004120:	440a      	add	r2, r1
 8004122:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004126:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800412a:	6013      	str	r3, [r2, #0]
 800412c:	e00f      	b.n	800414e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	015a      	lsls	r2, r3, #5
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	4413      	add	r3, r2
 8004136:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	69ba      	ldr	r2, [r7, #24]
 800413e:	0151      	lsls	r1, r2, #5
 8004140:	69fa      	ldr	r2, [r7, #28]
 8004142:	440a      	add	r2, r1
 8004144:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004148:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800414c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	6919      	ldr	r1, [r3, #16]
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	781a      	ldrb	r2, [r3, #0]
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	699b      	ldr	r3, [r3, #24]
 800415a:	b298      	uxth	r0, r3
 800415c:	79fb      	ldrb	r3, [r7, #7]
 800415e:	9300      	str	r3, [sp, #0]
 8004160:	4603      	mov	r3, r0
 8004162:	68f8      	ldr	r0, [r7, #12]
 8004164:	f000 fade 	bl	8004724 <USB_WritePacket>
 8004168:	e0d2      	b.n	8004310 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800416a:	69bb      	ldr	r3, [r7, #24]
 800416c:	015a      	lsls	r2, r3, #5
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	4413      	add	r3, r2
 8004172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	69ba      	ldr	r2, [r7, #24]
 800417a:	0151      	lsls	r1, r2, #5
 800417c:	69fa      	ldr	r2, [r7, #28]
 800417e:	440a      	add	r2, r1
 8004180:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004184:	0cdb      	lsrs	r3, r3, #19
 8004186:	04db      	lsls	r3, r3, #19
 8004188:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	015a      	lsls	r2, r3, #5
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	4413      	add	r3, r2
 8004192:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	69ba      	ldr	r2, [r7, #24]
 800419a:	0151      	lsls	r1, r2, #5
 800419c:	69fa      	ldr	r2, [r7, #28]
 800419e:	440a      	add	r2, r1
 80041a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80041a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80041ac:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	699b      	ldr	r3, [r3, #24]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d126      	bne.n	8004204 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	015a      	lsls	r2, r3, #5
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	4413      	add	r3, r2
 80041be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041c2:	691a      	ldr	r2, [r3, #16]
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041cc:	69b9      	ldr	r1, [r7, #24]
 80041ce:	0148      	lsls	r0, r1, #5
 80041d0:	69f9      	ldr	r1, [r7, #28]
 80041d2:	4401      	add	r1, r0
 80041d4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80041d8:	4313      	orrs	r3, r2
 80041da:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	015a      	lsls	r2, r3, #5
 80041e0:	69fb      	ldr	r3, [r7, #28]
 80041e2:	4413      	add	r3, r2
 80041e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	69ba      	ldr	r2, [r7, #24]
 80041ec:	0151      	lsls	r1, r2, #5
 80041ee:	69fa      	ldr	r2, [r7, #28]
 80041f0:	440a      	add	r2, r1
 80041f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80041fa:	6113      	str	r3, [r2, #16]
 80041fc:	e03a      	b.n	8004274 <USB_EPStartXfer+0x3e4>
 80041fe:	bf00      	nop
 8004200:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	699a      	ldr	r2, [r3, #24]
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	4413      	add	r3, r2
 800420e:	1e5a      	subs	r2, r3, #1
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	fbb2 f3f3 	udiv	r3, r2, r3
 8004218:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	8afa      	ldrh	r2, [r7, #22]
 8004220:	fb03 f202 	mul.w	r2, r3, r2
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	015a      	lsls	r2, r3, #5
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	4413      	add	r3, r2
 8004230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004234:	691a      	ldr	r2, [r3, #16]
 8004236:	8afb      	ldrh	r3, [r7, #22]
 8004238:	04d9      	lsls	r1, r3, #19
 800423a:	4b38      	ldr	r3, [pc, #224]	; (800431c <USB_EPStartXfer+0x48c>)
 800423c:	400b      	ands	r3, r1
 800423e:	69b9      	ldr	r1, [r7, #24]
 8004240:	0148      	lsls	r0, r1, #5
 8004242:	69f9      	ldr	r1, [r7, #28]
 8004244:	4401      	add	r1, r0
 8004246:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800424a:	4313      	orrs	r3, r2
 800424c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	015a      	lsls	r2, r3, #5
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	4413      	add	r3, r2
 8004256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800425a:	691a      	ldr	r2, [r3, #16]
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	69db      	ldr	r3, [r3, #28]
 8004260:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004264:	69b9      	ldr	r1, [r7, #24]
 8004266:	0148      	lsls	r0, r1, #5
 8004268:	69f9      	ldr	r1, [r7, #28]
 800426a:	4401      	add	r1, r0
 800426c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004270:	4313      	orrs	r3, r2
 8004272:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004274:	79fb      	ldrb	r3, [r7, #7]
 8004276:	2b01      	cmp	r3, #1
 8004278:	d10d      	bne.n	8004296 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d009      	beq.n	8004296 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	6919      	ldr	r1, [r3, #16]
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	015a      	lsls	r2, r3, #5
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	4413      	add	r3, r2
 800428e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004292:	460a      	mov	r2, r1
 8004294:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	791b      	ldrb	r3, [r3, #4]
 800429a:	2b01      	cmp	r3, #1
 800429c:	d128      	bne.n	80042f0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d110      	bne.n	80042d0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	015a      	lsls	r2, r3, #5
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	4413      	add	r3, r2
 80042b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	69ba      	ldr	r2, [r7, #24]
 80042be:	0151      	lsls	r1, r2, #5
 80042c0:	69fa      	ldr	r2, [r7, #28]
 80042c2:	440a      	add	r2, r1
 80042c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80042cc:	6013      	str	r3, [r2, #0]
 80042ce:	e00f      	b.n	80042f0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	015a      	lsls	r2, r3, #5
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	4413      	add	r3, r2
 80042d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	69ba      	ldr	r2, [r7, #24]
 80042e0:	0151      	lsls	r1, r2, #5
 80042e2:	69fa      	ldr	r2, [r7, #28]
 80042e4:	440a      	add	r2, r1
 80042e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042ee:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	015a      	lsls	r2, r3, #5
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	4413      	add	r3, r2
 80042f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	69ba      	ldr	r2, [r7, #24]
 8004300:	0151      	lsls	r1, r2, #5
 8004302:	69fa      	ldr	r2, [r7, #28]
 8004304:	440a      	add	r2, r1
 8004306:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800430a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800430e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3720      	adds	r7, #32
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	1ff80000 	.word	0x1ff80000

08004320 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004320:	b480      	push	{r7}
 8004322:	b087      	sub	sp, #28
 8004324:	af00      	add	r7, sp, #0
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	4613      	mov	r3, r2
 800432c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	785b      	ldrb	r3, [r3, #1]
 800433c:	2b01      	cmp	r3, #1
 800433e:	f040 80ce 	bne.w	80044de <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	699b      	ldr	r3, [r3, #24]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d132      	bne.n	80043b0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	015a      	lsls	r2, r3, #5
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	4413      	add	r3, r2
 8004352:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004356:	691b      	ldr	r3, [r3, #16]
 8004358:	693a      	ldr	r2, [r7, #16]
 800435a:	0151      	lsls	r1, r2, #5
 800435c:	697a      	ldr	r2, [r7, #20]
 800435e:	440a      	add	r2, r1
 8004360:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004364:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004368:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800436c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	015a      	lsls	r2, r3, #5
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	4413      	add	r3, r2
 8004376:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800437a:	691b      	ldr	r3, [r3, #16]
 800437c:	693a      	ldr	r2, [r7, #16]
 800437e:	0151      	lsls	r1, r2, #5
 8004380:	697a      	ldr	r2, [r7, #20]
 8004382:	440a      	add	r2, r1
 8004384:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004388:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800438c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	015a      	lsls	r2, r3, #5
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	4413      	add	r3, r2
 8004396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	693a      	ldr	r2, [r7, #16]
 800439e:	0151      	lsls	r1, r2, #5
 80043a0:	697a      	ldr	r2, [r7, #20]
 80043a2:	440a      	add	r2, r1
 80043a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043a8:	0cdb      	lsrs	r3, r3, #19
 80043aa:	04db      	lsls	r3, r3, #19
 80043ac:	6113      	str	r3, [r2, #16]
 80043ae:	e04e      	b.n	800444e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	015a      	lsls	r2, r3, #5
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	4413      	add	r3, r2
 80043b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	693a      	ldr	r2, [r7, #16]
 80043c0:	0151      	lsls	r1, r2, #5
 80043c2:	697a      	ldr	r2, [r7, #20]
 80043c4:	440a      	add	r2, r1
 80043c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043ca:	0cdb      	lsrs	r3, r3, #19
 80043cc:	04db      	lsls	r3, r3, #19
 80043ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	015a      	lsls	r2, r3, #5
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	4413      	add	r3, r2
 80043d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	693a      	ldr	r2, [r7, #16]
 80043e0:	0151      	lsls	r1, r2, #5
 80043e2:	697a      	ldr	r2, [r7, #20]
 80043e4:	440a      	add	r2, r1
 80043e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043ea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80043ee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80043f2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	699a      	ldr	r2, [r3, #24]
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d903      	bls.n	8004408 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	68da      	ldr	r2, [r3, #12]
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	015a      	lsls	r2, r3, #5
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	4413      	add	r3, r2
 8004410:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	693a      	ldr	r2, [r7, #16]
 8004418:	0151      	lsls	r1, r2, #5
 800441a:	697a      	ldr	r2, [r7, #20]
 800441c:	440a      	add	r2, r1
 800441e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004422:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004426:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	015a      	lsls	r2, r3, #5
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	4413      	add	r3, r2
 8004430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004434:	691a      	ldr	r2, [r3, #16]
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	699b      	ldr	r3, [r3, #24]
 800443a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800443e:	6939      	ldr	r1, [r7, #16]
 8004440:	0148      	lsls	r0, r1, #5
 8004442:	6979      	ldr	r1, [r7, #20]
 8004444:	4401      	add	r1, r0
 8004446:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800444a:	4313      	orrs	r3, r2
 800444c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800444e:	79fb      	ldrb	r3, [r7, #7]
 8004450:	2b01      	cmp	r3, #1
 8004452:	d11e      	bne.n	8004492 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	695b      	ldr	r3, [r3, #20]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d009      	beq.n	8004470 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	015a      	lsls	r2, r3, #5
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	4413      	add	r3, r2
 8004464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004468:	461a      	mov	r2, r3
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	695b      	ldr	r3, [r3, #20]
 800446e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	015a      	lsls	r2, r3, #5
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	4413      	add	r3, r2
 8004478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	693a      	ldr	r2, [r7, #16]
 8004480:	0151      	lsls	r1, r2, #5
 8004482:	697a      	ldr	r2, [r7, #20]
 8004484:	440a      	add	r2, r1
 8004486:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800448a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800448e:	6013      	str	r3, [r2, #0]
 8004490:	e097      	b.n	80045c2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	015a      	lsls	r2, r3, #5
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	4413      	add	r3, r2
 800449a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	693a      	ldr	r2, [r7, #16]
 80044a2:	0151      	lsls	r1, r2, #5
 80044a4:	697a      	ldr	r2, [r7, #20]
 80044a6:	440a      	add	r2, r1
 80044a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80044b0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	699b      	ldr	r3, [r3, #24]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	f000 8083 	beq.w	80045c2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	f003 030f 	and.w	r3, r3, #15
 80044cc:	2101      	movs	r1, #1
 80044ce:	fa01 f303 	lsl.w	r3, r1, r3
 80044d2:	6979      	ldr	r1, [r7, #20]
 80044d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044d8:	4313      	orrs	r3, r2
 80044da:	634b      	str	r3, [r1, #52]	; 0x34
 80044dc:	e071      	b.n	80045c2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	015a      	lsls	r2, r3, #5
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	4413      	add	r3, r2
 80044e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ea:	691b      	ldr	r3, [r3, #16]
 80044ec:	693a      	ldr	r2, [r7, #16]
 80044ee:	0151      	lsls	r1, r2, #5
 80044f0:	697a      	ldr	r2, [r7, #20]
 80044f2:	440a      	add	r2, r1
 80044f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044f8:	0cdb      	lsrs	r3, r3, #19
 80044fa:	04db      	lsls	r3, r3, #19
 80044fc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	015a      	lsls	r2, r3, #5
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	4413      	add	r3, r2
 8004506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	693a      	ldr	r2, [r7, #16]
 800450e:	0151      	lsls	r1, r2, #5
 8004510:	697a      	ldr	r2, [r7, #20]
 8004512:	440a      	add	r2, r1
 8004514:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004518:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800451c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004520:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	699b      	ldr	r3, [r3, #24]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d003      	beq.n	8004532 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	68da      	ldr	r2, [r3, #12]
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	68da      	ldr	r2, [r3, #12]
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	015a      	lsls	r2, r3, #5
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	4413      	add	r3, r2
 8004542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004546:	691b      	ldr	r3, [r3, #16]
 8004548:	693a      	ldr	r2, [r7, #16]
 800454a:	0151      	lsls	r1, r2, #5
 800454c:	697a      	ldr	r2, [r7, #20]
 800454e:	440a      	add	r2, r1
 8004550:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004554:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004558:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	015a      	lsls	r2, r3, #5
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	4413      	add	r3, r2
 8004562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004566:	691a      	ldr	r2, [r3, #16]
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	69db      	ldr	r3, [r3, #28]
 800456c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004570:	6939      	ldr	r1, [r7, #16]
 8004572:	0148      	lsls	r0, r1, #5
 8004574:	6979      	ldr	r1, [r7, #20]
 8004576:	4401      	add	r1, r0
 8004578:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800457c:	4313      	orrs	r3, r2
 800457e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004580:	79fb      	ldrb	r3, [r7, #7]
 8004582:	2b01      	cmp	r3, #1
 8004584:	d10d      	bne.n	80045a2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d009      	beq.n	80045a2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	6919      	ldr	r1, [r3, #16]
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	015a      	lsls	r2, r3, #5
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	4413      	add	r3, r2
 800459a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800459e:	460a      	mov	r2, r1
 80045a0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	015a      	lsls	r2, r3, #5
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	4413      	add	r3, r2
 80045aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	693a      	ldr	r2, [r7, #16]
 80045b2:	0151      	lsls	r1, r2, #5
 80045b4:	697a      	ldr	r2, [r7, #20]
 80045b6:	440a      	add	r2, r1
 80045b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045bc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80045c0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	371c      	adds	r7, #28
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b087      	sub	sp, #28
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80045da:	2300      	movs	r3, #0
 80045dc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80045de:	2300      	movs	r3, #0
 80045e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	785b      	ldrb	r3, [r3, #1]
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d14a      	bne.n	8004684 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	015a      	lsls	r2, r3, #5
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	4413      	add	r3, r2
 80045f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004602:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004606:	f040 8086 	bne.w	8004716 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	015a      	lsls	r2, r3, #5
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	4413      	add	r3, r2
 8004614:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	683a      	ldr	r2, [r7, #0]
 800461c:	7812      	ldrb	r2, [r2, #0]
 800461e:	0151      	lsls	r1, r2, #5
 8004620:	693a      	ldr	r2, [r7, #16]
 8004622:	440a      	add	r2, r1
 8004624:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004628:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800462c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	015a      	lsls	r2, r3, #5
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	4413      	add	r3, r2
 8004638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	683a      	ldr	r2, [r7, #0]
 8004640:	7812      	ldrb	r2, [r2, #0]
 8004642:	0151      	lsls	r1, r2, #5
 8004644:	693a      	ldr	r2, [r7, #16]
 8004646:	440a      	add	r2, r1
 8004648:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800464c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004650:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	3301      	adds	r3, #1
 8004656:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f242 7210 	movw	r2, #10000	; 0x2710
 800465e:	4293      	cmp	r3, r2
 8004660:	d902      	bls.n	8004668 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	75fb      	strb	r3, [r7, #23]
          break;
 8004666:	e056      	b.n	8004716 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	015a      	lsls	r2, r3, #5
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	4413      	add	r3, r2
 8004672:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800467c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004680:	d0e7      	beq.n	8004652 <USB_EPStopXfer+0x82>
 8004682:	e048      	b.n	8004716 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	015a      	lsls	r2, r3, #5
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	4413      	add	r3, r2
 800468e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004698:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800469c:	d13b      	bne.n	8004716 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	015a      	lsls	r2, r3, #5
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	4413      	add	r3, r2
 80046a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	683a      	ldr	r2, [r7, #0]
 80046b0:	7812      	ldrb	r2, [r2, #0]
 80046b2:	0151      	lsls	r1, r2, #5
 80046b4:	693a      	ldr	r2, [r7, #16]
 80046b6:	440a      	add	r2, r1
 80046b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046bc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80046c0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	015a      	lsls	r2, r3, #5
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	4413      	add	r3, r2
 80046cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	683a      	ldr	r2, [r7, #0]
 80046d4:	7812      	ldrb	r2, [r2, #0]
 80046d6:	0151      	lsls	r1, r2, #5
 80046d8:	693a      	ldr	r2, [r7, #16]
 80046da:	440a      	add	r2, r1
 80046dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80046e4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	3301      	adds	r3, #1
 80046ea:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f242 7210 	movw	r2, #10000	; 0x2710
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d902      	bls.n	80046fc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	75fb      	strb	r3, [r7, #23]
          break;
 80046fa:	e00c      	b.n	8004716 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	015a      	lsls	r2, r3, #5
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	4413      	add	r3, r2
 8004706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004710:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004714:	d0e7      	beq.n	80046e6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004716:	7dfb      	ldrb	r3, [r7, #23]
}
 8004718:	4618      	mov	r0, r3
 800471a:	371c      	adds	r7, #28
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004724:	b480      	push	{r7}
 8004726:	b089      	sub	sp, #36	; 0x24
 8004728:	af00      	add	r7, sp, #0
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	4611      	mov	r1, r2
 8004730:	461a      	mov	r2, r3
 8004732:	460b      	mov	r3, r1
 8004734:	71fb      	strb	r3, [r7, #7]
 8004736:	4613      	mov	r3, r2
 8004738:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004742:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004746:	2b00      	cmp	r3, #0
 8004748:	d123      	bne.n	8004792 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800474a:	88bb      	ldrh	r3, [r7, #4]
 800474c:	3303      	adds	r3, #3
 800474e:	089b      	lsrs	r3, r3, #2
 8004750:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004752:	2300      	movs	r3, #0
 8004754:	61bb      	str	r3, [r7, #24]
 8004756:	e018      	b.n	800478a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004758:	79fb      	ldrb	r3, [r7, #7]
 800475a:	031a      	lsls	r2, r3, #12
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	4413      	add	r3, r2
 8004760:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004764:	461a      	mov	r2, r3
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	3301      	adds	r3, #1
 8004770:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004772:	69fb      	ldr	r3, [r7, #28]
 8004774:	3301      	adds	r3, #1
 8004776:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	3301      	adds	r3, #1
 800477c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	3301      	adds	r3, #1
 8004782:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	3301      	adds	r3, #1
 8004788:	61bb      	str	r3, [r7, #24]
 800478a:	69ba      	ldr	r2, [r7, #24]
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	429a      	cmp	r2, r3
 8004790:	d3e2      	bcc.n	8004758 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	3724      	adds	r7, #36	; 0x24
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b08b      	sub	sp, #44	; 0x2c
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	4613      	mov	r3, r2
 80047ac:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80047b6:	88fb      	ldrh	r3, [r7, #6]
 80047b8:	089b      	lsrs	r3, r3, #2
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80047be:	88fb      	ldrh	r3, [r7, #6]
 80047c0:	f003 0303 	and.w	r3, r3, #3
 80047c4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80047c6:	2300      	movs	r3, #0
 80047c8:	623b      	str	r3, [r7, #32]
 80047ca:	e014      	b.n	80047f6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d6:	601a      	str	r2, [r3, #0]
    pDest++;
 80047d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047da:	3301      	adds	r3, #1
 80047dc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80047de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e0:	3301      	adds	r3, #1
 80047e2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80047e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e6:	3301      	adds	r3, #1
 80047e8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80047ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ec:	3301      	adds	r3, #1
 80047ee:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80047f0:	6a3b      	ldr	r3, [r7, #32]
 80047f2:	3301      	adds	r3, #1
 80047f4:	623b      	str	r3, [r7, #32]
 80047f6:	6a3a      	ldr	r2, [r7, #32]
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d3e6      	bcc.n	80047cc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80047fe:	8bfb      	ldrh	r3, [r7, #30]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d01e      	beq.n	8004842 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004804:	2300      	movs	r3, #0
 8004806:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004808:	69bb      	ldr	r3, [r7, #24]
 800480a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800480e:	461a      	mov	r2, r3
 8004810:	f107 0310 	add.w	r3, r7, #16
 8004814:	6812      	ldr	r2, [r2, #0]
 8004816:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004818:	693a      	ldr	r2, [r7, #16]
 800481a:	6a3b      	ldr	r3, [r7, #32]
 800481c:	b2db      	uxtb	r3, r3
 800481e:	00db      	lsls	r3, r3, #3
 8004820:	fa22 f303 	lsr.w	r3, r2, r3
 8004824:	b2da      	uxtb	r2, r3
 8004826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004828:	701a      	strb	r2, [r3, #0]
      i++;
 800482a:	6a3b      	ldr	r3, [r7, #32]
 800482c:	3301      	adds	r3, #1
 800482e:	623b      	str	r3, [r7, #32]
      pDest++;
 8004830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004832:	3301      	adds	r3, #1
 8004834:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004836:	8bfb      	ldrh	r3, [r7, #30]
 8004838:	3b01      	subs	r3, #1
 800483a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800483c:	8bfb      	ldrh	r3, [r7, #30]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d1ea      	bne.n	8004818 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004844:	4618      	mov	r0, r3
 8004846:	372c      	adds	r7, #44	; 0x2c
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004850:	b480      	push	{r7}
 8004852:	b085      	sub	sp, #20
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	785b      	ldrb	r3, [r3, #1]
 8004868:	2b01      	cmp	r3, #1
 800486a:	d12c      	bne.n	80048c6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	015a      	lsls	r2, r3, #5
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	4413      	add	r3, r2
 8004874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2b00      	cmp	r3, #0
 800487c:	db12      	blt.n	80048a4 <USB_EPSetStall+0x54>
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d00f      	beq.n	80048a4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	015a      	lsls	r2, r3, #5
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	4413      	add	r3, r2
 800488c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68ba      	ldr	r2, [r7, #8]
 8004894:	0151      	lsls	r1, r2, #5
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	440a      	add	r2, r1
 800489a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800489e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80048a2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	015a      	lsls	r2, r3, #5
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	4413      	add	r3, r2
 80048ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	68ba      	ldr	r2, [r7, #8]
 80048b4:	0151      	lsls	r1, r2, #5
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	440a      	add	r2, r1
 80048ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80048c2:	6013      	str	r3, [r2, #0]
 80048c4:	e02b      	b.n	800491e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	015a      	lsls	r2, r3, #5
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	4413      	add	r3, r2
 80048ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	db12      	blt.n	80048fe <USB_EPSetStall+0xae>
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d00f      	beq.n	80048fe <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	015a      	lsls	r2, r3, #5
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	4413      	add	r3, r2
 80048e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	68ba      	ldr	r2, [r7, #8]
 80048ee:	0151      	lsls	r1, r2, #5
 80048f0:	68fa      	ldr	r2, [r7, #12]
 80048f2:	440a      	add	r2, r1
 80048f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048f8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80048fc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	015a      	lsls	r2, r3, #5
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	4413      	add	r3, r2
 8004906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	68ba      	ldr	r2, [r7, #8]
 800490e:	0151      	lsls	r1, r2, #5
 8004910:	68fa      	ldr	r2, [r7, #12]
 8004912:	440a      	add	r2, r1
 8004914:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004918:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800491c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800491e:	2300      	movs	r3, #0
}
 8004920:	4618      	mov	r0, r3
 8004922:	3714      	adds	r7, #20
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800492c:	b480      	push	{r7}
 800492e:	b085      	sub	sp, #20
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	785b      	ldrb	r3, [r3, #1]
 8004944:	2b01      	cmp	r3, #1
 8004946:	d128      	bne.n	800499a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	015a      	lsls	r2, r3, #5
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	4413      	add	r3, r2
 8004950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68ba      	ldr	r2, [r7, #8]
 8004958:	0151      	lsls	r1, r2, #5
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	440a      	add	r2, r1
 800495e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004962:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004966:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	791b      	ldrb	r3, [r3, #4]
 800496c:	2b03      	cmp	r3, #3
 800496e:	d003      	beq.n	8004978 <USB_EPClearStall+0x4c>
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	791b      	ldrb	r3, [r3, #4]
 8004974:	2b02      	cmp	r3, #2
 8004976:	d138      	bne.n	80049ea <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	015a      	lsls	r2, r3, #5
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	4413      	add	r3, r2
 8004980:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	68ba      	ldr	r2, [r7, #8]
 8004988:	0151      	lsls	r1, r2, #5
 800498a:	68fa      	ldr	r2, [r7, #12]
 800498c:	440a      	add	r2, r1
 800498e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004992:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004996:	6013      	str	r3, [r2, #0]
 8004998:	e027      	b.n	80049ea <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	015a      	lsls	r2, r3, #5
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	4413      	add	r3, r2
 80049a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	68ba      	ldr	r2, [r7, #8]
 80049aa:	0151      	lsls	r1, r2, #5
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	440a      	add	r2, r1
 80049b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049b4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80049b8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	791b      	ldrb	r3, [r3, #4]
 80049be:	2b03      	cmp	r3, #3
 80049c0:	d003      	beq.n	80049ca <USB_EPClearStall+0x9e>
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	791b      	ldrb	r3, [r3, #4]
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d10f      	bne.n	80049ea <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	015a      	lsls	r2, r3, #5
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	4413      	add	r3, r2
 80049d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	68ba      	ldr	r2, [r7, #8]
 80049da:	0151      	lsls	r1, r2, #5
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	440a      	add	r2, r1
 80049e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049e8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80049ea:	2300      	movs	r3, #0
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3714      	adds	r7, #20
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b085      	sub	sp, #20
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	460b      	mov	r3, r1
 8004a02:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a16:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004a1a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	78fb      	ldrb	r3, [r7, #3]
 8004a26:	011b      	lsls	r3, r3, #4
 8004a28:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004a2c:	68f9      	ldr	r1, [r7, #12]
 8004a2e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a32:	4313      	orrs	r3, r2
 8004a34:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004a36:	2300      	movs	r3, #0
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3714      	adds	r7, #20
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b085      	sub	sp, #20
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004a5e:	f023 0303 	bic.w	r3, r3, #3
 8004a62:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	68fa      	ldr	r2, [r7, #12]
 8004a6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a72:	f023 0302 	bic.w	r3, r3, #2
 8004a76:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3714      	adds	r7, #20
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr

08004a86 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004a86:	b480      	push	{r7}
 8004a88:	b085      	sub	sp, #20
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004aa0:	f023 0303 	bic.w	r3, r3, #3
 8004aa4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	68fa      	ldr	r2, [r7, #12]
 8004ab0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ab4:	f043 0302 	orr.w	r3, r3, #2
 8004ab8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3714      	adds	r7, #20
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b085      	sub	sp, #20
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	695b      	ldr	r3, [r3, #20]
 8004ad4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	68fa      	ldr	r2, [r7, #12]
 8004adc:	4013      	ands	r3, r2
 8004ade:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3714      	adds	r7, #20
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr

08004aee <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004aee:	b480      	push	{r7}
 8004af0:	b085      	sub	sp, #20
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b00:	699b      	ldr	r3, [r3, #24]
 8004b02:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b0a:	69db      	ldr	r3, [r3, #28]
 8004b0c:	68ba      	ldr	r2, [r7, #8]
 8004b0e:	4013      	ands	r3, r2
 8004b10:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	0c1b      	lsrs	r3, r3, #16
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3714      	adds	r7, #20
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr

08004b22 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b22:	b480      	push	{r7}
 8004b24:	b085      	sub	sp, #20
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b34:	699b      	ldr	r3, [r3, #24]
 8004b36:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b3e:	69db      	ldr	r3, [r3, #28]
 8004b40:	68ba      	ldr	r2, [r7, #8]
 8004b42:	4013      	ands	r3, r2
 8004b44:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	b29b      	uxth	r3, r3
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3714      	adds	r7, #20
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr

08004b56 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004b56:	b480      	push	{r7}
 8004b58:	b085      	sub	sp, #20
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
 8004b5e:	460b      	mov	r3, r1
 8004b60:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004b66:	78fb      	ldrb	r3, [r7, #3]
 8004b68:	015a      	lsls	r2, r3, #5
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	4413      	add	r3, r2
 8004b6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b7c:	695b      	ldr	r3, [r3, #20]
 8004b7e:	68ba      	ldr	r2, [r7, #8]
 8004b80:	4013      	ands	r3, r2
 8004b82:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004b84:	68bb      	ldr	r3, [r7, #8]
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3714      	adds	r7, #20
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr

08004b92 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004b92:	b480      	push	{r7}
 8004b94:	b087      	sub	sp, #28
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	6078      	str	r0, [r7, #4]
 8004b9a:	460b      	mov	r3, r1
 8004b9c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bb4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004bb6:	78fb      	ldrb	r3, [r7, #3]
 8004bb8:	f003 030f 	and.w	r3, r3, #15
 8004bbc:	68fa      	ldr	r2, [r7, #12]
 8004bbe:	fa22 f303 	lsr.w	r3, r2, r3
 8004bc2:	01db      	lsls	r3, r3, #7
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	693a      	ldr	r2, [r7, #16]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004bcc:	78fb      	ldrb	r3, [r7, #3]
 8004bce:	015a      	lsls	r2, r3, #5
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	4413      	add	r3, r2
 8004bd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	693a      	ldr	r2, [r7, #16]
 8004bdc:	4013      	ands	r3, r2
 8004bde:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004be0:	68bb      	ldr	r3, [r7, #8]
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	371c      	adds	r7, #28
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr

08004bee <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004bee:	b480      	push	{r7}
 8004bf0:	b083      	sub	sp, #12
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	695b      	ldr	r3, [r3, #20]
 8004bfa:	f003 0301 	and.w	r3, r3, #1
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	370c      	adds	r7, #12
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr

08004c0a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004c0a:	b480      	push	{r7}
 8004c0c:	b085      	sub	sp, #20
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	68fa      	ldr	r2, [r7, #12]
 8004c20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c24:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004c28:	f023 0307 	bic.w	r3, r3, #7
 8004c2c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	68fa      	ldr	r2, [r7, #12]
 8004c38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c40:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004c42:	2300      	movs	r3, #0
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3714      	adds	r7, #20
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b087      	sub	sp, #28
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	460b      	mov	r3, r1
 8004c5a:	607a      	str	r2, [r7, #4]
 8004c5c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	333c      	adds	r3, #60	; 0x3c
 8004c66:	3304      	adds	r3, #4
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	4a26      	ldr	r2, [pc, #152]	; (8004d08 <USB_EP0_OutStart+0xb8>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d90a      	bls.n	8004c8a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c84:	d101      	bne.n	8004c8a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004c86:	2300      	movs	r3, #0
 8004c88:	e037      	b.n	8004cfa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c90:	461a      	mov	r2, r3
 8004c92:	2300      	movs	r3, #0
 8004c94:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	697a      	ldr	r2, [r7, #20]
 8004ca0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ca4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ca8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	697a      	ldr	r2, [r7, #20]
 8004cb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cb8:	f043 0318 	orr.w	r3, r3, #24
 8004cbc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	697a      	ldr	r2, [r7, #20]
 8004cc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ccc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004cd0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004cd2:	7afb      	ldrb	r3, [r7, #11]
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d10f      	bne.n	8004cf8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cde:	461a      	mov	r2, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	697a      	ldr	r2, [r7, #20]
 8004cee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cf2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004cf6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	371c      	adds	r7, #28
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr
 8004d06:	bf00      	nop
 8004d08:	4f54300a 	.word	0x4f54300a

08004d0c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b085      	sub	sp, #20
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d14:	2300      	movs	r3, #0
 8004d16:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	4a13      	ldr	r2, [pc, #76]	; (8004d70 <USB_CoreReset+0x64>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d901      	bls.n	8004d2a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e01b      	b.n	8004d62 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	daf2      	bge.n	8004d18 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004d32:	2300      	movs	r3, #0
 8004d34:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	f043 0201 	orr.w	r2, r3, #1
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	3301      	adds	r3, #1
 8004d46:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	4a09      	ldr	r2, [pc, #36]	; (8004d70 <USB_CoreReset+0x64>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d901      	bls.n	8004d54 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004d50:	2303      	movs	r3, #3
 8004d52:	e006      	b.n	8004d62 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	691b      	ldr	r3, [r3, #16]
 8004d58:	f003 0301 	and.w	r3, r3, #1
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d0f0      	beq.n	8004d42 <USB_CoreReset+0x36>

  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3714      	adds	r7, #20
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop
 8004d70:	00030d40 	.word	0x00030d40

08004d74 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	460b      	mov	r3, r1
 8004d7e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004d80:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004d84:	f005 fa50 	bl	800a228 <USBD_static_malloc>
 8004d88:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d109      	bne.n	8004da4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	32b0      	adds	r2, #176	; 0xb0
 8004d9a:	2100      	movs	r1, #0
 8004d9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004da0:	2302      	movs	r3, #2
 8004da2:	e0d4      	b.n	8004f4e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004da4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004da8:	2100      	movs	r1, #0
 8004daa:	68f8      	ldr	r0, [r7, #12]
 8004dac:	f005 fb7c 	bl	800a4a8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	32b0      	adds	r2, #176	; 0xb0
 8004dba:	68f9      	ldr	r1, [r7, #12]
 8004dbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	32b0      	adds	r2, #176	; 0xb0
 8004dca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	7c1b      	ldrb	r3, [r3, #16]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d138      	bne.n	8004e4e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004ddc:	4b5e      	ldr	r3, [pc, #376]	; (8004f58 <USBD_CDC_Init+0x1e4>)
 8004dde:	7819      	ldrb	r1, [r3, #0]
 8004de0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004de4:	2202      	movs	r2, #2
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f005 f8fb 	bl	8009fe2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004dec:	4b5a      	ldr	r3, [pc, #360]	; (8004f58 <USBD_CDC_Init+0x1e4>)
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	f003 020f 	and.w	r2, r3, #15
 8004df4:	6879      	ldr	r1, [r7, #4]
 8004df6:	4613      	mov	r3, r2
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	4413      	add	r3, r2
 8004dfc:	009b      	lsls	r3, r3, #2
 8004dfe:	440b      	add	r3, r1
 8004e00:	3324      	adds	r3, #36	; 0x24
 8004e02:	2201      	movs	r2, #1
 8004e04:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004e06:	4b55      	ldr	r3, [pc, #340]	; (8004f5c <USBD_CDC_Init+0x1e8>)
 8004e08:	7819      	ldrb	r1, [r3, #0]
 8004e0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e0e:	2202      	movs	r2, #2
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f005 f8e6 	bl	8009fe2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004e16:	4b51      	ldr	r3, [pc, #324]	; (8004f5c <USBD_CDC_Init+0x1e8>)
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	f003 020f 	and.w	r2, r3, #15
 8004e1e:	6879      	ldr	r1, [r7, #4]
 8004e20:	4613      	mov	r3, r2
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	4413      	add	r3, r2
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	440b      	add	r3, r1
 8004e2a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004e2e:	2201      	movs	r2, #1
 8004e30:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004e32:	4b4b      	ldr	r3, [pc, #300]	; (8004f60 <USBD_CDC_Init+0x1ec>)
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	f003 020f 	and.w	r2, r3, #15
 8004e3a:	6879      	ldr	r1, [r7, #4]
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	4413      	add	r3, r2
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	440b      	add	r3, r1
 8004e46:	3326      	adds	r3, #38	; 0x26
 8004e48:	2210      	movs	r2, #16
 8004e4a:	801a      	strh	r2, [r3, #0]
 8004e4c:	e035      	b.n	8004eba <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004e4e:	4b42      	ldr	r3, [pc, #264]	; (8004f58 <USBD_CDC_Init+0x1e4>)
 8004e50:	7819      	ldrb	r1, [r3, #0]
 8004e52:	2340      	movs	r3, #64	; 0x40
 8004e54:	2202      	movs	r2, #2
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f005 f8c3 	bl	8009fe2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004e5c:	4b3e      	ldr	r3, [pc, #248]	; (8004f58 <USBD_CDC_Init+0x1e4>)
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	f003 020f 	and.w	r2, r3, #15
 8004e64:	6879      	ldr	r1, [r7, #4]
 8004e66:	4613      	mov	r3, r2
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	4413      	add	r3, r2
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	440b      	add	r3, r1
 8004e70:	3324      	adds	r3, #36	; 0x24
 8004e72:	2201      	movs	r2, #1
 8004e74:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004e76:	4b39      	ldr	r3, [pc, #228]	; (8004f5c <USBD_CDC_Init+0x1e8>)
 8004e78:	7819      	ldrb	r1, [r3, #0]
 8004e7a:	2340      	movs	r3, #64	; 0x40
 8004e7c:	2202      	movs	r2, #2
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f005 f8af 	bl	8009fe2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004e84:	4b35      	ldr	r3, [pc, #212]	; (8004f5c <USBD_CDC_Init+0x1e8>)
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	f003 020f 	and.w	r2, r3, #15
 8004e8c:	6879      	ldr	r1, [r7, #4]
 8004e8e:	4613      	mov	r3, r2
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	4413      	add	r3, r2
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	440b      	add	r3, r1
 8004e98:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004ea0:	4b2f      	ldr	r3, [pc, #188]	; (8004f60 <USBD_CDC_Init+0x1ec>)
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	f003 020f 	and.w	r2, r3, #15
 8004ea8:	6879      	ldr	r1, [r7, #4]
 8004eaa:	4613      	mov	r3, r2
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	4413      	add	r3, r2
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	440b      	add	r3, r1
 8004eb4:	3326      	adds	r3, #38	; 0x26
 8004eb6:	2210      	movs	r2, #16
 8004eb8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004eba:	4b29      	ldr	r3, [pc, #164]	; (8004f60 <USBD_CDC_Init+0x1ec>)
 8004ebc:	7819      	ldrb	r1, [r3, #0]
 8004ebe:	2308      	movs	r3, #8
 8004ec0:	2203      	movs	r2, #3
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f005 f88d 	bl	8009fe2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004ec8:	4b25      	ldr	r3, [pc, #148]	; (8004f60 <USBD_CDC_Init+0x1ec>)
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	f003 020f 	and.w	r2, r3, #15
 8004ed0:	6879      	ldr	r1, [r7, #4]
 8004ed2:	4613      	mov	r3, r2
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	4413      	add	r3, r2
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	440b      	add	r3, r1
 8004edc:	3324      	adds	r3, #36	; 0x24
 8004ede:	2201      	movs	r2, #1
 8004ee0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	33b0      	adds	r3, #176	; 0xb0
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	4413      	add	r3, r2
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d101      	bne.n	8004f1c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8004f18:	2302      	movs	r3, #2
 8004f1a:	e018      	b.n	8004f4e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	7c1b      	ldrb	r3, [r3, #16]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d10a      	bne.n	8004f3a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004f24:	4b0d      	ldr	r3, [pc, #52]	; (8004f5c <USBD_CDC_Init+0x1e8>)
 8004f26:	7819      	ldrb	r1, [r3, #0]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004f2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f005 f944 	bl	800a1c0 <USBD_LL_PrepareReceive>
 8004f38:	e008      	b.n	8004f4c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004f3a:	4b08      	ldr	r3, [pc, #32]	; (8004f5c <USBD_CDC_Init+0x1e8>)
 8004f3c:	7819      	ldrb	r1, [r3, #0]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004f44:	2340      	movs	r3, #64	; 0x40
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f005 f93a 	bl	800a1c0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3710      	adds	r7, #16
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	20000093 	.word	0x20000093
 8004f5c:	20000094 	.word	0x20000094
 8004f60:	20000095 	.word	0x20000095

08004f64 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	460b      	mov	r3, r1
 8004f6e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8004f70:	4b3a      	ldr	r3, [pc, #232]	; (800505c <USBD_CDC_DeInit+0xf8>)
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	4619      	mov	r1, r3
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f005 f859 	bl	800a02e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8004f7c:	4b37      	ldr	r3, [pc, #220]	; (800505c <USBD_CDC_DeInit+0xf8>)
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	f003 020f 	and.w	r2, r3, #15
 8004f84:	6879      	ldr	r1, [r7, #4]
 8004f86:	4613      	mov	r3, r2
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	4413      	add	r3, r2
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	440b      	add	r3, r1
 8004f90:	3324      	adds	r3, #36	; 0x24
 8004f92:	2200      	movs	r2, #0
 8004f94:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8004f96:	4b32      	ldr	r3, [pc, #200]	; (8005060 <USBD_CDC_DeInit+0xfc>)
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	4619      	mov	r1, r3
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f005 f846 	bl	800a02e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8004fa2:	4b2f      	ldr	r3, [pc, #188]	; (8005060 <USBD_CDC_DeInit+0xfc>)
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	f003 020f 	and.w	r2, r3, #15
 8004faa:	6879      	ldr	r1, [r7, #4]
 8004fac:	4613      	mov	r3, r2
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	4413      	add	r3, r2
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	440b      	add	r3, r1
 8004fb6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004fba:	2200      	movs	r2, #0
 8004fbc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8004fbe:	4b29      	ldr	r3, [pc, #164]	; (8005064 <USBD_CDC_DeInit+0x100>)
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	4619      	mov	r1, r3
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f005 f832 	bl	800a02e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8004fca:	4b26      	ldr	r3, [pc, #152]	; (8005064 <USBD_CDC_DeInit+0x100>)
 8004fcc:	781b      	ldrb	r3, [r3, #0]
 8004fce:	f003 020f 	and.w	r2, r3, #15
 8004fd2:	6879      	ldr	r1, [r7, #4]
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	4413      	add	r3, r2
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	440b      	add	r3, r1
 8004fde:	3324      	adds	r3, #36	; 0x24
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8004fe4:	4b1f      	ldr	r3, [pc, #124]	; (8005064 <USBD_CDC_DeInit+0x100>)
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	f003 020f 	and.w	r2, r3, #15
 8004fec:	6879      	ldr	r1, [r7, #4]
 8004fee:	4613      	mov	r3, r2
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	4413      	add	r3, r2
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	440b      	add	r3, r1
 8004ff8:	3326      	adds	r3, #38	; 0x26
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	32b0      	adds	r2, #176	; 0xb0
 8005008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d01f      	beq.n	8005050 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	33b0      	adds	r3, #176	; 0xb0
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	4413      	add	r3, r2
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	32b0      	adds	r2, #176	; 0xb0
 800502e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005032:	4618      	mov	r0, r3
 8005034:	f005 f906 	bl	800a244 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	32b0      	adds	r2, #176	; 0xb0
 8005042:	2100      	movs	r1, #0
 8005044:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3708      	adds	r7, #8
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	20000093 	.word	0x20000093
 8005060:	20000094 	.word	0x20000094
 8005064:	20000095 	.word	0x20000095

08005068 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b086      	sub	sp, #24
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	32b0      	adds	r2, #176	; 0xb0
 800507c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005080:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005082:	2300      	movs	r3, #0
 8005084:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005086:	2300      	movs	r3, #0
 8005088:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800508a:	2300      	movs	r3, #0
 800508c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d101      	bne.n	8005098 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005094:	2303      	movs	r3, #3
 8005096:	e0bf      	b.n	8005218 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d050      	beq.n	8005146 <USBD_CDC_Setup+0xde>
 80050a4:	2b20      	cmp	r3, #32
 80050a6:	f040 80af 	bne.w	8005208 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	88db      	ldrh	r3, [r3, #6]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d03a      	beq.n	8005128 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	781b      	ldrb	r3, [r3, #0]
 80050b6:	b25b      	sxtb	r3, r3
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	da1b      	bge.n	80050f4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	33b0      	adds	r3, #176	; 0xb0
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	4413      	add	r3, r2
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	683a      	ldr	r2, [r7, #0]
 80050d0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80050d2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80050d4:	683a      	ldr	r2, [r7, #0]
 80050d6:	88d2      	ldrh	r2, [r2, #6]
 80050d8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	88db      	ldrh	r3, [r3, #6]
 80050de:	2b07      	cmp	r3, #7
 80050e0:	bf28      	it	cs
 80050e2:	2307      	movcs	r3, #7
 80050e4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	89fa      	ldrh	r2, [r7, #14]
 80050ea:	4619      	mov	r1, r3
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f001 fd89 	bl	8006c04 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80050f2:	e090      	b.n	8005216 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	785a      	ldrb	r2, [r3, #1]
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	88db      	ldrh	r3, [r3, #6]
 8005102:	2b3f      	cmp	r3, #63	; 0x3f
 8005104:	d803      	bhi.n	800510e <USBD_CDC_Setup+0xa6>
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	88db      	ldrh	r3, [r3, #6]
 800510a:	b2da      	uxtb	r2, r3
 800510c:	e000      	b.n	8005110 <USBD_CDC_Setup+0xa8>
 800510e:	2240      	movs	r2, #64	; 0x40
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005116:	6939      	ldr	r1, [r7, #16]
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800511e:	461a      	mov	r2, r3
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f001 fd9b 	bl	8006c5c <USBD_CtlPrepareRx>
      break;
 8005126:	e076      	b.n	8005216 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	33b0      	adds	r3, #176	; 0xb0
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	4413      	add	r3, r2
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	683a      	ldr	r2, [r7, #0]
 800513c:	7850      	ldrb	r0, [r2, #1]
 800513e:	2200      	movs	r2, #0
 8005140:	6839      	ldr	r1, [r7, #0]
 8005142:	4798      	blx	r3
      break;
 8005144:	e067      	b.n	8005216 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	785b      	ldrb	r3, [r3, #1]
 800514a:	2b0b      	cmp	r3, #11
 800514c:	d851      	bhi.n	80051f2 <USBD_CDC_Setup+0x18a>
 800514e:	a201      	add	r2, pc, #4	; (adr r2, 8005154 <USBD_CDC_Setup+0xec>)
 8005150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005154:	08005185 	.word	0x08005185
 8005158:	08005201 	.word	0x08005201
 800515c:	080051f3 	.word	0x080051f3
 8005160:	080051f3 	.word	0x080051f3
 8005164:	080051f3 	.word	0x080051f3
 8005168:	080051f3 	.word	0x080051f3
 800516c:	080051f3 	.word	0x080051f3
 8005170:	080051f3 	.word	0x080051f3
 8005174:	080051f3 	.word	0x080051f3
 8005178:	080051f3 	.word	0x080051f3
 800517c:	080051af 	.word	0x080051af
 8005180:	080051d9 	.word	0x080051d9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800518a:	b2db      	uxtb	r3, r3
 800518c:	2b03      	cmp	r3, #3
 800518e:	d107      	bne.n	80051a0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005190:	f107 030a 	add.w	r3, r7, #10
 8005194:	2202      	movs	r2, #2
 8005196:	4619      	mov	r1, r3
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f001 fd33 	bl	8006c04 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800519e:	e032      	b.n	8005206 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80051a0:	6839      	ldr	r1, [r7, #0]
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f001 fcbd 	bl	8006b22 <USBD_CtlError>
            ret = USBD_FAIL;
 80051a8:	2303      	movs	r3, #3
 80051aa:	75fb      	strb	r3, [r7, #23]
          break;
 80051ac:	e02b      	b.n	8005206 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	2b03      	cmp	r3, #3
 80051b8:	d107      	bne.n	80051ca <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80051ba:	f107 030d 	add.w	r3, r7, #13
 80051be:	2201      	movs	r2, #1
 80051c0:	4619      	mov	r1, r3
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f001 fd1e 	bl	8006c04 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80051c8:	e01d      	b.n	8005206 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80051ca:	6839      	ldr	r1, [r7, #0]
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f001 fca8 	bl	8006b22 <USBD_CtlError>
            ret = USBD_FAIL;
 80051d2:	2303      	movs	r3, #3
 80051d4:	75fb      	strb	r3, [r7, #23]
          break;
 80051d6:	e016      	b.n	8005206 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	2b03      	cmp	r3, #3
 80051e2:	d00f      	beq.n	8005204 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80051e4:	6839      	ldr	r1, [r7, #0]
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f001 fc9b 	bl	8006b22 <USBD_CtlError>
            ret = USBD_FAIL;
 80051ec:	2303      	movs	r3, #3
 80051ee:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80051f0:	e008      	b.n	8005204 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80051f2:	6839      	ldr	r1, [r7, #0]
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f001 fc94 	bl	8006b22 <USBD_CtlError>
          ret = USBD_FAIL;
 80051fa:	2303      	movs	r3, #3
 80051fc:	75fb      	strb	r3, [r7, #23]
          break;
 80051fe:	e002      	b.n	8005206 <USBD_CDC_Setup+0x19e>
          break;
 8005200:	bf00      	nop
 8005202:	e008      	b.n	8005216 <USBD_CDC_Setup+0x1ae>
          break;
 8005204:	bf00      	nop
      }
      break;
 8005206:	e006      	b.n	8005216 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005208:	6839      	ldr	r1, [r7, #0]
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f001 fc89 	bl	8006b22 <USBD_CtlError>
      ret = USBD_FAIL;
 8005210:	2303      	movs	r3, #3
 8005212:	75fb      	strb	r3, [r7, #23]
      break;
 8005214:	bf00      	nop
  }

  return (uint8_t)ret;
 8005216:	7dfb      	ldrb	r3, [r7, #23]
}
 8005218:	4618      	mov	r0, r3
 800521a:	3718      	adds	r7, #24
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}

08005220 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	460b      	mov	r3, r1
 800522a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005232:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	32b0      	adds	r2, #176	; 0xb0
 800523e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d101      	bne.n	800524a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005246:	2303      	movs	r3, #3
 8005248:	e065      	b.n	8005316 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	32b0      	adds	r2, #176	; 0xb0
 8005254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005258:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800525a:	78fb      	ldrb	r3, [r7, #3]
 800525c:	f003 020f 	and.w	r2, r3, #15
 8005260:	6879      	ldr	r1, [r7, #4]
 8005262:	4613      	mov	r3, r2
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	4413      	add	r3, r2
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	440b      	add	r3, r1
 800526c:	3318      	adds	r3, #24
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d02f      	beq.n	80052d4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005274:	78fb      	ldrb	r3, [r7, #3]
 8005276:	f003 020f 	and.w	r2, r3, #15
 800527a:	6879      	ldr	r1, [r7, #4]
 800527c:	4613      	mov	r3, r2
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	4413      	add	r3, r2
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	440b      	add	r3, r1
 8005286:	3318      	adds	r3, #24
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	78fb      	ldrb	r3, [r7, #3]
 800528c:	f003 010f 	and.w	r1, r3, #15
 8005290:	68f8      	ldr	r0, [r7, #12]
 8005292:	460b      	mov	r3, r1
 8005294:	00db      	lsls	r3, r3, #3
 8005296:	440b      	add	r3, r1
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	4403      	add	r3, r0
 800529c:	3348      	adds	r3, #72	; 0x48
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	fbb2 f1f3 	udiv	r1, r2, r3
 80052a4:	fb01 f303 	mul.w	r3, r1, r3
 80052a8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d112      	bne.n	80052d4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80052ae:	78fb      	ldrb	r3, [r7, #3]
 80052b0:	f003 020f 	and.w	r2, r3, #15
 80052b4:	6879      	ldr	r1, [r7, #4]
 80052b6:	4613      	mov	r3, r2
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	4413      	add	r3, r2
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	440b      	add	r3, r1
 80052c0:	3318      	adds	r3, #24
 80052c2:	2200      	movs	r2, #0
 80052c4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80052c6:	78f9      	ldrb	r1, [r7, #3]
 80052c8:	2300      	movs	r3, #0
 80052ca:	2200      	movs	r2, #0
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f004 ff56 	bl	800a17e <USBD_LL_Transmit>
 80052d2:	e01f      	b.n	8005314 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	33b0      	adds	r3, #176	; 0xb0
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	4413      	add	r3, r2
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d010      	beq.n	8005314 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	33b0      	adds	r3, #176	; 0xb0
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	4413      	add	r3, r2
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	691b      	ldr	r3, [r3, #16]
 8005304:	68ba      	ldr	r2, [r7, #8]
 8005306:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800530a:	68ba      	ldr	r2, [r7, #8]
 800530c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005310:	78fa      	ldrb	r2, [r7, #3]
 8005312:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005314:	2300      	movs	r3, #0
}
 8005316:	4618      	mov	r0, r3
 8005318:	3710      	adds	r7, #16
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}

0800531e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800531e:	b580      	push	{r7, lr}
 8005320:	b084      	sub	sp, #16
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
 8005326:	460b      	mov	r3, r1
 8005328:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	32b0      	adds	r2, #176	; 0xb0
 8005334:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005338:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	32b0      	adds	r2, #176	; 0xb0
 8005344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d101      	bne.n	8005350 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800534c:	2303      	movs	r3, #3
 800534e:	e01a      	b.n	8005386 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005350:	78fb      	ldrb	r3, [r7, #3]
 8005352:	4619      	mov	r1, r3
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f004 ff54 	bl	800a202 <USBD_LL_GetRxDataSize>
 800535a:	4602      	mov	r2, r0
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	33b0      	adds	r3, #176	; 0xb0
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	4413      	add	r3, r2
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	68fa      	ldr	r2, [r7, #12]
 8005376:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800537a:	68fa      	ldr	r2, [r7, #12]
 800537c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005380:	4611      	mov	r1, r2
 8005382:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005384:	2300      	movs	r3, #0
}
 8005386:	4618      	mov	r0, r3
 8005388:	3710      	adds	r7, #16
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}

0800538e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800538e:	b580      	push	{r7, lr}
 8005390:	b084      	sub	sp, #16
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	32b0      	adds	r2, #176	; 0xb0
 80053a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053a4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d101      	bne.n	80053b0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80053ac:	2303      	movs	r3, #3
 80053ae:	e025      	b.n	80053fc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	33b0      	adds	r3, #176	; 0xb0
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	4413      	add	r3, r2
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d01a      	beq.n	80053fa <USBD_CDC_EP0_RxReady+0x6c>
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80053ca:	2bff      	cmp	r3, #255	; 0xff
 80053cc:	d015      	beq.n	80053fa <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	33b0      	adds	r3, #176	; 0xb0
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	4413      	add	r3, r2
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	68fa      	ldr	r2, [r7, #12]
 80053e2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80053e6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80053ee:	b292      	uxth	r2, r2
 80053f0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	22ff      	movs	r2, #255	; 0xff
 80053f6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80053fa:	2300      	movs	r3, #0
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3710      	adds	r7, #16
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}

08005404 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b086      	sub	sp, #24
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800540c:	2182      	movs	r1, #130	; 0x82
 800540e:	4818      	ldr	r0, [pc, #96]	; (8005470 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005410:	f000 fd4f 	bl	8005eb2 <USBD_GetEpDesc>
 8005414:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005416:	2101      	movs	r1, #1
 8005418:	4815      	ldr	r0, [pc, #84]	; (8005470 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800541a:	f000 fd4a 	bl	8005eb2 <USBD_GetEpDesc>
 800541e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005420:	2181      	movs	r1, #129	; 0x81
 8005422:	4813      	ldr	r0, [pc, #76]	; (8005470 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005424:	f000 fd45 	bl	8005eb2 <USBD_GetEpDesc>
 8005428:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d002      	beq.n	8005436 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	2210      	movs	r2, #16
 8005434:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d006      	beq.n	800544a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	2200      	movs	r2, #0
 8005440:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005444:	711a      	strb	r2, [r3, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d006      	beq.n	800545e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2200      	movs	r2, #0
 8005454:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005458:	711a      	strb	r2, [r3, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2243      	movs	r2, #67	; 0x43
 8005462:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005464:	4b02      	ldr	r3, [pc, #8]	; (8005470 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005466:	4618      	mov	r0, r3
 8005468:	3718      	adds	r7, #24
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	20000050 	.word	0x20000050

08005474 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b086      	sub	sp, #24
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800547c:	2182      	movs	r1, #130	; 0x82
 800547e:	4818      	ldr	r0, [pc, #96]	; (80054e0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005480:	f000 fd17 	bl	8005eb2 <USBD_GetEpDesc>
 8005484:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005486:	2101      	movs	r1, #1
 8005488:	4815      	ldr	r0, [pc, #84]	; (80054e0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800548a:	f000 fd12 	bl	8005eb2 <USBD_GetEpDesc>
 800548e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005490:	2181      	movs	r1, #129	; 0x81
 8005492:	4813      	ldr	r0, [pc, #76]	; (80054e0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005494:	f000 fd0d 	bl	8005eb2 <USBD_GetEpDesc>
 8005498:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d002      	beq.n	80054a6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	2210      	movs	r2, #16
 80054a4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d006      	beq.n	80054ba <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	2200      	movs	r2, #0
 80054b0:	711a      	strb	r2, [r3, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	f042 0202 	orr.w	r2, r2, #2
 80054b8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d006      	beq.n	80054ce <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2200      	movs	r2, #0
 80054c4:	711a      	strb	r2, [r3, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f042 0202 	orr.w	r2, r2, #2
 80054cc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2243      	movs	r2, #67	; 0x43
 80054d2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80054d4:	4b02      	ldr	r3, [pc, #8]	; (80054e0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3718      	adds	r7, #24
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	20000050 	.word	0x20000050

080054e4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b086      	sub	sp, #24
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80054ec:	2182      	movs	r1, #130	; 0x82
 80054ee:	4818      	ldr	r0, [pc, #96]	; (8005550 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80054f0:	f000 fcdf 	bl	8005eb2 <USBD_GetEpDesc>
 80054f4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80054f6:	2101      	movs	r1, #1
 80054f8:	4815      	ldr	r0, [pc, #84]	; (8005550 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80054fa:	f000 fcda 	bl	8005eb2 <USBD_GetEpDesc>
 80054fe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005500:	2181      	movs	r1, #129	; 0x81
 8005502:	4813      	ldr	r0, [pc, #76]	; (8005550 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005504:	f000 fcd5 	bl	8005eb2 <USBD_GetEpDesc>
 8005508:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d002      	beq.n	8005516 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	2210      	movs	r2, #16
 8005514:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d006      	beq.n	800552a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	2200      	movs	r2, #0
 8005520:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005524:	711a      	strb	r2, [r3, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d006      	beq.n	800553e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2200      	movs	r2, #0
 8005534:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005538:	711a      	strb	r2, [r3, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2243      	movs	r2, #67	; 0x43
 8005542:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005544:	4b02      	ldr	r3, [pc, #8]	; (8005550 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005546:	4618      	mov	r0, r3
 8005548:	3718      	adds	r7, #24
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	20000050 	.word	0x20000050

08005554 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	220a      	movs	r2, #10
 8005560:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005562:	4b03      	ldr	r3, [pc, #12]	; (8005570 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005564:	4618      	mov	r0, r3
 8005566:	370c      	adds	r7, #12
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr
 8005570:	2000000c 	.word	0x2000000c

08005574 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d101      	bne.n	8005588 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005584:	2303      	movs	r3, #3
 8005586:	e009      	b.n	800559c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	33b0      	adds	r3, #176	; 0xb0
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	4413      	add	r3, r2
 8005596:	683a      	ldr	r2, [r7, #0]
 8005598:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800559a:	2300      	movs	r3, #0
}
 800559c:	4618      	mov	r0, r3
 800559e:	370c      	adds	r7, #12
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b087      	sub	sp, #28
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	32b0      	adds	r2, #176	; 0xb0
 80055be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055c2:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d101      	bne.n	80055ce <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80055ca:	2303      	movs	r3, #3
 80055cc:	e008      	b.n	80055e0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	68ba      	ldr	r2, [r7, #8]
 80055d2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80055de:	2300      	movs	r3, #0
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	371c      	adds	r7, #28
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b085      	sub	sp, #20
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	32b0      	adds	r2, #176	; 0xb0
 8005600:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005604:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d101      	bne.n	8005610 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800560c:	2303      	movs	r3, #3
 800560e:	e004      	b.n	800561a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	683a      	ldr	r2, [r7, #0]
 8005614:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005618:	2300      	movs	r3, #0
}
 800561a:	4618      	mov	r0, r3
 800561c:	3714      	adds	r7, #20
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr
	...

08005628 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b084      	sub	sp, #16
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	32b0      	adds	r2, #176	; 0xb0
 800563a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800563e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005640:	2301      	movs	r3, #1
 8005642:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	32b0      	adds	r2, #176	; 0xb0
 800564e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d101      	bne.n	800565a <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005656:	2303      	movs	r3, #3
 8005658:	e025      	b.n	80056a6 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005660:	2b00      	cmp	r3, #0
 8005662:	d11f      	bne.n	80056a4 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	2201      	movs	r2, #1
 8005668:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800566c:	4b10      	ldr	r3, [pc, #64]	; (80056b0 <USBD_CDC_TransmitPacket+0x88>)
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	f003 020f 	and.w	r2, r3, #15
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	4613      	mov	r3, r2
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	4413      	add	r3, r2
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	4403      	add	r3, r0
 8005686:	3318      	adds	r3, #24
 8005688:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800568a:	4b09      	ldr	r3, [pc, #36]	; (80056b0 <USBD_CDC_TransmitPacket+0x88>)
 800568c:	7819      	ldrb	r1, [r3, #0]
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f004 fd6f 	bl	800a17e <USBD_LL_Transmit>

    ret = USBD_OK;
 80056a0:	2300      	movs	r3, #0
 80056a2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80056a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3710      	adds	r7, #16
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	bf00      	nop
 80056b0:	20000093 	.word	0x20000093

080056b4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b084      	sub	sp, #16
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	32b0      	adds	r2, #176	; 0xb0
 80056c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056ca:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	32b0      	adds	r2, #176	; 0xb0
 80056d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d101      	bne.n	80056e2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80056de:	2303      	movs	r3, #3
 80056e0:	e018      	b.n	8005714 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	7c1b      	ldrb	r3, [r3, #16]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d10a      	bne.n	8005700 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80056ea:	4b0c      	ldr	r3, [pc, #48]	; (800571c <USBD_CDC_ReceivePacket+0x68>)
 80056ec:	7819      	ldrb	r1, [r3, #0]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80056f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f004 fd61 	bl	800a1c0 <USBD_LL_PrepareReceive>
 80056fe:	e008      	b.n	8005712 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005700:	4b06      	ldr	r3, [pc, #24]	; (800571c <USBD_CDC_ReceivePacket+0x68>)
 8005702:	7819      	ldrb	r1, [r3, #0]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800570a:	2340      	movs	r3, #64	; 0x40
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f004 fd57 	bl	800a1c0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005712:	2300      	movs	r3, #0
}
 8005714:	4618      	mov	r0, r3
 8005716:	3710      	adds	r7, #16
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}
 800571c:	20000094 	.word	0x20000094

08005720 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b086      	sub	sp, #24
 8005724:	af00      	add	r7, sp, #0
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	60b9      	str	r1, [r7, #8]
 800572a:	4613      	mov	r3, r2
 800572c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d101      	bne.n	8005738 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005734:	2303      	movs	r3, #3
 8005736:	e01f      	b.n	8005778 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2200      	movs	r2, #0
 800573c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2200      	movs	r2, #0
 8005744:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2200      	movs	r2, #0
 800574c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d003      	beq.n	800575e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	68ba      	ldr	r2, [r7, #8]
 800575a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2201      	movs	r2, #1
 8005762:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	79fa      	ldrb	r2, [r7, #7]
 800576a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800576c:	68f8      	ldr	r0, [r7, #12]
 800576e:	f004 fbd1 	bl	8009f14 <USBD_LL_Init>
 8005772:	4603      	mov	r3, r0
 8005774:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005776:	7dfb      	ldrb	r3, [r7, #23]
}
 8005778:	4618      	mov	r0, r3
 800577a:	3718      	adds	r7, #24
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}

08005780 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b084      	sub	sp, #16
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800578a:	2300      	movs	r3, #0
 800578c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d101      	bne.n	8005798 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005794:	2303      	movs	r3, #3
 8005796:	e025      	b.n	80057e4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	683a      	ldr	r2, [r7, #0]
 800579c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	32ae      	adds	r2, #174	; 0xae
 80057aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d00f      	beq.n	80057d4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	32ae      	adds	r2, #174	; 0xae
 80057be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c4:	f107 020e 	add.w	r2, r7, #14
 80057c8:	4610      	mov	r0, r2
 80057ca:	4798      	blx	r3
 80057cc:	4602      	mov	r2, r0
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80057da:	1c5a      	adds	r2, r3, #1
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80057e2:	2300      	movs	r3, #0
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3710      	adds	r7, #16
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}

080057ec <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b082      	sub	sp, #8
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f004 fbd9 	bl	8009fac <USBD_LL_Start>
 80057fa:	4603      	mov	r3, r0
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3708      	adds	r7, #8
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}

08005804 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005804:	b480      	push	{r7}
 8005806:	b083      	sub	sp, #12
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800580c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800580e:	4618      	mov	r0, r3
 8005810:	370c      	adds	r7, #12
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr

0800581a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800581a:	b580      	push	{r7, lr}
 800581c:	b084      	sub	sp, #16
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]
 8005822:	460b      	mov	r3, r1
 8005824:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005826:	2300      	movs	r3, #0
 8005828:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005830:	2b00      	cmp	r3, #0
 8005832:	d009      	beq.n	8005848 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	78fa      	ldrb	r2, [r7, #3]
 800583e:	4611      	mov	r1, r2
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	4798      	blx	r3
 8005844:	4603      	mov	r3, r0
 8005846:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005848:	7bfb      	ldrb	r3, [r7, #15]
}
 800584a:	4618      	mov	r0, r3
 800584c:	3710      	adds	r7, #16
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}

08005852 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005852:	b580      	push	{r7, lr}
 8005854:	b084      	sub	sp, #16
 8005856:	af00      	add	r7, sp, #0
 8005858:	6078      	str	r0, [r7, #4]
 800585a:	460b      	mov	r3, r1
 800585c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800585e:	2300      	movs	r3, #0
 8005860:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	78fa      	ldrb	r2, [r7, #3]
 800586c:	4611      	mov	r1, r2
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	4798      	blx	r3
 8005872:	4603      	mov	r3, r0
 8005874:	2b00      	cmp	r3, #0
 8005876:	d001      	beq.n	800587c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005878:	2303      	movs	r3, #3
 800587a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800587c:	7bfb      	ldrb	r3, [r7, #15]
}
 800587e:	4618      	mov	r0, r3
 8005880:	3710      	adds	r7, #16
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}

08005886 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005886:	b580      	push	{r7, lr}
 8005888:	b084      	sub	sp, #16
 800588a:	af00      	add	r7, sp, #0
 800588c:	6078      	str	r0, [r7, #4]
 800588e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005896:	6839      	ldr	r1, [r7, #0]
 8005898:	4618      	mov	r0, r3
 800589a:	f001 f908 	bl	8006aae <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2201      	movs	r2, #1
 80058a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80058ac:	461a      	mov	r2, r3
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80058ba:	f003 031f 	and.w	r3, r3, #31
 80058be:	2b02      	cmp	r3, #2
 80058c0:	d01a      	beq.n	80058f8 <USBD_LL_SetupStage+0x72>
 80058c2:	2b02      	cmp	r3, #2
 80058c4:	d822      	bhi.n	800590c <USBD_LL_SetupStage+0x86>
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d002      	beq.n	80058d0 <USBD_LL_SetupStage+0x4a>
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d00a      	beq.n	80058e4 <USBD_LL_SetupStage+0x5e>
 80058ce:	e01d      	b.n	800590c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80058d6:	4619      	mov	r1, r3
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f000 fb5f 	bl	8005f9c <USBD_StdDevReq>
 80058de:	4603      	mov	r3, r0
 80058e0:	73fb      	strb	r3, [r7, #15]
      break;
 80058e2:	e020      	b.n	8005926 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80058ea:	4619      	mov	r1, r3
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f000 fbc7 	bl	8006080 <USBD_StdItfReq>
 80058f2:	4603      	mov	r3, r0
 80058f4:	73fb      	strb	r3, [r7, #15]
      break;
 80058f6:	e016      	b.n	8005926 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80058fe:	4619      	mov	r1, r3
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 fc29 	bl	8006158 <USBD_StdEPReq>
 8005906:	4603      	mov	r3, r0
 8005908:	73fb      	strb	r3, [r7, #15]
      break;
 800590a:	e00c      	b.n	8005926 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005912:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005916:	b2db      	uxtb	r3, r3
 8005918:	4619      	mov	r1, r3
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f004 fba6 	bl	800a06c <USBD_LL_StallEP>
 8005920:	4603      	mov	r3, r0
 8005922:	73fb      	strb	r3, [r7, #15]
      break;
 8005924:	bf00      	nop
  }

  return ret;
 8005926:	7bfb      	ldrb	r3, [r7, #15]
}
 8005928:	4618      	mov	r0, r3
 800592a:	3710      	adds	r7, #16
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b086      	sub	sp, #24
 8005934:	af00      	add	r7, sp, #0
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	460b      	mov	r3, r1
 800593a:	607a      	str	r2, [r7, #4]
 800593c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800593e:	2300      	movs	r3, #0
 8005940:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005942:	7afb      	ldrb	r3, [r7, #11]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d16e      	bne.n	8005a26 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800594e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005956:	2b03      	cmp	r3, #3
 8005958:	f040 8098 	bne.w	8005a8c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	689a      	ldr	r2, [r3, #8]
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	429a      	cmp	r2, r3
 8005966:	d913      	bls.n	8005990 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	689a      	ldr	r2, [r3, #8]
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	1ad2      	subs	r2, r2, r3
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	68da      	ldr	r2, [r3, #12]
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	4293      	cmp	r3, r2
 8005980:	bf28      	it	cs
 8005982:	4613      	movcs	r3, r2
 8005984:	461a      	mov	r2, r3
 8005986:	6879      	ldr	r1, [r7, #4]
 8005988:	68f8      	ldr	r0, [r7, #12]
 800598a:	f001 f984 	bl	8006c96 <USBD_CtlContinueRx>
 800598e:	e07d      	b.n	8005a8c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005996:	f003 031f 	and.w	r3, r3, #31
 800599a:	2b02      	cmp	r3, #2
 800599c:	d014      	beq.n	80059c8 <USBD_LL_DataOutStage+0x98>
 800599e:	2b02      	cmp	r3, #2
 80059a0:	d81d      	bhi.n	80059de <USBD_LL_DataOutStage+0xae>
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d002      	beq.n	80059ac <USBD_LL_DataOutStage+0x7c>
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d003      	beq.n	80059b2 <USBD_LL_DataOutStage+0x82>
 80059aa:	e018      	b.n	80059de <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80059ac:	2300      	movs	r3, #0
 80059ae:	75bb      	strb	r3, [r7, #22]
            break;
 80059b0:	e018      	b.n	80059e4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	4619      	mov	r1, r3
 80059bc:	68f8      	ldr	r0, [r7, #12]
 80059be:	f000 fa5e 	bl	8005e7e <USBD_CoreFindIF>
 80059c2:	4603      	mov	r3, r0
 80059c4:	75bb      	strb	r3, [r7, #22]
            break;
 80059c6:	e00d      	b.n	80059e4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	4619      	mov	r1, r3
 80059d2:	68f8      	ldr	r0, [r7, #12]
 80059d4:	f000 fa60 	bl	8005e98 <USBD_CoreFindEP>
 80059d8:	4603      	mov	r3, r0
 80059da:	75bb      	strb	r3, [r7, #22]
            break;
 80059dc:	e002      	b.n	80059e4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80059de:	2300      	movs	r3, #0
 80059e0:	75bb      	strb	r3, [r7, #22]
            break;
 80059e2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80059e4:	7dbb      	ldrb	r3, [r7, #22]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d119      	bne.n	8005a1e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	2b03      	cmp	r3, #3
 80059f4:	d113      	bne.n	8005a1e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80059f6:	7dba      	ldrb	r2, [r7, #22]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	32ae      	adds	r2, #174	; 0xae
 80059fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a00:	691b      	ldr	r3, [r3, #16]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d00b      	beq.n	8005a1e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005a06:	7dba      	ldrb	r2, [r7, #22]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005a0e:	7dba      	ldrb	r2, [r7, #22]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	32ae      	adds	r2, #174	; 0xae
 8005a14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	68f8      	ldr	r0, [r7, #12]
 8005a1c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005a1e:	68f8      	ldr	r0, [r7, #12]
 8005a20:	f001 f94a 	bl	8006cb8 <USBD_CtlSendStatus>
 8005a24:	e032      	b.n	8005a8c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005a26:	7afb      	ldrb	r3, [r7, #11]
 8005a28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	4619      	mov	r1, r3
 8005a30:	68f8      	ldr	r0, [r7, #12]
 8005a32:	f000 fa31 	bl	8005e98 <USBD_CoreFindEP>
 8005a36:	4603      	mov	r3, r0
 8005a38:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005a3a:	7dbb      	ldrb	r3, [r7, #22]
 8005a3c:	2bff      	cmp	r3, #255	; 0xff
 8005a3e:	d025      	beq.n	8005a8c <USBD_LL_DataOutStage+0x15c>
 8005a40:	7dbb      	ldrb	r3, [r7, #22]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d122      	bne.n	8005a8c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	2b03      	cmp	r3, #3
 8005a50:	d117      	bne.n	8005a82 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005a52:	7dba      	ldrb	r2, [r7, #22]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	32ae      	adds	r2, #174	; 0xae
 8005a58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a5c:	699b      	ldr	r3, [r3, #24]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d00f      	beq.n	8005a82 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005a62:	7dba      	ldrb	r2, [r7, #22]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005a6a:	7dba      	ldrb	r2, [r7, #22]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	32ae      	adds	r2, #174	; 0xae
 8005a70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a74:	699b      	ldr	r3, [r3, #24]
 8005a76:	7afa      	ldrb	r2, [r7, #11]
 8005a78:	4611      	mov	r1, r2
 8005a7a:	68f8      	ldr	r0, [r7, #12]
 8005a7c:	4798      	blx	r3
 8005a7e:	4603      	mov	r3, r0
 8005a80:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005a82:	7dfb      	ldrb	r3, [r7, #23]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d001      	beq.n	8005a8c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005a88:	7dfb      	ldrb	r3, [r7, #23]
 8005a8a:	e000      	b.n	8005a8e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005a8c:	2300      	movs	r3, #0
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3718      	adds	r7, #24
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}

08005a96 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005a96:	b580      	push	{r7, lr}
 8005a98:	b086      	sub	sp, #24
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	60f8      	str	r0, [r7, #12]
 8005a9e:	460b      	mov	r3, r1
 8005aa0:	607a      	str	r2, [r7, #4]
 8005aa2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005aa4:	7afb      	ldrb	r3, [r7, #11]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d16f      	bne.n	8005b8a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	3314      	adds	r3, #20
 8005aae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005ab6:	2b02      	cmp	r3, #2
 8005ab8:	d15a      	bne.n	8005b70 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	689a      	ldr	r2, [r3, #8]
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d914      	bls.n	8005af0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	689a      	ldr	r2, [r3, #8]
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	68db      	ldr	r3, [r3, #12]
 8005ace:	1ad2      	subs	r2, r2, r3
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	461a      	mov	r2, r3
 8005ada:	6879      	ldr	r1, [r7, #4]
 8005adc:	68f8      	ldr	r0, [r7, #12]
 8005ade:	f001 f8ac 	bl	8006c3a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	2100      	movs	r1, #0
 8005ae8:	68f8      	ldr	r0, [r7, #12]
 8005aea:	f004 fb69 	bl	800a1c0 <USBD_LL_PrepareReceive>
 8005aee:	e03f      	b.n	8005b70 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	68da      	ldr	r2, [r3, #12]
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d11c      	bne.n	8005b36 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	685a      	ldr	r2, [r3, #4]
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d316      	bcc.n	8005b36 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	685a      	ldr	r2, [r3, #4]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d20f      	bcs.n	8005b36 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005b16:	2200      	movs	r2, #0
 8005b18:	2100      	movs	r1, #0
 8005b1a:	68f8      	ldr	r0, [r7, #12]
 8005b1c:	f001 f88d 	bl	8006c3a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2200      	movs	r2, #0
 8005b24:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005b28:	2300      	movs	r3, #0
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	2100      	movs	r1, #0
 8005b2e:	68f8      	ldr	r0, [r7, #12]
 8005b30:	f004 fb46 	bl	800a1c0 <USBD_LL_PrepareReceive>
 8005b34:	e01c      	b.n	8005b70 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	2b03      	cmp	r3, #3
 8005b40:	d10f      	bne.n	8005b62 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b48:	68db      	ldr	r3, [r3, #12]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d009      	beq.n	8005b62 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2200      	movs	r2, #0
 8005b52:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	68f8      	ldr	r0, [r7, #12]
 8005b60:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005b62:	2180      	movs	r1, #128	; 0x80
 8005b64:	68f8      	ldr	r0, [r7, #12]
 8005b66:	f004 fa81 	bl	800a06c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005b6a:	68f8      	ldr	r0, [r7, #12]
 8005b6c:	f001 f8b7 	bl	8006cde <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d03a      	beq.n	8005bf0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005b7a:	68f8      	ldr	r0, [r7, #12]
 8005b7c:	f7ff fe42 	bl	8005804 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2200      	movs	r2, #0
 8005b84:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005b88:	e032      	b.n	8005bf0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005b8a:	7afb      	ldrb	r3, [r7, #11]
 8005b8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	4619      	mov	r1, r3
 8005b94:	68f8      	ldr	r0, [r7, #12]
 8005b96:	f000 f97f 	bl	8005e98 <USBD_CoreFindEP>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005b9e:	7dfb      	ldrb	r3, [r7, #23]
 8005ba0:	2bff      	cmp	r3, #255	; 0xff
 8005ba2:	d025      	beq.n	8005bf0 <USBD_LL_DataInStage+0x15a>
 8005ba4:	7dfb      	ldrb	r3, [r7, #23]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d122      	bne.n	8005bf0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	2b03      	cmp	r3, #3
 8005bb4:	d11c      	bne.n	8005bf0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005bb6:	7dfa      	ldrb	r2, [r7, #23]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	32ae      	adds	r2, #174	; 0xae
 8005bbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bc0:	695b      	ldr	r3, [r3, #20]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d014      	beq.n	8005bf0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005bc6:	7dfa      	ldrb	r2, [r7, #23]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005bce:	7dfa      	ldrb	r2, [r7, #23]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	32ae      	adds	r2, #174	; 0xae
 8005bd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bd8:	695b      	ldr	r3, [r3, #20]
 8005bda:	7afa      	ldrb	r2, [r7, #11]
 8005bdc:	4611      	mov	r1, r2
 8005bde:	68f8      	ldr	r0, [r7, #12]
 8005be0:	4798      	blx	r3
 8005be2:	4603      	mov	r3, r0
 8005be4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005be6:	7dbb      	ldrb	r3, [r7, #22]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d001      	beq.n	8005bf0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005bec:	7dbb      	ldrb	r3, [r7, #22]
 8005bee:	e000      	b.n	8005bf2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005bf0:	2300      	movs	r3, #0
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3718      	adds	r7, #24
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}

08005bfa <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005bfa:	b580      	push	{r7, lr}
 8005bfc:	b084      	sub	sp, #16
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c02:	2300      	movs	r3, #0
 8005c04:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2201      	movs	r2, #1
 8005c0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2200      	movs	r2, #0
 8005c12:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d014      	beq.n	8005c60 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d00e      	beq.n	8005c60 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	6852      	ldr	r2, [r2, #4]
 8005c4e:	b2d2      	uxtb	r2, r2
 8005c50:	4611      	mov	r1, r2
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	4798      	blx	r3
 8005c56:	4603      	mov	r3, r0
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d001      	beq.n	8005c60 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005c5c:	2303      	movs	r3, #3
 8005c5e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005c60:	2340      	movs	r3, #64	; 0x40
 8005c62:	2200      	movs	r2, #0
 8005c64:	2100      	movs	r1, #0
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f004 f9bb 	bl	8009fe2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2240      	movs	r2, #64	; 0x40
 8005c78:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005c7c:	2340      	movs	r3, #64	; 0x40
 8005c7e:	2200      	movs	r2, #0
 8005c80:	2180      	movs	r1, #128	; 0x80
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f004 f9ad 	bl	8009fe2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2240      	movs	r2, #64	; 0x40
 8005c92:	621a      	str	r2, [r3, #32]

  return ret;
 8005c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3710      	adds	r7, #16
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}

08005c9e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005c9e:	b480      	push	{r7}
 8005ca0:	b083      	sub	sp, #12
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
 8005ca6:	460b      	mov	r3, r1
 8005ca8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	78fa      	ldrb	r2, [r7, #3]
 8005cae:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005cb0:	2300      	movs	r3, #0
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	370c      	adds	r7, #12
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr

08005cbe <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005cbe:	b480      	push	{r7}
 8005cc0:	b083      	sub	sp, #12
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ccc:	b2da      	uxtb	r2, r3
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2204      	movs	r2, #4
 8005cd8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005cdc:	2300      	movs	r3, #0
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	370c      	adds	r7, #12
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr

08005cea <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005cea:	b480      	push	{r7}
 8005cec:	b083      	sub	sp, #12
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	2b04      	cmp	r3, #4
 8005cfc:	d106      	bne.n	8005d0c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005d04:	b2da      	uxtb	r2, r3
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005d0c:	2300      	movs	r3, #0
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	370c      	adds	r7, #12
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr

08005d1a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005d1a:	b580      	push	{r7, lr}
 8005d1c:	b082      	sub	sp, #8
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	2b03      	cmp	r3, #3
 8005d2c:	d110      	bne.n	8005d50 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d00b      	beq.n	8005d50 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d3e:	69db      	ldr	r3, [r3, #28]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d005      	beq.n	8005d50 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d4a:	69db      	ldr	r3, [r3, #28]
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005d50:	2300      	movs	r3, #0
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3708      	adds	r7, #8
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}

08005d5a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005d5a:	b580      	push	{r7, lr}
 8005d5c:	b082      	sub	sp, #8
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
 8005d62:	460b      	mov	r3, r1
 8005d64:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	32ae      	adds	r2, #174	; 0xae
 8005d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d101      	bne.n	8005d7c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005d78:	2303      	movs	r3, #3
 8005d7a:	e01c      	b.n	8005db6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	2b03      	cmp	r3, #3
 8005d86:	d115      	bne.n	8005db4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	32ae      	adds	r2, #174	; 0xae
 8005d92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d96:	6a1b      	ldr	r3, [r3, #32]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d00b      	beq.n	8005db4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	32ae      	adds	r2, #174	; 0xae
 8005da6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005daa:	6a1b      	ldr	r3, [r3, #32]
 8005dac:	78fa      	ldrb	r2, [r7, #3]
 8005dae:	4611      	mov	r1, r2
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005db4:	2300      	movs	r3, #0
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3708      	adds	r7, #8
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}

08005dbe <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005dbe:	b580      	push	{r7, lr}
 8005dc0:	b082      	sub	sp, #8
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	6078      	str	r0, [r7, #4]
 8005dc6:	460b      	mov	r3, r1
 8005dc8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	32ae      	adds	r2, #174	; 0xae
 8005dd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d101      	bne.n	8005de0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005ddc:	2303      	movs	r3, #3
 8005dde:	e01c      	b.n	8005e1a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005de6:	b2db      	uxtb	r3, r3
 8005de8:	2b03      	cmp	r3, #3
 8005dea:	d115      	bne.n	8005e18 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	32ae      	adds	r2, #174	; 0xae
 8005df6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d00b      	beq.n	8005e18 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	32ae      	adds	r2, #174	; 0xae
 8005e0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e10:	78fa      	ldrb	r2, [r7, #3]
 8005e12:	4611      	mov	r1, r2
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005e18:	2300      	movs	r3, #0
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3708      	adds	r7, #8
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}

08005e22 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005e22:	b480      	push	{r7}
 8005e24:	b083      	sub	sp, #12
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005e2a:	2300      	movs	r3, #0
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	370c      	adds	r7, #12
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr

08005e38 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b084      	sub	sp, #16
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005e40:	2300      	movs	r3, #0
 8005e42:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d00e      	beq.n	8005e74 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	687a      	ldr	r2, [r7, #4]
 8005e60:	6852      	ldr	r2, [r2, #4]
 8005e62:	b2d2      	uxtb	r2, r2
 8005e64:	4611      	mov	r1, r2
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	4798      	blx	r3
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d001      	beq.n	8005e74 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005e70:	2303      	movs	r3, #3
 8005e72:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3710      	adds	r7, #16
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}

08005e7e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005e7e:	b480      	push	{r7}
 8005e80:	b083      	sub	sp, #12
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6078      	str	r0, [r7, #4]
 8005e86:	460b      	mov	r3, r1
 8005e88:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005e8a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	370c      	adds	r7, #12
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr

08005e98 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b083      	sub	sp, #12
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	460b      	mov	r3, r1
 8005ea2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005ea4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	370c      	adds	r7, #12
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr

08005eb2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005eb2:	b580      	push	{r7, lr}
 8005eb4:	b086      	sub	sp, #24
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
 8005eba:	460b      	mov	r3, r1
 8005ebc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	885b      	ldrh	r3, [r3, #2]
 8005ece:	b29a      	uxth	r2, r3
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d920      	bls.n	8005f1c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005ee2:	e013      	b.n	8005f0c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005ee4:	f107 030a 	add.w	r3, r7, #10
 8005ee8:	4619      	mov	r1, r3
 8005eea:	6978      	ldr	r0, [r7, #20]
 8005eec:	f000 f81b 	bl	8005f26 <USBD_GetNextDesc>
 8005ef0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	785b      	ldrb	r3, [r3, #1]
 8005ef6:	2b05      	cmp	r3, #5
 8005ef8:	d108      	bne.n	8005f0c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	789b      	ldrb	r3, [r3, #2]
 8005f02:	78fa      	ldrb	r2, [r7, #3]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d008      	beq.n	8005f1a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	885b      	ldrh	r3, [r3, #2]
 8005f10:	b29a      	uxth	r2, r3
 8005f12:	897b      	ldrh	r3, [r7, #10]
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d8e5      	bhi.n	8005ee4 <USBD_GetEpDesc+0x32>
 8005f18:	e000      	b.n	8005f1c <USBD_GetEpDesc+0x6a>
          break;
 8005f1a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005f1c:	693b      	ldr	r3, [r7, #16]
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3718      	adds	r7, #24
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}

08005f26 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005f26:	b480      	push	{r7}
 8005f28:	b085      	sub	sp, #20
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	6078      	str	r0, [r7, #4]
 8005f2e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	881a      	ldrh	r2, [r3, #0]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	4413      	add	r3, r2
 8005f40:	b29a      	uxth	r2, r3
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	4413      	add	r3, r2
 8005f50:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005f52:	68fb      	ldr	r3, [r7, #12]
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3714      	adds	r7, #20
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr

08005f60 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b087      	sub	sp, #28
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	3301      	adds	r3, #1
 8005f76:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005f7e:	8a3b      	ldrh	r3, [r7, #16]
 8005f80:	021b      	lsls	r3, r3, #8
 8005f82:	b21a      	sxth	r2, r3
 8005f84:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	b21b      	sxth	r3, r3
 8005f8c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005f8e:	89fb      	ldrh	r3, [r7, #14]
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	371c      	adds	r7, #28
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b084      	sub	sp, #16
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005fb2:	2b40      	cmp	r3, #64	; 0x40
 8005fb4:	d005      	beq.n	8005fc2 <USBD_StdDevReq+0x26>
 8005fb6:	2b40      	cmp	r3, #64	; 0x40
 8005fb8:	d857      	bhi.n	800606a <USBD_StdDevReq+0xce>
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d00f      	beq.n	8005fde <USBD_StdDevReq+0x42>
 8005fbe:	2b20      	cmp	r3, #32
 8005fc0:	d153      	bne.n	800606a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	32ae      	adds	r2, #174	; 0xae
 8005fcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	6839      	ldr	r1, [r7, #0]
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	4798      	blx	r3
 8005fd8:	4603      	mov	r3, r0
 8005fda:	73fb      	strb	r3, [r7, #15]
      break;
 8005fdc:	e04a      	b.n	8006074 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	785b      	ldrb	r3, [r3, #1]
 8005fe2:	2b09      	cmp	r3, #9
 8005fe4:	d83b      	bhi.n	800605e <USBD_StdDevReq+0xc2>
 8005fe6:	a201      	add	r2, pc, #4	; (adr r2, 8005fec <USBD_StdDevReq+0x50>)
 8005fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fec:	08006041 	.word	0x08006041
 8005ff0:	08006055 	.word	0x08006055
 8005ff4:	0800605f 	.word	0x0800605f
 8005ff8:	0800604b 	.word	0x0800604b
 8005ffc:	0800605f 	.word	0x0800605f
 8006000:	0800601f 	.word	0x0800601f
 8006004:	08006015 	.word	0x08006015
 8006008:	0800605f 	.word	0x0800605f
 800600c:	08006037 	.word	0x08006037
 8006010:	08006029 	.word	0x08006029
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006014:	6839      	ldr	r1, [r7, #0]
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f000 fa3c 	bl	8006494 <USBD_GetDescriptor>
          break;
 800601c:	e024      	b.n	8006068 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800601e:	6839      	ldr	r1, [r7, #0]
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f000 fba1 	bl	8006768 <USBD_SetAddress>
          break;
 8006026:	e01f      	b.n	8006068 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006028:	6839      	ldr	r1, [r7, #0]
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 fbe0 	bl	80067f0 <USBD_SetConfig>
 8006030:	4603      	mov	r3, r0
 8006032:	73fb      	strb	r3, [r7, #15]
          break;
 8006034:	e018      	b.n	8006068 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006036:	6839      	ldr	r1, [r7, #0]
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f000 fc83 	bl	8006944 <USBD_GetConfig>
          break;
 800603e:	e013      	b.n	8006068 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006040:	6839      	ldr	r1, [r7, #0]
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 fcb4 	bl	80069b0 <USBD_GetStatus>
          break;
 8006048:	e00e      	b.n	8006068 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800604a:	6839      	ldr	r1, [r7, #0]
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f000 fce3 	bl	8006a18 <USBD_SetFeature>
          break;
 8006052:	e009      	b.n	8006068 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006054:	6839      	ldr	r1, [r7, #0]
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f000 fd07 	bl	8006a6a <USBD_ClrFeature>
          break;
 800605c:	e004      	b.n	8006068 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800605e:	6839      	ldr	r1, [r7, #0]
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f000 fd5e 	bl	8006b22 <USBD_CtlError>
          break;
 8006066:	bf00      	nop
      }
      break;
 8006068:	e004      	b.n	8006074 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800606a:	6839      	ldr	r1, [r7, #0]
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f000 fd58 	bl	8006b22 <USBD_CtlError>
      break;
 8006072:	bf00      	nop
  }

  return ret;
 8006074:	7bfb      	ldrb	r3, [r7, #15]
}
 8006076:	4618      	mov	r0, r3
 8006078:	3710      	adds	r7, #16
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop

08006080 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b084      	sub	sp, #16
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800608a:	2300      	movs	r3, #0
 800608c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006096:	2b40      	cmp	r3, #64	; 0x40
 8006098:	d005      	beq.n	80060a6 <USBD_StdItfReq+0x26>
 800609a:	2b40      	cmp	r3, #64	; 0x40
 800609c:	d852      	bhi.n	8006144 <USBD_StdItfReq+0xc4>
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d001      	beq.n	80060a6 <USBD_StdItfReq+0x26>
 80060a2:	2b20      	cmp	r3, #32
 80060a4:	d14e      	bne.n	8006144 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	3b01      	subs	r3, #1
 80060b0:	2b02      	cmp	r3, #2
 80060b2:	d840      	bhi.n	8006136 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	889b      	ldrh	r3, [r3, #4]
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d836      	bhi.n	800612c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	889b      	ldrh	r3, [r3, #4]
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	4619      	mov	r1, r3
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f7ff fed9 	bl	8005e7e <USBD_CoreFindIF>
 80060cc:	4603      	mov	r3, r0
 80060ce:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80060d0:	7bbb      	ldrb	r3, [r7, #14]
 80060d2:	2bff      	cmp	r3, #255	; 0xff
 80060d4:	d01d      	beq.n	8006112 <USBD_StdItfReq+0x92>
 80060d6:	7bbb      	ldrb	r3, [r7, #14]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d11a      	bne.n	8006112 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80060dc:	7bba      	ldrb	r2, [r7, #14]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	32ae      	adds	r2, #174	; 0xae
 80060e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d00f      	beq.n	800610c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80060ec:	7bba      	ldrb	r2, [r7, #14]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80060f4:	7bba      	ldrb	r2, [r7, #14]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	32ae      	adds	r2, #174	; 0xae
 80060fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	6839      	ldr	r1, [r7, #0]
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	4798      	blx	r3
 8006106:	4603      	mov	r3, r0
 8006108:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800610a:	e004      	b.n	8006116 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800610c:	2303      	movs	r3, #3
 800610e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006110:	e001      	b.n	8006116 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006112:	2303      	movs	r3, #3
 8006114:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	88db      	ldrh	r3, [r3, #6]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d110      	bne.n	8006140 <USBD_StdItfReq+0xc0>
 800611e:	7bfb      	ldrb	r3, [r7, #15]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d10d      	bne.n	8006140 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f000 fdc7 	bl	8006cb8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800612a:	e009      	b.n	8006140 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800612c:	6839      	ldr	r1, [r7, #0]
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f000 fcf7 	bl	8006b22 <USBD_CtlError>
          break;
 8006134:	e004      	b.n	8006140 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006136:	6839      	ldr	r1, [r7, #0]
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f000 fcf2 	bl	8006b22 <USBD_CtlError>
          break;
 800613e:	e000      	b.n	8006142 <USBD_StdItfReq+0xc2>
          break;
 8006140:	bf00      	nop
      }
      break;
 8006142:	e004      	b.n	800614e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006144:	6839      	ldr	r1, [r7, #0]
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f000 fceb 	bl	8006b22 <USBD_CtlError>
      break;
 800614c:	bf00      	nop
  }

  return ret;
 800614e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006150:	4618      	mov	r0, r3
 8006152:	3710      	adds	r7, #16
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}

08006158 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006162:	2300      	movs	r3, #0
 8006164:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	889b      	ldrh	r3, [r3, #4]
 800616a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006174:	2b40      	cmp	r3, #64	; 0x40
 8006176:	d007      	beq.n	8006188 <USBD_StdEPReq+0x30>
 8006178:	2b40      	cmp	r3, #64	; 0x40
 800617a:	f200 817f 	bhi.w	800647c <USBD_StdEPReq+0x324>
 800617e:	2b00      	cmp	r3, #0
 8006180:	d02a      	beq.n	80061d8 <USBD_StdEPReq+0x80>
 8006182:	2b20      	cmp	r3, #32
 8006184:	f040 817a 	bne.w	800647c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006188:	7bbb      	ldrb	r3, [r7, #14]
 800618a:	4619      	mov	r1, r3
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f7ff fe83 	bl	8005e98 <USBD_CoreFindEP>
 8006192:	4603      	mov	r3, r0
 8006194:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006196:	7b7b      	ldrb	r3, [r7, #13]
 8006198:	2bff      	cmp	r3, #255	; 0xff
 800619a:	f000 8174 	beq.w	8006486 <USBD_StdEPReq+0x32e>
 800619e:	7b7b      	ldrb	r3, [r7, #13]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	f040 8170 	bne.w	8006486 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80061a6:	7b7a      	ldrb	r2, [r7, #13]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80061ae:	7b7a      	ldrb	r2, [r7, #13]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	32ae      	adds	r2, #174	; 0xae
 80061b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	f000 8163 	beq.w	8006486 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80061c0:	7b7a      	ldrb	r2, [r7, #13]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	32ae      	adds	r2, #174	; 0xae
 80061c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061ca:	689b      	ldr	r3, [r3, #8]
 80061cc:	6839      	ldr	r1, [r7, #0]
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	4798      	blx	r3
 80061d2:	4603      	mov	r3, r0
 80061d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80061d6:	e156      	b.n	8006486 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	785b      	ldrb	r3, [r3, #1]
 80061dc:	2b03      	cmp	r3, #3
 80061de:	d008      	beq.n	80061f2 <USBD_StdEPReq+0x9a>
 80061e0:	2b03      	cmp	r3, #3
 80061e2:	f300 8145 	bgt.w	8006470 <USBD_StdEPReq+0x318>
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	f000 809b 	beq.w	8006322 <USBD_StdEPReq+0x1ca>
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d03c      	beq.n	800626a <USBD_StdEPReq+0x112>
 80061f0:	e13e      	b.n	8006470 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	2b02      	cmp	r3, #2
 80061fc:	d002      	beq.n	8006204 <USBD_StdEPReq+0xac>
 80061fe:	2b03      	cmp	r3, #3
 8006200:	d016      	beq.n	8006230 <USBD_StdEPReq+0xd8>
 8006202:	e02c      	b.n	800625e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006204:	7bbb      	ldrb	r3, [r7, #14]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d00d      	beq.n	8006226 <USBD_StdEPReq+0xce>
 800620a:	7bbb      	ldrb	r3, [r7, #14]
 800620c:	2b80      	cmp	r3, #128	; 0x80
 800620e:	d00a      	beq.n	8006226 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006210:	7bbb      	ldrb	r3, [r7, #14]
 8006212:	4619      	mov	r1, r3
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f003 ff29 	bl	800a06c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800621a:	2180      	movs	r1, #128	; 0x80
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f003 ff25 	bl	800a06c <USBD_LL_StallEP>
 8006222:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006224:	e020      	b.n	8006268 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006226:	6839      	ldr	r1, [r7, #0]
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f000 fc7a 	bl	8006b22 <USBD_CtlError>
              break;
 800622e:	e01b      	b.n	8006268 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	885b      	ldrh	r3, [r3, #2]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d10e      	bne.n	8006256 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006238:	7bbb      	ldrb	r3, [r7, #14]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d00b      	beq.n	8006256 <USBD_StdEPReq+0xfe>
 800623e:	7bbb      	ldrb	r3, [r7, #14]
 8006240:	2b80      	cmp	r3, #128	; 0x80
 8006242:	d008      	beq.n	8006256 <USBD_StdEPReq+0xfe>
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	88db      	ldrh	r3, [r3, #6]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d104      	bne.n	8006256 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800624c:	7bbb      	ldrb	r3, [r7, #14]
 800624e:	4619      	mov	r1, r3
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f003 ff0b 	bl	800a06c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f000 fd2e 	bl	8006cb8 <USBD_CtlSendStatus>

              break;
 800625c:	e004      	b.n	8006268 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800625e:	6839      	ldr	r1, [r7, #0]
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f000 fc5e 	bl	8006b22 <USBD_CtlError>
              break;
 8006266:	bf00      	nop
          }
          break;
 8006268:	e107      	b.n	800647a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006270:	b2db      	uxtb	r3, r3
 8006272:	2b02      	cmp	r3, #2
 8006274:	d002      	beq.n	800627c <USBD_StdEPReq+0x124>
 8006276:	2b03      	cmp	r3, #3
 8006278:	d016      	beq.n	80062a8 <USBD_StdEPReq+0x150>
 800627a:	e04b      	b.n	8006314 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800627c:	7bbb      	ldrb	r3, [r7, #14]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d00d      	beq.n	800629e <USBD_StdEPReq+0x146>
 8006282:	7bbb      	ldrb	r3, [r7, #14]
 8006284:	2b80      	cmp	r3, #128	; 0x80
 8006286:	d00a      	beq.n	800629e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006288:	7bbb      	ldrb	r3, [r7, #14]
 800628a:	4619      	mov	r1, r3
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f003 feed 	bl	800a06c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006292:	2180      	movs	r1, #128	; 0x80
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f003 fee9 	bl	800a06c <USBD_LL_StallEP>
 800629a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800629c:	e040      	b.n	8006320 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800629e:	6839      	ldr	r1, [r7, #0]
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f000 fc3e 	bl	8006b22 <USBD_CtlError>
              break;
 80062a6:	e03b      	b.n	8006320 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	885b      	ldrh	r3, [r3, #2]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d136      	bne.n	800631e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80062b0:	7bbb      	ldrb	r3, [r7, #14]
 80062b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d004      	beq.n	80062c4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80062ba:	7bbb      	ldrb	r3, [r7, #14]
 80062bc:	4619      	mov	r1, r3
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f003 fef3 	bl	800a0aa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f000 fcf7 	bl	8006cb8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80062ca:	7bbb      	ldrb	r3, [r7, #14]
 80062cc:	4619      	mov	r1, r3
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f7ff fde2 	bl	8005e98 <USBD_CoreFindEP>
 80062d4:	4603      	mov	r3, r0
 80062d6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80062d8:	7b7b      	ldrb	r3, [r7, #13]
 80062da:	2bff      	cmp	r3, #255	; 0xff
 80062dc:	d01f      	beq.n	800631e <USBD_StdEPReq+0x1c6>
 80062de:	7b7b      	ldrb	r3, [r7, #13]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d11c      	bne.n	800631e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80062e4:	7b7a      	ldrb	r2, [r7, #13]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80062ec:	7b7a      	ldrb	r2, [r7, #13]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	32ae      	adds	r2, #174	; 0xae
 80062f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d010      	beq.n	800631e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80062fc:	7b7a      	ldrb	r2, [r7, #13]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	32ae      	adds	r2, #174	; 0xae
 8006302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	6839      	ldr	r1, [r7, #0]
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	4798      	blx	r3
 800630e:	4603      	mov	r3, r0
 8006310:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006312:	e004      	b.n	800631e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006314:	6839      	ldr	r1, [r7, #0]
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f000 fc03 	bl	8006b22 <USBD_CtlError>
              break;
 800631c:	e000      	b.n	8006320 <USBD_StdEPReq+0x1c8>
              break;
 800631e:	bf00      	nop
          }
          break;
 8006320:	e0ab      	b.n	800647a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006328:	b2db      	uxtb	r3, r3
 800632a:	2b02      	cmp	r3, #2
 800632c:	d002      	beq.n	8006334 <USBD_StdEPReq+0x1dc>
 800632e:	2b03      	cmp	r3, #3
 8006330:	d032      	beq.n	8006398 <USBD_StdEPReq+0x240>
 8006332:	e097      	b.n	8006464 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006334:	7bbb      	ldrb	r3, [r7, #14]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d007      	beq.n	800634a <USBD_StdEPReq+0x1f2>
 800633a:	7bbb      	ldrb	r3, [r7, #14]
 800633c:	2b80      	cmp	r3, #128	; 0x80
 800633e:	d004      	beq.n	800634a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006340:	6839      	ldr	r1, [r7, #0]
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 fbed 	bl	8006b22 <USBD_CtlError>
                break;
 8006348:	e091      	b.n	800646e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800634a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800634e:	2b00      	cmp	r3, #0
 8006350:	da0b      	bge.n	800636a <USBD_StdEPReq+0x212>
 8006352:	7bbb      	ldrb	r3, [r7, #14]
 8006354:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006358:	4613      	mov	r3, r2
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	4413      	add	r3, r2
 800635e:	009b      	lsls	r3, r3, #2
 8006360:	3310      	adds	r3, #16
 8006362:	687a      	ldr	r2, [r7, #4]
 8006364:	4413      	add	r3, r2
 8006366:	3304      	adds	r3, #4
 8006368:	e00b      	b.n	8006382 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800636a:	7bbb      	ldrb	r3, [r7, #14]
 800636c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006370:	4613      	mov	r3, r2
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	4413      	add	r3, r2
 8006376:	009b      	lsls	r3, r3, #2
 8006378:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	4413      	add	r3, r2
 8006380:	3304      	adds	r3, #4
 8006382:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	2200      	movs	r2, #0
 8006388:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	2202      	movs	r2, #2
 800638e:	4619      	mov	r1, r3
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f000 fc37 	bl	8006c04 <USBD_CtlSendData>
              break;
 8006396:	e06a      	b.n	800646e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006398:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800639c:	2b00      	cmp	r3, #0
 800639e:	da11      	bge.n	80063c4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80063a0:	7bbb      	ldrb	r3, [r7, #14]
 80063a2:	f003 020f 	and.w	r2, r3, #15
 80063a6:	6879      	ldr	r1, [r7, #4]
 80063a8:	4613      	mov	r3, r2
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	4413      	add	r3, r2
 80063ae:	009b      	lsls	r3, r3, #2
 80063b0:	440b      	add	r3, r1
 80063b2:	3324      	adds	r3, #36	; 0x24
 80063b4:	881b      	ldrh	r3, [r3, #0]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d117      	bne.n	80063ea <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80063ba:	6839      	ldr	r1, [r7, #0]
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f000 fbb0 	bl	8006b22 <USBD_CtlError>
                  break;
 80063c2:	e054      	b.n	800646e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80063c4:	7bbb      	ldrb	r3, [r7, #14]
 80063c6:	f003 020f 	and.w	r2, r3, #15
 80063ca:	6879      	ldr	r1, [r7, #4]
 80063cc:	4613      	mov	r3, r2
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	4413      	add	r3, r2
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	440b      	add	r3, r1
 80063d6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80063da:	881b      	ldrh	r3, [r3, #0]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d104      	bne.n	80063ea <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80063e0:	6839      	ldr	r1, [r7, #0]
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 fb9d 	bl	8006b22 <USBD_CtlError>
                  break;
 80063e8:	e041      	b.n	800646e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80063ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	da0b      	bge.n	800640a <USBD_StdEPReq+0x2b2>
 80063f2:	7bbb      	ldrb	r3, [r7, #14]
 80063f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80063f8:	4613      	mov	r3, r2
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	4413      	add	r3, r2
 80063fe:	009b      	lsls	r3, r3, #2
 8006400:	3310      	adds	r3, #16
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	4413      	add	r3, r2
 8006406:	3304      	adds	r3, #4
 8006408:	e00b      	b.n	8006422 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800640a:	7bbb      	ldrb	r3, [r7, #14]
 800640c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006410:	4613      	mov	r3, r2
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	4413      	add	r3, r2
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	4413      	add	r3, r2
 8006420:	3304      	adds	r3, #4
 8006422:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006424:	7bbb      	ldrb	r3, [r7, #14]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d002      	beq.n	8006430 <USBD_StdEPReq+0x2d8>
 800642a:	7bbb      	ldrb	r3, [r7, #14]
 800642c:	2b80      	cmp	r3, #128	; 0x80
 800642e:	d103      	bne.n	8006438 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	2200      	movs	r2, #0
 8006434:	601a      	str	r2, [r3, #0]
 8006436:	e00e      	b.n	8006456 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006438:	7bbb      	ldrb	r3, [r7, #14]
 800643a:	4619      	mov	r1, r3
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f003 fe53 	bl	800a0e8 <USBD_LL_IsStallEP>
 8006442:	4603      	mov	r3, r0
 8006444:	2b00      	cmp	r3, #0
 8006446:	d003      	beq.n	8006450 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	2201      	movs	r2, #1
 800644c:	601a      	str	r2, [r3, #0]
 800644e:	e002      	b.n	8006456 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	2200      	movs	r2, #0
 8006454:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	2202      	movs	r2, #2
 800645a:	4619      	mov	r1, r3
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 fbd1 	bl	8006c04 <USBD_CtlSendData>
              break;
 8006462:	e004      	b.n	800646e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006464:	6839      	ldr	r1, [r7, #0]
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 fb5b 	bl	8006b22 <USBD_CtlError>
              break;
 800646c:	bf00      	nop
          }
          break;
 800646e:	e004      	b.n	800647a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006470:	6839      	ldr	r1, [r7, #0]
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 fb55 	bl	8006b22 <USBD_CtlError>
          break;
 8006478:	bf00      	nop
      }
      break;
 800647a:	e005      	b.n	8006488 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800647c:	6839      	ldr	r1, [r7, #0]
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f000 fb4f 	bl	8006b22 <USBD_CtlError>
      break;
 8006484:	e000      	b.n	8006488 <USBD_StdEPReq+0x330>
      break;
 8006486:	bf00      	nop
  }

  return ret;
 8006488:	7bfb      	ldrb	r3, [r7, #15]
}
 800648a:	4618      	mov	r0, r3
 800648c:	3710      	adds	r7, #16
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}
	...

08006494 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b084      	sub	sp, #16
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800649e:	2300      	movs	r3, #0
 80064a0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80064a2:	2300      	movs	r3, #0
 80064a4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80064a6:	2300      	movs	r3, #0
 80064a8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	885b      	ldrh	r3, [r3, #2]
 80064ae:	0a1b      	lsrs	r3, r3, #8
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	3b01      	subs	r3, #1
 80064b4:	2b06      	cmp	r3, #6
 80064b6:	f200 8128 	bhi.w	800670a <USBD_GetDescriptor+0x276>
 80064ba:	a201      	add	r2, pc, #4	; (adr r2, 80064c0 <USBD_GetDescriptor+0x2c>)
 80064bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c0:	080064dd 	.word	0x080064dd
 80064c4:	080064f5 	.word	0x080064f5
 80064c8:	08006535 	.word	0x08006535
 80064cc:	0800670b 	.word	0x0800670b
 80064d0:	0800670b 	.word	0x0800670b
 80064d4:	080066ab 	.word	0x080066ab
 80064d8:	080066d7 	.word	0x080066d7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	7c12      	ldrb	r2, [r2, #16]
 80064e8:	f107 0108 	add.w	r1, r7, #8
 80064ec:	4610      	mov	r0, r2
 80064ee:	4798      	blx	r3
 80064f0:	60f8      	str	r0, [r7, #12]
      break;
 80064f2:	e112      	b.n	800671a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	7c1b      	ldrb	r3, [r3, #16]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d10d      	bne.n	8006518 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006504:	f107 0208 	add.w	r2, r7, #8
 8006508:	4610      	mov	r0, r2
 800650a:	4798      	blx	r3
 800650c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	3301      	adds	r3, #1
 8006512:	2202      	movs	r2, #2
 8006514:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006516:	e100      	b.n	800671a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800651e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006520:	f107 0208 	add.w	r2, r7, #8
 8006524:	4610      	mov	r0, r2
 8006526:	4798      	blx	r3
 8006528:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	3301      	adds	r3, #1
 800652e:	2202      	movs	r2, #2
 8006530:	701a      	strb	r2, [r3, #0]
      break;
 8006532:	e0f2      	b.n	800671a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	885b      	ldrh	r3, [r3, #2]
 8006538:	b2db      	uxtb	r3, r3
 800653a:	2b05      	cmp	r3, #5
 800653c:	f200 80ac 	bhi.w	8006698 <USBD_GetDescriptor+0x204>
 8006540:	a201      	add	r2, pc, #4	; (adr r2, 8006548 <USBD_GetDescriptor+0xb4>)
 8006542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006546:	bf00      	nop
 8006548:	08006561 	.word	0x08006561
 800654c:	08006595 	.word	0x08006595
 8006550:	080065c9 	.word	0x080065c9
 8006554:	080065fd 	.word	0x080065fd
 8006558:	08006631 	.word	0x08006631
 800655c:	08006665 	.word	0x08006665
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d00b      	beq.n	8006584 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	7c12      	ldrb	r2, [r2, #16]
 8006578:	f107 0108 	add.w	r1, r7, #8
 800657c:	4610      	mov	r0, r2
 800657e:	4798      	blx	r3
 8006580:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006582:	e091      	b.n	80066a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006584:	6839      	ldr	r1, [r7, #0]
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 facb 	bl	8006b22 <USBD_CtlError>
            err++;
 800658c:	7afb      	ldrb	r3, [r7, #11]
 800658e:	3301      	adds	r3, #1
 8006590:	72fb      	strb	r3, [r7, #11]
          break;
 8006592:	e089      	b.n	80066a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d00b      	beq.n	80065b8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	7c12      	ldrb	r2, [r2, #16]
 80065ac:	f107 0108 	add.w	r1, r7, #8
 80065b0:	4610      	mov	r0, r2
 80065b2:	4798      	blx	r3
 80065b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80065b6:	e077      	b.n	80066a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80065b8:	6839      	ldr	r1, [r7, #0]
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f000 fab1 	bl	8006b22 <USBD_CtlError>
            err++;
 80065c0:	7afb      	ldrb	r3, [r7, #11]
 80065c2:	3301      	adds	r3, #1
 80065c4:	72fb      	strb	r3, [r7, #11]
          break;
 80065c6:	e06f      	b.n	80066a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065ce:	68db      	ldr	r3, [r3, #12]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d00b      	beq.n	80065ec <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	7c12      	ldrb	r2, [r2, #16]
 80065e0:	f107 0108 	add.w	r1, r7, #8
 80065e4:	4610      	mov	r0, r2
 80065e6:	4798      	blx	r3
 80065e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80065ea:	e05d      	b.n	80066a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80065ec:	6839      	ldr	r1, [r7, #0]
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f000 fa97 	bl	8006b22 <USBD_CtlError>
            err++;
 80065f4:	7afb      	ldrb	r3, [r7, #11]
 80065f6:	3301      	adds	r3, #1
 80065f8:	72fb      	strb	r3, [r7, #11]
          break;
 80065fa:	e055      	b.n	80066a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006602:	691b      	ldr	r3, [r3, #16]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d00b      	beq.n	8006620 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800660e:	691b      	ldr	r3, [r3, #16]
 8006610:	687a      	ldr	r2, [r7, #4]
 8006612:	7c12      	ldrb	r2, [r2, #16]
 8006614:	f107 0108 	add.w	r1, r7, #8
 8006618:	4610      	mov	r0, r2
 800661a:	4798      	blx	r3
 800661c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800661e:	e043      	b.n	80066a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006620:	6839      	ldr	r1, [r7, #0]
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f000 fa7d 	bl	8006b22 <USBD_CtlError>
            err++;
 8006628:	7afb      	ldrb	r3, [r7, #11]
 800662a:	3301      	adds	r3, #1
 800662c:	72fb      	strb	r3, [r7, #11]
          break;
 800662e:	e03b      	b.n	80066a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006636:	695b      	ldr	r3, [r3, #20]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d00b      	beq.n	8006654 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006642:	695b      	ldr	r3, [r3, #20]
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	7c12      	ldrb	r2, [r2, #16]
 8006648:	f107 0108 	add.w	r1, r7, #8
 800664c:	4610      	mov	r0, r2
 800664e:	4798      	blx	r3
 8006650:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006652:	e029      	b.n	80066a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006654:	6839      	ldr	r1, [r7, #0]
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 fa63 	bl	8006b22 <USBD_CtlError>
            err++;
 800665c:	7afb      	ldrb	r3, [r7, #11]
 800665e:	3301      	adds	r3, #1
 8006660:	72fb      	strb	r3, [r7, #11]
          break;
 8006662:	e021      	b.n	80066a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800666a:	699b      	ldr	r3, [r3, #24]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d00b      	beq.n	8006688 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006676:	699b      	ldr	r3, [r3, #24]
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	7c12      	ldrb	r2, [r2, #16]
 800667c:	f107 0108 	add.w	r1, r7, #8
 8006680:	4610      	mov	r0, r2
 8006682:	4798      	blx	r3
 8006684:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006686:	e00f      	b.n	80066a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006688:	6839      	ldr	r1, [r7, #0]
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f000 fa49 	bl	8006b22 <USBD_CtlError>
            err++;
 8006690:	7afb      	ldrb	r3, [r7, #11]
 8006692:	3301      	adds	r3, #1
 8006694:	72fb      	strb	r3, [r7, #11]
          break;
 8006696:	e007      	b.n	80066a8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006698:	6839      	ldr	r1, [r7, #0]
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 fa41 	bl	8006b22 <USBD_CtlError>
          err++;
 80066a0:	7afb      	ldrb	r3, [r7, #11]
 80066a2:	3301      	adds	r3, #1
 80066a4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80066a6:	bf00      	nop
      }
      break;
 80066a8:	e037      	b.n	800671a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	7c1b      	ldrb	r3, [r3, #16]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d109      	bne.n	80066c6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066ba:	f107 0208 	add.w	r2, r7, #8
 80066be:	4610      	mov	r0, r2
 80066c0:	4798      	blx	r3
 80066c2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80066c4:	e029      	b.n	800671a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80066c6:	6839      	ldr	r1, [r7, #0]
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f000 fa2a 	bl	8006b22 <USBD_CtlError>
        err++;
 80066ce:	7afb      	ldrb	r3, [r7, #11]
 80066d0:	3301      	adds	r3, #1
 80066d2:	72fb      	strb	r3, [r7, #11]
      break;
 80066d4:	e021      	b.n	800671a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	7c1b      	ldrb	r3, [r3, #16]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d10d      	bne.n	80066fa <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066e6:	f107 0208 	add.w	r2, r7, #8
 80066ea:	4610      	mov	r0, r2
 80066ec:	4798      	blx	r3
 80066ee:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	3301      	adds	r3, #1
 80066f4:	2207      	movs	r2, #7
 80066f6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80066f8:	e00f      	b.n	800671a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80066fa:	6839      	ldr	r1, [r7, #0]
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f000 fa10 	bl	8006b22 <USBD_CtlError>
        err++;
 8006702:	7afb      	ldrb	r3, [r7, #11]
 8006704:	3301      	adds	r3, #1
 8006706:	72fb      	strb	r3, [r7, #11]
      break;
 8006708:	e007      	b.n	800671a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800670a:	6839      	ldr	r1, [r7, #0]
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f000 fa08 	bl	8006b22 <USBD_CtlError>
      err++;
 8006712:	7afb      	ldrb	r3, [r7, #11]
 8006714:	3301      	adds	r3, #1
 8006716:	72fb      	strb	r3, [r7, #11]
      break;
 8006718:	bf00      	nop
  }

  if (err != 0U)
 800671a:	7afb      	ldrb	r3, [r7, #11]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d11e      	bne.n	800675e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	88db      	ldrh	r3, [r3, #6]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d016      	beq.n	8006756 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006728:	893b      	ldrh	r3, [r7, #8]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d00e      	beq.n	800674c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	88da      	ldrh	r2, [r3, #6]
 8006732:	893b      	ldrh	r3, [r7, #8]
 8006734:	4293      	cmp	r3, r2
 8006736:	bf28      	it	cs
 8006738:	4613      	movcs	r3, r2
 800673a:	b29b      	uxth	r3, r3
 800673c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800673e:	893b      	ldrh	r3, [r7, #8]
 8006740:	461a      	mov	r2, r3
 8006742:	68f9      	ldr	r1, [r7, #12]
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f000 fa5d 	bl	8006c04 <USBD_CtlSendData>
 800674a:	e009      	b.n	8006760 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800674c:	6839      	ldr	r1, [r7, #0]
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 f9e7 	bl	8006b22 <USBD_CtlError>
 8006754:	e004      	b.n	8006760 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f000 faae 	bl	8006cb8 <USBD_CtlSendStatus>
 800675c:	e000      	b.n	8006760 <USBD_GetDescriptor+0x2cc>
    return;
 800675e:	bf00      	nop
  }
}
 8006760:	3710      	adds	r7, #16
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}
 8006766:	bf00      	nop

08006768 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b084      	sub	sp, #16
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	889b      	ldrh	r3, [r3, #4]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d131      	bne.n	80067de <USBD_SetAddress+0x76>
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	88db      	ldrh	r3, [r3, #6]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d12d      	bne.n	80067de <USBD_SetAddress+0x76>
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	885b      	ldrh	r3, [r3, #2]
 8006786:	2b7f      	cmp	r3, #127	; 0x7f
 8006788:	d829      	bhi.n	80067de <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	885b      	ldrh	r3, [r3, #2]
 800678e:	b2db      	uxtb	r3, r3
 8006790:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006794:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800679c:	b2db      	uxtb	r3, r3
 800679e:	2b03      	cmp	r3, #3
 80067a0:	d104      	bne.n	80067ac <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80067a2:	6839      	ldr	r1, [r7, #0]
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f000 f9bc 	bl	8006b22 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067aa:	e01d      	b.n	80067e8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	7bfa      	ldrb	r2, [r7, #15]
 80067b0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80067b4:	7bfb      	ldrb	r3, [r7, #15]
 80067b6:	4619      	mov	r1, r3
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f003 fcc1 	bl	800a140 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 fa7a 	bl	8006cb8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80067c4:	7bfb      	ldrb	r3, [r7, #15]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d004      	beq.n	80067d4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2202      	movs	r2, #2
 80067ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067d2:	e009      	b.n	80067e8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067dc:	e004      	b.n	80067e8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80067de:	6839      	ldr	r1, [r7, #0]
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f000 f99e 	bl	8006b22 <USBD_CtlError>
  }
}
 80067e6:	bf00      	nop
 80067e8:	bf00      	nop
 80067ea:	3710      	adds	r7, #16
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b084      	sub	sp, #16
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80067fa:	2300      	movs	r3, #0
 80067fc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	885b      	ldrh	r3, [r3, #2]
 8006802:	b2da      	uxtb	r2, r3
 8006804:	4b4e      	ldr	r3, [pc, #312]	; (8006940 <USBD_SetConfig+0x150>)
 8006806:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006808:	4b4d      	ldr	r3, [pc, #308]	; (8006940 <USBD_SetConfig+0x150>)
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	2b01      	cmp	r3, #1
 800680e:	d905      	bls.n	800681c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006810:	6839      	ldr	r1, [r7, #0]
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f000 f985 	bl	8006b22 <USBD_CtlError>
    return USBD_FAIL;
 8006818:	2303      	movs	r3, #3
 800681a:	e08c      	b.n	8006936 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006822:	b2db      	uxtb	r3, r3
 8006824:	2b02      	cmp	r3, #2
 8006826:	d002      	beq.n	800682e <USBD_SetConfig+0x3e>
 8006828:	2b03      	cmp	r3, #3
 800682a:	d029      	beq.n	8006880 <USBD_SetConfig+0x90>
 800682c:	e075      	b.n	800691a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800682e:	4b44      	ldr	r3, [pc, #272]	; (8006940 <USBD_SetConfig+0x150>)
 8006830:	781b      	ldrb	r3, [r3, #0]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d020      	beq.n	8006878 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006836:	4b42      	ldr	r3, [pc, #264]	; (8006940 <USBD_SetConfig+0x150>)
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	461a      	mov	r2, r3
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006840:	4b3f      	ldr	r3, [pc, #252]	; (8006940 <USBD_SetConfig+0x150>)
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	4619      	mov	r1, r3
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f7fe ffe7 	bl	800581a <USBD_SetClassConfig>
 800684c:	4603      	mov	r3, r0
 800684e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006850:	7bfb      	ldrb	r3, [r7, #15]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d008      	beq.n	8006868 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006856:	6839      	ldr	r1, [r7, #0]
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f000 f962 	bl	8006b22 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2202      	movs	r2, #2
 8006862:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006866:	e065      	b.n	8006934 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f000 fa25 	bl	8006cb8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2203      	movs	r2, #3
 8006872:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006876:	e05d      	b.n	8006934 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f000 fa1d 	bl	8006cb8 <USBD_CtlSendStatus>
      break;
 800687e:	e059      	b.n	8006934 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006880:	4b2f      	ldr	r3, [pc, #188]	; (8006940 <USBD_SetConfig+0x150>)
 8006882:	781b      	ldrb	r3, [r3, #0]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d112      	bne.n	80068ae <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2202      	movs	r2, #2
 800688c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006890:	4b2b      	ldr	r3, [pc, #172]	; (8006940 <USBD_SetConfig+0x150>)
 8006892:	781b      	ldrb	r3, [r3, #0]
 8006894:	461a      	mov	r2, r3
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800689a:	4b29      	ldr	r3, [pc, #164]	; (8006940 <USBD_SetConfig+0x150>)
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	4619      	mov	r1, r3
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f7fe ffd6 	bl	8005852 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 fa06 	bl	8006cb8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80068ac:	e042      	b.n	8006934 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80068ae:	4b24      	ldr	r3, [pc, #144]	; (8006940 <USBD_SetConfig+0x150>)
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	461a      	mov	r2, r3
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d02a      	beq.n	8006912 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	b2db      	uxtb	r3, r3
 80068c2:	4619      	mov	r1, r3
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f7fe ffc4 	bl	8005852 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80068ca:	4b1d      	ldr	r3, [pc, #116]	; (8006940 <USBD_SetConfig+0x150>)
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	461a      	mov	r2, r3
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80068d4:	4b1a      	ldr	r3, [pc, #104]	; (8006940 <USBD_SetConfig+0x150>)
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	4619      	mov	r1, r3
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f7fe ff9d 	bl	800581a <USBD_SetClassConfig>
 80068e0:	4603      	mov	r3, r0
 80068e2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80068e4:	7bfb      	ldrb	r3, [r7, #15]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d00f      	beq.n	800690a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80068ea:	6839      	ldr	r1, [r7, #0]
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f000 f918 	bl	8006b22 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	4619      	mov	r1, r3
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f7fe ffa9 	bl	8005852 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2202      	movs	r2, #2
 8006904:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006908:	e014      	b.n	8006934 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f000 f9d4 	bl	8006cb8 <USBD_CtlSendStatus>
      break;
 8006910:	e010      	b.n	8006934 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 f9d0 	bl	8006cb8 <USBD_CtlSendStatus>
      break;
 8006918:	e00c      	b.n	8006934 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800691a:	6839      	ldr	r1, [r7, #0]
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f000 f900 	bl	8006b22 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006922:	4b07      	ldr	r3, [pc, #28]	; (8006940 <USBD_SetConfig+0x150>)
 8006924:	781b      	ldrb	r3, [r3, #0]
 8006926:	4619      	mov	r1, r3
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f7fe ff92 	bl	8005852 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800692e:	2303      	movs	r3, #3
 8006930:	73fb      	strb	r3, [r7, #15]
      break;
 8006932:	bf00      	nop
  }

  return ret;
 8006934:	7bfb      	ldrb	r3, [r7, #15]
}
 8006936:	4618      	mov	r0, r3
 8006938:	3710      	adds	r7, #16
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
 800693e:	bf00      	nop
 8006940:	200001e0 	.word	0x200001e0

08006944 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b082      	sub	sp, #8
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	88db      	ldrh	r3, [r3, #6]
 8006952:	2b01      	cmp	r3, #1
 8006954:	d004      	beq.n	8006960 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006956:	6839      	ldr	r1, [r7, #0]
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f000 f8e2 	bl	8006b22 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800695e:	e023      	b.n	80069a8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006966:	b2db      	uxtb	r3, r3
 8006968:	2b02      	cmp	r3, #2
 800696a:	dc02      	bgt.n	8006972 <USBD_GetConfig+0x2e>
 800696c:	2b00      	cmp	r3, #0
 800696e:	dc03      	bgt.n	8006978 <USBD_GetConfig+0x34>
 8006970:	e015      	b.n	800699e <USBD_GetConfig+0x5a>
 8006972:	2b03      	cmp	r3, #3
 8006974:	d00b      	beq.n	800698e <USBD_GetConfig+0x4a>
 8006976:	e012      	b.n	800699e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2200      	movs	r2, #0
 800697c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	3308      	adds	r3, #8
 8006982:	2201      	movs	r2, #1
 8006984:	4619      	mov	r1, r3
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f000 f93c 	bl	8006c04 <USBD_CtlSendData>
        break;
 800698c:	e00c      	b.n	80069a8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	3304      	adds	r3, #4
 8006992:	2201      	movs	r2, #1
 8006994:	4619      	mov	r1, r3
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 f934 	bl	8006c04 <USBD_CtlSendData>
        break;
 800699c:	e004      	b.n	80069a8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800699e:	6839      	ldr	r1, [r7, #0]
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f000 f8be 	bl	8006b22 <USBD_CtlError>
        break;
 80069a6:	bf00      	nop
}
 80069a8:	bf00      	nop
 80069aa:	3708      	adds	r7, #8
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}

080069b0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b082      	sub	sp, #8
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069c0:	b2db      	uxtb	r3, r3
 80069c2:	3b01      	subs	r3, #1
 80069c4:	2b02      	cmp	r3, #2
 80069c6:	d81e      	bhi.n	8006a06 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	88db      	ldrh	r3, [r3, #6]
 80069cc:	2b02      	cmp	r3, #2
 80069ce:	d004      	beq.n	80069da <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80069d0:	6839      	ldr	r1, [r7, #0]
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 f8a5 	bl	8006b22 <USBD_CtlError>
        break;
 80069d8:	e01a      	b.n	8006a10 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2201      	movs	r2, #1
 80069de:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d005      	beq.n	80069f6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	68db      	ldr	r3, [r3, #12]
 80069ee:	f043 0202 	orr.w	r2, r3, #2
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	330c      	adds	r3, #12
 80069fa:	2202      	movs	r2, #2
 80069fc:	4619      	mov	r1, r3
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 f900 	bl	8006c04 <USBD_CtlSendData>
      break;
 8006a04:	e004      	b.n	8006a10 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006a06:	6839      	ldr	r1, [r7, #0]
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f000 f88a 	bl	8006b22 <USBD_CtlError>
      break;
 8006a0e:	bf00      	nop
  }
}
 8006a10:	bf00      	nop
 8006a12:	3708      	adds	r7, #8
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}

08006a18 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b082      	sub	sp, #8
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	885b      	ldrh	r3, [r3, #2]
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d107      	bne.n	8006a3a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 f940 	bl	8006cb8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006a38:	e013      	b.n	8006a62 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	885b      	ldrh	r3, [r3, #2]
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	d10b      	bne.n	8006a5a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	889b      	ldrh	r3, [r3, #4]
 8006a46:	0a1b      	lsrs	r3, r3, #8
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	b2da      	uxtb	r2, r3
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 f930 	bl	8006cb8 <USBD_CtlSendStatus>
}
 8006a58:	e003      	b.n	8006a62 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006a5a:	6839      	ldr	r1, [r7, #0]
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f000 f860 	bl	8006b22 <USBD_CtlError>
}
 8006a62:	bf00      	nop
 8006a64:	3708      	adds	r7, #8
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}

08006a6a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a6a:	b580      	push	{r7, lr}
 8006a6c:	b082      	sub	sp, #8
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
 8006a72:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a7a:	b2db      	uxtb	r3, r3
 8006a7c:	3b01      	subs	r3, #1
 8006a7e:	2b02      	cmp	r3, #2
 8006a80:	d80b      	bhi.n	8006a9a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	885b      	ldrh	r3, [r3, #2]
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d10c      	bne.n	8006aa4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 f910 	bl	8006cb8 <USBD_CtlSendStatus>
      }
      break;
 8006a98:	e004      	b.n	8006aa4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006a9a:	6839      	ldr	r1, [r7, #0]
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f000 f840 	bl	8006b22 <USBD_CtlError>
      break;
 8006aa2:	e000      	b.n	8006aa6 <USBD_ClrFeature+0x3c>
      break;
 8006aa4:	bf00      	nop
  }
}
 8006aa6:	bf00      	nop
 8006aa8:	3708      	adds	r7, #8
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}

08006aae <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006aae:	b580      	push	{r7, lr}
 8006ab0:	b084      	sub	sp, #16
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	6078      	str	r0, [r7, #4]
 8006ab6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	781a      	ldrb	r2, [r3, #0]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	3301      	adds	r3, #1
 8006ac8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	781a      	ldrb	r2, [r3, #0]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	3301      	adds	r3, #1
 8006ad6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006ad8:	68f8      	ldr	r0, [r7, #12]
 8006ada:	f7ff fa41 	bl	8005f60 <SWAPBYTE>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	3301      	adds	r3, #1
 8006aea:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	3301      	adds	r3, #1
 8006af0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006af2:	68f8      	ldr	r0, [r7, #12]
 8006af4:	f7ff fa34 	bl	8005f60 <SWAPBYTE>
 8006af8:	4603      	mov	r3, r0
 8006afa:	461a      	mov	r2, r3
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	3301      	adds	r3, #1
 8006b04:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	3301      	adds	r3, #1
 8006b0a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006b0c:	68f8      	ldr	r0, [r7, #12]
 8006b0e:	f7ff fa27 	bl	8005f60 <SWAPBYTE>
 8006b12:	4603      	mov	r3, r0
 8006b14:	461a      	mov	r2, r3
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	80da      	strh	r2, [r3, #6]
}
 8006b1a:	bf00      	nop
 8006b1c:	3710      	adds	r7, #16
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}

08006b22 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b22:	b580      	push	{r7, lr}
 8006b24:	b082      	sub	sp, #8
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
 8006b2a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b2c:	2180      	movs	r1, #128	; 0x80
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f003 fa9c 	bl	800a06c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006b34:	2100      	movs	r1, #0
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f003 fa98 	bl	800a06c <USBD_LL_StallEP>
}
 8006b3c:	bf00      	nop
 8006b3e:	3708      	adds	r7, #8
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}

08006b44 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b086      	sub	sp, #24
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	60f8      	str	r0, [r7, #12]
 8006b4c:	60b9      	str	r1, [r7, #8]
 8006b4e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006b50:	2300      	movs	r3, #0
 8006b52:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d036      	beq.n	8006bc8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006b5e:	6938      	ldr	r0, [r7, #16]
 8006b60:	f000 f836 	bl	8006bd0 <USBD_GetLen>
 8006b64:	4603      	mov	r3, r0
 8006b66:	3301      	adds	r3, #1
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	005b      	lsls	r3, r3, #1
 8006b6c:	b29a      	uxth	r2, r3
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006b72:	7dfb      	ldrb	r3, [r7, #23]
 8006b74:	68ba      	ldr	r2, [r7, #8]
 8006b76:	4413      	add	r3, r2
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	7812      	ldrb	r2, [r2, #0]
 8006b7c:	701a      	strb	r2, [r3, #0]
  idx++;
 8006b7e:	7dfb      	ldrb	r3, [r7, #23]
 8006b80:	3301      	adds	r3, #1
 8006b82:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006b84:	7dfb      	ldrb	r3, [r7, #23]
 8006b86:	68ba      	ldr	r2, [r7, #8]
 8006b88:	4413      	add	r3, r2
 8006b8a:	2203      	movs	r2, #3
 8006b8c:	701a      	strb	r2, [r3, #0]
  idx++;
 8006b8e:	7dfb      	ldrb	r3, [r7, #23]
 8006b90:	3301      	adds	r3, #1
 8006b92:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006b94:	e013      	b.n	8006bbe <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006b96:	7dfb      	ldrb	r3, [r7, #23]
 8006b98:	68ba      	ldr	r2, [r7, #8]
 8006b9a:	4413      	add	r3, r2
 8006b9c:	693a      	ldr	r2, [r7, #16]
 8006b9e:	7812      	ldrb	r2, [r2, #0]
 8006ba0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	3301      	adds	r3, #1
 8006ba6:	613b      	str	r3, [r7, #16]
    idx++;
 8006ba8:	7dfb      	ldrb	r3, [r7, #23]
 8006baa:	3301      	adds	r3, #1
 8006bac:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006bae:	7dfb      	ldrb	r3, [r7, #23]
 8006bb0:	68ba      	ldr	r2, [r7, #8]
 8006bb2:	4413      	add	r3, r2
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	701a      	strb	r2, [r3, #0]
    idx++;
 8006bb8:	7dfb      	ldrb	r3, [r7, #23]
 8006bba:	3301      	adds	r3, #1
 8006bbc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d1e7      	bne.n	8006b96 <USBD_GetString+0x52>
 8006bc6:	e000      	b.n	8006bca <USBD_GetString+0x86>
    return;
 8006bc8:	bf00      	nop
  }
}
 8006bca:	3718      	adds	r7, #24
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}

08006bd0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b085      	sub	sp, #20
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006be0:	e005      	b.n	8006bee <USBD_GetLen+0x1e>
  {
    len++;
 8006be2:	7bfb      	ldrb	r3, [r7, #15]
 8006be4:	3301      	adds	r3, #1
 8006be6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	3301      	adds	r3, #1
 8006bec:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d1f5      	bne.n	8006be2 <USBD_GetLen+0x12>
  }

  return len;
 8006bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3714      	adds	r7, #20
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr

08006c04 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b084      	sub	sp, #16
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	60f8      	str	r0, [r7, #12]
 8006c0c:	60b9      	str	r1, [r7, #8]
 8006c0e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2202      	movs	r2, #2
 8006c14:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	687a      	ldr	r2, [r7, #4]
 8006c1c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	687a      	ldr	r2, [r7, #4]
 8006c22:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	68ba      	ldr	r2, [r7, #8]
 8006c28:	2100      	movs	r1, #0
 8006c2a:	68f8      	ldr	r0, [r7, #12]
 8006c2c:	f003 faa7 	bl	800a17e <USBD_LL_Transmit>

  return USBD_OK;
 8006c30:	2300      	movs	r3, #0
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3710      	adds	r7, #16
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}

08006c3a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006c3a:	b580      	push	{r7, lr}
 8006c3c:	b084      	sub	sp, #16
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	60f8      	str	r0, [r7, #12]
 8006c42:	60b9      	str	r1, [r7, #8]
 8006c44:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	68ba      	ldr	r2, [r7, #8]
 8006c4a:	2100      	movs	r1, #0
 8006c4c:	68f8      	ldr	r0, [r7, #12]
 8006c4e:	f003 fa96 	bl	800a17e <USBD_LL_Transmit>

  return USBD_OK;
 8006c52:	2300      	movs	r3, #0
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3710      	adds	r7, #16
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}

08006c5c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b084      	sub	sp, #16
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	60f8      	str	r0, [r7, #12]
 8006c64:	60b9      	str	r1, [r7, #8]
 8006c66:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2203      	movs	r2, #3
 8006c6c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	68ba      	ldr	r2, [r7, #8]
 8006c84:	2100      	movs	r1, #0
 8006c86:	68f8      	ldr	r0, [r7, #12]
 8006c88:	f003 fa9a 	bl	800a1c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006c8c:	2300      	movs	r3, #0
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3710      	adds	r7, #16
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}

08006c96 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006c96:	b580      	push	{r7, lr}
 8006c98:	b084      	sub	sp, #16
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	60f8      	str	r0, [r7, #12]
 8006c9e:	60b9      	str	r1, [r7, #8]
 8006ca0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	68ba      	ldr	r2, [r7, #8]
 8006ca6:	2100      	movs	r1, #0
 8006ca8:	68f8      	ldr	r0, [r7, #12]
 8006caa:	f003 fa89 	bl	800a1c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006cae:	2300      	movs	r3, #0
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3710      	adds	r7, #16
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}

08006cb8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b082      	sub	sp, #8
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2204      	movs	r2, #4
 8006cc4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006cc8:	2300      	movs	r3, #0
 8006cca:	2200      	movs	r2, #0
 8006ccc:	2100      	movs	r1, #0
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f003 fa55 	bl	800a17e <USBD_LL_Transmit>

  return USBD_OK;
 8006cd4:	2300      	movs	r3, #0
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3708      	adds	r7, #8
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}

08006cde <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006cde:	b580      	push	{r7, lr}
 8006ce0:	b082      	sub	sp, #8
 8006ce2:	af00      	add	r7, sp, #0
 8006ce4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2205      	movs	r2, #5
 8006cea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006cee:	2300      	movs	r3, #0
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	2100      	movs	r1, #0
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f003 fa63 	bl	800a1c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006cfa:	2300      	movs	r3, #0
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	3708      	adds	r7, #8
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}

08006d04 <__NVIC_SetPriority>:
{
 8006d04:	b480      	push	{r7}
 8006d06:	b083      	sub	sp, #12
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	6039      	str	r1, [r7, #0]
 8006d0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	db0a      	blt.n	8006d2e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	b2da      	uxtb	r2, r3
 8006d1c:	490c      	ldr	r1, [pc, #48]	; (8006d50 <__NVIC_SetPriority+0x4c>)
 8006d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d22:	0112      	lsls	r2, r2, #4
 8006d24:	b2d2      	uxtb	r2, r2
 8006d26:	440b      	add	r3, r1
 8006d28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006d2c:	e00a      	b.n	8006d44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	b2da      	uxtb	r2, r3
 8006d32:	4908      	ldr	r1, [pc, #32]	; (8006d54 <__NVIC_SetPriority+0x50>)
 8006d34:	79fb      	ldrb	r3, [r7, #7]
 8006d36:	f003 030f 	and.w	r3, r3, #15
 8006d3a:	3b04      	subs	r3, #4
 8006d3c:	0112      	lsls	r2, r2, #4
 8006d3e:	b2d2      	uxtb	r2, r2
 8006d40:	440b      	add	r3, r1
 8006d42:	761a      	strb	r2, [r3, #24]
}
 8006d44:	bf00      	nop
 8006d46:	370c      	adds	r7, #12
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr
 8006d50:	e000e100 	.word	0xe000e100
 8006d54:	e000ed00 	.word	0xe000ed00

08006d58 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006d5c:	4b05      	ldr	r3, [pc, #20]	; (8006d74 <SysTick_Handler+0x1c>)
 8006d5e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006d60:	f001 fd28 	bl	80087b4 <xTaskGetSchedulerState>
 8006d64:	4603      	mov	r3, r0
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	d001      	beq.n	8006d6e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006d6a:	f002 fb0d 	bl	8009388 <xPortSysTickHandler>
  }
}
 8006d6e:	bf00      	nop
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop
 8006d74:	e000e010 	.word	0xe000e010

08006d78 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006d7c:	2100      	movs	r1, #0
 8006d7e:	f06f 0004 	mvn.w	r0, #4
 8006d82:	f7ff ffbf 	bl	8006d04 <__NVIC_SetPriority>
#endif
}
 8006d86:	bf00      	nop
 8006d88:	bd80      	pop	{r7, pc}
	...

08006d8c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006d8c:	b480      	push	{r7}
 8006d8e:	b083      	sub	sp, #12
 8006d90:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d92:	f3ef 8305 	mrs	r3, IPSR
 8006d96:	603b      	str	r3, [r7, #0]
  return(result);
 8006d98:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d003      	beq.n	8006da6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006d9e:	f06f 0305 	mvn.w	r3, #5
 8006da2:	607b      	str	r3, [r7, #4]
 8006da4:	e00c      	b.n	8006dc0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006da6:	4b0a      	ldr	r3, [pc, #40]	; (8006dd0 <osKernelInitialize+0x44>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d105      	bne.n	8006dba <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006dae:	4b08      	ldr	r3, [pc, #32]	; (8006dd0 <osKernelInitialize+0x44>)
 8006db0:	2201      	movs	r2, #1
 8006db2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006db4:	2300      	movs	r3, #0
 8006db6:	607b      	str	r3, [r7, #4]
 8006db8:	e002      	b.n	8006dc0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006dba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006dbe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006dc0:	687b      	ldr	r3, [r7, #4]
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	370c      	adds	r7, #12
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr
 8006dce:	bf00      	nop
 8006dd0:	200001e4 	.word	0x200001e4

08006dd4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b082      	sub	sp, #8
 8006dd8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006dda:	f3ef 8305 	mrs	r3, IPSR
 8006dde:	603b      	str	r3, [r7, #0]
  return(result);
 8006de0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d003      	beq.n	8006dee <osKernelStart+0x1a>
    stat = osErrorISR;
 8006de6:	f06f 0305 	mvn.w	r3, #5
 8006dea:	607b      	str	r3, [r7, #4]
 8006dec:	e010      	b.n	8006e10 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006dee:	4b0b      	ldr	r3, [pc, #44]	; (8006e1c <osKernelStart+0x48>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d109      	bne.n	8006e0a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006df6:	f7ff ffbf 	bl	8006d78 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006dfa:	4b08      	ldr	r3, [pc, #32]	; (8006e1c <osKernelStart+0x48>)
 8006dfc:	2202      	movs	r2, #2
 8006dfe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006e00:	f001 f87c 	bl	8007efc <vTaskStartScheduler>
      stat = osOK;
 8006e04:	2300      	movs	r3, #0
 8006e06:	607b      	str	r3, [r7, #4]
 8006e08:	e002      	b.n	8006e10 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006e0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006e0e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006e10:	687b      	ldr	r3, [r7, #4]
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3708      	adds	r7, #8
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}
 8006e1a:	bf00      	nop
 8006e1c:	200001e4 	.word	0x200001e4

08006e20 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b08e      	sub	sp, #56	; 0x38
 8006e24:	af04      	add	r7, sp, #16
 8006e26:	60f8      	str	r0, [r7, #12]
 8006e28:	60b9      	str	r1, [r7, #8]
 8006e2a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e30:	f3ef 8305 	mrs	r3, IPSR
 8006e34:	617b      	str	r3, [r7, #20]
  return(result);
 8006e36:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d17e      	bne.n	8006f3a <osThreadNew+0x11a>
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d07b      	beq.n	8006f3a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006e42:	2380      	movs	r3, #128	; 0x80
 8006e44:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006e46:	2318      	movs	r3, #24
 8006e48:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006e4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006e52:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d045      	beq.n	8006ee6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d002      	beq.n	8006e68 <osThreadNew+0x48>
        name = attr->name;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	699b      	ldr	r3, [r3, #24]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d002      	beq.n	8006e76 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	699b      	ldr	r3, [r3, #24]
 8006e74:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006e76:	69fb      	ldr	r3, [r7, #28]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d008      	beq.n	8006e8e <osThreadNew+0x6e>
 8006e7c:	69fb      	ldr	r3, [r7, #28]
 8006e7e:	2b38      	cmp	r3, #56	; 0x38
 8006e80:	d805      	bhi.n	8006e8e <osThreadNew+0x6e>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	f003 0301 	and.w	r3, r3, #1
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d001      	beq.n	8006e92 <osThreadNew+0x72>
        return (NULL);
 8006e8e:	2300      	movs	r3, #0
 8006e90:	e054      	b.n	8006f3c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	695b      	ldr	r3, [r3, #20]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d003      	beq.n	8006ea2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	695b      	ldr	r3, [r3, #20]
 8006e9e:	089b      	lsrs	r3, r3, #2
 8006ea0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d00e      	beq.n	8006ec8 <osThreadNew+0xa8>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	68db      	ldr	r3, [r3, #12]
 8006eae:	2bbb      	cmp	r3, #187	; 0xbb
 8006eb0:	d90a      	bls.n	8006ec8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d006      	beq.n	8006ec8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	695b      	ldr	r3, [r3, #20]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d002      	beq.n	8006ec8 <osThreadNew+0xa8>
        mem = 1;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	61bb      	str	r3, [r7, #24]
 8006ec6:	e010      	b.n	8006eea <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d10c      	bne.n	8006eea <osThreadNew+0xca>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	68db      	ldr	r3, [r3, #12]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d108      	bne.n	8006eea <osThreadNew+0xca>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	691b      	ldr	r3, [r3, #16]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d104      	bne.n	8006eea <osThreadNew+0xca>
          mem = 0;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	61bb      	str	r3, [r7, #24]
 8006ee4:	e001      	b.n	8006eea <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006eea:	69bb      	ldr	r3, [r7, #24]
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d110      	bne.n	8006f12 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006ef4:	687a      	ldr	r2, [r7, #4]
 8006ef6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006ef8:	9202      	str	r2, [sp, #8]
 8006efa:	9301      	str	r3, [sp, #4]
 8006efc:	69fb      	ldr	r3, [r7, #28]
 8006efe:	9300      	str	r3, [sp, #0]
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	6a3a      	ldr	r2, [r7, #32]
 8006f04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006f06:	68f8      	ldr	r0, [r7, #12]
 8006f08:	f000 fe0c 	bl	8007b24 <xTaskCreateStatic>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	613b      	str	r3, [r7, #16]
 8006f10:	e013      	b.n	8006f3a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006f12:	69bb      	ldr	r3, [r7, #24]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d110      	bne.n	8006f3a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006f18:	6a3b      	ldr	r3, [r7, #32]
 8006f1a:	b29a      	uxth	r2, r3
 8006f1c:	f107 0310 	add.w	r3, r7, #16
 8006f20:	9301      	str	r3, [sp, #4]
 8006f22:	69fb      	ldr	r3, [r7, #28]
 8006f24:	9300      	str	r3, [sp, #0]
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006f2a:	68f8      	ldr	r0, [r7, #12]
 8006f2c:	f000 fe57 	bl	8007bde <xTaskCreate>
 8006f30:	4603      	mov	r3, r0
 8006f32:	2b01      	cmp	r3, #1
 8006f34:	d001      	beq.n	8006f3a <osThreadNew+0x11a>
            hTask = NULL;
 8006f36:	2300      	movs	r3, #0
 8006f38:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006f3a:	693b      	ldr	r3, [r7, #16]
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3728      	adds	r7, #40	; 0x28
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}

08006f44 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b084      	sub	sp, #16
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f4c:	f3ef 8305 	mrs	r3, IPSR
 8006f50:	60bb      	str	r3, [r7, #8]
  return(result);
 8006f52:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d003      	beq.n	8006f60 <osDelay+0x1c>
    stat = osErrorISR;
 8006f58:	f06f 0305 	mvn.w	r3, #5
 8006f5c:	60fb      	str	r3, [r7, #12]
 8006f5e:	e007      	b.n	8006f70 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006f60:	2300      	movs	r3, #0
 8006f62:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d002      	beq.n	8006f70 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f000 ff92 	bl	8007e94 <vTaskDelay>
    }
  }

  return (stat);
 8006f70:	68fb      	ldr	r3, [r7, #12]
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3710      	adds	r7, #16
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}
	...

08006f7c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006f7c:	b480      	push	{r7}
 8006f7e:	b085      	sub	sp, #20
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	60f8      	str	r0, [r7, #12]
 8006f84:	60b9      	str	r1, [r7, #8]
 8006f86:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	4a07      	ldr	r2, [pc, #28]	; (8006fa8 <vApplicationGetIdleTaskMemory+0x2c>)
 8006f8c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	4a06      	ldr	r2, [pc, #24]	; (8006fac <vApplicationGetIdleTaskMemory+0x30>)
 8006f92:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2280      	movs	r2, #128	; 0x80
 8006f98:	601a      	str	r2, [r3, #0]
}
 8006f9a:	bf00      	nop
 8006f9c:	3714      	adds	r7, #20
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa4:	4770      	bx	lr
 8006fa6:	bf00      	nop
 8006fa8:	200001e8 	.word	0x200001e8
 8006fac:	200002a4 	.word	0x200002a4

08006fb0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006fb0:	b480      	push	{r7}
 8006fb2:	b085      	sub	sp, #20
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	60f8      	str	r0, [r7, #12]
 8006fb8:	60b9      	str	r1, [r7, #8]
 8006fba:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	4a07      	ldr	r2, [pc, #28]	; (8006fdc <vApplicationGetTimerTaskMemory+0x2c>)
 8006fc0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	4a06      	ldr	r2, [pc, #24]	; (8006fe0 <vApplicationGetTimerTaskMemory+0x30>)
 8006fc6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006fce:	601a      	str	r2, [r3, #0]
}
 8006fd0:	bf00      	nop
 8006fd2:	3714      	adds	r7, #20
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr
 8006fdc:	200004a4 	.word	0x200004a4
 8006fe0:	20000560 	.word	0x20000560

08006fe4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b083      	sub	sp, #12
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f103 0208 	add.w	r2, r3, #8
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ffc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f103 0208 	add.w	r2, r3, #8
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f103 0208 	add.w	r2, r3, #8
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2200      	movs	r2, #0
 8007016:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007018:	bf00      	nop
 800701a:	370c      	adds	r7, #12
 800701c:	46bd      	mov	sp, r7
 800701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007022:	4770      	bx	lr

08007024 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007024:	b480      	push	{r7}
 8007026:	b083      	sub	sp, #12
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2200      	movs	r2, #0
 8007030:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007032:	bf00      	nop
 8007034:	370c      	adds	r7, #12
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr

0800703e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800703e:	b480      	push	{r7}
 8007040:	b085      	sub	sp, #20
 8007042:	af00      	add	r7, sp, #0
 8007044:	6078      	str	r0, [r7, #4]
 8007046:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	68fa      	ldr	r2, [r7, #12]
 8007052:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	689a      	ldr	r2, [r3, #8]
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	683a      	ldr	r2, [r7, #0]
 8007062:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	683a      	ldr	r2, [r7, #0]
 8007068:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	687a      	ldr	r2, [r7, #4]
 800706e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	1c5a      	adds	r2, r3, #1
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	601a      	str	r2, [r3, #0]
}
 800707a:	bf00      	nop
 800707c:	3714      	adds	r7, #20
 800707e:	46bd      	mov	sp, r7
 8007080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007084:	4770      	bx	lr

08007086 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007086:	b480      	push	{r7}
 8007088:	b085      	sub	sp, #20
 800708a:	af00      	add	r7, sp, #0
 800708c:	6078      	str	r0, [r7, #4]
 800708e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800709c:	d103      	bne.n	80070a6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	691b      	ldr	r3, [r3, #16]
 80070a2:	60fb      	str	r3, [r7, #12]
 80070a4:	e00c      	b.n	80070c0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	3308      	adds	r3, #8
 80070aa:	60fb      	str	r3, [r7, #12]
 80070ac:	e002      	b.n	80070b4 <vListInsert+0x2e>
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	60fb      	str	r3, [r7, #12]
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	68ba      	ldr	r2, [r7, #8]
 80070bc:	429a      	cmp	r2, r3
 80070be:	d2f6      	bcs.n	80070ae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	685a      	ldr	r2, [r3, #4]
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	683a      	ldr	r2, [r7, #0]
 80070ce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	68fa      	ldr	r2, [r7, #12]
 80070d4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	683a      	ldr	r2, [r7, #0]
 80070da:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	1c5a      	adds	r2, r3, #1
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	601a      	str	r2, [r3, #0]
}
 80070ec:	bf00      	nop
 80070ee:	3714      	adds	r7, #20
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	4770      	bx	lr

080070f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80070f8:	b480      	push	{r7}
 80070fa:	b085      	sub	sp, #20
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	691b      	ldr	r3, [r3, #16]
 8007104:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	6892      	ldr	r2, [r2, #8]
 800710e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	689b      	ldr	r3, [r3, #8]
 8007114:	687a      	ldr	r2, [r7, #4]
 8007116:	6852      	ldr	r2, [r2, #4]
 8007118:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	687a      	ldr	r2, [r7, #4]
 8007120:	429a      	cmp	r2, r3
 8007122:	d103      	bne.n	800712c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	689a      	ldr	r2, [r3, #8]
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	1e5a      	subs	r2, r3, #1
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
}
 8007140:	4618      	mov	r0, r3
 8007142:	3714      	adds	r7, #20
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr

0800714c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b084      	sub	sp, #16
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d10a      	bne.n	8007176 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007164:	f383 8811 	msr	BASEPRI, r3
 8007168:	f3bf 8f6f 	isb	sy
 800716c:	f3bf 8f4f 	dsb	sy
 8007170:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007172:	bf00      	nop
 8007174:	e7fe      	b.n	8007174 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007176:	f002 f875 	bl	8009264 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681a      	ldr	r2, [r3, #0]
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007182:	68f9      	ldr	r1, [r7, #12]
 8007184:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007186:	fb01 f303 	mul.w	r3, r1, r3
 800718a:	441a      	add	r2, r3
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2200      	movs	r2, #0
 8007194:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681a      	ldr	r2, [r3, #0]
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071a6:	3b01      	subs	r3, #1
 80071a8:	68f9      	ldr	r1, [r7, #12]
 80071aa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80071ac:	fb01 f303 	mul.w	r3, r1, r3
 80071b0:	441a      	add	r2, r3
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	22ff      	movs	r2, #255	; 0xff
 80071ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	22ff      	movs	r2, #255	; 0xff
 80071c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d114      	bne.n	80071f6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	691b      	ldr	r3, [r3, #16]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d01a      	beq.n	800720a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	3310      	adds	r3, #16
 80071d8:	4618      	mov	r0, r3
 80071da:	f001 f929 	bl	8008430 <xTaskRemoveFromEventList>
 80071de:	4603      	mov	r3, r0
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d012      	beq.n	800720a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80071e4:	4b0c      	ldr	r3, [pc, #48]	; (8007218 <xQueueGenericReset+0xcc>)
 80071e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071ea:	601a      	str	r2, [r3, #0]
 80071ec:	f3bf 8f4f 	dsb	sy
 80071f0:	f3bf 8f6f 	isb	sy
 80071f4:	e009      	b.n	800720a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	3310      	adds	r3, #16
 80071fa:	4618      	mov	r0, r3
 80071fc:	f7ff fef2 	bl	8006fe4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	3324      	adds	r3, #36	; 0x24
 8007204:	4618      	mov	r0, r3
 8007206:	f7ff feed 	bl	8006fe4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800720a:	f002 f85b 	bl	80092c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800720e:	2301      	movs	r3, #1
}
 8007210:	4618      	mov	r0, r3
 8007212:	3710      	adds	r7, #16
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}
 8007218:	e000ed04 	.word	0xe000ed04

0800721c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800721c:	b580      	push	{r7, lr}
 800721e:	b08e      	sub	sp, #56	; 0x38
 8007220:	af02      	add	r7, sp, #8
 8007222:	60f8      	str	r0, [r7, #12]
 8007224:	60b9      	str	r1, [r7, #8]
 8007226:	607a      	str	r2, [r7, #4]
 8007228:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d10a      	bne.n	8007246 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007234:	f383 8811 	msr	BASEPRI, r3
 8007238:	f3bf 8f6f 	isb	sy
 800723c:	f3bf 8f4f 	dsb	sy
 8007240:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007242:	bf00      	nop
 8007244:	e7fe      	b.n	8007244 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d10a      	bne.n	8007262 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800724c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007250:	f383 8811 	msr	BASEPRI, r3
 8007254:	f3bf 8f6f 	isb	sy
 8007258:	f3bf 8f4f 	dsb	sy
 800725c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800725e:	bf00      	nop
 8007260:	e7fe      	b.n	8007260 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d002      	beq.n	800726e <xQueueGenericCreateStatic+0x52>
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d001      	beq.n	8007272 <xQueueGenericCreateStatic+0x56>
 800726e:	2301      	movs	r3, #1
 8007270:	e000      	b.n	8007274 <xQueueGenericCreateStatic+0x58>
 8007272:	2300      	movs	r3, #0
 8007274:	2b00      	cmp	r3, #0
 8007276:	d10a      	bne.n	800728e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800727c:	f383 8811 	msr	BASEPRI, r3
 8007280:	f3bf 8f6f 	isb	sy
 8007284:	f3bf 8f4f 	dsb	sy
 8007288:	623b      	str	r3, [r7, #32]
}
 800728a:	bf00      	nop
 800728c:	e7fe      	b.n	800728c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d102      	bne.n	800729a <xQueueGenericCreateStatic+0x7e>
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d101      	bne.n	800729e <xQueueGenericCreateStatic+0x82>
 800729a:	2301      	movs	r3, #1
 800729c:	e000      	b.n	80072a0 <xQueueGenericCreateStatic+0x84>
 800729e:	2300      	movs	r3, #0
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d10a      	bne.n	80072ba <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80072a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a8:	f383 8811 	msr	BASEPRI, r3
 80072ac:	f3bf 8f6f 	isb	sy
 80072b0:	f3bf 8f4f 	dsb	sy
 80072b4:	61fb      	str	r3, [r7, #28]
}
 80072b6:	bf00      	nop
 80072b8:	e7fe      	b.n	80072b8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80072ba:	2350      	movs	r3, #80	; 0x50
 80072bc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	2b50      	cmp	r3, #80	; 0x50
 80072c2:	d00a      	beq.n	80072da <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80072c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c8:	f383 8811 	msr	BASEPRI, r3
 80072cc:	f3bf 8f6f 	isb	sy
 80072d0:	f3bf 8f4f 	dsb	sy
 80072d4:	61bb      	str	r3, [r7, #24]
}
 80072d6:	bf00      	nop
 80072d8:	e7fe      	b.n	80072d8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80072da:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80072e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d00d      	beq.n	8007302 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80072e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072e8:	2201      	movs	r2, #1
 80072ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80072ee:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80072f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072f4:	9300      	str	r3, [sp, #0]
 80072f6:	4613      	mov	r3, r2
 80072f8:	687a      	ldr	r2, [r7, #4]
 80072fa:	68b9      	ldr	r1, [r7, #8]
 80072fc:	68f8      	ldr	r0, [r7, #12]
 80072fe:	f000 f805 	bl	800730c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007304:	4618      	mov	r0, r3
 8007306:	3730      	adds	r7, #48	; 0x30
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}

0800730c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b084      	sub	sp, #16
 8007310:	af00      	add	r7, sp, #0
 8007312:	60f8      	str	r0, [r7, #12]
 8007314:	60b9      	str	r1, [r7, #8]
 8007316:	607a      	str	r2, [r7, #4]
 8007318:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d103      	bne.n	8007328 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007320:	69bb      	ldr	r3, [r7, #24]
 8007322:	69ba      	ldr	r2, [r7, #24]
 8007324:	601a      	str	r2, [r3, #0]
 8007326:	e002      	b.n	800732e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007328:	69bb      	ldr	r3, [r7, #24]
 800732a:	687a      	ldr	r2, [r7, #4]
 800732c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800732e:	69bb      	ldr	r3, [r7, #24]
 8007330:	68fa      	ldr	r2, [r7, #12]
 8007332:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007334:	69bb      	ldr	r3, [r7, #24]
 8007336:	68ba      	ldr	r2, [r7, #8]
 8007338:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800733a:	2101      	movs	r1, #1
 800733c:	69b8      	ldr	r0, [r7, #24]
 800733e:	f7ff ff05 	bl	800714c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007342:	69bb      	ldr	r3, [r7, #24]
 8007344:	78fa      	ldrb	r2, [r7, #3]
 8007346:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800734a:	bf00      	nop
 800734c:	3710      	adds	r7, #16
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
	...

08007354 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b08e      	sub	sp, #56	; 0x38
 8007358:	af00      	add	r7, sp, #0
 800735a:	60f8      	str	r0, [r7, #12]
 800735c:	60b9      	str	r1, [r7, #8]
 800735e:	607a      	str	r2, [r7, #4]
 8007360:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007362:	2300      	movs	r3, #0
 8007364:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800736a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800736c:	2b00      	cmp	r3, #0
 800736e:	d10a      	bne.n	8007386 <xQueueGenericSend+0x32>
	__asm volatile
 8007370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007374:	f383 8811 	msr	BASEPRI, r3
 8007378:	f3bf 8f6f 	isb	sy
 800737c:	f3bf 8f4f 	dsb	sy
 8007380:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007382:	bf00      	nop
 8007384:	e7fe      	b.n	8007384 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d103      	bne.n	8007394 <xQueueGenericSend+0x40>
 800738c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800738e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007390:	2b00      	cmp	r3, #0
 8007392:	d101      	bne.n	8007398 <xQueueGenericSend+0x44>
 8007394:	2301      	movs	r3, #1
 8007396:	e000      	b.n	800739a <xQueueGenericSend+0x46>
 8007398:	2300      	movs	r3, #0
 800739a:	2b00      	cmp	r3, #0
 800739c:	d10a      	bne.n	80073b4 <xQueueGenericSend+0x60>
	__asm volatile
 800739e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a2:	f383 8811 	msr	BASEPRI, r3
 80073a6:	f3bf 8f6f 	isb	sy
 80073aa:	f3bf 8f4f 	dsb	sy
 80073ae:	627b      	str	r3, [r7, #36]	; 0x24
}
 80073b0:	bf00      	nop
 80073b2:	e7fe      	b.n	80073b2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	2b02      	cmp	r3, #2
 80073b8:	d103      	bne.n	80073c2 <xQueueGenericSend+0x6e>
 80073ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073be:	2b01      	cmp	r3, #1
 80073c0:	d101      	bne.n	80073c6 <xQueueGenericSend+0x72>
 80073c2:	2301      	movs	r3, #1
 80073c4:	e000      	b.n	80073c8 <xQueueGenericSend+0x74>
 80073c6:	2300      	movs	r3, #0
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d10a      	bne.n	80073e2 <xQueueGenericSend+0x8e>
	__asm volatile
 80073cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d0:	f383 8811 	msr	BASEPRI, r3
 80073d4:	f3bf 8f6f 	isb	sy
 80073d8:	f3bf 8f4f 	dsb	sy
 80073dc:	623b      	str	r3, [r7, #32]
}
 80073de:	bf00      	nop
 80073e0:	e7fe      	b.n	80073e0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80073e2:	f001 f9e7 	bl	80087b4 <xTaskGetSchedulerState>
 80073e6:	4603      	mov	r3, r0
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d102      	bne.n	80073f2 <xQueueGenericSend+0x9e>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d101      	bne.n	80073f6 <xQueueGenericSend+0xa2>
 80073f2:	2301      	movs	r3, #1
 80073f4:	e000      	b.n	80073f8 <xQueueGenericSend+0xa4>
 80073f6:	2300      	movs	r3, #0
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d10a      	bne.n	8007412 <xQueueGenericSend+0xbe>
	__asm volatile
 80073fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007400:	f383 8811 	msr	BASEPRI, r3
 8007404:	f3bf 8f6f 	isb	sy
 8007408:	f3bf 8f4f 	dsb	sy
 800740c:	61fb      	str	r3, [r7, #28]
}
 800740e:	bf00      	nop
 8007410:	e7fe      	b.n	8007410 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007412:	f001 ff27 	bl	8009264 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007418:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800741a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800741c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800741e:	429a      	cmp	r2, r3
 8007420:	d302      	bcc.n	8007428 <xQueueGenericSend+0xd4>
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	2b02      	cmp	r3, #2
 8007426:	d129      	bne.n	800747c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007428:	683a      	ldr	r2, [r7, #0]
 800742a:	68b9      	ldr	r1, [r7, #8]
 800742c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800742e:	f000 fa0b 	bl	8007848 <prvCopyDataToQueue>
 8007432:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007438:	2b00      	cmp	r3, #0
 800743a:	d010      	beq.n	800745e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800743c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800743e:	3324      	adds	r3, #36	; 0x24
 8007440:	4618      	mov	r0, r3
 8007442:	f000 fff5 	bl	8008430 <xTaskRemoveFromEventList>
 8007446:	4603      	mov	r3, r0
 8007448:	2b00      	cmp	r3, #0
 800744a:	d013      	beq.n	8007474 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800744c:	4b3f      	ldr	r3, [pc, #252]	; (800754c <xQueueGenericSend+0x1f8>)
 800744e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007452:	601a      	str	r2, [r3, #0]
 8007454:	f3bf 8f4f 	dsb	sy
 8007458:	f3bf 8f6f 	isb	sy
 800745c:	e00a      	b.n	8007474 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800745e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007460:	2b00      	cmp	r3, #0
 8007462:	d007      	beq.n	8007474 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007464:	4b39      	ldr	r3, [pc, #228]	; (800754c <xQueueGenericSend+0x1f8>)
 8007466:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800746a:	601a      	str	r2, [r3, #0]
 800746c:	f3bf 8f4f 	dsb	sy
 8007470:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007474:	f001 ff26 	bl	80092c4 <vPortExitCritical>
				return pdPASS;
 8007478:	2301      	movs	r3, #1
 800747a:	e063      	b.n	8007544 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d103      	bne.n	800748a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007482:	f001 ff1f 	bl	80092c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007486:	2300      	movs	r3, #0
 8007488:	e05c      	b.n	8007544 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800748a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800748c:	2b00      	cmp	r3, #0
 800748e:	d106      	bne.n	800749e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007490:	f107 0314 	add.w	r3, r7, #20
 8007494:	4618      	mov	r0, r3
 8007496:	f001 f82f 	bl	80084f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800749a:	2301      	movs	r3, #1
 800749c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800749e:	f001 ff11 	bl	80092c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80074a2:	f000 fd9b 	bl	8007fdc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80074a6:	f001 fedd 	bl	8009264 <vPortEnterCritical>
 80074aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80074b0:	b25b      	sxtb	r3, r3
 80074b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074b6:	d103      	bne.n	80074c0 <xQueueGenericSend+0x16c>
 80074b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ba:	2200      	movs	r2, #0
 80074bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80074c6:	b25b      	sxtb	r3, r3
 80074c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074cc:	d103      	bne.n	80074d6 <xQueueGenericSend+0x182>
 80074ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d0:	2200      	movs	r2, #0
 80074d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074d6:	f001 fef5 	bl	80092c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80074da:	1d3a      	adds	r2, r7, #4
 80074dc:	f107 0314 	add.w	r3, r7, #20
 80074e0:	4611      	mov	r1, r2
 80074e2:	4618      	mov	r0, r3
 80074e4:	f001 f81e 	bl	8008524 <xTaskCheckForTimeOut>
 80074e8:	4603      	mov	r3, r0
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d124      	bne.n	8007538 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80074ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80074f0:	f000 faa2 	bl	8007a38 <prvIsQueueFull>
 80074f4:	4603      	mov	r3, r0
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d018      	beq.n	800752c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80074fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074fc:	3310      	adds	r3, #16
 80074fe:	687a      	ldr	r2, [r7, #4]
 8007500:	4611      	mov	r1, r2
 8007502:	4618      	mov	r0, r3
 8007504:	f000 ff44 	bl	8008390 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007508:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800750a:	f000 fa2d 	bl	8007968 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800750e:	f000 fd73 	bl	8007ff8 <xTaskResumeAll>
 8007512:	4603      	mov	r3, r0
 8007514:	2b00      	cmp	r3, #0
 8007516:	f47f af7c 	bne.w	8007412 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800751a:	4b0c      	ldr	r3, [pc, #48]	; (800754c <xQueueGenericSend+0x1f8>)
 800751c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007520:	601a      	str	r2, [r3, #0]
 8007522:	f3bf 8f4f 	dsb	sy
 8007526:	f3bf 8f6f 	isb	sy
 800752a:	e772      	b.n	8007412 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800752c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800752e:	f000 fa1b 	bl	8007968 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007532:	f000 fd61 	bl	8007ff8 <xTaskResumeAll>
 8007536:	e76c      	b.n	8007412 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007538:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800753a:	f000 fa15 	bl	8007968 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800753e:	f000 fd5b 	bl	8007ff8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007542:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007544:	4618      	mov	r0, r3
 8007546:	3738      	adds	r7, #56	; 0x38
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}
 800754c:	e000ed04 	.word	0xe000ed04

08007550 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b090      	sub	sp, #64	; 0x40
 8007554:	af00      	add	r7, sp, #0
 8007556:	60f8      	str	r0, [r7, #12]
 8007558:	60b9      	str	r1, [r7, #8]
 800755a:	607a      	str	r2, [r7, #4]
 800755c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007564:	2b00      	cmp	r3, #0
 8007566:	d10a      	bne.n	800757e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800756c:	f383 8811 	msr	BASEPRI, r3
 8007570:	f3bf 8f6f 	isb	sy
 8007574:	f3bf 8f4f 	dsb	sy
 8007578:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800757a:	bf00      	nop
 800757c:	e7fe      	b.n	800757c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d103      	bne.n	800758c <xQueueGenericSendFromISR+0x3c>
 8007584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007588:	2b00      	cmp	r3, #0
 800758a:	d101      	bne.n	8007590 <xQueueGenericSendFromISR+0x40>
 800758c:	2301      	movs	r3, #1
 800758e:	e000      	b.n	8007592 <xQueueGenericSendFromISR+0x42>
 8007590:	2300      	movs	r3, #0
 8007592:	2b00      	cmp	r3, #0
 8007594:	d10a      	bne.n	80075ac <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800759a:	f383 8811 	msr	BASEPRI, r3
 800759e:	f3bf 8f6f 	isb	sy
 80075a2:	f3bf 8f4f 	dsb	sy
 80075a6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80075a8:	bf00      	nop
 80075aa:	e7fe      	b.n	80075aa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	2b02      	cmp	r3, #2
 80075b0:	d103      	bne.n	80075ba <xQueueGenericSendFromISR+0x6a>
 80075b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075b6:	2b01      	cmp	r3, #1
 80075b8:	d101      	bne.n	80075be <xQueueGenericSendFromISR+0x6e>
 80075ba:	2301      	movs	r3, #1
 80075bc:	e000      	b.n	80075c0 <xQueueGenericSendFromISR+0x70>
 80075be:	2300      	movs	r3, #0
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d10a      	bne.n	80075da <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80075c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c8:	f383 8811 	msr	BASEPRI, r3
 80075cc:	f3bf 8f6f 	isb	sy
 80075d0:	f3bf 8f4f 	dsb	sy
 80075d4:	623b      	str	r3, [r7, #32]
}
 80075d6:	bf00      	nop
 80075d8:	e7fe      	b.n	80075d8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80075da:	f001 ff25 	bl	8009428 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80075de:	f3ef 8211 	mrs	r2, BASEPRI
 80075e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e6:	f383 8811 	msr	BASEPRI, r3
 80075ea:	f3bf 8f6f 	isb	sy
 80075ee:	f3bf 8f4f 	dsb	sy
 80075f2:	61fa      	str	r2, [r7, #28]
 80075f4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80075f6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80075f8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80075fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007602:	429a      	cmp	r2, r3
 8007604:	d302      	bcc.n	800760c <xQueueGenericSendFromISR+0xbc>
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	2b02      	cmp	r3, #2
 800760a:	d12f      	bne.n	800766c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800760c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800760e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007612:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800761a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800761c:	683a      	ldr	r2, [r7, #0]
 800761e:	68b9      	ldr	r1, [r7, #8]
 8007620:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007622:	f000 f911 	bl	8007848 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007626:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800762a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800762e:	d112      	bne.n	8007656 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007634:	2b00      	cmp	r3, #0
 8007636:	d016      	beq.n	8007666 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800763a:	3324      	adds	r3, #36	; 0x24
 800763c:	4618      	mov	r0, r3
 800763e:	f000 fef7 	bl	8008430 <xTaskRemoveFromEventList>
 8007642:	4603      	mov	r3, r0
 8007644:	2b00      	cmp	r3, #0
 8007646:	d00e      	beq.n	8007666 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d00b      	beq.n	8007666 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2201      	movs	r2, #1
 8007652:	601a      	str	r2, [r3, #0]
 8007654:	e007      	b.n	8007666 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007656:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800765a:	3301      	adds	r3, #1
 800765c:	b2db      	uxtb	r3, r3
 800765e:	b25a      	sxtb	r2, r3
 8007660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007662:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007666:	2301      	movs	r3, #1
 8007668:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800766a:	e001      	b.n	8007670 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800766c:	2300      	movs	r3, #0
 800766e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007672:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800767a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800767c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800767e:	4618      	mov	r0, r3
 8007680:	3740      	adds	r7, #64	; 0x40
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}
	...

08007688 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b08c      	sub	sp, #48	; 0x30
 800768c:	af00      	add	r7, sp, #0
 800768e:	60f8      	str	r0, [r7, #12]
 8007690:	60b9      	str	r1, [r7, #8]
 8007692:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007694:	2300      	movs	r3, #0
 8007696:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800769c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d10a      	bne.n	80076b8 <xQueueReceive+0x30>
	__asm volatile
 80076a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076a6:	f383 8811 	msr	BASEPRI, r3
 80076aa:	f3bf 8f6f 	isb	sy
 80076ae:	f3bf 8f4f 	dsb	sy
 80076b2:	623b      	str	r3, [r7, #32]
}
 80076b4:	bf00      	nop
 80076b6:	e7fe      	b.n	80076b6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d103      	bne.n	80076c6 <xQueueReceive+0x3e>
 80076be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d101      	bne.n	80076ca <xQueueReceive+0x42>
 80076c6:	2301      	movs	r3, #1
 80076c8:	e000      	b.n	80076cc <xQueueReceive+0x44>
 80076ca:	2300      	movs	r3, #0
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d10a      	bne.n	80076e6 <xQueueReceive+0x5e>
	__asm volatile
 80076d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d4:	f383 8811 	msr	BASEPRI, r3
 80076d8:	f3bf 8f6f 	isb	sy
 80076dc:	f3bf 8f4f 	dsb	sy
 80076e0:	61fb      	str	r3, [r7, #28]
}
 80076e2:	bf00      	nop
 80076e4:	e7fe      	b.n	80076e4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80076e6:	f001 f865 	bl	80087b4 <xTaskGetSchedulerState>
 80076ea:	4603      	mov	r3, r0
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d102      	bne.n	80076f6 <xQueueReceive+0x6e>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d101      	bne.n	80076fa <xQueueReceive+0x72>
 80076f6:	2301      	movs	r3, #1
 80076f8:	e000      	b.n	80076fc <xQueueReceive+0x74>
 80076fa:	2300      	movs	r3, #0
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d10a      	bne.n	8007716 <xQueueReceive+0x8e>
	__asm volatile
 8007700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007704:	f383 8811 	msr	BASEPRI, r3
 8007708:	f3bf 8f6f 	isb	sy
 800770c:	f3bf 8f4f 	dsb	sy
 8007710:	61bb      	str	r3, [r7, #24]
}
 8007712:	bf00      	nop
 8007714:	e7fe      	b.n	8007714 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007716:	f001 fda5 	bl	8009264 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800771a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800771c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800771e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007722:	2b00      	cmp	r3, #0
 8007724:	d01f      	beq.n	8007766 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007726:	68b9      	ldr	r1, [r7, #8]
 8007728:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800772a:	f000 f8f7 	bl	800791c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800772e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007730:	1e5a      	subs	r2, r3, #1
 8007732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007734:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007738:	691b      	ldr	r3, [r3, #16]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d00f      	beq.n	800775e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800773e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007740:	3310      	adds	r3, #16
 8007742:	4618      	mov	r0, r3
 8007744:	f000 fe74 	bl	8008430 <xTaskRemoveFromEventList>
 8007748:	4603      	mov	r3, r0
 800774a:	2b00      	cmp	r3, #0
 800774c:	d007      	beq.n	800775e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800774e:	4b3d      	ldr	r3, [pc, #244]	; (8007844 <xQueueReceive+0x1bc>)
 8007750:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007754:	601a      	str	r2, [r3, #0]
 8007756:	f3bf 8f4f 	dsb	sy
 800775a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800775e:	f001 fdb1 	bl	80092c4 <vPortExitCritical>
				return pdPASS;
 8007762:	2301      	movs	r3, #1
 8007764:	e069      	b.n	800783a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d103      	bne.n	8007774 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800776c:	f001 fdaa 	bl	80092c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007770:	2300      	movs	r3, #0
 8007772:	e062      	b.n	800783a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007776:	2b00      	cmp	r3, #0
 8007778:	d106      	bne.n	8007788 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800777a:	f107 0310 	add.w	r3, r7, #16
 800777e:	4618      	mov	r0, r3
 8007780:	f000 feba 	bl	80084f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007784:	2301      	movs	r3, #1
 8007786:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007788:	f001 fd9c 	bl	80092c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800778c:	f000 fc26 	bl	8007fdc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007790:	f001 fd68 	bl	8009264 <vPortEnterCritical>
 8007794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007796:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800779a:	b25b      	sxtb	r3, r3
 800779c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077a0:	d103      	bne.n	80077aa <xQueueReceive+0x122>
 80077a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a4:	2200      	movs	r2, #0
 80077a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80077aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80077b0:	b25b      	sxtb	r3, r3
 80077b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077b6:	d103      	bne.n	80077c0 <xQueueReceive+0x138>
 80077b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ba:	2200      	movs	r2, #0
 80077bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80077c0:	f001 fd80 	bl	80092c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80077c4:	1d3a      	adds	r2, r7, #4
 80077c6:	f107 0310 	add.w	r3, r7, #16
 80077ca:	4611      	mov	r1, r2
 80077cc:	4618      	mov	r0, r3
 80077ce:	f000 fea9 	bl	8008524 <xTaskCheckForTimeOut>
 80077d2:	4603      	mov	r3, r0
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d123      	bne.n	8007820 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80077d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077da:	f000 f917 	bl	8007a0c <prvIsQueueEmpty>
 80077de:	4603      	mov	r3, r0
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d017      	beq.n	8007814 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80077e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e6:	3324      	adds	r3, #36	; 0x24
 80077e8:	687a      	ldr	r2, [r7, #4]
 80077ea:	4611      	mov	r1, r2
 80077ec:	4618      	mov	r0, r3
 80077ee:	f000 fdcf 	bl	8008390 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80077f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077f4:	f000 f8b8 	bl	8007968 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80077f8:	f000 fbfe 	bl	8007ff8 <xTaskResumeAll>
 80077fc:	4603      	mov	r3, r0
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d189      	bne.n	8007716 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007802:	4b10      	ldr	r3, [pc, #64]	; (8007844 <xQueueReceive+0x1bc>)
 8007804:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007808:	601a      	str	r2, [r3, #0]
 800780a:	f3bf 8f4f 	dsb	sy
 800780e:	f3bf 8f6f 	isb	sy
 8007812:	e780      	b.n	8007716 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007814:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007816:	f000 f8a7 	bl	8007968 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800781a:	f000 fbed 	bl	8007ff8 <xTaskResumeAll>
 800781e:	e77a      	b.n	8007716 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007820:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007822:	f000 f8a1 	bl	8007968 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007826:	f000 fbe7 	bl	8007ff8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800782a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800782c:	f000 f8ee 	bl	8007a0c <prvIsQueueEmpty>
 8007830:	4603      	mov	r3, r0
 8007832:	2b00      	cmp	r3, #0
 8007834:	f43f af6f 	beq.w	8007716 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007838:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800783a:	4618      	mov	r0, r3
 800783c:	3730      	adds	r7, #48	; 0x30
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}
 8007842:	bf00      	nop
 8007844:	e000ed04 	.word	0xe000ed04

08007848 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b086      	sub	sp, #24
 800784c:	af00      	add	r7, sp, #0
 800784e:	60f8      	str	r0, [r7, #12]
 8007850:	60b9      	str	r1, [r7, #8]
 8007852:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007854:	2300      	movs	r3, #0
 8007856:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800785c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007862:	2b00      	cmp	r3, #0
 8007864:	d10d      	bne.n	8007882 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d14d      	bne.n	800790a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	689b      	ldr	r3, [r3, #8]
 8007872:	4618      	mov	r0, r3
 8007874:	f000 ffbc 	bl	80087f0 <xTaskPriorityDisinherit>
 8007878:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2200      	movs	r2, #0
 800787e:	609a      	str	r2, [r3, #8]
 8007880:	e043      	b.n	800790a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d119      	bne.n	80078bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	6858      	ldr	r0, [r3, #4]
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007890:	461a      	mov	r2, r3
 8007892:	68b9      	ldr	r1, [r7, #8]
 8007894:	f002 fdfa 	bl	800a48c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	685a      	ldr	r2, [r3, #4]
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078a0:	441a      	add	r2, r3
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	685a      	ldr	r2, [r3, #4]
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	429a      	cmp	r2, r3
 80078b0:	d32b      	bcc.n	800790a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681a      	ldr	r2, [r3, #0]
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	605a      	str	r2, [r3, #4]
 80078ba:	e026      	b.n	800790a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	68d8      	ldr	r0, [r3, #12]
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078c4:	461a      	mov	r2, r3
 80078c6:	68b9      	ldr	r1, [r7, #8]
 80078c8:	f002 fde0 	bl	800a48c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	68da      	ldr	r2, [r3, #12]
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078d4:	425b      	negs	r3, r3
 80078d6:	441a      	add	r2, r3
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	68da      	ldr	r2, [r3, #12]
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	429a      	cmp	r2, r3
 80078e6:	d207      	bcs.n	80078f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	689a      	ldr	r2, [r3, #8]
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078f0:	425b      	negs	r3, r3
 80078f2:	441a      	add	r2, r3
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2b02      	cmp	r3, #2
 80078fc:	d105      	bne.n	800790a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d002      	beq.n	800790a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	3b01      	subs	r3, #1
 8007908:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	1c5a      	adds	r2, r3, #1
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007912:	697b      	ldr	r3, [r7, #20]
}
 8007914:	4618      	mov	r0, r3
 8007916:	3718      	adds	r7, #24
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}

0800791c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b082      	sub	sp, #8
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800792a:	2b00      	cmp	r3, #0
 800792c:	d018      	beq.n	8007960 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	68da      	ldr	r2, [r3, #12]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007936:	441a      	add	r2, r3
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	68da      	ldr	r2, [r3, #12]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	689b      	ldr	r3, [r3, #8]
 8007944:	429a      	cmp	r2, r3
 8007946:	d303      	bcc.n	8007950 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681a      	ldr	r2, [r3, #0]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	68d9      	ldr	r1, [r3, #12]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007958:	461a      	mov	r2, r3
 800795a:	6838      	ldr	r0, [r7, #0]
 800795c:	f002 fd96 	bl	800a48c <memcpy>
	}
}
 8007960:	bf00      	nop
 8007962:	3708      	adds	r7, #8
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}

08007968 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b084      	sub	sp, #16
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007970:	f001 fc78 	bl	8009264 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800797a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800797c:	e011      	b.n	80079a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007982:	2b00      	cmp	r3, #0
 8007984:	d012      	beq.n	80079ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	3324      	adds	r3, #36	; 0x24
 800798a:	4618      	mov	r0, r3
 800798c:	f000 fd50 	bl	8008430 <xTaskRemoveFromEventList>
 8007990:	4603      	mov	r3, r0
 8007992:	2b00      	cmp	r3, #0
 8007994:	d001      	beq.n	800799a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007996:	f000 fe27 	bl	80085e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800799a:	7bfb      	ldrb	r3, [r7, #15]
 800799c:	3b01      	subs	r3, #1
 800799e:	b2db      	uxtb	r3, r3
 80079a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80079a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	dce9      	bgt.n	800797e <prvUnlockQueue+0x16>
 80079aa:	e000      	b.n	80079ae <prvUnlockQueue+0x46>
					break;
 80079ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	22ff      	movs	r2, #255	; 0xff
 80079b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80079b6:	f001 fc85 	bl	80092c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80079ba:	f001 fc53 	bl	8009264 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80079c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80079c6:	e011      	b.n	80079ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	691b      	ldr	r3, [r3, #16]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d012      	beq.n	80079f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	3310      	adds	r3, #16
 80079d4:	4618      	mov	r0, r3
 80079d6:	f000 fd2b 	bl	8008430 <xTaskRemoveFromEventList>
 80079da:	4603      	mov	r3, r0
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d001      	beq.n	80079e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80079e0:	f000 fe02 	bl	80085e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80079e4:	7bbb      	ldrb	r3, [r7, #14]
 80079e6:	3b01      	subs	r3, #1
 80079e8:	b2db      	uxtb	r3, r3
 80079ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80079ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	dce9      	bgt.n	80079c8 <prvUnlockQueue+0x60>
 80079f4:	e000      	b.n	80079f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80079f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	22ff      	movs	r2, #255	; 0xff
 80079fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007a00:	f001 fc60 	bl	80092c4 <vPortExitCritical>
}
 8007a04:	bf00      	nop
 8007a06:	3710      	adds	r7, #16
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}

08007a0c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b084      	sub	sp, #16
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007a14:	f001 fc26 	bl	8009264 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d102      	bne.n	8007a26 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007a20:	2301      	movs	r3, #1
 8007a22:	60fb      	str	r3, [r7, #12]
 8007a24:	e001      	b.n	8007a2a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007a26:	2300      	movs	r3, #0
 8007a28:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007a2a:	f001 fc4b 	bl	80092c4 <vPortExitCritical>

	return xReturn;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3710      	adds	r7, #16
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}

08007a38 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b084      	sub	sp, #16
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007a40:	f001 fc10 	bl	8009264 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	d102      	bne.n	8007a56 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007a50:	2301      	movs	r3, #1
 8007a52:	60fb      	str	r3, [r7, #12]
 8007a54:	e001      	b.n	8007a5a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007a56:	2300      	movs	r3, #0
 8007a58:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007a5a:	f001 fc33 	bl	80092c4 <vPortExitCritical>

	return xReturn;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3710      	adds	r7, #16
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}

08007a68 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007a68:	b480      	push	{r7}
 8007a6a:	b085      	sub	sp, #20
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007a72:	2300      	movs	r3, #0
 8007a74:	60fb      	str	r3, [r7, #12]
 8007a76:	e014      	b.n	8007aa2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007a78:	4a0f      	ldr	r2, [pc, #60]	; (8007ab8 <vQueueAddToRegistry+0x50>)
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d10b      	bne.n	8007a9c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007a84:	490c      	ldr	r1, [pc, #48]	; (8007ab8 <vQueueAddToRegistry+0x50>)
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	683a      	ldr	r2, [r7, #0]
 8007a8a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007a8e:	4a0a      	ldr	r2, [pc, #40]	; (8007ab8 <vQueueAddToRegistry+0x50>)
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	00db      	lsls	r3, r3, #3
 8007a94:	4413      	add	r3, r2
 8007a96:	687a      	ldr	r2, [r7, #4]
 8007a98:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007a9a:	e006      	b.n	8007aaa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	3301      	adds	r3, #1
 8007aa0:	60fb      	str	r3, [r7, #12]
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2b07      	cmp	r3, #7
 8007aa6:	d9e7      	bls.n	8007a78 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007aa8:	bf00      	nop
 8007aaa:	bf00      	nop
 8007aac:	3714      	adds	r7, #20
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab4:	4770      	bx	lr
 8007ab6:	bf00      	nop
 8007ab8:	20000960 	.word	0x20000960

08007abc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b086      	sub	sp, #24
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	60f8      	str	r0, [r7, #12]
 8007ac4:	60b9      	str	r1, [r7, #8]
 8007ac6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007acc:	f001 fbca 	bl	8009264 <vPortEnterCritical>
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007ad6:	b25b      	sxtb	r3, r3
 8007ad8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007adc:	d103      	bne.n	8007ae6 <vQueueWaitForMessageRestricted+0x2a>
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007aec:	b25b      	sxtb	r3, r3
 8007aee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007af2:	d103      	bne.n	8007afc <vQueueWaitForMessageRestricted+0x40>
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	2200      	movs	r2, #0
 8007af8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007afc:	f001 fbe2 	bl	80092c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d106      	bne.n	8007b16 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	3324      	adds	r3, #36	; 0x24
 8007b0c:	687a      	ldr	r2, [r7, #4]
 8007b0e:	68b9      	ldr	r1, [r7, #8]
 8007b10:	4618      	mov	r0, r3
 8007b12:	f000 fc61 	bl	80083d8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007b16:	6978      	ldr	r0, [r7, #20]
 8007b18:	f7ff ff26 	bl	8007968 <prvUnlockQueue>
	}
 8007b1c:	bf00      	nop
 8007b1e:	3718      	adds	r7, #24
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}

08007b24 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b08e      	sub	sp, #56	; 0x38
 8007b28:	af04      	add	r7, sp, #16
 8007b2a:	60f8      	str	r0, [r7, #12]
 8007b2c:	60b9      	str	r1, [r7, #8]
 8007b2e:	607a      	str	r2, [r7, #4]
 8007b30:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d10a      	bne.n	8007b4e <xTaskCreateStatic+0x2a>
	__asm volatile
 8007b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b3c:	f383 8811 	msr	BASEPRI, r3
 8007b40:	f3bf 8f6f 	isb	sy
 8007b44:	f3bf 8f4f 	dsb	sy
 8007b48:	623b      	str	r3, [r7, #32]
}
 8007b4a:	bf00      	nop
 8007b4c:	e7fe      	b.n	8007b4c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d10a      	bne.n	8007b6a <xTaskCreateStatic+0x46>
	__asm volatile
 8007b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b58:	f383 8811 	msr	BASEPRI, r3
 8007b5c:	f3bf 8f6f 	isb	sy
 8007b60:	f3bf 8f4f 	dsb	sy
 8007b64:	61fb      	str	r3, [r7, #28]
}
 8007b66:	bf00      	nop
 8007b68:	e7fe      	b.n	8007b68 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007b6a:	23bc      	movs	r3, #188	; 0xbc
 8007b6c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	2bbc      	cmp	r3, #188	; 0xbc
 8007b72:	d00a      	beq.n	8007b8a <xTaskCreateStatic+0x66>
	__asm volatile
 8007b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b78:	f383 8811 	msr	BASEPRI, r3
 8007b7c:	f3bf 8f6f 	isb	sy
 8007b80:	f3bf 8f4f 	dsb	sy
 8007b84:	61bb      	str	r3, [r7, #24]
}
 8007b86:	bf00      	nop
 8007b88:	e7fe      	b.n	8007b88 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007b8a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d01e      	beq.n	8007bd0 <xTaskCreateStatic+0xac>
 8007b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d01b      	beq.n	8007bd0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b9a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ba0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba4:	2202      	movs	r2, #2
 8007ba6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007baa:	2300      	movs	r3, #0
 8007bac:	9303      	str	r3, [sp, #12]
 8007bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb0:	9302      	str	r3, [sp, #8]
 8007bb2:	f107 0314 	add.w	r3, r7, #20
 8007bb6:	9301      	str	r3, [sp, #4]
 8007bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bba:	9300      	str	r3, [sp, #0]
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	687a      	ldr	r2, [r7, #4]
 8007bc0:	68b9      	ldr	r1, [r7, #8]
 8007bc2:	68f8      	ldr	r0, [r7, #12]
 8007bc4:	f000 f850 	bl	8007c68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007bc8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007bca:	f000 f8f3 	bl	8007db4 <prvAddNewTaskToReadyList>
 8007bce:	e001      	b.n	8007bd4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007bd4:	697b      	ldr	r3, [r7, #20]
	}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3728      	adds	r7, #40	; 0x28
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}

08007bde <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007bde:	b580      	push	{r7, lr}
 8007be0:	b08c      	sub	sp, #48	; 0x30
 8007be2:	af04      	add	r7, sp, #16
 8007be4:	60f8      	str	r0, [r7, #12]
 8007be6:	60b9      	str	r1, [r7, #8]
 8007be8:	603b      	str	r3, [r7, #0]
 8007bea:	4613      	mov	r3, r2
 8007bec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007bee:	88fb      	ldrh	r3, [r7, #6]
 8007bf0:	009b      	lsls	r3, r3, #2
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f001 fc58 	bl	80094a8 <pvPortMalloc>
 8007bf8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d00e      	beq.n	8007c1e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007c00:	20bc      	movs	r0, #188	; 0xbc
 8007c02:	f001 fc51 	bl	80094a8 <pvPortMalloc>
 8007c06:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007c08:	69fb      	ldr	r3, [r7, #28]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d003      	beq.n	8007c16 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007c0e:	69fb      	ldr	r3, [r7, #28]
 8007c10:	697a      	ldr	r2, [r7, #20]
 8007c12:	631a      	str	r2, [r3, #48]	; 0x30
 8007c14:	e005      	b.n	8007c22 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007c16:	6978      	ldr	r0, [r7, #20]
 8007c18:	f001 fd12 	bl	8009640 <vPortFree>
 8007c1c:	e001      	b.n	8007c22 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007c22:	69fb      	ldr	r3, [r7, #28]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d017      	beq.n	8007c58 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007c28:	69fb      	ldr	r3, [r7, #28]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007c30:	88fa      	ldrh	r2, [r7, #6]
 8007c32:	2300      	movs	r3, #0
 8007c34:	9303      	str	r3, [sp, #12]
 8007c36:	69fb      	ldr	r3, [r7, #28]
 8007c38:	9302      	str	r3, [sp, #8]
 8007c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c3c:	9301      	str	r3, [sp, #4]
 8007c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c40:	9300      	str	r3, [sp, #0]
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	68b9      	ldr	r1, [r7, #8]
 8007c46:	68f8      	ldr	r0, [r7, #12]
 8007c48:	f000 f80e 	bl	8007c68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007c4c:	69f8      	ldr	r0, [r7, #28]
 8007c4e:	f000 f8b1 	bl	8007db4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007c52:	2301      	movs	r3, #1
 8007c54:	61bb      	str	r3, [r7, #24]
 8007c56:	e002      	b.n	8007c5e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007c58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c5c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007c5e:	69bb      	ldr	r3, [r7, #24]
	}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3720      	adds	r7, #32
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b088      	sub	sp, #32
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	60f8      	str	r0, [r7, #12]
 8007c70:	60b9      	str	r1, [r7, #8]
 8007c72:	607a      	str	r2, [r7, #4]
 8007c74:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c78:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	009b      	lsls	r3, r3, #2
 8007c7e:	461a      	mov	r2, r3
 8007c80:	21a5      	movs	r1, #165	; 0xa5
 8007c82:	f002 fc11 	bl	800a4a8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007c90:	3b01      	subs	r3, #1
 8007c92:	009b      	lsls	r3, r3, #2
 8007c94:	4413      	add	r3, r2
 8007c96:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007c98:	69bb      	ldr	r3, [r7, #24]
 8007c9a:	f023 0307 	bic.w	r3, r3, #7
 8007c9e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007ca0:	69bb      	ldr	r3, [r7, #24]
 8007ca2:	f003 0307 	and.w	r3, r3, #7
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d00a      	beq.n	8007cc0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cae:	f383 8811 	msr	BASEPRI, r3
 8007cb2:	f3bf 8f6f 	isb	sy
 8007cb6:	f3bf 8f4f 	dsb	sy
 8007cba:	617b      	str	r3, [r7, #20]
}
 8007cbc:	bf00      	nop
 8007cbe:	e7fe      	b.n	8007cbe <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d01f      	beq.n	8007d06 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	61fb      	str	r3, [r7, #28]
 8007cca:	e012      	b.n	8007cf2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007ccc:	68ba      	ldr	r2, [r7, #8]
 8007cce:	69fb      	ldr	r3, [r7, #28]
 8007cd0:	4413      	add	r3, r2
 8007cd2:	7819      	ldrb	r1, [r3, #0]
 8007cd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cd6:	69fb      	ldr	r3, [r7, #28]
 8007cd8:	4413      	add	r3, r2
 8007cda:	3334      	adds	r3, #52	; 0x34
 8007cdc:	460a      	mov	r2, r1
 8007cde:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007ce0:	68ba      	ldr	r2, [r7, #8]
 8007ce2:	69fb      	ldr	r3, [r7, #28]
 8007ce4:	4413      	add	r3, r2
 8007ce6:	781b      	ldrb	r3, [r3, #0]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d006      	beq.n	8007cfa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007cec:	69fb      	ldr	r3, [r7, #28]
 8007cee:	3301      	adds	r3, #1
 8007cf0:	61fb      	str	r3, [r7, #28]
 8007cf2:	69fb      	ldr	r3, [r7, #28]
 8007cf4:	2b0f      	cmp	r3, #15
 8007cf6:	d9e9      	bls.n	8007ccc <prvInitialiseNewTask+0x64>
 8007cf8:	e000      	b.n	8007cfc <prvInitialiseNewTask+0x94>
			{
				break;
 8007cfa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cfe:	2200      	movs	r2, #0
 8007d00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007d04:	e003      	b.n	8007d0e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d08:	2200      	movs	r2, #0
 8007d0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d10:	2b37      	cmp	r3, #55	; 0x37
 8007d12:	d901      	bls.n	8007d18 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007d14:	2337      	movs	r3, #55	; 0x37
 8007d16:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d1c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d22:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d26:	2200      	movs	r2, #0
 8007d28:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d2c:	3304      	adds	r3, #4
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f7ff f978 	bl	8007024 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d36:	3318      	adds	r3, #24
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f7ff f973 	bl	8007024 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d42:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d46:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d4c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d52:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d56:	2200      	movs	r2, #0
 8007d58:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d5e:	2200      	movs	r2, #0
 8007d60:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d66:	3354      	adds	r3, #84	; 0x54
 8007d68:	2260      	movs	r2, #96	; 0x60
 8007d6a:	2100      	movs	r1, #0
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f002 fb9b 	bl	800a4a8 <memset>
 8007d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d74:	4a0c      	ldr	r2, [pc, #48]	; (8007da8 <prvInitialiseNewTask+0x140>)
 8007d76:	659a      	str	r2, [r3, #88]	; 0x58
 8007d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d7a:	4a0c      	ldr	r2, [pc, #48]	; (8007dac <prvInitialiseNewTask+0x144>)
 8007d7c:	65da      	str	r2, [r3, #92]	; 0x5c
 8007d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d80:	4a0b      	ldr	r2, [pc, #44]	; (8007db0 <prvInitialiseNewTask+0x148>)
 8007d82:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007d84:	683a      	ldr	r2, [r7, #0]
 8007d86:	68f9      	ldr	r1, [r7, #12]
 8007d88:	69b8      	ldr	r0, [r7, #24]
 8007d8a:	f001 f941 	bl	8009010 <pxPortInitialiseStack>
 8007d8e:	4602      	mov	r2, r0
 8007d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d92:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d002      	beq.n	8007da0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d9e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007da0:	bf00      	nop
 8007da2:	3720      	adds	r7, #32
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}
 8007da8:	0800a9b4 	.word	0x0800a9b4
 8007dac:	0800a9d4 	.word	0x0800a9d4
 8007db0:	0800a994 	.word	0x0800a994

08007db4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b082      	sub	sp, #8
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007dbc:	f001 fa52 	bl	8009264 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007dc0:	4b2d      	ldr	r3, [pc, #180]	; (8007e78 <prvAddNewTaskToReadyList+0xc4>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	3301      	adds	r3, #1
 8007dc6:	4a2c      	ldr	r2, [pc, #176]	; (8007e78 <prvAddNewTaskToReadyList+0xc4>)
 8007dc8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007dca:	4b2c      	ldr	r3, [pc, #176]	; (8007e7c <prvAddNewTaskToReadyList+0xc8>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d109      	bne.n	8007de6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007dd2:	4a2a      	ldr	r2, [pc, #168]	; (8007e7c <prvAddNewTaskToReadyList+0xc8>)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007dd8:	4b27      	ldr	r3, [pc, #156]	; (8007e78 <prvAddNewTaskToReadyList+0xc4>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d110      	bne.n	8007e02 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007de0:	f000 fc26 	bl	8008630 <prvInitialiseTaskLists>
 8007de4:	e00d      	b.n	8007e02 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007de6:	4b26      	ldr	r3, [pc, #152]	; (8007e80 <prvAddNewTaskToReadyList+0xcc>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d109      	bne.n	8007e02 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007dee:	4b23      	ldr	r3, [pc, #140]	; (8007e7c <prvAddNewTaskToReadyList+0xc8>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	d802      	bhi.n	8007e02 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007dfc:	4a1f      	ldr	r2, [pc, #124]	; (8007e7c <prvAddNewTaskToReadyList+0xc8>)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007e02:	4b20      	ldr	r3, [pc, #128]	; (8007e84 <prvAddNewTaskToReadyList+0xd0>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	3301      	adds	r3, #1
 8007e08:	4a1e      	ldr	r2, [pc, #120]	; (8007e84 <prvAddNewTaskToReadyList+0xd0>)
 8007e0a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007e0c:	4b1d      	ldr	r3, [pc, #116]	; (8007e84 <prvAddNewTaskToReadyList+0xd0>)
 8007e0e:	681a      	ldr	r2, [r3, #0]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e18:	4b1b      	ldr	r3, [pc, #108]	; (8007e88 <prvAddNewTaskToReadyList+0xd4>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	429a      	cmp	r2, r3
 8007e1e:	d903      	bls.n	8007e28 <prvAddNewTaskToReadyList+0x74>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e24:	4a18      	ldr	r2, [pc, #96]	; (8007e88 <prvAddNewTaskToReadyList+0xd4>)
 8007e26:	6013      	str	r3, [r2, #0]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e2c:	4613      	mov	r3, r2
 8007e2e:	009b      	lsls	r3, r3, #2
 8007e30:	4413      	add	r3, r2
 8007e32:	009b      	lsls	r3, r3, #2
 8007e34:	4a15      	ldr	r2, [pc, #84]	; (8007e8c <prvAddNewTaskToReadyList+0xd8>)
 8007e36:	441a      	add	r2, r3
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	3304      	adds	r3, #4
 8007e3c:	4619      	mov	r1, r3
 8007e3e:	4610      	mov	r0, r2
 8007e40:	f7ff f8fd 	bl	800703e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007e44:	f001 fa3e 	bl	80092c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007e48:	4b0d      	ldr	r3, [pc, #52]	; (8007e80 <prvAddNewTaskToReadyList+0xcc>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d00e      	beq.n	8007e6e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007e50:	4b0a      	ldr	r3, [pc, #40]	; (8007e7c <prvAddNewTaskToReadyList+0xc8>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d207      	bcs.n	8007e6e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007e5e:	4b0c      	ldr	r3, [pc, #48]	; (8007e90 <prvAddNewTaskToReadyList+0xdc>)
 8007e60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e64:	601a      	str	r2, [r3, #0]
 8007e66:	f3bf 8f4f 	dsb	sy
 8007e6a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e6e:	bf00      	nop
 8007e70:	3708      	adds	r7, #8
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}
 8007e76:	bf00      	nop
 8007e78:	20000e74 	.word	0x20000e74
 8007e7c:	200009a0 	.word	0x200009a0
 8007e80:	20000e80 	.word	0x20000e80
 8007e84:	20000e90 	.word	0x20000e90
 8007e88:	20000e7c 	.word	0x20000e7c
 8007e8c:	200009a4 	.word	0x200009a4
 8007e90:	e000ed04 	.word	0xe000ed04

08007e94 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b084      	sub	sp, #16
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d017      	beq.n	8007ed6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007ea6:	4b13      	ldr	r3, [pc, #76]	; (8007ef4 <vTaskDelay+0x60>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d00a      	beq.n	8007ec4 <vTaskDelay+0x30>
	__asm volatile
 8007eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb2:	f383 8811 	msr	BASEPRI, r3
 8007eb6:	f3bf 8f6f 	isb	sy
 8007eba:	f3bf 8f4f 	dsb	sy
 8007ebe:	60bb      	str	r3, [r7, #8]
}
 8007ec0:	bf00      	nop
 8007ec2:	e7fe      	b.n	8007ec2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007ec4:	f000 f88a 	bl	8007fdc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007ec8:	2100      	movs	r1, #0
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f000 fcfe 	bl	80088cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007ed0:	f000 f892 	bl	8007ff8 <xTaskResumeAll>
 8007ed4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d107      	bne.n	8007eec <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007edc:	4b06      	ldr	r3, [pc, #24]	; (8007ef8 <vTaskDelay+0x64>)
 8007ede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ee2:	601a      	str	r2, [r3, #0]
 8007ee4:	f3bf 8f4f 	dsb	sy
 8007ee8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007eec:	bf00      	nop
 8007eee:	3710      	adds	r7, #16
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}
 8007ef4:	20000e9c 	.word	0x20000e9c
 8007ef8:	e000ed04 	.word	0xe000ed04

08007efc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b08a      	sub	sp, #40	; 0x28
 8007f00:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007f02:	2300      	movs	r3, #0
 8007f04:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007f06:	2300      	movs	r3, #0
 8007f08:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007f0a:	463a      	mov	r2, r7
 8007f0c:	1d39      	adds	r1, r7, #4
 8007f0e:	f107 0308 	add.w	r3, r7, #8
 8007f12:	4618      	mov	r0, r3
 8007f14:	f7ff f832 	bl	8006f7c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007f18:	6839      	ldr	r1, [r7, #0]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	68ba      	ldr	r2, [r7, #8]
 8007f1e:	9202      	str	r2, [sp, #8]
 8007f20:	9301      	str	r3, [sp, #4]
 8007f22:	2300      	movs	r3, #0
 8007f24:	9300      	str	r3, [sp, #0]
 8007f26:	2300      	movs	r3, #0
 8007f28:	460a      	mov	r2, r1
 8007f2a:	4924      	ldr	r1, [pc, #144]	; (8007fbc <vTaskStartScheduler+0xc0>)
 8007f2c:	4824      	ldr	r0, [pc, #144]	; (8007fc0 <vTaskStartScheduler+0xc4>)
 8007f2e:	f7ff fdf9 	bl	8007b24 <xTaskCreateStatic>
 8007f32:	4603      	mov	r3, r0
 8007f34:	4a23      	ldr	r2, [pc, #140]	; (8007fc4 <vTaskStartScheduler+0xc8>)
 8007f36:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007f38:	4b22      	ldr	r3, [pc, #136]	; (8007fc4 <vTaskStartScheduler+0xc8>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d002      	beq.n	8007f46 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007f40:	2301      	movs	r3, #1
 8007f42:	617b      	str	r3, [r7, #20]
 8007f44:	e001      	b.n	8007f4a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007f46:	2300      	movs	r3, #0
 8007f48:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	2b01      	cmp	r3, #1
 8007f4e:	d102      	bne.n	8007f56 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007f50:	f000 fd10 	bl	8008974 <xTimerCreateTimerTask>
 8007f54:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	2b01      	cmp	r3, #1
 8007f5a:	d11b      	bne.n	8007f94 <vTaskStartScheduler+0x98>
	__asm volatile
 8007f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f60:	f383 8811 	msr	BASEPRI, r3
 8007f64:	f3bf 8f6f 	isb	sy
 8007f68:	f3bf 8f4f 	dsb	sy
 8007f6c:	613b      	str	r3, [r7, #16]
}
 8007f6e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007f70:	4b15      	ldr	r3, [pc, #84]	; (8007fc8 <vTaskStartScheduler+0xcc>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	3354      	adds	r3, #84	; 0x54
 8007f76:	4a15      	ldr	r2, [pc, #84]	; (8007fcc <vTaskStartScheduler+0xd0>)
 8007f78:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007f7a:	4b15      	ldr	r3, [pc, #84]	; (8007fd0 <vTaskStartScheduler+0xd4>)
 8007f7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007f80:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007f82:	4b14      	ldr	r3, [pc, #80]	; (8007fd4 <vTaskStartScheduler+0xd8>)
 8007f84:	2201      	movs	r2, #1
 8007f86:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007f88:	4b13      	ldr	r3, [pc, #76]	; (8007fd8 <vTaskStartScheduler+0xdc>)
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007f8e:	f001 f8c7 	bl	8009120 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007f92:	e00e      	b.n	8007fb2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f9a:	d10a      	bne.n	8007fb2 <vTaskStartScheduler+0xb6>
	__asm volatile
 8007f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa0:	f383 8811 	msr	BASEPRI, r3
 8007fa4:	f3bf 8f6f 	isb	sy
 8007fa8:	f3bf 8f4f 	dsb	sy
 8007fac:	60fb      	str	r3, [r7, #12]
}
 8007fae:	bf00      	nop
 8007fb0:	e7fe      	b.n	8007fb0 <vTaskStartScheduler+0xb4>
}
 8007fb2:	bf00      	nop
 8007fb4:	3718      	adds	r7, #24
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}
 8007fba:	bf00      	nop
 8007fbc:	0800a878 	.word	0x0800a878
 8007fc0:	08008601 	.word	0x08008601
 8007fc4:	20000e98 	.word	0x20000e98
 8007fc8:	200009a0 	.word	0x200009a0
 8007fcc:	20000100 	.word	0x20000100
 8007fd0:	20000e94 	.word	0x20000e94
 8007fd4:	20000e80 	.word	0x20000e80
 8007fd8:	20000e78 	.word	0x20000e78

08007fdc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007fdc:	b480      	push	{r7}
 8007fde:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007fe0:	4b04      	ldr	r3, [pc, #16]	; (8007ff4 <vTaskSuspendAll+0x18>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	3301      	adds	r3, #1
 8007fe6:	4a03      	ldr	r2, [pc, #12]	; (8007ff4 <vTaskSuspendAll+0x18>)
 8007fe8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007fea:	bf00      	nop
 8007fec:	46bd      	mov	sp, r7
 8007fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff2:	4770      	bx	lr
 8007ff4:	20000e9c 	.word	0x20000e9c

08007ff8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b084      	sub	sp, #16
 8007ffc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007ffe:	2300      	movs	r3, #0
 8008000:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008002:	2300      	movs	r3, #0
 8008004:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008006:	4b42      	ldr	r3, [pc, #264]	; (8008110 <xTaskResumeAll+0x118>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d10a      	bne.n	8008024 <xTaskResumeAll+0x2c>
	__asm volatile
 800800e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008012:	f383 8811 	msr	BASEPRI, r3
 8008016:	f3bf 8f6f 	isb	sy
 800801a:	f3bf 8f4f 	dsb	sy
 800801e:	603b      	str	r3, [r7, #0]
}
 8008020:	bf00      	nop
 8008022:	e7fe      	b.n	8008022 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008024:	f001 f91e 	bl	8009264 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008028:	4b39      	ldr	r3, [pc, #228]	; (8008110 <xTaskResumeAll+0x118>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	3b01      	subs	r3, #1
 800802e:	4a38      	ldr	r2, [pc, #224]	; (8008110 <xTaskResumeAll+0x118>)
 8008030:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008032:	4b37      	ldr	r3, [pc, #220]	; (8008110 <xTaskResumeAll+0x118>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d162      	bne.n	8008100 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800803a:	4b36      	ldr	r3, [pc, #216]	; (8008114 <xTaskResumeAll+0x11c>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d05e      	beq.n	8008100 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008042:	e02f      	b.n	80080a4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008044:	4b34      	ldr	r3, [pc, #208]	; (8008118 <xTaskResumeAll+0x120>)
 8008046:	68db      	ldr	r3, [r3, #12]
 8008048:	68db      	ldr	r3, [r3, #12]
 800804a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	3318      	adds	r3, #24
 8008050:	4618      	mov	r0, r3
 8008052:	f7ff f851 	bl	80070f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	3304      	adds	r3, #4
 800805a:	4618      	mov	r0, r3
 800805c:	f7ff f84c 	bl	80070f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008064:	4b2d      	ldr	r3, [pc, #180]	; (800811c <xTaskResumeAll+0x124>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	429a      	cmp	r2, r3
 800806a:	d903      	bls.n	8008074 <xTaskResumeAll+0x7c>
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008070:	4a2a      	ldr	r2, [pc, #168]	; (800811c <xTaskResumeAll+0x124>)
 8008072:	6013      	str	r3, [r2, #0]
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008078:	4613      	mov	r3, r2
 800807a:	009b      	lsls	r3, r3, #2
 800807c:	4413      	add	r3, r2
 800807e:	009b      	lsls	r3, r3, #2
 8008080:	4a27      	ldr	r2, [pc, #156]	; (8008120 <xTaskResumeAll+0x128>)
 8008082:	441a      	add	r2, r3
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	3304      	adds	r3, #4
 8008088:	4619      	mov	r1, r3
 800808a:	4610      	mov	r0, r2
 800808c:	f7fe ffd7 	bl	800703e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008094:	4b23      	ldr	r3, [pc, #140]	; (8008124 <xTaskResumeAll+0x12c>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800809a:	429a      	cmp	r2, r3
 800809c:	d302      	bcc.n	80080a4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800809e:	4b22      	ldr	r3, [pc, #136]	; (8008128 <xTaskResumeAll+0x130>)
 80080a0:	2201      	movs	r2, #1
 80080a2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80080a4:	4b1c      	ldr	r3, [pc, #112]	; (8008118 <xTaskResumeAll+0x120>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d1cb      	bne.n	8008044 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d001      	beq.n	80080b6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80080b2:	f000 fb5f 	bl	8008774 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80080b6:	4b1d      	ldr	r3, [pc, #116]	; (800812c <xTaskResumeAll+0x134>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d010      	beq.n	80080e4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80080c2:	f000 f847 	bl	8008154 <xTaskIncrementTick>
 80080c6:	4603      	mov	r3, r0
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d002      	beq.n	80080d2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80080cc:	4b16      	ldr	r3, [pc, #88]	; (8008128 <xTaskResumeAll+0x130>)
 80080ce:	2201      	movs	r2, #1
 80080d0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	3b01      	subs	r3, #1
 80080d6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d1f1      	bne.n	80080c2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80080de:	4b13      	ldr	r3, [pc, #76]	; (800812c <xTaskResumeAll+0x134>)
 80080e0:	2200      	movs	r2, #0
 80080e2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80080e4:	4b10      	ldr	r3, [pc, #64]	; (8008128 <xTaskResumeAll+0x130>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d009      	beq.n	8008100 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80080ec:	2301      	movs	r3, #1
 80080ee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80080f0:	4b0f      	ldr	r3, [pc, #60]	; (8008130 <xTaskResumeAll+0x138>)
 80080f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080f6:	601a      	str	r2, [r3, #0]
 80080f8:	f3bf 8f4f 	dsb	sy
 80080fc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008100:	f001 f8e0 	bl	80092c4 <vPortExitCritical>

	return xAlreadyYielded;
 8008104:	68bb      	ldr	r3, [r7, #8]
}
 8008106:	4618      	mov	r0, r3
 8008108:	3710      	adds	r7, #16
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}
 800810e:	bf00      	nop
 8008110:	20000e9c 	.word	0x20000e9c
 8008114:	20000e74 	.word	0x20000e74
 8008118:	20000e34 	.word	0x20000e34
 800811c:	20000e7c 	.word	0x20000e7c
 8008120:	200009a4 	.word	0x200009a4
 8008124:	200009a0 	.word	0x200009a0
 8008128:	20000e88 	.word	0x20000e88
 800812c:	20000e84 	.word	0x20000e84
 8008130:	e000ed04 	.word	0xe000ed04

08008134 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008134:	b480      	push	{r7}
 8008136:	b083      	sub	sp, #12
 8008138:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800813a:	4b05      	ldr	r3, [pc, #20]	; (8008150 <xTaskGetTickCount+0x1c>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008140:	687b      	ldr	r3, [r7, #4]
}
 8008142:	4618      	mov	r0, r3
 8008144:	370c      	adds	r7, #12
 8008146:	46bd      	mov	sp, r7
 8008148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814c:	4770      	bx	lr
 800814e:	bf00      	nop
 8008150:	20000e78 	.word	0x20000e78

08008154 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b086      	sub	sp, #24
 8008158:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800815a:	2300      	movs	r3, #0
 800815c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800815e:	4b4f      	ldr	r3, [pc, #316]	; (800829c <xTaskIncrementTick+0x148>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	2b00      	cmp	r3, #0
 8008164:	f040 808f 	bne.w	8008286 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008168:	4b4d      	ldr	r3, [pc, #308]	; (80082a0 <xTaskIncrementTick+0x14c>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	3301      	adds	r3, #1
 800816e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008170:	4a4b      	ldr	r2, [pc, #300]	; (80082a0 <xTaskIncrementTick+0x14c>)
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d120      	bne.n	80081be <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800817c:	4b49      	ldr	r3, [pc, #292]	; (80082a4 <xTaskIncrementTick+0x150>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d00a      	beq.n	800819c <xTaskIncrementTick+0x48>
	__asm volatile
 8008186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800818a:	f383 8811 	msr	BASEPRI, r3
 800818e:	f3bf 8f6f 	isb	sy
 8008192:	f3bf 8f4f 	dsb	sy
 8008196:	603b      	str	r3, [r7, #0]
}
 8008198:	bf00      	nop
 800819a:	e7fe      	b.n	800819a <xTaskIncrementTick+0x46>
 800819c:	4b41      	ldr	r3, [pc, #260]	; (80082a4 <xTaskIncrementTick+0x150>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	60fb      	str	r3, [r7, #12]
 80081a2:	4b41      	ldr	r3, [pc, #260]	; (80082a8 <xTaskIncrementTick+0x154>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4a3f      	ldr	r2, [pc, #252]	; (80082a4 <xTaskIncrementTick+0x150>)
 80081a8:	6013      	str	r3, [r2, #0]
 80081aa:	4a3f      	ldr	r2, [pc, #252]	; (80082a8 <xTaskIncrementTick+0x154>)
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	6013      	str	r3, [r2, #0]
 80081b0:	4b3e      	ldr	r3, [pc, #248]	; (80082ac <xTaskIncrementTick+0x158>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	3301      	adds	r3, #1
 80081b6:	4a3d      	ldr	r2, [pc, #244]	; (80082ac <xTaskIncrementTick+0x158>)
 80081b8:	6013      	str	r3, [r2, #0]
 80081ba:	f000 fadb 	bl	8008774 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80081be:	4b3c      	ldr	r3, [pc, #240]	; (80082b0 <xTaskIncrementTick+0x15c>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	693a      	ldr	r2, [r7, #16]
 80081c4:	429a      	cmp	r2, r3
 80081c6:	d349      	bcc.n	800825c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80081c8:	4b36      	ldr	r3, [pc, #216]	; (80082a4 <xTaskIncrementTick+0x150>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d104      	bne.n	80081dc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081d2:	4b37      	ldr	r3, [pc, #220]	; (80082b0 <xTaskIncrementTick+0x15c>)
 80081d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80081d8:	601a      	str	r2, [r3, #0]
					break;
 80081da:	e03f      	b.n	800825c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081dc:	4b31      	ldr	r3, [pc, #196]	; (80082a4 <xTaskIncrementTick+0x150>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	68db      	ldr	r3, [r3, #12]
 80081e2:	68db      	ldr	r3, [r3, #12]
 80081e4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	685b      	ldr	r3, [r3, #4]
 80081ea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80081ec:	693a      	ldr	r2, [r7, #16]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	429a      	cmp	r2, r3
 80081f2:	d203      	bcs.n	80081fc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80081f4:	4a2e      	ldr	r2, [pc, #184]	; (80082b0 <xTaskIncrementTick+0x15c>)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80081fa:	e02f      	b.n	800825c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	3304      	adds	r3, #4
 8008200:	4618      	mov	r0, r3
 8008202:	f7fe ff79 	bl	80070f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800820a:	2b00      	cmp	r3, #0
 800820c:	d004      	beq.n	8008218 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	3318      	adds	r3, #24
 8008212:	4618      	mov	r0, r3
 8008214:	f7fe ff70 	bl	80070f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800821c:	4b25      	ldr	r3, [pc, #148]	; (80082b4 <xTaskIncrementTick+0x160>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	429a      	cmp	r2, r3
 8008222:	d903      	bls.n	800822c <xTaskIncrementTick+0xd8>
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008228:	4a22      	ldr	r2, [pc, #136]	; (80082b4 <xTaskIncrementTick+0x160>)
 800822a:	6013      	str	r3, [r2, #0]
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008230:	4613      	mov	r3, r2
 8008232:	009b      	lsls	r3, r3, #2
 8008234:	4413      	add	r3, r2
 8008236:	009b      	lsls	r3, r3, #2
 8008238:	4a1f      	ldr	r2, [pc, #124]	; (80082b8 <xTaskIncrementTick+0x164>)
 800823a:	441a      	add	r2, r3
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	3304      	adds	r3, #4
 8008240:	4619      	mov	r1, r3
 8008242:	4610      	mov	r0, r2
 8008244:	f7fe fefb 	bl	800703e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800824c:	4b1b      	ldr	r3, [pc, #108]	; (80082bc <xTaskIncrementTick+0x168>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008252:	429a      	cmp	r2, r3
 8008254:	d3b8      	bcc.n	80081c8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008256:	2301      	movs	r3, #1
 8008258:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800825a:	e7b5      	b.n	80081c8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800825c:	4b17      	ldr	r3, [pc, #92]	; (80082bc <xTaskIncrementTick+0x168>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008262:	4915      	ldr	r1, [pc, #84]	; (80082b8 <xTaskIncrementTick+0x164>)
 8008264:	4613      	mov	r3, r2
 8008266:	009b      	lsls	r3, r3, #2
 8008268:	4413      	add	r3, r2
 800826a:	009b      	lsls	r3, r3, #2
 800826c:	440b      	add	r3, r1
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	2b01      	cmp	r3, #1
 8008272:	d901      	bls.n	8008278 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008274:	2301      	movs	r3, #1
 8008276:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008278:	4b11      	ldr	r3, [pc, #68]	; (80082c0 <xTaskIncrementTick+0x16c>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d007      	beq.n	8008290 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008280:	2301      	movs	r3, #1
 8008282:	617b      	str	r3, [r7, #20]
 8008284:	e004      	b.n	8008290 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008286:	4b0f      	ldr	r3, [pc, #60]	; (80082c4 <xTaskIncrementTick+0x170>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	3301      	adds	r3, #1
 800828c:	4a0d      	ldr	r2, [pc, #52]	; (80082c4 <xTaskIncrementTick+0x170>)
 800828e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008290:	697b      	ldr	r3, [r7, #20]
}
 8008292:	4618      	mov	r0, r3
 8008294:	3718      	adds	r7, #24
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}
 800829a:	bf00      	nop
 800829c:	20000e9c 	.word	0x20000e9c
 80082a0:	20000e78 	.word	0x20000e78
 80082a4:	20000e2c 	.word	0x20000e2c
 80082a8:	20000e30 	.word	0x20000e30
 80082ac:	20000e8c 	.word	0x20000e8c
 80082b0:	20000e94 	.word	0x20000e94
 80082b4:	20000e7c 	.word	0x20000e7c
 80082b8:	200009a4 	.word	0x200009a4
 80082bc:	200009a0 	.word	0x200009a0
 80082c0:	20000e88 	.word	0x20000e88
 80082c4:	20000e84 	.word	0x20000e84

080082c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80082c8:	b480      	push	{r7}
 80082ca:	b085      	sub	sp, #20
 80082cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80082ce:	4b2a      	ldr	r3, [pc, #168]	; (8008378 <vTaskSwitchContext+0xb0>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d003      	beq.n	80082de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80082d6:	4b29      	ldr	r3, [pc, #164]	; (800837c <vTaskSwitchContext+0xb4>)
 80082d8:	2201      	movs	r2, #1
 80082da:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80082dc:	e046      	b.n	800836c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80082de:	4b27      	ldr	r3, [pc, #156]	; (800837c <vTaskSwitchContext+0xb4>)
 80082e0:	2200      	movs	r2, #0
 80082e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082e4:	4b26      	ldr	r3, [pc, #152]	; (8008380 <vTaskSwitchContext+0xb8>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	60fb      	str	r3, [r7, #12]
 80082ea:	e010      	b.n	800830e <vTaskSwitchContext+0x46>
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d10a      	bne.n	8008308 <vTaskSwitchContext+0x40>
	__asm volatile
 80082f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f6:	f383 8811 	msr	BASEPRI, r3
 80082fa:	f3bf 8f6f 	isb	sy
 80082fe:	f3bf 8f4f 	dsb	sy
 8008302:	607b      	str	r3, [r7, #4]
}
 8008304:	bf00      	nop
 8008306:	e7fe      	b.n	8008306 <vTaskSwitchContext+0x3e>
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	3b01      	subs	r3, #1
 800830c:	60fb      	str	r3, [r7, #12]
 800830e:	491d      	ldr	r1, [pc, #116]	; (8008384 <vTaskSwitchContext+0xbc>)
 8008310:	68fa      	ldr	r2, [r7, #12]
 8008312:	4613      	mov	r3, r2
 8008314:	009b      	lsls	r3, r3, #2
 8008316:	4413      	add	r3, r2
 8008318:	009b      	lsls	r3, r3, #2
 800831a:	440b      	add	r3, r1
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d0e4      	beq.n	80082ec <vTaskSwitchContext+0x24>
 8008322:	68fa      	ldr	r2, [r7, #12]
 8008324:	4613      	mov	r3, r2
 8008326:	009b      	lsls	r3, r3, #2
 8008328:	4413      	add	r3, r2
 800832a:	009b      	lsls	r3, r3, #2
 800832c:	4a15      	ldr	r2, [pc, #84]	; (8008384 <vTaskSwitchContext+0xbc>)
 800832e:	4413      	add	r3, r2
 8008330:	60bb      	str	r3, [r7, #8]
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	685b      	ldr	r3, [r3, #4]
 8008336:	685a      	ldr	r2, [r3, #4]
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	605a      	str	r2, [r3, #4]
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	685a      	ldr	r2, [r3, #4]
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	3308      	adds	r3, #8
 8008344:	429a      	cmp	r2, r3
 8008346:	d104      	bne.n	8008352 <vTaskSwitchContext+0x8a>
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	685b      	ldr	r3, [r3, #4]
 800834c:	685a      	ldr	r2, [r3, #4]
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	605a      	str	r2, [r3, #4]
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	685b      	ldr	r3, [r3, #4]
 8008356:	68db      	ldr	r3, [r3, #12]
 8008358:	4a0b      	ldr	r2, [pc, #44]	; (8008388 <vTaskSwitchContext+0xc0>)
 800835a:	6013      	str	r3, [r2, #0]
 800835c:	4a08      	ldr	r2, [pc, #32]	; (8008380 <vTaskSwitchContext+0xb8>)
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008362:	4b09      	ldr	r3, [pc, #36]	; (8008388 <vTaskSwitchContext+0xc0>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	3354      	adds	r3, #84	; 0x54
 8008368:	4a08      	ldr	r2, [pc, #32]	; (800838c <vTaskSwitchContext+0xc4>)
 800836a:	6013      	str	r3, [r2, #0]
}
 800836c:	bf00      	nop
 800836e:	3714      	adds	r7, #20
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr
 8008378:	20000e9c 	.word	0x20000e9c
 800837c:	20000e88 	.word	0x20000e88
 8008380:	20000e7c 	.word	0x20000e7c
 8008384:	200009a4 	.word	0x200009a4
 8008388:	200009a0 	.word	0x200009a0
 800838c:	20000100 	.word	0x20000100

08008390 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b084      	sub	sp, #16
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
 8008398:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d10a      	bne.n	80083b6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80083a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a4:	f383 8811 	msr	BASEPRI, r3
 80083a8:	f3bf 8f6f 	isb	sy
 80083ac:	f3bf 8f4f 	dsb	sy
 80083b0:	60fb      	str	r3, [r7, #12]
}
 80083b2:	bf00      	nop
 80083b4:	e7fe      	b.n	80083b4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80083b6:	4b07      	ldr	r3, [pc, #28]	; (80083d4 <vTaskPlaceOnEventList+0x44>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	3318      	adds	r3, #24
 80083bc:	4619      	mov	r1, r3
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f7fe fe61 	bl	8007086 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80083c4:	2101      	movs	r1, #1
 80083c6:	6838      	ldr	r0, [r7, #0]
 80083c8:	f000 fa80 	bl	80088cc <prvAddCurrentTaskToDelayedList>
}
 80083cc:	bf00      	nop
 80083ce:	3710      	adds	r7, #16
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}
 80083d4:	200009a0 	.word	0x200009a0

080083d8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b086      	sub	sp, #24
 80083dc:	af00      	add	r7, sp, #0
 80083de:	60f8      	str	r0, [r7, #12]
 80083e0:	60b9      	str	r1, [r7, #8]
 80083e2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d10a      	bne.n	8008400 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80083ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ee:	f383 8811 	msr	BASEPRI, r3
 80083f2:	f3bf 8f6f 	isb	sy
 80083f6:	f3bf 8f4f 	dsb	sy
 80083fa:	617b      	str	r3, [r7, #20]
}
 80083fc:	bf00      	nop
 80083fe:	e7fe      	b.n	80083fe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008400:	4b0a      	ldr	r3, [pc, #40]	; (800842c <vTaskPlaceOnEventListRestricted+0x54>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	3318      	adds	r3, #24
 8008406:	4619      	mov	r1, r3
 8008408:	68f8      	ldr	r0, [r7, #12]
 800840a:	f7fe fe18 	bl	800703e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d002      	beq.n	800841a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008414:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008418:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800841a:	6879      	ldr	r1, [r7, #4]
 800841c:	68b8      	ldr	r0, [r7, #8]
 800841e:	f000 fa55 	bl	80088cc <prvAddCurrentTaskToDelayedList>
	}
 8008422:	bf00      	nop
 8008424:	3718      	adds	r7, #24
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}
 800842a:	bf00      	nop
 800842c:	200009a0 	.word	0x200009a0

08008430 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b086      	sub	sp, #24
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	68db      	ldr	r3, [r3, #12]
 800843c:	68db      	ldr	r3, [r3, #12]
 800843e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d10a      	bne.n	800845c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800844a:	f383 8811 	msr	BASEPRI, r3
 800844e:	f3bf 8f6f 	isb	sy
 8008452:	f3bf 8f4f 	dsb	sy
 8008456:	60fb      	str	r3, [r7, #12]
}
 8008458:	bf00      	nop
 800845a:	e7fe      	b.n	800845a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	3318      	adds	r3, #24
 8008460:	4618      	mov	r0, r3
 8008462:	f7fe fe49 	bl	80070f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008466:	4b1e      	ldr	r3, [pc, #120]	; (80084e0 <xTaskRemoveFromEventList+0xb0>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d11d      	bne.n	80084aa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	3304      	adds	r3, #4
 8008472:	4618      	mov	r0, r3
 8008474:	f7fe fe40 	bl	80070f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800847c:	4b19      	ldr	r3, [pc, #100]	; (80084e4 <xTaskRemoveFromEventList+0xb4>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	429a      	cmp	r2, r3
 8008482:	d903      	bls.n	800848c <xTaskRemoveFromEventList+0x5c>
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008488:	4a16      	ldr	r2, [pc, #88]	; (80084e4 <xTaskRemoveFromEventList+0xb4>)
 800848a:	6013      	str	r3, [r2, #0]
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008490:	4613      	mov	r3, r2
 8008492:	009b      	lsls	r3, r3, #2
 8008494:	4413      	add	r3, r2
 8008496:	009b      	lsls	r3, r3, #2
 8008498:	4a13      	ldr	r2, [pc, #76]	; (80084e8 <xTaskRemoveFromEventList+0xb8>)
 800849a:	441a      	add	r2, r3
 800849c:	693b      	ldr	r3, [r7, #16]
 800849e:	3304      	adds	r3, #4
 80084a0:	4619      	mov	r1, r3
 80084a2:	4610      	mov	r0, r2
 80084a4:	f7fe fdcb 	bl	800703e <vListInsertEnd>
 80084a8:	e005      	b.n	80084b6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	3318      	adds	r3, #24
 80084ae:	4619      	mov	r1, r3
 80084b0:	480e      	ldr	r0, [pc, #56]	; (80084ec <xTaskRemoveFromEventList+0xbc>)
 80084b2:	f7fe fdc4 	bl	800703e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084ba:	4b0d      	ldr	r3, [pc, #52]	; (80084f0 <xTaskRemoveFromEventList+0xc0>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084c0:	429a      	cmp	r2, r3
 80084c2:	d905      	bls.n	80084d0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80084c4:	2301      	movs	r3, #1
 80084c6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80084c8:	4b0a      	ldr	r3, [pc, #40]	; (80084f4 <xTaskRemoveFromEventList+0xc4>)
 80084ca:	2201      	movs	r2, #1
 80084cc:	601a      	str	r2, [r3, #0]
 80084ce:	e001      	b.n	80084d4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80084d0:	2300      	movs	r3, #0
 80084d2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80084d4:	697b      	ldr	r3, [r7, #20]
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3718      	adds	r7, #24
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}
 80084de:	bf00      	nop
 80084e0:	20000e9c 	.word	0x20000e9c
 80084e4:	20000e7c 	.word	0x20000e7c
 80084e8:	200009a4 	.word	0x200009a4
 80084ec:	20000e34 	.word	0x20000e34
 80084f0:	200009a0 	.word	0x200009a0
 80084f4:	20000e88 	.word	0x20000e88

080084f8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80084f8:	b480      	push	{r7}
 80084fa:	b083      	sub	sp, #12
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008500:	4b06      	ldr	r3, [pc, #24]	; (800851c <vTaskInternalSetTimeOutState+0x24>)
 8008502:	681a      	ldr	r2, [r3, #0]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008508:	4b05      	ldr	r3, [pc, #20]	; (8008520 <vTaskInternalSetTimeOutState+0x28>)
 800850a:	681a      	ldr	r2, [r3, #0]
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	605a      	str	r2, [r3, #4]
}
 8008510:	bf00      	nop
 8008512:	370c      	adds	r7, #12
 8008514:	46bd      	mov	sp, r7
 8008516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851a:	4770      	bx	lr
 800851c:	20000e8c 	.word	0x20000e8c
 8008520:	20000e78 	.word	0x20000e78

08008524 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b088      	sub	sp, #32
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d10a      	bne.n	800854a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008538:	f383 8811 	msr	BASEPRI, r3
 800853c:	f3bf 8f6f 	isb	sy
 8008540:	f3bf 8f4f 	dsb	sy
 8008544:	613b      	str	r3, [r7, #16]
}
 8008546:	bf00      	nop
 8008548:	e7fe      	b.n	8008548 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d10a      	bne.n	8008566 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008554:	f383 8811 	msr	BASEPRI, r3
 8008558:	f3bf 8f6f 	isb	sy
 800855c:	f3bf 8f4f 	dsb	sy
 8008560:	60fb      	str	r3, [r7, #12]
}
 8008562:	bf00      	nop
 8008564:	e7fe      	b.n	8008564 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008566:	f000 fe7d 	bl	8009264 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800856a:	4b1d      	ldr	r3, [pc, #116]	; (80085e0 <xTaskCheckForTimeOut+0xbc>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	685b      	ldr	r3, [r3, #4]
 8008574:	69ba      	ldr	r2, [r7, #24]
 8008576:	1ad3      	subs	r3, r2, r3
 8008578:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008582:	d102      	bne.n	800858a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008584:	2300      	movs	r3, #0
 8008586:	61fb      	str	r3, [r7, #28]
 8008588:	e023      	b.n	80085d2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681a      	ldr	r2, [r3, #0]
 800858e:	4b15      	ldr	r3, [pc, #84]	; (80085e4 <xTaskCheckForTimeOut+0xc0>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	429a      	cmp	r2, r3
 8008594:	d007      	beq.n	80085a6 <xTaskCheckForTimeOut+0x82>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	685b      	ldr	r3, [r3, #4]
 800859a:	69ba      	ldr	r2, [r7, #24]
 800859c:	429a      	cmp	r2, r3
 800859e:	d302      	bcc.n	80085a6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80085a0:	2301      	movs	r3, #1
 80085a2:	61fb      	str	r3, [r7, #28]
 80085a4:	e015      	b.n	80085d2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	697a      	ldr	r2, [r7, #20]
 80085ac:	429a      	cmp	r2, r3
 80085ae:	d20b      	bcs.n	80085c8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	681a      	ldr	r2, [r3, #0]
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	1ad2      	subs	r2, r2, r3
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f7ff ff9b 	bl	80084f8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80085c2:	2300      	movs	r3, #0
 80085c4:	61fb      	str	r3, [r7, #28]
 80085c6:	e004      	b.n	80085d2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	2200      	movs	r2, #0
 80085cc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80085ce:	2301      	movs	r3, #1
 80085d0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80085d2:	f000 fe77 	bl	80092c4 <vPortExitCritical>

	return xReturn;
 80085d6:	69fb      	ldr	r3, [r7, #28]
}
 80085d8:	4618      	mov	r0, r3
 80085da:	3720      	adds	r7, #32
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}
 80085e0:	20000e78 	.word	0x20000e78
 80085e4:	20000e8c 	.word	0x20000e8c

080085e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80085e8:	b480      	push	{r7}
 80085ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80085ec:	4b03      	ldr	r3, [pc, #12]	; (80085fc <vTaskMissedYield+0x14>)
 80085ee:	2201      	movs	r2, #1
 80085f0:	601a      	str	r2, [r3, #0]
}
 80085f2:	bf00      	nop
 80085f4:	46bd      	mov	sp, r7
 80085f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fa:	4770      	bx	lr
 80085fc:	20000e88 	.word	0x20000e88

08008600 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b082      	sub	sp, #8
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008608:	f000 f852 	bl	80086b0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800860c:	4b06      	ldr	r3, [pc, #24]	; (8008628 <prvIdleTask+0x28>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	2b01      	cmp	r3, #1
 8008612:	d9f9      	bls.n	8008608 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008614:	4b05      	ldr	r3, [pc, #20]	; (800862c <prvIdleTask+0x2c>)
 8008616:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800861a:	601a      	str	r2, [r3, #0]
 800861c:	f3bf 8f4f 	dsb	sy
 8008620:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008624:	e7f0      	b.n	8008608 <prvIdleTask+0x8>
 8008626:	bf00      	nop
 8008628:	200009a4 	.word	0x200009a4
 800862c:	e000ed04 	.word	0xe000ed04

08008630 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b082      	sub	sp, #8
 8008634:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008636:	2300      	movs	r3, #0
 8008638:	607b      	str	r3, [r7, #4]
 800863a:	e00c      	b.n	8008656 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800863c:	687a      	ldr	r2, [r7, #4]
 800863e:	4613      	mov	r3, r2
 8008640:	009b      	lsls	r3, r3, #2
 8008642:	4413      	add	r3, r2
 8008644:	009b      	lsls	r3, r3, #2
 8008646:	4a12      	ldr	r2, [pc, #72]	; (8008690 <prvInitialiseTaskLists+0x60>)
 8008648:	4413      	add	r3, r2
 800864a:	4618      	mov	r0, r3
 800864c:	f7fe fcca 	bl	8006fe4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	3301      	adds	r3, #1
 8008654:	607b      	str	r3, [r7, #4]
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2b37      	cmp	r3, #55	; 0x37
 800865a:	d9ef      	bls.n	800863c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800865c:	480d      	ldr	r0, [pc, #52]	; (8008694 <prvInitialiseTaskLists+0x64>)
 800865e:	f7fe fcc1 	bl	8006fe4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008662:	480d      	ldr	r0, [pc, #52]	; (8008698 <prvInitialiseTaskLists+0x68>)
 8008664:	f7fe fcbe 	bl	8006fe4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008668:	480c      	ldr	r0, [pc, #48]	; (800869c <prvInitialiseTaskLists+0x6c>)
 800866a:	f7fe fcbb 	bl	8006fe4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800866e:	480c      	ldr	r0, [pc, #48]	; (80086a0 <prvInitialiseTaskLists+0x70>)
 8008670:	f7fe fcb8 	bl	8006fe4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008674:	480b      	ldr	r0, [pc, #44]	; (80086a4 <prvInitialiseTaskLists+0x74>)
 8008676:	f7fe fcb5 	bl	8006fe4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800867a:	4b0b      	ldr	r3, [pc, #44]	; (80086a8 <prvInitialiseTaskLists+0x78>)
 800867c:	4a05      	ldr	r2, [pc, #20]	; (8008694 <prvInitialiseTaskLists+0x64>)
 800867e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008680:	4b0a      	ldr	r3, [pc, #40]	; (80086ac <prvInitialiseTaskLists+0x7c>)
 8008682:	4a05      	ldr	r2, [pc, #20]	; (8008698 <prvInitialiseTaskLists+0x68>)
 8008684:	601a      	str	r2, [r3, #0]
}
 8008686:	bf00      	nop
 8008688:	3708      	adds	r7, #8
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}
 800868e:	bf00      	nop
 8008690:	200009a4 	.word	0x200009a4
 8008694:	20000e04 	.word	0x20000e04
 8008698:	20000e18 	.word	0x20000e18
 800869c:	20000e34 	.word	0x20000e34
 80086a0:	20000e48 	.word	0x20000e48
 80086a4:	20000e60 	.word	0x20000e60
 80086a8:	20000e2c 	.word	0x20000e2c
 80086ac:	20000e30 	.word	0x20000e30

080086b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b082      	sub	sp, #8
 80086b4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80086b6:	e019      	b.n	80086ec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80086b8:	f000 fdd4 	bl	8009264 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086bc:	4b10      	ldr	r3, [pc, #64]	; (8008700 <prvCheckTasksWaitingTermination+0x50>)
 80086be:	68db      	ldr	r3, [r3, #12]
 80086c0:	68db      	ldr	r3, [r3, #12]
 80086c2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	3304      	adds	r3, #4
 80086c8:	4618      	mov	r0, r3
 80086ca:	f7fe fd15 	bl	80070f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80086ce:	4b0d      	ldr	r3, [pc, #52]	; (8008704 <prvCheckTasksWaitingTermination+0x54>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	3b01      	subs	r3, #1
 80086d4:	4a0b      	ldr	r2, [pc, #44]	; (8008704 <prvCheckTasksWaitingTermination+0x54>)
 80086d6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80086d8:	4b0b      	ldr	r3, [pc, #44]	; (8008708 <prvCheckTasksWaitingTermination+0x58>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	3b01      	subs	r3, #1
 80086de:	4a0a      	ldr	r2, [pc, #40]	; (8008708 <prvCheckTasksWaitingTermination+0x58>)
 80086e0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80086e2:	f000 fdef 	bl	80092c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f000 f810 	bl	800870c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80086ec:	4b06      	ldr	r3, [pc, #24]	; (8008708 <prvCheckTasksWaitingTermination+0x58>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d1e1      	bne.n	80086b8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80086f4:	bf00      	nop
 80086f6:	bf00      	nop
 80086f8:	3708      	adds	r7, #8
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}
 80086fe:	bf00      	nop
 8008700:	20000e48 	.word	0x20000e48
 8008704:	20000e74 	.word	0x20000e74
 8008708:	20000e5c 	.word	0x20000e5c

0800870c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800870c:	b580      	push	{r7, lr}
 800870e:	b084      	sub	sp, #16
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	3354      	adds	r3, #84	; 0x54
 8008718:	4618      	mov	r0, r3
 800871a:	f001 ffbb 	bl	800a694 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008724:	2b00      	cmp	r3, #0
 8008726:	d108      	bne.n	800873a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800872c:	4618      	mov	r0, r3
 800872e:	f000 ff87 	bl	8009640 <vPortFree>
				vPortFree( pxTCB );
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f000 ff84 	bl	8009640 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008738:	e018      	b.n	800876c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008740:	2b01      	cmp	r3, #1
 8008742:	d103      	bne.n	800874c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f000 ff7b 	bl	8009640 <vPortFree>
	}
 800874a:	e00f      	b.n	800876c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008752:	2b02      	cmp	r3, #2
 8008754:	d00a      	beq.n	800876c <prvDeleteTCB+0x60>
	__asm volatile
 8008756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800875a:	f383 8811 	msr	BASEPRI, r3
 800875e:	f3bf 8f6f 	isb	sy
 8008762:	f3bf 8f4f 	dsb	sy
 8008766:	60fb      	str	r3, [r7, #12]
}
 8008768:	bf00      	nop
 800876a:	e7fe      	b.n	800876a <prvDeleteTCB+0x5e>
	}
 800876c:	bf00      	nop
 800876e:	3710      	adds	r7, #16
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}

08008774 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008774:	b480      	push	{r7}
 8008776:	b083      	sub	sp, #12
 8008778:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800877a:	4b0c      	ldr	r3, [pc, #48]	; (80087ac <prvResetNextTaskUnblockTime+0x38>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d104      	bne.n	800878e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008784:	4b0a      	ldr	r3, [pc, #40]	; (80087b0 <prvResetNextTaskUnblockTime+0x3c>)
 8008786:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800878a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800878c:	e008      	b.n	80087a0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800878e:	4b07      	ldr	r3, [pc, #28]	; (80087ac <prvResetNextTaskUnblockTime+0x38>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	68db      	ldr	r3, [r3, #12]
 8008794:	68db      	ldr	r3, [r3, #12]
 8008796:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	4a04      	ldr	r2, [pc, #16]	; (80087b0 <prvResetNextTaskUnblockTime+0x3c>)
 800879e:	6013      	str	r3, [r2, #0]
}
 80087a0:	bf00      	nop
 80087a2:	370c      	adds	r7, #12
 80087a4:	46bd      	mov	sp, r7
 80087a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087aa:	4770      	bx	lr
 80087ac:	20000e2c 	.word	0x20000e2c
 80087b0:	20000e94 	.word	0x20000e94

080087b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80087b4:	b480      	push	{r7}
 80087b6:	b083      	sub	sp, #12
 80087b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80087ba:	4b0b      	ldr	r3, [pc, #44]	; (80087e8 <xTaskGetSchedulerState+0x34>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d102      	bne.n	80087c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80087c2:	2301      	movs	r3, #1
 80087c4:	607b      	str	r3, [r7, #4]
 80087c6:	e008      	b.n	80087da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80087c8:	4b08      	ldr	r3, [pc, #32]	; (80087ec <xTaskGetSchedulerState+0x38>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d102      	bne.n	80087d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80087d0:	2302      	movs	r3, #2
 80087d2:	607b      	str	r3, [r7, #4]
 80087d4:	e001      	b.n	80087da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80087d6:	2300      	movs	r3, #0
 80087d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80087da:	687b      	ldr	r3, [r7, #4]
	}
 80087dc:	4618      	mov	r0, r3
 80087de:	370c      	adds	r7, #12
 80087e0:	46bd      	mov	sp, r7
 80087e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e6:	4770      	bx	lr
 80087e8:	20000e80 	.word	0x20000e80
 80087ec:	20000e9c 	.word	0x20000e9c

080087f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b086      	sub	sp, #24
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80087fc:	2300      	movs	r3, #0
 80087fe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d056      	beq.n	80088b4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008806:	4b2e      	ldr	r3, [pc, #184]	; (80088c0 <xTaskPriorityDisinherit+0xd0>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	693a      	ldr	r2, [r7, #16]
 800880c:	429a      	cmp	r2, r3
 800880e:	d00a      	beq.n	8008826 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008814:	f383 8811 	msr	BASEPRI, r3
 8008818:	f3bf 8f6f 	isb	sy
 800881c:	f3bf 8f4f 	dsb	sy
 8008820:	60fb      	str	r3, [r7, #12]
}
 8008822:	bf00      	nop
 8008824:	e7fe      	b.n	8008824 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008826:	693b      	ldr	r3, [r7, #16]
 8008828:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800882a:	2b00      	cmp	r3, #0
 800882c:	d10a      	bne.n	8008844 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800882e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008832:	f383 8811 	msr	BASEPRI, r3
 8008836:	f3bf 8f6f 	isb	sy
 800883a:	f3bf 8f4f 	dsb	sy
 800883e:	60bb      	str	r3, [r7, #8]
}
 8008840:	bf00      	nop
 8008842:	e7fe      	b.n	8008842 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008848:	1e5a      	subs	r2, r3, #1
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008856:	429a      	cmp	r2, r3
 8008858:	d02c      	beq.n	80088b4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800885e:	2b00      	cmp	r3, #0
 8008860:	d128      	bne.n	80088b4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	3304      	adds	r3, #4
 8008866:	4618      	mov	r0, r3
 8008868:	f7fe fc46 	bl	80070f8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800886c:	693b      	ldr	r3, [r7, #16]
 800886e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008874:	693b      	ldr	r3, [r7, #16]
 8008876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008878:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800887c:	693b      	ldr	r3, [r7, #16]
 800887e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008884:	4b0f      	ldr	r3, [pc, #60]	; (80088c4 <xTaskPriorityDisinherit+0xd4>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	429a      	cmp	r2, r3
 800888a:	d903      	bls.n	8008894 <xTaskPriorityDisinherit+0xa4>
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008890:	4a0c      	ldr	r2, [pc, #48]	; (80088c4 <xTaskPriorityDisinherit+0xd4>)
 8008892:	6013      	str	r3, [r2, #0]
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008898:	4613      	mov	r3, r2
 800889a:	009b      	lsls	r3, r3, #2
 800889c:	4413      	add	r3, r2
 800889e:	009b      	lsls	r3, r3, #2
 80088a0:	4a09      	ldr	r2, [pc, #36]	; (80088c8 <xTaskPriorityDisinherit+0xd8>)
 80088a2:	441a      	add	r2, r3
 80088a4:	693b      	ldr	r3, [r7, #16]
 80088a6:	3304      	adds	r3, #4
 80088a8:	4619      	mov	r1, r3
 80088aa:	4610      	mov	r0, r2
 80088ac:	f7fe fbc7 	bl	800703e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80088b0:	2301      	movs	r3, #1
 80088b2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80088b4:	697b      	ldr	r3, [r7, #20]
	}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3718      	adds	r7, #24
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}
 80088be:	bf00      	nop
 80088c0:	200009a0 	.word	0x200009a0
 80088c4:	20000e7c 	.word	0x20000e7c
 80088c8:	200009a4 	.word	0x200009a4

080088cc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b084      	sub	sp, #16
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
 80088d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80088d6:	4b21      	ldr	r3, [pc, #132]	; (800895c <prvAddCurrentTaskToDelayedList+0x90>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80088dc:	4b20      	ldr	r3, [pc, #128]	; (8008960 <prvAddCurrentTaskToDelayedList+0x94>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	3304      	adds	r3, #4
 80088e2:	4618      	mov	r0, r3
 80088e4:	f7fe fc08 	bl	80070f8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80088ee:	d10a      	bne.n	8008906 <prvAddCurrentTaskToDelayedList+0x3a>
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d007      	beq.n	8008906 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80088f6:	4b1a      	ldr	r3, [pc, #104]	; (8008960 <prvAddCurrentTaskToDelayedList+0x94>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	3304      	adds	r3, #4
 80088fc:	4619      	mov	r1, r3
 80088fe:	4819      	ldr	r0, [pc, #100]	; (8008964 <prvAddCurrentTaskToDelayedList+0x98>)
 8008900:	f7fe fb9d 	bl	800703e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008904:	e026      	b.n	8008954 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008906:	68fa      	ldr	r2, [r7, #12]
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	4413      	add	r3, r2
 800890c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800890e:	4b14      	ldr	r3, [pc, #80]	; (8008960 <prvAddCurrentTaskToDelayedList+0x94>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	68ba      	ldr	r2, [r7, #8]
 8008914:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008916:	68ba      	ldr	r2, [r7, #8]
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	429a      	cmp	r2, r3
 800891c:	d209      	bcs.n	8008932 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800891e:	4b12      	ldr	r3, [pc, #72]	; (8008968 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008920:	681a      	ldr	r2, [r3, #0]
 8008922:	4b0f      	ldr	r3, [pc, #60]	; (8008960 <prvAddCurrentTaskToDelayedList+0x94>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	3304      	adds	r3, #4
 8008928:	4619      	mov	r1, r3
 800892a:	4610      	mov	r0, r2
 800892c:	f7fe fbab 	bl	8007086 <vListInsert>
}
 8008930:	e010      	b.n	8008954 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008932:	4b0e      	ldr	r3, [pc, #56]	; (800896c <prvAddCurrentTaskToDelayedList+0xa0>)
 8008934:	681a      	ldr	r2, [r3, #0]
 8008936:	4b0a      	ldr	r3, [pc, #40]	; (8008960 <prvAddCurrentTaskToDelayedList+0x94>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	3304      	adds	r3, #4
 800893c:	4619      	mov	r1, r3
 800893e:	4610      	mov	r0, r2
 8008940:	f7fe fba1 	bl	8007086 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008944:	4b0a      	ldr	r3, [pc, #40]	; (8008970 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	68ba      	ldr	r2, [r7, #8]
 800894a:	429a      	cmp	r2, r3
 800894c:	d202      	bcs.n	8008954 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800894e:	4a08      	ldr	r2, [pc, #32]	; (8008970 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	6013      	str	r3, [r2, #0]
}
 8008954:	bf00      	nop
 8008956:	3710      	adds	r7, #16
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}
 800895c:	20000e78 	.word	0x20000e78
 8008960:	200009a0 	.word	0x200009a0
 8008964:	20000e60 	.word	0x20000e60
 8008968:	20000e30 	.word	0x20000e30
 800896c:	20000e2c 	.word	0x20000e2c
 8008970:	20000e94 	.word	0x20000e94

08008974 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b08a      	sub	sp, #40	; 0x28
 8008978:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800897a:	2300      	movs	r3, #0
 800897c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800897e:	f000 fb07 	bl	8008f90 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008982:	4b1c      	ldr	r3, [pc, #112]	; (80089f4 <xTimerCreateTimerTask+0x80>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d021      	beq.n	80089ce <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800898a:	2300      	movs	r3, #0
 800898c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800898e:	2300      	movs	r3, #0
 8008990:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008992:	1d3a      	adds	r2, r7, #4
 8008994:	f107 0108 	add.w	r1, r7, #8
 8008998:	f107 030c 	add.w	r3, r7, #12
 800899c:	4618      	mov	r0, r3
 800899e:	f7fe fb07 	bl	8006fb0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80089a2:	6879      	ldr	r1, [r7, #4]
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	68fa      	ldr	r2, [r7, #12]
 80089a8:	9202      	str	r2, [sp, #8]
 80089aa:	9301      	str	r3, [sp, #4]
 80089ac:	2302      	movs	r3, #2
 80089ae:	9300      	str	r3, [sp, #0]
 80089b0:	2300      	movs	r3, #0
 80089b2:	460a      	mov	r2, r1
 80089b4:	4910      	ldr	r1, [pc, #64]	; (80089f8 <xTimerCreateTimerTask+0x84>)
 80089b6:	4811      	ldr	r0, [pc, #68]	; (80089fc <xTimerCreateTimerTask+0x88>)
 80089b8:	f7ff f8b4 	bl	8007b24 <xTaskCreateStatic>
 80089bc:	4603      	mov	r3, r0
 80089be:	4a10      	ldr	r2, [pc, #64]	; (8008a00 <xTimerCreateTimerTask+0x8c>)
 80089c0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80089c2:	4b0f      	ldr	r3, [pc, #60]	; (8008a00 <xTimerCreateTimerTask+0x8c>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d001      	beq.n	80089ce <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80089ca:	2301      	movs	r3, #1
 80089cc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d10a      	bne.n	80089ea <xTimerCreateTimerTask+0x76>
	__asm volatile
 80089d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089d8:	f383 8811 	msr	BASEPRI, r3
 80089dc:	f3bf 8f6f 	isb	sy
 80089e0:	f3bf 8f4f 	dsb	sy
 80089e4:	613b      	str	r3, [r7, #16]
}
 80089e6:	bf00      	nop
 80089e8:	e7fe      	b.n	80089e8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80089ea:	697b      	ldr	r3, [r7, #20]
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	3718      	adds	r7, #24
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}
 80089f4:	20000ed0 	.word	0x20000ed0
 80089f8:	0800a880 	.word	0x0800a880
 80089fc:	08008b39 	.word	0x08008b39
 8008a00:	20000ed4 	.word	0x20000ed4

08008a04 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b08a      	sub	sp, #40	; 0x28
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	60f8      	str	r0, [r7, #12]
 8008a0c:	60b9      	str	r1, [r7, #8]
 8008a0e:	607a      	str	r2, [r7, #4]
 8008a10:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008a12:	2300      	movs	r3, #0
 8008a14:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d10a      	bne.n	8008a32 <xTimerGenericCommand+0x2e>
	__asm volatile
 8008a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a20:	f383 8811 	msr	BASEPRI, r3
 8008a24:	f3bf 8f6f 	isb	sy
 8008a28:	f3bf 8f4f 	dsb	sy
 8008a2c:	623b      	str	r3, [r7, #32]
}
 8008a2e:	bf00      	nop
 8008a30:	e7fe      	b.n	8008a30 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008a32:	4b1a      	ldr	r3, [pc, #104]	; (8008a9c <xTimerGenericCommand+0x98>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d02a      	beq.n	8008a90 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	2b05      	cmp	r3, #5
 8008a4a:	dc18      	bgt.n	8008a7e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008a4c:	f7ff feb2 	bl	80087b4 <xTaskGetSchedulerState>
 8008a50:	4603      	mov	r3, r0
 8008a52:	2b02      	cmp	r3, #2
 8008a54:	d109      	bne.n	8008a6a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008a56:	4b11      	ldr	r3, [pc, #68]	; (8008a9c <xTimerGenericCommand+0x98>)
 8008a58:	6818      	ldr	r0, [r3, #0]
 8008a5a:	f107 0110 	add.w	r1, r7, #16
 8008a5e:	2300      	movs	r3, #0
 8008a60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a62:	f7fe fc77 	bl	8007354 <xQueueGenericSend>
 8008a66:	6278      	str	r0, [r7, #36]	; 0x24
 8008a68:	e012      	b.n	8008a90 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008a6a:	4b0c      	ldr	r3, [pc, #48]	; (8008a9c <xTimerGenericCommand+0x98>)
 8008a6c:	6818      	ldr	r0, [r3, #0]
 8008a6e:	f107 0110 	add.w	r1, r7, #16
 8008a72:	2300      	movs	r3, #0
 8008a74:	2200      	movs	r2, #0
 8008a76:	f7fe fc6d 	bl	8007354 <xQueueGenericSend>
 8008a7a:	6278      	str	r0, [r7, #36]	; 0x24
 8008a7c:	e008      	b.n	8008a90 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008a7e:	4b07      	ldr	r3, [pc, #28]	; (8008a9c <xTimerGenericCommand+0x98>)
 8008a80:	6818      	ldr	r0, [r3, #0]
 8008a82:	f107 0110 	add.w	r1, r7, #16
 8008a86:	2300      	movs	r3, #0
 8008a88:	683a      	ldr	r2, [r7, #0]
 8008a8a:	f7fe fd61 	bl	8007550 <xQueueGenericSendFromISR>
 8008a8e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3728      	adds	r7, #40	; 0x28
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}
 8008a9a:	bf00      	nop
 8008a9c:	20000ed0 	.word	0x20000ed0

08008aa0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b088      	sub	sp, #32
 8008aa4:	af02      	add	r7, sp, #8
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008aaa:	4b22      	ldr	r3, [pc, #136]	; (8008b34 <prvProcessExpiredTimer+0x94>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	68db      	ldr	r3, [r3, #12]
 8008ab0:	68db      	ldr	r3, [r3, #12]
 8008ab2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	3304      	adds	r3, #4
 8008ab8:	4618      	mov	r0, r3
 8008aba:	f7fe fb1d 	bl	80070f8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ac4:	f003 0304 	and.w	r3, r3, #4
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d022      	beq.n	8008b12 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	699a      	ldr	r2, [r3, #24]
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	18d1      	adds	r1, r2, r3
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	683a      	ldr	r2, [r7, #0]
 8008ad8:	6978      	ldr	r0, [r7, #20]
 8008ada:	f000 f8d1 	bl	8008c80 <prvInsertTimerInActiveList>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d01f      	beq.n	8008b24 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	9300      	str	r3, [sp, #0]
 8008ae8:	2300      	movs	r3, #0
 8008aea:	687a      	ldr	r2, [r7, #4]
 8008aec:	2100      	movs	r1, #0
 8008aee:	6978      	ldr	r0, [r7, #20]
 8008af0:	f7ff ff88 	bl	8008a04 <xTimerGenericCommand>
 8008af4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d113      	bne.n	8008b24 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b00:	f383 8811 	msr	BASEPRI, r3
 8008b04:	f3bf 8f6f 	isb	sy
 8008b08:	f3bf 8f4f 	dsb	sy
 8008b0c:	60fb      	str	r3, [r7, #12]
}
 8008b0e:	bf00      	nop
 8008b10:	e7fe      	b.n	8008b10 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b18:	f023 0301 	bic.w	r3, r3, #1
 8008b1c:	b2da      	uxtb	r2, r3
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	6a1b      	ldr	r3, [r3, #32]
 8008b28:	6978      	ldr	r0, [r7, #20]
 8008b2a:	4798      	blx	r3
}
 8008b2c:	bf00      	nop
 8008b2e:	3718      	adds	r7, #24
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}
 8008b34:	20000ec8 	.word	0x20000ec8

08008b38 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b084      	sub	sp, #16
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008b40:	f107 0308 	add.w	r3, r7, #8
 8008b44:	4618      	mov	r0, r3
 8008b46:	f000 f857 	bl	8008bf8 <prvGetNextExpireTime>
 8008b4a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	4619      	mov	r1, r3
 8008b50:	68f8      	ldr	r0, [r7, #12]
 8008b52:	f000 f803 	bl	8008b5c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008b56:	f000 f8d5 	bl	8008d04 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008b5a:	e7f1      	b.n	8008b40 <prvTimerTask+0x8>

08008b5c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b084      	sub	sp, #16
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008b66:	f7ff fa39 	bl	8007fdc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008b6a:	f107 0308 	add.w	r3, r7, #8
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f000 f866 	bl	8008c40 <prvSampleTimeNow>
 8008b74:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d130      	bne.n	8008bde <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d10a      	bne.n	8008b98 <prvProcessTimerOrBlockTask+0x3c>
 8008b82:	687a      	ldr	r2, [r7, #4]
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	429a      	cmp	r2, r3
 8008b88:	d806      	bhi.n	8008b98 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008b8a:	f7ff fa35 	bl	8007ff8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008b8e:	68f9      	ldr	r1, [r7, #12]
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f7ff ff85 	bl	8008aa0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008b96:	e024      	b.n	8008be2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d008      	beq.n	8008bb0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008b9e:	4b13      	ldr	r3, [pc, #76]	; (8008bec <prvProcessTimerOrBlockTask+0x90>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d101      	bne.n	8008bac <prvProcessTimerOrBlockTask+0x50>
 8008ba8:	2301      	movs	r3, #1
 8008baa:	e000      	b.n	8008bae <prvProcessTimerOrBlockTask+0x52>
 8008bac:	2300      	movs	r3, #0
 8008bae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008bb0:	4b0f      	ldr	r3, [pc, #60]	; (8008bf0 <prvProcessTimerOrBlockTask+0x94>)
 8008bb2:	6818      	ldr	r0, [r3, #0]
 8008bb4:	687a      	ldr	r2, [r7, #4]
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	1ad3      	subs	r3, r2, r3
 8008bba:	683a      	ldr	r2, [r7, #0]
 8008bbc:	4619      	mov	r1, r3
 8008bbe:	f7fe ff7d 	bl	8007abc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008bc2:	f7ff fa19 	bl	8007ff8 <xTaskResumeAll>
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d10a      	bne.n	8008be2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008bcc:	4b09      	ldr	r3, [pc, #36]	; (8008bf4 <prvProcessTimerOrBlockTask+0x98>)
 8008bce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bd2:	601a      	str	r2, [r3, #0]
 8008bd4:	f3bf 8f4f 	dsb	sy
 8008bd8:	f3bf 8f6f 	isb	sy
}
 8008bdc:	e001      	b.n	8008be2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008bde:	f7ff fa0b 	bl	8007ff8 <xTaskResumeAll>
}
 8008be2:	bf00      	nop
 8008be4:	3710      	adds	r7, #16
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}
 8008bea:	bf00      	nop
 8008bec:	20000ecc 	.word	0x20000ecc
 8008bf0:	20000ed0 	.word	0x20000ed0
 8008bf4:	e000ed04 	.word	0xe000ed04

08008bf8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b085      	sub	sp, #20
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008c00:	4b0e      	ldr	r3, [pc, #56]	; (8008c3c <prvGetNextExpireTime+0x44>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d101      	bne.n	8008c0e <prvGetNextExpireTime+0x16>
 8008c0a:	2201      	movs	r2, #1
 8008c0c:	e000      	b.n	8008c10 <prvGetNextExpireTime+0x18>
 8008c0e:	2200      	movs	r2, #0
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d105      	bne.n	8008c28 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008c1c:	4b07      	ldr	r3, [pc, #28]	; (8008c3c <prvGetNextExpireTime+0x44>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	68db      	ldr	r3, [r3, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	60fb      	str	r3, [r7, #12]
 8008c26:	e001      	b.n	8008c2c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008c28:	2300      	movs	r3, #0
 8008c2a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	3714      	adds	r7, #20
 8008c32:	46bd      	mov	sp, r7
 8008c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c38:	4770      	bx	lr
 8008c3a:	bf00      	nop
 8008c3c:	20000ec8 	.word	0x20000ec8

08008c40 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b084      	sub	sp, #16
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008c48:	f7ff fa74 	bl	8008134 <xTaskGetTickCount>
 8008c4c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008c4e:	4b0b      	ldr	r3, [pc, #44]	; (8008c7c <prvSampleTimeNow+0x3c>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	68fa      	ldr	r2, [r7, #12]
 8008c54:	429a      	cmp	r2, r3
 8008c56:	d205      	bcs.n	8008c64 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008c58:	f000 f936 	bl	8008ec8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2201      	movs	r2, #1
 8008c60:	601a      	str	r2, [r3, #0]
 8008c62:	e002      	b.n	8008c6a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2200      	movs	r2, #0
 8008c68:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008c6a:	4a04      	ldr	r2, [pc, #16]	; (8008c7c <prvSampleTimeNow+0x3c>)
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008c70:	68fb      	ldr	r3, [r7, #12]
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3710      	adds	r7, #16
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}
 8008c7a:	bf00      	nop
 8008c7c:	20000ed8 	.word	0x20000ed8

08008c80 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b086      	sub	sp, #24
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	60f8      	str	r0, [r7, #12]
 8008c88:	60b9      	str	r1, [r7, #8]
 8008c8a:	607a      	str	r2, [r7, #4]
 8008c8c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	68ba      	ldr	r2, [r7, #8]
 8008c96:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	68fa      	ldr	r2, [r7, #12]
 8008c9c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008c9e:	68ba      	ldr	r2, [r7, #8]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	429a      	cmp	r2, r3
 8008ca4:	d812      	bhi.n	8008ccc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ca6:	687a      	ldr	r2, [r7, #4]
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	1ad2      	subs	r2, r2, r3
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	699b      	ldr	r3, [r3, #24]
 8008cb0:	429a      	cmp	r2, r3
 8008cb2:	d302      	bcc.n	8008cba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	617b      	str	r3, [r7, #20]
 8008cb8:	e01b      	b.n	8008cf2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008cba:	4b10      	ldr	r3, [pc, #64]	; (8008cfc <prvInsertTimerInActiveList+0x7c>)
 8008cbc:	681a      	ldr	r2, [r3, #0]
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	3304      	adds	r3, #4
 8008cc2:	4619      	mov	r1, r3
 8008cc4:	4610      	mov	r0, r2
 8008cc6:	f7fe f9de 	bl	8007086 <vListInsert>
 8008cca:	e012      	b.n	8008cf2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008ccc:	687a      	ldr	r2, [r7, #4]
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	429a      	cmp	r2, r3
 8008cd2:	d206      	bcs.n	8008ce2 <prvInsertTimerInActiveList+0x62>
 8008cd4:	68ba      	ldr	r2, [r7, #8]
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	d302      	bcc.n	8008ce2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008cdc:	2301      	movs	r3, #1
 8008cde:	617b      	str	r3, [r7, #20]
 8008ce0:	e007      	b.n	8008cf2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008ce2:	4b07      	ldr	r3, [pc, #28]	; (8008d00 <prvInsertTimerInActiveList+0x80>)
 8008ce4:	681a      	ldr	r2, [r3, #0]
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	3304      	adds	r3, #4
 8008cea:	4619      	mov	r1, r3
 8008cec:	4610      	mov	r0, r2
 8008cee:	f7fe f9ca 	bl	8007086 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008cf2:	697b      	ldr	r3, [r7, #20]
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3718      	adds	r7, #24
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}
 8008cfc:	20000ecc 	.word	0x20000ecc
 8008d00:	20000ec8 	.word	0x20000ec8

08008d04 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b08e      	sub	sp, #56	; 0x38
 8008d08:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008d0a:	e0ca      	b.n	8008ea2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	da18      	bge.n	8008d44 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008d12:	1d3b      	adds	r3, r7, #4
 8008d14:	3304      	adds	r3, #4
 8008d16:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d10a      	bne.n	8008d34 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d22:	f383 8811 	msr	BASEPRI, r3
 8008d26:	f3bf 8f6f 	isb	sy
 8008d2a:	f3bf 8f4f 	dsb	sy
 8008d2e:	61fb      	str	r3, [r7, #28]
}
 8008d30:	bf00      	nop
 8008d32:	e7fe      	b.n	8008d32 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d3a:	6850      	ldr	r0, [r2, #4]
 8008d3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d3e:	6892      	ldr	r2, [r2, #8]
 8008d40:	4611      	mov	r1, r2
 8008d42:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	f2c0 80aa 	blt.w	8008ea0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d52:	695b      	ldr	r3, [r3, #20]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d004      	beq.n	8008d62 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d5a:	3304      	adds	r3, #4
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f7fe f9cb 	bl	80070f8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008d62:	463b      	mov	r3, r7
 8008d64:	4618      	mov	r0, r3
 8008d66:	f7ff ff6b 	bl	8008c40 <prvSampleTimeNow>
 8008d6a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2b09      	cmp	r3, #9
 8008d70:	f200 8097 	bhi.w	8008ea2 <prvProcessReceivedCommands+0x19e>
 8008d74:	a201      	add	r2, pc, #4	; (adr r2, 8008d7c <prvProcessReceivedCommands+0x78>)
 8008d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d7a:	bf00      	nop
 8008d7c:	08008da5 	.word	0x08008da5
 8008d80:	08008da5 	.word	0x08008da5
 8008d84:	08008da5 	.word	0x08008da5
 8008d88:	08008e19 	.word	0x08008e19
 8008d8c:	08008e2d 	.word	0x08008e2d
 8008d90:	08008e77 	.word	0x08008e77
 8008d94:	08008da5 	.word	0x08008da5
 8008d98:	08008da5 	.word	0x08008da5
 8008d9c:	08008e19 	.word	0x08008e19
 8008da0:	08008e2d 	.word	0x08008e2d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008da6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008daa:	f043 0301 	orr.w	r3, r3, #1
 8008dae:	b2da      	uxtb	r2, r3
 8008db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008db2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008db6:	68ba      	ldr	r2, [r7, #8]
 8008db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dba:	699b      	ldr	r3, [r3, #24]
 8008dbc:	18d1      	adds	r1, r2, r3
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008dc4:	f7ff ff5c 	bl	8008c80 <prvInsertTimerInActiveList>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d069      	beq.n	8008ea2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dd0:	6a1b      	ldr	r3, [r3, #32]
 8008dd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008dd4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ddc:	f003 0304 	and.w	r3, r3, #4
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d05e      	beq.n	8008ea2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008de4:	68ba      	ldr	r2, [r7, #8]
 8008de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008de8:	699b      	ldr	r3, [r3, #24]
 8008dea:	441a      	add	r2, r3
 8008dec:	2300      	movs	r3, #0
 8008dee:	9300      	str	r3, [sp, #0]
 8008df0:	2300      	movs	r3, #0
 8008df2:	2100      	movs	r1, #0
 8008df4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008df6:	f7ff fe05 	bl	8008a04 <xTimerGenericCommand>
 8008dfa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008dfc:	6a3b      	ldr	r3, [r7, #32]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d14f      	bne.n	8008ea2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e06:	f383 8811 	msr	BASEPRI, r3
 8008e0a:	f3bf 8f6f 	isb	sy
 8008e0e:	f3bf 8f4f 	dsb	sy
 8008e12:	61bb      	str	r3, [r7, #24]
}
 8008e14:	bf00      	nop
 8008e16:	e7fe      	b.n	8008e16 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008e1e:	f023 0301 	bic.w	r3, r3, #1
 8008e22:	b2da      	uxtb	r2, r3
 8008e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008e2a:	e03a      	b.n	8008ea2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008e32:	f043 0301 	orr.w	r3, r3, #1
 8008e36:	b2da      	uxtb	r2, r3
 8008e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008e3e:	68ba      	ldr	r2, [r7, #8]
 8008e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e42:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e46:	699b      	ldr	r3, [r3, #24]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d10a      	bne.n	8008e62 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e50:	f383 8811 	msr	BASEPRI, r3
 8008e54:	f3bf 8f6f 	isb	sy
 8008e58:	f3bf 8f4f 	dsb	sy
 8008e5c:	617b      	str	r3, [r7, #20]
}
 8008e5e:	bf00      	nop
 8008e60:	e7fe      	b.n	8008e60 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e64:	699a      	ldr	r2, [r3, #24]
 8008e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e68:	18d1      	adds	r1, r2, r3
 8008e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e70:	f7ff ff06 	bl	8008c80 <prvInsertTimerInActiveList>
					break;
 8008e74:	e015      	b.n	8008ea2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008e7c:	f003 0302 	and.w	r3, r3, #2
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d103      	bne.n	8008e8c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008e84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e86:	f000 fbdb 	bl	8009640 <vPortFree>
 8008e8a:	e00a      	b.n	8008ea2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008e92:	f023 0301 	bic.w	r3, r3, #1
 8008e96:	b2da      	uxtb	r2, r3
 8008e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008e9e:	e000      	b.n	8008ea2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008ea0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008ea2:	4b08      	ldr	r3, [pc, #32]	; (8008ec4 <prvProcessReceivedCommands+0x1c0>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	1d39      	adds	r1, r7, #4
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f7fe fbec 	bl	8007688 <xQueueReceive>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	f47f af2a 	bne.w	8008d0c <prvProcessReceivedCommands+0x8>
	}
}
 8008eb8:	bf00      	nop
 8008eba:	bf00      	nop
 8008ebc:	3730      	adds	r7, #48	; 0x30
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}
 8008ec2:	bf00      	nop
 8008ec4:	20000ed0 	.word	0x20000ed0

08008ec8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b088      	sub	sp, #32
 8008ecc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008ece:	e048      	b.n	8008f62 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008ed0:	4b2d      	ldr	r3, [pc, #180]	; (8008f88 <prvSwitchTimerLists+0xc0>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	68db      	ldr	r3, [r3, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008eda:	4b2b      	ldr	r3, [pc, #172]	; (8008f88 <prvSwitchTimerLists+0xc0>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	68db      	ldr	r3, [r3, #12]
 8008ee0:	68db      	ldr	r3, [r3, #12]
 8008ee2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	3304      	adds	r3, #4
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f7fe f905 	bl	80070f8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	6a1b      	ldr	r3, [r3, #32]
 8008ef2:	68f8      	ldr	r0, [r7, #12]
 8008ef4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008efc:	f003 0304 	and.w	r3, r3, #4
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d02e      	beq.n	8008f62 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	699b      	ldr	r3, [r3, #24]
 8008f08:	693a      	ldr	r2, [r7, #16]
 8008f0a:	4413      	add	r3, r2
 8008f0c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008f0e:	68ba      	ldr	r2, [r7, #8]
 8008f10:	693b      	ldr	r3, [r7, #16]
 8008f12:	429a      	cmp	r2, r3
 8008f14:	d90e      	bls.n	8008f34 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	68ba      	ldr	r2, [r7, #8]
 8008f1a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	68fa      	ldr	r2, [r7, #12]
 8008f20:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008f22:	4b19      	ldr	r3, [pc, #100]	; (8008f88 <prvSwitchTimerLists+0xc0>)
 8008f24:	681a      	ldr	r2, [r3, #0]
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	3304      	adds	r3, #4
 8008f2a:	4619      	mov	r1, r3
 8008f2c:	4610      	mov	r0, r2
 8008f2e:	f7fe f8aa 	bl	8007086 <vListInsert>
 8008f32:	e016      	b.n	8008f62 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008f34:	2300      	movs	r3, #0
 8008f36:	9300      	str	r3, [sp, #0]
 8008f38:	2300      	movs	r3, #0
 8008f3a:	693a      	ldr	r2, [r7, #16]
 8008f3c:	2100      	movs	r1, #0
 8008f3e:	68f8      	ldr	r0, [r7, #12]
 8008f40:	f7ff fd60 	bl	8008a04 <xTimerGenericCommand>
 8008f44:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d10a      	bne.n	8008f62 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f50:	f383 8811 	msr	BASEPRI, r3
 8008f54:	f3bf 8f6f 	isb	sy
 8008f58:	f3bf 8f4f 	dsb	sy
 8008f5c:	603b      	str	r3, [r7, #0]
}
 8008f5e:	bf00      	nop
 8008f60:	e7fe      	b.n	8008f60 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008f62:	4b09      	ldr	r3, [pc, #36]	; (8008f88 <prvSwitchTimerLists+0xc0>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d1b1      	bne.n	8008ed0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008f6c:	4b06      	ldr	r3, [pc, #24]	; (8008f88 <prvSwitchTimerLists+0xc0>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008f72:	4b06      	ldr	r3, [pc, #24]	; (8008f8c <prvSwitchTimerLists+0xc4>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	4a04      	ldr	r2, [pc, #16]	; (8008f88 <prvSwitchTimerLists+0xc0>)
 8008f78:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008f7a:	4a04      	ldr	r2, [pc, #16]	; (8008f8c <prvSwitchTimerLists+0xc4>)
 8008f7c:	697b      	ldr	r3, [r7, #20]
 8008f7e:	6013      	str	r3, [r2, #0]
}
 8008f80:	bf00      	nop
 8008f82:	3718      	adds	r7, #24
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd80      	pop	{r7, pc}
 8008f88:	20000ec8 	.word	0x20000ec8
 8008f8c:	20000ecc 	.word	0x20000ecc

08008f90 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b082      	sub	sp, #8
 8008f94:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008f96:	f000 f965 	bl	8009264 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008f9a:	4b15      	ldr	r3, [pc, #84]	; (8008ff0 <prvCheckForValidListAndQueue+0x60>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d120      	bne.n	8008fe4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008fa2:	4814      	ldr	r0, [pc, #80]	; (8008ff4 <prvCheckForValidListAndQueue+0x64>)
 8008fa4:	f7fe f81e 	bl	8006fe4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008fa8:	4813      	ldr	r0, [pc, #76]	; (8008ff8 <prvCheckForValidListAndQueue+0x68>)
 8008faa:	f7fe f81b 	bl	8006fe4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008fae:	4b13      	ldr	r3, [pc, #76]	; (8008ffc <prvCheckForValidListAndQueue+0x6c>)
 8008fb0:	4a10      	ldr	r2, [pc, #64]	; (8008ff4 <prvCheckForValidListAndQueue+0x64>)
 8008fb2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008fb4:	4b12      	ldr	r3, [pc, #72]	; (8009000 <prvCheckForValidListAndQueue+0x70>)
 8008fb6:	4a10      	ldr	r2, [pc, #64]	; (8008ff8 <prvCheckForValidListAndQueue+0x68>)
 8008fb8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008fba:	2300      	movs	r3, #0
 8008fbc:	9300      	str	r3, [sp, #0]
 8008fbe:	4b11      	ldr	r3, [pc, #68]	; (8009004 <prvCheckForValidListAndQueue+0x74>)
 8008fc0:	4a11      	ldr	r2, [pc, #68]	; (8009008 <prvCheckForValidListAndQueue+0x78>)
 8008fc2:	2110      	movs	r1, #16
 8008fc4:	200a      	movs	r0, #10
 8008fc6:	f7fe f929 	bl	800721c <xQueueGenericCreateStatic>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	4a08      	ldr	r2, [pc, #32]	; (8008ff0 <prvCheckForValidListAndQueue+0x60>)
 8008fce:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008fd0:	4b07      	ldr	r3, [pc, #28]	; (8008ff0 <prvCheckForValidListAndQueue+0x60>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d005      	beq.n	8008fe4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008fd8:	4b05      	ldr	r3, [pc, #20]	; (8008ff0 <prvCheckForValidListAndQueue+0x60>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	490b      	ldr	r1, [pc, #44]	; (800900c <prvCheckForValidListAndQueue+0x7c>)
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f7fe fd42 	bl	8007a68 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008fe4:	f000 f96e 	bl	80092c4 <vPortExitCritical>
}
 8008fe8:	bf00      	nop
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}
 8008fee:	bf00      	nop
 8008ff0:	20000ed0 	.word	0x20000ed0
 8008ff4:	20000ea0 	.word	0x20000ea0
 8008ff8:	20000eb4 	.word	0x20000eb4
 8008ffc:	20000ec8 	.word	0x20000ec8
 8009000:	20000ecc 	.word	0x20000ecc
 8009004:	20000f7c 	.word	0x20000f7c
 8009008:	20000edc 	.word	0x20000edc
 800900c:	0800a888 	.word	0x0800a888

08009010 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009010:	b480      	push	{r7}
 8009012:	b085      	sub	sp, #20
 8009014:	af00      	add	r7, sp, #0
 8009016:	60f8      	str	r0, [r7, #12]
 8009018:	60b9      	str	r1, [r7, #8]
 800901a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	3b04      	subs	r3, #4
 8009020:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009028:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	3b04      	subs	r3, #4
 800902e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	f023 0201 	bic.w	r2, r3, #1
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	3b04      	subs	r3, #4
 800903e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009040:	4a0c      	ldr	r2, [pc, #48]	; (8009074 <pxPortInitialiseStack+0x64>)
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	3b14      	subs	r3, #20
 800904a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800904c:	687a      	ldr	r2, [r7, #4]
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	3b04      	subs	r3, #4
 8009056:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	f06f 0202 	mvn.w	r2, #2
 800905e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	3b20      	subs	r3, #32
 8009064:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009066:	68fb      	ldr	r3, [r7, #12]
}
 8009068:	4618      	mov	r0, r3
 800906a:	3714      	adds	r7, #20
 800906c:	46bd      	mov	sp, r7
 800906e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009072:	4770      	bx	lr
 8009074:	08009079 	.word	0x08009079

08009078 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009078:	b480      	push	{r7}
 800907a:	b085      	sub	sp, #20
 800907c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800907e:	2300      	movs	r3, #0
 8009080:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009082:	4b12      	ldr	r3, [pc, #72]	; (80090cc <prvTaskExitError+0x54>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800908a:	d00a      	beq.n	80090a2 <prvTaskExitError+0x2a>
	__asm volatile
 800908c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009090:	f383 8811 	msr	BASEPRI, r3
 8009094:	f3bf 8f6f 	isb	sy
 8009098:	f3bf 8f4f 	dsb	sy
 800909c:	60fb      	str	r3, [r7, #12]
}
 800909e:	bf00      	nop
 80090a0:	e7fe      	b.n	80090a0 <prvTaskExitError+0x28>
	__asm volatile
 80090a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a6:	f383 8811 	msr	BASEPRI, r3
 80090aa:	f3bf 8f6f 	isb	sy
 80090ae:	f3bf 8f4f 	dsb	sy
 80090b2:	60bb      	str	r3, [r7, #8]
}
 80090b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80090b6:	bf00      	nop
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d0fc      	beq.n	80090b8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80090be:	bf00      	nop
 80090c0:	bf00      	nop
 80090c2:	3714      	adds	r7, #20
 80090c4:	46bd      	mov	sp, r7
 80090c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ca:	4770      	bx	lr
 80090cc:	20000098 	.word	0x20000098

080090d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80090d0:	4b07      	ldr	r3, [pc, #28]	; (80090f0 <pxCurrentTCBConst2>)
 80090d2:	6819      	ldr	r1, [r3, #0]
 80090d4:	6808      	ldr	r0, [r1, #0]
 80090d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090da:	f380 8809 	msr	PSP, r0
 80090de:	f3bf 8f6f 	isb	sy
 80090e2:	f04f 0000 	mov.w	r0, #0
 80090e6:	f380 8811 	msr	BASEPRI, r0
 80090ea:	4770      	bx	lr
 80090ec:	f3af 8000 	nop.w

080090f0 <pxCurrentTCBConst2>:
 80090f0:	200009a0 	.word	0x200009a0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80090f4:	bf00      	nop
 80090f6:	bf00      	nop

080090f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80090f8:	4808      	ldr	r0, [pc, #32]	; (800911c <prvPortStartFirstTask+0x24>)
 80090fa:	6800      	ldr	r0, [r0, #0]
 80090fc:	6800      	ldr	r0, [r0, #0]
 80090fe:	f380 8808 	msr	MSP, r0
 8009102:	f04f 0000 	mov.w	r0, #0
 8009106:	f380 8814 	msr	CONTROL, r0
 800910a:	b662      	cpsie	i
 800910c:	b661      	cpsie	f
 800910e:	f3bf 8f4f 	dsb	sy
 8009112:	f3bf 8f6f 	isb	sy
 8009116:	df00      	svc	0
 8009118:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800911a:	bf00      	nop
 800911c:	e000ed08 	.word	0xe000ed08

08009120 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b086      	sub	sp, #24
 8009124:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009126:	4b46      	ldr	r3, [pc, #280]	; (8009240 <xPortStartScheduler+0x120>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	4a46      	ldr	r2, [pc, #280]	; (8009244 <xPortStartScheduler+0x124>)
 800912c:	4293      	cmp	r3, r2
 800912e:	d10a      	bne.n	8009146 <xPortStartScheduler+0x26>
	__asm volatile
 8009130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009134:	f383 8811 	msr	BASEPRI, r3
 8009138:	f3bf 8f6f 	isb	sy
 800913c:	f3bf 8f4f 	dsb	sy
 8009140:	613b      	str	r3, [r7, #16]
}
 8009142:	bf00      	nop
 8009144:	e7fe      	b.n	8009144 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009146:	4b3e      	ldr	r3, [pc, #248]	; (8009240 <xPortStartScheduler+0x120>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	4a3f      	ldr	r2, [pc, #252]	; (8009248 <xPortStartScheduler+0x128>)
 800914c:	4293      	cmp	r3, r2
 800914e:	d10a      	bne.n	8009166 <xPortStartScheduler+0x46>
	__asm volatile
 8009150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009154:	f383 8811 	msr	BASEPRI, r3
 8009158:	f3bf 8f6f 	isb	sy
 800915c:	f3bf 8f4f 	dsb	sy
 8009160:	60fb      	str	r3, [r7, #12]
}
 8009162:	bf00      	nop
 8009164:	e7fe      	b.n	8009164 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009166:	4b39      	ldr	r3, [pc, #228]	; (800924c <xPortStartScheduler+0x12c>)
 8009168:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800916a:	697b      	ldr	r3, [r7, #20]
 800916c:	781b      	ldrb	r3, [r3, #0]
 800916e:	b2db      	uxtb	r3, r3
 8009170:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	22ff      	movs	r2, #255	; 0xff
 8009176:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	781b      	ldrb	r3, [r3, #0]
 800917c:	b2db      	uxtb	r3, r3
 800917e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009180:	78fb      	ldrb	r3, [r7, #3]
 8009182:	b2db      	uxtb	r3, r3
 8009184:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009188:	b2da      	uxtb	r2, r3
 800918a:	4b31      	ldr	r3, [pc, #196]	; (8009250 <xPortStartScheduler+0x130>)
 800918c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800918e:	4b31      	ldr	r3, [pc, #196]	; (8009254 <xPortStartScheduler+0x134>)
 8009190:	2207      	movs	r2, #7
 8009192:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009194:	e009      	b.n	80091aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009196:	4b2f      	ldr	r3, [pc, #188]	; (8009254 <xPortStartScheduler+0x134>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	3b01      	subs	r3, #1
 800919c:	4a2d      	ldr	r2, [pc, #180]	; (8009254 <xPortStartScheduler+0x134>)
 800919e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80091a0:	78fb      	ldrb	r3, [r7, #3]
 80091a2:	b2db      	uxtb	r3, r3
 80091a4:	005b      	lsls	r3, r3, #1
 80091a6:	b2db      	uxtb	r3, r3
 80091a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80091aa:	78fb      	ldrb	r3, [r7, #3]
 80091ac:	b2db      	uxtb	r3, r3
 80091ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091b2:	2b80      	cmp	r3, #128	; 0x80
 80091b4:	d0ef      	beq.n	8009196 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80091b6:	4b27      	ldr	r3, [pc, #156]	; (8009254 <xPortStartScheduler+0x134>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f1c3 0307 	rsb	r3, r3, #7
 80091be:	2b04      	cmp	r3, #4
 80091c0:	d00a      	beq.n	80091d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80091c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c6:	f383 8811 	msr	BASEPRI, r3
 80091ca:	f3bf 8f6f 	isb	sy
 80091ce:	f3bf 8f4f 	dsb	sy
 80091d2:	60bb      	str	r3, [r7, #8]
}
 80091d4:	bf00      	nop
 80091d6:	e7fe      	b.n	80091d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80091d8:	4b1e      	ldr	r3, [pc, #120]	; (8009254 <xPortStartScheduler+0x134>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	021b      	lsls	r3, r3, #8
 80091de:	4a1d      	ldr	r2, [pc, #116]	; (8009254 <xPortStartScheduler+0x134>)
 80091e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80091e2:	4b1c      	ldr	r3, [pc, #112]	; (8009254 <xPortStartScheduler+0x134>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80091ea:	4a1a      	ldr	r2, [pc, #104]	; (8009254 <xPortStartScheduler+0x134>)
 80091ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	b2da      	uxtb	r2, r3
 80091f2:	697b      	ldr	r3, [r7, #20]
 80091f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80091f6:	4b18      	ldr	r3, [pc, #96]	; (8009258 <xPortStartScheduler+0x138>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	4a17      	ldr	r2, [pc, #92]	; (8009258 <xPortStartScheduler+0x138>)
 80091fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009200:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009202:	4b15      	ldr	r3, [pc, #84]	; (8009258 <xPortStartScheduler+0x138>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	4a14      	ldr	r2, [pc, #80]	; (8009258 <xPortStartScheduler+0x138>)
 8009208:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800920c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800920e:	f000 f8dd 	bl	80093cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009212:	4b12      	ldr	r3, [pc, #72]	; (800925c <xPortStartScheduler+0x13c>)
 8009214:	2200      	movs	r2, #0
 8009216:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009218:	f000 f8fc 	bl	8009414 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800921c:	4b10      	ldr	r3, [pc, #64]	; (8009260 <xPortStartScheduler+0x140>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	4a0f      	ldr	r2, [pc, #60]	; (8009260 <xPortStartScheduler+0x140>)
 8009222:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009226:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009228:	f7ff ff66 	bl	80090f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800922c:	f7ff f84c 	bl	80082c8 <vTaskSwitchContext>
	prvTaskExitError();
 8009230:	f7ff ff22 	bl	8009078 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009234:	2300      	movs	r3, #0
}
 8009236:	4618      	mov	r0, r3
 8009238:	3718      	adds	r7, #24
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}
 800923e:	bf00      	nop
 8009240:	e000ed00 	.word	0xe000ed00
 8009244:	410fc271 	.word	0x410fc271
 8009248:	410fc270 	.word	0x410fc270
 800924c:	e000e400 	.word	0xe000e400
 8009250:	20000fcc 	.word	0x20000fcc
 8009254:	20000fd0 	.word	0x20000fd0
 8009258:	e000ed20 	.word	0xe000ed20
 800925c:	20000098 	.word	0x20000098
 8009260:	e000ef34 	.word	0xe000ef34

08009264 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009264:	b480      	push	{r7}
 8009266:	b083      	sub	sp, #12
 8009268:	af00      	add	r7, sp, #0
	__asm volatile
 800926a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800926e:	f383 8811 	msr	BASEPRI, r3
 8009272:	f3bf 8f6f 	isb	sy
 8009276:	f3bf 8f4f 	dsb	sy
 800927a:	607b      	str	r3, [r7, #4]
}
 800927c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800927e:	4b0f      	ldr	r3, [pc, #60]	; (80092bc <vPortEnterCritical+0x58>)
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	3301      	adds	r3, #1
 8009284:	4a0d      	ldr	r2, [pc, #52]	; (80092bc <vPortEnterCritical+0x58>)
 8009286:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009288:	4b0c      	ldr	r3, [pc, #48]	; (80092bc <vPortEnterCritical+0x58>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	2b01      	cmp	r3, #1
 800928e:	d10f      	bne.n	80092b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009290:	4b0b      	ldr	r3, [pc, #44]	; (80092c0 <vPortEnterCritical+0x5c>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	b2db      	uxtb	r3, r3
 8009296:	2b00      	cmp	r3, #0
 8009298:	d00a      	beq.n	80092b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800929a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800929e:	f383 8811 	msr	BASEPRI, r3
 80092a2:	f3bf 8f6f 	isb	sy
 80092a6:	f3bf 8f4f 	dsb	sy
 80092aa:	603b      	str	r3, [r7, #0]
}
 80092ac:	bf00      	nop
 80092ae:	e7fe      	b.n	80092ae <vPortEnterCritical+0x4a>
	}
}
 80092b0:	bf00      	nop
 80092b2:	370c      	adds	r7, #12
 80092b4:	46bd      	mov	sp, r7
 80092b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ba:	4770      	bx	lr
 80092bc:	20000098 	.word	0x20000098
 80092c0:	e000ed04 	.word	0xe000ed04

080092c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80092c4:	b480      	push	{r7}
 80092c6:	b083      	sub	sp, #12
 80092c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80092ca:	4b12      	ldr	r3, [pc, #72]	; (8009314 <vPortExitCritical+0x50>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d10a      	bne.n	80092e8 <vPortExitCritical+0x24>
	__asm volatile
 80092d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092d6:	f383 8811 	msr	BASEPRI, r3
 80092da:	f3bf 8f6f 	isb	sy
 80092de:	f3bf 8f4f 	dsb	sy
 80092e2:	607b      	str	r3, [r7, #4]
}
 80092e4:	bf00      	nop
 80092e6:	e7fe      	b.n	80092e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80092e8:	4b0a      	ldr	r3, [pc, #40]	; (8009314 <vPortExitCritical+0x50>)
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	3b01      	subs	r3, #1
 80092ee:	4a09      	ldr	r2, [pc, #36]	; (8009314 <vPortExitCritical+0x50>)
 80092f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80092f2:	4b08      	ldr	r3, [pc, #32]	; (8009314 <vPortExitCritical+0x50>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d105      	bne.n	8009306 <vPortExitCritical+0x42>
 80092fa:	2300      	movs	r3, #0
 80092fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	f383 8811 	msr	BASEPRI, r3
}
 8009304:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009306:	bf00      	nop
 8009308:	370c      	adds	r7, #12
 800930a:	46bd      	mov	sp, r7
 800930c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009310:	4770      	bx	lr
 8009312:	bf00      	nop
 8009314:	20000098 	.word	0x20000098
	...

08009320 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009320:	f3ef 8009 	mrs	r0, PSP
 8009324:	f3bf 8f6f 	isb	sy
 8009328:	4b15      	ldr	r3, [pc, #84]	; (8009380 <pxCurrentTCBConst>)
 800932a:	681a      	ldr	r2, [r3, #0]
 800932c:	f01e 0f10 	tst.w	lr, #16
 8009330:	bf08      	it	eq
 8009332:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009336:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800933a:	6010      	str	r0, [r2, #0]
 800933c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009340:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009344:	f380 8811 	msr	BASEPRI, r0
 8009348:	f3bf 8f4f 	dsb	sy
 800934c:	f3bf 8f6f 	isb	sy
 8009350:	f7fe ffba 	bl	80082c8 <vTaskSwitchContext>
 8009354:	f04f 0000 	mov.w	r0, #0
 8009358:	f380 8811 	msr	BASEPRI, r0
 800935c:	bc09      	pop	{r0, r3}
 800935e:	6819      	ldr	r1, [r3, #0]
 8009360:	6808      	ldr	r0, [r1, #0]
 8009362:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009366:	f01e 0f10 	tst.w	lr, #16
 800936a:	bf08      	it	eq
 800936c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009370:	f380 8809 	msr	PSP, r0
 8009374:	f3bf 8f6f 	isb	sy
 8009378:	4770      	bx	lr
 800937a:	bf00      	nop
 800937c:	f3af 8000 	nop.w

08009380 <pxCurrentTCBConst>:
 8009380:	200009a0 	.word	0x200009a0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009384:	bf00      	nop
 8009386:	bf00      	nop

08009388 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b082      	sub	sp, #8
 800938c:	af00      	add	r7, sp, #0
	__asm volatile
 800938e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009392:	f383 8811 	msr	BASEPRI, r3
 8009396:	f3bf 8f6f 	isb	sy
 800939a:	f3bf 8f4f 	dsb	sy
 800939e:	607b      	str	r3, [r7, #4]
}
 80093a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80093a2:	f7fe fed7 	bl	8008154 <xTaskIncrementTick>
 80093a6:	4603      	mov	r3, r0
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d003      	beq.n	80093b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80093ac:	4b06      	ldr	r3, [pc, #24]	; (80093c8 <xPortSysTickHandler+0x40>)
 80093ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093b2:	601a      	str	r2, [r3, #0]
 80093b4:	2300      	movs	r3, #0
 80093b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	f383 8811 	msr	BASEPRI, r3
}
 80093be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80093c0:	bf00      	nop
 80093c2:	3708      	adds	r7, #8
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}
 80093c8:	e000ed04 	.word	0xe000ed04

080093cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80093cc:	b480      	push	{r7}
 80093ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80093d0:	4b0b      	ldr	r3, [pc, #44]	; (8009400 <vPortSetupTimerInterrupt+0x34>)
 80093d2:	2200      	movs	r2, #0
 80093d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80093d6:	4b0b      	ldr	r3, [pc, #44]	; (8009404 <vPortSetupTimerInterrupt+0x38>)
 80093d8:	2200      	movs	r2, #0
 80093da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80093dc:	4b0a      	ldr	r3, [pc, #40]	; (8009408 <vPortSetupTimerInterrupt+0x3c>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	4a0a      	ldr	r2, [pc, #40]	; (800940c <vPortSetupTimerInterrupt+0x40>)
 80093e2:	fba2 2303 	umull	r2, r3, r2, r3
 80093e6:	099b      	lsrs	r3, r3, #6
 80093e8:	4a09      	ldr	r2, [pc, #36]	; (8009410 <vPortSetupTimerInterrupt+0x44>)
 80093ea:	3b01      	subs	r3, #1
 80093ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80093ee:	4b04      	ldr	r3, [pc, #16]	; (8009400 <vPortSetupTimerInterrupt+0x34>)
 80093f0:	2207      	movs	r2, #7
 80093f2:	601a      	str	r2, [r3, #0]
}
 80093f4:	bf00      	nop
 80093f6:	46bd      	mov	sp, r7
 80093f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fc:	4770      	bx	lr
 80093fe:	bf00      	nop
 8009400:	e000e010 	.word	0xe000e010
 8009404:	e000e018 	.word	0xe000e018
 8009408:	20000000 	.word	0x20000000
 800940c:	10624dd3 	.word	0x10624dd3
 8009410:	e000e014 	.word	0xe000e014

08009414 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009414:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009424 <vPortEnableVFP+0x10>
 8009418:	6801      	ldr	r1, [r0, #0]
 800941a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800941e:	6001      	str	r1, [r0, #0]
 8009420:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009422:	bf00      	nop
 8009424:	e000ed88 	.word	0xe000ed88

08009428 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009428:	b480      	push	{r7}
 800942a:	b085      	sub	sp, #20
 800942c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800942e:	f3ef 8305 	mrs	r3, IPSR
 8009432:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	2b0f      	cmp	r3, #15
 8009438:	d914      	bls.n	8009464 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800943a:	4a17      	ldr	r2, [pc, #92]	; (8009498 <vPortValidateInterruptPriority+0x70>)
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	4413      	add	r3, r2
 8009440:	781b      	ldrb	r3, [r3, #0]
 8009442:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009444:	4b15      	ldr	r3, [pc, #84]	; (800949c <vPortValidateInterruptPriority+0x74>)
 8009446:	781b      	ldrb	r3, [r3, #0]
 8009448:	7afa      	ldrb	r2, [r7, #11]
 800944a:	429a      	cmp	r2, r3
 800944c:	d20a      	bcs.n	8009464 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800944e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009452:	f383 8811 	msr	BASEPRI, r3
 8009456:	f3bf 8f6f 	isb	sy
 800945a:	f3bf 8f4f 	dsb	sy
 800945e:	607b      	str	r3, [r7, #4]
}
 8009460:	bf00      	nop
 8009462:	e7fe      	b.n	8009462 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009464:	4b0e      	ldr	r3, [pc, #56]	; (80094a0 <vPortValidateInterruptPriority+0x78>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800946c:	4b0d      	ldr	r3, [pc, #52]	; (80094a4 <vPortValidateInterruptPriority+0x7c>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	429a      	cmp	r2, r3
 8009472:	d90a      	bls.n	800948a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009478:	f383 8811 	msr	BASEPRI, r3
 800947c:	f3bf 8f6f 	isb	sy
 8009480:	f3bf 8f4f 	dsb	sy
 8009484:	603b      	str	r3, [r7, #0]
}
 8009486:	bf00      	nop
 8009488:	e7fe      	b.n	8009488 <vPortValidateInterruptPriority+0x60>
	}
 800948a:	bf00      	nop
 800948c:	3714      	adds	r7, #20
 800948e:	46bd      	mov	sp, r7
 8009490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009494:	4770      	bx	lr
 8009496:	bf00      	nop
 8009498:	e000e3f0 	.word	0xe000e3f0
 800949c:	20000fcc 	.word	0x20000fcc
 80094a0:	e000ed0c 	.word	0xe000ed0c
 80094a4:	20000fd0 	.word	0x20000fd0

080094a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b08a      	sub	sp, #40	; 0x28
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80094b0:	2300      	movs	r3, #0
 80094b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80094b4:	f7fe fd92 	bl	8007fdc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80094b8:	4b5b      	ldr	r3, [pc, #364]	; (8009628 <pvPortMalloc+0x180>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d101      	bne.n	80094c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80094c0:	f000 f920 	bl	8009704 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80094c4:	4b59      	ldr	r3, [pc, #356]	; (800962c <pvPortMalloc+0x184>)
 80094c6:	681a      	ldr	r2, [r3, #0]
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	4013      	ands	r3, r2
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	f040 8093 	bne.w	80095f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d01d      	beq.n	8009514 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80094d8:	2208      	movs	r2, #8
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	4413      	add	r3, r2
 80094de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f003 0307 	and.w	r3, r3, #7
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d014      	beq.n	8009514 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f023 0307 	bic.w	r3, r3, #7
 80094f0:	3308      	adds	r3, #8
 80094f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f003 0307 	and.w	r3, r3, #7
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d00a      	beq.n	8009514 <pvPortMalloc+0x6c>
	__asm volatile
 80094fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009502:	f383 8811 	msr	BASEPRI, r3
 8009506:	f3bf 8f6f 	isb	sy
 800950a:	f3bf 8f4f 	dsb	sy
 800950e:	617b      	str	r3, [r7, #20]
}
 8009510:	bf00      	nop
 8009512:	e7fe      	b.n	8009512 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d06e      	beq.n	80095f8 <pvPortMalloc+0x150>
 800951a:	4b45      	ldr	r3, [pc, #276]	; (8009630 <pvPortMalloc+0x188>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	687a      	ldr	r2, [r7, #4]
 8009520:	429a      	cmp	r2, r3
 8009522:	d869      	bhi.n	80095f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009524:	4b43      	ldr	r3, [pc, #268]	; (8009634 <pvPortMalloc+0x18c>)
 8009526:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009528:	4b42      	ldr	r3, [pc, #264]	; (8009634 <pvPortMalloc+0x18c>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800952e:	e004      	b.n	800953a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009532:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800953a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800953c:	685b      	ldr	r3, [r3, #4]
 800953e:	687a      	ldr	r2, [r7, #4]
 8009540:	429a      	cmp	r2, r3
 8009542:	d903      	bls.n	800954c <pvPortMalloc+0xa4>
 8009544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d1f1      	bne.n	8009530 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800954c:	4b36      	ldr	r3, [pc, #216]	; (8009628 <pvPortMalloc+0x180>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009552:	429a      	cmp	r2, r3
 8009554:	d050      	beq.n	80095f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009556:	6a3b      	ldr	r3, [r7, #32]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	2208      	movs	r2, #8
 800955c:	4413      	add	r3, r2
 800955e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009562:	681a      	ldr	r2, [r3, #0]
 8009564:	6a3b      	ldr	r3, [r7, #32]
 8009566:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800956a:	685a      	ldr	r2, [r3, #4]
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	1ad2      	subs	r2, r2, r3
 8009570:	2308      	movs	r3, #8
 8009572:	005b      	lsls	r3, r3, #1
 8009574:	429a      	cmp	r2, r3
 8009576:	d91f      	bls.n	80095b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	4413      	add	r3, r2
 800957e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009580:	69bb      	ldr	r3, [r7, #24]
 8009582:	f003 0307 	and.w	r3, r3, #7
 8009586:	2b00      	cmp	r3, #0
 8009588:	d00a      	beq.n	80095a0 <pvPortMalloc+0xf8>
	__asm volatile
 800958a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800958e:	f383 8811 	msr	BASEPRI, r3
 8009592:	f3bf 8f6f 	isb	sy
 8009596:	f3bf 8f4f 	dsb	sy
 800959a:	613b      	str	r3, [r7, #16]
}
 800959c:	bf00      	nop
 800959e:	e7fe      	b.n	800959e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80095a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a2:	685a      	ldr	r2, [r3, #4]
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	1ad2      	subs	r2, r2, r3
 80095a8:	69bb      	ldr	r3, [r7, #24]
 80095aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80095ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ae:	687a      	ldr	r2, [r7, #4]
 80095b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80095b2:	69b8      	ldr	r0, [r7, #24]
 80095b4:	f000 f908 	bl	80097c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80095b8:	4b1d      	ldr	r3, [pc, #116]	; (8009630 <pvPortMalloc+0x188>)
 80095ba:	681a      	ldr	r2, [r3, #0]
 80095bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095be:	685b      	ldr	r3, [r3, #4]
 80095c0:	1ad3      	subs	r3, r2, r3
 80095c2:	4a1b      	ldr	r2, [pc, #108]	; (8009630 <pvPortMalloc+0x188>)
 80095c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80095c6:	4b1a      	ldr	r3, [pc, #104]	; (8009630 <pvPortMalloc+0x188>)
 80095c8:	681a      	ldr	r2, [r3, #0]
 80095ca:	4b1b      	ldr	r3, [pc, #108]	; (8009638 <pvPortMalloc+0x190>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	429a      	cmp	r2, r3
 80095d0:	d203      	bcs.n	80095da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80095d2:	4b17      	ldr	r3, [pc, #92]	; (8009630 <pvPortMalloc+0x188>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	4a18      	ldr	r2, [pc, #96]	; (8009638 <pvPortMalloc+0x190>)
 80095d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80095da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095dc:	685a      	ldr	r2, [r3, #4]
 80095de:	4b13      	ldr	r3, [pc, #76]	; (800962c <pvPortMalloc+0x184>)
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	431a      	orrs	r2, r3
 80095e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80095e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ea:	2200      	movs	r2, #0
 80095ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80095ee:	4b13      	ldr	r3, [pc, #76]	; (800963c <pvPortMalloc+0x194>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	3301      	adds	r3, #1
 80095f4:	4a11      	ldr	r2, [pc, #68]	; (800963c <pvPortMalloc+0x194>)
 80095f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80095f8:	f7fe fcfe 	bl	8007ff8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80095fc:	69fb      	ldr	r3, [r7, #28]
 80095fe:	f003 0307 	and.w	r3, r3, #7
 8009602:	2b00      	cmp	r3, #0
 8009604:	d00a      	beq.n	800961c <pvPortMalloc+0x174>
	__asm volatile
 8009606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800960a:	f383 8811 	msr	BASEPRI, r3
 800960e:	f3bf 8f6f 	isb	sy
 8009612:	f3bf 8f4f 	dsb	sy
 8009616:	60fb      	str	r3, [r7, #12]
}
 8009618:	bf00      	nop
 800961a:	e7fe      	b.n	800961a <pvPortMalloc+0x172>
	return pvReturn;
 800961c:	69fb      	ldr	r3, [r7, #28]
}
 800961e:	4618      	mov	r0, r3
 8009620:	3728      	adds	r7, #40	; 0x28
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}
 8009626:	bf00      	nop
 8009628:	20004bdc 	.word	0x20004bdc
 800962c:	20004bf0 	.word	0x20004bf0
 8009630:	20004be0 	.word	0x20004be0
 8009634:	20004bd4 	.word	0x20004bd4
 8009638:	20004be4 	.word	0x20004be4
 800963c:	20004be8 	.word	0x20004be8

08009640 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b086      	sub	sp, #24
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d04d      	beq.n	80096ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009652:	2308      	movs	r3, #8
 8009654:	425b      	negs	r3, r3
 8009656:	697a      	ldr	r2, [r7, #20]
 8009658:	4413      	add	r3, r2
 800965a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009660:	693b      	ldr	r3, [r7, #16]
 8009662:	685a      	ldr	r2, [r3, #4]
 8009664:	4b24      	ldr	r3, [pc, #144]	; (80096f8 <vPortFree+0xb8>)
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	4013      	ands	r3, r2
 800966a:	2b00      	cmp	r3, #0
 800966c:	d10a      	bne.n	8009684 <vPortFree+0x44>
	__asm volatile
 800966e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009672:	f383 8811 	msr	BASEPRI, r3
 8009676:	f3bf 8f6f 	isb	sy
 800967a:	f3bf 8f4f 	dsb	sy
 800967e:	60fb      	str	r3, [r7, #12]
}
 8009680:	bf00      	nop
 8009682:	e7fe      	b.n	8009682 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009684:	693b      	ldr	r3, [r7, #16]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d00a      	beq.n	80096a2 <vPortFree+0x62>
	__asm volatile
 800968c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009690:	f383 8811 	msr	BASEPRI, r3
 8009694:	f3bf 8f6f 	isb	sy
 8009698:	f3bf 8f4f 	dsb	sy
 800969c:	60bb      	str	r3, [r7, #8]
}
 800969e:	bf00      	nop
 80096a0:	e7fe      	b.n	80096a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80096a2:	693b      	ldr	r3, [r7, #16]
 80096a4:	685a      	ldr	r2, [r3, #4]
 80096a6:	4b14      	ldr	r3, [pc, #80]	; (80096f8 <vPortFree+0xb8>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	4013      	ands	r3, r2
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d01e      	beq.n	80096ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80096b0:	693b      	ldr	r3, [r7, #16]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d11a      	bne.n	80096ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80096b8:	693b      	ldr	r3, [r7, #16]
 80096ba:	685a      	ldr	r2, [r3, #4]
 80096bc:	4b0e      	ldr	r3, [pc, #56]	; (80096f8 <vPortFree+0xb8>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	43db      	mvns	r3, r3
 80096c2:	401a      	ands	r2, r3
 80096c4:	693b      	ldr	r3, [r7, #16]
 80096c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80096c8:	f7fe fc88 	bl	8007fdc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80096cc:	693b      	ldr	r3, [r7, #16]
 80096ce:	685a      	ldr	r2, [r3, #4]
 80096d0:	4b0a      	ldr	r3, [pc, #40]	; (80096fc <vPortFree+0xbc>)
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	4413      	add	r3, r2
 80096d6:	4a09      	ldr	r2, [pc, #36]	; (80096fc <vPortFree+0xbc>)
 80096d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80096da:	6938      	ldr	r0, [r7, #16]
 80096dc:	f000 f874 	bl	80097c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80096e0:	4b07      	ldr	r3, [pc, #28]	; (8009700 <vPortFree+0xc0>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	3301      	adds	r3, #1
 80096e6:	4a06      	ldr	r2, [pc, #24]	; (8009700 <vPortFree+0xc0>)
 80096e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80096ea:	f7fe fc85 	bl	8007ff8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80096ee:	bf00      	nop
 80096f0:	3718      	adds	r7, #24
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}
 80096f6:	bf00      	nop
 80096f8:	20004bf0 	.word	0x20004bf0
 80096fc:	20004be0 	.word	0x20004be0
 8009700:	20004bec 	.word	0x20004bec

08009704 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009704:	b480      	push	{r7}
 8009706:	b085      	sub	sp, #20
 8009708:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800970a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800970e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009710:	4b27      	ldr	r3, [pc, #156]	; (80097b0 <prvHeapInit+0xac>)
 8009712:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	f003 0307 	and.w	r3, r3, #7
 800971a:	2b00      	cmp	r3, #0
 800971c:	d00c      	beq.n	8009738 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	3307      	adds	r3, #7
 8009722:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	f023 0307 	bic.w	r3, r3, #7
 800972a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800972c:	68ba      	ldr	r2, [r7, #8]
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	1ad3      	subs	r3, r2, r3
 8009732:	4a1f      	ldr	r2, [pc, #124]	; (80097b0 <prvHeapInit+0xac>)
 8009734:	4413      	add	r3, r2
 8009736:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800973c:	4a1d      	ldr	r2, [pc, #116]	; (80097b4 <prvHeapInit+0xb0>)
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009742:	4b1c      	ldr	r3, [pc, #112]	; (80097b4 <prvHeapInit+0xb0>)
 8009744:	2200      	movs	r2, #0
 8009746:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	68ba      	ldr	r2, [r7, #8]
 800974c:	4413      	add	r3, r2
 800974e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009750:	2208      	movs	r2, #8
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	1a9b      	subs	r3, r3, r2
 8009756:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	f023 0307 	bic.w	r3, r3, #7
 800975e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	4a15      	ldr	r2, [pc, #84]	; (80097b8 <prvHeapInit+0xb4>)
 8009764:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009766:	4b14      	ldr	r3, [pc, #80]	; (80097b8 <prvHeapInit+0xb4>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	2200      	movs	r2, #0
 800976c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800976e:	4b12      	ldr	r3, [pc, #72]	; (80097b8 <prvHeapInit+0xb4>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	2200      	movs	r2, #0
 8009774:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	68fa      	ldr	r2, [r7, #12]
 800977e:	1ad2      	subs	r2, r2, r3
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009784:	4b0c      	ldr	r3, [pc, #48]	; (80097b8 <prvHeapInit+0xb4>)
 8009786:	681a      	ldr	r2, [r3, #0]
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	685b      	ldr	r3, [r3, #4]
 8009790:	4a0a      	ldr	r2, [pc, #40]	; (80097bc <prvHeapInit+0xb8>)
 8009792:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	685b      	ldr	r3, [r3, #4]
 8009798:	4a09      	ldr	r2, [pc, #36]	; (80097c0 <prvHeapInit+0xbc>)
 800979a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800979c:	4b09      	ldr	r3, [pc, #36]	; (80097c4 <prvHeapInit+0xc0>)
 800979e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80097a2:	601a      	str	r2, [r3, #0]
}
 80097a4:	bf00      	nop
 80097a6:	3714      	adds	r7, #20
 80097a8:	46bd      	mov	sp, r7
 80097aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ae:	4770      	bx	lr
 80097b0:	20000fd4 	.word	0x20000fd4
 80097b4:	20004bd4 	.word	0x20004bd4
 80097b8:	20004bdc 	.word	0x20004bdc
 80097bc:	20004be4 	.word	0x20004be4
 80097c0:	20004be0 	.word	0x20004be0
 80097c4:	20004bf0 	.word	0x20004bf0

080097c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80097c8:	b480      	push	{r7}
 80097ca:	b085      	sub	sp, #20
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80097d0:	4b28      	ldr	r3, [pc, #160]	; (8009874 <prvInsertBlockIntoFreeList+0xac>)
 80097d2:	60fb      	str	r3, [r7, #12]
 80097d4:	e002      	b.n	80097dc <prvInsertBlockIntoFreeList+0x14>
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	60fb      	str	r3, [r7, #12]
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	687a      	ldr	r2, [r7, #4]
 80097e2:	429a      	cmp	r2, r3
 80097e4:	d8f7      	bhi.n	80097d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	685b      	ldr	r3, [r3, #4]
 80097ee:	68ba      	ldr	r2, [r7, #8]
 80097f0:	4413      	add	r3, r2
 80097f2:	687a      	ldr	r2, [r7, #4]
 80097f4:	429a      	cmp	r2, r3
 80097f6:	d108      	bne.n	800980a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	685a      	ldr	r2, [r3, #4]
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	685b      	ldr	r3, [r3, #4]
 8009800:	441a      	add	r2, r3
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	685b      	ldr	r3, [r3, #4]
 8009812:	68ba      	ldr	r2, [r7, #8]
 8009814:	441a      	add	r2, r3
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	429a      	cmp	r2, r3
 800981c:	d118      	bne.n	8009850 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	681a      	ldr	r2, [r3, #0]
 8009822:	4b15      	ldr	r3, [pc, #84]	; (8009878 <prvInsertBlockIntoFreeList+0xb0>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	429a      	cmp	r2, r3
 8009828:	d00d      	beq.n	8009846 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	685a      	ldr	r2, [r3, #4]
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	685b      	ldr	r3, [r3, #4]
 8009834:	441a      	add	r2, r3
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	681a      	ldr	r2, [r3, #0]
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	601a      	str	r2, [r3, #0]
 8009844:	e008      	b.n	8009858 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009846:	4b0c      	ldr	r3, [pc, #48]	; (8009878 <prvInsertBlockIntoFreeList+0xb0>)
 8009848:	681a      	ldr	r2, [r3, #0]
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	601a      	str	r2, [r3, #0]
 800984e:	e003      	b.n	8009858 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	681a      	ldr	r2, [r3, #0]
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009858:	68fa      	ldr	r2, [r7, #12]
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	429a      	cmp	r2, r3
 800985e:	d002      	beq.n	8009866 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	687a      	ldr	r2, [r7, #4]
 8009864:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009866:	bf00      	nop
 8009868:	3714      	adds	r7, #20
 800986a:	46bd      	mov	sp, r7
 800986c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009870:	4770      	bx	lr
 8009872:	bf00      	nop
 8009874:	20004bd4 	.word	0x20004bd4
 8009878:	20004bdc 	.word	0x20004bdc

0800987c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009880:	2200      	movs	r2, #0
 8009882:	4912      	ldr	r1, [pc, #72]	; (80098cc <MX_USB_DEVICE_Init+0x50>)
 8009884:	4812      	ldr	r0, [pc, #72]	; (80098d0 <MX_USB_DEVICE_Init+0x54>)
 8009886:	f7fb ff4b 	bl	8005720 <USBD_Init>
 800988a:	4603      	mov	r3, r0
 800988c:	2b00      	cmp	r3, #0
 800988e:	d001      	beq.n	8009894 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009890:	f7f6 ff94 	bl	80007bc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009894:	490f      	ldr	r1, [pc, #60]	; (80098d4 <MX_USB_DEVICE_Init+0x58>)
 8009896:	480e      	ldr	r0, [pc, #56]	; (80098d0 <MX_USB_DEVICE_Init+0x54>)
 8009898:	f7fb ff72 	bl	8005780 <USBD_RegisterClass>
 800989c:	4603      	mov	r3, r0
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d001      	beq.n	80098a6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80098a2:	f7f6 ff8b 	bl	80007bc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80098a6:	490c      	ldr	r1, [pc, #48]	; (80098d8 <MX_USB_DEVICE_Init+0x5c>)
 80098a8:	4809      	ldr	r0, [pc, #36]	; (80098d0 <MX_USB_DEVICE_Init+0x54>)
 80098aa:	f7fb fe63 	bl	8005574 <USBD_CDC_RegisterInterface>
 80098ae:	4603      	mov	r3, r0
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d001      	beq.n	80098b8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80098b4:	f7f6 ff82 	bl	80007bc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80098b8:	4805      	ldr	r0, [pc, #20]	; (80098d0 <MX_USB_DEVICE_Init+0x54>)
 80098ba:	f7fb ff97 	bl	80057ec <USBD_Start>
 80098be:	4603      	mov	r3, r0
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d001      	beq.n	80098c8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80098c4:	f7f6 ff7a 	bl	80007bc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80098c8:	bf00      	nop
 80098ca:	bd80      	pop	{r7, pc}
 80098cc:	200000b0 	.word	0x200000b0
 80098d0:	20004bf4 	.word	0x20004bf4
 80098d4:	20000018 	.word	0x20000018
 80098d8:	2000009c 	.word	0x2000009c

080098dc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80098e0:	2200      	movs	r2, #0
 80098e2:	4905      	ldr	r1, [pc, #20]	; (80098f8 <CDC_Init_FS+0x1c>)
 80098e4:	4805      	ldr	r0, [pc, #20]	; (80098fc <CDC_Init_FS+0x20>)
 80098e6:	f7fb fe5f 	bl	80055a8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80098ea:	4905      	ldr	r1, [pc, #20]	; (8009900 <CDC_Init_FS+0x24>)
 80098ec:	4803      	ldr	r0, [pc, #12]	; (80098fc <CDC_Init_FS+0x20>)
 80098ee:	f7fb fe7d 	bl	80055ec <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80098f2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	bd80      	pop	{r7, pc}
 80098f8:	200056d0 	.word	0x200056d0
 80098fc:	20004bf4 	.word	0x20004bf4
 8009900:	20004ed0 	.word	0x20004ed0

08009904 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009904:	b480      	push	{r7}
 8009906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009908:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800990a:	4618      	mov	r0, r3
 800990c:	46bd      	mov	sp, r7
 800990e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009912:	4770      	bx	lr

08009914 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009914:	b480      	push	{r7}
 8009916:	b083      	sub	sp, #12
 8009918:	af00      	add	r7, sp, #0
 800991a:	4603      	mov	r3, r0
 800991c:	6039      	str	r1, [r7, #0]
 800991e:	71fb      	strb	r3, [r7, #7]
 8009920:	4613      	mov	r3, r2
 8009922:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009924:	79fb      	ldrb	r3, [r7, #7]
 8009926:	2b23      	cmp	r3, #35	; 0x23
 8009928:	d84a      	bhi.n	80099c0 <CDC_Control_FS+0xac>
 800992a:	a201      	add	r2, pc, #4	; (adr r2, 8009930 <CDC_Control_FS+0x1c>)
 800992c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009930:	080099c1 	.word	0x080099c1
 8009934:	080099c1 	.word	0x080099c1
 8009938:	080099c1 	.word	0x080099c1
 800993c:	080099c1 	.word	0x080099c1
 8009940:	080099c1 	.word	0x080099c1
 8009944:	080099c1 	.word	0x080099c1
 8009948:	080099c1 	.word	0x080099c1
 800994c:	080099c1 	.word	0x080099c1
 8009950:	080099c1 	.word	0x080099c1
 8009954:	080099c1 	.word	0x080099c1
 8009958:	080099c1 	.word	0x080099c1
 800995c:	080099c1 	.word	0x080099c1
 8009960:	080099c1 	.word	0x080099c1
 8009964:	080099c1 	.word	0x080099c1
 8009968:	080099c1 	.word	0x080099c1
 800996c:	080099c1 	.word	0x080099c1
 8009970:	080099c1 	.word	0x080099c1
 8009974:	080099c1 	.word	0x080099c1
 8009978:	080099c1 	.word	0x080099c1
 800997c:	080099c1 	.word	0x080099c1
 8009980:	080099c1 	.word	0x080099c1
 8009984:	080099c1 	.word	0x080099c1
 8009988:	080099c1 	.word	0x080099c1
 800998c:	080099c1 	.word	0x080099c1
 8009990:	080099c1 	.word	0x080099c1
 8009994:	080099c1 	.word	0x080099c1
 8009998:	080099c1 	.word	0x080099c1
 800999c:	080099c1 	.word	0x080099c1
 80099a0:	080099c1 	.word	0x080099c1
 80099a4:	080099c1 	.word	0x080099c1
 80099a8:	080099c1 	.word	0x080099c1
 80099ac:	080099c1 	.word	0x080099c1
 80099b0:	080099c1 	.word	0x080099c1
 80099b4:	080099c1 	.word	0x080099c1
 80099b8:	080099c1 	.word	0x080099c1
 80099bc:	080099c1 	.word	0x080099c1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80099c0:	bf00      	nop
  }

  return (USBD_OK);
 80099c2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	370c      	adds	r7, #12
 80099c8:	46bd      	mov	sp, r7
 80099ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ce:	4770      	bx	lr

080099d0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b082      	sub	sp, #8
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
 80099d8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80099da:	6879      	ldr	r1, [r7, #4]
 80099dc:	4805      	ldr	r0, [pc, #20]	; (80099f4 <CDC_Receive_FS+0x24>)
 80099de:	f7fb fe05 	bl	80055ec <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80099e2:	4804      	ldr	r0, [pc, #16]	; (80099f4 <CDC_Receive_FS+0x24>)
 80099e4:	f7fb fe66 	bl	80056b4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80099e8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	3708      	adds	r7, #8
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}
 80099f2:	bf00      	nop
 80099f4:	20004bf4 	.word	0x20004bf4

080099f8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b084      	sub	sp, #16
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
 8009a00:	460b      	mov	r3, r1
 8009a02:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009a04:	2300      	movs	r3, #0
 8009a06:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009a08:	4b0d      	ldr	r3, [pc, #52]	; (8009a40 <CDC_Transmit_FS+0x48>)
 8009a0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009a0e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d001      	beq.n	8009a1e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	e00b      	b.n	8009a36 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009a1e:	887b      	ldrh	r3, [r7, #2]
 8009a20:	461a      	mov	r2, r3
 8009a22:	6879      	ldr	r1, [r7, #4]
 8009a24:	4806      	ldr	r0, [pc, #24]	; (8009a40 <CDC_Transmit_FS+0x48>)
 8009a26:	f7fb fdbf 	bl	80055a8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009a2a:	4805      	ldr	r0, [pc, #20]	; (8009a40 <CDC_Transmit_FS+0x48>)
 8009a2c:	f7fb fdfc 	bl	8005628 <USBD_CDC_TransmitPacket>
 8009a30:	4603      	mov	r3, r0
 8009a32:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3710      	adds	r7, #16
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}
 8009a3e:	bf00      	nop
 8009a40:	20004bf4 	.word	0x20004bf4

08009a44 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009a44:	b480      	push	{r7}
 8009a46:	b087      	sub	sp, #28
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	60f8      	str	r0, [r7, #12]
 8009a4c:	60b9      	str	r1, [r7, #8]
 8009a4e:	4613      	mov	r3, r2
 8009a50:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009a52:	2300      	movs	r3, #0
 8009a54:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009a56:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	371c      	adds	r7, #28
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a64:	4770      	bx	lr
	...

08009a68 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a68:	b480      	push	{r7}
 8009a6a:	b083      	sub	sp, #12
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	4603      	mov	r3, r0
 8009a70:	6039      	str	r1, [r7, #0]
 8009a72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	2212      	movs	r2, #18
 8009a78:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009a7a:	4b03      	ldr	r3, [pc, #12]	; (8009a88 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	370c      	adds	r7, #12
 8009a80:	46bd      	mov	sp, r7
 8009a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a86:	4770      	bx	lr
 8009a88:	200000cc 	.word	0x200000cc

08009a8c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a8c:	b480      	push	{r7}
 8009a8e:	b083      	sub	sp, #12
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	4603      	mov	r3, r0
 8009a94:	6039      	str	r1, [r7, #0]
 8009a96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	2204      	movs	r2, #4
 8009a9c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009a9e:	4b03      	ldr	r3, [pc, #12]	; (8009aac <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	370c      	adds	r7, #12
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aaa:	4770      	bx	lr
 8009aac:	200000e0 	.word	0x200000e0

08009ab0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b082      	sub	sp, #8
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	6039      	str	r1, [r7, #0]
 8009aba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009abc:	79fb      	ldrb	r3, [r7, #7]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d105      	bne.n	8009ace <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009ac2:	683a      	ldr	r2, [r7, #0]
 8009ac4:	4907      	ldr	r1, [pc, #28]	; (8009ae4 <USBD_FS_ProductStrDescriptor+0x34>)
 8009ac6:	4808      	ldr	r0, [pc, #32]	; (8009ae8 <USBD_FS_ProductStrDescriptor+0x38>)
 8009ac8:	f7fd f83c 	bl	8006b44 <USBD_GetString>
 8009acc:	e004      	b.n	8009ad8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009ace:	683a      	ldr	r2, [r7, #0]
 8009ad0:	4904      	ldr	r1, [pc, #16]	; (8009ae4 <USBD_FS_ProductStrDescriptor+0x34>)
 8009ad2:	4805      	ldr	r0, [pc, #20]	; (8009ae8 <USBD_FS_ProductStrDescriptor+0x38>)
 8009ad4:	f7fd f836 	bl	8006b44 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009ad8:	4b02      	ldr	r3, [pc, #8]	; (8009ae4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	3708      	adds	r7, #8
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}
 8009ae2:	bf00      	nop
 8009ae4:	20005ed0 	.word	0x20005ed0
 8009ae8:	0800a890 	.word	0x0800a890

08009aec <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b082      	sub	sp, #8
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	4603      	mov	r3, r0
 8009af4:	6039      	str	r1, [r7, #0]
 8009af6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009af8:	683a      	ldr	r2, [r7, #0]
 8009afa:	4904      	ldr	r1, [pc, #16]	; (8009b0c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009afc:	4804      	ldr	r0, [pc, #16]	; (8009b10 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009afe:	f7fd f821 	bl	8006b44 <USBD_GetString>
  return USBD_StrDesc;
 8009b02:	4b02      	ldr	r3, [pc, #8]	; (8009b0c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009b04:	4618      	mov	r0, r3
 8009b06:	3708      	adds	r7, #8
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}
 8009b0c:	20005ed0 	.word	0x20005ed0
 8009b10:	0800a89c 	.word	0x0800a89c

08009b14 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b082      	sub	sp, #8
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	6039      	str	r1, [r7, #0]
 8009b1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	221a      	movs	r2, #26
 8009b24:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009b26:	f000 f843 	bl	8009bb0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009b2a:	4b02      	ldr	r3, [pc, #8]	; (8009b34 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	3708      	adds	r7, #8
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}
 8009b34:	200000e4 	.word	0x200000e4

08009b38 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b082      	sub	sp, #8
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	4603      	mov	r3, r0
 8009b40:	6039      	str	r1, [r7, #0]
 8009b42:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009b44:	79fb      	ldrb	r3, [r7, #7]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d105      	bne.n	8009b56 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009b4a:	683a      	ldr	r2, [r7, #0]
 8009b4c:	4907      	ldr	r1, [pc, #28]	; (8009b6c <USBD_FS_ConfigStrDescriptor+0x34>)
 8009b4e:	4808      	ldr	r0, [pc, #32]	; (8009b70 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009b50:	f7fc fff8 	bl	8006b44 <USBD_GetString>
 8009b54:	e004      	b.n	8009b60 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009b56:	683a      	ldr	r2, [r7, #0]
 8009b58:	4904      	ldr	r1, [pc, #16]	; (8009b6c <USBD_FS_ConfigStrDescriptor+0x34>)
 8009b5a:	4805      	ldr	r0, [pc, #20]	; (8009b70 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009b5c:	f7fc fff2 	bl	8006b44 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009b60:	4b02      	ldr	r3, [pc, #8]	; (8009b6c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	3708      	adds	r7, #8
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}
 8009b6a:	bf00      	nop
 8009b6c:	20005ed0 	.word	0x20005ed0
 8009b70:	0800a8b0 	.word	0x0800a8b0

08009b74 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b082      	sub	sp, #8
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	6039      	str	r1, [r7, #0]
 8009b7e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009b80:	79fb      	ldrb	r3, [r7, #7]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d105      	bne.n	8009b92 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009b86:	683a      	ldr	r2, [r7, #0]
 8009b88:	4907      	ldr	r1, [pc, #28]	; (8009ba8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009b8a:	4808      	ldr	r0, [pc, #32]	; (8009bac <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009b8c:	f7fc ffda 	bl	8006b44 <USBD_GetString>
 8009b90:	e004      	b.n	8009b9c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009b92:	683a      	ldr	r2, [r7, #0]
 8009b94:	4904      	ldr	r1, [pc, #16]	; (8009ba8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009b96:	4805      	ldr	r0, [pc, #20]	; (8009bac <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009b98:	f7fc ffd4 	bl	8006b44 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009b9c:	4b02      	ldr	r3, [pc, #8]	; (8009ba8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3708      	adds	r7, #8
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}
 8009ba6:	bf00      	nop
 8009ba8:	20005ed0 	.word	0x20005ed0
 8009bac:	0800a8bc 	.word	0x0800a8bc

08009bb0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b084      	sub	sp, #16
 8009bb4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009bb6:	4b0f      	ldr	r3, [pc, #60]	; (8009bf4 <Get_SerialNum+0x44>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009bbc:	4b0e      	ldr	r3, [pc, #56]	; (8009bf8 <Get_SerialNum+0x48>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009bc2:	4b0e      	ldr	r3, [pc, #56]	; (8009bfc <Get_SerialNum+0x4c>)
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009bc8:	68fa      	ldr	r2, [r7, #12]
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	4413      	add	r3, r2
 8009bce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d009      	beq.n	8009bea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009bd6:	2208      	movs	r2, #8
 8009bd8:	4909      	ldr	r1, [pc, #36]	; (8009c00 <Get_SerialNum+0x50>)
 8009bda:	68f8      	ldr	r0, [r7, #12]
 8009bdc:	f000 f814 	bl	8009c08 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009be0:	2204      	movs	r2, #4
 8009be2:	4908      	ldr	r1, [pc, #32]	; (8009c04 <Get_SerialNum+0x54>)
 8009be4:	68b8      	ldr	r0, [r7, #8]
 8009be6:	f000 f80f 	bl	8009c08 <IntToUnicode>
  }
}
 8009bea:	bf00      	nop
 8009bec:	3710      	adds	r7, #16
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}
 8009bf2:	bf00      	nop
 8009bf4:	1fff7a10 	.word	0x1fff7a10
 8009bf8:	1fff7a14 	.word	0x1fff7a14
 8009bfc:	1fff7a18 	.word	0x1fff7a18
 8009c00:	200000e6 	.word	0x200000e6
 8009c04:	200000f6 	.word	0x200000f6

08009c08 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009c08:	b480      	push	{r7}
 8009c0a:	b087      	sub	sp, #28
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	60f8      	str	r0, [r7, #12]
 8009c10:	60b9      	str	r1, [r7, #8]
 8009c12:	4613      	mov	r3, r2
 8009c14:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009c16:	2300      	movs	r3, #0
 8009c18:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	75fb      	strb	r3, [r7, #23]
 8009c1e:	e027      	b.n	8009c70 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	0f1b      	lsrs	r3, r3, #28
 8009c24:	2b09      	cmp	r3, #9
 8009c26:	d80b      	bhi.n	8009c40 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	0f1b      	lsrs	r3, r3, #28
 8009c2c:	b2da      	uxtb	r2, r3
 8009c2e:	7dfb      	ldrb	r3, [r7, #23]
 8009c30:	005b      	lsls	r3, r3, #1
 8009c32:	4619      	mov	r1, r3
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	440b      	add	r3, r1
 8009c38:	3230      	adds	r2, #48	; 0x30
 8009c3a:	b2d2      	uxtb	r2, r2
 8009c3c:	701a      	strb	r2, [r3, #0]
 8009c3e:	e00a      	b.n	8009c56 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	0f1b      	lsrs	r3, r3, #28
 8009c44:	b2da      	uxtb	r2, r3
 8009c46:	7dfb      	ldrb	r3, [r7, #23]
 8009c48:	005b      	lsls	r3, r3, #1
 8009c4a:	4619      	mov	r1, r3
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	440b      	add	r3, r1
 8009c50:	3237      	adds	r2, #55	; 0x37
 8009c52:	b2d2      	uxtb	r2, r2
 8009c54:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	011b      	lsls	r3, r3, #4
 8009c5a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009c5c:	7dfb      	ldrb	r3, [r7, #23]
 8009c5e:	005b      	lsls	r3, r3, #1
 8009c60:	3301      	adds	r3, #1
 8009c62:	68ba      	ldr	r2, [r7, #8]
 8009c64:	4413      	add	r3, r2
 8009c66:	2200      	movs	r2, #0
 8009c68:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009c6a:	7dfb      	ldrb	r3, [r7, #23]
 8009c6c:	3301      	adds	r3, #1
 8009c6e:	75fb      	strb	r3, [r7, #23]
 8009c70:	7dfa      	ldrb	r2, [r7, #23]
 8009c72:	79fb      	ldrb	r3, [r7, #7]
 8009c74:	429a      	cmp	r2, r3
 8009c76:	d3d3      	bcc.n	8009c20 <IntToUnicode+0x18>
  }
}
 8009c78:	bf00      	nop
 8009c7a:	bf00      	nop
 8009c7c:	371c      	adds	r7, #28
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c84:	4770      	bx	lr
	...

08009c88 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b08a      	sub	sp, #40	; 0x28
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009c90:	f107 0314 	add.w	r3, r7, #20
 8009c94:	2200      	movs	r2, #0
 8009c96:	601a      	str	r2, [r3, #0]
 8009c98:	605a      	str	r2, [r3, #4]
 8009c9a:	609a      	str	r2, [r3, #8]
 8009c9c:	60da      	str	r2, [r3, #12]
 8009c9e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009ca8:	d13a      	bne.n	8009d20 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009caa:	2300      	movs	r3, #0
 8009cac:	613b      	str	r3, [r7, #16]
 8009cae:	4b1e      	ldr	r3, [pc, #120]	; (8009d28 <HAL_PCD_MspInit+0xa0>)
 8009cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cb2:	4a1d      	ldr	r2, [pc, #116]	; (8009d28 <HAL_PCD_MspInit+0xa0>)
 8009cb4:	f043 0301 	orr.w	r3, r3, #1
 8009cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8009cba:	4b1b      	ldr	r3, [pc, #108]	; (8009d28 <HAL_PCD_MspInit+0xa0>)
 8009cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cbe:	f003 0301 	and.w	r3, r3, #1
 8009cc2:	613b      	str	r3, [r7, #16]
 8009cc4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009cc6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009cca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ccc:	2302      	movs	r3, #2
 8009cce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009cd4:	2303      	movs	r3, #3
 8009cd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009cd8:	230a      	movs	r3, #10
 8009cda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009cdc:	f107 0314 	add.w	r3, r7, #20
 8009ce0:	4619      	mov	r1, r3
 8009ce2:	4812      	ldr	r0, [pc, #72]	; (8009d2c <HAL_PCD_MspInit+0xa4>)
 8009ce4:	f7f7 f848 	bl	8000d78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009ce8:	4b0f      	ldr	r3, [pc, #60]	; (8009d28 <HAL_PCD_MspInit+0xa0>)
 8009cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cec:	4a0e      	ldr	r2, [pc, #56]	; (8009d28 <HAL_PCD_MspInit+0xa0>)
 8009cee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cf2:	6353      	str	r3, [r2, #52]	; 0x34
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	60fb      	str	r3, [r7, #12]
 8009cf8:	4b0b      	ldr	r3, [pc, #44]	; (8009d28 <HAL_PCD_MspInit+0xa0>)
 8009cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cfc:	4a0a      	ldr	r2, [pc, #40]	; (8009d28 <HAL_PCD_MspInit+0xa0>)
 8009cfe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009d02:	6453      	str	r3, [r2, #68]	; 0x44
 8009d04:	4b08      	ldr	r3, [pc, #32]	; (8009d28 <HAL_PCD_MspInit+0xa0>)
 8009d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009d0c:	60fb      	str	r3, [r7, #12]
 8009d0e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8009d10:	2200      	movs	r2, #0
 8009d12:	2105      	movs	r1, #5
 8009d14:	2043      	movs	r0, #67	; 0x43
 8009d16:	f7f7 f805 	bl	8000d24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009d1a:	2043      	movs	r0, #67	; 0x43
 8009d1c:	f7f7 f81e 	bl	8000d5c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009d20:	bf00      	nop
 8009d22:	3728      	adds	r7, #40	; 0x28
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bd80      	pop	{r7, pc}
 8009d28:	40023800 	.word	0x40023800
 8009d2c:	40020000 	.word	0x40020000

08009d30 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b082      	sub	sp, #8
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009d44:	4619      	mov	r1, r3
 8009d46:	4610      	mov	r0, r2
 8009d48:	f7fb fd9d 	bl	8005886 <USBD_LL_SetupStage>
}
 8009d4c:	bf00      	nop
 8009d4e:	3708      	adds	r7, #8
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bd80      	pop	{r7, pc}

08009d54 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b082      	sub	sp, #8
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
 8009d5c:	460b      	mov	r3, r1
 8009d5e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009d66:	78fa      	ldrb	r2, [r7, #3]
 8009d68:	6879      	ldr	r1, [r7, #4]
 8009d6a:	4613      	mov	r3, r2
 8009d6c:	00db      	lsls	r3, r3, #3
 8009d6e:	4413      	add	r3, r2
 8009d70:	009b      	lsls	r3, r3, #2
 8009d72:	440b      	add	r3, r1
 8009d74:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009d78:	681a      	ldr	r2, [r3, #0]
 8009d7a:	78fb      	ldrb	r3, [r7, #3]
 8009d7c:	4619      	mov	r1, r3
 8009d7e:	f7fb fdd7 	bl	8005930 <USBD_LL_DataOutStage>
}
 8009d82:	bf00      	nop
 8009d84:	3708      	adds	r7, #8
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}

08009d8a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d8a:	b580      	push	{r7, lr}
 8009d8c:	b082      	sub	sp, #8
 8009d8e:	af00      	add	r7, sp, #0
 8009d90:	6078      	str	r0, [r7, #4]
 8009d92:	460b      	mov	r3, r1
 8009d94:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009d9c:	78fa      	ldrb	r2, [r7, #3]
 8009d9e:	6879      	ldr	r1, [r7, #4]
 8009da0:	4613      	mov	r3, r2
 8009da2:	00db      	lsls	r3, r3, #3
 8009da4:	4413      	add	r3, r2
 8009da6:	009b      	lsls	r3, r3, #2
 8009da8:	440b      	add	r3, r1
 8009daa:	334c      	adds	r3, #76	; 0x4c
 8009dac:	681a      	ldr	r2, [r3, #0]
 8009dae:	78fb      	ldrb	r3, [r7, #3]
 8009db0:	4619      	mov	r1, r3
 8009db2:	f7fb fe70 	bl	8005a96 <USBD_LL_DataInStage>
}
 8009db6:	bf00      	nop
 8009db8:	3708      	adds	r7, #8
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bd80      	pop	{r7, pc}

08009dbe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009dbe:	b580      	push	{r7, lr}
 8009dc0:	b082      	sub	sp, #8
 8009dc2:	af00      	add	r7, sp, #0
 8009dc4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009dcc:	4618      	mov	r0, r3
 8009dce:	f7fb ffa4 	bl	8005d1a <USBD_LL_SOF>
}
 8009dd2:	bf00      	nop
 8009dd4:	3708      	adds	r7, #8
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}

08009dda <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009dda:	b580      	push	{r7, lr}
 8009ddc:	b084      	sub	sp, #16
 8009dde:	af00      	add	r7, sp, #0
 8009de0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009de2:	2301      	movs	r3, #1
 8009de4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	68db      	ldr	r3, [r3, #12]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d102      	bne.n	8009df4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009dee:	2300      	movs	r3, #0
 8009df0:	73fb      	strb	r3, [r7, #15]
 8009df2:	e008      	b.n	8009e06 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	68db      	ldr	r3, [r3, #12]
 8009df8:	2b02      	cmp	r3, #2
 8009dfa:	d102      	bne.n	8009e02 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009dfc:	2301      	movs	r3, #1
 8009dfe:	73fb      	strb	r3, [r7, #15]
 8009e00:	e001      	b.n	8009e06 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009e02:	f7f6 fcdb 	bl	80007bc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009e0c:	7bfa      	ldrb	r2, [r7, #15]
 8009e0e:	4611      	mov	r1, r2
 8009e10:	4618      	mov	r0, r3
 8009e12:	f7fb ff44 	bl	8005c9e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	f7fb feec 	bl	8005bfa <USBD_LL_Reset>
}
 8009e22:	bf00      	nop
 8009e24:	3710      	adds	r7, #16
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bd80      	pop	{r7, pc}
	...

08009e2c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b082      	sub	sp, #8
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	f7fb ff3f 	bl	8005cbe <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	687a      	ldr	r2, [r7, #4]
 8009e4c:	6812      	ldr	r2, [r2, #0]
 8009e4e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009e52:	f043 0301 	orr.w	r3, r3, #1
 8009e56:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6a1b      	ldr	r3, [r3, #32]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d005      	beq.n	8009e6c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009e60:	4b04      	ldr	r3, [pc, #16]	; (8009e74 <HAL_PCD_SuspendCallback+0x48>)
 8009e62:	691b      	ldr	r3, [r3, #16]
 8009e64:	4a03      	ldr	r2, [pc, #12]	; (8009e74 <HAL_PCD_SuspendCallback+0x48>)
 8009e66:	f043 0306 	orr.w	r3, r3, #6
 8009e6a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009e6c:	bf00      	nop
 8009e6e:	3708      	adds	r7, #8
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bd80      	pop	{r7, pc}
 8009e74:	e000ed00 	.word	0xe000ed00

08009e78 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b082      	sub	sp, #8
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009e86:	4618      	mov	r0, r3
 8009e88:	f7fb ff2f 	bl	8005cea <USBD_LL_Resume>
}
 8009e8c:	bf00      	nop
 8009e8e:	3708      	adds	r7, #8
 8009e90:	46bd      	mov	sp, r7
 8009e92:	bd80      	pop	{r7, pc}

08009e94 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b082      	sub	sp, #8
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
 8009e9c:	460b      	mov	r3, r1
 8009e9e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009ea6:	78fa      	ldrb	r2, [r7, #3]
 8009ea8:	4611      	mov	r1, r2
 8009eaa:	4618      	mov	r0, r3
 8009eac:	f7fb ff87 	bl	8005dbe <USBD_LL_IsoOUTIncomplete>
}
 8009eb0:	bf00      	nop
 8009eb2:	3708      	adds	r7, #8
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd80      	pop	{r7, pc}

08009eb8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b082      	sub	sp, #8
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
 8009ec0:	460b      	mov	r3, r1
 8009ec2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009eca:	78fa      	ldrb	r2, [r7, #3]
 8009ecc:	4611      	mov	r1, r2
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f7fb ff43 	bl	8005d5a <USBD_LL_IsoINIncomplete>
}
 8009ed4:	bf00      	nop
 8009ed6:	3708      	adds	r7, #8
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}

08009edc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b082      	sub	sp, #8
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009eea:	4618      	mov	r0, r3
 8009eec:	f7fb ff99 	bl	8005e22 <USBD_LL_DevConnected>
}
 8009ef0:	bf00      	nop
 8009ef2:	3708      	adds	r7, #8
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}

08009ef8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b082      	sub	sp, #8
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009f06:	4618      	mov	r0, r3
 8009f08:	f7fb ff96 	bl	8005e38 <USBD_LL_DevDisconnected>
}
 8009f0c:	bf00      	nop
 8009f0e:	3708      	adds	r7, #8
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}

08009f14 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b082      	sub	sp, #8
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	781b      	ldrb	r3, [r3, #0]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d13c      	bne.n	8009f9e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009f24:	4a20      	ldr	r2, [pc, #128]	; (8009fa8 <USBD_LL_Init+0x94>)
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	4a1e      	ldr	r2, [pc, #120]	; (8009fa8 <USBD_LL_Init+0x94>)
 8009f30:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009f34:	4b1c      	ldr	r3, [pc, #112]	; (8009fa8 <USBD_LL_Init+0x94>)
 8009f36:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009f3a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009f3c:	4b1a      	ldr	r3, [pc, #104]	; (8009fa8 <USBD_LL_Init+0x94>)
 8009f3e:	2204      	movs	r2, #4
 8009f40:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009f42:	4b19      	ldr	r3, [pc, #100]	; (8009fa8 <USBD_LL_Init+0x94>)
 8009f44:	2202      	movs	r2, #2
 8009f46:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009f48:	4b17      	ldr	r3, [pc, #92]	; (8009fa8 <USBD_LL_Init+0x94>)
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009f4e:	4b16      	ldr	r3, [pc, #88]	; (8009fa8 <USBD_LL_Init+0x94>)
 8009f50:	2202      	movs	r2, #2
 8009f52:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009f54:	4b14      	ldr	r3, [pc, #80]	; (8009fa8 <USBD_LL_Init+0x94>)
 8009f56:	2200      	movs	r2, #0
 8009f58:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009f5a:	4b13      	ldr	r3, [pc, #76]	; (8009fa8 <USBD_LL_Init+0x94>)
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009f60:	4b11      	ldr	r3, [pc, #68]	; (8009fa8 <USBD_LL_Init+0x94>)
 8009f62:	2200      	movs	r2, #0
 8009f64:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009f66:	4b10      	ldr	r3, [pc, #64]	; (8009fa8 <USBD_LL_Init+0x94>)
 8009f68:	2200      	movs	r2, #0
 8009f6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009f6c:	4b0e      	ldr	r3, [pc, #56]	; (8009fa8 <USBD_LL_Init+0x94>)
 8009f6e:	2200      	movs	r2, #0
 8009f70:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009f72:	480d      	ldr	r0, [pc, #52]	; (8009fa8 <USBD_LL_Init+0x94>)
 8009f74:	f7f7 f8cf 	bl	8001116 <HAL_PCD_Init>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d001      	beq.n	8009f82 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009f7e:	f7f6 fc1d 	bl	80007bc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009f82:	2180      	movs	r1, #128	; 0x80
 8009f84:	4808      	ldr	r0, [pc, #32]	; (8009fa8 <USBD_LL_Init+0x94>)
 8009f86:	f7f8 fb26 	bl	80025d6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009f8a:	2240      	movs	r2, #64	; 0x40
 8009f8c:	2100      	movs	r1, #0
 8009f8e:	4806      	ldr	r0, [pc, #24]	; (8009fa8 <USBD_LL_Init+0x94>)
 8009f90:	f7f8 fada 	bl	8002548 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009f94:	2280      	movs	r2, #128	; 0x80
 8009f96:	2101      	movs	r1, #1
 8009f98:	4803      	ldr	r0, [pc, #12]	; (8009fa8 <USBD_LL_Init+0x94>)
 8009f9a:	f7f8 fad5 	bl	8002548 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009f9e:	2300      	movs	r3, #0
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	3708      	adds	r7, #8
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}
 8009fa8:	200060d0 	.word	0x200060d0

08009fac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b084      	sub	sp, #16
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fb8:	2300      	movs	r3, #0
 8009fba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	f7f7 f9c4 	bl	8001350 <HAL_PCD_Start>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fcc:	7bfb      	ldrb	r3, [r7, #15]
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f000 f942 	bl	800a258 <USBD_Get_USB_Status>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009fd8:	7bbb      	ldrb	r3, [r7, #14]
}
 8009fda:	4618      	mov	r0, r3
 8009fdc:	3710      	adds	r7, #16
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}

08009fe2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009fe2:	b580      	push	{r7, lr}
 8009fe4:	b084      	sub	sp, #16
 8009fe6:	af00      	add	r7, sp, #0
 8009fe8:	6078      	str	r0, [r7, #4]
 8009fea:	4608      	mov	r0, r1
 8009fec:	4611      	mov	r1, r2
 8009fee:	461a      	mov	r2, r3
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	70fb      	strb	r3, [r7, #3]
 8009ff4:	460b      	mov	r3, r1
 8009ff6:	70bb      	strb	r3, [r7, #2]
 8009ff8:	4613      	mov	r3, r2
 8009ffa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a000:	2300      	movs	r3, #0
 800a002:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a00a:	78bb      	ldrb	r3, [r7, #2]
 800a00c:	883a      	ldrh	r2, [r7, #0]
 800a00e:	78f9      	ldrb	r1, [r7, #3]
 800a010:	f7f7 fe95 	bl	8001d3e <HAL_PCD_EP_Open>
 800a014:	4603      	mov	r3, r0
 800a016:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a018:	7bfb      	ldrb	r3, [r7, #15]
 800a01a:	4618      	mov	r0, r3
 800a01c:	f000 f91c 	bl	800a258 <USBD_Get_USB_Status>
 800a020:	4603      	mov	r3, r0
 800a022:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a024:	7bbb      	ldrb	r3, [r7, #14]
}
 800a026:	4618      	mov	r0, r3
 800a028:	3710      	adds	r7, #16
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}

0800a02e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a02e:	b580      	push	{r7, lr}
 800a030:	b084      	sub	sp, #16
 800a032:	af00      	add	r7, sp, #0
 800a034:	6078      	str	r0, [r7, #4]
 800a036:	460b      	mov	r3, r1
 800a038:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a03a:	2300      	movs	r3, #0
 800a03c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a03e:	2300      	movs	r3, #0
 800a040:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a048:	78fa      	ldrb	r2, [r7, #3]
 800a04a:	4611      	mov	r1, r2
 800a04c:	4618      	mov	r0, r3
 800a04e:	f7f7 fede 	bl	8001e0e <HAL_PCD_EP_Close>
 800a052:	4603      	mov	r3, r0
 800a054:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a056:	7bfb      	ldrb	r3, [r7, #15]
 800a058:	4618      	mov	r0, r3
 800a05a:	f000 f8fd 	bl	800a258 <USBD_Get_USB_Status>
 800a05e:	4603      	mov	r3, r0
 800a060:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a062:	7bbb      	ldrb	r3, [r7, #14]
}
 800a064:	4618      	mov	r0, r3
 800a066:	3710      	adds	r7, #16
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd80      	pop	{r7, pc}

0800a06c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b084      	sub	sp, #16
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
 800a074:	460b      	mov	r3, r1
 800a076:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a078:	2300      	movs	r3, #0
 800a07a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a07c:	2300      	movs	r3, #0
 800a07e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a086:	78fa      	ldrb	r2, [r7, #3]
 800a088:	4611      	mov	r1, r2
 800a08a:	4618      	mov	r0, r3
 800a08c:	f7f7 ffb6 	bl	8001ffc <HAL_PCD_EP_SetStall>
 800a090:	4603      	mov	r3, r0
 800a092:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a094:	7bfb      	ldrb	r3, [r7, #15]
 800a096:	4618      	mov	r0, r3
 800a098:	f000 f8de 	bl	800a258 <USBD_Get_USB_Status>
 800a09c:	4603      	mov	r3, r0
 800a09e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	3710      	adds	r7, #16
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}

0800a0aa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a0aa:	b580      	push	{r7, lr}
 800a0ac:	b084      	sub	sp, #16
 800a0ae:	af00      	add	r7, sp, #0
 800a0b0:	6078      	str	r0, [r7, #4]
 800a0b2:	460b      	mov	r3, r1
 800a0b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a0c4:	78fa      	ldrb	r2, [r7, #3]
 800a0c6:	4611      	mov	r1, r2
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	f7f7 fffb 	bl	80020c4 <HAL_PCD_EP_ClrStall>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0d2:	7bfb      	ldrb	r3, [r7, #15]
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	f000 f8bf 	bl	800a258 <USBD_Get_USB_Status>
 800a0da:	4603      	mov	r3, r0
 800a0dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0de:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	3710      	adds	r7, #16
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}

0800a0e8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b085      	sub	sp, #20
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
 800a0f0:	460b      	mov	r3, r1
 800a0f2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a0fa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a0fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a100:	2b00      	cmp	r3, #0
 800a102:	da0b      	bge.n	800a11c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a104:	78fb      	ldrb	r3, [r7, #3]
 800a106:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a10a:	68f9      	ldr	r1, [r7, #12]
 800a10c:	4613      	mov	r3, r2
 800a10e:	00db      	lsls	r3, r3, #3
 800a110:	4413      	add	r3, r2
 800a112:	009b      	lsls	r3, r3, #2
 800a114:	440b      	add	r3, r1
 800a116:	333e      	adds	r3, #62	; 0x3e
 800a118:	781b      	ldrb	r3, [r3, #0]
 800a11a:	e00b      	b.n	800a134 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a11c:	78fb      	ldrb	r3, [r7, #3]
 800a11e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a122:	68f9      	ldr	r1, [r7, #12]
 800a124:	4613      	mov	r3, r2
 800a126:	00db      	lsls	r3, r3, #3
 800a128:	4413      	add	r3, r2
 800a12a:	009b      	lsls	r3, r3, #2
 800a12c:	440b      	add	r3, r1
 800a12e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800a132:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a134:	4618      	mov	r0, r3
 800a136:	3714      	adds	r7, #20
 800a138:	46bd      	mov	sp, r7
 800a13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13e:	4770      	bx	lr

0800a140 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b084      	sub	sp, #16
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
 800a148:	460b      	mov	r3, r1
 800a14a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a14c:	2300      	movs	r3, #0
 800a14e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a150:	2300      	movs	r3, #0
 800a152:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a15a:	78fa      	ldrb	r2, [r7, #3]
 800a15c:	4611      	mov	r1, r2
 800a15e:	4618      	mov	r0, r3
 800a160:	f7f7 fdc8 	bl	8001cf4 <HAL_PCD_SetAddress>
 800a164:	4603      	mov	r3, r0
 800a166:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a168:	7bfb      	ldrb	r3, [r7, #15]
 800a16a:	4618      	mov	r0, r3
 800a16c:	f000 f874 	bl	800a258 <USBD_Get_USB_Status>
 800a170:	4603      	mov	r3, r0
 800a172:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a174:	7bbb      	ldrb	r3, [r7, #14]
}
 800a176:	4618      	mov	r0, r3
 800a178:	3710      	adds	r7, #16
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd80      	pop	{r7, pc}

0800a17e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a17e:	b580      	push	{r7, lr}
 800a180:	b086      	sub	sp, #24
 800a182:	af00      	add	r7, sp, #0
 800a184:	60f8      	str	r0, [r7, #12]
 800a186:	607a      	str	r2, [r7, #4]
 800a188:	603b      	str	r3, [r7, #0]
 800a18a:	460b      	mov	r3, r1
 800a18c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a18e:	2300      	movs	r3, #0
 800a190:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a192:	2300      	movs	r3, #0
 800a194:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a19c:	7af9      	ldrb	r1, [r7, #11]
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	687a      	ldr	r2, [r7, #4]
 800a1a2:	f7f7 fee1 	bl	8001f68 <HAL_PCD_EP_Transmit>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1aa:	7dfb      	ldrb	r3, [r7, #23]
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	f000 f853 	bl	800a258 <USBD_Get_USB_Status>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a1b6:	7dbb      	ldrb	r3, [r7, #22]
}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	3718      	adds	r7, #24
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bd80      	pop	{r7, pc}

0800a1c0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b086      	sub	sp, #24
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	60f8      	str	r0, [r7, #12]
 800a1c8:	607a      	str	r2, [r7, #4]
 800a1ca:	603b      	str	r3, [r7, #0]
 800a1cc:	460b      	mov	r3, r1
 800a1ce:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a1de:	7af9      	ldrb	r1, [r7, #11]
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	687a      	ldr	r2, [r7, #4]
 800a1e4:	f7f7 fe5d 	bl	8001ea2 <HAL_PCD_EP_Receive>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1ec:	7dfb      	ldrb	r3, [r7, #23]
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	f000 f832 	bl	800a258 <USBD_Get_USB_Status>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a1f8:	7dbb      	ldrb	r3, [r7, #22]
}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	3718      	adds	r7, #24
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}

0800a202 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a202:	b580      	push	{r7, lr}
 800a204:	b082      	sub	sp, #8
 800a206:	af00      	add	r7, sp, #0
 800a208:	6078      	str	r0, [r7, #4]
 800a20a:	460b      	mov	r3, r1
 800a20c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a214:	78fa      	ldrb	r2, [r7, #3]
 800a216:	4611      	mov	r1, r2
 800a218:	4618      	mov	r0, r3
 800a21a:	f7f7 fe8d 	bl	8001f38 <HAL_PCD_EP_GetRxCount>
 800a21e:	4603      	mov	r3, r0
}
 800a220:	4618      	mov	r0, r3
 800a222:	3708      	adds	r7, #8
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}

0800a228 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a228:	b480      	push	{r7}
 800a22a:	b083      	sub	sp, #12
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a230:	4b03      	ldr	r3, [pc, #12]	; (800a240 <USBD_static_malloc+0x18>)
}
 800a232:	4618      	mov	r0, r3
 800a234:	370c      	adds	r7, #12
 800a236:	46bd      	mov	sp, r7
 800a238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23c:	4770      	bx	lr
 800a23e:	bf00      	nop
 800a240:	200065dc 	.word	0x200065dc

0800a244 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a244:	b480      	push	{r7}
 800a246:	b083      	sub	sp, #12
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]

}
 800a24c:	bf00      	nop
 800a24e:	370c      	adds	r7, #12
 800a250:	46bd      	mov	sp, r7
 800a252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a256:	4770      	bx	lr

0800a258 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a258:	b480      	push	{r7}
 800a25a:	b085      	sub	sp, #20
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	4603      	mov	r3, r0
 800a260:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a262:	2300      	movs	r3, #0
 800a264:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a266:	79fb      	ldrb	r3, [r7, #7]
 800a268:	2b03      	cmp	r3, #3
 800a26a:	d817      	bhi.n	800a29c <USBD_Get_USB_Status+0x44>
 800a26c:	a201      	add	r2, pc, #4	; (adr r2, 800a274 <USBD_Get_USB_Status+0x1c>)
 800a26e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a272:	bf00      	nop
 800a274:	0800a285 	.word	0x0800a285
 800a278:	0800a28b 	.word	0x0800a28b
 800a27c:	0800a291 	.word	0x0800a291
 800a280:	0800a297 	.word	0x0800a297
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a284:	2300      	movs	r3, #0
 800a286:	73fb      	strb	r3, [r7, #15]
    break;
 800a288:	e00b      	b.n	800a2a2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a28a:	2303      	movs	r3, #3
 800a28c:	73fb      	strb	r3, [r7, #15]
    break;
 800a28e:	e008      	b.n	800a2a2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a290:	2301      	movs	r3, #1
 800a292:	73fb      	strb	r3, [r7, #15]
    break;
 800a294:	e005      	b.n	800a2a2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a296:	2303      	movs	r3, #3
 800a298:	73fb      	strb	r3, [r7, #15]
    break;
 800a29a:	e002      	b.n	800a2a2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a29c:	2303      	movs	r3, #3
 800a29e:	73fb      	strb	r3, [r7, #15]
    break;
 800a2a0:	bf00      	nop
  }
  return usb_status;
 800a2a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	3714      	adds	r7, #20
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ae:	4770      	bx	lr

0800a2b0 <_ZNSaIcEC1Ev>:
 800a2b0:	4770      	bx	lr

0800a2b2 <_ZNSaIcED1Ev>:
 800a2b2:	4770      	bx	lr

0800a2b4 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 800a2b4:	b10a      	cbz	r2, 800a2ba <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 800a2b6:	f000 b8e9 	b.w	800a48c <memcpy>
 800a2ba:	4770      	bx	lr

0800a2bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 800a2bc:	b508      	push	{r3, lr}
 800a2be:	680b      	ldr	r3, [r1, #0]
 800a2c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2c4:	d302      	bcc.n	800a2cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 800a2c6:	480d      	ldr	r0, [pc, #52]	; (800a2fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 800a2c8:	f000 f890 	bl	800a3ec <_ZSt20__throw_length_errorPKc>
 800a2cc:	4293      	cmp	r3, r2
 800a2ce:	d90b      	bls.n	800a2e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800a2d0:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 800a2d4:	ea4f 0042 	mov.w	r0, r2, lsl #1
 800a2d8:	d206      	bcs.n	800a2e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800a2da:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800a2de:	bf2a      	itet	cs
 800a2e0:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 800a2e4:	6008      	strcc	r0, [r1, #0]
 800a2e6:	600b      	strcs	r3, [r1, #0]
 800a2e8:	6808      	ldr	r0, [r1, #0]
 800a2ea:	3001      	adds	r0, #1
 800a2ec:	d501      	bpl.n	800a2f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 800a2ee:	f000 f877 	bl	800a3e0 <_ZSt17__throw_bad_allocv>
 800a2f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a2f6:	f000 b862 	b.w	800a3be <_Znwj>
 800a2fa:	bf00      	nop
 800a2fc:	0800a950 	.word	0x0800a950

0800a300 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 800a300:	f850 3b08 	ldr.w	r3, [r0], #8
 800a304:	4283      	cmp	r3, r0
 800a306:	d002      	beq.n	800a30e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 800a308:	4618      	mov	r0, r3
 800a30a:	f000 b856 	b.w	800a3ba <_ZdlPv>
 800a30e:	4770      	bx	lr

0800a310 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 800a310:	2a01      	cmp	r2, #1
 800a312:	b410      	push	{r4}
 800a314:	d104      	bne.n	800a320 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 800a316:	780a      	ldrb	r2, [r1, #0]
 800a318:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a31c:	7002      	strb	r2, [r0, #0]
 800a31e:	4770      	bx	lr
 800a320:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a324:	f7ff bfc6 	b.w	800a2b4 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

0800a328 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 800a328:	b508      	push	{r3, lr}
 800a32a:	1a52      	subs	r2, r2, r1
 800a32c:	f7ff fff0 	bl	800a310 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800a330:	bd08      	pop	{r3, pc}

0800a332 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 800a332:	b510      	push	{r4, lr}
 800a334:	4604      	mov	r4, r0
 800a336:	f7ff ffe3 	bl	800a300 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800a33a:	4620      	mov	r0, r4
 800a33c:	bd10      	pop	{r4, pc}

0800a33e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
 800a33e:	6840      	ldr	r0, [r0, #4]
 800a340:	4770      	bx	lr

0800a342 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 800a342:	6800      	ldr	r0, [r0, #0]
 800a344:	4770      	bx	lr
	...

0800a348 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 800a348:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a34a:	4604      	mov	r4, r0
 800a34c:	4616      	mov	r6, r2
 800a34e:	460d      	mov	r5, r1
 800a350:	b919      	cbnz	r1, 800a35a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800a352:	b112      	cbz	r2, 800a35a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800a354:	480d      	ldr	r0, [pc, #52]	; (800a38c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 800a356:	f000 f846 	bl	800a3e6 <_ZSt19__throw_logic_errorPKc>
 800a35a:	1b73      	subs	r3, r6, r5
 800a35c:	2b0f      	cmp	r3, #15
 800a35e:	9301      	str	r3, [sp, #4]
 800a360:	d907      	bls.n	800a372 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 800a362:	2200      	movs	r2, #0
 800a364:	a901      	add	r1, sp, #4
 800a366:	4620      	mov	r0, r4
 800a368:	f7ff ffa8 	bl	800a2bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800a36c:	9b01      	ldr	r3, [sp, #4]
 800a36e:	6020      	str	r0, [r4, #0]
 800a370:	60a3      	str	r3, [r4, #8]
 800a372:	4632      	mov	r2, r6
 800a374:	4629      	mov	r1, r5
 800a376:	6820      	ldr	r0, [r4, #0]
 800a378:	f7ff ffd6 	bl	800a328 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 800a37c:	9b01      	ldr	r3, [sp, #4]
 800a37e:	6822      	ldr	r2, [r4, #0]
 800a380:	6063      	str	r3, [r4, #4]
 800a382:	2100      	movs	r1, #0
 800a384:	54d1      	strb	r1, [r2, r3]
 800a386:	b002      	add	sp, #8
 800a388:	bd70      	pop	{r4, r5, r6, pc}
 800a38a:	bf00      	nop
 800a38c:	0800a968 	.word	0x0800a968

0800a390 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 800a390:	b538      	push	{r3, r4, r5, lr}
 800a392:	f100 0308 	add.w	r3, r0, #8
 800a396:	4604      	mov	r4, r0
 800a398:	6003      	str	r3, [r0, #0]
 800a39a:	460d      	mov	r5, r1
 800a39c:	b159      	cbz	r1, 800a3b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 800a39e:	4608      	mov	r0, r1
 800a3a0:	f7f5 ff16 	bl	80001d0 <strlen>
 800a3a4:	182a      	adds	r2, r5, r0
 800a3a6:	4620      	mov	r0, r4
 800a3a8:	f04f 0300 	mov.w	r3, #0
 800a3ac:	4629      	mov	r1, r5
 800a3ae:	f7ff ffcb 	bl	800a348 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 800a3b2:	4620      	mov	r0, r4
 800a3b4:	bd38      	pop	{r3, r4, r5, pc}
 800a3b6:	2201      	movs	r2, #1
 800a3b8:	e7f5      	b.n	800a3a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

0800a3ba <_ZdlPv>:
 800a3ba:	f000 b85f 	b.w	800a47c <free>

0800a3be <_Znwj>:
 800a3be:	2801      	cmp	r0, #1
 800a3c0:	bf38      	it	cc
 800a3c2:	2001      	movcc	r0, #1
 800a3c4:	b510      	push	{r4, lr}
 800a3c6:	4604      	mov	r4, r0
 800a3c8:	4620      	mov	r0, r4
 800a3ca:	f000 f84f 	bl	800a46c <malloc>
 800a3ce:	b930      	cbnz	r0, 800a3de <_Znwj+0x20>
 800a3d0:	f000 f810 	bl	800a3f4 <_ZSt15get_new_handlerv>
 800a3d4:	b908      	cbnz	r0, 800a3da <_Znwj+0x1c>
 800a3d6:	f000 f815 	bl	800a404 <abort>
 800a3da:	4780      	blx	r0
 800a3dc:	e7f4      	b.n	800a3c8 <_Znwj+0xa>
 800a3de:	bd10      	pop	{r4, pc}

0800a3e0 <_ZSt17__throw_bad_allocv>:
 800a3e0:	b508      	push	{r3, lr}
 800a3e2:	f000 f80f 	bl	800a404 <abort>

0800a3e6 <_ZSt19__throw_logic_errorPKc>:
 800a3e6:	b508      	push	{r3, lr}
 800a3e8:	f000 f80c 	bl	800a404 <abort>

0800a3ec <_ZSt20__throw_length_errorPKc>:
 800a3ec:	b508      	push	{r3, lr}
 800a3ee:	f000 f809 	bl	800a404 <abort>
	...

0800a3f4 <_ZSt15get_new_handlerv>:
 800a3f4:	4b02      	ldr	r3, [pc, #8]	; (800a400 <_ZSt15get_new_handlerv+0xc>)
 800a3f6:	6818      	ldr	r0, [r3, #0]
 800a3f8:	f3bf 8f5b 	dmb	ish
 800a3fc:	4770      	bx	lr
 800a3fe:	bf00      	nop
 800a400:	200067fc 	.word	0x200067fc

0800a404 <abort>:
 800a404:	b508      	push	{r3, lr}
 800a406:	2006      	movs	r0, #6
 800a408:	f000 f9d8 	bl	800a7bc <raise>
 800a40c:	2001      	movs	r0, #1
 800a40e:	f7f6 faef 	bl	80009f0 <_exit>
	...

0800a414 <__errno>:
 800a414:	4b01      	ldr	r3, [pc, #4]	; (800a41c <__errno+0x8>)
 800a416:	6818      	ldr	r0, [r3, #0]
 800a418:	4770      	bx	lr
 800a41a:	bf00      	nop
 800a41c:	20000100 	.word	0x20000100

0800a420 <__libc_init_array>:
 800a420:	b570      	push	{r4, r5, r6, lr}
 800a422:	4d0d      	ldr	r5, [pc, #52]	; (800a458 <__libc_init_array+0x38>)
 800a424:	4c0d      	ldr	r4, [pc, #52]	; (800a45c <__libc_init_array+0x3c>)
 800a426:	1b64      	subs	r4, r4, r5
 800a428:	10a4      	asrs	r4, r4, #2
 800a42a:	2600      	movs	r6, #0
 800a42c:	42a6      	cmp	r6, r4
 800a42e:	d109      	bne.n	800a444 <__libc_init_array+0x24>
 800a430:	4d0b      	ldr	r5, [pc, #44]	; (800a460 <__libc_init_array+0x40>)
 800a432:	4c0c      	ldr	r4, [pc, #48]	; (800a464 <__libc_init_array+0x44>)
 800a434:	f000 f9ea 	bl	800a80c <_init>
 800a438:	1b64      	subs	r4, r4, r5
 800a43a:	10a4      	asrs	r4, r4, #2
 800a43c:	2600      	movs	r6, #0
 800a43e:	42a6      	cmp	r6, r4
 800a440:	d105      	bne.n	800a44e <__libc_init_array+0x2e>
 800a442:	bd70      	pop	{r4, r5, r6, pc}
 800a444:	f855 3b04 	ldr.w	r3, [r5], #4
 800a448:	4798      	blx	r3
 800a44a:	3601      	adds	r6, #1
 800a44c:	e7ee      	b.n	800a42c <__libc_init_array+0xc>
 800a44e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a452:	4798      	blx	r3
 800a454:	3601      	adds	r6, #1
 800a456:	e7f2      	b.n	800a43e <__libc_init_array+0x1e>
 800a458:	0800a9fc 	.word	0x0800a9fc
 800a45c:	0800a9fc 	.word	0x0800a9fc
 800a460:	0800a9fc 	.word	0x0800a9fc
 800a464:	0800aa00 	.word	0x0800aa00

0800a468 <__retarget_lock_acquire_recursive>:
 800a468:	4770      	bx	lr

0800a46a <__retarget_lock_release_recursive>:
 800a46a:	4770      	bx	lr

0800a46c <malloc>:
 800a46c:	4b02      	ldr	r3, [pc, #8]	; (800a478 <malloc+0xc>)
 800a46e:	4601      	mov	r1, r0
 800a470:	6818      	ldr	r0, [r3, #0]
 800a472:	f000 b88d 	b.w	800a590 <_malloc_r>
 800a476:	bf00      	nop
 800a478:	20000100 	.word	0x20000100

0800a47c <free>:
 800a47c:	4b02      	ldr	r3, [pc, #8]	; (800a488 <free+0xc>)
 800a47e:	4601      	mov	r1, r0
 800a480:	6818      	ldr	r0, [r3, #0]
 800a482:	f000 b819 	b.w	800a4b8 <_free_r>
 800a486:	bf00      	nop
 800a488:	20000100 	.word	0x20000100

0800a48c <memcpy>:
 800a48c:	440a      	add	r2, r1
 800a48e:	4291      	cmp	r1, r2
 800a490:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a494:	d100      	bne.n	800a498 <memcpy+0xc>
 800a496:	4770      	bx	lr
 800a498:	b510      	push	{r4, lr}
 800a49a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a49e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a4a2:	4291      	cmp	r1, r2
 800a4a4:	d1f9      	bne.n	800a49a <memcpy+0xe>
 800a4a6:	bd10      	pop	{r4, pc}

0800a4a8 <memset>:
 800a4a8:	4402      	add	r2, r0
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	4293      	cmp	r3, r2
 800a4ae:	d100      	bne.n	800a4b2 <memset+0xa>
 800a4b0:	4770      	bx	lr
 800a4b2:	f803 1b01 	strb.w	r1, [r3], #1
 800a4b6:	e7f9      	b.n	800a4ac <memset+0x4>

0800a4b8 <_free_r>:
 800a4b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a4ba:	2900      	cmp	r1, #0
 800a4bc:	d044      	beq.n	800a548 <_free_r+0x90>
 800a4be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4c2:	9001      	str	r0, [sp, #4]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	f1a1 0404 	sub.w	r4, r1, #4
 800a4ca:	bfb8      	it	lt
 800a4cc:	18e4      	addlt	r4, r4, r3
 800a4ce:	f000 f991 	bl	800a7f4 <__malloc_lock>
 800a4d2:	4a1e      	ldr	r2, [pc, #120]	; (800a54c <_free_r+0x94>)
 800a4d4:	9801      	ldr	r0, [sp, #4]
 800a4d6:	6813      	ldr	r3, [r2, #0]
 800a4d8:	b933      	cbnz	r3, 800a4e8 <_free_r+0x30>
 800a4da:	6063      	str	r3, [r4, #4]
 800a4dc:	6014      	str	r4, [r2, #0]
 800a4de:	b003      	add	sp, #12
 800a4e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a4e4:	f000 b98c 	b.w	800a800 <__malloc_unlock>
 800a4e8:	42a3      	cmp	r3, r4
 800a4ea:	d908      	bls.n	800a4fe <_free_r+0x46>
 800a4ec:	6825      	ldr	r5, [r4, #0]
 800a4ee:	1961      	adds	r1, r4, r5
 800a4f0:	428b      	cmp	r3, r1
 800a4f2:	bf01      	itttt	eq
 800a4f4:	6819      	ldreq	r1, [r3, #0]
 800a4f6:	685b      	ldreq	r3, [r3, #4]
 800a4f8:	1949      	addeq	r1, r1, r5
 800a4fa:	6021      	streq	r1, [r4, #0]
 800a4fc:	e7ed      	b.n	800a4da <_free_r+0x22>
 800a4fe:	461a      	mov	r2, r3
 800a500:	685b      	ldr	r3, [r3, #4]
 800a502:	b10b      	cbz	r3, 800a508 <_free_r+0x50>
 800a504:	42a3      	cmp	r3, r4
 800a506:	d9fa      	bls.n	800a4fe <_free_r+0x46>
 800a508:	6811      	ldr	r1, [r2, #0]
 800a50a:	1855      	adds	r5, r2, r1
 800a50c:	42a5      	cmp	r5, r4
 800a50e:	d10b      	bne.n	800a528 <_free_r+0x70>
 800a510:	6824      	ldr	r4, [r4, #0]
 800a512:	4421      	add	r1, r4
 800a514:	1854      	adds	r4, r2, r1
 800a516:	42a3      	cmp	r3, r4
 800a518:	6011      	str	r1, [r2, #0]
 800a51a:	d1e0      	bne.n	800a4de <_free_r+0x26>
 800a51c:	681c      	ldr	r4, [r3, #0]
 800a51e:	685b      	ldr	r3, [r3, #4]
 800a520:	6053      	str	r3, [r2, #4]
 800a522:	4421      	add	r1, r4
 800a524:	6011      	str	r1, [r2, #0]
 800a526:	e7da      	b.n	800a4de <_free_r+0x26>
 800a528:	d902      	bls.n	800a530 <_free_r+0x78>
 800a52a:	230c      	movs	r3, #12
 800a52c:	6003      	str	r3, [r0, #0]
 800a52e:	e7d6      	b.n	800a4de <_free_r+0x26>
 800a530:	6825      	ldr	r5, [r4, #0]
 800a532:	1961      	adds	r1, r4, r5
 800a534:	428b      	cmp	r3, r1
 800a536:	bf04      	itt	eq
 800a538:	6819      	ldreq	r1, [r3, #0]
 800a53a:	685b      	ldreq	r3, [r3, #4]
 800a53c:	6063      	str	r3, [r4, #4]
 800a53e:	bf04      	itt	eq
 800a540:	1949      	addeq	r1, r1, r5
 800a542:	6021      	streq	r1, [r4, #0]
 800a544:	6054      	str	r4, [r2, #4]
 800a546:	e7ca      	b.n	800a4de <_free_r+0x26>
 800a548:	b003      	add	sp, #12
 800a54a:	bd30      	pop	{r4, r5, pc}
 800a54c:	20006804 	.word	0x20006804

0800a550 <sbrk_aligned>:
 800a550:	b570      	push	{r4, r5, r6, lr}
 800a552:	4e0e      	ldr	r6, [pc, #56]	; (800a58c <sbrk_aligned+0x3c>)
 800a554:	460c      	mov	r4, r1
 800a556:	6831      	ldr	r1, [r6, #0]
 800a558:	4605      	mov	r5, r0
 800a55a:	b911      	cbnz	r1, 800a562 <sbrk_aligned+0x12>
 800a55c:	f000 f8f6 	bl	800a74c <_sbrk_r>
 800a560:	6030      	str	r0, [r6, #0]
 800a562:	4621      	mov	r1, r4
 800a564:	4628      	mov	r0, r5
 800a566:	f000 f8f1 	bl	800a74c <_sbrk_r>
 800a56a:	1c43      	adds	r3, r0, #1
 800a56c:	d00a      	beq.n	800a584 <sbrk_aligned+0x34>
 800a56e:	1cc4      	adds	r4, r0, #3
 800a570:	f024 0403 	bic.w	r4, r4, #3
 800a574:	42a0      	cmp	r0, r4
 800a576:	d007      	beq.n	800a588 <sbrk_aligned+0x38>
 800a578:	1a21      	subs	r1, r4, r0
 800a57a:	4628      	mov	r0, r5
 800a57c:	f000 f8e6 	bl	800a74c <_sbrk_r>
 800a580:	3001      	adds	r0, #1
 800a582:	d101      	bne.n	800a588 <sbrk_aligned+0x38>
 800a584:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a588:	4620      	mov	r0, r4
 800a58a:	bd70      	pop	{r4, r5, r6, pc}
 800a58c:	20006808 	.word	0x20006808

0800a590 <_malloc_r>:
 800a590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a594:	1ccd      	adds	r5, r1, #3
 800a596:	f025 0503 	bic.w	r5, r5, #3
 800a59a:	3508      	adds	r5, #8
 800a59c:	2d0c      	cmp	r5, #12
 800a59e:	bf38      	it	cc
 800a5a0:	250c      	movcc	r5, #12
 800a5a2:	2d00      	cmp	r5, #0
 800a5a4:	4607      	mov	r7, r0
 800a5a6:	db01      	blt.n	800a5ac <_malloc_r+0x1c>
 800a5a8:	42a9      	cmp	r1, r5
 800a5aa:	d905      	bls.n	800a5b8 <_malloc_r+0x28>
 800a5ac:	230c      	movs	r3, #12
 800a5ae:	603b      	str	r3, [r7, #0]
 800a5b0:	2600      	movs	r6, #0
 800a5b2:	4630      	mov	r0, r6
 800a5b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5b8:	4e2e      	ldr	r6, [pc, #184]	; (800a674 <_malloc_r+0xe4>)
 800a5ba:	f000 f91b 	bl	800a7f4 <__malloc_lock>
 800a5be:	6833      	ldr	r3, [r6, #0]
 800a5c0:	461c      	mov	r4, r3
 800a5c2:	bb34      	cbnz	r4, 800a612 <_malloc_r+0x82>
 800a5c4:	4629      	mov	r1, r5
 800a5c6:	4638      	mov	r0, r7
 800a5c8:	f7ff ffc2 	bl	800a550 <sbrk_aligned>
 800a5cc:	1c43      	adds	r3, r0, #1
 800a5ce:	4604      	mov	r4, r0
 800a5d0:	d14d      	bne.n	800a66e <_malloc_r+0xde>
 800a5d2:	6834      	ldr	r4, [r6, #0]
 800a5d4:	4626      	mov	r6, r4
 800a5d6:	2e00      	cmp	r6, #0
 800a5d8:	d140      	bne.n	800a65c <_malloc_r+0xcc>
 800a5da:	6823      	ldr	r3, [r4, #0]
 800a5dc:	4631      	mov	r1, r6
 800a5de:	4638      	mov	r0, r7
 800a5e0:	eb04 0803 	add.w	r8, r4, r3
 800a5e4:	f000 f8b2 	bl	800a74c <_sbrk_r>
 800a5e8:	4580      	cmp	r8, r0
 800a5ea:	d13a      	bne.n	800a662 <_malloc_r+0xd2>
 800a5ec:	6821      	ldr	r1, [r4, #0]
 800a5ee:	3503      	adds	r5, #3
 800a5f0:	1a6d      	subs	r5, r5, r1
 800a5f2:	f025 0503 	bic.w	r5, r5, #3
 800a5f6:	3508      	adds	r5, #8
 800a5f8:	2d0c      	cmp	r5, #12
 800a5fa:	bf38      	it	cc
 800a5fc:	250c      	movcc	r5, #12
 800a5fe:	4629      	mov	r1, r5
 800a600:	4638      	mov	r0, r7
 800a602:	f7ff ffa5 	bl	800a550 <sbrk_aligned>
 800a606:	3001      	adds	r0, #1
 800a608:	d02b      	beq.n	800a662 <_malloc_r+0xd2>
 800a60a:	6823      	ldr	r3, [r4, #0]
 800a60c:	442b      	add	r3, r5
 800a60e:	6023      	str	r3, [r4, #0]
 800a610:	e00e      	b.n	800a630 <_malloc_r+0xa0>
 800a612:	6822      	ldr	r2, [r4, #0]
 800a614:	1b52      	subs	r2, r2, r5
 800a616:	d41e      	bmi.n	800a656 <_malloc_r+0xc6>
 800a618:	2a0b      	cmp	r2, #11
 800a61a:	d916      	bls.n	800a64a <_malloc_r+0xba>
 800a61c:	1961      	adds	r1, r4, r5
 800a61e:	42a3      	cmp	r3, r4
 800a620:	6025      	str	r5, [r4, #0]
 800a622:	bf18      	it	ne
 800a624:	6059      	strne	r1, [r3, #4]
 800a626:	6863      	ldr	r3, [r4, #4]
 800a628:	bf08      	it	eq
 800a62a:	6031      	streq	r1, [r6, #0]
 800a62c:	5162      	str	r2, [r4, r5]
 800a62e:	604b      	str	r3, [r1, #4]
 800a630:	4638      	mov	r0, r7
 800a632:	f104 060b 	add.w	r6, r4, #11
 800a636:	f000 f8e3 	bl	800a800 <__malloc_unlock>
 800a63a:	f026 0607 	bic.w	r6, r6, #7
 800a63e:	1d23      	adds	r3, r4, #4
 800a640:	1af2      	subs	r2, r6, r3
 800a642:	d0b6      	beq.n	800a5b2 <_malloc_r+0x22>
 800a644:	1b9b      	subs	r3, r3, r6
 800a646:	50a3      	str	r3, [r4, r2]
 800a648:	e7b3      	b.n	800a5b2 <_malloc_r+0x22>
 800a64a:	6862      	ldr	r2, [r4, #4]
 800a64c:	42a3      	cmp	r3, r4
 800a64e:	bf0c      	ite	eq
 800a650:	6032      	streq	r2, [r6, #0]
 800a652:	605a      	strne	r2, [r3, #4]
 800a654:	e7ec      	b.n	800a630 <_malloc_r+0xa0>
 800a656:	4623      	mov	r3, r4
 800a658:	6864      	ldr	r4, [r4, #4]
 800a65a:	e7b2      	b.n	800a5c2 <_malloc_r+0x32>
 800a65c:	4634      	mov	r4, r6
 800a65e:	6876      	ldr	r6, [r6, #4]
 800a660:	e7b9      	b.n	800a5d6 <_malloc_r+0x46>
 800a662:	230c      	movs	r3, #12
 800a664:	603b      	str	r3, [r7, #0]
 800a666:	4638      	mov	r0, r7
 800a668:	f000 f8ca 	bl	800a800 <__malloc_unlock>
 800a66c:	e7a1      	b.n	800a5b2 <_malloc_r+0x22>
 800a66e:	6025      	str	r5, [r4, #0]
 800a670:	e7de      	b.n	800a630 <_malloc_r+0xa0>
 800a672:	bf00      	nop
 800a674:	20006804 	.word	0x20006804

0800a678 <cleanup_glue>:
 800a678:	b538      	push	{r3, r4, r5, lr}
 800a67a:	460c      	mov	r4, r1
 800a67c:	6809      	ldr	r1, [r1, #0]
 800a67e:	4605      	mov	r5, r0
 800a680:	b109      	cbz	r1, 800a686 <cleanup_glue+0xe>
 800a682:	f7ff fff9 	bl	800a678 <cleanup_glue>
 800a686:	4621      	mov	r1, r4
 800a688:	4628      	mov	r0, r5
 800a68a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a68e:	f7ff bf13 	b.w	800a4b8 <_free_r>
	...

0800a694 <_reclaim_reent>:
 800a694:	4b2c      	ldr	r3, [pc, #176]	; (800a748 <_reclaim_reent+0xb4>)
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	4283      	cmp	r3, r0
 800a69a:	b570      	push	{r4, r5, r6, lr}
 800a69c:	4604      	mov	r4, r0
 800a69e:	d051      	beq.n	800a744 <_reclaim_reent+0xb0>
 800a6a0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a6a2:	b143      	cbz	r3, 800a6b6 <_reclaim_reent+0x22>
 800a6a4:	68db      	ldr	r3, [r3, #12]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d14a      	bne.n	800a740 <_reclaim_reent+0xac>
 800a6aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a6ac:	6819      	ldr	r1, [r3, #0]
 800a6ae:	b111      	cbz	r1, 800a6b6 <_reclaim_reent+0x22>
 800a6b0:	4620      	mov	r0, r4
 800a6b2:	f7ff ff01 	bl	800a4b8 <_free_r>
 800a6b6:	6961      	ldr	r1, [r4, #20]
 800a6b8:	b111      	cbz	r1, 800a6c0 <_reclaim_reent+0x2c>
 800a6ba:	4620      	mov	r0, r4
 800a6bc:	f7ff fefc 	bl	800a4b8 <_free_r>
 800a6c0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a6c2:	b111      	cbz	r1, 800a6ca <_reclaim_reent+0x36>
 800a6c4:	4620      	mov	r0, r4
 800a6c6:	f7ff fef7 	bl	800a4b8 <_free_r>
 800a6ca:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a6cc:	b111      	cbz	r1, 800a6d4 <_reclaim_reent+0x40>
 800a6ce:	4620      	mov	r0, r4
 800a6d0:	f7ff fef2 	bl	800a4b8 <_free_r>
 800a6d4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a6d6:	b111      	cbz	r1, 800a6de <_reclaim_reent+0x4a>
 800a6d8:	4620      	mov	r0, r4
 800a6da:	f7ff feed 	bl	800a4b8 <_free_r>
 800a6de:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a6e0:	b111      	cbz	r1, 800a6e8 <_reclaim_reent+0x54>
 800a6e2:	4620      	mov	r0, r4
 800a6e4:	f7ff fee8 	bl	800a4b8 <_free_r>
 800a6e8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a6ea:	b111      	cbz	r1, 800a6f2 <_reclaim_reent+0x5e>
 800a6ec:	4620      	mov	r0, r4
 800a6ee:	f7ff fee3 	bl	800a4b8 <_free_r>
 800a6f2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a6f4:	b111      	cbz	r1, 800a6fc <_reclaim_reent+0x68>
 800a6f6:	4620      	mov	r0, r4
 800a6f8:	f7ff fede 	bl	800a4b8 <_free_r>
 800a6fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a6fe:	b111      	cbz	r1, 800a706 <_reclaim_reent+0x72>
 800a700:	4620      	mov	r0, r4
 800a702:	f7ff fed9 	bl	800a4b8 <_free_r>
 800a706:	69a3      	ldr	r3, [r4, #24]
 800a708:	b1e3      	cbz	r3, 800a744 <_reclaim_reent+0xb0>
 800a70a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a70c:	4620      	mov	r0, r4
 800a70e:	4798      	blx	r3
 800a710:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a712:	b1b9      	cbz	r1, 800a744 <_reclaim_reent+0xb0>
 800a714:	4620      	mov	r0, r4
 800a716:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a71a:	f7ff bfad 	b.w	800a678 <cleanup_glue>
 800a71e:	5949      	ldr	r1, [r1, r5]
 800a720:	b941      	cbnz	r1, 800a734 <_reclaim_reent+0xa0>
 800a722:	3504      	adds	r5, #4
 800a724:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a726:	2d80      	cmp	r5, #128	; 0x80
 800a728:	68d9      	ldr	r1, [r3, #12]
 800a72a:	d1f8      	bne.n	800a71e <_reclaim_reent+0x8a>
 800a72c:	4620      	mov	r0, r4
 800a72e:	f7ff fec3 	bl	800a4b8 <_free_r>
 800a732:	e7ba      	b.n	800a6aa <_reclaim_reent+0x16>
 800a734:	680e      	ldr	r6, [r1, #0]
 800a736:	4620      	mov	r0, r4
 800a738:	f7ff febe 	bl	800a4b8 <_free_r>
 800a73c:	4631      	mov	r1, r6
 800a73e:	e7ef      	b.n	800a720 <_reclaim_reent+0x8c>
 800a740:	2500      	movs	r5, #0
 800a742:	e7ef      	b.n	800a724 <_reclaim_reent+0x90>
 800a744:	bd70      	pop	{r4, r5, r6, pc}
 800a746:	bf00      	nop
 800a748:	20000100 	.word	0x20000100

0800a74c <_sbrk_r>:
 800a74c:	b538      	push	{r3, r4, r5, lr}
 800a74e:	4d06      	ldr	r5, [pc, #24]	; (800a768 <_sbrk_r+0x1c>)
 800a750:	2300      	movs	r3, #0
 800a752:	4604      	mov	r4, r0
 800a754:	4608      	mov	r0, r1
 800a756:	602b      	str	r3, [r5, #0]
 800a758:	f7f6 f954 	bl	8000a04 <_sbrk>
 800a75c:	1c43      	adds	r3, r0, #1
 800a75e:	d102      	bne.n	800a766 <_sbrk_r+0x1a>
 800a760:	682b      	ldr	r3, [r5, #0]
 800a762:	b103      	cbz	r3, 800a766 <_sbrk_r+0x1a>
 800a764:	6023      	str	r3, [r4, #0]
 800a766:	bd38      	pop	{r3, r4, r5, pc}
 800a768:	2000680c 	.word	0x2000680c

0800a76c <_raise_r>:
 800a76c:	291f      	cmp	r1, #31
 800a76e:	b538      	push	{r3, r4, r5, lr}
 800a770:	4604      	mov	r4, r0
 800a772:	460d      	mov	r5, r1
 800a774:	d904      	bls.n	800a780 <_raise_r+0x14>
 800a776:	2316      	movs	r3, #22
 800a778:	6003      	str	r3, [r0, #0]
 800a77a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a77e:	bd38      	pop	{r3, r4, r5, pc}
 800a780:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a782:	b112      	cbz	r2, 800a78a <_raise_r+0x1e>
 800a784:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a788:	b94b      	cbnz	r3, 800a79e <_raise_r+0x32>
 800a78a:	4620      	mov	r0, r4
 800a78c:	f000 f830 	bl	800a7f0 <_getpid_r>
 800a790:	462a      	mov	r2, r5
 800a792:	4601      	mov	r1, r0
 800a794:	4620      	mov	r0, r4
 800a796:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a79a:	f000 b817 	b.w	800a7cc <_kill_r>
 800a79e:	2b01      	cmp	r3, #1
 800a7a0:	d00a      	beq.n	800a7b8 <_raise_r+0x4c>
 800a7a2:	1c59      	adds	r1, r3, #1
 800a7a4:	d103      	bne.n	800a7ae <_raise_r+0x42>
 800a7a6:	2316      	movs	r3, #22
 800a7a8:	6003      	str	r3, [r0, #0]
 800a7aa:	2001      	movs	r0, #1
 800a7ac:	e7e7      	b.n	800a77e <_raise_r+0x12>
 800a7ae:	2400      	movs	r4, #0
 800a7b0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a7b4:	4628      	mov	r0, r5
 800a7b6:	4798      	blx	r3
 800a7b8:	2000      	movs	r0, #0
 800a7ba:	e7e0      	b.n	800a77e <_raise_r+0x12>

0800a7bc <raise>:
 800a7bc:	4b02      	ldr	r3, [pc, #8]	; (800a7c8 <raise+0xc>)
 800a7be:	4601      	mov	r1, r0
 800a7c0:	6818      	ldr	r0, [r3, #0]
 800a7c2:	f7ff bfd3 	b.w	800a76c <_raise_r>
 800a7c6:	bf00      	nop
 800a7c8:	20000100 	.word	0x20000100

0800a7cc <_kill_r>:
 800a7cc:	b538      	push	{r3, r4, r5, lr}
 800a7ce:	4d07      	ldr	r5, [pc, #28]	; (800a7ec <_kill_r+0x20>)
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	4604      	mov	r4, r0
 800a7d4:	4608      	mov	r0, r1
 800a7d6:	4611      	mov	r1, r2
 800a7d8:	602b      	str	r3, [r5, #0]
 800a7da:	f7f6 f8f9 	bl	80009d0 <_kill>
 800a7de:	1c43      	adds	r3, r0, #1
 800a7e0:	d102      	bne.n	800a7e8 <_kill_r+0x1c>
 800a7e2:	682b      	ldr	r3, [r5, #0]
 800a7e4:	b103      	cbz	r3, 800a7e8 <_kill_r+0x1c>
 800a7e6:	6023      	str	r3, [r4, #0]
 800a7e8:	bd38      	pop	{r3, r4, r5, pc}
 800a7ea:	bf00      	nop
 800a7ec:	2000680c 	.word	0x2000680c

0800a7f0 <_getpid_r>:
 800a7f0:	f7f6 b8e6 	b.w	80009c0 <_getpid>

0800a7f4 <__malloc_lock>:
 800a7f4:	4801      	ldr	r0, [pc, #4]	; (800a7fc <__malloc_lock+0x8>)
 800a7f6:	f7ff be37 	b.w	800a468 <__retarget_lock_acquire_recursive>
 800a7fa:	bf00      	nop
 800a7fc:	20006800 	.word	0x20006800

0800a800 <__malloc_unlock>:
 800a800:	4801      	ldr	r0, [pc, #4]	; (800a808 <__malloc_unlock+0x8>)
 800a802:	f7ff be32 	b.w	800a46a <__retarget_lock_release_recursive>
 800a806:	bf00      	nop
 800a808:	20006800 	.word	0x20006800

0800a80c <_init>:
 800a80c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a80e:	bf00      	nop
 800a810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a812:	bc08      	pop	{r3}
 800a814:	469e      	mov	lr, r3
 800a816:	4770      	bx	lr

0800a818 <_fini>:
 800a818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a81a:	bf00      	nop
 800a81c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a81e:	bc08      	pop	{r3}
 800a820:	469e      	mov	lr, r3
 800a822:	4770      	bx	lr
