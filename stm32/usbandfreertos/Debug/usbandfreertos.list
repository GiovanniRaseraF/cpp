
usbandfreertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a734  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  0800a8c4  0800a8c4  0001a8c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa9c  0800aa9c  00020164  2**0
                  CONTENTS
  4 .ARM          00000008  0800aa9c  0800aa9c  0001aa9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aaa4  0800aaa4  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800aaa4  0800aaa4  0001aaa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aab0  0800aab0  0001aab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  0800aab4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020164  2**0
                  CONTENTS
 10 .bss          000066b4  20000164  20000164  00020164  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20006818  20006818  00020164  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002e81f  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000055a1  00000000  00000000  0004e9b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019f0  00000000  00000000  00053f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000017e8  00000000  00000000  00055948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000af02  00000000  00000000  00057130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f9b3  00000000  00000000  00062032  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db2c6  00000000  00000000  000819e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015ccab  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008474  00000000  00000000  0015ccfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000164 	.word	0x20000164
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a8ac 	.word	0x0800a8ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000168 	.word	0x20000168
 80001cc:	0800a8ac 	.word	0x0800a8ac

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e8:	f000 fb4c 	bl	8000b84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ec:	f000 f834 	bl	8000558 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f0:	f000 f8a8 	bl	8000644 <_ZL12MX_GPIO_Initv>
  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init();
 80004f4:	f009 fa12 	bl	800991c <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004f8:	f006 fc96 	bl	8006e28 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004fc:	4a0d      	ldr	r2, [pc, #52]	; (8000534 <main+0x50>)
 80004fe:	2100      	movs	r1, #0
 8000500:	480d      	ldr	r0, [pc, #52]	; (8000538 <main+0x54>)
 8000502:	f006 fcdb 	bl	8006ebc <osThreadNew>
 8000506:	4603      	mov	r3, r0
 8000508:	4a0c      	ldr	r2, [pc, #48]	; (800053c <main+0x58>)
 800050a:	6013      	str	r3, [r2, #0]

  /* creation of ledtoggle */
  ledtoggleHandle = osThreadNew(ledstatustoggle, NULL, &ledtoggle_attributes);
 800050c:	4a0c      	ldr	r2, [pc, #48]	; (8000540 <main+0x5c>)
 800050e:	2100      	movs	r1, #0
 8000510:	480c      	ldr	r0, [pc, #48]	; (8000544 <main+0x60>)
 8000512:	f006 fcd3 	bl	8006ebc <osThreadNew>
 8000516:	4603      	mov	r3, r0
 8000518:	4a0b      	ldr	r2, [pc, #44]	; (8000548 <main+0x64>)
 800051a:	6013      	str	r3, [r2, #0]

  /* creation of usbcomunication */
  usbcomunicationHandle = osThreadNew(usbcomunicationserial, NULL, &usbcomunication_attributes);
 800051c:	4a0b      	ldr	r2, [pc, #44]	; (800054c <main+0x68>)
 800051e:	2100      	movs	r1, #0
 8000520:	480b      	ldr	r0, [pc, #44]	; (8000550 <main+0x6c>)
 8000522:	f006 fccb 	bl	8006ebc <osThreadNew>
 8000526:	4603      	mov	r3, r0
 8000528:	4a0a      	ldr	r2, [pc, #40]	; (8000554 <main+0x70>)
 800052a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800052c:	f006 fca0 	bl	8006e70 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000530:	e7fe      	b.n	8000530 <main+0x4c>
 8000532:	bf00      	nop
 8000534:	0800a974 	.word	0x0800a974
 8000538:	080006e5 	.word	0x080006e5
 800053c:	20000184 	.word	0x20000184
 8000540:	0800a998 	.word	0x0800a998
 8000544:	080006f9 	.word	0x080006f9
 8000548:	20000188 	.word	0x20000188
 800054c:	0800a9bc 	.word	0x0800a9bc
 8000550:	0800075d 	.word	0x0800075d
 8000554:	2000018c 	.word	0x2000018c

08000558 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b094      	sub	sp, #80	; 0x50
 800055c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055e:	f107 0320 	add.w	r3, r7, #32
 8000562:	2230      	movs	r2, #48	; 0x30
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f009 ffee 	bl	800a548 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056c:	f107 030c 	add.w	r3, r7, #12
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
 800057a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800057c:	2300      	movs	r3, #0
 800057e:	60bb      	str	r3, [r7, #8]
 8000580:	4b2e      	ldr	r3, [pc, #184]	; (800063c <_Z18SystemClock_Configv+0xe4>)
 8000582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000584:	4a2d      	ldr	r2, [pc, #180]	; (800063c <_Z18SystemClock_Configv+0xe4>)
 8000586:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800058a:	6413      	str	r3, [r2, #64]	; 0x40
 800058c:	4b2b      	ldr	r3, [pc, #172]	; (800063c <_Z18SystemClock_Configv+0xe4>)
 800058e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000594:	60bb      	str	r3, [r7, #8]
 8000596:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000598:	2300      	movs	r3, #0
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	4b28      	ldr	r3, [pc, #160]	; (8000640 <_Z18SystemClock_Configv+0xe8>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a27      	ldr	r2, [pc, #156]	; (8000640 <_Z18SystemClock_Configv+0xe8>)
 80005a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005a6:	6013      	str	r3, [r2, #0]
 80005a8:	4b25      	ldr	r3, [pc, #148]	; (8000640 <_Z18SystemClock_Configv+0xe8>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005b0:	607b      	str	r3, [r7, #4]
 80005b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80005b4:	2303      	movs	r3, #3
 80005b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005be:	2301      	movs	r3, #1
 80005c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c2:	2310      	movs	r3, #16
 80005c4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c6:	2302      	movs	r3, #2
 80005c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005d0:	2304      	movs	r3, #4
 80005d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005d4:	2348      	movs	r3, #72	; 0x48
 80005d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005d8:	2302      	movs	r3, #2
 80005da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80005dc:	2303      	movs	r3, #3
 80005de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e0:	f107 0320 	add.w	r3, r7, #32
 80005e4:	4618      	mov	r0, r3
 80005e6:	f002 f861 	bl	80026ac <HAL_RCC_OscConfig>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	bf14      	ite	ne
 80005f0:	2301      	movne	r3, #1
 80005f2:	2300      	moveq	r3, #0
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 80005fa:	f000 f8ed 	bl	80007d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fe:	230f      	movs	r3, #15
 8000600:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000602:	2300      	movs	r3, #0
 8000604:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000606:	2300      	movs	r3, #0
 8000608:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800060a:	2300      	movs	r3, #0
 800060c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800060e:	2300      	movs	r3, #0
 8000610:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000612:	f107 030c 	add.w	r3, r7, #12
 8000616:	2100      	movs	r1, #0
 8000618:	4618      	mov	r0, r3
 800061a:	f002 fabf 	bl	8002b9c <HAL_RCC_ClockConfig>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	bf14      	ite	ne
 8000624:	2301      	movne	r3, #1
 8000626:	2300      	moveq	r3, #0
 8000628:	b2db      	uxtb	r3, r3
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 800062e:	f000 f8d3 	bl	80007d8 <Error_Handler>
  }
}
 8000632:	bf00      	nop
 8000634:	3750      	adds	r7, #80	; 0x50
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	40023800 	.word	0x40023800
 8000640:	40007000 	.word	0x40007000

08000644 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b088      	sub	sp, #32
 8000648:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064a:	f107 030c 	add.w	r3, r7, #12
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	605a      	str	r2, [r3, #4]
 8000654:	609a      	str	r2, [r3, #8]
 8000656:	60da      	str	r2, [r3, #12]
 8000658:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800065a:	2300      	movs	r3, #0
 800065c:	60bb      	str	r3, [r7, #8]
 800065e:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <_ZL12MX_GPIO_Initv+0x98>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	4a1e      	ldr	r2, [pc, #120]	; (80006dc <_ZL12MX_GPIO_Initv+0x98>)
 8000664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000668:	6313      	str	r3, [r2, #48]	; 0x30
 800066a:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <_ZL12MX_GPIO_Initv+0x98>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000672:	60bb      	str	r3, [r7, #8]
 8000674:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	4b18      	ldr	r3, [pc, #96]	; (80006dc <_ZL12MX_GPIO_Initv+0x98>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	4a17      	ldr	r2, [pc, #92]	; (80006dc <_ZL12MX_GPIO_Initv+0x98>)
 8000680:	f043 0301 	orr.w	r3, r3, #1
 8000684:	6313      	str	r3, [r2, #48]	; 0x30
 8000686:	4b15      	ldr	r3, [pc, #84]	; (80006dc <_ZL12MX_GPIO_Initv+0x98>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	f003 0301 	and.w	r3, r3, #1
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000692:	2300      	movs	r3, #0
 8000694:	603b      	str	r3, [r7, #0]
 8000696:	4b11      	ldr	r3, [pc, #68]	; (80006dc <_ZL12MX_GPIO_Initv+0x98>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	4a10      	ldr	r2, [pc, #64]	; (80006dc <_ZL12MX_GPIO_Initv+0x98>)
 800069c:	f043 0302 	orr.w	r3, r3, #2
 80006a0:	6313      	str	r3, [r2, #48]	; 0x30
 80006a2:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <_ZL12MX_GPIO_Initv+0x98>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	f003 0302 	and.w	r3, r3, #2
 80006aa:	603b      	str	r3, [r7, #0]
 80006ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 80006ae:	2200      	movs	r2, #0
 80006b0:	2120      	movs	r1, #32
 80006b2:	480b      	ldr	r0, [pc, #44]	; (80006e0 <_ZL12MX_GPIO_Initv+0x9c>)
 80006b4:	f000 fd4a 	bl	800114c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : led_Pin */
  GPIO_InitStruct.Pin = led_Pin;
 80006b8:	2320      	movs	r3, #32
 80006ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006bc:	2301      	movs	r3, #1
 80006be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c0:	2300      	movs	r3, #0
 80006c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c4:	2300      	movs	r3, #0
 80006c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 80006c8:	f107 030c 	add.w	r3, r7, #12
 80006cc:	4619      	mov	r1, r3
 80006ce:	4804      	ldr	r0, [pc, #16]	; (80006e0 <_ZL12MX_GPIO_Initv+0x9c>)
 80006d0:	f000 fba0 	bl	8000e14 <HAL_GPIO_Init>

}
 80006d4:	bf00      	nop
 80006d6:	3720      	adds	r7, #32
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	40023800 	.word	0x40023800
 80006e0:	40020400 	.word	0x40020400

080006e4 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80006ec:	f009 f916 	bl	800991c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80006f0:	2001      	movs	r0, #1
 80006f2:	f006 fc75 	bl	8006fe0 <osDelay>
 80006f6:	e7fb      	b.n	80006f0 <_Z16StartDefaultTaskPv+0xc>

080006f8 <_Z15ledstatustogglePv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ledstatustoggle */
void ledstatustoggle(void *argument)
{
 80006f8:	b590      	push	{r4, r7, lr}
 80006fa:	b08b      	sub	sp, #44	; 0x2c
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ledstatustoggle */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(led_GPIO_Port, led_Pin);
 8000700:	2120      	movs	r1, #32
 8000702:	4813      	ldr	r0, [pc, #76]	; (8000750 <_Z15ledstatustogglePv+0x58>)
 8000704:	f000 fd3b 	bl	800117e <HAL_GPIO_TogglePin>
	  Vesp::console.log("non lo so tu\n");
 8000708:	4b12      	ldr	r3, [pc, #72]	; (8000754 <_Z15ledstatustogglePv+0x5c>)
 800070a:	681c      	ldr	r4, [r3, #0]
 800070c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000710:	4618      	mov	r0, r3
 8000712:	f009 fe1d 	bl	800a350 <_ZNSaIcEC1Ev>
 8000716:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800071a:	f107 030c 	add.w	r3, r7, #12
 800071e:	490e      	ldr	r1, [pc, #56]	; (8000758 <_Z15ledstatustogglePv+0x60>)
 8000720:	4618      	mov	r0, r3
 8000722:	f009 fe85 	bl	800a430 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8000726:	f107 030c 	add.w	r3, r7, #12
 800072a:	4619      	mov	r1, r3
 800072c:	4620      	mov	r0, r4
 800072e:	f000 f885 	bl	800083c <_ZN7printer3logENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8000732:	f107 030c 	add.w	r3, r7, #12
 8000736:	4618      	mov	r0, r3
 8000738:	f009 fe4b 	bl	800a3d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800073c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000740:	4618      	mov	r0, r3
 8000742:	f009 fe06 	bl	800a352 <_ZNSaIcED1Ev>
	  osDelay(2000);
 8000746:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800074a:	f006 fc49 	bl	8006fe0 <osDelay>
	  HAL_GPIO_TogglePin(led_GPIO_Port, led_Pin);
 800074e:	e7d7      	b.n	8000700 <_Z15ledstatustogglePv+0x8>
 8000750:	40020400 	.word	0x40020400
 8000754:	20000180 	.word	0x20000180
 8000758:	0800a8fc 	.word	0x0800a8fc

0800075c <_Z21usbcomunicationserialPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_usbcomunicationserial */
void usbcomunicationserial(void *argument)
{
 800075c:	b590      	push	{r4, r7, lr}
 800075e:	b08b      	sub	sp, #44	; 0x2c
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN usbcomunicationserial */
  /* Infinite loop */
  for(;;)
  {

	Vesp::console.log("Ciao come stai ?\n");
 8000764:	4b11      	ldr	r3, [pc, #68]	; (80007ac <_Z21usbcomunicationserialPv+0x50>)
 8000766:	681c      	ldr	r4, [r3, #0]
 8000768:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800076c:	4618      	mov	r0, r3
 800076e:	f009 fdef 	bl	800a350 <_ZNSaIcEC1Ev>
 8000772:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000776:	f107 030c 	add.w	r3, r7, #12
 800077a:	490d      	ldr	r1, [pc, #52]	; (80007b0 <_Z21usbcomunicationserialPv+0x54>)
 800077c:	4618      	mov	r0, r3
 800077e:	f009 fe57 	bl	800a430 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8000782:	f107 030c 	add.w	r3, r7, #12
 8000786:	4619      	mov	r1, r3
 8000788:	4620      	mov	r0, r4
 800078a:	f000 f857 	bl	800083c <_ZN7printer3logENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800078e:	f107 030c 	add.w	r3, r7, #12
 8000792:	4618      	mov	r0, r3
 8000794:	f009 fe1d 	bl	800a3d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000798:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800079c:	4618      	mov	r0, r3
 800079e:	f009 fdd8 	bl	800a352 <_ZNSaIcED1Ev>
	osDelay(2000);
 80007a2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80007a6:	f006 fc1b 	bl	8006fe0 <osDelay>
	Vesp::console.log("Ciao come stai ?\n");
 80007aa:	e7db      	b.n	8000764 <_Z21usbcomunicationserialPv+0x8>
 80007ac:	20000180 	.word	0x20000180
 80007b0:	0800a90c 	.word	0x0800a90c

080007b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a04      	ldr	r2, [pc, #16]	; (80007d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d101      	bne.n	80007ca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007c6:	f000 f9ff 	bl	8000bc8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40001000 	.word	0x40001000

080007d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007dc:	b672      	cpsid	i
}
 80007de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e0:	e7fe      	b.n	80007e0 <Error_Handler+0x8>
	...

080007e4 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
 80007ec:	6039      	str	r1, [r7, #0]
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	d109      	bne.n	8000808 <_Z41__static_initialization_and_destruction_0ii+0x24>
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d104      	bne.n	8000808 <_Z41__static_initialization_and_destruction_0ii+0x24>

};

namespace Vesp{
	printer &getprinter();
	static printer& console = getprinter();
 80007fe:	f000 f833 	bl	8000868 <_ZN4Vesp10getprinterEv>
 8000802:	4603      	mov	r3, r0
 8000804:	4a02      	ldr	r2, [pc, #8]	; (8000810 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8000806:	6013      	str	r3, [r2, #0]
 8000808:	bf00      	nop
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	20000180 	.word	0x20000180

08000814 <_GLOBAL__sub_I_defaultTaskHandle>:
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
 8000818:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800081c:	2001      	movs	r0, #1
 800081e:	f7ff ffe1 	bl	80007e4 <_Z41__static_initialization_and_destruction_0ii>
 8000822:	bd80      	pop	{r7, pc}

08000824 <_ZN7printer13get_singletonEv>:
	static printer *get_singleton(void){
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
		return singleton;
 8000828:	4b03      	ldr	r3, [pc, #12]	; (8000838 <_ZN7printer13get_singletonEv+0x14>)
 800082a:	681b      	ldr	r3, [r3, #0]
	}
 800082c:	4618      	mov	r0, r3
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	20000190 	.word	0x20000190

0800083c <_ZN7printer3logENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
 *      Author: giovannirasera
 */

#include "printer.h"

void printer::log(std::string toprint){
 800083c:	b590      	push	{r4, r7, lr}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
 8000844:	6039      	str	r1, [r7, #0]
	CDC_Transmit_FS((uint8_t *)toprint.c_str(), toprint.length());
 8000846:	6838      	ldr	r0, [r7, #0]
 8000848:	f009 fdcb 	bl	800a3e2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800084c:	4604      	mov	r4, r0
 800084e:	6838      	ldr	r0, [r7, #0]
 8000850:	f009 fdc5 	bl	800a3de <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8000854:	4603      	mov	r3, r0
 8000856:	b29b      	uxth	r3, r3
 8000858:	4619      	mov	r1, r3
 800085a:	4620      	mov	r0, r4
 800085c:	f009 f91c 	bl	8009a98 <CDC_Transmit_FS>
}
 8000860:	bf00      	nop
 8000862:	370c      	adds	r7, #12
 8000864:	46bd      	mov	sp, r7
 8000866:	bd90      	pop	{r4, r7, pc}

08000868 <_ZN4Vesp10getprinterEv>:

namespace Vesp{
	printer &getprinter(){
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
		return *printer::get_singleton();
 800086c:	f7ff ffda 	bl	8000824 <_ZN7printer13get_singletonEv>
 8000870:	4603      	mov	r3, r0
	}
 8000872:	4618      	mov	r0, r3
 8000874:	bd80      	pop	{r7, pc}
	...

08000878 <_Z41__static_initialization_and_destruction_0ii>:
};
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	6039      	str	r1, [r7, #0]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	2b01      	cmp	r3, #1
 8000886:	d109      	bne.n	800089c <_Z41__static_initialization_and_destruction_0ii+0x24>
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800088e:	4293      	cmp	r3, r2
 8000890:	d104      	bne.n	800089c <_Z41__static_initialization_and_destruction_0ii+0x24>
	static printer& console = getprinter();
 8000892:	f7ff ffe9 	bl	8000868 <_ZN4Vesp10getprinterEv>
 8000896:	4603      	mov	r3, r0
 8000898:	4a02      	ldr	r2, [pc, #8]	; (80008a4 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 800089a:	6013      	str	r3, [r2, #0]
 800089c:	bf00      	nop
 800089e:	3708      	adds	r7, #8
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	20000194 	.word	0x20000194

080008a8 <_GLOBAL__sub_I__ZN7printer3logENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80008b0:	2001      	movs	r0, #1
 80008b2:	f7ff ffe1 	bl	8000878 <_Z41__static_initialization_and_destruction_0ii>
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	607b      	str	r3, [r7, #4]
 80008c2:	4b12      	ldr	r3, [pc, #72]	; (800090c <HAL_MspInit+0x54>)
 80008c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008c6:	4a11      	ldr	r2, [pc, #68]	; (800090c <HAL_MspInit+0x54>)
 80008c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008cc:	6453      	str	r3, [r2, #68]	; 0x44
 80008ce:	4b0f      	ldr	r3, [pc, #60]	; (800090c <HAL_MspInit+0x54>)
 80008d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	603b      	str	r3, [r7, #0]
 80008de:	4b0b      	ldr	r3, [pc, #44]	; (800090c <HAL_MspInit+0x54>)
 80008e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e2:	4a0a      	ldr	r2, [pc, #40]	; (800090c <HAL_MspInit+0x54>)
 80008e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008e8:	6413      	str	r3, [r2, #64]	; 0x40
 80008ea:	4b08      	ldr	r3, [pc, #32]	; (800090c <HAL_MspInit+0x54>)
 80008ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008f2:	603b      	str	r3, [r7, #0]
 80008f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008f6:	2200      	movs	r2, #0
 80008f8:	210f      	movs	r1, #15
 80008fa:	f06f 0001 	mvn.w	r0, #1
 80008fe:	f000 fa5f 	bl	8000dc0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40023800 	.word	0x40023800

08000910 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08e      	sub	sp, #56	; 0x38
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000918:	2300      	movs	r3, #0
 800091a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800091c:	2300      	movs	r3, #0
 800091e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000920:	2300      	movs	r3, #0
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	4b33      	ldr	r3, [pc, #204]	; (80009f4 <HAL_InitTick+0xe4>)
 8000926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000928:	4a32      	ldr	r2, [pc, #200]	; (80009f4 <HAL_InitTick+0xe4>)
 800092a:	f043 0310 	orr.w	r3, r3, #16
 800092e:	6413      	str	r3, [r2, #64]	; 0x40
 8000930:	4b30      	ldr	r3, [pc, #192]	; (80009f4 <HAL_InitTick+0xe4>)
 8000932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000934:	f003 0310 	and.w	r3, r3, #16
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800093c:	f107 0210 	add.w	r2, r7, #16
 8000940:	f107 0314 	add.w	r3, r7, #20
 8000944:	4611      	mov	r1, r2
 8000946:	4618      	mov	r0, r3
 8000948:	f002 fb34 	bl	8002fb4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800094c:	6a3b      	ldr	r3, [r7, #32]
 800094e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000952:	2b00      	cmp	r3, #0
 8000954:	d103      	bne.n	800095e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000956:	f002 fb19 	bl	8002f8c <HAL_RCC_GetPCLK1Freq>
 800095a:	6378      	str	r0, [r7, #52]	; 0x34
 800095c:	e004      	b.n	8000968 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800095e:	f002 fb15 	bl	8002f8c <HAL_RCC_GetPCLK1Freq>
 8000962:	4603      	mov	r3, r0
 8000964:	005b      	lsls	r3, r3, #1
 8000966:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800096a:	4a23      	ldr	r2, [pc, #140]	; (80009f8 <HAL_InitTick+0xe8>)
 800096c:	fba2 2303 	umull	r2, r3, r2, r3
 8000970:	0c9b      	lsrs	r3, r3, #18
 8000972:	3b01      	subs	r3, #1
 8000974:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000976:	4b21      	ldr	r3, [pc, #132]	; (80009fc <HAL_InitTick+0xec>)
 8000978:	4a21      	ldr	r2, [pc, #132]	; (8000a00 <HAL_InitTick+0xf0>)
 800097a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800097c:	4b1f      	ldr	r3, [pc, #124]	; (80009fc <HAL_InitTick+0xec>)
 800097e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000982:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000984:	4a1d      	ldr	r2, [pc, #116]	; (80009fc <HAL_InitTick+0xec>)
 8000986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000988:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800098a:	4b1c      	ldr	r3, [pc, #112]	; (80009fc <HAL_InitTick+0xec>)
 800098c:	2200      	movs	r2, #0
 800098e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000990:	4b1a      	ldr	r3, [pc, #104]	; (80009fc <HAL_InitTick+0xec>)
 8000992:	2200      	movs	r2, #0
 8000994:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000996:	4b19      	ldr	r3, [pc, #100]	; (80009fc <HAL_InitTick+0xec>)
 8000998:	2200      	movs	r2, #0
 800099a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800099c:	4817      	ldr	r0, [pc, #92]	; (80009fc <HAL_InitTick+0xec>)
 800099e:	f002 fb3b 	bl	8003018 <HAL_TIM_Base_Init>
 80009a2:	4603      	mov	r3, r0
 80009a4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80009a8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d11b      	bne.n	80009e8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80009b0:	4812      	ldr	r0, [pc, #72]	; (80009fc <HAL_InitTick+0xec>)
 80009b2:	f002 fb8b 	bl	80030cc <HAL_TIM_Base_Start_IT>
 80009b6:	4603      	mov	r3, r0
 80009b8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80009bc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d111      	bne.n	80009e8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80009c4:	2036      	movs	r0, #54	; 0x36
 80009c6:	f000 fa17 	bl	8000df8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	2b0f      	cmp	r3, #15
 80009ce:	d808      	bhi.n	80009e2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80009d0:	2200      	movs	r2, #0
 80009d2:	6879      	ldr	r1, [r7, #4]
 80009d4:	2036      	movs	r0, #54	; 0x36
 80009d6:	f000 f9f3 	bl	8000dc0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009da:	4a0a      	ldr	r2, [pc, #40]	; (8000a04 <HAL_InitTick+0xf4>)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	6013      	str	r3, [r2, #0]
 80009e0:	e002      	b.n	80009e8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80009e2:	2301      	movs	r3, #1
 80009e4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80009e8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	3738      	adds	r7, #56	; 0x38
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40023800 	.word	0x40023800
 80009f8:	431bde83 	.word	0x431bde83
 80009fc:	20000198 	.word	0x20000198
 8000a00:	40001000 	.word	0x40001000
 8000a04:	20000004 	.word	0x20000004

08000a08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <NMI_Handler+0x4>

08000a0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a12:	e7fe      	b.n	8000a12 <HardFault_Handler+0x4>

08000a14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <MemManage_Handler+0x4>

08000a1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a1e:	e7fe      	b.n	8000a1e <BusFault_Handler+0x4>

08000a20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <UsageFault_Handler+0x4>

08000a26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a26:	b480      	push	{r7}
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr

08000a34 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a38:	4802      	ldr	r0, [pc, #8]	; (8000a44 <TIM6_DAC_IRQHandler+0x10>)
 8000a3a:	f002 fbb7 	bl	80031ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20000198 	.word	0x20000198

08000a48 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000a4c:	4802      	ldr	r0, [pc, #8]	; (8000a58 <OTG_FS_IRQHandler+0x10>)
 8000a4e:	f000 fd00 	bl	8001452 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	200060d8 	.word	0x200060d8

08000a5c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
	return 1;
 8000a60:	2301      	movs	r3, #1
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <_kill>:

int _kill(int pid, int sig)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000a76:	f009 fd1d 	bl	800a4b4 <__errno>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2216      	movs	r2, #22
 8000a7e:	601a      	str	r2, [r3, #0]
	return -1;
 8000a80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <_exit>:

void _exit (int status)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000a94:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a98:	6878      	ldr	r0, [r7, #4]
 8000a9a:	f7ff ffe7 	bl	8000a6c <_kill>
	while (1) {}		/* Make sure we hang here */
 8000a9e:	e7fe      	b.n	8000a9e <_exit+0x12>

08000aa0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b086      	sub	sp, #24
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000aa8:	4a14      	ldr	r2, [pc, #80]	; (8000afc <_sbrk+0x5c>)
 8000aaa:	4b15      	ldr	r3, [pc, #84]	; (8000b00 <_sbrk+0x60>)
 8000aac:	1ad3      	subs	r3, r2, r3
 8000aae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ab4:	4b13      	ldr	r3, [pc, #76]	; (8000b04 <_sbrk+0x64>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d102      	bne.n	8000ac2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000abc:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <_sbrk+0x64>)
 8000abe:	4a12      	ldr	r2, [pc, #72]	; (8000b08 <_sbrk+0x68>)
 8000ac0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ac2:	4b10      	ldr	r3, [pc, #64]	; (8000b04 <_sbrk+0x64>)
 8000ac4:	681a      	ldr	r2, [r3, #0]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4413      	add	r3, r2
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	d207      	bcs.n	8000ae0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ad0:	f009 fcf0 	bl	800a4b4 <__errno>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	220c      	movs	r2, #12
 8000ad8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ada:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ade:	e009      	b.n	8000af4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ae0:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <_sbrk+0x64>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ae6:	4b07      	ldr	r3, [pc, #28]	; (8000b04 <_sbrk+0x64>)
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4413      	add	r3, r2
 8000aee:	4a05      	ldr	r2, [pc, #20]	; (8000b04 <_sbrk+0x64>)
 8000af0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000af2:	68fb      	ldr	r3, [r7, #12]
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	3718      	adds	r7, #24
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	20020000 	.word	0x20020000
 8000b00:	00000400 	.word	0x00000400
 8000b04:	200001e0 	.word	0x200001e0
 8000b08:	20006818 	.word	0x20006818

08000b0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b10:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <SystemInit+0x20>)
 8000b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b16:	4a05      	ldr	r2, [pc, #20]	; (8000b2c <SystemInit+0x20>)
 8000b18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	e000ed00 	.word	0xe000ed00

08000b30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b68 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b34:	480d      	ldr	r0, [pc, #52]	; (8000b6c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b36:	490e      	ldr	r1, [pc, #56]	; (8000b70 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b38:	4a0e      	ldr	r2, [pc, #56]	; (8000b74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b3c:	e002      	b.n	8000b44 <LoopCopyDataInit>

08000b3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b42:	3304      	adds	r3, #4

08000b44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b48:	d3f9      	bcc.n	8000b3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b4a:	4a0b      	ldr	r2, [pc, #44]	; (8000b78 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b4c:	4c0b      	ldr	r4, [pc, #44]	; (8000b7c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b50:	e001      	b.n	8000b56 <LoopFillZerobss>

08000b52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b54:	3204      	adds	r2, #4

08000b56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b58:	d3fb      	bcc.n	8000b52 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b5a:	f7ff ffd7 	bl	8000b0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b5e:	f009 fcaf 	bl	800a4c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b62:	f7ff fcbf 	bl	80004e4 <main>
  bx  lr    
 8000b66:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b70:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 8000b74:	0800aab4 	.word	0x0800aab4
  ldr r2, =_sbss
 8000b78:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 8000b7c:	20006818 	.word	0x20006818

08000b80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b80:	e7fe      	b.n	8000b80 <ADC_IRQHandler>
	...

08000b84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b88:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <HAL_Init+0x40>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a0d      	ldr	r2, [pc, #52]	; (8000bc4 <HAL_Init+0x40>)
 8000b8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b94:	4b0b      	ldr	r3, [pc, #44]	; (8000bc4 <HAL_Init+0x40>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a0a      	ldr	r2, [pc, #40]	; (8000bc4 <HAL_Init+0x40>)
 8000b9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ba0:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <HAL_Init+0x40>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a07      	ldr	r2, [pc, #28]	; (8000bc4 <HAL_Init+0x40>)
 8000ba6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000baa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bac:	2003      	movs	r0, #3
 8000bae:	f000 f8fc 	bl	8000daa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bb2:	200f      	movs	r0, #15
 8000bb4:	f7ff feac 	bl	8000910 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bb8:	f7ff fe7e 	bl	80008b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bbc:	2300      	movs	r3, #0
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40023c00 	.word	0x40023c00

08000bc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bcc:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <HAL_IncTick+0x20>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	4b06      	ldr	r3, [pc, #24]	; (8000bec <HAL_IncTick+0x24>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	4a04      	ldr	r2, [pc, #16]	; (8000bec <HAL_IncTick+0x24>)
 8000bda:	6013      	str	r3, [r2, #0]
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	20000008 	.word	0x20000008
 8000bec:	200001e4 	.word	0x200001e4

08000bf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bf4:	4b03      	ldr	r3, [pc, #12]	; (8000c04 <HAL_GetTick+0x14>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	200001e4 	.word	0x200001e4

08000c08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c10:	f7ff ffee 	bl	8000bf0 <HAL_GetTick>
 8000c14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c20:	d005      	beq.n	8000c2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c22:	4b0a      	ldr	r3, [pc, #40]	; (8000c4c <HAL_Delay+0x44>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	461a      	mov	r2, r3
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	4413      	add	r3, r2
 8000c2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c2e:	bf00      	nop
 8000c30:	f7ff ffde 	bl	8000bf0 <HAL_GetTick>
 8000c34:	4602      	mov	r2, r0
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	1ad3      	subs	r3, r2, r3
 8000c3a:	68fa      	ldr	r2, [r7, #12]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d8f7      	bhi.n	8000c30 <HAL_Delay+0x28>
  {
  }
}
 8000c40:	bf00      	nop
 8000c42:	bf00      	nop
 8000c44:	3710      	adds	r7, #16
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20000008 	.word	0x20000008

08000c50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	f003 0307 	and.w	r3, r3, #7
 8000c5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c60:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <__NVIC_SetPriorityGrouping+0x44>)
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c66:	68ba      	ldr	r2, [r7, #8]
 8000c68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c82:	4a04      	ldr	r2, [pc, #16]	; (8000c94 <__NVIC_SetPriorityGrouping+0x44>)
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	60d3      	str	r3, [r2, #12]
}
 8000c88:	bf00      	nop
 8000c8a:	3714      	adds	r7, #20
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c9c:	4b04      	ldr	r3, [pc, #16]	; (8000cb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	0a1b      	lsrs	r3, r3, #8
 8000ca2:	f003 0307 	and.w	r3, r3, #7
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	db0b      	blt.n	8000cde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	f003 021f 	and.w	r2, r3, #31
 8000ccc:	4907      	ldr	r1, [pc, #28]	; (8000cec <__NVIC_EnableIRQ+0x38>)
 8000cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd2:	095b      	lsrs	r3, r3, #5
 8000cd4:	2001      	movs	r0, #1
 8000cd6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cde:	bf00      	nop
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	e000e100 	.word	0xe000e100

08000cf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	6039      	str	r1, [r7, #0]
 8000cfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	db0a      	blt.n	8000d1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	b2da      	uxtb	r2, r3
 8000d08:	490c      	ldr	r1, [pc, #48]	; (8000d3c <__NVIC_SetPriority+0x4c>)
 8000d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0e:	0112      	lsls	r2, r2, #4
 8000d10:	b2d2      	uxtb	r2, r2
 8000d12:	440b      	add	r3, r1
 8000d14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d18:	e00a      	b.n	8000d30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	b2da      	uxtb	r2, r3
 8000d1e:	4908      	ldr	r1, [pc, #32]	; (8000d40 <__NVIC_SetPriority+0x50>)
 8000d20:	79fb      	ldrb	r3, [r7, #7]
 8000d22:	f003 030f 	and.w	r3, r3, #15
 8000d26:	3b04      	subs	r3, #4
 8000d28:	0112      	lsls	r2, r2, #4
 8000d2a:	b2d2      	uxtb	r2, r2
 8000d2c:	440b      	add	r3, r1
 8000d2e:	761a      	strb	r2, [r3, #24]
}
 8000d30:	bf00      	nop
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	e000e100 	.word	0xe000e100
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b089      	sub	sp, #36	; 0x24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	60f8      	str	r0, [r7, #12]
 8000d4c:	60b9      	str	r1, [r7, #8]
 8000d4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	f003 0307 	and.w	r3, r3, #7
 8000d56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	f1c3 0307 	rsb	r3, r3, #7
 8000d5e:	2b04      	cmp	r3, #4
 8000d60:	bf28      	it	cs
 8000d62:	2304      	movcs	r3, #4
 8000d64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	3304      	adds	r3, #4
 8000d6a:	2b06      	cmp	r3, #6
 8000d6c:	d902      	bls.n	8000d74 <NVIC_EncodePriority+0x30>
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	3b03      	subs	r3, #3
 8000d72:	e000      	b.n	8000d76 <NVIC_EncodePriority+0x32>
 8000d74:	2300      	movs	r3, #0
 8000d76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d7c:	69bb      	ldr	r3, [r7, #24]
 8000d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d82:	43da      	mvns	r2, r3
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	401a      	ands	r2, r3
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d8c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	fa01 f303 	lsl.w	r3, r1, r3
 8000d96:	43d9      	mvns	r1, r3
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d9c:	4313      	orrs	r3, r2
         );
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3724      	adds	r7, #36	; 0x24
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr

08000daa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b082      	sub	sp, #8
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f7ff ff4c 	bl	8000c50 <__NVIC_SetPriorityGrouping>
}
 8000db8:	bf00      	nop
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	607a      	str	r2, [r7, #4]
 8000dcc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dd2:	f7ff ff61 	bl	8000c98 <__NVIC_GetPriorityGrouping>
 8000dd6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dd8:	687a      	ldr	r2, [r7, #4]
 8000dda:	68b9      	ldr	r1, [r7, #8]
 8000ddc:	6978      	ldr	r0, [r7, #20]
 8000dde:	f7ff ffb1 	bl	8000d44 <NVIC_EncodePriority>
 8000de2:	4602      	mov	r2, r0
 8000de4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000de8:	4611      	mov	r1, r2
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff ff80 	bl	8000cf0 <__NVIC_SetPriority>
}
 8000df0:	bf00      	nop
 8000df2:	3718      	adds	r7, #24
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff ff54 	bl	8000cb4 <__NVIC_EnableIRQ>
}
 8000e0c:	bf00      	nop
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b089      	sub	sp, #36	; 0x24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e22:	2300      	movs	r3, #0
 8000e24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e26:	2300      	movs	r3, #0
 8000e28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61fb      	str	r3, [r7, #28]
 8000e2e:	e16b      	b.n	8001108 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e30:	2201      	movs	r2, #1
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	697a      	ldr	r2, [r7, #20]
 8000e40:	4013      	ands	r3, r2
 8000e42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e44:	693a      	ldr	r2, [r7, #16]
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	f040 815a 	bne.w	8001102 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	f003 0303 	and.w	r3, r3, #3
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d005      	beq.n	8000e66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e62:	2b02      	cmp	r3, #2
 8000e64:	d130      	bne.n	8000ec8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	689b      	ldr	r3, [r3, #8]
 8000e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	2203      	movs	r2, #3
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	43db      	mvns	r3, r3
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	68da      	ldr	r2, [r3, #12]
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	091b      	lsrs	r3, r3, #4
 8000eb2:	f003 0201 	and.w	r2, r3, #1
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f003 0303 	and.w	r3, r3, #3
 8000ed0:	2b03      	cmp	r3, #3
 8000ed2:	d017      	beq.n	8000f04 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	2203      	movs	r2, #3
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	689a      	ldr	r2, [r3, #8]
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f003 0303 	and.w	r3, r3, #3
 8000f0c:	2b02      	cmp	r3, #2
 8000f0e:	d123      	bne.n	8000f58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	08da      	lsrs	r2, r3, #3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	3208      	adds	r2, #8
 8000f18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	f003 0307 	and.w	r3, r3, #7
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	220f      	movs	r2, #15
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	4013      	ands	r3, r2
 8000f32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	691a      	ldr	r2, [r3, #16]
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	f003 0307 	and.w	r3, r3, #7
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	08da      	lsrs	r2, r3, #3
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	3208      	adds	r2, #8
 8000f52:	69b9      	ldr	r1, [r7, #24]
 8000f54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	2203      	movs	r2, #3
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f003 0203 	and.w	r2, r3, #3
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	f000 80b4 	beq.w	8001102 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60fb      	str	r3, [r7, #12]
 8000f9e:	4b60      	ldr	r3, [pc, #384]	; (8001120 <HAL_GPIO_Init+0x30c>)
 8000fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa2:	4a5f      	ldr	r2, [pc, #380]	; (8001120 <HAL_GPIO_Init+0x30c>)
 8000fa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fa8:	6453      	str	r3, [r2, #68]	; 0x44
 8000faa:	4b5d      	ldr	r3, [pc, #372]	; (8001120 <HAL_GPIO_Init+0x30c>)
 8000fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fb6:	4a5b      	ldr	r2, [pc, #364]	; (8001124 <HAL_GPIO_Init+0x310>)
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	089b      	lsrs	r3, r3, #2
 8000fbc:	3302      	adds	r3, #2
 8000fbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	f003 0303 	and.w	r3, r3, #3
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	220f      	movs	r2, #15
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a52      	ldr	r2, [pc, #328]	; (8001128 <HAL_GPIO_Init+0x314>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d02b      	beq.n	800103a <HAL_GPIO_Init+0x226>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a51      	ldr	r2, [pc, #324]	; (800112c <HAL_GPIO_Init+0x318>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d025      	beq.n	8001036 <HAL_GPIO_Init+0x222>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a50      	ldr	r2, [pc, #320]	; (8001130 <HAL_GPIO_Init+0x31c>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d01f      	beq.n	8001032 <HAL_GPIO_Init+0x21e>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a4f      	ldr	r2, [pc, #316]	; (8001134 <HAL_GPIO_Init+0x320>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d019      	beq.n	800102e <HAL_GPIO_Init+0x21a>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a4e      	ldr	r2, [pc, #312]	; (8001138 <HAL_GPIO_Init+0x324>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d013      	beq.n	800102a <HAL_GPIO_Init+0x216>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a4d      	ldr	r2, [pc, #308]	; (800113c <HAL_GPIO_Init+0x328>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d00d      	beq.n	8001026 <HAL_GPIO_Init+0x212>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a4c      	ldr	r2, [pc, #304]	; (8001140 <HAL_GPIO_Init+0x32c>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d007      	beq.n	8001022 <HAL_GPIO_Init+0x20e>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a4b      	ldr	r2, [pc, #300]	; (8001144 <HAL_GPIO_Init+0x330>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d101      	bne.n	800101e <HAL_GPIO_Init+0x20a>
 800101a:	2307      	movs	r3, #7
 800101c:	e00e      	b.n	800103c <HAL_GPIO_Init+0x228>
 800101e:	2308      	movs	r3, #8
 8001020:	e00c      	b.n	800103c <HAL_GPIO_Init+0x228>
 8001022:	2306      	movs	r3, #6
 8001024:	e00a      	b.n	800103c <HAL_GPIO_Init+0x228>
 8001026:	2305      	movs	r3, #5
 8001028:	e008      	b.n	800103c <HAL_GPIO_Init+0x228>
 800102a:	2304      	movs	r3, #4
 800102c:	e006      	b.n	800103c <HAL_GPIO_Init+0x228>
 800102e:	2303      	movs	r3, #3
 8001030:	e004      	b.n	800103c <HAL_GPIO_Init+0x228>
 8001032:	2302      	movs	r3, #2
 8001034:	e002      	b.n	800103c <HAL_GPIO_Init+0x228>
 8001036:	2301      	movs	r3, #1
 8001038:	e000      	b.n	800103c <HAL_GPIO_Init+0x228>
 800103a:	2300      	movs	r3, #0
 800103c:	69fa      	ldr	r2, [r7, #28]
 800103e:	f002 0203 	and.w	r2, r2, #3
 8001042:	0092      	lsls	r2, r2, #2
 8001044:	4093      	lsls	r3, r2
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	4313      	orrs	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800104c:	4935      	ldr	r1, [pc, #212]	; (8001124 <HAL_GPIO_Init+0x310>)
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	089b      	lsrs	r3, r3, #2
 8001052:	3302      	adds	r3, #2
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800105a:	4b3b      	ldr	r3, [pc, #236]	; (8001148 <HAL_GPIO_Init+0x334>)
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	43db      	mvns	r3, r3
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	4013      	ands	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d003      	beq.n	800107e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	4313      	orrs	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800107e:	4a32      	ldr	r2, [pc, #200]	; (8001148 <HAL_GPIO_Init+0x334>)
 8001080:	69bb      	ldr	r3, [r7, #24]
 8001082:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001084:	4b30      	ldr	r3, [pc, #192]	; (8001148 <HAL_GPIO_Init+0x334>)
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	43db      	mvns	r3, r3
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	4013      	ands	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800109c:	2b00      	cmp	r3, #0
 800109e:	d003      	beq.n	80010a8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010a8:	4a27      	ldr	r2, [pc, #156]	; (8001148 <HAL_GPIO_Init+0x334>)
 80010aa:	69bb      	ldr	r3, [r7, #24]
 80010ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010ae:	4b26      	ldr	r3, [pc, #152]	; (8001148 <HAL_GPIO_Init+0x334>)
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	43db      	mvns	r3, r3
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	4013      	ands	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d003      	beq.n	80010d2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010d2:	4a1d      	ldr	r2, [pc, #116]	; (8001148 <HAL_GPIO_Init+0x334>)
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010d8:	4b1b      	ldr	r3, [pc, #108]	; (8001148 <HAL_GPIO_Init+0x334>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	43db      	mvns	r3, r3
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	4013      	ands	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d003      	beq.n	80010fc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010fc:	4a12      	ldr	r2, [pc, #72]	; (8001148 <HAL_GPIO_Init+0x334>)
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	3301      	adds	r3, #1
 8001106:	61fb      	str	r3, [r7, #28]
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	2b0f      	cmp	r3, #15
 800110c:	f67f ae90 	bls.w	8000e30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001110:	bf00      	nop
 8001112:	bf00      	nop
 8001114:	3724      	adds	r7, #36	; 0x24
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	40023800 	.word	0x40023800
 8001124:	40013800 	.word	0x40013800
 8001128:	40020000 	.word	0x40020000
 800112c:	40020400 	.word	0x40020400
 8001130:	40020800 	.word	0x40020800
 8001134:	40020c00 	.word	0x40020c00
 8001138:	40021000 	.word	0x40021000
 800113c:	40021400 	.word	0x40021400
 8001140:	40021800 	.word	0x40021800
 8001144:	40021c00 	.word	0x40021c00
 8001148:	40013c00 	.word	0x40013c00

0800114c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	460b      	mov	r3, r1
 8001156:	807b      	strh	r3, [r7, #2]
 8001158:	4613      	mov	r3, r2
 800115a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800115c:	787b      	ldrb	r3, [r7, #1]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d003      	beq.n	800116a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001162:	887a      	ldrh	r2, [r7, #2]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001168:	e003      	b.n	8001172 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800116a:	887b      	ldrh	r3, [r7, #2]
 800116c:	041a      	lsls	r2, r3, #16
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	619a      	str	r2, [r3, #24]
}
 8001172:	bf00      	nop
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr

0800117e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800117e:	b480      	push	{r7}
 8001180:	b085      	sub	sp, #20
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
 8001186:	460b      	mov	r3, r1
 8001188:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	695b      	ldr	r3, [r3, #20]
 800118e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001190:	887a      	ldrh	r2, [r7, #2]
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	4013      	ands	r3, r2
 8001196:	041a      	lsls	r2, r3, #16
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	43d9      	mvns	r1, r3
 800119c:	887b      	ldrh	r3, [r7, #2]
 800119e:	400b      	ands	r3, r1
 80011a0:	431a      	orrs	r2, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	619a      	str	r2, [r3, #24]
}
 80011a6:	bf00      	nop
 80011a8:	3714      	adds	r7, #20
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80011b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011b4:	b08f      	sub	sp, #60	; 0x3c
 80011b6:	af0a      	add	r7, sp, #40	; 0x28
 80011b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d101      	bne.n	80011c4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80011c0:	2301      	movs	r3, #1
 80011c2:	e10f      	b.n	80013e4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d106      	bne.n	80011e4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2200      	movs	r2, #0
 80011da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f008 fda2 	bl	8009d28 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2203      	movs	r2, #3
 80011e8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d102      	bne.n	80011fe <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2200      	movs	r2, #0
 80011fc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4618      	mov	r0, r3
 8001204:	f002 facb 	bl	800379e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	603b      	str	r3, [r7, #0]
 800120e:	687e      	ldr	r6, [r7, #4]
 8001210:	466d      	mov	r5, sp
 8001212:	f106 0410 	add.w	r4, r6, #16
 8001216:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001218:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800121a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800121c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800121e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001222:	e885 0003 	stmia.w	r5, {r0, r1}
 8001226:	1d33      	adds	r3, r6, #4
 8001228:	cb0e      	ldmia	r3, {r1, r2, r3}
 800122a:	6838      	ldr	r0, [r7, #0]
 800122c:	f002 f9a2 	bl	8003574 <USB_CoreInit>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d005      	beq.n	8001242 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2202      	movs	r2, #2
 800123a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e0d0      	b.n	80013e4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2100      	movs	r1, #0
 8001248:	4618      	mov	r0, r3
 800124a:	f002 fab9 	bl	80037c0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800124e:	2300      	movs	r3, #0
 8001250:	73fb      	strb	r3, [r7, #15]
 8001252:	e04a      	b.n	80012ea <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001254:	7bfa      	ldrb	r2, [r7, #15]
 8001256:	6879      	ldr	r1, [r7, #4]
 8001258:	4613      	mov	r3, r2
 800125a:	00db      	lsls	r3, r3, #3
 800125c:	4413      	add	r3, r2
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	440b      	add	r3, r1
 8001262:	333d      	adds	r3, #61	; 0x3d
 8001264:	2201      	movs	r2, #1
 8001266:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001268:	7bfa      	ldrb	r2, [r7, #15]
 800126a:	6879      	ldr	r1, [r7, #4]
 800126c:	4613      	mov	r3, r2
 800126e:	00db      	lsls	r3, r3, #3
 8001270:	4413      	add	r3, r2
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	440b      	add	r3, r1
 8001276:	333c      	adds	r3, #60	; 0x3c
 8001278:	7bfa      	ldrb	r2, [r7, #15]
 800127a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800127c:	7bfa      	ldrb	r2, [r7, #15]
 800127e:	7bfb      	ldrb	r3, [r7, #15]
 8001280:	b298      	uxth	r0, r3
 8001282:	6879      	ldr	r1, [r7, #4]
 8001284:	4613      	mov	r3, r2
 8001286:	00db      	lsls	r3, r3, #3
 8001288:	4413      	add	r3, r2
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	440b      	add	r3, r1
 800128e:	3344      	adds	r3, #68	; 0x44
 8001290:	4602      	mov	r2, r0
 8001292:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001294:	7bfa      	ldrb	r2, [r7, #15]
 8001296:	6879      	ldr	r1, [r7, #4]
 8001298:	4613      	mov	r3, r2
 800129a:	00db      	lsls	r3, r3, #3
 800129c:	4413      	add	r3, r2
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	440b      	add	r3, r1
 80012a2:	3340      	adds	r3, #64	; 0x40
 80012a4:	2200      	movs	r2, #0
 80012a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80012a8:	7bfa      	ldrb	r2, [r7, #15]
 80012aa:	6879      	ldr	r1, [r7, #4]
 80012ac:	4613      	mov	r3, r2
 80012ae:	00db      	lsls	r3, r3, #3
 80012b0:	4413      	add	r3, r2
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	440b      	add	r3, r1
 80012b6:	3348      	adds	r3, #72	; 0x48
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80012bc:	7bfa      	ldrb	r2, [r7, #15]
 80012be:	6879      	ldr	r1, [r7, #4]
 80012c0:	4613      	mov	r3, r2
 80012c2:	00db      	lsls	r3, r3, #3
 80012c4:	4413      	add	r3, r2
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	440b      	add	r3, r1
 80012ca:	334c      	adds	r3, #76	; 0x4c
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80012d0:	7bfa      	ldrb	r2, [r7, #15]
 80012d2:	6879      	ldr	r1, [r7, #4]
 80012d4:	4613      	mov	r3, r2
 80012d6:	00db      	lsls	r3, r3, #3
 80012d8:	4413      	add	r3, r2
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	440b      	add	r3, r1
 80012de:	3354      	adds	r3, #84	; 0x54
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012e4:	7bfb      	ldrb	r3, [r7, #15]
 80012e6:	3301      	adds	r3, #1
 80012e8:	73fb      	strb	r3, [r7, #15]
 80012ea:	7bfa      	ldrb	r2, [r7, #15]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d3af      	bcc.n	8001254 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012f4:	2300      	movs	r3, #0
 80012f6:	73fb      	strb	r3, [r7, #15]
 80012f8:	e044      	b.n	8001384 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80012fa:	7bfa      	ldrb	r2, [r7, #15]
 80012fc:	6879      	ldr	r1, [r7, #4]
 80012fe:	4613      	mov	r3, r2
 8001300:	00db      	lsls	r3, r3, #3
 8001302:	4413      	add	r3, r2
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	440b      	add	r3, r1
 8001308:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800130c:	2200      	movs	r2, #0
 800130e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001310:	7bfa      	ldrb	r2, [r7, #15]
 8001312:	6879      	ldr	r1, [r7, #4]
 8001314:	4613      	mov	r3, r2
 8001316:	00db      	lsls	r3, r3, #3
 8001318:	4413      	add	r3, r2
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	440b      	add	r3, r1
 800131e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001322:	7bfa      	ldrb	r2, [r7, #15]
 8001324:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001326:	7bfa      	ldrb	r2, [r7, #15]
 8001328:	6879      	ldr	r1, [r7, #4]
 800132a:	4613      	mov	r3, r2
 800132c:	00db      	lsls	r3, r3, #3
 800132e:	4413      	add	r3, r2
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	440b      	add	r3, r1
 8001334:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001338:	2200      	movs	r2, #0
 800133a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800133c:	7bfa      	ldrb	r2, [r7, #15]
 800133e:	6879      	ldr	r1, [r7, #4]
 8001340:	4613      	mov	r3, r2
 8001342:	00db      	lsls	r3, r3, #3
 8001344:	4413      	add	r3, r2
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	440b      	add	r3, r1
 800134a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001352:	7bfa      	ldrb	r2, [r7, #15]
 8001354:	6879      	ldr	r1, [r7, #4]
 8001356:	4613      	mov	r3, r2
 8001358:	00db      	lsls	r3, r3, #3
 800135a:	4413      	add	r3, r2
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	440b      	add	r3, r1
 8001360:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001368:	7bfa      	ldrb	r2, [r7, #15]
 800136a:	6879      	ldr	r1, [r7, #4]
 800136c:	4613      	mov	r3, r2
 800136e:	00db      	lsls	r3, r3, #3
 8001370:	4413      	add	r3, r2
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	440b      	add	r3, r1
 8001376:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800137e:	7bfb      	ldrb	r3, [r7, #15]
 8001380:	3301      	adds	r3, #1
 8001382:	73fb      	strb	r3, [r7, #15]
 8001384:	7bfa      	ldrb	r2, [r7, #15]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	429a      	cmp	r2, r3
 800138c:	d3b5      	bcc.n	80012fa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	603b      	str	r3, [r7, #0]
 8001394:	687e      	ldr	r6, [r7, #4]
 8001396:	466d      	mov	r5, sp
 8001398:	f106 0410 	add.w	r4, r6, #16
 800139c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800139e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013a4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80013a8:	e885 0003 	stmia.w	r5, {r0, r1}
 80013ac:	1d33      	adds	r3, r6, #4
 80013ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013b0:	6838      	ldr	r0, [r7, #0]
 80013b2:	f002 fa51 	bl	8003858 <USB_DevInit>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d005      	beq.n	80013c8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2202      	movs	r2, #2
 80013c0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	e00d      	b.n	80013e4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2200      	movs	r2, #0
 80013cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2201      	movs	r2, #1
 80013d4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4618      	mov	r0, r3
 80013de:	f003 fba0 	bl	8004b22 <USB_DevDisconnect>

  return HAL_OK;
 80013e2:	2300      	movs	r3, #0
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3714      	adds	r7, #20
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080013ec <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001400:	2b01      	cmp	r3, #1
 8001402:	d101      	bne.n	8001408 <HAL_PCD_Start+0x1c>
 8001404:	2302      	movs	r3, #2
 8001406:	e020      	b.n	800144a <HAL_PCD_Start+0x5e>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2201      	movs	r2, #1
 800140c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001414:	2b01      	cmp	r3, #1
 8001416:	d109      	bne.n	800142c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800141c:	2b01      	cmp	r3, #1
 800141e:	d005      	beq.n	800142c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001424:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4618      	mov	r0, r3
 8001432:	f002 f9a3 	bl	800377c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4618      	mov	r0, r3
 800143c:	f003 fb50 	bl	8004ae0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2200      	movs	r2, #0
 8001444:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001448:	2300      	movs	r3, #0
}
 800144a:	4618      	mov	r0, r3
 800144c:	3710      	adds	r7, #16
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001452:	b590      	push	{r4, r7, lr}
 8001454:	b08d      	sub	sp, #52	; 0x34
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001460:	6a3b      	ldr	r3, [r7, #32]
 8001462:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4618      	mov	r0, r3
 800146a:	f003 fc0e 	bl	8004c8a <USB_GetMode>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	f040 848a 	bne.w	8001d8a <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4618      	mov	r0, r3
 800147c:	f003 fb72 	bl	8004b64 <USB_ReadInterrupts>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	f000 8480 	beq.w	8001d88 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	0a1b      	lsrs	r3, r3, #8
 8001492:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f003 fb5f 	bl	8004b64 <USB_ReadInterrupts>
 80014a6:	4603      	mov	r3, r0
 80014a8:	f003 0302 	and.w	r3, r3, #2
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d107      	bne.n	80014c0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	695a      	ldr	r2, [r3, #20]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f002 0202 	and.w	r2, r2, #2
 80014be:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f003 fb4d 	bl	8004b64 <USB_ReadInterrupts>
 80014ca:	4603      	mov	r3, r0
 80014cc:	f003 0310 	and.w	r3, r3, #16
 80014d0:	2b10      	cmp	r3, #16
 80014d2:	d161      	bne.n	8001598 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	699a      	ldr	r2, [r3, #24]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f022 0210 	bic.w	r2, r2, #16
 80014e2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80014e4:	6a3b      	ldr	r3, [r7, #32]
 80014e6:	6a1b      	ldr	r3, [r3, #32]
 80014e8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	f003 020f 	and.w	r2, r3, #15
 80014f0:	4613      	mov	r3, r2
 80014f2:	00db      	lsls	r3, r3, #3
 80014f4:	4413      	add	r3, r2
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	4413      	add	r3, r2
 8001500:	3304      	adds	r3, #4
 8001502:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	0c5b      	lsrs	r3, r3, #17
 8001508:	f003 030f 	and.w	r3, r3, #15
 800150c:	2b02      	cmp	r3, #2
 800150e:	d124      	bne.n	800155a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001516:	4013      	ands	r3, r2
 8001518:	2b00      	cmp	r3, #0
 800151a:	d035      	beq.n	8001588 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	091b      	lsrs	r3, r3, #4
 8001524:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001526:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800152a:	b29b      	uxth	r3, r3
 800152c:	461a      	mov	r2, r3
 800152e:	6a38      	ldr	r0, [r7, #32]
 8001530:	f003 f984 	bl	800483c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	691a      	ldr	r2, [r3, #16]
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	091b      	lsrs	r3, r3, #4
 800153c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001540:	441a      	add	r2, r3
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	6a1a      	ldr	r2, [r3, #32]
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	091b      	lsrs	r3, r3, #4
 800154e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001552:	441a      	add	r2, r3
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	621a      	str	r2, [r3, #32]
 8001558:	e016      	b.n	8001588 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800155a:	69bb      	ldr	r3, [r7, #24]
 800155c:	0c5b      	lsrs	r3, r3, #17
 800155e:	f003 030f 	and.w	r3, r3, #15
 8001562:	2b06      	cmp	r3, #6
 8001564:	d110      	bne.n	8001588 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800156c:	2208      	movs	r2, #8
 800156e:	4619      	mov	r1, r3
 8001570:	6a38      	ldr	r0, [r7, #32]
 8001572:	f003 f963 	bl	800483c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	6a1a      	ldr	r2, [r3, #32]
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	091b      	lsrs	r3, r3, #4
 800157e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001582:	441a      	add	r2, r3
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	699a      	ldr	r2, [r3, #24]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f042 0210 	orr.w	r2, r2, #16
 8001596:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4618      	mov	r0, r3
 800159e:	f003 fae1 	bl	8004b64 <USB_ReadInterrupts>
 80015a2:	4603      	mov	r3, r0
 80015a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015a8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80015ac:	f040 80a7 	bne.w	80016fe <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80015b0:	2300      	movs	r3, #0
 80015b2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f003 fae6 	bl	8004b8a <USB_ReadDevAllOutEpInterrupt>
 80015be:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80015c0:	e099      	b.n	80016f6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80015c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015c4:	f003 0301 	and.w	r3, r3, #1
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	f000 808e 	beq.w	80016ea <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015d4:	b2d2      	uxtb	r2, r2
 80015d6:	4611      	mov	r1, r2
 80015d8:	4618      	mov	r0, r3
 80015da:	f003 fb0a 	bl	8004bf2 <USB_ReadDevOutEPInterrupt>
 80015de:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d00c      	beq.n	8001604 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80015ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ec:	015a      	lsls	r2, r3, #5
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	4413      	add	r3, r2
 80015f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015f6:	461a      	mov	r2, r3
 80015f8:	2301      	movs	r3, #1
 80015fa:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80015fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f000 fec2 	bl	8002388 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	f003 0308 	and.w	r3, r3, #8
 800160a:	2b00      	cmp	r3, #0
 800160c:	d00c      	beq.n	8001628 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800160e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001610:	015a      	lsls	r2, r3, #5
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	4413      	add	r3, r2
 8001616:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800161a:	461a      	mov	r2, r3
 800161c:	2308      	movs	r3, #8
 800161e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001620:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f000 ff98 	bl	8002558 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	f003 0310 	and.w	r3, r3, #16
 800162e:	2b00      	cmp	r3, #0
 8001630:	d008      	beq.n	8001644 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001634:	015a      	lsls	r2, r3, #5
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	4413      	add	r3, r2
 800163a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800163e:	461a      	mov	r2, r3
 8001640:	2310      	movs	r3, #16
 8001642:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	2b00      	cmp	r3, #0
 800164c:	d030      	beq.n	80016b0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800164e:	6a3b      	ldr	r3, [r7, #32]
 8001650:	695b      	ldr	r3, [r3, #20]
 8001652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001656:	2b80      	cmp	r3, #128	; 0x80
 8001658:	d109      	bne.n	800166e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	69fa      	ldr	r2, [r7, #28]
 8001664:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001668:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800166c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800166e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001670:	4613      	mov	r3, r2
 8001672:	00db      	lsls	r3, r3, #3
 8001674:	4413      	add	r3, r2
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	4413      	add	r3, r2
 8001680:	3304      	adds	r3, #4
 8001682:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	78db      	ldrb	r3, [r3, #3]
 8001688:	2b01      	cmp	r3, #1
 800168a:	d108      	bne.n	800169e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	2200      	movs	r2, #0
 8001690:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001694:	b2db      	uxtb	r3, r3
 8001696:	4619      	mov	r1, r3
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f008 fc4b 	bl	8009f34 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800169e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a0:	015a      	lsls	r2, r3, #5
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	4413      	add	r3, r2
 80016a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016aa:	461a      	mov	r2, r3
 80016ac:	2302      	movs	r3, #2
 80016ae:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	f003 0320 	and.w	r3, r3, #32
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d008      	beq.n	80016cc <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80016ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016bc:	015a      	lsls	r2, r3, #5
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	4413      	add	r3, r2
 80016c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016c6:	461a      	mov	r2, r3
 80016c8:	2320      	movs	r3, #32
 80016ca:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d009      	beq.n	80016ea <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80016d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d8:	015a      	lsls	r2, r3, #5
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	4413      	add	r3, r2
 80016de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016e2:	461a      	mov	r2, r3
 80016e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016e8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80016ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ec:	3301      	adds	r3, #1
 80016ee:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80016f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016f2:	085b      	lsrs	r3, r3, #1
 80016f4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80016f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	f47f af62 	bne.w	80015c2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4618      	mov	r0, r3
 8001704:	f003 fa2e 	bl	8004b64 <USB_ReadInterrupts>
 8001708:	4603      	mov	r3, r0
 800170a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800170e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001712:	f040 80db 	bne.w	80018cc <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4618      	mov	r0, r3
 800171c:	f003 fa4f 	bl	8004bbe <USB_ReadDevAllInEpInterrupt>
 8001720:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001722:	2300      	movs	r3, #0
 8001724:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001726:	e0cd      	b.n	80018c4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	2b00      	cmp	r3, #0
 8001730:	f000 80c2 	beq.w	80018b8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800173a:	b2d2      	uxtb	r2, r2
 800173c:	4611      	mov	r1, r2
 800173e:	4618      	mov	r0, r3
 8001740:	f003 fa75 	bl	8004c2e <USB_ReadDevInEPInterrupt>
 8001744:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	f003 0301 	and.w	r3, r3, #1
 800174c:	2b00      	cmp	r3, #0
 800174e:	d057      	beq.n	8001800 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001752:	f003 030f 	and.w	r3, r3, #15
 8001756:	2201      	movs	r2, #1
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001764:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	43db      	mvns	r3, r3
 800176a:	69f9      	ldr	r1, [r7, #28]
 800176c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001770:	4013      	ands	r3, r2
 8001772:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001776:	015a      	lsls	r2, r3, #5
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	4413      	add	r3, r2
 800177c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001780:	461a      	mov	r2, r3
 8001782:	2301      	movs	r3, #1
 8001784:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	691b      	ldr	r3, [r3, #16]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d132      	bne.n	80017f4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800178e:	6879      	ldr	r1, [r7, #4]
 8001790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001792:	4613      	mov	r3, r2
 8001794:	00db      	lsls	r3, r3, #3
 8001796:	4413      	add	r3, r2
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	440b      	add	r3, r1
 800179c:	334c      	adds	r3, #76	; 0x4c
 800179e:	6819      	ldr	r1, [r3, #0]
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017a4:	4613      	mov	r3, r2
 80017a6:	00db      	lsls	r3, r3, #3
 80017a8:	4413      	add	r3, r2
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	4403      	add	r3, r0
 80017ae:	3348      	adds	r3, #72	; 0x48
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4419      	add	r1, r3
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017b8:	4613      	mov	r3, r2
 80017ba:	00db      	lsls	r3, r3, #3
 80017bc:	4413      	add	r3, r2
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	4403      	add	r3, r0
 80017c2:	334c      	adds	r3, #76	; 0x4c
 80017c4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80017c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d113      	bne.n	80017f4 <HAL_PCD_IRQHandler+0x3a2>
 80017cc:	6879      	ldr	r1, [r7, #4]
 80017ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017d0:	4613      	mov	r3, r2
 80017d2:	00db      	lsls	r3, r3, #3
 80017d4:	4413      	add	r3, r2
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	440b      	add	r3, r1
 80017da:	3354      	adds	r3, #84	; 0x54
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d108      	bne.n	80017f4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6818      	ldr	r0, [r3, #0]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80017ec:	461a      	mov	r2, r3
 80017ee:	2101      	movs	r1, #1
 80017f0:	f003 fa7c 	bl	8004cec <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80017f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	4619      	mov	r1, r3
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f008 fb15 	bl	8009e2a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	f003 0308 	and.w	r3, r3, #8
 8001806:	2b00      	cmp	r3, #0
 8001808:	d008      	beq.n	800181c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800180a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180c:	015a      	lsls	r2, r3, #5
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	4413      	add	r3, r2
 8001812:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001816:	461a      	mov	r2, r3
 8001818:	2308      	movs	r3, #8
 800181a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	f003 0310 	and.w	r3, r3, #16
 8001822:	2b00      	cmp	r3, #0
 8001824:	d008      	beq.n	8001838 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001828:	015a      	lsls	r2, r3, #5
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	4413      	add	r3, r2
 800182e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001832:	461a      	mov	r2, r3
 8001834:	2310      	movs	r3, #16
 8001836:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800183e:	2b00      	cmp	r3, #0
 8001840:	d008      	beq.n	8001854 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001844:	015a      	lsls	r2, r3, #5
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	4413      	add	r3, r2
 800184a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800184e:	461a      	mov	r2, r3
 8001850:	2340      	movs	r3, #64	; 0x40
 8001852:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d023      	beq.n	80018a6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800185e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001860:	6a38      	ldr	r0, [r7, #32]
 8001862:	f002 f95d 	bl	8003b20 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001866:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001868:	4613      	mov	r3, r2
 800186a:	00db      	lsls	r3, r3, #3
 800186c:	4413      	add	r3, r2
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	3338      	adds	r3, #56	; 0x38
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	4413      	add	r3, r2
 8001876:	3304      	adds	r3, #4
 8001878:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	78db      	ldrb	r3, [r3, #3]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d108      	bne.n	8001894 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	2200      	movs	r2, #0
 8001886:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188a:	b2db      	uxtb	r3, r3
 800188c:	4619      	mov	r1, r3
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f008 fb62 	bl	8009f58 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001896:	015a      	lsls	r2, r3, #5
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	4413      	add	r3, r2
 800189c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018a0:	461a      	mov	r2, r3
 80018a2:	2302      	movs	r3, #2
 80018a4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d003      	beq.n	80018b8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80018b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f000 fcdb 	bl	800226e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80018b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ba:	3301      	adds	r3, #1
 80018bc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80018be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018c0:	085b      	lsrs	r3, r3, #1
 80018c2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80018c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	f47f af2e 	bne.w	8001728 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f003 f947 	bl	8004b64 <USB_ReadInterrupts>
 80018d6:	4603      	mov	r3, r0
 80018d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80018dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80018e0:	d122      	bne.n	8001928 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	69fa      	ldr	r2, [r7, #28]
 80018ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018f0:	f023 0301 	bic.w	r3, r3, #1
 80018f4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d108      	bne.n	8001912 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001908:	2100      	movs	r1, #0
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f000 fec2 	bl	8002694 <HAL_PCDEx_LPM_Callback>
 8001910:	e002      	b.n	8001918 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f008 fb00 	bl	8009f18 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	695a      	ldr	r2, [r3, #20]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001926:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4618      	mov	r0, r3
 800192e:	f003 f919 	bl	8004b64 <USB_ReadInterrupts>
 8001932:	4603      	mov	r3, r0
 8001934:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001938:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800193c:	d112      	bne.n	8001964 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	2b01      	cmp	r3, #1
 800194c:	d102      	bne.n	8001954 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f008 fabc 	bl	8009ecc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	695a      	ldr	r2, [r3, #20]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001962:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4618      	mov	r0, r3
 800196a:	f003 f8fb 	bl	8004b64 <USB_ReadInterrupts>
 800196e:	4603      	mov	r3, r0
 8001970:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001974:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001978:	f040 80b7 	bne.w	8001aea <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	69fa      	ldr	r2, [r7, #28]
 8001986:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800198a:	f023 0301 	bic.w	r3, r3, #1
 800198e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2110      	movs	r1, #16
 8001996:	4618      	mov	r0, r3
 8001998:	f002 f8c2 	bl	8003b20 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800199c:	2300      	movs	r3, #0
 800199e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019a0:	e046      	b.n	8001a30 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80019a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019a4:	015a      	lsls	r2, r3, #5
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	4413      	add	r3, r2
 80019aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019ae:	461a      	mov	r2, r3
 80019b0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80019b4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80019b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019b8:	015a      	lsls	r2, r3, #5
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	4413      	add	r3, r2
 80019be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019c6:	0151      	lsls	r1, r2, #5
 80019c8:	69fa      	ldr	r2, [r7, #28]
 80019ca:	440a      	add	r2, r1
 80019cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80019d0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80019d4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80019d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019d8:	015a      	lsls	r2, r3, #5
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	4413      	add	r3, r2
 80019de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019e2:	461a      	mov	r2, r3
 80019e4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80019e8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80019ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019ec:	015a      	lsls	r2, r3, #5
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	4413      	add	r3, r2
 80019f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019fa:	0151      	lsls	r1, r2, #5
 80019fc:	69fa      	ldr	r2, [r7, #28]
 80019fe:	440a      	add	r2, r1
 8001a00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001a04:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001a08:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a0c:	015a      	lsls	r2, r3, #5
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	4413      	add	r3, r2
 8001a12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a1a:	0151      	lsls	r1, r2, #5
 8001a1c:	69fa      	ldr	r2, [r7, #28]
 8001a1e:	440a      	add	r2, r1
 8001a20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001a24:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001a28:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d3b3      	bcc.n	80019a2 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a40:	69db      	ldr	r3, [r3, #28]
 8001a42:	69fa      	ldr	r2, [r7, #28]
 8001a44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a48:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001a4c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d016      	beq.n	8001a84 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a60:	69fa      	ldr	r2, [r7, #28]
 8001a62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a66:	f043 030b 	orr.w	r3, r3, #11
 8001a6a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a76:	69fa      	ldr	r2, [r7, #28]
 8001a78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a7c:	f043 030b 	orr.w	r3, r3, #11
 8001a80:	6453      	str	r3, [r2, #68]	; 0x44
 8001a82:	e015      	b.n	8001ab0 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a8a:	695b      	ldr	r3, [r3, #20]
 8001a8c:	69fa      	ldr	r2, [r7, #28]
 8001a8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a92:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a96:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001a9a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001aa2:	691b      	ldr	r3, [r3, #16]
 8001aa4:	69fa      	ldr	r2, [r7, #28]
 8001aa6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001aaa:	f043 030b 	orr.w	r3, r3, #11
 8001aae:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	69fa      	ldr	r2, [r7, #28]
 8001aba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001abe:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001ac2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6818      	ldr	r0, [r3, #0]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	691b      	ldr	r3, [r3, #16]
 8001acc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	f003 f909 	bl	8004cec <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	695a      	ldr	r2, [r3, #20]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001ae8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f003 f838 	bl	8004b64 <USB_ReadInterrupts>
 8001af4:	4603      	mov	r3, r0
 8001af6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001afa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001afe:	d124      	bne.n	8001b4a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f003 f8ce 	bl	8004ca6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f002 f883 	bl	8003c1a <USB_GetDevSpeed>
 8001b14:	4603      	mov	r3, r0
 8001b16:	461a      	mov	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681c      	ldr	r4, [r3, #0]
 8001b20:	f001 fa28 	bl	8002f74 <HAL_RCC_GetHCLKFreq>
 8001b24:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	4620      	mov	r0, r4
 8001b30:	f001 fd82 	bl	8003638 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f008 f9a0 	bl	8009e7a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	695a      	ldr	r2, [r3, #20]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001b48:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f003 f808 	bl	8004b64 <USB_ReadInterrupts>
 8001b54:	4603      	mov	r3, r0
 8001b56:	f003 0308 	and.w	r3, r3, #8
 8001b5a:	2b08      	cmp	r3, #8
 8001b5c:	d10a      	bne.n	8001b74 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f008 f97d 	bl	8009e5e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	695a      	ldr	r2, [r3, #20]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f002 0208 	and.w	r2, r2, #8
 8001b72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f002 fff3 	bl	8004b64 <USB_ReadInterrupts>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b84:	2b80      	cmp	r3, #128	; 0x80
 8001b86:	d122      	bne.n	8001bce <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001b88:	6a3b      	ldr	r3, [r7, #32]
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001b90:	6a3b      	ldr	r3, [r7, #32]
 8001b92:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b94:	2301      	movs	r3, #1
 8001b96:	627b      	str	r3, [r7, #36]	; 0x24
 8001b98:	e014      	b.n	8001bc4 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001b9a:	6879      	ldr	r1, [r7, #4]
 8001b9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	00db      	lsls	r3, r3, #3
 8001ba2:	4413      	add	r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	440b      	add	r3, r1
 8001ba8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d105      	bne.n	8001bbe <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f000 fb27 	bl	800220c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	627b      	str	r3, [r7, #36]	; 0x24
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d3e5      	bcc.n	8001b9a <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f002 ffc6 	bl	8004b64 <USB_ReadInterrupts>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001be2:	d13b      	bne.n	8001c5c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001be4:	2301      	movs	r3, #1
 8001be6:	627b      	str	r3, [r7, #36]	; 0x24
 8001be8:	e02b      	b.n	8001c42 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bec:	015a      	lsls	r2, r3, #5
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001bfa:	6879      	ldr	r1, [r7, #4]
 8001bfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bfe:	4613      	mov	r3, r2
 8001c00:	00db      	lsls	r3, r3, #3
 8001c02:	4413      	add	r3, r2
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	440b      	add	r3, r1
 8001c08:	3340      	adds	r3, #64	; 0x40
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d115      	bne.n	8001c3c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001c10:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	da12      	bge.n	8001c3c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001c16:	6879      	ldr	r1, [r7, #4]
 8001c18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	00db      	lsls	r3, r3, #3
 8001c1e:	4413      	add	r3, r2
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	440b      	add	r3, r1
 8001c24:	333f      	adds	r3, #63	; 0x3f
 8001c26:	2201      	movs	r2, #1
 8001c28:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	4619      	mov	r1, r3
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 fae8 	bl	800220c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3e:	3301      	adds	r3, #1
 8001c40:	627b      	str	r3, [r7, #36]	; 0x24
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d3ce      	bcc.n	8001bea <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	695a      	ldr	r2, [r3, #20]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001c5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f002 ff7f 	bl	8004b64 <USB_ReadInterrupts>
 8001c66:	4603      	mov	r3, r0
 8001c68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c6c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001c70:	d155      	bne.n	8001d1e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c72:	2301      	movs	r3, #1
 8001c74:	627b      	str	r3, [r7, #36]	; 0x24
 8001c76:	e045      	b.n	8001d04 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7a:	015a      	lsls	r2, r3, #5
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	4413      	add	r3, r2
 8001c80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001c88:	6879      	ldr	r1, [r7, #4]
 8001c8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	4413      	add	r3, r2
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	440b      	add	r3, r1
 8001c96:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d12e      	bne.n	8001cfe <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001ca0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	da2b      	bge.n	8001cfe <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001cb2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d121      	bne.n	8001cfe <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001cba:	6879      	ldr	r1, [r7, #4]
 8001cbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	4413      	add	r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	440b      	add	r3, r1
 8001cc8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001ccc:	2201      	movs	r2, #1
 8001cce:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001cd0:	6a3b      	ldr	r3, [r7, #32]
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001cd8:	6a3b      	ldr	r3, [r7, #32]
 8001cda:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001cdc:	6a3b      	ldr	r3, [r7, #32]
 8001cde:	695b      	ldr	r3, [r3, #20]
 8001ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d10a      	bne.n	8001cfe <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	69fa      	ldr	r2, [r7, #28]
 8001cf2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cf6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cfa:	6053      	str	r3, [r2, #4]
            break;
 8001cfc:	e007      	b.n	8001d0e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d00:	3301      	adds	r3, #1
 8001d02:	627b      	str	r3, [r7, #36]	; 0x24
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d3b4      	bcc.n	8001c78 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	695a      	ldr	r2, [r3, #20]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001d1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f002 ff1e 	bl	8004b64 <USB_ReadInterrupts>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d32:	d10a      	bne.n	8001d4a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f008 f921 	bl	8009f7c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	695a      	ldr	r2, [r3, #20]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001d48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f002 ff08 	bl	8004b64 <USB_ReadInterrupts>
 8001d54:	4603      	mov	r3, r0
 8001d56:	f003 0304 	and.w	r3, r3, #4
 8001d5a:	2b04      	cmp	r3, #4
 8001d5c:	d115      	bne.n	8001d8a <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	f003 0304 	and.w	r3, r3, #4
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d002      	beq.n	8001d76 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f008 f911 	bl	8009f98 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	6859      	ldr	r1, [r3, #4]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	430a      	orrs	r2, r1
 8001d84:	605a      	str	r2, [r3, #4]
 8001d86:	e000      	b.n	8001d8a <HAL_PCD_IRQHandler+0x938>
      return;
 8001d88:	bf00      	nop
    }
  }
}
 8001d8a:	3734      	adds	r7, #52	; 0x34
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd90      	pop	{r4, r7, pc}

08001d90 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	460b      	mov	r3, r1
 8001d9a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d101      	bne.n	8001daa <HAL_PCD_SetAddress+0x1a>
 8001da6:	2302      	movs	r3, #2
 8001da8:	e013      	b.n	8001dd2 <HAL_PCD_SetAddress+0x42>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2201      	movs	r2, #1
 8001dae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	78fa      	ldrb	r2, [r7, #3]
 8001db6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	78fa      	ldrb	r2, [r7, #3]
 8001dc0:	4611      	mov	r1, r2
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f002 fe66 	bl	8004a94 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b084      	sub	sp, #16
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
 8001de2:	4608      	mov	r0, r1
 8001de4:	4611      	mov	r1, r2
 8001de6:	461a      	mov	r2, r3
 8001de8:	4603      	mov	r3, r0
 8001dea:	70fb      	strb	r3, [r7, #3]
 8001dec:	460b      	mov	r3, r1
 8001dee:	803b      	strh	r3, [r7, #0]
 8001df0:	4613      	mov	r3, r2
 8001df2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001df4:	2300      	movs	r3, #0
 8001df6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001df8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	da0f      	bge.n	8001e20 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e00:	78fb      	ldrb	r3, [r7, #3]
 8001e02:	f003 020f 	and.w	r2, r3, #15
 8001e06:	4613      	mov	r3, r2
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	4413      	add	r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	3338      	adds	r3, #56	; 0x38
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	4413      	add	r3, r2
 8001e14:	3304      	adds	r3, #4
 8001e16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	705a      	strb	r2, [r3, #1]
 8001e1e:	e00f      	b.n	8001e40 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e20:	78fb      	ldrb	r3, [r7, #3]
 8001e22:	f003 020f 	and.w	r2, r3, #15
 8001e26:	4613      	mov	r3, r2
 8001e28:	00db      	lsls	r3, r3, #3
 8001e2a:	4413      	add	r3, r2
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	4413      	add	r3, r2
 8001e36:	3304      	adds	r3, #4
 8001e38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001e40:	78fb      	ldrb	r3, [r7, #3]
 8001e42:	f003 030f 	and.w	r3, r3, #15
 8001e46:	b2da      	uxtb	r2, r3
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001e4c:	883a      	ldrh	r2, [r7, #0]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	78ba      	ldrb	r2, [r7, #2]
 8001e56:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	785b      	ldrb	r3, [r3, #1]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d004      	beq.n	8001e6a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	b29a      	uxth	r2, r3
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001e6a:	78bb      	ldrb	r3, [r7, #2]
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d102      	bne.n	8001e76 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2200      	movs	r2, #0
 8001e74:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d101      	bne.n	8001e84 <HAL_PCD_EP_Open+0xaa>
 8001e80:	2302      	movs	r3, #2
 8001e82:	e00e      	b.n	8001ea2 <HAL_PCD_EP_Open+0xc8>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2201      	movs	r2, #1
 8001e88:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	68f9      	ldr	r1, [r7, #12]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f001 fee6 	bl	8003c64 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001ea0:	7afb      	ldrb	r3, [r7, #11]
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b084      	sub	sp, #16
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001eb6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	da0f      	bge.n	8001ede <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ebe:	78fb      	ldrb	r3, [r7, #3]
 8001ec0:	f003 020f 	and.w	r2, r3, #15
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	4413      	add	r3, r2
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	3338      	adds	r3, #56	; 0x38
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	3304      	adds	r3, #4
 8001ed4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	705a      	strb	r2, [r3, #1]
 8001edc:	e00f      	b.n	8001efe <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ede:	78fb      	ldrb	r3, [r7, #3]
 8001ee0:	f003 020f 	and.w	r2, r3, #15
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	4413      	add	r3, r2
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	3304      	adds	r3, #4
 8001ef6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2200      	movs	r2, #0
 8001efc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001efe:	78fb      	ldrb	r3, [r7, #3]
 8001f00:	f003 030f 	and.w	r3, r3, #15
 8001f04:	b2da      	uxtb	r2, r3
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d101      	bne.n	8001f18 <HAL_PCD_EP_Close+0x6e>
 8001f14:	2302      	movs	r3, #2
 8001f16:	e00e      	b.n	8001f36 <HAL_PCD_EP_Close+0x8c>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	68f9      	ldr	r1, [r7, #12]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f001 ff24 	bl	8003d74 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b086      	sub	sp, #24
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	60f8      	str	r0, [r7, #12]
 8001f46:	607a      	str	r2, [r7, #4]
 8001f48:	603b      	str	r3, [r7, #0]
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f4e:	7afb      	ldrb	r3, [r7, #11]
 8001f50:	f003 020f 	and.w	r2, r3, #15
 8001f54:	4613      	mov	r3, r2
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	4413      	add	r3, r2
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	4413      	add	r3, r2
 8001f64:	3304      	adds	r3, #4
 8001f66:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	683a      	ldr	r2, [r7, #0]
 8001f72:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	2200      	movs	r2, #0
 8001f78:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f80:	7afb      	ldrb	r3, [r7, #11]
 8001f82:	f003 030f 	and.w	r3, r3, #15
 8001f86:	b2da      	uxtb	r2, r3
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	691b      	ldr	r3, [r3, #16]
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d102      	bne.n	8001f9a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f9a:	7afb      	ldrb	r3, [r7, #11]
 8001f9c:	f003 030f 	and.w	r3, r3, #15
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d109      	bne.n	8001fb8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6818      	ldr	r0, [r3, #0]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	691b      	ldr	r3, [r3, #16]
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	461a      	mov	r2, r3
 8001fb0:	6979      	ldr	r1, [r7, #20]
 8001fb2:	f002 fa03 	bl	80043bc <USB_EP0StartXfer>
 8001fb6:	e008      	b.n	8001fca <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	6818      	ldr	r0, [r3, #0]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	691b      	ldr	r3, [r3, #16]
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	6979      	ldr	r1, [r7, #20]
 8001fc6:	f001 ffb1 	bl	8003f2c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3718      	adds	r7, #24
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	460b      	mov	r3, r1
 8001fde:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001fe0:	78fb      	ldrb	r3, [r7, #3]
 8001fe2:	f003 020f 	and.w	r2, r3, #15
 8001fe6:	6879      	ldr	r1, [r7, #4]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	4413      	add	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	440b      	add	r3, r1
 8001ff2:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8001ff6:	681b      	ldr	r3, [r3, #0]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b086      	sub	sp, #24
 8002008:	af00      	add	r7, sp, #0
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	607a      	str	r2, [r7, #4]
 800200e:	603b      	str	r3, [r7, #0]
 8002010:	460b      	mov	r3, r1
 8002012:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002014:	7afb      	ldrb	r3, [r7, #11]
 8002016:	f003 020f 	and.w	r2, r3, #15
 800201a:	4613      	mov	r3, r2
 800201c:	00db      	lsls	r3, r3, #3
 800201e:	4413      	add	r3, r2
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	3338      	adds	r3, #56	; 0x38
 8002024:	68fa      	ldr	r2, [r7, #12]
 8002026:	4413      	add	r3, r2
 8002028:	3304      	adds	r3, #4
 800202a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	2200      	movs	r2, #0
 800203c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	2201      	movs	r2, #1
 8002042:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002044:	7afb      	ldrb	r3, [r7, #11]
 8002046:	f003 030f 	and.w	r3, r3, #15
 800204a:	b2da      	uxtb	r2, r3
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	691b      	ldr	r3, [r3, #16]
 8002054:	2b01      	cmp	r3, #1
 8002056:	d102      	bne.n	800205e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800205e:	7afb      	ldrb	r3, [r7, #11]
 8002060:	f003 030f 	and.w	r3, r3, #15
 8002064:	2b00      	cmp	r3, #0
 8002066:	d109      	bne.n	800207c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	6818      	ldr	r0, [r3, #0]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	691b      	ldr	r3, [r3, #16]
 8002070:	b2db      	uxtb	r3, r3
 8002072:	461a      	mov	r2, r3
 8002074:	6979      	ldr	r1, [r7, #20]
 8002076:	f002 f9a1 	bl	80043bc <USB_EP0StartXfer>
 800207a:	e008      	b.n	800208e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6818      	ldr	r0, [r3, #0]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	691b      	ldr	r3, [r3, #16]
 8002084:	b2db      	uxtb	r3, r3
 8002086:	461a      	mov	r2, r3
 8002088:	6979      	ldr	r1, [r7, #20]
 800208a:	f001 ff4f 	bl	8003f2c <USB_EPStartXfer>
  }

  return HAL_OK;
 800208e:	2300      	movs	r3, #0
}
 8002090:	4618      	mov	r0, r3
 8002092:	3718      	adds	r7, #24
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	460b      	mov	r3, r1
 80020a2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80020a4:	78fb      	ldrb	r3, [r7, #3]
 80020a6:	f003 020f 	and.w	r2, r3, #15
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d901      	bls.n	80020b6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e050      	b.n	8002158 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80020b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	da0f      	bge.n	80020de <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020be:	78fb      	ldrb	r3, [r7, #3]
 80020c0:	f003 020f 	and.w	r2, r3, #15
 80020c4:	4613      	mov	r3, r2
 80020c6:	00db      	lsls	r3, r3, #3
 80020c8:	4413      	add	r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	3338      	adds	r3, #56	; 0x38
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	4413      	add	r3, r2
 80020d2:	3304      	adds	r3, #4
 80020d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2201      	movs	r2, #1
 80020da:	705a      	strb	r2, [r3, #1]
 80020dc:	e00d      	b.n	80020fa <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80020de:	78fa      	ldrb	r2, [r7, #3]
 80020e0:	4613      	mov	r3, r2
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	4413      	add	r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	4413      	add	r3, r2
 80020f0:	3304      	adds	r3, #4
 80020f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2200      	movs	r2, #0
 80020f8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2201      	movs	r2, #1
 80020fe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002100:	78fb      	ldrb	r3, [r7, #3]
 8002102:	f003 030f 	and.w	r3, r3, #15
 8002106:	b2da      	uxtb	r2, r3
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002112:	2b01      	cmp	r3, #1
 8002114:	d101      	bne.n	800211a <HAL_PCD_EP_SetStall+0x82>
 8002116:	2302      	movs	r3, #2
 8002118:	e01e      	b.n	8002158 <HAL_PCD_EP_SetStall+0xc0>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2201      	movs	r2, #1
 800211e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	68f9      	ldr	r1, [r7, #12]
 8002128:	4618      	mov	r0, r3
 800212a:	f002 fbdf 	bl	80048ec <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800212e:	78fb      	ldrb	r3, [r7, #3]
 8002130:	f003 030f 	and.w	r3, r3, #15
 8002134:	2b00      	cmp	r3, #0
 8002136:	d10a      	bne.n	800214e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6818      	ldr	r0, [r3, #0]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	691b      	ldr	r3, [r3, #16]
 8002140:	b2d9      	uxtb	r1, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002148:	461a      	mov	r2, r3
 800214a:	f002 fdcf 	bl	8004cec <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002156:	2300      	movs	r3, #0
}
 8002158:	4618      	mov	r0, r3
 800215a:	3710      	adds	r7, #16
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	460b      	mov	r3, r1
 800216a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800216c:	78fb      	ldrb	r3, [r7, #3]
 800216e:	f003 020f 	and.w	r2, r3, #15
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	429a      	cmp	r2, r3
 8002178:	d901      	bls.n	800217e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e042      	b.n	8002204 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800217e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002182:	2b00      	cmp	r3, #0
 8002184:	da0f      	bge.n	80021a6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002186:	78fb      	ldrb	r3, [r7, #3]
 8002188:	f003 020f 	and.w	r2, r3, #15
 800218c:	4613      	mov	r3, r2
 800218e:	00db      	lsls	r3, r3, #3
 8002190:	4413      	add	r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	3338      	adds	r3, #56	; 0x38
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	4413      	add	r3, r2
 800219a:	3304      	adds	r3, #4
 800219c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2201      	movs	r2, #1
 80021a2:	705a      	strb	r2, [r3, #1]
 80021a4:	e00f      	b.n	80021c6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021a6:	78fb      	ldrb	r3, [r7, #3]
 80021a8:	f003 020f 	and.w	r2, r3, #15
 80021ac:	4613      	mov	r3, r2
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	4413      	add	r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	4413      	add	r3, r2
 80021bc:	3304      	adds	r3, #4
 80021be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2200      	movs	r2, #0
 80021c4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2200      	movs	r2, #0
 80021ca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021cc:	78fb      	ldrb	r3, [r7, #3]
 80021ce:	f003 030f 	and.w	r3, r3, #15
 80021d2:	b2da      	uxtb	r2, r3
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d101      	bne.n	80021e6 <HAL_PCD_EP_ClrStall+0x86>
 80021e2:	2302      	movs	r3, #2
 80021e4:	e00e      	b.n	8002204 <HAL_PCD_EP_ClrStall+0xa4>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2201      	movs	r2, #1
 80021ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68f9      	ldr	r1, [r7, #12]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f002 fbe7 	bl	80049c8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002202:	2300      	movs	r3, #0
}
 8002204:	4618      	mov	r0, r3
 8002206:	3710      	adds	r7, #16
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	460b      	mov	r3, r1
 8002216:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002218:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800221c:	2b00      	cmp	r3, #0
 800221e:	da0c      	bge.n	800223a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002220:	78fb      	ldrb	r3, [r7, #3]
 8002222:	f003 020f 	and.w	r2, r3, #15
 8002226:	4613      	mov	r3, r2
 8002228:	00db      	lsls	r3, r3, #3
 800222a:	4413      	add	r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	3338      	adds	r3, #56	; 0x38
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	4413      	add	r3, r2
 8002234:	3304      	adds	r3, #4
 8002236:	60fb      	str	r3, [r7, #12]
 8002238:	e00c      	b.n	8002254 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800223a:	78fb      	ldrb	r3, [r7, #3]
 800223c:	f003 020f 	and.w	r2, r3, #15
 8002240:	4613      	mov	r3, r2
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	4413      	add	r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	4413      	add	r3, r2
 8002250:	3304      	adds	r3, #4
 8002252:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	68f9      	ldr	r1, [r7, #12]
 800225a:	4618      	mov	r0, r3
 800225c:	f002 fa06 	bl	800466c <USB_EPStopXfer>
 8002260:	4603      	mov	r3, r0
 8002262:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002264:	7afb      	ldrb	r3, [r7, #11]
}
 8002266:	4618      	mov	r0, r3
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800226e:	b580      	push	{r7, lr}
 8002270:	b08a      	sub	sp, #40	; 0x28
 8002272:	af02      	add	r7, sp, #8
 8002274:	6078      	str	r0, [r7, #4]
 8002276:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002282:	683a      	ldr	r2, [r7, #0]
 8002284:	4613      	mov	r3, r2
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	4413      	add	r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	3338      	adds	r3, #56	; 0x38
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	4413      	add	r3, r2
 8002292:	3304      	adds	r3, #4
 8002294:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6a1a      	ldr	r2, [r3, #32]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	699b      	ldr	r3, [r3, #24]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d901      	bls.n	80022a6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e06c      	b.n	8002380 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	699a      	ldr	r2, [r3, #24]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	6a1b      	ldr	r3, [r3, #32]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	69fa      	ldr	r2, [r7, #28]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d902      	bls.n	80022c2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	3303      	adds	r3, #3
 80022c6:	089b      	lsrs	r3, r3, #2
 80022c8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80022ca:	e02b      	b.n	8002324 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	699a      	ldr	r2, [r3, #24]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	6a1b      	ldr	r3, [r3, #32]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	69fa      	ldr	r2, [r7, #28]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d902      	bls.n	80022e8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	3303      	adds	r3, #3
 80022ec:	089b      	lsrs	r3, r3, #2
 80022ee:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6919      	ldr	r1, [r3, #16]
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	b2da      	uxtb	r2, r3
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002300:	b2db      	uxtb	r3, r3
 8002302:	9300      	str	r3, [sp, #0]
 8002304:	4603      	mov	r3, r0
 8002306:	6978      	ldr	r0, [r7, #20]
 8002308:	f002 fa5a 	bl	80047c0 <USB_WritePacket>

    ep->xfer_buff  += len;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	691a      	ldr	r2, [r3, #16]
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	441a      	add	r2, r3
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6a1a      	ldr	r2, [r3, #32]
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	441a      	add	r2, r3
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	015a      	lsls	r2, r3, #5
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	4413      	add	r3, r2
 800232c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002330:	699b      	ldr	r3, [r3, #24]
 8002332:	b29b      	uxth	r3, r3
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	429a      	cmp	r2, r3
 8002338:	d809      	bhi.n	800234e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6a1a      	ldr	r2, [r3, #32]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002342:	429a      	cmp	r2, r3
 8002344:	d203      	bcs.n	800234e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	699b      	ldr	r3, [r3, #24]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1be      	bne.n	80022cc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	699a      	ldr	r2, [r3, #24]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6a1b      	ldr	r3, [r3, #32]
 8002356:	429a      	cmp	r2, r3
 8002358:	d811      	bhi.n	800237e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	f003 030f 	and.w	r3, r3, #15
 8002360:	2201      	movs	r2, #1
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800236e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	43db      	mvns	r3, r3
 8002374:	6939      	ldr	r1, [r7, #16]
 8002376:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800237a:	4013      	ands	r3, r2
 800237c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800237e:	2300      	movs	r3, #0
}
 8002380:	4618      	mov	r0, r3
 8002382:	3720      	adds	r7, #32
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}

08002388 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b088      	sub	sp, #32
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	333c      	adds	r3, #60	; 0x3c
 80023a0:	3304      	adds	r3, #4
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	015a      	lsls	r2, r3, #5
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	4413      	add	r3, r2
 80023ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d17b      	bne.n	80024b6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	f003 0308 	and.w	r3, r3, #8
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d015      	beq.n	80023f4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	4a61      	ldr	r2, [pc, #388]	; (8002550 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	f240 80b9 	bls.w	8002544 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023d8:	2b00      	cmp	r3, #0
 80023da:	f000 80b3 	beq.w	8002544 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	015a      	lsls	r2, r3, #5
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	4413      	add	r3, r2
 80023e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023ea:	461a      	mov	r2, r3
 80023ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023f0:	6093      	str	r3, [r2, #8]
 80023f2:	e0a7      	b.n	8002544 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	f003 0320 	and.w	r3, r3, #32
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d009      	beq.n	8002412 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	015a      	lsls	r2, r3, #5
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	4413      	add	r3, r2
 8002406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800240a:	461a      	mov	r2, r3
 800240c:	2320      	movs	r3, #32
 800240e:	6093      	str	r3, [r2, #8]
 8002410:	e098      	b.n	8002544 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002418:	2b00      	cmp	r3, #0
 800241a:	f040 8093 	bne.w	8002544 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	4a4b      	ldr	r2, [pc, #300]	; (8002550 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d90f      	bls.n	8002446 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800242c:	2b00      	cmp	r3, #0
 800242e:	d00a      	beq.n	8002446 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	015a      	lsls	r2, r3, #5
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	4413      	add	r3, r2
 8002438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800243c:	461a      	mov	r2, r3
 800243e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002442:	6093      	str	r3, [r2, #8]
 8002444:	e07e      	b.n	8002544 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002446:	683a      	ldr	r2, [r7, #0]
 8002448:	4613      	mov	r3, r2
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	4413      	add	r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	4413      	add	r3, r2
 8002458:	3304      	adds	r3, #4
 800245a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	69da      	ldr	r2, [r3, #28]
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	0159      	lsls	r1, r3, #5
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	440b      	add	r3, r1
 8002468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002472:	1ad2      	subs	r2, r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d114      	bne.n	80024a8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	699b      	ldr	r3, [r3, #24]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d109      	bne.n	800249a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6818      	ldr	r0, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002490:	461a      	mov	r2, r3
 8002492:	2101      	movs	r1, #1
 8002494:	f002 fc2a 	bl	8004cec <USB_EP0_OutStart>
 8002498:	e006      	b.n	80024a8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	691a      	ldr	r2, [r3, #16]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6a1b      	ldr	r3, [r3, #32]
 80024a2:	441a      	add	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	4619      	mov	r1, r3
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f007 fca0 	bl	8009df4 <HAL_PCD_DataOutStageCallback>
 80024b4:	e046      	b.n	8002544 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	4a26      	ldr	r2, [pc, #152]	; (8002554 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d124      	bne.n	8002508 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d00a      	beq.n	80024de <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	015a      	lsls	r2, r3, #5
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	4413      	add	r3, r2
 80024d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024d4:	461a      	mov	r2, r3
 80024d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024da:	6093      	str	r3, [r2, #8]
 80024dc:	e032      	b.n	8002544 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	f003 0320 	and.w	r3, r3, #32
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d008      	beq.n	80024fa <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	015a      	lsls	r2, r3, #5
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	4413      	add	r3, r2
 80024f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024f4:	461a      	mov	r2, r3
 80024f6:	2320      	movs	r3, #32
 80024f8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	4619      	mov	r1, r3
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f007 fc77 	bl	8009df4 <HAL_PCD_DataOutStageCallback>
 8002506:	e01d      	b.n	8002544 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d114      	bne.n	8002538 <PCD_EP_OutXfrComplete_int+0x1b0>
 800250e:	6879      	ldr	r1, [r7, #4]
 8002510:	683a      	ldr	r2, [r7, #0]
 8002512:	4613      	mov	r3, r2
 8002514:	00db      	lsls	r3, r3, #3
 8002516:	4413      	add	r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	440b      	add	r3, r1
 800251c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d108      	bne.n	8002538 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6818      	ldr	r0, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002530:	461a      	mov	r2, r3
 8002532:	2100      	movs	r1, #0
 8002534:	f002 fbda 	bl	8004cec <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	b2db      	uxtb	r3, r3
 800253c:	4619      	mov	r1, r3
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f007 fc58 	bl	8009df4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3720      	adds	r7, #32
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	4f54300a 	.word	0x4f54300a
 8002554:	4f54310a 	.word	0x4f54310a

08002558 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	333c      	adds	r3, #60	; 0x3c
 8002570:	3304      	adds	r3, #4
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	015a      	lsls	r2, r3, #5
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	4413      	add	r3, r2
 800257e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	4a15      	ldr	r2, [pc, #84]	; (80025e0 <PCD_EP_OutSetupPacket_int+0x88>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d90e      	bls.n	80025ac <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002594:	2b00      	cmp	r3, #0
 8002596:	d009      	beq.n	80025ac <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	015a      	lsls	r2, r3, #5
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	4413      	add	r3, r2
 80025a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025a4:	461a      	mov	r2, r3
 80025a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025aa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f007 fc0f 	bl	8009dd0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	4a0a      	ldr	r2, [pc, #40]	; (80025e0 <PCD_EP_OutSetupPacket_int+0x88>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d90c      	bls.n	80025d4 <PCD_EP_OutSetupPacket_int+0x7c>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d108      	bne.n	80025d4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6818      	ldr	r0, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80025cc:	461a      	mov	r2, r3
 80025ce:	2101      	movs	r1, #1
 80025d0:	f002 fb8c 	bl	8004cec <USB_EP0_OutStart>
  }

  return HAL_OK;
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3718      	adds	r7, #24
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	4f54300a 	.word	0x4f54300a

080025e4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	460b      	mov	r3, r1
 80025ee:	70fb      	strb	r3, [r7, #3]
 80025f0:	4613      	mov	r3, r2
 80025f2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80025fc:	78fb      	ldrb	r3, [r7, #3]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d107      	bne.n	8002612 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002602:	883b      	ldrh	r3, [r7, #0]
 8002604:	0419      	lsls	r1, r3, #16
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	68ba      	ldr	r2, [r7, #8]
 800260c:	430a      	orrs	r2, r1
 800260e:	629a      	str	r2, [r3, #40]	; 0x28
 8002610:	e028      	b.n	8002664 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002618:	0c1b      	lsrs	r3, r3, #16
 800261a:	68ba      	ldr	r2, [r7, #8]
 800261c:	4413      	add	r3, r2
 800261e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002620:	2300      	movs	r3, #0
 8002622:	73fb      	strb	r3, [r7, #15]
 8002624:	e00d      	b.n	8002642 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	7bfb      	ldrb	r3, [r7, #15]
 800262c:	3340      	adds	r3, #64	; 0x40
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	4413      	add	r3, r2
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	0c1b      	lsrs	r3, r3, #16
 8002636:	68ba      	ldr	r2, [r7, #8]
 8002638:	4413      	add	r3, r2
 800263a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800263c:	7bfb      	ldrb	r3, [r7, #15]
 800263e:	3301      	adds	r3, #1
 8002640:	73fb      	strb	r3, [r7, #15]
 8002642:	7bfa      	ldrb	r2, [r7, #15]
 8002644:	78fb      	ldrb	r3, [r7, #3]
 8002646:	3b01      	subs	r3, #1
 8002648:	429a      	cmp	r2, r3
 800264a:	d3ec      	bcc.n	8002626 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800264c:	883b      	ldrh	r3, [r7, #0]
 800264e:	0418      	lsls	r0, r3, #16
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6819      	ldr	r1, [r3, #0]
 8002654:	78fb      	ldrb	r3, [r7, #3]
 8002656:	3b01      	subs	r3, #1
 8002658:	68ba      	ldr	r2, [r7, #8]
 800265a:	4302      	orrs	r2, r0
 800265c:	3340      	adds	r3, #64	; 0x40
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	440b      	add	r3, r1
 8002662:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3714      	adds	r7, #20
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr

08002672 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002672:	b480      	push	{r7}
 8002674:	b083      	sub	sp, #12
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
 800267a:	460b      	mov	r3, r1
 800267c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	887a      	ldrh	r2, [r7, #2]
 8002684:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002686:	2300      	movs	r3, #0
}
 8002688:	4618      	mov	r0, r3
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	460b      	mov	r3, r1
 800269e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b086      	sub	sp, #24
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e267      	b.n	8002b8e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d075      	beq.n	80027b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026ca:	4b88      	ldr	r3, [pc, #544]	; (80028ec <HAL_RCC_OscConfig+0x240>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f003 030c 	and.w	r3, r3, #12
 80026d2:	2b04      	cmp	r3, #4
 80026d4:	d00c      	beq.n	80026f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026d6:	4b85      	ldr	r3, [pc, #532]	; (80028ec <HAL_RCC_OscConfig+0x240>)
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026de:	2b08      	cmp	r3, #8
 80026e0:	d112      	bne.n	8002708 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026e2:	4b82      	ldr	r3, [pc, #520]	; (80028ec <HAL_RCC_OscConfig+0x240>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026ee:	d10b      	bne.n	8002708 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026f0:	4b7e      	ldr	r3, [pc, #504]	; (80028ec <HAL_RCC_OscConfig+0x240>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d05b      	beq.n	80027b4 <HAL_RCC_OscConfig+0x108>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d157      	bne.n	80027b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e242      	b.n	8002b8e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002710:	d106      	bne.n	8002720 <HAL_RCC_OscConfig+0x74>
 8002712:	4b76      	ldr	r3, [pc, #472]	; (80028ec <HAL_RCC_OscConfig+0x240>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a75      	ldr	r2, [pc, #468]	; (80028ec <HAL_RCC_OscConfig+0x240>)
 8002718:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800271c:	6013      	str	r3, [r2, #0]
 800271e:	e01d      	b.n	800275c <HAL_RCC_OscConfig+0xb0>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002728:	d10c      	bne.n	8002744 <HAL_RCC_OscConfig+0x98>
 800272a:	4b70      	ldr	r3, [pc, #448]	; (80028ec <HAL_RCC_OscConfig+0x240>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a6f      	ldr	r2, [pc, #444]	; (80028ec <HAL_RCC_OscConfig+0x240>)
 8002730:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002734:	6013      	str	r3, [r2, #0]
 8002736:	4b6d      	ldr	r3, [pc, #436]	; (80028ec <HAL_RCC_OscConfig+0x240>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a6c      	ldr	r2, [pc, #432]	; (80028ec <HAL_RCC_OscConfig+0x240>)
 800273c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002740:	6013      	str	r3, [r2, #0]
 8002742:	e00b      	b.n	800275c <HAL_RCC_OscConfig+0xb0>
 8002744:	4b69      	ldr	r3, [pc, #420]	; (80028ec <HAL_RCC_OscConfig+0x240>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a68      	ldr	r2, [pc, #416]	; (80028ec <HAL_RCC_OscConfig+0x240>)
 800274a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800274e:	6013      	str	r3, [r2, #0]
 8002750:	4b66      	ldr	r3, [pc, #408]	; (80028ec <HAL_RCC_OscConfig+0x240>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a65      	ldr	r2, [pc, #404]	; (80028ec <HAL_RCC_OscConfig+0x240>)
 8002756:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800275a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d013      	beq.n	800278c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002764:	f7fe fa44 	bl	8000bf0 <HAL_GetTick>
 8002768:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800276a:	e008      	b.n	800277e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800276c:	f7fe fa40 	bl	8000bf0 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b64      	cmp	r3, #100	; 0x64
 8002778:	d901      	bls.n	800277e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e207      	b.n	8002b8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800277e:	4b5b      	ldr	r3, [pc, #364]	; (80028ec <HAL_RCC_OscConfig+0x240>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d0f0      	beq.n	800276c <HAL_RCC_OscConfig+0xc0>
 800278a:	e014      	b.n	80027b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800278c:	f7fe fa30 	bl	8000bf0 <HAL_GetTick>
 8002790:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002792:	e008      	b.n	80027a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002794:	f7fe fa2c 	bl	8000bf0 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	2b64      	cmp	r3, #100	; 0x64
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e1f3      	b.n	8002b8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027a6:	4b51      	ldr	r3, [pc, #324]	; (80028ec <HAL_RCC_OscConfig+0x240>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d1f0      	bne.n	8002794 <HAL_RCC_OscConfig+0xe8>
 80027b2:	e000      	b.n	80027b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d063      	beq.n	800288a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027c2:	4b4a      	ldr	r3, [pc, #296]	; (80028ec <HAL_RCC_OscConfig+0x240>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f003 030c 	and.w	r3, r3, #12
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00b      	beq.n	80027e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027ce:	4b47      	ldr	r3, [pc, #284]	; (80028ec <HAL_RCC_OscConfig+0x240>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027d6:	2b08      	cmp	r3, #8
 80027d8:	d11c      	bne.n	8002814 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027da:	4b44      	ldr	r3, [pc, #272]	; (80028ec <HAL_RCC_OscConfig+0x240>)
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d116      	bne.n	8002814 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027e6:	4b41      	ldr	r3, [pc, #260]	; (80028ec <HAL_RCC_OscConfig+0x240>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d005      	beq.n	80027fe <HAL_RCC_OscConfig+0x152>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d001      	beq.n	80027fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e1c7      	b.n	8002b8e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027fe:	4b3b      	ldr	r3, [pc, #236]	; (80028ec <HAL_RCC_OscConfig+0x240>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	00db      	lsls	r3, r3, #3
 800280c:	4937      	ldr	r1, [pc, #220]	; (80028ec <HAL_RCC_OscConfig+0x240>)
 800280e:	4313      	orrs	r3, r2
 8002810:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002812:	e03a      	b.n	800288a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d020      	beq.n	800285e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800281c:	4b34      	ldr	r3, [pc, #208]	; (80028f0 <HAL_RCC_OscConfig+0x244>)
 800281e:	2201      	movs	r2, #1
 8002820:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002822:	f7fe f9e5 	bl	8000bf0 <HAL_GetTick>
 8002826:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002828:	e008      	b.n	800283c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800282a:	f7fe f9e1 	bl	8000bf0 <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	2b02      	cmp	r3, #2
 8002836:	d901      	bls.n	800283c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e1a8      	b.n	8002b8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800283c:	4b2b      	ldr	r3, [pc, #172]	; (80028ec <HAL_RCC_OscConfig+0x240>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d0f0      	beq.n	800282a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002848:	4b28      	ldr	r3, [pc, #160]	; (80028ec <HAL_RCC_OscConfig+0x240>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	691b      	ldr	r3, [r3, #16]
 8002854:	00db      	lsls	r3, r3, #3
 8002856:	4925      	ldr	r1, [pc, #148]	; (80028ec <HAL_RCC_OscConfig+0x240>)
 8002858:	4313      	orrs	r3, r2
 800285a:	600b      	str	r3, [r1, #0]
 800285c:	e015      	b.n	800288a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800285e:	4b24      	ldr	r3, [pc, #144]	; (80028f0 <HAL_RCC_OscConfig+0x244>)
 8002860:	2200      	movs	r2, #0
 8002862:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002864:	f7fe f9c4 	bl	8000bf0 <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800286c:	f7fe f9c0 	bl	8000bf0 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e187      	b.n	8002b8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800287e:	4b1b      	ldr	r3, [pc, #108]	; (80028ec <HAL_RCC_OscConfig+0x240>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1f0      	bne.n	800286c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0308 	and.w	r3, r3, #8
 8002892:	2b00      	cmp	r3, #0
 8002894:	d036      	beq.n	8002904 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d016      	beq.n	80028cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800289e:	4b15      	ldr	r3, [pc, #84]	; (80028f4 <HAL_RCC_OscConfig+0x248>)
 80028a0:	2201      	movs	r2, #1
 80028a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028a4:	f7fe f9a4 	bl	8000bf0 <HAL_GetTick>
 80028a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028aa:	e008      	b.n	80028be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028ac:	f7fe f9a0 	bl	8000bf0 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e167      	b.n	8002b8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028be:	4b0b      	ldr	r3, [pc, #44]	; (80028ec <HAL_RCC_OscConfig+0x240>)
 80028c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d0f0      	beq.n	80028ac <HAL_RCC_OscConfig+0x200>
 80028ca:	e01b      	b.n	8002904 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028cc:	4b09      	ldr	r3, [pc, #36]	; (80028f4 <HAL_RCC_OscConfig+0x248>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028d2:	f7fe f98d 	bl	8000bf0 <HAL_GetTick>
 80028d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028d8:	e00e      	b.n	80028f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028da:	f7fe f989 	bl	8000bf0 <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d907      	bls.n	80028f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e150      	b.n	8002b8e <HAL_RCC_OscConfig+0x4e2>
 80028ec:	40023800 	.word	0x40023800
 80028f0:	42470000 	.word	0x42470000
 80028f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028f8:	4b88      	ldr	r3, [pc, #544]	; (8002b1c <HAL_RCC_OscConfig+0x470>)
 80028fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028fc:	f003 0302 	and.w	r3, r3, #2
 8002900:	2b00      	cmp	r3, #0
 8002902:	d1ea      	bne.n	80028da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0304 	and.w	r3, r3, #4
 800290c:	2b00      	cmp	r3, #0
 800290e:	f000 8097 	beq.w	8002a40 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002912:	2300      	movs	r3, #0
 8002914:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002916:	4b81      	ldr	r3, [pc, #516]	; (8002b1c <HAL_RCC_OscConfig+0x470>)
 8002918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d10f      	bne.n	8002942 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002922:	2300      	movs	r3, #0
 8002924:	60bb      	str	r3, [r7, #8]
 8002926:	4b7d      	ldr	r3, [pc, #500]	; (8002b1c <HAL_RCC_OscConfig+0x470>)
 8002928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292a:	4a7c      	ldr	r2, [pc, #496]	; (8002b1c <HAL_RCC_OscConfig+0x470>)
 800292c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002930:	6413      	str	r3, [r2, #64]	; 0x40
 8002932:	4b7a      	ldr	r3, [pc, #488]	; (8002b1c <HAL_RCC_OscConfig+0x470>)
 8002934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800293a:	60bb      	str	r3, [r7, #8]
 800293c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800293e:	2301      	movs	r3, #1
 8002940:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002942:	4b77      	ldr	r3, [pc, #476]	; (8002b20 <HAL_RCC_OscConfig+0x474>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800294a:	2b00      	cmp	r3, #0
 800294c:	d118      	bne.n	8002980 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800294e:	4b74      	ldr	r3, [pc, #464]	; (8002b20 <HAL_RCC_OscConfig+0x474>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a73      	ldr	r2, [pc, #460]	; (8002b20 <HAL_RCC_OscConfig+0x474>)
 8002954:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002958:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800295a:	f7fe f949 	bl	8000bf0 <HAL_GetTick>
 800295e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002960:	e008      	b.n	8002974 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002962:	f7fe f945 	bl	8000bf0 <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b02      	cmp	r3, #2
 800296e:	d901      	bls.n	8002974 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e10c      	b.n	8002b8e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002974:	4b6a      	ldr	r3, [pc, #424]	; (8002b20 <HAL_RCC_OscConfig+0x474>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297c:	2b00      	cmp	r3, #0
 800297e:	d0f0      	beq.n	8002962 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	2b01      	cmp	r3, #1
 8002986:	d106      	bne.n	8002996 <HAL_RCC_OscConfig+0x2ea>
 8002988:	4b64      	ldr	r3, [pc, #400]	; (8002b1c <HAL_RCC_OscConfig+0x470>)
 800298a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800298c:	4a63      	ldr	r2, [pc, #396]	; (8002b1c <HAL_RCC_OscConfig+0x470>)
 800298e:	f043 0301 	orr.w	r3, r3, #1
 8002992:	6713      	str	r3, [r2, #112]	; 0x70
 8002994:	e01c      	b.n	80029d0 <HAL_RCC_OscConfig+0x324>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	2b05      	cmp	r3, #5
 800299c:	d10c      	bne.n	80029b8 <HAL_RCC_OscConfig+0x30c>
 800299e:	4b5f      	ldr	r3, [pc, #380]	; (8002b1c <HAL_RCC_OscConfig+0x470>)
 80029a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a2:	4a5e      	ldr	r2, [pc, #376]	; (8002b1c <HAL_RCC_OscConfig+0x470>)
 80029a4:	f043 0304 	orr.w	r3, r3, #4
 80029a8:	6713      	str	r3, [r2, #112]	; 0x70
 80029aa:	4b5c      	ldr	r3, [pc, #368]	; (8002b1c <HAL_RCC_OscConfig+0x470>)
 80029ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ae:	4a5b      	ldr	r2, [pc, #364]	; (8002b1c <HAL_RCC_OscConfig+0x470>)
 80029b0:	f043 0301 	orr.w	r3, r3, #1
 80029b4:	6713      	str	r3, [r2, #112]	; 0x70
 80029b6:	e00b      	b.n	80029d0 <HAL_RCC_OscConfig+0x324>
 80029b8:	4b58      	ldr	r3, [pc, #352]	; (8002b1c <HAL_RCC_OscConfig+0x470>)
 80029ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029bc:	4a57      	ldr	r2, [pc, #348]	; (8002b1c <HAL_RCC_OscConfig+0x470>)
 80029be:	f023 0301 	bic.w	r3, r3, #1
 80029c2:	6713      	str	r3, [r2, #112]	; 0x70
 80029c4:	4b55      	ldr	r3, [pc, #340]	; (8002b1c <HAL_RCC_OscConfig+0x470>)
 80029c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c8:	4a54      	ldr	r2, [pc, #336]	; (8002b1c <HAL_RCC_OscConfig+0x470>)
 80029ca:	f023 0304 	bic.w	r3, r3, #4
 80029ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d015      	beq.n	8002a04 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d8:	f7fe f90a 	bl	8000bf0 <HAL_GetTick>
 80029dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029de:	e00a      	b.n	80029f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029e0:	f7fe f906 	bl	8000bf0 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e0cb      	b.n	8002b8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029f6:	4b49      	ldr	r3, [pc, #292]	; (8002b1c <HAL_RCC_OscConfig+0x470>)
 80029f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d0ee      	beq.n	80029e0 <HAL_RCC_OscConfig+0x334>
 8002a02:	e014      	b.n	8002a2e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a04:	f7fe f8f4 	bl	8000bf0 <HAL_GetTick>
 8002a08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a0a:	e00a      	b.n	8002a22 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a0c:	f7fe f8f0 	bl	8000bf0 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e0b5      	b.n	8002b8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a22:	4b3e      	ldr	r3, [pc, #248]	; (8002b1c <HAL_RCC_OscConfig+0x470>)
 8002a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d1ee      	bne.n	8002a0c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a2e:	7dfb      	ldrb	r3, [r7, #23]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d105      	bne.n	8002a40 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a34:	4b39      	ldr	r3, [pc, #228]	; (8002b1c <HAL_RCC_OscConfig+0x470>)
 8002a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a38:	4a38      	ldr	r2, [pc, #224]	; (8002b1c <HAL_RCC_OscConfig+0x470>)
 8002a3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a3e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	699b      	ldr	r3, [r3, #24]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	f000 80a1 	beq.w	8002b8c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a4a:	4b34      	ldr	r3, [pc, #208]	; (8002b1c <HAL_RCC_OscConfig+0x470>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f003 030c 	and.w	r3, r3, #12
 8002a52:	2b08      	cmp	r3, #8
 8002a54:	d05c      	beq.n	8002b10 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d141      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a5e:	4b31      	ldr	r3, [pc, #196]	; (8002b24 <HAL_RCC_OscConfig+0x478>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a64:	f7fe f8c4 	bl	8000bf0 <HAL_GetTick>
 8002a68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a6a:	e008      	b.n	8002a7e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a6c:	f7fe f8c0 	bl	8000bf0 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e087      	b.n	8002b8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a7e:	4b27      	ldr	r3, [pc, #156]	; (8002b1c <HAL_RCC_OscConfig+0x470>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d1f0      	bne.n	8002a6c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	69da      	ldr	r2, [r3, #28]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a1b      	ldr	r3, [r3, #32]
 8002a92:	431a      	orrs	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a98:	019b      	lsls	r3, r3, #6
 8002a9a:	431a      	orrs	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa0:	085b      	lsrs	r3, r3, #1
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	041b      	lsls	r3, r3, #16
 8002aa6:	431a      	orrs	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aac:	061b      	lsls	r3, r3, #24
 8002aae:	491b      	ldr	r1, [pc, #108]	; (8002b1c <HAL_RCC_OscConfig+0x470>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ab4:	4b1b      	ldr	r3, [pc, #108]	; (8002b24 <HAL_RCC_OscConfig+0x478>)
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aba:	f7fe f899 	bl	8000bf0 <HAL_GetTick>
 8002abe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ac0:	e008      	b.n	8002ad4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ac2:	f7fe f895 	bl	8000bf0 <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d901      	bls.n	8002ad4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e05c      	b.n	8002b8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ad4:	4b11      	ldr	r3, [pc, #68]	; (8002b1c <HAL_RCC_OscConfig+0x470>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d0f0      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x416>
 8002ae0:	e054      	b.n	8002b8c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ae2:	4b10      	ldr	r3, [pc, #64]	; (8002b24 <HAL_RCC_OscConfig+0x478>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae8:	f7fe f882 	bl	8000bf0 <HAL_GetTick>
 8002aec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aee:	e008      	b.n	8002b02 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002af0:	f7fe f87e 	bl	8000bf0 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e045      	b.n	8002b8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b02:	4b06      	ldr	r3, [pc, #24]	; (8002b1c <HAL_RCC_OscConfig+0x470>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d1f0      	bne.n	8002af0 <HAL_RCC_OscConfig+0x444>
 8002b0e:	e03d      	b.n	8002b8c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	699b      	ldr	r3, [r3, #24]
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d107      	bne.n	8002b28 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e038      	b.n	8002b8e <HAL_RCC_OscConfig+0x4e2>
 8002b1c:	40023800 	.word	0x40023800
 8002b20:	40007000 	.word	0x40007000
 8002b24:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b28:	4b1b      	ldr	r3, [pc, #108]	; (8002b98 <HAL_RCC_OscConfig+0x4ec>)
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d028      	beq.n	8002b88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d121      	bne.n	8002b88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d11a      	bne.n	8002b88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b58:	4013      	ands	r3, r2
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b5e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d111      	bne.n	8002b88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6e:	085b      	lsrs	r3, r3, #1
 8002b70:	3b01      	subs	r3, #1
 8002b72:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d107      	bne.n	8002b88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b82:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d001      	beq.n	8002b8c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e000      	b.n	8002b8e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3718      	adds	r7, #24
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	40023800 	.word	0x40023800

08002b9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d101      	bne.n	8002bb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e0cc      	b.n	8002d4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bb0:	4b68      	ldr	r3, [pc, #416]	; (8002d54 <HAL_RCC_ClockConfig+0x1b8>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0307 	and.w	r3, r3, #7
 8002bb8:	683a      	ldr	r2, [r7, #0]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d90c      	bls.n	8002bd8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bbe:	4b65      	ldr	r3, [pc, #404]	; (8002d54 <HAL_RCC_ClockConfig+0x1b8>)
 8002bc0:	683a      	ldr	r2, [r7, #0]
 8002bc2:	b2d2      	uxtb	r2, r2
 8002bc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bc6:	4b63      	ldr	r3, [pc, #396]	; (8002d54 <HAL_RCC_ClockConfig+0x1b8>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0307 	and.w	r3, r3, #7
 8002bce:	683a      	ldr	r2, [r7, #0]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d001      	beq.n	8002bd8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e0b8      	b.n	8002d4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0302 	and.w	r3, r3, #2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d020      	beq.n	8002c26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0304 	and.w	r3, r3, #4
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d005      	beq.n	8002bfc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bf0:	4b59      	ldr	r3, [pc, #356]	; (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	4a58      	ldr	r2, [pc, #352]	; (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002bfa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0308 	and.w	r3, r3, #8
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d005      	beq.n	8002c14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c08:	4b53      	ldr	r3, [pc, #332]	; (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	4a52      	ldr	r2, [pc, #328]	; (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c14:	4b50      	ldr	r3, [pc, #320]	; (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	494d      	ldr	r1, [pc, #308]	; (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d044      	beq.n	8002cbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d107      	bne.n	8002c4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c3a:	4b47      	ldr	r3, [pc, #284]	; (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d119      	bne.n	8002c7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e07f      	b.n	8002d4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d003      	beq.n	8002c5a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c56:	2b03      	cmp	r3, #3
 8002c58:	d107      	bne.n	8002c6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c5a:	4b3f      	ldr	r3, [pc, #252]	; (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d109      	bne.n	8002c7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e06f      	b.n	8002d4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c6a:	4b3b      	ldr	r3, [pc, #236]	; (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d101      	bne.n	8002c7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e067      	b.n	8002d4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c7a:	4b37      	ldr	r3, [pc, #220]	; (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f023 0203 	bic.w	r2, r3, #3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	4934      	ldr	r1, [pc, #208]	; (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c8c:	f7fd ffb0 	bl	8000bf0 <HAL_GetTick>
 8002c90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c92:	e00a      	b.n	8002caa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c94:	f7fd ffac 	bl	8000bf0 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e04f      	b.n	8002d4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002caa:	4b2b      	ldr	r3, [pc, #172]	; (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f003 020c 	and.w	r2, r3, #12
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d1eb      	bne.n	8002c94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cbc:	4b25      	ldr	r3, [pc, #148]	; (8002d54 <HAL_RCC_ClockConfig+0x1b8>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0307 	and.w	r3, r3, #7
 8002cc4:	683a      	ldr	r2, [r7, #0]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d20c      	bcs.n	8002ce4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cca:	4b22      	ldr	r3, [pc, #136]	; (8002d54 <HAL_RCC_ClockConfig+0x1b8>)
 8002ccc:	683a      	ldr	r2, [r7, #0]
 8002cce:	b2d2      	uxtb	r2, r2
 8002cd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cd2:	4b20      	ldr	r3, [pc, #128]	; (8002d54 <HAL_RCC_ClockConfig+0x1b8>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0307 	and.w	r3, r3, #7
 8002cda:	683a      	ldr	r2, [r7, #0]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d001      	beq.n	8002ce4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e032      	b.n	8002d4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0304 	and.w	r3, r3, #4
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d008      	beq.n	8002d02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cf0:	4b19      	ldr	r3, [pc, #100]	; (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	4916      	ldr	r1, [pc, #88]	; (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0308 	and.w	r3, r3, #8
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d009      	beq.n	8002d22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d0e:	4b12      	ldr	r3, [pc, #72]	; (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	490e      	ldr	r1, [pc, #56]	; (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d22:	f000 f821 	bl	8002d68 <HAL_RCC_GetSysClockFreq>
 8002d26:	4602      	mov	r2, r0
 8002d28:	4b0b      	ldr	r3, [pc, #44]	; (8002d58 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	091b      	lsrs	r3, r3, #4
 8002d2e:	f003 030f 	and.w	r3, r3, #15
 8002d32:	490a      	ldr	r1, [pc, #40]	; (8002d5c <HAL_RCC_ClockConfig+0x1c0>)
 8002d34:	5ccb      	ldrb	r3, [r1, r3]
 8002d36:	fa22 f303 	lsr.w	r3, r2, r3
 8002d3a:	4a09      	ldr	r2, [pc, #36]	; (8002d60 <HAL_RCC_ClockConfig+0x1c4>)
 8002d3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d3e:	4b09      	ldr	r3, [pc, #36]	; (8002d64 <HAL_RCC_ClockConfig+0x1c8>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7fd fde4 	bl	8000910 <HAL_InitTick>

  return HAL_OK;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3710      	adds	r7, #16
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	40023c00 	.word	0x40023c00
 8002d58:	40023800 	.word	0x40023800
 8002d5c:	0800a9e0 	.word	0x0800a9e0
 8002d60:	20000000 	.word	0x20000000
 8002d64:	20000004 	.word	0x20000004

08002d68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d6c:	b094      	sub	sp, #80	; 0x50
 8002d6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d70:	2300      	movs	r3, #0
 8002d72:	647b      	str	r3, [r7, #68]	; 0x44
 8002d74:	2300      	movs	r3, #0
 8002d76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d78:	2300      	movs	r3, #0
 8002d7a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d80:	4b79      	ldr	r3, [pc, #484]	; (8002f68 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f003 030c 	and.w	r3, r3, #12
 8002d88:	2b08      	cmp	r3, #8
 8002d8a:	d00d      	beq.n	8002da8 <HAL_RCC_GetSysClockFreq+0x40>
 8002d8c:	2b08      	cmp	r3, #8
 8002d8e:	f200 80e1 	bhi.w	8002f54 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d002      	beq.n	8002d9c <HAL_RCC_GetSysClockFreq+0x34>
 8002d96:	2b04      	cmp	r3, #4
 8002d98:	d003      	beq.n	8002da2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002d9a:	e0db      	b.n	8002f54 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d9c:	4b73      	ldr	r3, [pc, #460]	; (8002f6c <HAL_RCC_GetSysClockFreq+0x204>)
 8002d9e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002da0:	e0db      	b.n	8002f5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002da2:	4b73      	ldr	r3, [pc, #460]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x208>)
 8002da4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002da6:	e0d8      	b.n	8002f5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002da8:	4b6f      	ldr	r3, [pc, #444]	; (8002f68 <HAL_RCC_GetSysClockFreq+0x200>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002db0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002db2:	4b6d      	ldr	r3, [pc, #436]	; (8002f68 <HAL_RCC_GetSysClockFreq+0x200>)
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d063      	beq.n	8002e86 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dbe:	4b6a      	ldr	r3, [pc, #424]	; (8002f68 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	099b      	lsrs	r3, r3, #6
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002dc8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dd0:	633b      	str	r3, [r7, #48]	; 0x30
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	637b      	str	r3, [r7, #52]	; 0x34
 8002dd6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002dda:	4622      	mov	r2, r4
 8002ddc:	462b      	mov	r3, r5
 8002dde:	f04f 0000 	mov.w	r0, #0
 8002de2:	f04f 0100 	mov.w	r1, #0
 8002de6:	0159      	lsls	r1, r3, #5
 8002de8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dec:	0150      	lsls	r0, r2, #5
 8002dee:	4602      	mov	r2, r0
 8002df0:	460b      	mov	r3, r1
 8002df2:	4621      	mov	r1, r4
 8002df4:	1a51      	subs	r1, r2, r1
 8002df6:	6139      	str	r1, [r7, #16]
 8002df8:	4629      	mov	r1, r5
 8002dfa:	eb63 0301 	sbc.w	r3, r3, r1
 8002dfe:	617b      	str	r3, [r7, #20]
 8002e00:	f04f 0200 	mov.w	r2, #0
 8002e04:	f04f 0300 	mov.w	r3, #0
 8002e08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e0c:	4659      	mov	r1, fp
 8002e0e:	018b      	lsls	r3, r1, #6
 8002e10:	4651      	mov	r1, sl
 8002e12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e16:	4651      	mov	r1, sl
 8002e18:	018a      	lsls	r2, r1, #6
 8002e1a:	4651      	mov	r1, sl
 8002e1c:	ebb2 0801 	subs.w	r8, r2, r1
 8002e20:	4659      	mov	r1, fp
 8002e22:	eb63 0901 	sbc.w	r9, r3, r1
 8002e26:	f04f 0200 	mov.w	r2, #0
 8002e2a:	f04f 0300 	mov.w	r3, #0
 8002e2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e3a:	4690      	mov	r8, r2
 8002e3c:	4699      	mov	r9, r3
 8002e3e:	4623      	mov	r3, r4
 8002e40:	eb18 0303 	adds.w	r3, r8, r3
 8002e44:	60bb      	str	r3, [r7, #8]
 8002e46:	462b      	mov	r3, r5
 8002e48:	eb49 0303 	adc.w	r3, r9, r3
 8002e4c:	60fb      	str	r3, [r7, #12]
 8002e4e:	f04f 0200 	mov.w	r2, #0
 8002e52:	f04f 0300 	mov.w	r3, #0
 8002e56:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e5a:	4629      	mov	r1, r5
 8002e5c:	024b      	lsls	r3, r1, #9
 8002e5e:	4621      	mov	r1, r4
 8002e60:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e64:	4621      	mov	r1, r4
 8002e66:	024a      	lsls	r2, r1, #9
 8002e68:	4610      	mov	r0, r2
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e6e:	2200      	movs	r2, #0
 8002e70:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e72:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e74:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e78:	f7fd f9b2 	bl	80001e0 <__aeabi_uldivmod>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	460b      	mov	r3, r1
 8002e80:	4613      	mov	r3, r2
 8002e82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e84:	e058      	b.n	8002f38 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e86:	4b38      	ldr	r3, [pc, #224]	; (8002f68 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	099b      	lsrs	r3, r3, #6
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	4618      	mov	r0, r3
 8002e90:	4611      	mov	r1, r2
 8002e92:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e96:	623b      	str	r3, [r7, #32]
 8002e98:	2300      	movs	r3, #0
 8002e9a:	627b      	str	r3, [r7, #36]	; 0x24
 8002e9c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ea0:	4642      	mov	r2, r8
 8002ea2:	464b      	mov	r3, r9
 8002ea4:	f04f 0000 	mov.w	r0, #0
 8002ea8:	f04f 0100 	mov.w	r1, #0
 8002eac:	0159      	lsls	r1, r3, #5
 8002eae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002eb2:	0150      	lsls	r0, r2, #5
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	4641      	mov	r1, r8
 8002eba:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ebe:	4649      	mov	r1, r9
 8002ec0:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ec4:	f04f 0200 	mov.w	r2, #0
 8002ec8:	f04f 0300 	mov.w	r3, #0
 8002ecc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002ed0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002ed4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002ed8:	ebb2 040a 	subs.w	r4, r2, sl
 8002edc:	eb63 050b 	sbc.w	r5, r3, fp
 8002ee0:	f04f 0200 	mov.w	r2, #0
 8002ee4:	f04f 0300 	mov.w	r3, #0
 8002ee8:	00eb      	lsls	r3, r5, #3
 8002eea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002eee:	00e2      	lsls	r2, r4, #3
 8002ef0:	4614      	mov	r4, r2
 8002ef2:	461d      	mov	r5, r3
 8002ef4:	4643      	mov	r3, r8
 8002ef6:	18e3      	adds	r3, r4, r3
 8002ef8:	603b      	str	r3, [r7, #0]
 8002efa:	464b      	mov	r3, r9
 8002efc:	eb45 0303 	adc.w	r3, r5, r3
 8002f00:	607b      	str	r3, [r7, #4]
 8002f02:	f04f 0200 	mov.w	r2, #0
 8002f06:	f04f 0300 	mov.w	r3, #0
 8002f0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f0e:	4629      	mov	r1, r5
 8002f10:	028b      	lsls	r3, r1, #10
 8002f12:	4621      	mov	r1, r4
 8002f14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f18:	4621      	mov	r1, r4
 8002f1a:	028a      	lsls	r2, r1, #10
 8002f1c:	4610      	mov	r0, r2
 8002f1e:	4619      	mov	r1, r3
 8002f20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f22:	2200      	movs	r2, #0
 8002f24:	61bb      	str	r3, [r7, #24]
 8002f26:	61fa      	str	r2, [r7, #28]
 8002f28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f2c:	f7fd f958 	bl	80001e0 <__aeabi_uldivmod>
 8002f30:	4602      	mov	r2, r0
 8002f32:	460b      	mov	r3, r1
 8002f34:	4613      	mov	r3, r2
 8002f36:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f38:	4b0b      	ldr	r3, [pc, #44]	; (8002f68 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	0c1b      	lsrs	r3, r3, #16
 8002f3e:	f003 0303 	and.w	r3, r3, #3
 8002f42:	3301      	adds	r3, #1
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002f48:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f50:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f52:	e002      	b.n	8002f5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f54:	4b05      	ldr	r3, [pc, #20]	; (8002f6c <HAL_RCC_GetSysClockFreq+0x204>)
 8002f56:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3750      	adds	r7, #80	; 0x50
 8002f60:	46bd      	mov	sp, r7
 8002f62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f66:	bf00      	nop
 8002f68:	40023800 	.word	0x40023800
 8002f6c:	00f42400 	.word	0x00f42400
 8002f70:	007a1200 	.word	0x007a1200

08002f74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f78:	4b03      	ldr	r3, [pc, #12]	; (8002f88 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	20000000 	.word	0x20000000

08002f8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f90:	f7ff fff0 	bl	8002f74 <HAL_RCC_GetHCLKFreq>
 8002f94:	4602      	mov	r2, r0
 8002f96:	4b05      	ldr	r3, [pc, #20]	; (8002fac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	0a9b      	lsrs	r3, r3, #10
 8002f9c:	f003 0307 	and.w	r3, r3, #7
 8002fa0:	4903      	ldr	r1, [pc, #12]	; (8002fb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fa2:	5ccb      	ldrb	r3, [r1, r3]
 8002fa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	40023800 	.word	0x40023800
 8002fb0:	0800a9f0 	.word	0x0800a9f0

08002fb4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	220f      	movs	r2, #15
 8002fc2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002fc4:	4b12      	ldr	r3, [pc, #72]	; (8003010 <HAL_RCC_GetClockConfig+0x5c>)
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f003 0203 	and.w	r2, r3, #3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002fd0:	4b0f      	ldr	r3, [pc, #60]	; (8003010 <HAL_RCC_GetClockConfig+0x5c>)
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002fdc:	4b0c      	ldr	r3, [pc, #48]	; (8003010 <HAL_RCC_GetClockConfig+0x5c>)
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002fe8:	4b09      	ldr	r3, [pc, #36]	; (8003010 <HAL_RCC_GetClockConfig+0x5c>)
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	08db      	lsrs	r3, r3, #3
 8002fee:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002ff6:	4b07      	ldr	r3, [pc, #28]	; (8003014 <HAL_RCC_GetClockConfig+0x60>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0207 	and.w	r2, r3, #7
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	601a      	str	r2, [r3, #0]
}
 8003002:	bf00      	nop
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	40023800 	.word	0x40023800
 8003014:	40023c00 	.word	0x40023c00

08003018 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d101      	bne.n	800302a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e041      	b.n	80030ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2b00      	cmp	r3, #0
 8003034:	d106      	bne.n	8003044 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 f839 	bl	80030b6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2202      	movs	r2, #2
 8003048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	3304      	adds	r3, #4
 8003054:	4619      	mov	r1, r3
 8003056:	4610      	mov	r0, r2
 8003058:	f000 f9d8 	bl	800340c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3708      	adds	r7, #8
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}

080030b6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80030b6:	b480      	push	{r7}
 80030b8:	b083      	sub	sp, #12
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80030be:	bf00      	nop
 80030c0:	370c      	adds	r7, #12
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
	...

080030cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b085      	sub	sp, #20
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d001      	beq.n	80030e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e04e      	b.n	8003182 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2202      	movs	r2, #2
 80030e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	68da      	ldr	r2, [r3, #12]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f042 0201 	orr.w	r2, r2, #1
 80030fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a23      	ldr	r2, [pc, #140]	; (8003190 <HAL_TIM_Base_Start_IT+0xc4>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d022      	beq.n	800314c <HAL_TIM_Base_Start_IT+0x80>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800310e:	d01d      	beq.n	800314c <HAL_TIM_Base_Start_IT+0x80>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a1f      	ldr	r2, [pc, #124]	; (8003194 <HAL_TIM_Base_Start_IT+0xc8>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d018      	beq.n	800314c <HAL_TIM_Base_Start_IT+0x80>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a1e      	ldr	r2, [pc, #120]	; (8003198 <HAL_TIM_Base_Start_IT+0xcc>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d013      	beq.n	800314c <HAL_TIM_Base_Start_IT+0x80>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a1c      	ldr	r2, [pc, #112]	; (800319c <HAL_TIM_Base_Start_IT+0xd0>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d00e      	beq.n	800314c <HAL_TIM_Base_Start_IT+0x80>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a1b      	ldr	r2, [pc, #108]	; (80031a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d009      	beq.n	800314c <HAL_TIM_Base_Start_IT+0x80>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a19      	ldr	r2, [pc, #100]	; (80031a4 <HAL_TIM_Base_Start_IT+0xd8>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d004      	beq.n	800314c <HAL_TIM_Base_Start_IT+0x80>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a18      	ldr	r2, [pc, #96]	; (80031a8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d111      	bne.n	8003170 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f003 0307 	and.w	r3, r3, #7
 8003156:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2b06      	cmp	r3, #6
 800315c:	d010      	beq.n	8003180 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f042 0201 	orr.w	r2, r2, #1
 800316c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800316e:	e007      	b.n	8003180 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f042 0201 	orr.w	r2, r2, #1
 800317e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3714      	adds	r7, #20
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	40010000 	.word	0x40010000
 8003194:	40000400 	.word	0x40000400
 8003198:	40000800 	.word	0x40000800
 800319c:	40000c00 	.word	0x40000c00
 80031a0:	40010400 	.word	0x40010400
 80031a4:	40014000 	.word	0x40014000
 80031a8:	40001800 	.word	0x40001800

080031ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	f003 0302 	and.w	r3, r3, #2
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d122      	bne.n	8003208 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	f003 0302 	and.w	r3, r3, #2
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d11b      	bne.n	8003208 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f06f 0202 	mvn.w	r2, #2
 80031d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2201      	movs	r2, #1
 80031de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	f003 0303 	and.w	r3, r3, #3
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d003      	beq.n	80031f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 f8ee 	bl	80033d0 <HAL_TIM_IC_CaptureCallback>
 80031f4:	e005      	b.n	8003202 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 f8e0 	bl	80033bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 f8f1 	bl	80033e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	f003 0304 	and.w	r3, r3, #4
 8003212:	2b04      	cmp	r3, #4
 8003214:	d122      	bne.n	800325c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	f003 0304 	and.w	r3, r3, #4
 8003220:	2b04      	cmp	r3, #4
 8003222:	d11b      	bne.n	800325c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f06f 0204 	mvn.w	r2, #4
 800322c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2202      	movs	r2, #2
 8003232:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	699b      	ldr	r3, [r3, #24]
 800323a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800323e:	2b00      	cmp	r3, #0
 8003240:	d003      	beq.n	800324a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 f8c4 	bl	80033d0 <HAL_TIM_IC_CaptureCallback>
 8003248:	e005      	b.n	8003256 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 f8b6 	bl	80033bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f000 f8c7 	bl	80033e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	f003 0308 	and.w	r3, r3, #8
 8003266:	2b08      	cmp	r3, #8
 8003268:	d122      	bne.n	80032b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	f003 0308 	and.w	r3, r3, #8
 8003274:	2b08      	cmp	r3, #8
 8003276:	d11b      	bne.n	80032b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f06f 0208 	mvn.w	r2, #8
 8003280:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2204      	movs	r2, #4
 8003286:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	69db      	ldr	r3, [r3, #28]
 800328e:	f003 0303 	and.w	r3, r3, #3
 8003292:	2b00      	cmp	r3, #0
 8003294:	d003      	beq.n	800329e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 f89a 	bl	80033d0 <HAL_TIM_IC_CaptureCallback>
 800329c:	e005      	b.n	80032aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 f88c 	bl	80033bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f000 f89d 	bl	80033e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	f003 0310 	and.w	r3, r3, #16
 80032ba:	2b10      	cmp	r3, #16
 80032bc:	d122      	bne.n	8003304 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	f003 0310 	and.w	r3, r3, #16
 80032c8:	2b10      	cmp	r3, #16
 80032ca:	d11b      	bne.n	8003304 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f06f 0210 	mvn.w	r2, #16
 80032d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2208      	movs	r2, #8
 80032da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	69db      	ldr	r3, [r3, #28]
 80032e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d003      	beq.n	80032f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 f870 	bl	80033d0 <HAL_TIM_IC_CaptureCallback>
 80032f0:	e005      	b.n	80032fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 f862 	bl	80033bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f000 f873 	bl	80033e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	691b      	ldr	r3, [r3, #16]
 800330a:	f003 0301 	and.w	r3, r3, #1
 800330e:	2b01      	cmp	r3, #1
 8003310:	d10e      	bne.n	8003330 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	f003 0301 	and.w	r3, r3, #1
 800331c:	2b01      	cmp	r3, #1
 800331e:	d107      	bne.n	8003330 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f06f 0201 	mvn.w	r2, #1
 8003328:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f7fd fa42 	bl	80007b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800333a:	2b80      	cmp	r3, #128	; 0x80
 800333c:	d10e      	bne.n	800335c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003348:	2b80      	cmp	r3, #128	; 0x80
 800334a:	d107      	bne.n	800335c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003354:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 f902 	bl	8003560 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003366:	2b40      	cmp	r3, #64	; 0x40
 8003368:	d10e      	bne.n	8003388 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003374:	2b40      	cmp	r3, #64	; 0x40
 8003376:	d107      	bne.n	8003388 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003380:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f000 f838 	bl	80033f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	f003 0320 	and.w	r3, r3, #32
 8003392:	2b20      	cmp	r3, #32
 8003394:	d10e      	bne.n	80033b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	f003 0320 	and.w	r3, r3, #32
 80033a0:	2b20      	cmp	r3, #32
 80033a2:	d107      	bne.n	80033b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f06f 0220 	mvn.w	r2, #32
 80033ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f000 f8cc 	bl	800354c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033b4:	bf00      	nop
 80033b6:	3708      	adds	r7, #8
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80033c4:	bf00      	nop
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033ec:	bf00      	nop
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800340c:	b480      	push	{r7}
 800340e:	b085      	sub	sp, #20
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4a40      	ldr	r2, [pc, #256]	; (8003520 <TIM_Base_SetConfig+0x114>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d013      	beq.n	800344c <TIM_Base_SetConfig+0x40>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800342a:	d00f      	beq.n	800344c <TIM_Base_SetConfig+0x40>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a3d      	ldr	r2, [pc, #244]	; (8003524 <TIM_Base_SetConfig+0x118>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d00b      	beq.n	800344c <TIM_Base_SetConfig+0x40>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a3c      	ldr	r2, [pc, #240]	; (8003528 <TIM_Base_SetConfig+0x11c>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d007      	beq.n	800344c <TIM_Base_SetConfig+0x40>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4a3b      	ldr	r2, [pc, #236]	; (800352c <TIM_Base_SetConfig+0x120>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d003      	beq.n	800344c <TIM_Base_SetConfig+0x40>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a3a      	ldr	r2, [pc, #232]	; (8003530 <TIM_Base_SetConfig+0x124>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d108      	bne.n	800345e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003452:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	68fa      	ldr	r2, [r7, #12]
 800345a:	4313      	orrs	r3, r2
 800345c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a2f      	ldr	r2, [pc, #188]	; (8003520 <TIM_Base_SetConfig+0x114>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d02b      	beq.n	80034be <TIM_Base_SetConfig+0xb2>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800346c:	d027      	beq.n	80034be <TIM_Base_SetConfig+0xb2>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a2c      	ldr	r2, [pc, #176]	; (8003524 <TIM_Base_SetConfig+0x118>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d023      	beq.n	80034be <TIM_Base_SetConfig+0xb2>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a2b      	ldr	r2, [pc, #172]	; (8003528 <TIM_Base_SetConfig+0x11c>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d01f      	beq.n	80034be <TIM_Base_SetConfig+0xb2>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a2a      	ldr	r2, [pc, #168]	; (800352c <TIM_Base_SetConfig+0x120>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d01b      	beq.n	80034be <TIM_Base_SetConfig+0xb2>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a29      	ldr	r2, [pc, #164]	; (8003530 <TIM_Base_SetConfig+0x124>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d017      	beq.n	80034be <TIM_Base_SetConfig+0xb2>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a28      	ldr	r2, [pc, #160]	; (8003534 <TIM_Base_SetConfig+0x128>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d013      	beq.n	80034be <TIM_Base_SetConfig+0xb2>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a27      	ldr	r2, [pc, #156]	; (8003538 <TIM_Base_SetConfig+0x12c>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d00f      	beq.n	80034be <TIM_Base_SetConfig+0xb2>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a26      	ldr	r2, [pc, #152]	; (800353c <TIM_Base_SetConfig+0x130>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d00b      	beq.n	80034be <TIM_Base_SetConfig+0xb2>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a25      	ldr	r2, [pc, #148]	; (8003540 <TIM_Base_SetConfig+0x134>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d007      	beq.n	80034be <TIM_Base_SetConfig+0xb2>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a24      	ldr	r2, [pc, #144]	; (8003544 <TIM_Base_SetConfig+0x138>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d003      	beq.n	80034be <TIM_Base_SetConfig+0xb2>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a23      	ldr	r2, [pc, #140]	; (8003548 <TIM_Base_SetConfig+0x13c>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d108      	bne.n	80034d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	4313      	orrs	r3, r2
 80034dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	689a      	ldr	r2, [r3, #8]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4a0a      	ldr	r2, [pc, #40]	; (8003520 <TIM_Base_SetConfig+0x114>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d003      	beq.n	8003504 <TIM_Base_SetConfig+0xf8>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a0c      	ldr	r2, [pc, #48]	; (8003530 <TIM_Base_SetConfig+0x124>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d103      	bne.n	800350c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	691a      	ldr	r2, [r3, #16]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	615a      	str	r2, [r3, #20]
}
 8003512:	bf00      	nop
 8003514:	3714      	adds	r7, #20
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	40010000 	.word	0x40010000
 8003524:	40000400 	.word	0x40000400
 8003528:	40000800 	.word	0x40000800
 800352c:	40000c00 	.word	0x40000c00
 8003530:	40010400 	.word	0x40010400
 8003534:	40014000 	.word	0x40014000
 8003538:	40014400 	.word	0x40014400
 800353c:	40014800 	.word	0x40014800
 8003540:	40001800 	.word	0x40001800
 8003544:	40001c00 	.word	0x40001c00
 8003548:	40002000 	.word	0x40002000

0800354c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003554:	bf00      	nop
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr

08003560 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003568:	bf00      	nop
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003574:	b084      	sub	sp, #16
 8003576:	b580      	push	{r7, lr}
 8003578:	b084      	sub	sp, #16
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
 800357e:	f107 001c 	add.w	r0, r7, #28
 8003582:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003588:	2b01      	cmp	r3, #1
 800358a:	d122      	bne.n	80035d2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003590:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80035a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80035b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d105      	bne.n	80035c6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f001 fbee 	bl	8004da8 <USB_CoreReset>
 80035cc:	4603      	mov	r3, r0
 80035ce:	73fb      	strb	r3, [r7, #15]
 80035d0:	e01a      	b.n	8003608 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f001 fbe2 	bl	8004da8 <USB_CoreReset>
 80035e4:	4603      	mov	r3, r0
 80035e6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80035e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d106      	bne.n	80035fc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	639a      	str	r2, [r3, #56]	; 0x38
 80035fa:	e005      	b.n	8003608 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003600:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800360a:	2b01      	cmp	r3, #1
 800360c:	d10b      	bne.n	8003626 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f043 0206 	orr.w	r2, r3, #6
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	f043 0220 	orr.w	r2, r3, #32
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003626:	7bfb      	ldrb	r3, [r7, #15]
}
 8003628:	4618      	mov	r0, r3
 800362a:	3710      	adds	r7, #16
 800362c:	46bd      	mov	sp, r7
 800362e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003632:	b004      	add	sp, #16
 8003634:	4770      	bx	lr
	...

08003638 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003638:	b480      	push	{r7}
 800363a:	b087      	sub	sp, #28
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	4613      	mov	r3, r2
 8003644:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003646:	79fb      	ldrb	r3, [r7, #7]
 8003648:	2b02      	cmp	r3, #2
 800364a:	d165      	bne.n	8003718 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	4a41      	ldr	r2, [pc, #260]	; (8003754 <USB_SetTurnaroundTime+0x11c>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d906      	bls.n	8003662 <USB_SetTurnaroundTime+0x2a>
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	4a40      	ldr	r2, [pc, #256]	; (8003758 <USB_SetTurnaroundTime+0x120>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d202      	bcs.n	8003662 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800365c:	230f      	movs	r3, #15
 800365e:	617b      	str	r3, [r7, #20]
 8003660:	e062      	b.n	8003728 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	4a3c      	ldr	r2, [pc, #240]	; (8003758 <USB_SetTurnaroundTime+0x120>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d306      	bcc.n	8003678 <USB_SetTurnaroundTime+0x40>
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	4a3b      	ldr	r2, [pc, #236]	; (800375c <USB_SetTurnaroundTime+0x124>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d202      	bcs.n	8003678 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003672:	230e      	movs	r3, #14
 8003674:	617b      	str	r3, [r7, #20]
 8003676:	e057      	b.n	8003728 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	4a38      	ldr	r2, [pc, #224]	; (800375c <USB_SetTurnaroundTime+0x124>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d306      	bcc.n	800368e <USB_SetTurnaroundTime+0x56>
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	4a37      	ldr	r2, [pc, #220]	; (8003760 <USB_SetTurnaroundTime+0x128>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d202      	bcs.n	800368e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003688:	230d      	movs	r3, #13
 800368a:	617b      	str	r3, [r7, #20]
 800368c:	e04c      	b.n	8003728 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	4a33      	ldr	r2, [pc, #204]	; (8003760 <USB_SetTurnaroundTime+0x128>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d306      	bcc.n	80036a4 <USB_SetTurnaroundTime+0x6c>
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	4a32      	ldr	r2, [pc, #200]	; (8003764 <USB_SetTurnaroundTime+0x12c>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d802      	bhi.n	80036a4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800369e:	230c      	movs	r3, #12
 80036a0:	617b      	str	r3, [r7, #20]
 80036a2:	e041      	b.n	8003728 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	4a2f      	ldr	r2, [pc, #188]	; (8003764 <USB_SetTurnaroundTime+0x12c>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d906      	bls.n	80036ba <USB_SetTurnaroundTime+0x82>
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	4a2e      	ldr	r2, [pc, #184]	; (8003768 <USB_SetTurnaroundTime+0x130>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d802      	bhi.n	80036ba <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80036b4:	230b      	movs	r3, #11
 80036b6:	617b      	str	r3, [r7, #20]
 80036b8:	e036      	b.n	8003728 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	4a2a      	ldr	r2, [pc, #168]	; (8003768 <USB_SetTurnaroundTime+0x130>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d906      	bls.n	80036d0 <USB_SetTurnaroundTime+0x98>
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	4a29      	ldr	r2, [pc, #164]	; (800376c <USB_SetTurnaroundTime+0x134>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d802      	bhi.n	80036d0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80036ca:	230a      	movs	r3, #10
 80036cc:	617b      	str	r3, [r7, #20]
 80036ce:	e02b      	b.n	8003728 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	4a26      	ldr	r2, [pc, #152]	; (800376c <USB_SetTurnaroundTime+0x134>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d906      	bls.n	80036e6 <USB_SetTurnaroundTime+0xae>
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	4a25      	ldr	r2, [pc, #148]	; (8003770 <USB_SetTurnaroundTime+0x138>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d202      	bcs.n	80036e6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80036e0:	2309      	movs	r3, #9
 80036e2:	617b      	str	r3, [r7, #20]
 80036e4:	e020      	b.n	8003728 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	4a21      	ldr	r2, [pc, #132]	; (8003770 <USB_SetTurnaroundTime+0x138>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d306      	bcc.n	80036fc <USB_SetTurnaroundTime+0xc4>
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	4a20      	ldr	r2, [pc, #128]	; (8003774 <USB_SetTurnaroundTime+0x13c>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d802      	bhi.n	80036fc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80036f6:	2308      	movs	r3, #8
 80036f8:	617b      	str	r3, [r7, #20]
 80036fa:	e015      	b.n	8003728 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	4a1d      	ldr	r2, [pc, #116]	; (8003774 <USB_SetTurnaroundTime+0x13c>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d906      	bls.n	8003712 <USB_SetTurnaroundTime+0xda>
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	4a1c      	ldr	r2, [pc, #112]	; (8003778 <USB_SetTurnaroundTime+0x140>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d202      	bcs.n	8003712 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800370c:	2307      	movs	r3, #7
 800370e:	617b      	str	r3, [r7, #20]
 8003710:	e00a      	b.n	8003728 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003712:	2306      	movs	r3, #6
 8003714:	617b      	str	r3, [r7, #20]
 8003716:	e007      	b.n	8003728 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003718:	79fb      	ldrb	r3, [r7, #7]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d102      	bne.n	8003724 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800371e:	2309      	movs	r3, #9
 8003720:	617b      	str	r3, [r7, #20]
 8003722:	e001      	b.n	8003728 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003724:	2309      	movs	r3, #9
 8003726:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	68da      	ldr	r2, [r3, #12]
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	029b      	lsls	r3, r3, #10
 800373c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003740:	431a      	orrs	r2, r3
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003746:	2300      	movs	r3, #0
}
 8003748:	4618      	mov	r0, r3
 800374a:	371c      	adds	r7, #28
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr
 8003754:	00d8acbf 	.word	0x00d8acbf
 8003758:	00e4e1c0 	.word	0x00e4e1c0
 800375c:	00f42400 	.word	0x00f42400
 8003760:	01067380 	.word	0x01067380
 8003764:	011a499f 	.word	0x011a499f
 8003768:	01312cff 	.word	0x01312cff
 800376c:	014ca43f 	.word	0x014ca43f
 8003770:	016e3600 	.word	0x016e3600
 8003774:	01a6ab1f 	.word	0x01a6ab1f
 8003778:	01e84800 	.word	0x01e84800

0800377c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	f043 0201 	orr.w	r2, r3, #1
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	370c      	adds	r7, #12
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr

0800379e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800379e:	b480      	push	{r7}
 80037a0:	b083      	sub	sp, #12
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f023 0201 	bic.w	r2, r3, #1
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80037b2:	2300      	movs	r3, #0
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	460b      	mov	r3, r1
 80037ca:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80037cc:	2300      	movs	r3, #0
 80037ce:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80037dc:	78fb      	ldrb	r3, [r7, #3]
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d115      	bne.n	800380e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80037ee:	2001      	movs	r0, #1
 80037f0:	f7fd fa0a 	bl	8000c08 <HAL_Delay>
      ms++;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	3301      	adds	r3, #1
 80037f8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f001 fa45 	bl	8004c8a <USB_GetMode>
 8003800:	4603      	mov	r3, r0
 8003802:	2b01      	cmp	r3, #1
 8003804:	d01e      	beq.n	8003844 <USB_SetCurrentMode+0x84>
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2b31      	cmp	r3, #49	; 0x31
 800380a:	d9f0      	bls.n	80037ee <USB_SetCurrentMode+0x2e>
 800380c:	e01a      	b.n	8003844 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800380e:	78fb      	ldrb	r3, [r7, #3]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d115      	bne.n	8003840 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003820:	2001      	movs	r0, #1
 8003822:	f7fd f9f1 	bl	8000c08 <HAL_Delay>
      ms++;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	3301      	adds	r3, #1
 800382a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f001 fa2c 	bl	8004c8a <USB_GetMode>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d005      	beq.n	8003844 <USB_SetCurrentMode+0x84>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2b31      	cmp	r3, #49	; 0x31
 800383c:	d9f0      	bls.n	8003820 <USB_SetCurrentMode+0x60>
 800383e:	e001      	b.n	8003844 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e005      	b.n	8003850 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2b32      	cmp	r3, #50	; 0x32
 8003848:	d101      	bne.n	800384e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e000      	b.n	8003850 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800384e:	2300      	movs	r3, #0
}
 8003850:	4618      	mov	r0, r3
 8003852:	3710      	adds	r7, #16
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003858:	b084      	sub	sp, #16
 800385a:	b580      	push	{r7, lr}
 800385c:	b086      	sub	sp, #24
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
 8003862:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003866:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800386a:	2300      	movs	r3, #0
 800386c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003872:	2300      	movs	r3, #0
 8003874:	613b      	str	r3, [r7, #16]
 8003876:	e009      	b.n	800388c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	3340      	adds	r3, #64	; 0x40
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	4413      	add	r3, r2
 8003882:	2200      	movs	r2, #0
 8003884:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	3301      	adds	r3, #1
 800388a:	613b      	str	r3, [r7, #16]
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	2b0e      	cmp	r3, #14
 8003890:	d9f2      	bls.n	8003878 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003892:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003894:	2b00      	cmp	r3, #0
 8003896:	d11c      	bne.n	80038d2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038a6:	f043 0302 	orr.w	r3, r3, #2
 80038aa:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038bc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	639a      	str	r2, [r3, #56]	; 0x38
 80038d0:	e00b      	b.n	80038ea <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80038f0:	461a      	mov	r2, r3
 80038f2:	2300      	movs	r3, #0
 80038f4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038fc:	4619      	mov	r1, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003904:	461a      	mov	r2, r3
 8003906:	680b      	ldr	r3, [r1, #0]
 8003908:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800390a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800390c:	2b01      	cmp	r3, #1
 800390e:	d10c      	bne.n	800392a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003912:	2b00      	cmp	r3, #0
 8003914:	d104      	bne.n	8003920 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003916:	2100      	movs	r1, #0
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f000 f965 	bl	8003be8 <USB_SetDevSpeed>
 800391e:	e008      	b.n	8003932 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003920:	2101      	movs	r1, #1
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 f960 	bl	8003be8 <USB_SetDevSpeed>
 8003928:	e003      	b.n	8003932 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800392a:	2103      	movs	r1, #3
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 f95b 	bl	8003be8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003932:	2110      	movs	r1, #16
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f000 f8f3 	bl	8003b20 <USB_FlushTxFifo>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d001      	beq.n	8003944 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f000 f91f 	bl	8003b88 <USB_FlushRxFifo>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d001      	beq.n	8003954 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800395a:	461a      	mov	r2, r3
 800395c:	2300      	movs	r3, #0
 800395e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003966:	461a      	mov	r2, r3
 8003968:	2300      	movs	r3, #0
 800396a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003972:	461a      	mov	r2, r3
 8003974:	2300      	movs	r3, #0
 8003976:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003978:	2300      	movs	r3, #0
 800397a:	613b      	str	r3, [r7, #16]
 800397c:	e043      	b.n	8003a06 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	015a      	lsls	r2, r3, #5
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	4413      	add	r3, r2
 8003986:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003990:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003994:	d118      	bne.n	80039c8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d10a      	bne.n	80039b2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	015a      	lsls	r2, r3, #5
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	4413      	add	r3, r2
 80039a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039a8:	461a      	mov	r2, r3
 80039aa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80039ae:	6013      	str	r3, [r2, #0]
 80039b0:	e013      	b.n	80039da <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	015a      	lsls	r2, r3, #5
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	4413      	add	r3, r2
 80039ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039be:	461a      	mov	r2, r3
 80039c0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80039c4:	6013      	str	r3, [r2, #0]
 80039c6:	e008      	b.n	80039da <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	015a      	lsls	r2, r3, #5
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	4413      	add	r3, r2
 80039d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039d4:	461a      	mov	r2, r3
 80039d6:	2300      	movs	r3, #0
 80039d8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	015a      	lsls	r2, r3, #5
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	4413      	add	r3, r2
 80039e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039e6:	461a      	mov	r2, r3
 80039e8:	2300      	movs	r3, #0
 80039ea:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	015a      	lsls	r2, r3, #5
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	4413      	add	r3, r2
 80039f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039f8:	461a      	mov	r2, r3
 80039fa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80039fe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	3301      	adds	r3, #1
 8003a04:	613b      	str	r3, [r7, #16]
 8003a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a08:	693a      	ldr	r2, [r7, #16]
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d3b7      	bcc.n	800397e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a0e:	2300      	movs	r3, #0
 8003a10:	613b      	str	r3, [r7, #16]
 8003a12:	e043      	b.n	8003a9c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	015a      	lsls	r2, r3, #5
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a2a:	d118      	bne.n	8003a5e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d10a      	bne.n	8003a48 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	015a      	lsls	r2, r3, #5
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	4413      	add	r3, r2
 8003a3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a3e:	461a      	mov	r2, r3
 8003a40:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003a44:	6013      	str	r3, [r2, #0]
 8003a46:	e013      	b.n	8003a70 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	015a      	lsls	r2, r3, #5
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	4413      	add	r3, r2
 8003a50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a54:	461a      	mov	r2, r3
 8003a56:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003a5a:	6013      	str	r3, [r2, #0]
 8003a5c:	e008      	b.n	8003a70 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	015a      	lsls	r2, r3, #5
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	4413      	add	r3, r2
 8003a66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	015a      	lsls	r2, r3, #5
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	4413      	add	r3, r2
 8003a78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	2300      	movs	r3, #0
 8003a80:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	015a      	lsls	r2, r3, #5
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	4413      	add	r3, r2
 8003a8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a8e:	461a      	mov	r2, r3
 8003a90:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003a94:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	3301      	adds	r3, #1
 8003a9a:	613b      	str	r3, [r7, #16]
 8003a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9e:	693a      	ldr	r2, [r7, #16]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d3b7      	bcc.n	8003a14 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	68fa      	ldr	r2, [r7, #12]
 8003aae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ab2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ab6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003ac4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d105      	bne.n	8003ad8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	f043 0210 	orr.w	r2, r3, #16
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	699a      	ldr	r2, [r3, #24]
 8003adc:	4b0f      	ldr	r3, [pc, #60]	; (8003b1c <USB_DevInit+0x2c4>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003ae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d005      	beq.n	8003af6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	f043 0208 	orr.w	r2, r3, #8
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003af6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d107      	bne.n	8003b0c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	699b      	ldr	r3, [r3, #24]
 8003b00:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b04:	f043 0304 	orr.w	r3, r3, #4
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003b0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3718      	adds	r7, #24
 8003b12:	46bd      	mov	sp, r7
 8003b14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b18:	b004      	add	sp, #16
 8003b1a:	4770      	bx	lr
 8003b1c:	803c3800 	.word	0x803c3800

08003b20 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b085      	sub	sp, #20
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	3301      	adds	r3, #1
 8003b32:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	4a13      	ldr	r2, [pc, #76]	; (8003b84 <USB_FlushTxFifo+0x64>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d901      	bls.n	8003b40 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e01b      	b.n	8003b78 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	daf2      	bge.n	8003b2e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	019b      	lsls	r3, r3, #6
 8003b50:	f043 0220 	orr.w	r2, r3, #32
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	4a08      	ldr	r2, [pc, #32]	; (8003b84 <USB_FlushTxFifo+0x64>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d901      	bls.n	8003b6a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e006      	b.n	8003b78 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	f003 0320 	and.w	r3, r3, #32
 8003b72:	2b20      	cmp	r3, #32
 8003b74:	d0f0      	beq.n	8003b58 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3714      	adds	r7, #20
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr
 8003b84:	00030d40 	.word	0x00030d40

08003b88 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b085      	sub	sp, #20
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003b90:	2300      	movs	r3, #0
 8003b92:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	3301      	adds	r3, #1
 8003b98:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	4a11      	ldr	r2, [pc, #68]	; (8003be4 <USB_FlushRxFifo+0x5c>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d901      	bls.n	8003ba6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e018      	b.n	8003bd8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	daf2      	bge.n	8003b94 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2210      	movs	r2, #16
 8003bb6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	3301      	adds	r3, #1
 8003bbc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	4a08      	ldr	r2, [pc, #32]	; (8003be4 <USB_FlushRxFifo+0x5c>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d901      	bls.n	8003bca <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e006      	b.n	8003bd8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	f003 0310 	and.w	r3, r3, #16
 8003bd2:	2b10      	cmp	r3, #16
 8003bd4:	d0f0      	beq.n	8003bb8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003bd6:	2300      	movs	r3, #0
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3714      	adds	r7, #20
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr
 8003be4:	00030d40 	.word	0x00030d40

08003be8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b085      	sub	sp, #20
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	460b      	mov	r3, r1
 8003bf2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	78fb      	ldrb	r3, [r7, #3]
 8003c02:	68f9      	ldr	r1, [r7, #12]
 8003c04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3714      	adds	r7, #20
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr

08003c1a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003c1a:	b480      	push	{r7}
 8003c1c:	b087      	sub	sp, #28
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	f003 0306 	and.w	r3, r3, #6
 8003c32:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d102      	bne.n	8003c40 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	75fb      	strb	r3, [r7, #23]
 8003c3e:	e00a      	b.n	8003c56 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d002      	beq.n	8003c4c <USB_GetDevSpeed+0x32>
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2b06      	cmp	r3, #6
 8003c4a:	d102      	bne.n	8003c52 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	75fb      	strb	r3, [r7, #23]
 8003c50:	e001      	b.n	8003c56 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003c52:	230f      	movs	r3, #15
 8003c54:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003c56:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	371c      	adds	r7, #28
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	785b      	ldrb	r3, [r3, #1]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d13a      	bne.n	8003cf6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c86:	69da      	ldr	r2, [r3, #28]
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	f003 030f 	and.w	r3, r3, #15
 8003c90:	2101      	movs	r1, #1
 8003c92:	fa01 f303 	lsl.w	r3, r1, r3
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	68f9      	ldr	r1, [r7, #12]
 8003c9a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	015a      	lsls	r2, r3, #5
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	4413      	add	r3, r2
 8003caa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d155      	bne.n	8003d64 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	015a      	lsls	r2, r3, #5
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	4413      	add	r3, r2
 8003cc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	791b      	ldrb	r3, [r3, #4]
 8003cd2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003cd4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	059b      	lsls	r3, r3, #22
 8003cda:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	68ba      	ldr	r2, [r7, #8]
 8003ce0:	0151      	lsls	r1, r2, #5
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	440a      	add	r2, r1
 8003ce6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cf2:	6013      	str	r3, [r2, #0]
 8003cf4:	e036      	b.n	8003d64 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cfc:	69da      	ldr	r2, [r3, #28]
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	f003 030f 	and.w	r3, r3, #15
 8003d06:	2101      	movs	r1, #1
 8003d08:	fa01 f303 	lsl.w	r3, r1, r3
 8003d0c:	041b      	lsls	r3, r3, #16
 8003d0e:	68f9      	ldr	r1, [r7, #12]
 8003d10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d14:	4313      	orrs	r3, r2
 8003d16:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	015a      	lsls	r2, r3, #5
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	4413      	add	r3, r2
 8003d20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d11a      	bne.n	8003d64 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	015a      	lsls	r2, r3, #5
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	4413      	add	r3, r2
 8003d36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	791b      	ldrb	r3, [r3, #4]
 8003d48:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003d4a:	430b      	orrs	r3, r1
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	68ba      	ldr	r2, [r7, #8]
 8003d50:	0151      	lsls	r1, r2, #5
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	440a      	add	r2, r1
 8003d56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d62:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3714      	adds	r7, #20
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
	...

08003d74 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b085      	sub	sp, #20
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	785b      	ldrb	r3, [r3, #1]
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d161      	bne.n	8003e54 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	015a      	lsls	r2, r3, #5
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	4413      	add	r3, r2
 8003d98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003da2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003da6:	d11f      	bne.n	8003de8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	015a      	lsls	r2, r3, #5
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	4413      	add	r3, r2
 8003db0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68ba      	ldr	r2, [r7, #8]
 8003db8:	0151      	lsls	r1, r2, #5
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	440a      	add	r2, r1
 8003dbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dc2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003dc6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	015a      	lsls	r2, r3, #5
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	4413      	add	r3, r2
 8003dd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68ba      	ldr	r2, [r7, #8]
 8003dd8:	0151      	lsls	r1, r2, #5
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	440a      	add	r2, r1
 8003dde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003de2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003de6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	f003 030f 	and.w	r3, r3, #15
 8003df8:	2101      	movs	r1, #1
 8003dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	43db      	mvns	r3, r3
 8003e02:	68f9      	ldr	r1, [r7, #12]
 8003e04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e08:	4013      	ands	r3, r2
 8003e0a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e12:	69da      	ldr	r2, [r3, #28]
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	f003 030f 	and.w	r3, r3, #15
 8003e1c:	2101      	movs	r1, #1
 8003e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	43db      	mvns	r3, r3
 8003e26:	68f9      	ldr	r1, [r7, #12]
 8003e28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	015a      	lsls	r2, r3, #5
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	4413      	add	r3, r2
 8003e38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	0159      	lsls	r1, r3, #5
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	440b      	add	r3, r1
 8003e46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	4b35      	ldr	r3, [pc, #212]	; (8003f24 <USB_DeactivateEndpoint+0x1b0>)
 8003e4e:	4013      	ands	r3, r2
 8003e50:	600b      	str	r3, [r1, #0]
 8003e52:	e060      	b.n	8003f16 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	015a      	lsls	r2, r3, #5
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	4413      	add	r3, r2
 8003e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e6a:	d11f      	bne.n	8003eac <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	015a      	lsls	r2, r3, #5
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	4413      	add	r3, r2
 8003e74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68ba      	ldr	r2, [r7, #8]
 8003e7c:	0151      	lsls	r1, r2, #5
 8003e7e:	68fa      	ldr	r2, [r7, #12]
 8003e80:	440a      	add	r2, r1
 8003e82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e86:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003e8a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	015a      	lsls	r2, r3, #5
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	4413      	add	r3, r2
 8003e94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68ba      	ldr	r2, [r7, #8]
 8003e9c:	0151      	lsls	r1, r2, #5
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	440a      	add	r2, r1
 8003ea2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ea6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003eaa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	f003 030f 	and.w	r3, r3, #15
 8003ebc:	2101      	movs	r1, #1
 8003ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8003ec2:	041b      	lsls	r3, r3, #16
 8003ec4:	43db      	mvns	r3, r3
 8003ec6:	68f9      	ldr	r1, [r7, #12]
 8003ec8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ecc:	4013      	ands	r3, r2
 8003ece:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ed6:	69da      	ldr	r2, [r3, #28]
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	f003 030f 	and.w	r3, r3, #15
 8003ee0:	2101      	movs	r1, #1
 8003ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ee6:	041b      	lsls	r3, r3, #16
 8003ee8:	43db      	mvns	r3, r3
 8003eea:	68f9      	ldr	r1, [r7, #12]
 8003eec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	015a      	lsls	r2, r3, #5
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	4413      	add	r3, r2
 8003efc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	0159      	lsls	r1, r3, #5
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	440b      	add	r3, r1
 8003f0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f0e:	4619      	mov	r1, r3
 8003f10:	4b05      	ldr	r3, [pc, #20]	; (8003f28 <USB_DeactivateEndpoint+0x1b4>)
 8003f12:	4013      	ands	r3, r2
 8003f14:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003f16:	2300      	movs	r3, #0
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3714      	adds	r7, #20
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr
 8003f24:	ec337800 	.word	0xec337800
 8003f28:	eff37800 	.word	0xeff37800

08003f2c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b08a      	sub	sp, #40	; 0x28
 8003f30:	af02      	add	r7, sp, #8
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	4613      	mov	r3, r2
 8003f38:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	785b      	ldrb	r3, [r3, #1]
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	f040 815c 	bne.w	8004206 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d132      	bne.n	8003fbc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	015a      	lsls	r2, r3, #5
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	4413      	add	r3, r2
 8003f5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f62:	691b      	ldr	r3, [r3, #16]
 8003f64:	69ba      	ldr	r2, [r7, #24]
 8003f66:	0151      	lsls	r1, r2, #5
 8003f68:	69fa      	ldr	r2, [r7, #28]
 8003f6a:	440a      	add	r2, r1
 8003f6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f70:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003f74:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003f78:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	015a      	lsls	r2, r3, #5
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	4413      	add	r3, r2
 8003f82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f86:	691b      	ldr	r3, [r3, #16]
 8003f88:	69ba      	ldr	r2, [r7, #24]
 8003f8a:	0151      	lsls	r1, r2, #5
 8003f8c:	69fa      	ldr	r2, [r7, #28]
 8003f8e:	440a      	add	r2, r1
 8003f90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f94:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003f98:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	015a      	lsls	r2, r3, #5
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	69ba      	ldr	r2, [r7, #24]
 8003faa:	0151      	lsls	r1, r2, #5
 8003fac:	69fa      	ldr	r2, [r7, #28]
 8003fae:	440a      	add	r2, r1
 8003fb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fb4:	0cdb      	lsrs	r3, r3, #19
 8003fb6:	04db      	lsls	r3, r3, #19
 8003fb8:	6113      	str	r3, [r2, #16]
 8003fba:	e074      	b.n	80040a6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	015a      	lsls	r2, r3, #5
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	69ba      	ldr	r2, [r7, #24]
 8003fcc:	0151      	lsls	r1, r2, #5
 8003fce:	69fa      	ldr	r2, [r7, #28]
 8003fd0:	440a      	add	r2, r1
 8003fd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fd6:	0cdb      	lsrs	r3, r3, #19
 8003fd8:	04db      	lsls	r3, r3, #19
 8003fda:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	015a      	lsls	r2, r3, #5
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	69ba      	ldr	r2, [r7, #24]
 8003fec:	0151      	lsls	r1, r2, #5
 8003fee:	69fa      	ldr	r2, [r7, #28]
 8003ff0:	440a      	add	r2, r1
 8003ff2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ff6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003ffa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003ffe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	015a      	lsls	r2, r3, #5
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	4413      	add	r3, r2
 8004008:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800400c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	6999      	ldr	r1, [r3, #24]
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	440b      	add	r3, r1
 8004018:	1e59      	subs	r1, r3, #1
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004022:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004024:	4b9d      	ldr	r3, [pc, #628]	; (800429c <USB_EPStartXfer+0x370>)
 8004026:	400b      	ands	r3, r1
 8004028:	69b9      	ldr	r1, [r7, #24]
 800402a:	0148      	lsls	r0, r1, #5
 800402c:	69f9      	ldr	r1, [r7, #28]
 800402e:	4401      	add	r1, r0
 8004030:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004034:	4313      	orrs	r3, r2
 8004036:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	015a      	lsls	r2, r3, #5
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	4413      	add	r3, r2
 8004040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004044:	691a      	ldr	r2, [r3, #16]
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	699b      	ldr	r3, [r3, #24]
 800404a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800404e:	69b9      	ldr	r1, [r7, #24]
 8004050:	0148      	lsls	r0, r1, #5
 8004052:	69f9      	ldr	r1, [r7, #28]
 8004054:	4401      	add	r1, r0
 8004056:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800405a:	4313      	orrs	r3, r2
 800405c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	791b      	ldrb	r3, [r3, #4]
 8004062:	2b01      	cmp	r3, #1
 8004064:	d11f      	bne.n	80040a6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004066:	69bb      	ldr	r3, [r7, #24]
 8004068:	015a      	lsls	r2, r3, #5
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	4413      	add	r3, r2
 800406e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004072:	691b      	ldr	r3, [r3, #16]
 8004074:	69ba      	ldr	r2, [r7, #24]
 8004076:	0151      	lsls	r1, r2, #5
 8004078:	69fa      	ldr	r2, [r7, #28]
 800407a:	440a      	add	r2, r1
 800407c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004080:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004084:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	015a      	lsls	r2, r3, #5
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	4413      	add	r3, r2
 800408e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	69ba      	ldr	r2, [r7, #24]
 8004096:	0151      	lsls	r1, r2, #5
 8004098:	69fa      	ldr	r2, [r7, #28]
 800409a:	440a      	add	r2, r1
 800409c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80040a4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80040a6:	79fb      	ldrb	r3, [r7, #7]
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d14b      	bne.n	8004144 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	695b      	ldr	r3, [r3, #20]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d009      	beq.n	80040c8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	015a      	lsls	r2, r3, #5
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	4413      	add	r3, r2
 80040bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040c0:	461a      	mov	r2, r3
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	695b      	ldr	r3, [r3, #20]
 80040c6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	791b      	ldrb	r3, [r3, #4]
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d128      	bne.n	8004122 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d110      	bne.n	8004102 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	015a      	lsls	r2, r3, #5
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	4413      	add	r3, r2
 80040e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	69ba      	ldr	r2, [r7, #24]
 80040f0:	0151      	lsls	r1, r2, #5
 80040f2:	69fa      	ldr	r2, [r7, #28]
 80040f4:	440a      	add	r2, r1
 80040f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040fa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80040fe:	6013      	str	r3, [r2, #0]
 8004100:	e00f      	b.n	8004122 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	015a      	lsls	r2, r3, #5
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	4413      	add	r3, r2
 800410a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	69ba      	ldr	r2, [r7, #24]
 8004112:	0151      	lsls	r1, r2, #5
 8004114:	69fa      	ldr	r2, [r7, #28]
 8004116:	440a      	add	r2, r1
 8004118:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800411c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004120:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	015a      	lsls	r2, r3, #5
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	4413      	add	r3, r2
 800412a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	69ba      	ldr	r2, [r7, #24]
 8004132:	0151      	lsls	r1, r2, #5
 8004134:	69fa      	ldr	r2, [r7, #28]
 8004136:	440a      	add	r2, r1
 8004138:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800413c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004140:	6013      	str	r3, [r2, #0]
 8004142:	e133      	b.n	80043ac <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	015a      	lsls	r2, r3, #5
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	4413      	add	r3, r2
 800414c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	69ba      	ldr	r2, [r7, #24]
 8004154:	0151      	lsls	r1, r2, #5
 8004156:	69fa      	ldr	r2, [r7, #28]
 8004158:	440a      	add	r2, r1
 800415a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800415e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004162:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	791b      	ldrb	r3, [r3, #4]
 8004168:	2b01      	cmp	r3, #1
 800416a:	d015      	beq.n	8004198 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	2b00      	cmp	r3, #0
 8004172:	f000 811b 	beq.w	80043ac <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800417c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	f003 030f 	and.w	r3, r3, #15
 8004186:	2101      	movs	r1, #1
 8004188:	fa01 f303 	lsl.w	r3, r1, r3
 800418c:	69f9      	ldr	r1, [r7, #28]
 800418e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004192:	4313      	orrs	r3, r2
 8004194:	634b      	str	r3, [r1, #52]	; 0x34
 8004196:	e109      	b.n	80043ac <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d110      	bne.n	80041ca <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	015a      	lsls	r2, r3, #5
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	4413      	add	r3, r2
 80041b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	69ba      	ldr	r2, [r7, #24]
 80041b8:	0151      	lsls	r1, r2, #5
 80041ba:	69fa      	ldr	r2, [r7, #28]
 80041bc:	440a      	add	r2, r1
 80041be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80041c6:	6013      	str	r3, [r2, #0]
 80041c8:	e00f      	b.n	80041ea <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	015a      	lsls	r2, r3, #5
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	4413      	add	r3, r2
 80041d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	69ba      	ldr	r2, [r7, #24]
 80041da:	0151      	lsls	r1, r2, #5
 80041dc:	69fa      	ldr	r2, [r7, #28]
 80041de:	440a      	add	r2, r1
 80041e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041e8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	6919      	ldr	r1, [r3, #16]
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	781a      	ldrb	r2, [r3, #0]
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	b298      	uxth	r0, r3
 80041f8:	79fb      	ldrb	r3, [r7, #7]
 80041fa:	9300      	str	r3, [sp, #0]
 80041fc:	4603      	mov	r3, r0
 80041fe:	68f8      	ldr	r0, [r7, #12]
 8004200:	f000 fade 	bl	80047c0 <USB_WritePacket>
 8004204:	e0d2      	b.n	80043ac <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	015a      	lsls	r2, r3, #5
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	4413      	add	r3, r2
 800420e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004212:	691b      	ldr	r3, [r3, #16]
 8004214:	69ba      	ldr	r2, [r7, #24]
 8004216:	0151      	lsls	r1, r2, #5
 8004218:	69fa      	ldr	r2, [r7, #28]
 800421a:	440a      	add	r2, r1
 800421c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004220:	0cdb      	lsrs	r3, r3, #19
 8004222:	04db      	lsls	r3, r3, #19
 8004224:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	015a      	lsls	r2, r3, #5
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	4413      	add	r3, r2
 800422e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	69ba      	ldr	r2, [r7, #24]
 8004236:	0151      	lsls	r1, r2, #5
 8004238:	69fa      	ldr	r2, [r7, #28]
 800423a:	440a      	add	r2, r1
 800423c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004240:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004244:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004248:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d126      	bne.n	80042a0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	015a      	lsls	r2, r3, #5
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	4413      	add	r3, r2
 800425a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800425e:	691a      	ldr	r2, [r3, #16]
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004268:	69b9      	ldr	r1, [r7, #24]
 800426a:	0148      	lsls	r0, r1, #5
 800426c:	69f9      	ldr	r1, [r7, #28]
 800426e:	4401      	add	r1, r0
 8004270:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004274:	4313      	orrs	r3, r2
 8004276:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	015a      	lsls	r2, r3, #5
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	4413      	add	r3, r2
 8004280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	69ba      	ldr	r2, [r7, #24]
 8004288:	0151      	lsls	r1, r2, #5
 800428a:	69fa      	ldr	r2, [r7, #28]
 800428c:	440a      	add	r2, r1
 800428e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004292:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004296:	6113      	str	r3, [r2, #16]
 8004298:	e03a      	b.n	8004310 <USB_EPStartXfer+0x3e4>
 800429a:	bf00      	nop
 800429c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	699a      	ldr	r2, [r3, #24]
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	4413      	add	r3, r2
 80042aa:	1e5a      	subs	r2, r3, #1
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042b4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	8afa      	ldrh	r2, [r7, #22]
 80042bc:	fb03 f202 	mul.w	r2, r3, r2
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	015a      	lsls	r2, r3, #5
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	4413      	add	r3, r2
 80042cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042d0:	691a      	ldr	r2, [r3, #16]
 80042d2:	8afb      	ldrh	r3, [r7, #22]
 80042d4:	04d9      	lsls	r1, r3, #19
 80042d6:	4b38      	ldr	r3, [pc, #224]	; (80043b8 <USB_EPStartXfer+0x48c>)
 80042d8:	400b      	ands	r3, r1
 80042da:	69b9      	ldr	r1, [r7, #24]
 80042dc:	0148      	lsls	r0, r1, #5
 80042de:	69f9      	ldr	r1, [r7, #28]
 80042e0:	4401      	add	r1, r0
 80042e2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80042e6:	4313      	orrs	r3, r2
 80042e8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	015a      	lsls	r2, r3, #5
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	4413      	add	r3, r2
 80042f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042f6:	691a      	ldr	r2, [r3, #16]
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	69db      	ldr	r3, [r3, #28]
 80042fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004300:	69b9      	ldr	r1, [r7, #24]
 8004302:	0148      	lsls	r0, r1, #5
 8004304:	69f9      	ldr	r1, [r7, #28]
 8004306:	4401      	add	r1, r0
 8004308:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800430c:	4313      	orrs	r3, r2
 800430e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004310:	79fb      	ldrb	r3, [r7, #7]
 8004312:	2b01      	cmp	r3, #1
 8004314:	d10d      	bne.n	8004332 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d009      	beq.n	8004332 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	6919      	ldr	r1, [r3, #16]
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	015a      	lsls	r2, r3, #5
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	4413      	add	r3, r2
 800432a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800432e:	460a      	mov	r2, r1
 8004330:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	791b      	ldrb	r3, [r3, #4]
 8004336:	2b01      	cmp	r3, #1
 8004338:	d128      	bne.n	800438c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004346:	2b00      	cmp	r3, #0
 8004348:	d110      	bne.n	800436c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	015a      	lsls	r2, r3, #5
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	4413      	add	r3, r2
 8004352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	69ba      	ldr	r2, [r7, #24]
 800435a:	0151      	lsls	r1, r2, #5
 800435c:	69fa      	ldr	r2, [r7, #28]
 800435e:	440a      	add	r2, r1
 8004360:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004364:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004368:	6013      	str	r3, [r2, #0]
 800436a:	e00f      	b.n	800438c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800436c:	69bb      	ldr	r3, [r7, #24]
 800436e:	015a      	lsls	r2, r3, #5
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	4413      	add	r3, r2
 8004374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	69ba      	ldr	r2, [r7, #24]
 800437c:	0151      	lsls	r1, r2, #5
 800437e:	69fa      	ldr	r2, [r7, #28]
 8004380:	440a      	add	r2, r1
 8004382:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004386:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800438a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	015a      	lsls	r2, r3, #5
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	4413      	add	r3, r2
 8004394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	69ba      	ldr	r2, [r7, #24]
 800439c:	0151      	lsls	r1, r2, #5
 800439e:	69fa      	ldr	r2, [r7, #28]
 80043a0:	440a      	add	r2, r1
 80043a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043a6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80043aa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3720      	adds	r7, #32
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	1ff80000 	.word	0x1ff80000

080043bc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80043bc:	b480      	push	{r7}
 80043be:	b087      	sub	sp, #28
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	4613      	mov	r3, r2
 80043c8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	785b      	ldrb	r3, [r3, #1]
 80043d8:	2b01      	cmp	r3, #1
 80043da:	f040 80ce 	bne.w	800457a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d132      	bne.n	800444c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	015a      	lsls	r2, r3, #5
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	4413      	add	r3, r2
 80043ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043f2:	691b      	ldr	r3, [r3, #16]
 80043f4:	693a      	ldr	r2, [r7, #16]
 80043f6:	0151      	lsls	r1, r2, #5
 80043f8:	697a      	ldr	r2, [r7, #20]
 80043fa:	440a      	add	r2, r1
 80043fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004400:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004404:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004408:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	015a      	lsls	r2, r3, #5
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	4413      	add	r3, r2
 8004412:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004416:	691b      	ldr	r3, [r3, #16]
 8004418:	693a      	ldr	r2, [r7, #16]
 800441a:	0151      	lsls	r1, r2, #5
 800441c:	697a      	ldr	r2, [r7, #20]
 800441e:	440a      	add	r2, r1
 8004420:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004424:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004428:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	015a      	lsls	r2, r3, #5
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	4413      	add	r3, r2
 8004432:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004436:	691b      	ldr	r3, [r3, #16]
 8004438:	693a      	ldr	r2, [r7, #16]
 800443a:	0151      	lsls	r1, r2, #5
 800443c:	697a      	ldr	r2, [r7, #20]
 800443e:	440a      	add	r2, r1
 8004440:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004444:	0cdb      	lsrs	r3, r3, #19
 8004446:	04db      	lsls	r3, r3, #19
 8004448:	6113      	str	r3, [r2, #16]
 800444a:	e04e      	b.n	80044ea <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	015a      	lsls	r2, r3, #5
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	4413      	add	r3, r2
 8004454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	693a      	ldr	r2, [r7, #16]
 800445c:	0151      	lsls	r1, r2, #5
 800445e:	697a      	ldr	r2, [r7, #20]
 8004460:	440a      	add	r2, r1
 8004462:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004466:	0cdb      	lsrs	r3, r3, #19
 8004468:	04db      	lsls	r3, r3, #19
 800446a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	015a      	lsls	r2, r3, #5
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	4413      	add	r3, r2
 8004474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	693a      	ldr	r2, [r7, #16]
 800447c:	0151      	lsls	r1, r2, #5
 800447e:	697a      	ldr	r2, [r7, #20]
 8004480:	440a      	add	r2, r1
 8004482:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004486:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800448a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800448e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	699a      	ldr	r2, [r3, #24]
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	429a      	cmp	r2, r3
 800449a:	d903      	bls.n	80044a4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	68da      	ldr	r2, [r3, #12]
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	015a      	lsls	r2, r3, #5
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	4413      	add	r3, r2
 80044ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	693a      	ldr	r2, [r7, #16]
 80044b4:	0151      	lsls	r1, r2, #5
 80044b6:	697a      	ldr	r2, [r7, #20]
 80044b8:	440a      	add	r2, r1
 80044ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80044c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	015a      	lsls	r2, r3, #5
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	4413      	add	r3, r2
 80044cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044d0:	691a      	ldr	r2, [r3, #16]
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	699b      	ldr	r3, [r3, #24]
 80044d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044da:	6939      	ldr	r1, [r7, #16]
 80044dc:	0148      	lsls	r0, r1, #5
 80044de:	6979      	ldr	r1, [r7, #20]
 80044e0:	4401      	add	r1, r0
 80044e2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80044e6:	4313      	orrs	r3, r2
 80044e8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80044ea:	79fb      	ldrb	r3, [r7, #7]
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d11e      	bne.n	800452e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	695b      	ldr	r3, [r3, #20]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d009      	beq.n	800450c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	015a      	lsls	r2, r3, #5
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	4413      	add	r3, r2
 8004500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004504:	461a      	mov	r2, r3
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	695b      	ldr	r3, [r3, #20]
 800450a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	015a      	lsls	r2, r3, #5
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	4413      	add	r3, r2
 8004514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	693a      	ldr	r2, [r7, #16]
 800451c:	0151      	lsls	r1, r2, #5
 800451e:	697a      	ldr	r2, [r7, #20]
 8004520:	440a      	add	r2, r1
 8004522:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004526:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800452a:	6013      	str	r3, [r2, #0]
 800452c:	e097      	b.n	800465e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	015a      	lsls	r2, r3, #5
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	4413      	add	r3, r2
 8004536:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	693a      	ldr	r2, [r7, #16]
 800453e:	0151      	lsls	r1, r2, #5
 8004540:	697a      	ldr	r2, [r7, #20]
 8004542:	440a      	add	r2, r1
 8004544:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004548:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800454c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	2b00      	cmp	r3, #0
 8004554:	f000 8083 	beq.w	800465e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800455e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	f003 030f 	and.w	r3, r3, #15
 8004568:	2101      	movs	r1, #1
 800456a:	fa01 f303 	lsl.w	r3, r1, r3
 800456e:	6979      	ldr	r1, [r7, #20]
 8004570:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004574:	4313      	orrs	r3, r2
 8004576:	634b      	str	r3, [r1, #52]	; 0x34
 8004578:	e071      	b.n	800465e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	015a      	lsls	r2, r3, #5
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	4413      	add	r3, r2
 8004582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	0151      	lsls	r1, r2, #5
 800458c:	697a      	ldr	r2, [r7, #20]
 800458e:	440a      	add	r2, r1
 8004590:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004594:	0cdb      	lsrs	r3, r3, #19
 8004596:	04db      	lsls	r3, r3, #19
 8004598:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	015a      	lsls	r2, r3, #5
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	4413      	add	r3, r2
 80045a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045a6:	691b      	ldr	r3, [r3, #16]
 80045a8:	693a      	ldr	r2, [r7, #16]
 80045aa:	0151      	lsls	r1, r2, #5
 80045ac:	697a      	ldr	r2, [r7, #20]
 80045ae:	440a      	add	r2, r1
 80045b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045b4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80045b8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80045bc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	699b      	ldr	r3, [r3, #24]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d003      	beq.n	80045ce <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	68da      	ldr	r2, [r3, #12]
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	68da      	ldr	r2, [r3, #12]
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	015a      	lsls	r2, r3, #5
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	4413      	add	r3, r2
 80045de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	693a      	ldr	r2, [r7, #16]
 80045e6:	0151      	lsls	r1, r2, #5
 80045e8:	697a      	ldr	r2, [r7, #20]
 80045ea:	440a      	add	r2, r1
 80045ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80045f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	015a      	lsls	r2, r3, #5
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	4413      	add	r3, r2
 80045fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004602:	691a      	ldr	r2, [r3, #16]
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	69db      	ldr	r3, [r3, #28]
 8004608:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800460c:	6939      	ldr	r1, [r7, #16]
 800460e:	0148      	lsls	r0, r1, #5
 8004610:	6979      	ldr	r1, [r7, #20]
 8004612:	4401      	add	r1, r0
 8004614:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004618:	4313      	orrs	r3, r2
 800461a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800461c:	79fb      	ldrb	r3, [r7, #7]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d10d      	bne.n	800463e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d009      	beq.n	800463e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	6919      	ldr	r1, [r3, #16]
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	015a      	lsls	r2, r3, #5
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	4413      	add	r3, r2
 8004636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800463a:	460a      	mov	r2, r1
 800463c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	015a      	lsls	r2, r3, #5
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	4413      	add	r3, r2
 8004646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	693a      	ldr	r2, [r7, #16]
 800464e:	0151      	lsls	r1, r2, #5
 8004650:	697a      	ldr	r2, [r7, #20]
 8004652:	440a      	add	r2, r1
 8004654:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004658:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800465c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800465e:	2300      	movs	r3, #0
}
 8004660:	4618      	mov	r0, r3
 8004662:	371c      	adds	r7, #28
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800466c:	b480      	push	{r7}
 800466e:	b087      	sub	sp, #28
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004676:	2300      	movs	r3, #0
 8004678:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800467a:	2300      	movs	r3, #0
 800467c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	785b      	ldrb	r3, [r3, #1]
 8004686:	2b01      	cmp	r3, #1
 8004688:	d14a      	bne.n	8004720 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	015a      	lsls	r2, r3, #5
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	4413      	add	r3, r2
 8004694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800469e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046a2:	f040 8086 	bne.w	80047b2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	015a      	lsls	r2, r3, #5
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	4413      	add	r3, r2
 80046b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	683a      	ldr	r2, [r7, #0]
 80046b8:	7812      	ldrb	r2, [r2, #0]
 80046ba:	0151      	lsls	r1, r2, #5
 80046bc:	693a      	ldr	r2, [r7, #16]
 80046be:	440a      	add	r2, r1
 80046c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046c4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80046c8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	015a      	lsls	r2, r3, #5
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	4413      	add	r3, r2
 80046d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	683a      	ldr	r2, [r7, #0]
 80046dc:	7812      	ldrb	r2, [r2, #0]
 80046de:	0151      	lsls	r1, r2, #5
 80046e0:	693a      	ldr	r2, [r7, #16]
 80046e2:	440a      	add	r2, r1
 80046e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80046ec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	3301      	adds	r3, #1
 80046f2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f242 7210 	movw	r2, #10000	; 0x2710
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d902      	bls.n	8004704 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	75fb      	strb	r3, [r7, #23]
          break;
 8004702:	e056      	b.n	80047b2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	015a      	lsls	r2, r3, #5
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	4413      	add	r3, r2
 800470e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004718:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800471c:	d0e7      	beq.n	80046ee <USB_EPStopXfer+0x82>
 800471e:	e048      	b.n	80047b2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	015a      	lsls	r2, r3, #5
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	4413      	add	r3, r2
 800472a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004734:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004738:	d13b      	bne.n	80047b2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	015a      	lsls	r2, r3, #5
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	4413      	add	r3, r2
 8004744:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	683a      	ldr	r2, [r7, #0]
 800474c:	7812      	ldrb	r2, [r2, #0]
 800474e:	0151      	lsls	r1, r2, #5
 8004750:	693a      	ldr	r2, [r7, #16]
 8004752:	440a      	add	r2, r1
 8004754:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004758:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800475c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	015a      	lsls	r2, r3, #5
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	4413      	add	r3, r2
 8004768:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	683a      	ldr	r2, [r7, #0]
 8004770:	7812      	ldrb	r2, [r2, #0]
 8004772:	0151      	lsls	r1, r2, #5
 8004774:	693a      	ldr	r2, [r7, #16]
 8004776:	440a      	add	r2, r1
 8004778:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800477c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004780:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	3301      	adds	r3, #1
 8004786:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f242 7210 	movw	r2, #10000	; 0x2710
 800478e:	4293      	cmp	r3, r2
 8004790:	d902      	bls.n	8004798 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	75fb      	strb	r3, [r7, #23]
          break;
 8004796:	e00c      	b.n	80047b2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	015a      	lsls	r2, r3, #5
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	4413      	add	r3, r2
 80047a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047b0:	d0e7      	beq.n	8004782 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80047b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	371c      	adds	r7, #28
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b089      	sub	sp, #36	; 0x24
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	60b9      	str	r1, [r7, #8]
 80047ca:	4611      	mov	r1, r2
 80047cc:	461a      	mov	r2, r3
 80047ce:	460b      	mov	r3, r1
 80047d0:	71fb      	strb	r3, [r7, #7]
 80047d2:	4613      	mov	r3, r2
 80047d4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80047de:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d123      	bne.n	800482e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80047e6:	88bb      	ldrh	r3, [r7, #4]
 80047e8:	3303      	adds	r3, #3
 80047ea:	089b      	lsrs	r3, r3, #2
 80047ec:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80047ee:	2300      	movs	r3, #0
 80047f0:	61bb      	str	r3, [r7, #24]
 80047f2:	e018      	b.n	8004826 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80047f4:	79fb      	ldrb	r3, [r7, #7]
 80047f6:	031a      	lsls	r2, r3, #12
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	4413      	add	r3, r2
 80047fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004800:	461a      	mov	r2, r3
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	3301      	adds	r3, #1
 800480c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	3301      	adds	r3, #1
 8004812:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	3301      	adds	r3, #1
 8004818:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	3301      	adds	r3, #1
 800481e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004820:	69bb      	ldr	r3, [r7, #24]
 8004822:	3301      	adds	r3, #1
 8004824:	61bb      	str	r3, [r7, #24]
 8004826:	69ba      	ldr	r2, [r7, #24]
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	429a      	cmp	r2, r3
 800482c:	d3e2      	bcc.n	80047f4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800482e:	2300      	movs	r3, #0
}
 8004830:	4618      	mov	r0, r3
 8004832:	3724      	adds	r7, #36	; 0x24
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800483c:	b480      	push	{r7}
 800483e:	b08b      	sub	sp, #44	; 0x2c
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	4613      	mov	r3, r2
 8004848:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004852:	88fb      	ldrh	r3, [r7, #6]
 8004854:	089b      	lsrs	r3, r3, #2
 8004856:	b29b      	uxth	r3, r3
 8004858:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800485a:	88fb      	ldrh	r3, [r7, #6]
 800485c:	f003 0303 	and.w	r3, r3, #3
 8004860:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004862:	2300      	movs	r3, #0
 8004864:	623b      	str	r3, [r7, #32]
 8004866:	e014      	b.n	8004892 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004872:	601a      	str	r2, [r3, #0]
    pDest++;
 8004874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004876:	3301      	adds	r3, #1
 8004878:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800487a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487c:	3301      	adds	r3, #1
 800487e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004882:	3301      	adds	r3, #1
 8004884:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004888:	3301      	adds	r3, #1
 800488a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800488c:	6a3b      	ldr	r3, [r7, #32]
 800488e:	3301      	adds	r3, #1
 8004890:	623b      	str	r3, [r7, #32]
 8004892:	6a3a      	ldr	r2, [r7, #32]
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	429a      	cmp	r2, r3
 8004898:	d3e6      	bcc.n	8004868 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800489a:	8bfb      	ldrh	r3, [r7, #30]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d01e      	beq.n	80048de <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80048a0:	2300      	movs	r3, #0
 80048a2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048aa:	461a      	mov	r2, r3
 80048ac:	f107 0310 	add.w	r3, r7, #16
 80048b0:	6812      	ldr	r2, [r2, #0]
 80048b2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80048b4:	693a      	ldr	r2, [r7, #16]
 80048b6:	6a3b      	ldr	r3, [r7, #32]
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	00db      	lsls	r3, r3, #3
 80048bc:	fa22 f303 	lsr.w	r3, r2, r3
 80048c0:	b2da      	uxtb	r2, r3
 80048c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c4:	701a      	strb	r2, [r3, #0]
      i++;
 80048c6:	6a3b      	ldr	r3, [r7, #32]
 80048c8:	3301      	adds	r3, #1
 80048ca:	623b      	str	r3, [r7, #32]
      pDest++;
 80048cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ce:	3301      	adds	r3, #1
 80048d0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80048d2:	8bfb      	ldrh	r3, [r7, #30]
 80048d4:	3b01      	subs	r3, #1
 80048d6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80048d8:	8bfb      	ldrh	r3, [r7, #30]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d1ea      	bne.n	80048b4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80048de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	372c      	adds	r7, #44	; 0x2c
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b085      	sub	sp, #20
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	785b      	ldrb	r3, [r3, #1]
 8004904:	2b01      	cmp	r3, #1
 8004906:	d12c      	bne.n	8004962 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	015a      	lsls	r2, r3, #5
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	4413      	add	r3, r2
 8004910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2b00      	cmp	r3, #0
 8004918:	db12      	blt.n	8004940 <USB_EPSetStall+0x54>
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d00f      	beq.n	8004940 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	015a      	lsls	r2, r3, #5
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	4413      	add	r3, r2
 8004928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68ba      	ldr	r2, [r7, #8]
 8004930:	0151      	lsls	r1, r2, #5
 8004932:	68fa      	ldr	r2, [r7, #12]
 8004934:	440a      	add	r2, r1
 8004936:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800493a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800493e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	015a      	lsls	r2, r3, #5
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	4413      	add	r3, r2
 8004948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	68ba      	ldr	r2, [r7, #8]
 8004950:	0151      	lsls	r1, r2, #5
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	440a      	add	r2, r1
 8004956:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800495a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800495e:	6013      	str	r3, [r2, #0]
 8004960:	e02b      	b.n	80049ba <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	015a      	lsls	r2, r3, #5
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	4413      	add	r3, r2
 800496a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2b00      	cmp	r3, #0
 8004972:	db12      	blt.n	800499a <USB_EPSetStall+0xae>
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d00f      	beq.n	800499a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	015a      	lsls	r2, r3, #5
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	4413      	add	r3, r2
 8004982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	68ba      	ldr	r2, [r7, #8]
 800498a:	0151      	lsls	r1, r2, #5
 800498c:	68fa      	ldr	r2, [r7, #12]
 800498e:	440a      	add	r2, r1
 8004990:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004994:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004998:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	015a      	lsls	r2, r3, #5
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	4413      	add	r3, r2
 80049a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	68ba      	ldr	r2, [r7, #8]
 80049aa:	0151      	lsls	r1, r2, #5
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	440a      	add	r2, r1
 80049b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80049b8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80049ba:	2300      	movs	r3, #0
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3714      	adds	r7, #20
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b085      	sub	sp, #20
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	785b      	ldrb	r3, [r3, #1]
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d128      	bne.n	8004a36 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	015a      	lsls	r2, r3, #5
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	4413      	add	r3, r2
 80049ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68ba      	ldr	r2, [r7, #8]
 80049f4:	0151      	lsls	r1, r2, #5
 80049f6:	68fa      	ldr	r2, [r7, #12]
 80049f8:	440a      	add	r2, r1
 80049fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a02:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	791b      	ldrb	r3, [r3, #4]
 8004a08:	2b03      	cmp	r3, #3
 8004a0a:	d003      	beq.n	8004a14 <USB_EPClearStall+0x4c>
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	791b      	ldrb	r3, [r3, #4]
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	d138      	bne.n	8004a86 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	015a      	lsls	r2, r3, #5
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	4413      	add	r3, r2
 8004a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68ba      	ldr	r2, [r7, #8]
 8004a24:	0151      	lsls	r1, r2, #5
 8004a26:	68fa      	ldr	r2, [r7, #12]
 8004a28:	440a      	add	r2, r1
 8004a2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a32:	6013      	str	r3, [r2, #0]
 8004a34:	e027      	b.n	8004a86 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	015a      	lsls	r2, r3, #5
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	4413      	add	r3, r2
 8004a3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	68ba      	ldr	r2, [r7, #8]
 8004a46:	0151      	lsls	r1, r2, #5
 8004a48:	68fa      	ldr	r2, [r7, #12]
 8004a4a:	440a      	add	r2, r1
 8004a4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a50:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a54:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	791b      	ldrb	r3, [r3, #4]
 8004a5a:	2b03      	cmp	r3, #3
 8004a5c:	d003      	beq.n	8004a66 <USB_EPClearStall+0x9e>
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	791b      	ldrb	r3, [r3, #4]
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d10f      	bne.n	8004a86 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	015a      	lsls	r2, r3, #5
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	68ba      	ldr	r2, [r7, #8]
 8004a76:	0151      	lsls	r1, r2, #5
 8004a78:	68fa      	ldr	r2, [r7, #12]
 8004a7a:	440a      	add	r2, r1
 8004a7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a84:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004a86:	2300      	movs	r3, #0
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3714      	adds	r7, #20
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr

08004a94 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b085      	sub	sp, #20
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	68fa      	ldr	r2, [r7, #12]
 8004aae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ab2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004ab6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	78fb      	ldrb	r3, [r7, #3]
 8004ac2:	011b      	lsls	r3, r3, #4
 8004ac4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004ac8:	68f9      	ldr	r1, [r7, #12]
 8004aca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004ad2:	2300      	movs	r3, #0
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3714      	adds	r7, #20
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b085      	sub	sp, #20
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68fa      	ldr	r2, [r7, #12]
 8004af6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004afa:	f023 0303 	bic.w	r3, r3, #3
 8004afe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b0e:	f023 0302 	bic.w	r3, r3, #2
 8004b12:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3714      	adds	r7, #20
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr

08004b22 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004b22:	b480      	push	{r7}
 8004b24:	b085      	sub	sp, #20
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68fa      	ldr	r2, [r7, #12]
 8004b38:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004b3c:	f023 0303 	bic.w	r3, r3, #3
 8004b40:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	68fa      	ldr	r2, [r7, #12]
 8004b4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b50:	f043 0302 	orr.w	r3, r3, #2
 8004b54:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004b56:	2300      	movs	r3, #0
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3714      	adds	r7, #20
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b085      	sub	sp, #20
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	695b      	ldr	r3, [r3, #20]
 8004b70:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	699b      	ldr	r3, [r3, #24]
 8004b76:	68fa      	ldr	r2, [r7, #12]
 8004b78:	4013      	ands	r3, r2
 8004b7a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3714      	adds	r7, #20
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr

08004b8a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b8a:	b480      	push	{r7}
 8004b8c:	b085      	sub	sp, #20
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b9c:	699b      	ldr	r3, [r3, #24]
 8004b9e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ba6:	69db      	ldr	r3, [r3, #28]
 8004ba8:	68ba      	ldr	r2, [r7, #8]
 8004baa:	4013      	ands	r3, r2
 8004bac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	0c1b      	lsrs	r3, r3, #16
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3714      	adds	r7, #20
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr

08004bbe <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004bbe:	b480      	push	{r7}
 8004bc0:	b085      	sub	sp, #20
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bd0:	699b      	ldr	r3, [r3, #24]
 8004bd2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bda:	69db      	ldr	r3, [r3, #28]
 8004bdc:	68ba      	ldr	r2, [r7, #8]
 8004bde:	4013      	ands	r3, r2
 8004be0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	b29b      	uxth	r3, r3
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3714      	adds	r7, #20
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr

08004bf2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004bf2:	b480      	push	{r7}
 8004bf4:	b085      	sub	sp, #20
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
 8004bfa:	460b      	mov	r3, r1
 8004bfc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004c02:	78fb      	ldrb	r3, [r7, #3]
 8004c04:	015a      	lsls	r2, r3, #5
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	4413      	add	r3, r2
 8004c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c18:	695b      	ldr	r3, [r3, #20]
 8004c1a:	68ba      	ldr	r2, [r7, #8]
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004c20:	68bb      	ldr	r3, [r7, #8]
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3714      	adds	r7, #20
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr

08004c2e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004c2e:	b480      	push	{r7}
 8004c30:	b087      	sub	sp, #28
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
 8004c36:	460b      	mov	r3, r1
 8004c38:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c50:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004c52:	78fb      	ldrb	r3, [r7, #3]
 8004c54:	f003 030f 	and.w	r3, r3, #15
 8004c58:	68fa      	ldr	r2, [r7, #12]
 8004c5a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c5e:	01db      	lsls	r3, r3, #7
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	693a      	ldr	r2, [r7, #16]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004c68:	78fb      	ldrb	r3, [r7, #3]
 8004c6a:	015a      	lsls	r2, r3, #5
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	4413      	add	r3, r2
 8004c70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	693a      	ldr	r2, [r7, #16]
 8004c78:	4013      	ands	r3, r2
 8004c7a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004c7c:	68bb      	ldr	r3, [r7, #8]
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	371c      	adds	r7, #28
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr

08004c8a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004c8a:	b480      	push	{r7}
 8004c8c:	b083      	sub	sp, #12
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	695b      	ldr	r3, [r3, #20]
 8004c96:	f003 0301 	and.w	r3, r3, #1
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	370c      	adds	r7, #12
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr

08004ca6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004ca6:	b480      	push	{r7}
 8004ca8:	b085      	sub	sp, #20
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68fa      	ldr	r2, [r7, #12]
 8004cbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cc0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004cc4:	f023 0307 	bic.w	r3, r3, #7
 8004cc8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	68fa      	ldr	r2, [r7, #12]
 8004cd4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cdc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004cde:	2300      	movs	r3, #0
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3714      	adds	r7, #20
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b087      	sub	sp, #28
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	607a      	str	r2, [r7, #4]
 8004cf8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	333c      	adds	r3, #60	; 0x3c
 8004d02:	3304      	adds	r3, #4
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	4a26      	ldr	r2, [pc, #152]	; (8004da4 <USB_EP0_OutStart+0xb8>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d90a      	bls.n	8004d26 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d20:	d101      	bne.n	8004d26 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004d22:	2300      	movs	r3, #0
 8004d24:	e037      	b.n	8004d96 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	2300      	movs	r3, #0
 8004d30:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	697a      	ldr	r2, [r7, #20]
 8004d3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d40:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d44:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	697a      	ldr	r2, [r7, #20]
 8004d50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d54:	f043 0318 	orr.w	r3, r3, #24
 8004d58:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	697a      	ldr	r2, [r7, #20]
 8004d64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d68:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004d6c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004d6e:	7afb      	ldrb	r3, [r7, #11]
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d10f      	bne.n	8004d94 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	697a      	ldr	r2, [r7, #20]
 8004d8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d8e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004d92:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004d94:	2300      	movs	r3, #0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	371c      	adds	r7, #28
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr
 8004da2:	bf00      	nop
 8004da4:	4f54300a 	.word	0x4f54300a

08004da8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b085      	sub	sp, #20
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004db0:	2300      	movs	r3, #0
 8004db2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	3301      	adds	r3, #1
 8004db8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	4a13      	ldr	r2, [pc, #76]	; (8004e0c <USB_CoreReset+0x64>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d901      	bls.n	8004dc6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	e01b      	b.n	8004dfe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	daf2      	bge.n	8004db4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	f043 0201 	orr.w	r2, r3, #1
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	3301      	adds	r3, #1
 8004de2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	4a09      	ldr	r2, [pc, #36]	; (8004e0c <USB_CoreReset+0x64>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d901      	bls.n	8004df0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	e006      	b.n	8004dfe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	691b      	ldr	r3, [r3, #16]
 8004df4:	f003 0301 	and.w	r3, r3, #1
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d0f0      	beq.n	8004dde <USB_CoreReset+0x36>

  return HAL_OK;
 8004dfc:	2300      	movs	r3, #0
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3714      	adds	r7, #20
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr
 8004e0a:	bf00      	nop
 8004e0c:	00030d40 	.word	0x00030d40

08004e10 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	460b      	mov	r3, r1
 8004e1a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004e1c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004e20:	f005 fa52 	bl	800a2c8 <USBD_static_malloc>
 8004e24:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d109      	bne.n	8004e40 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	32b0      	adds	r2, #176	; 0xb0
 8004e36:	2100      	movs	r1, #0
 8004e38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004e3c:	2302      	movs	r3, #2
 8004e3e:	e0d4      	b.n	8004fea <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004e40:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004e44:	2100      	movs	r1, #0
 8004e46:	68f8      	ldr	r0, [r7, #12]
 8004e48:	f005 fb7e 	bl	800a548 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	32b0      	adds	r2, #176	; 0xb0
 8004e56:	68f9      	ldr	r1, [r7, #12]
 8004e58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	32b0      	adds	r2, #176	; 0xb0
 8004e66:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	7c1b      	ldrb	r3, [r3, #16]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d138      	bne.n	8004eea <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004e78:	4b5e      	ldr	r3, [pc, #376]	; (8004ff4 <USBD_CDC_Init+0x1e4>)
 8004e7a:	7819      	ldrb	r1, [r3, #0]
 8004e7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e80:	2202      	movs	r2, #2
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f005 f8fd 	bl	800a082 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004e88:	4b5a      	ldr	r3, [pc, #360]	; (8004ff4 <USBD_CDC_Init+0x1e4>)
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	f003 020f 	and.w	r2, r3, #15
 8004e90:	6879      	ldr	r1, [r7, #4]
 8004e92:	4613      	mov	r3, r2
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	4413      	add	r3, r2
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	440b      	add	r3, r1
 8004e9c:	3324      	adds	r3, #36	; 0x24
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004ea2:	4b55      	ldr	r3, [pc, #340]	; (8004ff8 <USBD_CDC_Init+0x1e8>)
 8004ea4:	7819      	ldrb	r1, [r3, #0]
 8004ea6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004eaa:	2202      	movs	r2, #2
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f005 f8e8 	bl	800a082 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004eb2:	4b51      	ldr	r3, [pc, #324]	; (8004ff8 <USBD_CDC_Init+0x1e8>)
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	f003 020f 	and.w	r2, r3, #15
 8004eba:	6879      	ldr	r1, [r7, #4]
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	4413      	add	r3, r2
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	440b      	add	r3, r1
 8004ec6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004eca:	2201      	movs	r2, #1
 8004ecc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004ece:	4b4b      	ldr	r3, [pc, #300]	; (8004ffc <USBD_CDC_Init+0x1ec>)
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	f003 020f 	and.w	r2, r3, #15
 8004ed6:	6879      	ldr	r1, [r7, #4]
 8004ed8:	4613      	mov	r3, r2
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	4413      	add	r3, r2
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	440b      	add	r3, r1
 8004ee2:	3326      	adds	r3, #38	; 0x26
 8004ee4:	2210      	movs	r2, #16
 8004ee6:	801a      	strh	r2, [r3, #0]
 8004ee8:	e035      	b.n	8004f56 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004eea:	4b42      	ldr	r3, [pc, #264]	; (8004ff4 <USBD_CDC_Init+0x1e4>)
 8004eec:	7819      	ldrb	r1, [r3, #0]
 8004eee:	2340      	movs	r3, #64	; 0x40
 8004ef0:	2202      	movs	r2, #2
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f005 f8c5 	bl	800a082 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004ef8:	4b3e      	ldr	r3, [pc, #248]	; (8004ff4 <USBD_CDC_Init+0x1e4>)
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	f003 020f 	and.w	r2, r3, #15
 8004f00:	6879      	ldr	r1, [r7, #4]
 8004f02:	4613      	mov	r3, r2
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	4413      	add	r3, r2
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	440b      	add	r3, r1
 8004f0c:	3324      	adds	r3, #36	; 0x24
 8004f0e:	2201      	movs	r2, #1
 8004f10:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004f12:	4b39      	ldr	r3, [pc, #228]	; (8004ff8 <USBD_CDC_Init+0x1e8>)
 8004f14:	7819      	ldrb	r1, [r3, #0]
 8004f16:	2340      	movs	r3, #64	; 0x40
 8004f18:	2202      	movs	r2, #2
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f005 f8b1 	bl	800a082 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004f20:	4b35      	ldr	r3, [pc, #212]	; (8004ff8 <USBD_CDC_Init+0x1e8>)
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	f003 020f 	and.w	r2, r3, #15
 8004f28:	6879      	ldr	r1, [r7, #4]
 8004f2a:	4613      	mov	r3, r2
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	4413      	add	r3, r2
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	440b      	add	r3, r1
 8004f34:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004f38:	2201      	movs	r2, #1
 8004f3a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004f3c:	4b2f      	ldr	r3, [pc, #188]	; (8004ffc <USBD_CDC_Init+0x1ec>)
 8004f3e:	781b      	ldrb	r3, [r3, #0]
 8004f40:	f003 020f 	and.w	r2, r3, #15
 8004f44:	6879      	ldr	r1, [r7, #4]
 8004f46:	4613      	mov	r3, r2
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	4413      	add	r3, r2
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	440b      	add	r3, r1
 8004f50:	3326      	adds	r3, #38	; 0x26
 8004f52:	2210      	movs	r2, #16
 8004f54:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004f56:	4b29      	ldr	r3, [pc, #164]	; (8004ffc <USBD_CDC_Init+0x1ec>)
 8004f58:	7819      	ldrb	r1, [r3, #0]
 8004f5a:	2308      	movs	r3, #8
 8004f5c:	2203      	movs	r2, #3
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f005 f88f 	bl	800a082 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004f64:	4b25      	ldr	r3, [pc, #148]	; (8004ffc <USBD_CDC_Init+0x1ec>)
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	f003 020f 	and.w	r2, r3, #15
 8004f6c:	6879      	ldr	r1, [r7, #4]
 8004f6e:	4613      	mov	r3, r2
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	4413      	add	r3, r2
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	440b      	add	r3, r1
 8004f78:	3324      	adds	r3, #36	; 0x24
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2200      	movs	r2, #0
 8004f82:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	33b0      	adds	r3, #176	; 0xb0
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	4413      	add	r3, r2
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d101      	bne.n	8004fb8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8004fb4:	2302      	movs	r3, #2
 8004fb6:	e018      	b.n	8004fea <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	7c1b      	ldrb	r3, [r3, #16]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d10a      	bne.n	8004fd6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004fc0:	4b0d      	ldr	r3, [pc, #52]	; (8004ff8 <USBD_CDC_Init+0x1e8>)
 8004fc2:	7819      	ldrb	r1, [r3, #0]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004fca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f005 f946 	bl	800a260 <USBD_LL_PrepareReceive>
 8004fd4:	e008      	b.n	8004fe8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004fd6:	4b08      	ldr	r3, [pc, #32]	; (8004ff8 <USBD_CDC_Init+0x1e8>)
 8004fd8:	7819      	ldrb	r1, [r3, #0]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004fe0:	2340      	movs	r3, #64	; 0x40
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f005 f93c 	bl	800a260 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3710      	adds	r7, #16
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	20000093 	.word	0x20000093
 8004ff8:	20000094 	.word	0x20000094
 8004ffc:	20000095 	.word	0x20000095

08005000 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b082      	sub	sp, #8
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	460b      	mov	r3, r1
 800500a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800500c:	4b3a      	ldr	r3, [pc, #232]	; (80050f8 <USBD_CDC_DeInit+0xf8>)
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	4619      	mov	r1, r3
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f005 f85b 	bl	800a0ce <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005018:	4b37      	ldr	r3, [pc, #220]	; (80050f8 <USBD_CDC_DeInit+0xf8>)
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	f003 020f 	and.w	r2, r3, #15
 8005020:	6879      	ldr	r1, [r7, #4]
 8005022:	4613      	mov	r3, r2
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	4413      	add	r3, r2
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	440b      	add	r3, r1
 800502c:	3324      	adds	r3, #36	; 0x24
 800502e:	2200      	movs	r2, #0
 8005030:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005032:	4b32      	ldr	r3, [pc, #200]	; (80050fc <USBD_CDC_DeInit+0xfc>)
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	4619      	mov	r1, r3
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f005 f848 	bl	800a0ce <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800503e:	4b2f      	ldr	r3, [pc, #188]	; (80050fc <USBD_CDC_DeInit+0xfc>)
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	f003 020f 	and.w	r2, r3, #15
 8005046:	6879      	ldr	r1, [r7, #4]
 8005048:	4613      	mov	r3, r2
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	4413      	add	r3, r2
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	440b      	add	r3, r1
 8005052:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005056:	2200      	movs	r2, #0
 8005058:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800505a:	4b29      	ldr	r3, [pc, #164]	; (8005100 <USBD_CDC_DeInit+0x100>)
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	4619      	mov	r1, r3
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f005 f834 	bl	800a0ce <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005066:	4b26      	ldr	r3, [pc, #152]	; (8005100 <USBD_CDC_DeInit+0x100>)
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	f003 020f 	and.w	r2, r3, #15
 800506e:	6879      	ldr	r1, [r7, #4]
 8005070:	4613      	mov	r3, r2
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	4413      	add	r3, r2
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	440b      	add	r3, r1
 800507a:	3324      	adds	r3, #36	; 0x24
 800507c:	2200      	movs	r2, #0
 800507e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005080:	4b1f      	ldr	r3, [pc, #124]	; (8005100 <USBD_CDC_DeInit+0x100>)
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	f003 020f 	and.w	r2, r3, #15
 8005088:	6879      	ldr	r1, [r7, #4]
 800508a:	4613      	mov	r3, r2
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	4413      	add	r3, r2
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	440b      	add	r3, r1
 8005094:	3326      	adds	r3, #38	; 0x26
 8005096:	2200      	movs	r2, #0
 8005098:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	32b0      	adds	r2, #176	; 0xb0
 80050a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d01f      	beq.n	80050ec <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	33b0      	adds	r3, #176	; 0xb0
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	4413      	add	r3, r2
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	32b0      	adds	r2, #176	; 0xb0
 80050ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050ce:	4618      	mov	r0, r3
 80050d0:	f005 f908 	bl	800a2e4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	32b0      	adds	r2, #176	; 0xb0
 80050de:	2100      	movs	r1, #0
 80050e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3708      	adds	r7, #8
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	20000093 	.word	0x20000093
 80050fc:	20000094 	.word	0x20000094
 8005100:	20000095 	.word	0x20000095

08005104 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b086      	sub	sp, #24
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	32b0      	adds	r2, #176	; 0xb0
 8005118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800511c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800511e:	2300      	movs	r3, #0
 8005120:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005122:	2300      	movs	r3, #0
 8005124:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005126:	2300      	movs	r3, #0
 8005128:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d101      	bne.n	8005134 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005130:	2303      	movs	r3, #3
 8005132:	e0bf      	b.n	80052b4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800513c:	2b00      	cmp	r3, #0
 800513e:	d050      	beq.n	80051e2 <USBD_CDC_Setup+0xde>
 8005140:	2b20      	cmp	r3, #32
 8005142:	f040 80af 	bne.w	80052a4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	88db      	ldrh	r3, [r3, #6]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d03a      	beq.n	80051c4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	781b      	ldrb	r3, [r3, #0]
 8005152:	b25b      	sxtb	r3, r3
 8005154:	2b00      	cmp	r3, #0
 8005156:	da1b      	bge.n	8005190 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	33b0      	adds	r3, #176	; 0xb0
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	4413      	add	r3, r2
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	683a      	ldr	r2, [r7, #0]
 800516c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800516e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005170:	683a      	ldr	r2, [r7, #0]
 8005172:	88d2      	ldrh	r2, [r2, #6]
 8005174:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	88db      	ldrh	r3, [r3, #6]
 800517a:	2b07      	cmp	r3, #7
 800517c:	bf28      	it	cs
 800517e:	2307      	movcs	r3, #7
 8005180:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	89fa      	ldrh	r2, [r7, #14]
 8005186:	4619      	mov	r1, r3
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f001 fd89 	bl	8006ca0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800518e:	e090      	b.n	80052b2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	785a      	ldrb	r2, [r3, #1]
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	88db      	ldrh	r3, [r3, #6]
 800519e:	2b3f      	cmp	r3, #63	; 0x3f
 80051a0:	d803      	bhi.n	80051aa <USBD_CDC_Setup+0xa6>
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	88db      	ldrh	r3, [r3, #6]
 80051a6:	b2da      	uxtb	r2, r3
 80051a8:	e000      	b.n	80051ac <USBD_CDC_Setup+0xa8>
 80051aa:	2240      	movs	r2, #64	; 0x40
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80051b2:	6939      	ldr	r1, [r7, #16]
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80051ba:	461a      	mov	r2, r3
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f001 fd9b 	bl	8006cf8 <USBD_CtlPrepareRx>
      break;
 80051c2:	e076      	b.n	80052b2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	33b0      	adds	r3, #176	; 0xb0
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	4413      	add	r3, r2
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	683a      	ldr	r2, [r7, #0]
 80051d8:	7850      	ldrb	r0, [r2, #1]
 80051da:	2200      	movs	r2, #0
 80051dc:	6839      	ldr	r1, [r7, #0]
 80051de:	4798      	blx	r3
      break;
 80051e0:	e067      	b.n	80052b2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	785b      	ldrb	r3, [r3, #1]
 80051e6:	2b0b      	cmp	r3, #11
 80051e8:	d851      	bhi.n	800528e <USBD_CDC_Setup+0x18a>
 80051ea:	a201      	add	r2, pc, #4	; (adr r2, 80051f0 <USBD_CDC_Setup+0xec>)
 80051ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f0:	08005221 	.word	0x08005221
 80051f4:	0800529d 	.word	0x0800529d
 80051f8:	0800528f 	.word	0x0800528f
 80051fc:	0800528f 	.word	0x0800528f
 8005200:	0800528f 	.word	0x0800528f
 8005204:	0800528f 	.word	0x0800528f
 8005208:	0800528f 	.word	0x0800528f
 800520c:	0800528f 	.word	0x0800528f
 8005210:	0800528f 	.word	0x0800528f
 8005214:	0800528f 	.word	0x0800528f
 8005218:	0800524b 	.word	0x0800524b
 800521c:	08005275 	.word	0x08005275
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005226:	b2db      	uxtb	r3, r3
 8005228:	2b03      	cmp	r3, #3
 800522a:	d107      	bne.n	800523c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800522c:	f107 030a 	add.w	r3, r7, #10
 8005230:	2202      	movs	r2, #2
 8005232:	4619      	mov	r1, r3
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f001 fd33 	bl	8006ca0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800523a:	e032      	b.n	80052a2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800523c:	6839      	ldr	r1, [r7, #0]
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f001 fcbd 	bl	8006bbe <USBD_CtlError>
            ret = USBD_FAIL;
 8005244:	2303      	movs	r3, #3
 8005246:	75fb      	strb	r3, [r7, #23]
          break;
 8005248:	e02b      	b.n	80052a2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005250:	b2db      	uxtb	r3, r3
 8005252:	2b03      	cmp	r3, #3
 8005254:	d107      	bne.n	8005266 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005256:	f107 030d 	add.w	r3, r7, #13
 800525a:	2201      	movs	r2, #1
 800525c:	4619      	mov	r1, r3
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f001 fd1e 	bl	8006ca0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005264:	e01d      	b.n	80052a2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005266:	6839      	ldr	r1, [r7, #0]
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f001 fca8 	bl	8006bbe <USBD_CtlError>
            ret = USBD_FAIL;
 800526e:	2303      	movs	r3, #3
 8005270:	75fb      	strb	r3, [r7, #23]
          break;
 8005272:	e016      	b.n	80052a2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800527a:	b2db      	uxtb	r3, r3
 800527c:	2b03      	cmp	r3, #3
 800527e:	d00f      	beq.n	80052a0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005280:	6839      	ldr	r1, [r7, #0]
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f001 fc9b 	bl	8006bbe <USBD_CtlError>
            ret = USBD_FAIL;
 8005288:	2303      	movs	r3, #3
 800528a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800528c:	e008      	b.n	80052a0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800528e:	6839      	ldr	r1, [r7, #0]
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f001 fc94 	bl	8006bbe <USBD_CtlError>
          ret = USBD_FAIL;
 8005296:	2303      	movs	r3, #3
 8005298:	75fb      	strb	r3, [r7, #23]
          break;
 800529a:	e002      	b.n	80052a2 <USBD_CDC_Setup+0x19e>
          break;
 800529c:	bf00      	nop
 800529e:	e008      	b.n	80052b2 <USBD_CDC_Setup+0x1ae>
          break;
 80052a0:	bf00      	nop
      }
      break;
 80052a2:	e006      	b.n	80052b2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80052a4:	6839      	ldr	r1, [r7, #0]
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f001 fc89 	bl	8006bbe <USBD_CtlError>
      ret = USBD_FAIL;
 80052ac:	2303      	movs	r3, #3
 80052ae:	75fb      	strb	r3, [r7, #23]
      break;
 80052b0:	bf00      	nop
  }

  return (uint8_t)ret;
 80052b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3718      	adds	r7, #24
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}

080052bc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	460b      	mov	r3, r1
 80052c6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80052ce:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	32b0      	adds	r2, #176	; 0xb0
 80052da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d101      	bne.n	80052e6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80052e2:	2303      	movs	r3, #3
 80052e4:	e065      	b.n	80053b2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	32b0      	adds	r2, #176	; 0xb0
 80052f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052f4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80052f6:	78fb      	ldrb	r3, [r7, #3]
 80052f8:	f003 020f 	and.w	r2, r3, #15
 80052fc:	6879      	ldr	r1, [r7, #4]
 80052fe:	4613      	mov	r3, r2
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	4413      	add	r3, r2
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	440b      	add	r3, r1
 8005308:	3318      	adds	r3, #24
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d02f      	beq.n	8005370 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005310:	78fb      	ldrb	r3, [r7, #3]
 8005312:	f003 020f 	and.w	r2, r3, #15
 8005316:	6879      	ldr	r1, [r7, #4]
 8005318:	4613      	mov	r3, r2
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	4413      	add	r3, r2
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	440b      	add	r3, r1
 8005322:	3318      	adds	r3, #24
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	78fb      	ldrb	r3, [r7, #3]
 8005328:	f003 010f 	and.w	r1, r3, #15
 800532c:	68f8      	ldr	r0, [r7, #12]
 800532e:	460b      	mov	r3, r1
 8005330:	00db      	lsls	r3, r3, #3
 8005332:	440b      	add	r3, r1
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	4403      	add	r3, r0
 8005338:	3348      	adds	r3, #72	; 0x48
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	fbb2 f1f3 	udiv	r1, r2, r3
 8005340:	fb01 f303 	mul.w	r3, r1, r3
 8005344:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005346:	2b00      	cmp	r3, #0
 8005348:	d112      	bne.n	8005370 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800534a:	78fb      	ldrb	r3, [r7, #3]
 800534c:	f003 020f 	and.w	r2, r3, #15
 8005350:	6879      	ldr	r1, [r7, #4]
 8005352:	4613      	mov	r3, r2
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	4413      	add	r3, r2
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	440b      	add	r3, r1
 800535c:	3318      	adds	r3, #24
 800535e:	2200      	movs	r2, #0
 8005360:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005362:	78f9      	ldrb	r1, [r7, #3]
 8005364:	2300      	movs	r3, #0
 8005366:	2200      	movs	r2, #0
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f004 ff58 	bl	800a21e <USBD_LL_Transmit>
 800536e:	e01f      	b.n	80053b0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	2200      	movs	r2, #0
 8005374:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	33b0      	adds	r3, #176	; 0xb0
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	4413      	add	r3, r2
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	691b      	ldr	r3, [r3, #16]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d010      	beq.n	80053b0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	33b0      	adds	r3, #176	; 0xb0
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	4413      	add	r3, r2
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	68ba      	ldr	r2, [r7, #8]
 80053a2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80053a6:	68ba      	ldr	r2, [r7, #8]
 80053a8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80053ac:	78fa      	ldrb	r2, [r7, #3]
 80053ae:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3710      	adds	r7, #16
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}

080053ba <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80053ba:	b580      	push	{r7, lr}
 80053bc:	b084      	sub	sp, #16
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]
 80053c2:	460b      	mov	r3, r1
 80053c4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	32b0      	adds	r2, #176	; 0xb0
 80053d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053d4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	32b0      	adds	r2, #176	; 0xb0
 80053e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d101      	bne.n	80053ec <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80053e8:	2303      	movs	r3, #3
 80053ea:	e01a      	b.n	8005422 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80053ec:	78fb      	ldrb	r3, [r7, #3]
 80053ee:	4619      	mov	r1, r3
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f004 ff56 	bl	800a2a2 <USBD_LL_GetRxDataSize>
 80053f6:	4602      	mov	r2, r0
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	33b0      	adds	r3, #176	; 0xb0
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	4413      	add	r3, r2
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	68fa      	ldr	r2, [r7, #12]
 8005412:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005416:	68fa      	ldr	r2, [r7, #12]
 8005418:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800541c:	4611      	mov	r1, r2
 800541e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005420:	2300      	movs	r3, #0
}
 8005422:	4618      	mov	r0, r3
 8005424:	3710      	adds	r7, #16
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}

0800542a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800542a:	b580      	push	{r7, lr}
 800542c:	b084      	sub	sp, #16
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	32b0      	adds	r2, #176	; 0xb0
 800543c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005440:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d101      	bne.n	800544c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005448:	2303      	movs	r3, #3
 800544a:	e025      	b.n	8005498 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	33b0      	adds	r3, #176	; 0xb0
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	4413      	add	r3, r2
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d01a      	beq.n	8005496 <USBD_CDC_EP0_RxReady+0x6c>
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005466:	2bff      	cmp	r3, #255	; 0xff
 8005468:	d015      	beq.n	8005496 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	33b0      	adds	r3, #176	; 0xb0
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	4413      	add	r3, r2
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8005482:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800548a:	b292      	uxth	r2, r2
 800548c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	22ff      	movs	r2, #255	; 0xff
 8005492:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005496:	2300      	movs	r3, #0
}
 8005498:	4618      	mov	r0, r3
 800549a:	3710      	adds	r7, #16
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b086      	sub	sp, #24
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80054a8:	2182      	movs	r1, #130	; 0x82
 80054aa:	4818      	ldr	r0, [pc, #96]	; (800550c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80054ac:	f000 fd4f 	bl	8005f4e <USBD_GetEpDesc>
 80054b0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80054b2:	2101      	movs	r1, #1
 80054b4:	4815      	ldr	r0, [pc, #84]	; (800550c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80054b6:	f000 fd4a 	bl	8005f4e <USBD_GetEpDesc>
 80054ba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80054bc:	2181      	movs	r1, #129	; 0x81
 80054be:	4813      	ldr	r0, [pc, #76]	; (800550c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80054c0:	f000 fd45 	bl	8005f4e <USBD_GetEpDesc>
 80054c4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d002      	beq.n	80054d2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	2210      	movs	r2, #16
 80054d0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d006      	beq.n	80054e6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	2200      	movs	r2, #0
 80054dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054e0:	711a      	strb	r2, [r3, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d006      	beq.n	80054fa <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2200      	movs	r2, #0
 80054f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054f4:	711a      	strb	r2, [r3, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2243      	movs	r2, #67	; 0x43
 80054fe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005500:	4b02      	ldr	r3, [pc, #8]	; (800550c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005502:	4618      	mov	r0, r3
 8005504:	3718      	adds	r7, #24
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	20000050 	.word	0x20000050

08005510 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b086      	sub	sp, #24
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005518:	2182      	movs	r1, #130	; 0x82
 800551a:	4818      	ldr	r0, [pc, #96]	; (800557c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800551c:	f000 fd17 	bl	8005f4e <USBD_GetEpDesc>
 8005520:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005522:	2101      	movs	r1, #1
 8005524:	4815      	ldr	r0, [pc, #84]	; (800557c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005526:	f000 fd12 	bl	8005f4e <USBD_GetEpDesc>
 800552a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800552c:	2181      	movs	r1, #129	; 0x81
 800552e:	4813      	ldr	r0, [pc, #76]	; (800557c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005530:	f000 fd0d 	bl	8005f4e <USBD_GetEpDesc>
 8005534:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d002      	beq.n	8005542 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	2210      	movs	r2, #16
 8005540:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d006      	beq.n	8005556 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	2200      	movs	r2, #0
 800554c:	711a      	strb	r2, [r3, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	f042 0202 	orr.w	r2, r2, #2
 8005554:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d006      	beq.n	800556a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2200      	movs	r2, #0
 8005560:	711a      	strb	r2, [r3, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	f042 0202 	orr.w	r2, r2, #2
 8005568:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2243      	movs	r2, #67	; 0x43
 800556e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005570:	4b02      	ldr	r3, [pc, #8]	; (800557c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005572:	4618      	mov	r0, r3
 8005574:	3718      	adds	r7, #24
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop
 800557c:	20000050 	.word	0x20000050

08005580 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b086      	sub	sp, #24
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005588:	2182      	movs	r1, #130	; 0x82
 800558a:	4818      	ldr	r0, [pc, #96]	; (80055ec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800558c:	f000 fcdf 	bl	8005f4e <USBD_GetEpDesc>
 8005590:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005592:	2101      	movs	r1, #1
 8005594:	4815      	ldr	r0, [pc, #84]	; (80055ec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005596:	f000 fcda 	bl	8005f4e <USBD_GetEpDesc>
 800559a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800559c:	2181      	movs	r1, #129	; 0x81
 800559e:	4813      	ldr	r0, [pc, #76]	; (80055ec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80055a0:	f000 fcd5 	bl	8005f4e <USBD_GetEpDesc>
 80055a4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d002      	beq.n	80055b2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	2210      	movs	r2, #16
 80055b0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d006      	beq.n	80055c6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	2200      	movs	r2, #0
 80055bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055c0:	711a      	strb	r2, [r3, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d006      	beq.n	80055da <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055d4:	711a      	strb	r2, [r3, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2243      	movs	r2, #67	; 0x43
 80055de:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80055e0:	4b02      	ldr	r3, [pc, #8]	; (80055ec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3718      	adds	r7, #24
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	bf00      	nop
 80055ec:	20000050 	.word	0x20000050

080055f0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	220a      	movs	r2, #10
 80055fc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80055fe:	4b03      	ldr	r3, [pc, #12]	; (800560c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005600:	4618      	mov	r0, r3
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr
 800560c:	2000000c 	.word	0x2000000c

08005610 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d101      	bne.n	8005624 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005620:	2303      	movs	r3, #3
 8005622:	e009      	b.n	8005638 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	33b0      	adds	r3, #176	; 0xb0
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	4413      	add	r3, r2
 8005632:	683a      	ldr	r2, [r7, #0]
 8005634:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005636:	2300      	movs	r3, #0
}
 8005638:	4618      	mov	r0, r3
 800563a:	370c      	adds	r7, #12
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005644:	b480      	push	{r7}
 8005646:	b087      	sub	sp, #28
 8005648:	af00      	add	r7, sp, #0
 800564a:	60f8      	str	r0, [r7, #12]
 800564c:	60b9      	str	r1, [r7, #8]
 800564e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	32b0      	adds	r2, #176	; 0xb0
 800565a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800565e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d101      	bne.n	800566a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005666:	2303      	movs	r3, #3
 8005668:	e008      	b.n	800567c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	68ba      	ldr	r2, [r7, #8]
 800566e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800567a:	2300      	movs	r3, #0
}
 800567c:	4618      	mov	r0, r3
 800567e:	371c      	adds	r7, #28
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005688:	b480      	push	{r7}
 800568a:	b085      	sub	sp, #20
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	32b0      	adds	r2, #176	; 0xb0
 800569c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056a0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d101      	bne.n	80056ac <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80056a8:	2303      	movs	r3, #3
 80056aa:	e004      	b.n	80056b6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	683a      	ldr	r2, [r7, #0]
 80056b0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3714      	adds	r7, #20
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
	...

080056c4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	32b0      	adds	r2, #176	; 0xb0
 80056d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056da:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80056dc:	2301      	movs	r3, #1
 80056de:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	32b0      	adds	r2, #176	; 0xb0
 80056ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d101      	bne.n	80056f6 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80056f2:	2303      	movs	r3, #3
 80056f4:	e025      	b.n	8005742 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d11f      	bne.n	8005740 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	2201      	movs	r2, #1
 8005704:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005708:	4b10      	ldr	r3, [pc, #64]	; (800574c <USBD_CDC_TransmitPacket+0x88>)
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	f003 020f 	and.w	r2, r3, #15
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	4613      	mov	r3, r2
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	4413      	add	r3, r2
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	4403      	add	r3, r0
 8005722:	3318      	adds	r3, #24
 8005724:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005726:	4b09      	ldr	r3, [pc, #36]	; (800574c <USBD_CDC_TransmitPacket+0x88>)
 8005728:	7819      	ldrb	r1, [r3, #0]
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f004 fd71 	bl	800a21e <USBD_LL_Transmit>

    ret = USBD_OK;
 800573c:	2300      	movs	r3, #0
 800573e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005740:	7bfb      	ldrb	r3, [r7, #15]
}
 8005742:	4618      	mov	r0, r3
 8005744:	3710      	adds	r7, #16
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop
 800574c:	20000093 	.word	0x20000093

08005750 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b084      	sub	sp, #16
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	32b0      	adds	r2, #176	; 0xb0
 8005762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005766:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	32b0      	adds	r2, #176	; 0xb0
 8005772:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d101      	bne.n	800577e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800577a:	2303      	movs	r3, #3
 800577c:	e018      	b.n	80057b0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	7c1b      	ldrb	r3, [r3, #16]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d10a      	bne.n	800579c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005786:	4b0c      	ldr	r3, [pc, #48]	; (80057b8 <USBD_CDC_ReceivePacket+0x68>)
 8005788:	7819      	ldrb	r1, [r3, #0]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005790:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f004 fd63 	bl	800a260 <USBD_LL_PrepareReceive>
 800579a:	e008      	b.n	80057ae <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800579c:	4b06      	ldr	r3, [pc, #24]	; (80057b8 <USBD_CDC_ReceivePacket+0x68>)
 800579e:	7819      	ldrb	r1, [r3, #0]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80057a6:	2340      	movs	r3, #64	; 0x40
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f004 fd59 	bl	800a260 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80057ae:	2300      	movs	r3, #0
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3710      	adds	r7, #16
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}
 80057b8:	20000094 	.word	0x20000094

080057bc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b086      	sub	sp, #24
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	4613      	mov	r3, r2
 80057c8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d101      	bne.n	80057d4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80057d0:	2303      	movs	r3, #3
 80057d2:	e01f      	b.n	8005814 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2200      	movs	r2, #0
 80057d8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2200      	movs	r2, #0
 80057e0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2200      	movs	r2, #0
 80057e8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d003      	beq.n	80057fa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	68ba      	ldr	r2, [r7, #8]
 80057f6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2201      	movs	r2, #1
 80057fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	79fa      	ldrb	r2, [r7, #7]
 8005806:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005808:	68f8      	ldr	r0, [r7, #12]
 800580a:	f004 fbd3 	bl	8009fb4 <USBD_LL_Init>
 800580e:	4603      	mov	r3, r0
 8005810:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005812:	7dfb      	ldrb	r3, [r7, #23]
}
 8005814:	4618      	mov	r0, r3
 8005816:	3718      	adds	r7, #24
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}

0800581c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b084      	sub	sp, #16
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005826:	2300      	movs	r3, #0
 8005828:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d101      	bne.n	8005834 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005830:	2303      	movs	r3, #3
 8005832:	e025      	b.n	8005880 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	683a      	ldr	r2, [r7, #0]
 8005838:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	32ae      	adds	r2, #174	; 0xae
 8005846:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800584a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800584c:	2b00      	cmp	r3, #0
 800584e:	d00f      	beq.n	8005870 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	32ae      	adds	r2, #174	; 0xae
 800585a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800585e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005860:	f107 020e 	add.w	r2, r7, #14
 8005864:	4610      	mov	r0, r2
 8005866:	4798      	blx	r3
 8005868:	4602      	mov	r2, r0
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005876:	1c5a      	adds	r2, r3, #1
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800587e:	2300      	movs	r3, #0
}
 8005880:	4618      	mov	r0, r3
 8005882:	3710      	adds	r7, #16
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}

08005888 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b082      	sub	sp, #8
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f004 fbdb 	bl	800a04c <USBD_LL_Start>
 8005896:	4603      	mov	r3, r0
}
 8005898:	4618      	mov	r0, r3
 800589a:	3708      	adds	r7, #8
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}

080058a0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b083      	sub	sp, #12
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80058a8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	370c      	adds	r7, #12
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr

080058b6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80058b6:	b580      	push	{r7, lr}
 80058b8:	b084      	sub	sp, #16
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
 80058be:	460b      	mov	r3, r1
 80058c0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80058c2:	2300      	movs	r3, #0
 80058c4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d009      	beq.n	80058e4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	78fa      	ldrb	r2, [r7, #3]
 80058da:	4611      	mov	r1, r2
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	4798      	blx	r3
 80058e0:	4603      	mov	r3, r0
 80058e2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80058e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3710      	adds	r7, #16
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}

080058ee <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80058ee:	b580      	push	{r7, lr}
 80058f0:	b084      	sub	sp, #16
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
 80058f6:	460b      	mov	r3, r1
 80058f8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80058fa:	2300      	movs	r3, #0
 80058fc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	78fa      	ldrb	r2, [r7, #3]
 8005908:	4611      	mov	r1, r2
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	4798      	blx	r3
 800590e:	4603      	mov	r3, r0
 8005910:	2b00      	cmp	r3, #0
 8005912:	d001      	beq.n	8005918 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005914:	2303      	movs	r3, #3
 8005916:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005918:	7bfb      	ldrb	r3, [r7, #15]
}
 800591a:	4618      	mov	r0, r3
 800591c:	3710      	adds	r7, #16
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}

08005922 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005922:	b580      	push	{r7, lr}
 8005924:	b084      	sub	sp, #16
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
 800592a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005932:	6839      	ldr	r1, [r7, #0]
 8005934:	4618      	mov	r0, r3
 8005936:	f001 f908 	bl	8006b4a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2201      	movs	r2, #1
 800593e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005948:	461a      	mov	r2, r3
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005956:	f003 031f 	and.w	r3, r3, #31
 800595a:	2b02      	cmp	r3, #2
 800595c:	d01a      	beq.n	8005994 <USBD_LL_SetupStage+0x72>
 800595e:	2b02      	cmp	r3, #2
 8005960:	d822      	bhi.n	80059a8 <USBD_LL_SetupStage+0x86>
 8005962:	2b00      	cmp	r3, #0
 8005964:	d002      	beq.n	800596c <USBD_LL_SetupStage+0x4a>
 8005966:	2b01      	cmp	r3, #1
 8005968:	d00a      	beq.n	8005980 <USBD_LL_SetupStage+0x5e>
 800596a:	e01d      	b.n	80059a8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005972:	4619      	mov	r1, r3
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f000 fb5f 	bl	8006038 <USBD_StdDevReq>
 800597a:	4603      	mov	r3, r0
 800597c:	73fb      	strb	r3, [r7, #15]
      break;
 800597e:	e020      	b.n	80059c2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005986:	4619      	mov	r1, r3
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f000 fbc7 	bl	800611c <USBD_StdItfReq>
 800598e:	4603      	mov	r3, r0
 8005990:	73fb      	strb	r3, [r7, #15]
      break;
 8005992:	e016      	b.n	80059c2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800599a:	4619      	mov	r1, r3
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f000 fc29 	bl	80061f4 <USBD_StdEPReq>
 80059a2:	4603      	mov	r3, r0
 80059a4:	73fb      	strb	r3, [r7, #15]
      break;
 80059a6:	e00c      	b.n	80059c2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80059ae:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	4619      	mov	r1, r3
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f004 fba8 	bl	800a10c <USBD_LL_StallEP>
 80059bc:	4603      	mov	r3, r0
 80059be:	73fb      	strb	r3, [r7, #15]
      break;
 80059c0:	bf00      	nop
  }

  return ret;
 80059c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3710      	adds	r7, #16
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}

080059cc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b086      	sub	sp, #24
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	60f8      	str	r0, [r7, #12]
 80059d4:	460b      	mov	r3, r1
 80059d6:	607a      	str	r2, [r7, #4]
 80059d8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80059da:	2300      	movs	r3, #0
 80059dc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80059de:	7afb      	ldrb	r3, [r7, #11]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d16e      	bne.n	8005ac2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80059ea:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80059f2:	2b03      	cmp	r3, #3
 80059f4:	f040 8098 	bne.w	8005b28 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	689a      	ldr	r2, [r3, #8]
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d913      	bls.n	8005a2c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	689a      	ldr	r2, [r3, #8]
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	1ad2      	subs	r2, r2, r3
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	68da      	ldr	r2, [r3, #12]
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	bf28      	it	cs
 8005a1e:	4613      	movcs	r3, r2
 8005a20:	461a      	mov	r2, r3
 8005a22:	6879      	ldr	r1, [r7, #4]
 8005a24:	68f8      	ldr	r0, [r7, #12]
 8005a26:	f001 f984 	bl	8006d32 <USBD_CtlContinueRx>
 8005a2a:	e07d      	b.n	8005b28 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005a32:	f003 031f 	and.w	r3, r3, #31
 8005a36:	2b02      	cmp	r3, #2
 8005a38:	d014      	beq.n	8005a64 <USBD_LL_DataOutStage+0x98>
 8005a3a:	2b02      	cmp	r3, #2
 8005a3c:	d81d      	bhi.n	8005a7a <USBD_LL_DataOutStage+0xae>
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d002      	beq.n	8005a48 <USBD_LL_DataOutStage+0x7c>
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d003      	beq.n	8005a4e <USBD_LL_DataOutStage+0x82>
 8005a46:	e018      	b.n	8005a7a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	75bb      	strb	r3, [r7, #22]
            break;
 8005a4c:	e018      	b.n	8005a80 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	4619      	mov	r1, r3
 8005a58:	68f8      	ldr	r0, [r7, #12]
 8005a5a:	f000 fa5e 	bl	8005f1a <USBD_CoreFindIF>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	75bb      	strb	r3, [r7, #22]
            break;
 8005a62:	e00d      	b.n	8005a80 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	68f8      	ldr	r0, [r7, #12]
 8005a70:	f000 fa60 	bl	8005f34 <USBD_CoreFindEP>
 8005a74:	4603      	mov	r3, r0
 8005a76:	75bb      	strb	r3, [r7, #22]
            break;
 8005a78:	e002      	b.n	8005a80 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	75bb      	strb	r3, [r7, #22]
            break;
 8005a7e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005a80:	7dbb      	ldrb	r3, [r7, #22]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d119      	bne.n	8005aba <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	2b03      	cmp	r3, #3
 8005a90:	d113      	bne.n	8005aba <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005a92:	7dba      	ldrb	r2, [r7, #22]
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	32ae      	adds	r2, #174	; 0xae
 8005a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a9c:	691b      	ldr	r3, [r3, #16]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d00b      	beq.n	8005aba <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005aa2:	7dba      	ldrb	r2, [r7, #22]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005aaa:	7dba      	ldrb	r2, [r7, #22]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	32ae      	adds	r2, #174	; 0xae
 8005ab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ab4:	691b      	ldr	r3, [r3, #16]
 8005ab6:	68f8      	ldr	r0, [r7, #12]
 8005ab8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005aba:	68f8      	ldr	r0, [r7, #12]
 8005abc:	f001 f94a 	bl	8006d54 <USBD_CtlSendStatus>
 8005ac0:	e032      	b.n	8005b28 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005ac2:	7afb      	ldrb	r3, [r7, #11]
 8005ac4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	4619      	mov	r1, r3
 8005acc:	68f8      	ldr	r0, [r7, #12]
 8005ace:	f000 fa31 	bl	8005f34 <USBD_CoreFindEP>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005ad6:	7dbb      	ldrb	r3, [r7, #22]
 8005ad8:	2bff      	cmp	r3, #255	; 0xff
 8005ada:	d025      	beq.n	8005b28 <USBD_LL_DataOutStage+0x15c>
 8005adc:	7dbb      	ldrb	r3, [r7, #22]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d122      	bne.n	8005b28 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	2b03      	cmp	r3, #3
 8005aec:	d117      	bne.n	8005b1e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005aee:	7dba      	ldrb	r2, [r7, #22]
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	32ae      	adds	r2, #174	; 0xae
 8005af4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005af8:	699b      	ldr	r3, [r3, #24]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d00f      	beq.n	8005b1e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005afe:	7dba      	ldrb	r2, [r7, #22]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005b06:	7dba      	ldrb	r2, [r7, #22]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	32ae      	adds	r2, #174	; 0xae
 8005b0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b10:	699b      	ldr	r3, [r3, #24]
 8005b12:	7afa      	ldrb	r2, [r7, #11]
 8005b14:	4611      	mov	r1, r2
 8005b16:	68f8      	ldr	r0, [r7, #12]
 8005b18:	4798      	blx	r3
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005b1e:	7dfb      	ldrb	r3, [r7, #23]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d001      	beq.n	8005b28 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005b24:	7dfb      	ldrb	r3, [r7, #23]
 8005b26:	e000      	b.n	8005b2a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005b28:	2300      	movs	r3, #0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3718      	adds	r7, #24
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}

08005b32 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005b32:	b580      	push	{r7, lr}
 8005b34:	b086      	sub	sp, #24
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	60f8      	str	r0, [r7, #12]
 8005b3a:	460b      	mov	r3, r1
 8005b3c:	607a      	str	r2, [r7, #4]
 8005b3e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005b40:	7afb      	ldrb	r3, [r7, #11]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d16f      	bne.n	8005c26 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	3314      	adds	r3, #20
 8005b4a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005b52:	2b02      	cmp	r3, #2
 8005b54:	d15a      	bne.n	8005c0c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	689a      	ldr	r2, [r3, #8]
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d914      	bls.n	8005b8c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	689a      	ldr	r2, [r3, #8]
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	68db      	ldr	r3, [r3, #12]
 8005b6a:	1ad2      	subs	r2, r2, r3
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	461a      	mov	r2, r3
 8005b76:	6879      	ldr	r1, [r7, #4]
 8005b78:	68f8      	ldr	r0, [r7, #12]
 8005b7a:	f001 f8ac 	bl	8006cd6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005b7e:	2300      	movs	r3, #0
 8005b80:	2200      	movs	r2, #0
 8005b82:	2100      	movs	r1, #0
 8005b84:	68f8      	ldr	r0, [r7, #12]
 8005b86:	f004 fb6b 	bl	800a260 <USBD_LL_PrepareReceive>
 8005b8a:	e03f      	b.n	8005c0c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	68da      	ldr	r2, [r3, #12]
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d11c      	bne.n	8005bd2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	685a      	ldr	r2, [r3, #4]
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d316      	bcc.n	8005bd2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	685a      	ldr	r2, [r3, #4]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d20f      	bcs.n	8005bd2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	2100      	movs	r1, #0
 8005bb6:	68f8      	ldr	r0, [r7, #12]
 8005bb8:	f001 f88d 	bl	8006cd6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	2100      	movs	r1, #0
 8005bca:	68f8      	ldr	r0, [r7, #12]
 8005bcc:	f004 fb48 	bl	800a260 <USBD_LL_PrepareReceive>
 8005bd0:	e01c      	b.n	8005c0c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	2b03      	cmp	r3, #3
 8005bdc:	d10f      	bne.n	8005bfe <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d009      	beq.n	8005bfe <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	68f8      	ldr	r0, [r7, #12]
 8005bfc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005bfe:	2180      	movs	r1, #128	; 0x80
 8005c00:	68f8      	ldr	r0, [r7, #12]
 8005c02:	f004 fa83 	bl	800a10c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005c06:	68f8      	ldr	r0, [r7, #12]
 8005c08:	f001 f8b7 	bl	8006d7a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d03a      	beq.n	8005c8c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005c16:	68f8      	ldr	r0, [r7, #12]
 8005c18:	f7ff fe42 	bl	80058a0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005c24:	e032      	b.n	8005c8c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005c26:	7afb      	ldrb	r3, [r7, #11]
 8005c28:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	4619      	mov	r1, r3
 8005c30:	68f8      	ldr	r0, [r7, #12]
 8005c32:	f000 f97f 	bl	8005f34 <USBD_CoreFindEP>
 8005c36:	4603      	mov	r3, r0
 8005c38:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005c3a:	7dfb      	ldrb	r3, [r7, #23]
 8005c3c:	2bff      	cmp	r3, #255	; 0xff
 8005c3e:	d025      	beq.n	8005c8c <USBD_LL_DataInStage+0x15a>
 8005c40:	7dfb      	ldrb	r3, [r7, #23]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d122      	bne.n	8005c8c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	2b03      	cmp	r3, #3
 8005c50:	d11c      	bne.n	8005c8c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005c52:	7dfa      	ldrb	r2, [r7, #23]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	32ae      	adds	r2, #174	; 0xae
 8005c58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c5c:	695b      	ldr	r3, [r3, #20]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d014      	beq.n	8005c8c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005c62:	7dfa      	ldrb	r2, [r7, #23]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005c6a:	7dfa      	ldrb	r2, [r7, #23]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	32ae      	adds	r2, #174	; 0xae
 8005c70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c74:	695b      	ldr	r3, [r3, #20]
 8005c76:	7afa      	ldrb	r2, [r7, #11]
 8005c78:	4611      	mov	r1, r2
 8005c7a:	68f8      	ldr	r0, [r7, #12]
 8005c7c:	4798      	blx	r3
 8005c7e:	4603      	mov	r3, r0
 8005c80:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005c82:	7dbb      	ldrb	r3, [r7, #22]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d001      	beq.n	8005c8c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005c88:	7dbb      	ldrb	r3, [r7, #22]
 8005c8a:	e000      	b.n	8005c8e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3718      	adds	r7, #24
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}

08005c96 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005c96:	b580      	push	{r7, lr}
 8005c98:	b084      	sub	sp, #16
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2200      	movs	r2, #0
 8005cae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d014      	beq.n	8005cfc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d00e      	beq.n	8005cfc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	6852      	ldr	r2, [r2, #4]
 8005cea:	b2d2      	uxtb	r2, r2
 8005cec:	4611      	mov	r1, r2
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	4798      	blx	r3
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d001      	beq.n	8005cfc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005cf8:	2303      	movs	r3, #3
 8005cfa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005cfc:	2340      	movs	r3, #64	; 0x40
 8005cfe:	2200      	movs	r2, #0
 8005d00:	2100      	movs	r1, #0
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f004 f9bd 	bl	800a082 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2240      	movs	r2, #64	; 0x40
 8005d14:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005d18:	2340      	movs	r3, #64	; 0x40
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	2180      	movs	r1, #128	; 0x80
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f004 f9af 	bl	800a082 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2240      	movs	r2, #64	; 0x40
 8005d2e:	621a      	str	r2, [r3, #32]

  return ret;
 8005d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3710      	adds	r7, #16
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}

08005d3a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005d3a:	b480      	push	{r7}
 8005d3c:	b083      	sub	sp, #12
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	6078      	str	r0, [r7, #4]
 8005d42:	460b      	mov	r3, r1
 8005d44:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	78fa      	ldrb	r2, [r7, #3]
 8005d4a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005d4c:	2300      	movs	r3, #0
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	370c      	adds	r7, #12
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr

08005d5a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005d5a:	b480      	push	{r7}
 8005d5c:	b083      	sub	sp, #12
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d68:	b2da      	uxtb	r2, r3
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2204      	movs	r2, #4
 8005d74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005d78:	2300      	movs	r3, #0
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	370c      	adds	r7, #12
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr

08005d86 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005d86:	b480      	push	{r7}
 8005d88:	b083      	sub	sp, #12
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	2b04      	cmp	r3, #4
 8005d98:	d106      	bne.n	8005da8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005da0:	b2da      	uxtb	r2, r3
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	370c      	adds	r7, #12
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr

08005db6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005db6:	b580      	push	{r7, lr}
 8005db8:	b082      	sub	sp, #8
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	2b03      	cmp	r3, #3
 8005dc8:	d110      	bne.n	8005dec <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d00b      	beq.n	8005dec <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dda:	69db      	ldr	r3, [r3, #28]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d005      	beq.n	8005dec <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005de6:	69db      	ldr	r3, [r3, #28]
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005dec:	2300      	movs	r3, #0
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3708      	adds	r7, #8
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}

08005df6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005df6:	b580      	push	{r7, lr}
 8005df8:	b082      	sub	sp, #8
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	6078      	str	r0, [r7, #4]
 8005dfe:	460b      	mov	r3, r1
 8005e00:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	32ae      	adds	r2, #174	; 0xae
 8005e0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d101      	bne.n	8005e18 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005e14:	2303      	movs	r3, #3
 8005e16:	e01c      	b.n	8005e52 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	2b03      	cmp	r3, #3
 8005e22:	d115      	bne.n	8005e50 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	32ae      	adds	r2, #174	; 0xae
 8005e2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e32:	6a1b      	ldr	r3, [r3, #32]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d00b      	beq.n	8005e50 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	32ae      	adds	r2, #174	; 0xae
 8005e42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e46:	6a1b      	ldr	r3, [r3, #32]
 8005e48:	78fa      	ldrb	r2, [r7, #3]
 8005e4a:	4611      	mov	r1, r2
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005e50:	2300      	movs	r3, #0
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3708      	adds	r7, #8
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}

08005e5a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005e5a:	b580      	push	{r7, lr}
 8005e5c:	b082      	sub	sp, #8
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	6078      	str	r0, [r7, #4]
 8005e62:	460b      	mov	r3, r1
 8005e64:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	32ae      	adds	r2, #174	; 0xae
 8005e70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d101      	bne.n	8005e7c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005e78:	2303      	movs	r3, #3
 8005e7a:	e01c      	b.n	8005eb6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	2b03      	cmp	r3, #3
 8005e86:	d115      	bne.n	8005eb4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	32ae      	adds	r2, #174	; 0xae
 8005e92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d00b      	beq.n	8005eb4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	32ae      	adds	r2, #174	; 0xae
 8005ea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eac:	78fa      	ldrb	r2, [r7, #3]
 8005eae:	4611      	mov	r1, r2
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3708      	adds	r7, #8
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}

08005ebe <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005ebe:	b480      	push	{r7}
 8005ec0:	b083      	sub	sp, #12
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005ec6:	2300      	movs	r3, #0
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	370c      	adds	r7, #12
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b084      	sub	sp, #16
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005edc:	2300      	movs	r3, #0
 8005ede:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d00e      	beq.n	8005f10 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	6852      	ldr	r2, [r2, #4]
 8005efe:	b2d2      	uxtb	r2, r2
 8005f00:	4611      	mov	r1, r2
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	4798      	blx	r3
 8005f06:	4603      	mov	r3, r0
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d001      	beq.n	8005f10 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005f0c:	2303      	movs	r3, #3
 8005f0e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3710      	adds	r7, #16
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}

08005f1a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005f1a:	b480      	push	{r7}
 8005f1c:	b083      	sub	sp, #12
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
 8005f22:	460b      	mov	r3, r1
 8005f24:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005f26:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	370c      	adds	r7, #12
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	460b      	mov	r3, r1
 8005f3e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005f40:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	370c      	adds	r7, #12
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr

08005f4e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005f4e:	b580      	push	{r7, lr}
 8005f50:	b086      	sub	sp, #24
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	6078      	str	r0, [r7, #4]
 8005f56:	460b      	mov	r3, r1
 8005f58:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005f62:	2300      	movs	r3, #0
 8005f64:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	885b      	ldrh	r3, [r3, #2]
 8005f6a:	b29a      	uxth	r2, r3
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d920      	bls.n	8005fb8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005f7e:	e013      	b.n	8005fa8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005f80:	f107 030a 	add.w	r3, r7, #10
 8005f84:	4619      	mov	r1, r3
 8005f86:	6978      	ldr	r0, [r7, #20]
 8005f88:	f000 f81b 	bl	8005fc2 <USBD_GetNextDesc>
 8005f8c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	785b      	ldrb	r3, [r3, #1]
 8005f92:	2b05      	cmp	r3, #5
 8005f94:	d108      	bne.n	8005fa8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	789b      	ldrb	r3, [r3, #2]
 8005f9e:	78fa      	ldrb	r2, [r7, #3]
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d008      	beq.n	8005fb6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	885b      	ldrh	r3, [r3, #2]
 8005fac:	b29a      	uxth	r2, r3
 8005fae:	897b      	ldrh	r3, [r7, #10]
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d8e5      	bhi.n	8005f80 <USBD_GetEpDesc+0x32>
 8005fb4:	e000      	b.n	8005fb8 <USBD_GetEpDesc+0x6a>
          break;
 8005fb6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005fb8:	693b      	ldr	r3, [r7, #16]
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3718      	adds	r7, #24
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}

08005fc2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005fc2:	b480      	push	{r7}
 8005fc4:	b085      	sub	sp, #20
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
 8005fca:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	881a      	ldrh	r2, [r3, #0]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	4413      	add	r3, r2
 8005fdc:	b29a      	uxth	r2, r3
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	4413      	add	r3, r2
 8005fec:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005fee:	68fb      	ldr	r3, [r7, #12]
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3714      	adds	r7, #20
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr

08005ffc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b087      	sub	sp, #28
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	3301      	adds	r3, #1
 8006012:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800601a:	8a3b      	ldrh	r3, [r7, #16]
 800601c:	021b      	lsls	r3, r3, #8
 800601e:	b21a      	sxth	r2, r3
 8006020:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006024:	4313      	orrs	r3, r2
 8006026:	b21b      	sxth	r3, r3
 8006028:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800602a:	89fb      	ldrh	r3, [r7, #14]
}
 800602c:	4618      	mov	r0, r3
 800602e:	371c      	adds	r7, #28
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b084      	sub	sp, #16
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006042:	2300      	movs	r3, #0
 8006044:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800604e:	2b40      	cmp	r3, #64	; 0x40
 8006050:	d005      	beq.n	800605e <USBD_StdDevReq+0x26>
 8006052:	2b40      	cmp	r3, #64	; 0x40
 8006054:	d857      	bhi.n	8006106 <USBD_StdDevReq+0xce>
 8006056:	2b00      	cmp	r3, #0
 8006058:	d00f      	beq.n	800607a <USBD_StdDevReq+0x42>
 800605a:	2b20      	cmp	r3, #32
 800605c:	d153      	bne.n	8006106 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	32ae      	adds	r2, #174	; 0xae
 8006068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	6839      	ldr	r1, [r7, #0]
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	4798      	blx	r3
 8006074:	4603      	mov	r3, r0
 8006076:	73fb      	strb	r3, [r7, #15]
      break;
 8006078:	e04a      	b.n	8006110 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	785b      	ldrb	r3, [r3, #1]
 800607e:	2b09      	cmp	r3, #9
 8006080:	d83b      	bhi.n	80060fa <USBD_StdDevReq+0xc2>
 8006082:	a201      	add	r2, pc, #4	; (adr r2, 8006088 <USBD_StdDevReq+0x50>)
 8006084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006088:	080060dd 	.word	0x080060dd
 800608c:	080060f1 	.word	0x080060f1
 8006090:	080060fb 	.word	0x080060fb
 8006094:	080060e7 	.word	0x080060e7
 8006098:	080060fb 	.word	0x080060fb
 800609c:	080060bb 	.word	0x080060bb
 80060a0:	080060b1 	.word	0x080060b1
 80060a4:	080060fb 	.word	0x080060fb
 80060a8:	080060d3 	.word	0x080060d3
 80060ac:	080060c5 	.word	0x080060c5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80060b0:	6839      	ldr	r1, [r7, #0]
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f000 fa3c 	bl	8006530 <USBD_GetDescriptor>
          break;
 80060b8:	e024      	b.n	8006104 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80060ba:	6839      	ldr	r1, [r7, #0]
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f000 fba1 	bl	8006804 <USBD_SetAddress>
          break;
 80060c2:	e01f      	b.n	8006104 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80060c4:	6839      	ldr	r1, [r7, #0]
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 fbe0 	bl	800688c <USBD_SetConfig>
 80060cc:	4603      	mov	r3, r0
 80060ce:	73fb      	strb	r3, [r7, #15]
          break;
 80060d0:	e018      	b.n	8006104 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80060d2:	6839      	ldr	r1, [r7, #0]
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f000 fc83 	bl	80069e0 <USBD_GetConfig>
          break;
 80060da:	e013      	b.n	8006104 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80060dc:	6839      	ldr	r1, [r7, #0]
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 fcb4 	bl	8006a4c <USBD_GetStatus>
          break;
 80060e4:	e00e      	b.n	8006104 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80060e6:	6839      	ldr	r1, [r7, #0]
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f000 fce3 	bl	8006ab4 <USBD_SetFeature>
          break;
 80060ee:	e009      	b.n	8006104 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80060f0:	6839      	ldr	r1, [r7, #0]
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f000 fd07 	bl	8006b06 <USBD_ClrFeature>
          break;
 80060f8:	e004      	b.n	8006104 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80060fa:	6839      	ldr	r1, [r7, #0]
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f000 fd5e 	bl	8006bbe <USBD_CtlError>
          break;
 8006102:	bf00      	nop
      }
      break;
 8006104:	e004      	b.n	8006110 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006106:	6839      	ldr	r1, [r7, #0]
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f000 fd58 	bl	8006bbe <USBD_CtlError>
      break;
 800610e:	bf00      	nop
  }

  return ret;
 8006110:	7bfb      	ldrb	r3, [r7, #15]
}
 8006112:	4618      	mov	r0, r3
 8006114:	3710      	adds	r7, #16
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
 800611a:	bf00      	nop

0800611c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b084      	sub	sp, #16
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006126:	2300      	movs	r3, #0
 8006128:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	781b      	ldrb	r3, [r3, #0]
 800612e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006132:	2b40      	cmp	r3, #64	; 0x40
 8006134:	d005      	beq.n	8006142 <USBD_StdItfReq+0x26>
 8006136:	2b40      	cmp	r3, #64	; 0x40
 8006138:	d852      	bhi.n	80061e0 <USBD_StdItfReq+0xc4>
 800613a:	2b00      	cmp	r3, #0
 800613c:	d001      	beq.n	8006142 <USBD_StdItfReq+0x26>
 800613e:	2b20      	cmp	r3, #32
 8006140:	d14e      	bne.n	80061e0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006148:	b2db      	uxtb	r3, r3
 800614a:	3b01      	subs	r3, #1
 800614c:	2b02      	cmp	r3, #2
 800614e:	d840      	bhi.n	80061d2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	889b      	ldrh	r3, [r3, #4]
 8006154:	b2db      	uxtb	r3, r3
 8006156:	2b01      	cmp	r3, #1
 8006158:	d836      	bhi.n	80061c8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	889b      	ldrh	r3, [r3, #4]
 800615e:	b2db      	uxtb	r3, r3
 8006160:	4619      	mov	r1, r3
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f7ff fed9 	bl	8005f1a <USBD_CoreFindIF>
 8006168:	4603      	mov	r3, r0
 800616a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800616c:	7bbb      	ldrb	r3, [r7, #14]
 800616e:	2bff      	cmp	r3, #255	; 0xff
 8006170:	d01d      	beq.n	80061ae <USBD_StdItfReq+0x92>
 8006172:	7bbb      	ldrb	r3, [r7, #14]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d11a      	bne.n	80061ae <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006178:	7bba      	ldrb	r2, [r7, #14]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	32ae      	adds	r2, #174	; 0xae
 800617e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d00f      	beq.n	80061a8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006188:	7bba      	ldrb	r2, [r7, #14]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006190:	7bba      	ldrb	r2, [r7, #14]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	32ae      	adds	r2, #174	; 0xae
 8006196:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	6839      	ldr	r1, [r7, #0]
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	4798      	blx	r3
 80061a2:	4603      	mov	r3, r0
 80061a4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80061a6:	e004      	b.n	80061b2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80061a8:	2303      	movs	r3, #3
 80061aa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80061ac:	e001      	b.n	80061b2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80061ae:	2303      	movs	r3, #3
 80061b0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	88db      	ldrh	r3, [r3, #6]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d110      	bne.n	80061dc <USBD_StdItfReq+0xc0>
 80061ba:	7bfb      	ldrb	r3, [r7, #15]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d10d      	bne.n	80061dc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f000 fdc7 	bl	8006d54 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80061c6:	e009      	b.n	80061dc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80061c8:	6839      	ldr	r1, [r7, #0]
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f000 fcf7 	bl	8006bbe <USBD_CtlError>
          break;
 80061d0:	e004      	b.n	80061dc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80061d2:	6839      	ldr	r1, [r7, #0]
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f000 fcf2 	bl	8006bbe <USBD_CtlError>
          break;
 80061da:	e000      	b.n	80061de <USBD_StdItfReq+0xc2>
          break;
 80061dc:	bf00      	nop
      }
      break;
 80061de:	e004      	b.n	80061ea <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80061e0:	6839      	ldr	r1, [r7, #0]
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 fceb 	bl	8006bbe <USBD_CtlError>
      break;
 80061e8:	bf00      	nop
  }

  return ret;
 80061ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3710      	adds	r7, #16
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b084      	sub	sp, #16
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80061fe:	2300      	movs	r3, #0
 8006200:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	889b      	ldrh	r3, [r3, #4]
 8006206:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006210:	2b40      	cmp	r3, #64	; 0x40
 8006212:	d007      	beq.n	8006224 <USBD_StdEPReq+0x30>
 8006214:	2b40      	cmp	r3, #64	; 0x40
 8006216:	f200 817f 	bhi.w	8006518 <USBD_StdEPReq+0x324>
 800621a:	2b00      	cmp	r3, #0
 800621c:	d02a      	beq.n	8006274 <USBD_StdEPReq+0x80>
 800621e:	2b20      	cmp	r3, #32
 8006220:	f040 817a 	bne.w	8006518 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006224:	7bbb      	ldrb	r3, [r7, #14]
 8006226:	4619      	mov	r1, r3
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f7ff fe83 	bl	8005f34 <USBD_CoreFindEP>
 800622e:	4603      	mov	r3, r0
 8006230:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006232:	7b7b      	ldrb	r3, [r7, #13]
 8006234:	2bff      	cmp	r3, #255	; 0xff
 8006236:	f000 8174 	beq.w	8006522 <USBD_StdEPReq+0x32e>
 800623a:	7b7b      	ldrb	r3, [r7, #13]
 800623c:	2b00      	cmp	r3, #0
 800623e:	f040 8170 	bne.w	8006522 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006242:	7b7a      	ldrb	r2, [r7, #13]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800624a:	7b7a      	ldrb	r2, [r7, #13]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	32ae      	adds	r2, #174	; 0xae
 8006250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	2b00      	cmp	r3, #0
 8006258:	f000 8163 	beq.w	8006522 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800625c:	7b7a      	ldrb	r2, [r7, #13]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	32ae      	adds	r2, #174	; 0xae
 8006262:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	6839      	ldr	r1, [r7, #0]
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	4798      	blx	r3
 800626e:	4603      	mov	r3, r0
 8006270:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006272:	e156      	b.n	8006522 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	785b      	ldrb	r3, [r3, #1]
 8006278:	2b03      	cmp	r3, #3
 800627a:	d008      	beq.n	800628e <USBD_StdEPReq+0x9a>
 800627c:	2b03      	cmp	r3, #3
 800627e:	f300 8145 	bgt.w	800650c <USBD_StdEPReq+0x318>
 8006282:	2b00      	cmp	r3, #0
 8006284:	f000 809b 	beq.w	80063be <USBD_StdEPReq+0x1ca>
 8006288:	2b01      	cmp	r3, #1
 800628a:	d03c      	beq.n	8006306 <USBD_StdEPReq+0x112>
 800628c:	e13e      	b.n	800650c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006294:	b2db      	uxtb	r3, r3
 8006296:	2b02      	cmp	r3, #2
 8006298:	d002      	beq.n	80062a0 <USBD_StdEPReq+0xac>
 800629a:	2b03      	cmp	r3, #3
 800629c:	d016      	beq.n	80062cc <USBD_StdEPReq+0xd8>
 800629e:	e02c      	b.n	80062fa <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80062a0:	7bbb      	ldrb	r3, [r7, #14]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d00d      	beq.n	80062c2 <USBD_StdEPReq+0xce>
 80062a6:	7bbb      	ldrb	r3, [r7, #14]
 80062a8:	2b80      	cmp	r3, #128	; 0x80
 80062aa:	d00a      	beq.n	80062c2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80062ac:	7bbb      	ldrb	r3, [r7, #14]
 80062ae:	4619      	mov	r1, r3
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f003 ff2b 	bl	800a10c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80062b6:	2180      	movs	r1, #128	; 0x80
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f003 ff27 	bl	800a10c <USBD_LL_StallEP>
 80062be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80062c0:	e020      	b.n	8006304 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80062c2:	6839      	ldr	r1, [r7, #0]
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f000 fc7a 	bl	8006bbe <USBD_CtlError>
              break;
 80062ca:	e01b      	b.n	8006304 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	885b      	ldrh	r3, [r3, #2]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d10e      	bne.n	80062f2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80062d4:	7bbb      	ldrb	r3, [r7, #14]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d00b      	beq.n	80062f2 <USBD_StdEPReq+0xfe>
 80062da:	7bbb      	ldrb	r3, [r7, #14]
 80062dc:	2b80      	cmp	r3, #128	; 0x80
 80062de:	d008      	beq.n	80062f2 <USBD_StdEPReq+0xfe>
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	88db      	ldrh	r3, [r3, #6]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d104      	bne.n	80062f2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80062e8:	7bbb      	ldrb	r3, [r7, #14]
 80062ea:	4619      	mov	r1, r3
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f003 ff0d 	bl	800a10c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f000 fd2e 	bl	8006d54 <USBD_CtlSendStatus>

              break;
 80062f8:	e004      	b.n	8006304 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80062fa:	6839      	ldr	r1, [r7, #0]
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f000 fc5e 	bl	8006bbe <USBD_CtlError>
              break;
 8006302:	bf00      	nop
          }
          break;
 8006304:	e107      	b.n	8006516 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800630c:	b2db      	uxtb	r3, r3
 800630e:	2b02      	cmp	r3, #2
 8006310:	d002      	beq.n	8006318 <USBD_StdEPReq+0x124>
 8006312:	2b03      	cmp	r3, #3
 8006314:	d016      	beq.n	8006344 <USBD_StdEPReq+0x150>
 8006316:	e04b      	b.n	80063b0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006318:	7bbb      	ldrb	r3, [r7, #14]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d00d      	beq.n	800633a <USBD_StdEPReq+0x146>
 800631e:	7bbb      	ldrb	r3, [r7, #14]
 8006320:	2b80      	cmp	r3, #128	; 0x80
 8006322:	d00a      	beq.n	800633a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006324:	7bbb      	ldrb	r3, [r7, #14]
 8006326:	4619      	mov	r1, r3
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f003 feef 	bl	800a10c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800632e:	2180      	movs	r1, #128	; 0x80
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f003 feeb 	bl	800a10c <USBD_LL_StallEP>
 8006336:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006338:	e040      	b.n	80063bc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800633a:	6839      	ldr	r1, [r7, #0]
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f000 fc3e 	bl	8006bbe <USBD_CtlError>
              break;
 8006342:	e03b      	b.n	80063bc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	885b      	ldrh	r3, [r3, #2]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d136      	bne.n	80063ba <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800634c:	7bbb      	ldrb	r3, [r7, #14]
 800634e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006352:	2b00      	cmp	r3, #0
 8006354:	d004      	beq.n	8006360 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006356:	7bbb      	ldrb	r3, [r7, #14]
 8006358:	4619      	mov	r1, r3
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f003 fef5 	bl	800a14a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f000 fcf7 	bl	8006d54 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006366:	7bbb      	ldrb	r3, [r7, #14]
 8006368:	4619      	mov	r1, r3
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f7ff fde2 	bl	8005f34 <USBD_CoreFindEP>
 8006370:	4603      	mov	r3, r0
 8006372:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006374:	7b7b      	ldrb	r3, [r7, #13]
 8006376:	2bff      	cmp	r3, #255	; 0xff
 8006378:	d01f      	beq.n	80063ba <USBD_StdEPReq+0x1c6>
 800637a:	7b7b      	ldrb	r3, [r7, #13]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d11c      	bne.n	80063ba <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006380:	7b7a      	ldrb	r2, [r7, #13]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006388:	7b7a      	ldrb	r2, [r7, #13]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	32ae      	adds	r2, #174	; 0xae
 800638e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d010      	beq.n	80063ba <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006398:	7b7a      	ldrb	r2, [r7, #13]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	32ae      	adds	r2, #174	; 0xae
 800639e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	6839      	ldr	r1, [r7, #0]
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	4798      	blx	r3
 80063aa:	4603      	mov	r3, r0
 80063ac:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80063ae:	e004      	b.n	80063ba <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80063b0:	6839      	ldr	r1, [r7, #0]
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f000 fc03 	bl	8006bbe <USBD_CtlError>
              break;
 80063b8:	e000      	b.n	80063bc <USBD_StdEPReq+0x1c8>
              break;
 80063ba:	bf00      	nop
          }
          break;
 80063bc:	e0ab      	b.n	8006516 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	2b02      	cmp	r3, #2
 80063c8:	d002      	beq.n	80063d0 <USBD_StdEPReq+0x1dc>
 80063ca:	2b03      	cmp	r3, #3
 80063cc:	d032      	beq.n	8006434 <USBD_StdEPReq+0x240>
 80063ce:	e097      	b.n	8006500 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80063d0:	7bbb      	ldrb	r3, [r7, #14]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d007      	beq.n	80063e6 <USBD_StdEPReq+0x1f2>
 80063d6:	7bbb      	ldrb	r3, [r7, #14]
 80063d8:	2b80      	cmp	r3, #128	; 0x80
 80063da:	d004      	beq.n	80063e6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80063dc:	6839      	ldr	r1, [r7, #0]
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f000 fbed 	bl	8006bbe <USBD_CtlError>
                break;
 80063e4:	e091      	b.n	800650a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80063e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	da0b      	bge.n	8006406 <USBD_StdEPReq+0x212>
 80063ee:	7bbb      	ldrb	r3, [r7, #14]
 80063f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80063f4:	4613      	mov	r3, r2
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	4413      	add	r3, r2
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	3310      	adds	r3, #16
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	4413      	add	r3, r2
 8006402:	3304      	adds	r3, #4
 8006404:	e00b      	b.n	800641e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006406:	7bbb      	ldrb	r3, [r7, #14]
 8006408:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800640c:	4613      	mov	r3, r2
 800640e:	009b      	lsls	r3, r3, #2
 8006410:	4413      	add	r3, r2
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006418:	687a      	ldr	r2, [r7, #4]
 800641a:	4413      	add	r3, r2
 800641c:	3304      	adds	r3, #4
 800641e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	2200      	movs	r2, #0
 8006424:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	2202      	movs	r2, #2
 800642a:	4619      	mov	r1, r3
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f000 fc37 	bl	8006ca0 <USBD_CtlSendData>
              break;
 8006432:	e06a      	b.n	800650a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006434:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006438:	2b00      	cmp	r3, #0
 800643a:	da11      	bge.n	8006460 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800643c:	7bbb      	ldrb	r3, [r7, #14]
 800643e:	f003 020f 	and.w	r2, r3, #15
 8006442:	6879      	ldr	r1, [r7, #4]
 8006444:	4613      	mov	r3, r2
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	4413      	add	r3, r2
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	440b      	add	r3, r1
 800644e:	3324      	adds	r3, #36	; 0x24
 8006450:	881b      	ldrh	r3, [r3, #0]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d117      	bne.n	8006486 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006456:	6839      	ldr	r1, [r7, #0]
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f000 fbb0 	bl	8006bbe <USBD_CtlError>
                  break;
 800645e:	e054      	b.n	800650a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006460:	7bbb      	ldrb	r3, [r7, #14]
 8006462:	f003 020f 	and.w	r2, r3, #15
 8006466:	6879      	ldr	r1, [r7, #4]
 8006468:	4613      	mov	r3, r2
 800646a:	009b      	lsls	r3, r3, #2
 800646c:	4413      	add	r3, r2
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	440b      	add	r3, r1
 8006472:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006476:	881b      	ldrh	r3, [r3, #0]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d104      	bne.n	8006486 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800647c:	6839      	ldr	r1, [r7, #0]
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f000 fb9d 	bl	8006bbe <USBD_CtlError>
                  break;
 8006484:	e041      	b.n	800650a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006486:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800648a:	2b00      	cmp	r3, #0
 800648c:	da0b      	bge.n	80064a6 <USBD_StdEPReq+0x2b2>
 800648e:	7bbb      	ldrb	r3, [r7, #14]
 8006490:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006494:	4613      	mov	r3, r2
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	4413      	add	r3, r2
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	3310      	adds	r3, #16
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	4413      	add	r3, r2
 80064a2:	3304      	adds	r3, #4
 80064a4:	e00b      	b.n	80064be <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80064a6:	7bbb      	ldrb	r3, [r7, #14]
 80064a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064ac:	4613      	mov	r3, r2
 80064ae:	009b      	lsls	r3, r3, #2
 80064b0:	4413      	add	r3, r2
 80064b2:	009b      	lsls	r3, r3, #2
 80064b4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	4413      	add	r3, r2
 80064bc:	3304      	adds	r3, #4
 80064be:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80064c0:	7bbb      	ldrb	r3, [r7, #14]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d002      	beq.n	80064cc <USBD_StdEPReq+0x2d8>
 80064c6:	7bbb      	ldrb	r3, [r7, #14]
 80064c8:	2b80      	cmp	r3, #128	; 0x80
 80064ca:	d103      	bne.n	80064d4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	2200      	movs	r2, #0
 80064d0:	601a      	str	r2, [r3, #0]
 80064d2:	e00e      	b.n	80064f2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80064d4:	7bbb      	ldrb	r3, [r7, #14]
 80064d6:	4619      	mov	r1, r3
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f003 fe55 	bl	800a188 <USBD_LL_IsStallEP>
 80064de:	4603      	mov	r3, r0
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d003      	beq.n	80064ec <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	2201      	movs	r2, #1
 80064e8:	601a      	str	r2, [r3, #0]
 80064ea:	e002      	b.n	80064f2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	2200      	movs	r2, #0
 80064f0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	2202      	movs	r2, #2
 80064f6:	4619      	mov	r1, r3
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f000 fbd1 	bl	8006ca0 <USBD_CtlSendData>
              break;
 80064fe:	e004      	b.n	800650a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006500:	6839      	ldr	r1, [r7, #0]
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 fb5b 	bl	8006bbe <USBD_CtlError>
              break;
 8006508:	bf00      	nop
          }
          break;
 800650a:	e004      	b.n	8006516 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800650c:	6839      	ldr	r1, [r7, #0]
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 fb55 	bl	8006bbe <USBD_CtlError>
          break;
 8006514:	bf00      	nop
      }
      break;
 8006516:	e005      	b.n	8006524 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006518:	6839      	ldr	r1, [r7, #0]
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 fb4f 	bl	8006bbe <USBD_CtlError>
      break;
 8006520:	e000      	b.n	8006524 <USBD_StdEPReq+0x330>
      break;
 8006522:	bf00      	nop
  }

  return ret;
 8006524:	7bfb      	ldrb	r3, [r7, #15]
}
 8006526:	4618      	mov	r0, r3
 8006528:	3710      	adds	r7, #16
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
	...

08006530 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800653a:	2300      	movs	r3, #0
 800653c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800653e:	2300      	movs	r3, #0
 8006540:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006542:	2300      	movs	r3, #0
 8006544:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	885b      	ldrh	r3, [r3, #2]
 800654a:	0a1b      	lsrs	r3, r3, #8
 800654c:	b29b      	uxth	r3, r3
 800654e:	3b01      	subs	r3, #1
 8006550:	2b06      	cmp	r3, #6
 8006552:	f200 8128 	bhi.w	80067a6 <USBD_GetDescriptor+0x276>
 8006556:	a201      	add	r2, pc, #4	; (adr r2, 800655c <USBD_GetDescriptor+0x2c>)
 8006558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800655c:	08006579 	.word	0x08006579
 8006560:	08006591 	.word	0x08006591
 8006564:	080065d1 	.word	0x080065d1
 8006568:	080067a7 	.word	0x080067a7
 800656c:	080067a7 	.word	0x080067a7
 8006570:	08006747 	.word	0x08006747
 8006574:	08006773 	.word	0x08006773
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	7c12      	ldrb	r2, [r2, #16]
 8006584:	f107 0108 	add.w	r1, r7, #8
 8006588:	4610      	mov	r0, r2
 800658a:	4798      	blx	r3
 800658c:	60f8      	str	r0, [r7, #12]
      break;
 800658e:	e112      	b.n	80067b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	7c1b      	ldrb	r3, [r3, #16]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d10d      	bne.n	80065b4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800659e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065a0:	f107 0208 	add.w	r2, r7, #8
 80065a4:	4610      	mov	r0, r2
 80065a6:	4798      	blx	r3
 80065a8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	3301      	adds	r3, #1
 80065ae:	2202      	movs	r2, #2
 80065b0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80065b2:	e100      	b.n	80067b6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065bc:	f107 0208 	add.w	r2, r7, #8
 80065c0:	4610      	mov	r0, r2
 80065c2:	4798      	blx	r3
 80065c4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	3301      	adds	r3, #1
 80065ca:	2202      	movs	r2, #2
 80065cc:	701a      	strb	r2, [r3, #0]
      break;
 80065ce:	e0f2      	b.n	80067b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	885b      	ldrh	r3, [r3, #2]
 80065d4:	b2db      	uxtb	r3, r3
 80065d6:	2b05      	cmp	r3, #5
 80065d8:	f200 80ac 	bhi.w	8006734 <USBD_GetDescriptor+0x204>
 80065dc:	a201      	add	r2, pc, #4	; (adr r2, 80065e4 <USBD_GetDescriptor+0xb4>)
 80065de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065e2:	bf00      	nop
 80065e4:	080065fd 	.word	0x080065fd
 80065e8:	08006631 	.word	0x08006631
 80065ec:	08006665 	.word	0x08006665
 80065f0:	08006699 	.word	0x08006699
 80065f4:	080066cd 	.word	0x080066cd
 80065f8:	08006701 	.word	0x08006701
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d00b      	beq.n	8006620 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	687a      	ldr	r2, [r7, #4]
 8006612:	7c12      	ldrb	r2, [r2, #16]
 8006614:	f107 0108 	add.w	r1, r7, #8
 8006618:	4610      	mov	r0, r2
 800661a:	4798      	blx	r3
 800661c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800661e:	e091      	b.n	8006744 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006620:	6839      	ldr	r1, [r7, #0]
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f000 facb 	bl	8006bbe <USBD_CtlError>
            err++;
 8006628:	7afb      	ldrb	r3, [r7, #11]
 800662a:	3301      	adds	r3, #1
 800662c:	72fb      	strb	r3, [r7, #11]
          break;
 800662e:	e089      	b.n	8006744 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d00b      	beq.n	8006654 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	7c12      	ldrb	r2, [r2, #16]
 8006648:	f107 0108 	add.w	r1, r7, #8
 800664c:	4610      	mov	r0, r2
 800664e:	4798      	blx	r3
 8006650:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006652:	e077      	b.n	8006744 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006654:	6839      	ldr	r1, [r7, #0]
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 fab1 	bl	8006bbe <USBD_CtlError>
            err++;
 800665c:	7afb      	ldrb	r3, [r7, #11]
 800665e:	3301      	adds	r3, #1
 8006660:	72fb      	strb	r3, [r7, #11]
          break;
 8006662:	e06f      	b.n	8006744 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d00b      	beq.n	8006688 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006676:	68db      	ldr	r3, [r3, #12]
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	7c12      	ldrb	r2, [r2, #16]
 800667c:	f107 0108 	add.w	r1, r7, #8
 8006680:	4610      	mov	r0, r2
 8006682:	4798      	blx	r3
 8006684:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006686:	e05d      	b.n	8006744 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006688:	6839      	ldr	r1, [r7, #0]
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f000 fa97 	bl	8006bbe <USBD_CtlError>
            err++;
 8006690:	7afb      	ldrb	r3, [r7, #11]
 8006692:	3301      	adds	r3, #1
 8006694:	72fb      	strb	r3, [r7, #11]
          break;
 8006696:	e055      	b.n	8006744 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800669e:	691b      	ldr	r3, [r3, #16]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d00b      	beq.n	80066bc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066aa:	691b      	ldr	r3, [r3, #16]
 80066ac:	687a      	ldr	r2, [r7, #4]
 80066ae:	7c12      	ldrb	r2, [r2, #16]
 80066b0:	f107 0108 	add.w	r1, r7, #8
 80066b4:	4610      	mov	r0, r2
 80066b6:	4798      	blx	r3
 80066b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066ba:	e043      	b.n	8006744 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066bc:	6839      	ldr	r1, [r7, #0]
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 fa7d 	bl	8006bbe <USBD_CtlError>
            err++;
 80066c4:	7afb      	ldrb	r3, [r7, #11]
 80066c6:	3301      	adds	r3, #1
 80066c8:	72fb      	strb	r3, [r7, #11]
          break;
 80066ca:	e03b      	b.n	8006744 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066d2:	695b      	ldr	r3, [r3, #20]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d00b      	beq.n	80066f0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066de:	695b      	ldr	r3, [r3, #20]
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	7c12      	ldrb	r2, [r2, #16]
 80066e4:	f107 0108 	add.w	r1, r7, #8
 80066e8:	4610      	mov	r0, r2
 80066ea:	4798      	blx	r3
 80066ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066ee:	e029      	b.n	8006744 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066f0:	6839      	ldr	r1, [r7, #0]
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 fa63 	bl	8006bbe <USBD_CtlError>
            err++;
 80066f8:	7afb      	ldrb	r3, [r7, #11]
 80066fa:	3301      	adds	r3, #1
 80066fc:	72fb      	strb	r3, [r7, #11]
          break;
 80066fe:	e021      	b.n	8006744 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006706:	699b      	ldr	r3, [r3, #24]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d00b      	beq.n	8006724 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006712:	699b      	ldr	r3, [r3, #24]
 8006714:	687a      	ldr	r2, [r7, #4]
 8006716:	7c12      	ldrb	r2, [r2, #16]
 8006718:	f107 0108 	add.w	r1, r7, #8
 800671c:	4610      	mov	r0, r2
 800671e:	4798      	blx	r3
 8006720:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006722:	e00f      	b.n	8006744 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006724:	6839      	ldr	r1, [r7, #0]
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f000 fa49 	bl	8006bbe <USBD_CtlError>
            err++;
 800672c:	7afb      	ldrb	r3, [r7, #11]
 800672e:	3301      	adds	r3, #1
 8006730:	72fb      	strb	r3, [r7, #11]
          break;
 8006732:	e007      	b.n	8006744 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006734:	6839      	ldr	r1, [r7, #0]
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f000 fa41 	bl	8006bbe <USBD_CtlError>
          err++;
 800673c:	7afb      	ldrb	r3, [r7, #11]
 800673e:	3301      	adds	r3, #1
 8006740:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006742:	bf00      	nop
      }
      break;
 8006744:	e037      	b.n	80067b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	7c1b      	ldrb	r3, [r3, #16]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d109      	bne.n	8006762 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006756:	f107 0208 	add.w	r2, r7, #8
 800675a:	4610      	mov	r0, r2
 800675c:	4798      	blx	r3
 800675e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006760:	e029      	b.n	80067b6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006762:	6839      	ldr	r1, [r7, #0]
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f000 fa2a 	bl	8006bbe <USBD_CtlError>
        err++;
 800676a:	7afb      	ldrb	r3, [r7, #11]
 800676c:	3301      	adds	r3, #1
 800676e:	72fb      	strb	r3, [r7, #11]
      break;
 8006770:	e021      	b.n	80067b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	7c1b      	ldrb	r3, [r3, #16]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d10d      	bne.n	8006796 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006782:	f107 0208 	add.w	r2, r7, #8
 8006786:	4610      	mov	r0, r2
 8006788:	4798      	blx	r3
 800678a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	3301      	adds	r3, #1
 8006790:	2207      	movs	r2, #7
 8006792:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006794:	e00f      	b.n	80067b6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006796:	6839      	ldr	r1, [r7, #0]
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f000 fa10 	bl	8006bbe <USBD_CtlError>
        err++;
 800679e:	7afb      	ldrb	r3, [r7, #11]
 80067a0:	3301      	adds	r3, #1
 80067a2:	72fb      	strb	r3, [r7, #11]
      break;
 80067a4:	e007      	b.n	80067b6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80067a6:	6839      	ldr	r1, [r7, #0]
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f000 fa08 	bl	8006bbe <USBD_CtlError>
      err++;
 80067ae:	7afb      	ldrb	r3, [r7, #11]
 80067b0:	3301      	adds	r3, #1
 80067b2:	72fb      	strb	r3, [r7, #11]
      break;
 80067b4:	bf00      	nop
  }

  if (err != 0U)
 80067b6:	7afb      	ldrb	r3, [r7, #11]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d11e      	bne.n	80067fa <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	88db      	ldrh	r3, [r3, #6]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d016      	beq.n	80067f2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80067c4:	893b      	ldrh	r3, [r7, #8]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d00e      	beq.n	80067e8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	88da      	ldrh	r2, [r3, #6]
 80067ce:	893b      	ldrh	r3, [r7, #8]
 80067d0:	4293      	cmp	r3, r2
 80067d2:	bf28      	it	cs
 80067d4:	4613      	movcs	r3, r2
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80067da:	893b      	ldrh	r3, [r7, #8]
 80067dc:	461a      	mov	r2, r3
 80067de:	68f9      	ldr	r1, [r7, #12]
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f000 fa5d 	bl	8006ca0 <USBD_CtlSendData>
 80067e6:	e009      	b.n	80067fc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80067e8:	6839      	ldr	r1, [r7, #0]
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f000 f9e7 	bl	8006bbe <USBD_CtlError>
 80067f0:	e004      	b.n	80067fc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f000 faae 	bl	8006d54 <USBD_CtlSendStatus>
 80067f8:	e000      	b.n	80067fc <USBD_GetDescriptor+0x2cc>
    return;
 80067fa:	bf00      	nop
  }
}
 80067fc:	3710      	adds	r7, #16
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
 8006802:	bf00      	nop

08006804 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b084      	sub	sp, #16
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	889b      	ldrh	r3, [r3, #4]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d131      	bne.n	800687a <USBD_SetAddress+0x76>
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	88db      	ldrh	r3, [r3, #6]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d12d      	bne.n	800687a <USBD_SetAddress+0x76>
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	885b      	ldrh	r3, [r3, #2]
 8006822:	2b7f      	cmp	r3, #127	; 0x7f
 8006824:	d829      	bhi.n	800687a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	885b      	ldrh	r3, [r3, #2]
 800682a:	b2db      	uxtb	r3, r3
 800682c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006830:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006838:	b2db      	uxtb	r3, r3
 800683a:	2b03      	cmp	r3, #3
 800683c:	d104      	bne.n	8006848 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800683e:	6839      	ldr	r1, [r7, #0]
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f000 f9bc 	bl	8006bbe <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006846:	e01d      	b.n	8006884 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	7bfa      	ldrb	r2, [r7, #15]
 800684c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006850:	7bfb      	ldrb	r3, [r7, #15]
 8006852:	4619      	mov	r1, r3
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f003 fcc3 	bl	800a1e0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 fa7a 	bl	8006d54 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006860:	7bfb      	ldrb	r3, [r7, #15]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d004      	beq.n	8006870 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2202      	movs	r2, #2
 800686a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800686e:	e009      	b.n	8006884 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2201      	movs	r2, #1
 8006874:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006878:	e004      	b.n	8006884 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800687a:	6839      	ldr	r1, [r7, #0]
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f000 f99e 	bl	8006bbe <USBD_CtlError>
  }
}
 8006882:	bf00      	nop
 8006884:	bf00      	nop
 8006886:	3710      	adds	r7, #16
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}

0800688c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b084      	sub	sp, #16
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006896:	2300      	movs	r3, #0
 8006898:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	885b      	ldrh	r3, [r3, #2]
 800689e:	b2da      	uxtb	r2, r3
 80068a0:	4b4e      	ldr	r3, [pc, #312]	; (80069dc <USBD_SetConfig+0x150>)
 80068a2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80068a4:	4b4d      	ldr	r3, [pc, #308]	; (80069dc <USBD_SetConfig+0x150>)
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d905      	bls.n	80068b8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80068ac:	6839      	ldr	r1, [r7, #0]
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 f985 	bl	8006bbe <USBD_CtlError>
    return USBD_FAIL;
 80068b4:	2303      	movs	r3, #3
 80068b6:	e08c      	b.n	80069d2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	2b02      	cmp	r3, #2
 80068c2:	d002      	beq.n	80068ca <USBD_SetConfig+0x3e>
 80068c4:	2b03      	cmp	r3, #3
 80068c6:	d029      	beq.n	800691c <USBD_SetConfig+0x90>
 80068c8:	e075      	b.n	80069b6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80068ca:	4b44      	ldr	r3, [pc, #272]	; (80069dc <USBD_SetConfig+0x150>)
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d020      	beq.n	8006914 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80068d2:	4b42      	ldr	r3, [pc, #264]	; (80069dc <USBD_SetConfig+0x150>)
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	461a      	mov	r2, r3
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80068dc:	4b3f      	ldr	r3, [pc, #252]	; (80069dc <USBD_SetConfig+0x150>)
 80068de:	781b      	ldrb	r3, [r3, #0]
 80068e0:	4619      	mov	r1, r3
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f7fe ffe7 	bl	80058b6 <USBD_SetClassConfig>
 80068e8:	4603      	mov	r3, r0
 80068ea:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80068ec:	7bfb      	ldrb	r3, [r7, #15]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d008      	beq.n	8006904 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80068f2:	6839      	ldr	r1, [r7, #0]
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f000 f962 	bl	8006bbe <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2202      	movs	r2, #2
 80068fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006902:	e065      	b.n	80069d0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f000 fa25 	bl	8006d54 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2203      	movs	r2, #3
 800690e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006912:	e05d      	b.n	80069d0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f000 fa1d 	bl	8006d54 <USBD_CtlSendStatus>
      break;
 800691a:	e059      	b.n	80069d0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800691c:	4b2f      	ldr	r3, [pc, #188]	; (80069dc <USBD_SetConfig+0x150>)
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d112      	bne.n	800694a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2202      	movs	r2, #2
 8006928:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800692c:	4b2b      	ldr	r3, [pc, #172]	; (80069dc <USBD_SetConfig+0x150>)
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	461a      	mov	r2, r3
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006936:	4b29      	ldr	r3, [pc, #164]	; (80069dc <USBD_SetConfig+0x150>)
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	4619      	mov	r1, r3
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f7fe ffd6 	bl	80058ee <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 fa06 	bl	8006d54 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006948:	e042      	b.n	80069d0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800694a:	4b24      	ldr	r3, [pc, #144]	; (80069dc <USBD_SetConfig+0x150>)
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	461a      	mov	r2, r3
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	429a      	cmp	r2, r3
 8006956:	d02a      	beq.n	80069ae <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	b2db      	uxtb	r3, r3
 800695e:	4619      	mov	r1, r3
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f7fe ffc4 	bl	80058ee <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006966:	4b1d      	ldr	r3, [pc, #116]	; (80069dc <USBD_SetConfig+0x150>)
 8006968:	781b      	ldrb	r3, [r3, #0]
 800696a:	461a      	mov	r2, r3
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006970:	4b1a      	ldr	r3, [pc, #104]	; (80069dc <USBD_SetConfig+0x150>)
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	4619      	mov	r1, r3
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f7fe ff9d 	bl	80058b6 <USBD_SetClassConfig>
 800697c:	4603      	mov	r3, r0
 800697e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006980:	7bfb      	ldrb	r3, [r7, #15]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d00f      	beq.n	80069a6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006986:	6839      	ldr	r1, [r7, #0]
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f000 f918 	bl	8006bbe <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	b2db      	uxtb	r3, r3
 8006994:	4619      	mov	r1, r3
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f7fe ffa9 	bl	80058ee <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2202      	movs	r2, #2
 80069a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80069a4:	e014      	b.n	80069d0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f000 f9d4 	bl	8006d54 <USBD_CtlSendStatus>
      break;
 80069ac:	e010      	b.n	80069d0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 f9d0 	bl	8006d54 <USBD_CtlSendStatus>
      break;
 80069b4:	e00c      	b.n	80069d0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80069b6:	6839      	ldr	r1, [r7, #0]
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 f900 	bl	8006bbe <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80069be:	4b07      	ldr	r3, [pc, #28]	; (80069dc <USBD_SetConfig+0x150>)
 80069c0:	781b      	ldrb	r3, [r3, #0]
 80069c2:	4619      	mov	r1, r3
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f7fe ff92 	bl	80058ee <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80069ca:	2303      	movs	r3, #3
 80069cc:	73fb      	strb	r3, [r7, #15]
      break;
 80069ce:	bf00      	nop
  }

  return ret;
 80069d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3710      	adds	r7, #16
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
 80069da:	bf00      	nop
 80069dc:	200001e8 	.word	0x200001e8

080069e0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b082      	sub	sp, #8
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	88db      	ldrh	r3, [r3, #6]
 80069ee:	2b01      	cmp	r3, #1
 80069f0:	d004      	beq.n	80069fc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80069f2:	6839      	ldr	r1, [r7, #0]
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f000 f8e2 	bl	8006bbe <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80069fa:	e023      	b.n	8006a44 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a02:	b2db      	uxtb	r3, r3
 8006a04:	2b02      	cmp	r3, #2
 8006a06:	dc02      	bgt.n	8006a0e <USBD_GetConfig+0x2e>
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	dc03      	bgt.n	8006a14 <USBD_GetConfig+0x34>
 8006a0c:	e015      	b.n	8006a3a <USBD_GetConfig+0x5a>
 8006a0e:	2b03      	cmp	r3, #3
 8006a10:	d00b      	beq.n	8006a2a <USBD_GetConfig+0x4a>
 8006a12:	e012      	b.n	8006a3a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2200      	movs	r2, #0
 8006a18:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	3308      	adds	r3, #8
 8006a1e:	2201      	movs	r2, #1
 8006a20:	4619      	mov	r1, r3
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 f93c 	bl	8006ca0 <USBD_CtlSendData>
        break;
 8006a28:	e00c      	b.n	8006a44 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	3304      	adds	r3, #4
 8006a2e:	2201      	movs	r2, #1
 8006a30:	4619      	mov	r1, r3
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 f934 	bl	8006ca0 <USBD_CtlSendData>
        break;
 8006a38:	e004      	b.n	8006a44 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006a3a:	6839      	ldr	r1, [r7, #0]
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f000 f8be 	bl	8006bbe <USBD_CtlError>
        break;
 8006a42:	bf00      	nop
}
 8006a44:	bf00      	nop
 8006a46:	3708      	adds	r7, #8
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}

08006a4c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b082      	sub	sp, #8
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	3b01      	subs	r3, #1
 8006a60:	2b02      	cmp	r3, #2
 8006a62:	d81e      	bhi.n	8006aa2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	88db      	ldrh	r3, [r3, #6]
 8006a68:	2b02      	cmp	r3, #2
 8006a6a:	d004      	beq.n	8006a76 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006a6c:	6839      	ldr	r1, [r7, #0]
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f000 f8a5 	bl	8006bbe <USBD_CtlError>
        break;
 8006a74:	e01a      	b.n	8006aac <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2201      	movs	r2, #1
 8006a7a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d005      	beq.n	8006a92 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	68db      	ldr	r3, [r3, #12]
 8006a8a:	f043 0202 	orr.w	r2, r3, #2
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	330c      	adds	r3, #12
 8006a96:	2202      	movs	r2, #2
 8006a98:	4619      	mov	r1, r3
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f000 f900 	bl	8006ca0 <USBD_CtlSendData>
      break;
 8006aa0:	e004      	b.n	8006aac <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006aa2:	6839      	ldr	r1, [r7, #0]
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f000 f88a 	bl	8006bbe <USBD_CtlError>
      break;
 8006aaa:	bf00      	nop
  }
}
 8006aac:	bf00      	nop
 8006aae:	3708      	adds	r7, #8
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b082      	sub	sp, #8
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	885b      	ldrh	r3, [r3, #2]
 8006ac2:	2b01      	cmp	r3, #1
 8006ac4:	d107      	bne.n	8006ad6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2201      	movs	r2, #1
 8006aca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 f940 	bl	8006d54 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006ad4:	e013      	b.n	8006afe <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	885b      	ldrh	r3, [r3, #2]
 8006ada:	2b02      	cmp	r3, #2
 8006adc:	d10b      	bne.n	8006af6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	889b      	ldrh	r3, [r3, #4]
 8006ae2:	0a1b      	lsrs	r3, r3, #8
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	b2da      	uxtb	r2, r3
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 f930 	bl	8006d54 <USBD_CtlSendStatus>
}
 8006af4:	e003      	b.n	8006afe <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006af6:	6839      	ldr	r1, [r7, #0]
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f000 f860 	bl	8006bbe <USBD_CtlError>
}
 8006afe:	bf00      	nop
 8006b00:	3708      	adds	r7, #8
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}

08006b06 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b06:	b580      	push	{r7, lr}
 8006b08:	b082      	sub	sp, #8
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	6078      	str	r0, [r7, #4]
 8006b0e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	3b01      	subs	r3, #1
 8006b1a:	2b02      	cmp	r3, #2
 8006b1c:	d80b      	bhi.n	8006b36 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	885b      	ldrh	r3, [r3, #2]
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d10c      	bne.n	8006b40 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f000 f910 	bl	8006d54 <USBD_CtlSendStatus>
      }
      break;
 8006b34:	e004      	b.n	8006b40 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006b36:	6839      	ldr	r1, [r7, #0]
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f000 f840 	bl	8006bbe <USBD_CtlError>
      break;
 8006b3e:	e000      	b.n	8006b42 <USBD_ClrFeature+0x3c>
      break;
 8006b40:	bf00      	nop
  }
}
 8006b42:	bf00      	nop
 8006b44:	3708      	adds	r7, #8
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}

08006b4a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006b4a:	b580      	push	{r7, lr}
 8006b4c:	b084      	sub	sp, #16
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
 8006b52:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	781a      	ldrb	r2, [r3, #0]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	3301      	adds	r3, #1
 8006b64:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	781a      	ldrb	r2, [r3, #0]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	3301      	adds	r3, #1
 8006b72:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006b74:	68f8      	ldr	r0, [r7, #12]
 8006b76:	f7ff fa41 	bl	8005ffc <SWAPBYTE>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	3301      	adds	r3, #1
 8006b86:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	3301      	adds	r3, #1
 8006b8c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006b8e:	68f8      	ldr	r0, [r7, #12]
 8006b90:	f7ff fa34 	bl	8005ffc <SWAPBYTE>
 8006b94:	4603      	mov	r3, r0
 8006b96:	461a      	mov	r2, r3
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	3301      	adds	r3, #1
 8006ba0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	3301      	adds	r3, #1
 8006ba6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006ba8:	68f8      	ldr	r0, [r7, #12]
 8006baa:	f7ff fa27 	bl	8005ffc <SWAPBYTE>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	80da      	strh	r2, [r3, #6]
}
 8006bb6:	bf00      	nop
 8006bb8:	3710      	adds	r7, #16
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}

08006bbe <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bbe:	b580      	push	{r7, lr}
 8006bc0:	b082      	sub	sp, #8
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	6078      	str	r0, [r7, #4]
 8006bc6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006bc8:	2180      	movs	r1, #128	; 0x80
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f003 fa9e 	bl	800a10c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006bd0:	2100      	movs	r1, #0
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f003 fa9a 	bl	800a10c <USBD_LL_StallEP>
}
 8006bd8:	bf00      	nop
 8006bda:	3708      	adds	r7, #8
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b086      	sub	sp, #24
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	60b9      	str	r1, [r7, #8]
 8006bea:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006bec:	2300      	movs	r3, #0
 8006bee:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d036      	beq.n	8006c64 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006bfa:	6938      	ldr	r0, [r7, #16]
 8006bfc:	f000 f836 	bl	8006c6c <USBD_GetLen>
 8006c00:	4603      	mov	r3, r0
 8006c02:	3301      	adds	r3, #1
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	005b      	lsls	r3, r3, #1
 8006c08:	b29a      	uxth	r2, r3
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006c0e:	7dfb      	ldrb	r3, [r7, #23]
 8006c10:	68ba      	ldr	r2, [r7, #8]
 8006c12:	4413      	add	r3, r2
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	7812      	ldrb	r2, [r2, #0]
 8006c18:	701a      	strb	r2, [r3, #0]
  idx++;
 8006c1a:	7dfb      	ldrb	r3, [r7, #23]
 8006c1c:	3301      	adds	r3, #1
 8006c1e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006c20:	7dfb      	ldrb	r3, [r7, #23]
 8006c22:	68ba      	ldr	r2, [r7, #8]
 8006c24:	4413      	add	r3, r2
 8006c26:	2203      	movs	r2, #3
 8006c28:	701a      	strb	r2, [r3, #0]
  idx++;
 8006c2a:	7dfb      	ldrb	r3, [r7, #23]
 8006c2c:	3301      	adds	r3, #1
 8006c2e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006c30:	e013      	b.n	8006c5a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006c32:	7dfb      	ldrb	r3, [r7, #23]
 8006c34:	68ba      	ldr	r2, [r7, #8]
 8006c36:	4413      	add	r3, r2
 8006c38:	693a      	ldr	r2, [r7, #16]
 8006c3a:	7812      	ldrb	r2, [r2, #0]
 8006c3c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	3301      	adds	r3, #1
 8006c42:	613b      	str	r3, [r7, #16]
    idx++;
 8006c44:	7dfb      	ldrb	r3, [r7, #23]
 8006c46:	3301      	adds	r3, #1
 8006c48:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006c4a:	7dfb      	ldrb	r3, [r7, #23]
 8006c4c:	68ba      	ldr	r2, [r7, #8]
 8006c4e:	4413      	add	r3, r2
 8006c50:	2200      	movs	r2, #0
 8006c52:	701a      	strb	r2, [r3, #0]
    idx++;
 8006c54:	7dfb      	ldrb	r3, [r7, #23]
 8006c56:	3301      	adds	r3, #1
 8006c58:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	781b      	ldrb	r3, [r3, #0]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d1e7      	bne.n	8006c32 <USBD_GetString+0x52>
 8006c62:	e000      	b.n	8006c66 <USBD_GetString+0x86>
    return;
 8006c64:	bf00      	nop
  }
}
 8006c66:	3718      	adds	r7, #24
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}

08006c6c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b085      	sub	sp, #20
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006c74:	2300      	movs	r3, #0
 8006c76:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006c7c:	e005      	b.n	8006c8a <USBD_GetLen+0x1e>
  {
    len++;
 8006c7e:	7bfb      	ldrb	r3, [r7, #15]
 8006c80:	3301      	adds	r3, #1
 8006c82:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	3301      	adds	r3, #1
 8006c88:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d1f5      	bne.n	8006c7e <USBD_GetLen+0x12>
  }

  return len;
 8006c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3714      	adds	r7, #20
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b084      	sub	sp, #16
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2202      	movs	r2, #2
 8006cb0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	68ba      	ldr	r2, [r7, #8]
 8006cc4:	2100      	movs	r1, #0
 8006cc6:	68f8      	ldr	r0, [r7, #12]
 8006cc8:	f003 faa9 	bl	800a21e <USBD_LL_Transmit>

  return USBD_OK;
 8006ccc:	2300      	movs	r3, #0
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3710      	adds	r7, #16
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}

08006cd6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006cd6:	b580      	push	{r7, lr}
 8006cd8:	b084      	sub	sp, #16
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	60f8      	str	r0, [r7, #12]
 8006cde:	60b9      	str	r1, [r7, #8]
 8006ce0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	68ba      	ldr	r2, [r7, #8]
 8006ce6:	2100      	movs	r1, #0
 8006ce8:	68f8      	ldr	r0, [r7, #12]
 8006cea:	f003 fa98 	bl	800a21e <USBD_LL_Transmit>

  return USBD_OK;
 8006cee:	2300      	movs	r3, #0
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3710      	adds	r7, #16
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b084      	sub	sp, #16
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	60f8      	str	r0, [r7, #12]
 8006d00:	60b9      	str	r1, [r7, #8]
 8006d02:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2203      	movs	r2, #3
 8006d08:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	687a      	ldr	r2, [r7, #4]
 8006d18:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	68ba      	ldr	r2, [r7, #8]
 8006d20:	2100      	movs	r1, #0
 8006d22:	68f8      	ldr	r0, [r7, #12]
 8006d24:	f003 fa9c 	bl	800a260 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d28:	2300      	movs	r3, #0
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3710      	adds	r7, #16
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}

08006d32 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006d32:	b580      	push	{r7, lr}
 8006d34:	b084      	sub	sp, #16
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	60f8      	str	r0, [r7, #12]
 8006d3a:	60b9      	str	r1, [r7, #8]
 8006d3c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	68ba      	ldr	r2, [r7, #8]
 8006d42:	2100      	movs	r1, #0
 8006d44:	68f8      	ldr	r0, [r7, #12]
 8006d46:	f003 fa8b 	bl	800a260 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d4a:	2300      	movs	r3, #0
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3710      	adds	r7, #16
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}

08006d54 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b082      	sub	sp, #8
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2204      	movs	r2, #4
 8006d60:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006d64:	2300      	movs	r3, #0
 8006d66:	2200      	movs	r2, #0
 8006d68:	2100      	movs	r1, #0
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f003 fa57 	bl	800a21e <USBD_LL_Transmit>

  return USBD_OK;
 8006d70:	2300      	movs	r3, #0
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3708      	adds	r7, #8
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}

08006d7a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006d7a:	b580      	push	{r7, lr}
 8006d7c:	b082      	sub	sp, #8
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2205      	movs	r2, #5
 8006d86:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	2100      	movs	r1, #0
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f003 fa65 	bl	800a260 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d96:	2300      	movs	r3, #0
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3708      	adds	r7, #8
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}

08006da0 <__NVIC_SetPriority>:
{
 8006da0:	b480      	push	{r7}
 8006da2:	b083      	sub	sp, #12
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	4603      	mov	r3, r0
 8006da8:	6039      	str	r1, [r7, #0]
 8006daa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	db0a      	blt.n	8006dca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	b2da      	uxtb	r2, r3
 8006db8:	490c      	ldr	r1, [pc, #48]	; (8006dec <__NVIC_SetPriority+0x4c>)
 8006dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006dbe:	0112      	lsls	r2, r2, #4
 8006dc0:	b2d2      	uxtb	r2, r2
 8006dc2:	440b      	add	r3, r1
 8006dc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006dc8:	e00a      	b.n	8006de0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	b2da      	uxtb	r2, r3
 8006dce:	4908      	ldr	r1, [pc, #32]	; (8006df0 <__NVIC_SetPriority+0x50>)
 8006dd0:	79fb      	ldrb	r3, [r7, #7]
 8006dd2:	f003 030f 	and.w	r3, r3, #15
 8006dd6:	3b04      	subs	r3, #4
 8006dd8:	0112      	lsls	r2, r2, #4
 8006dda:	b2d2      	uxtb	r2, r2
 8006ddc:	440b      	add	r3, r1
 8006dde:	761a      	strb	r2, [r3, #24]
}
 8006de0:	bf00      	nop
 8006de2:	370c      	adds	r7, #12
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr
 8006dec:	e000e100 	.word	0xe000e100
 8006df0:	e000ed00 	.word	0xe000ed00

08006df4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006df4:	b580      	push	{r7, lr}
 8006df6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006df8:	4b05      	ldr	r3, [pc, #20]	; (8006e10 <SysTick_Handler+0x1c>)
 8006dfa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006dfc:	f001 fd28 	bl	8008850 <xTaskGetSchedulerState>
 8006e00:	4603      	mov	r3, r0
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d001      	beq.n	8006e0a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006e06:	f002 fb0f 	bl	8009428 <xPortSysTickHandler>
  }
}
 8006e0a:	bf00      	nop
 8006e0c:	bd80      	pop	{r7, pc}
 8006e0e:	bf00      	nop
 8006e10:	e000e010 	.word	0xe000e010

08006e14 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006e14:	b580      	push	{r7, lr}
 8006e16:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006e18:	2100      	movs	r1, #0
 8006e1a:	f06f 0004 	mvn.w	r0, #4
 8006e1e:	f7ff ffbf 	bl	8006da0 <__NVIC_SetPriority>
#endif
}
 8006e22:	bf00      	nop
 8006e24:	bd80      	pop	{r7, pc}
	...

08006e28 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006e28:	b480      	push	{r7}
 8006e2a:	b083      	sub	sp, #12
 8006e2c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e2e:	f3ef 8305 	mrs	r3, IPSR
 8006e32:	603b      	str	r3, [r7, #0]
  return(result);
 8006e34:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d003      	beq.n	8006e42 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006e3a:	f06f 0305 	mvn.w	r3, #5
 8006e3e:	607b      	str	r3, [r7, #4]
 8006e40:	e00c      	b.n	8006e5c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006e42:	4b0a      	ldr	r3, [pc, #40]	; (8006e6c <osKernelInitialize+0x44>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d105      	bne.n	8006e56 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006e4a:	4b08      	ldr	r3, [pc, #32]	; (8006e6c <osKernelInitialize+0x44>)
 8006e4c:	2201      	movs	r2, #1
 8006e4e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006e50:	2300      	movs	r3, #0
 8006e52:	607b      	str	r3, [r7, #4]
 8006e54:	e002      	b.n	8006e5c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006e56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006e5a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006e5c:	687b      	ldr	r3, [r7, #4]
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	370c      	adds	r7, #12
 8006e62:	46bd      	mov	sp, r7
 8006e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e68:	4770      	bx	lr
 8006e6a:	bf00      	nop
 8006e6c:	200001ec 	.word	0x200001ec

08006e70 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b082      	sub	sp, #8
 8006e74:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e76:	f3ef 8305 	mrs	r3, IPSR
 8006e7a:	603b      	str	r3, [r7, #0]
  return(result);
 8006e7c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d003      	beq.n	8006e8a <osKernelStart+0x1a>
    stat = osErrorISR;
 8006e82:	f06f 0305 	mvn.w	r3, #5
 8006e86:	607b      	str	r3, [r7, #4]
 8006e88:	e010      	b.n	8006eac <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006e8a:	4b0b      	ldr	r3, [pc, #44]	; (8006eb8 <osKernelStart+0x48>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	2b01      	cmp	r3, #1
 8006e90:	d109      	bne.n	8006ea6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006e92:	f7ff ffbf 	bl	8006e14 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006e96:	4b08      	ldr	r3, [pc, #32]	; (8006eb8 <osKernelStart+0x48>)
 8006e98:	2202      	movs	r2, #2
 8006e9a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006e9c:	f001 f87c 	bl	8007f98 <vTaskStartScheduler>
      stat = osOK;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	607b      	str	r3, [r7, #4]
 8006ea4:	e002      	b.n	8006eac <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006ea6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006eaa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006eac:	687b      	ldr	r3, [r7, #4]
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3708      	adds	r7, #8
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
 8006eb6:	bf00      	nop
 8006eb8:	200001ec 	.word	0x200001ec

08006ebc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b08e      	sub	sp, #56	; 0x38
 8006ec0:	af04      	add	r7, sp, #16
 8006ec2:	60f8      	str	r0, [r7, #12]
 8006ec4:	60b9      	str	r1, [r7, #8]
 8006ec6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ecc:	f3ef 8305 	mrs	r3, IPSR
 8006ed0:	617b      	str	r3, [r7, #20]
  return(result);
 8006ed2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d17e      	bne.n	8006fd6 <osThreadNew+0x11a>
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d07b      	beq.n	8006fd6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006ede:	2380      	movs	r3, #128	; 0x80
 8006ee0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006ee2:	2318      	movs	r3, #24
 8006ee4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006eea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006eee:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d045      	beq.n	8006f82 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d002      	beq.n	8006f04 <osThreadNew+0x48>
        name = attr->name;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	699b      	ldr	r3, [r3, #24]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d002      	beq.n	8006f12 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	699b      	ldr	r3, [r3, #24]
 8006f10:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006f12:	69fb      	ldr	r3, [r7, #28]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d008      	beq.n	8006f2a <osThreadNew+0x6e>
 8006f18:	69fb      	ldr	r3, [r7, #28]
 8006f1a:	2b38      	cmp	r3, #56	; 0x38
 8006f1c:	d805      	bhi.n	8006f2a <osThreadNew+0x6e>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	f003 0301 	and.w	r3, r3, #1
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d001      	beq.n	8006f2e <osThreadNew+0x72>
        return (NULL);
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	e054      	b.n	8006fd8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	695b      	ldr	r3, [r3, #20]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d003      	beq.n	8006f3e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	695b      	ldr	r3, [r3, #20]
 8006f3a:	089b      	lsrs	r3, r3, #2
 8006f3c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	689b      	ldr	r3, [r3, #8]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d00e      	beq.n	8006f64 <osThreadNew+0xa8>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	68db      	ldr	r3, [r3, #12]
 8006f4a:	2bbb      	cmp	r3, #187	; 0xbb
 8006f4c:	d90a      	bls.n	8006f64 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d006      	beq.n	8006f64 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	695b      	ldr	r3, [r3, #20]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d002      	beq.n	8006f64 <osThreadNew+0xa8>
        mem = 1;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	61bb      	str	r3, [r7, #24]
 8006f62:	e010      	b.n	8006f86 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	689b      	ldr	r3, [r3, #8]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d10c      	bne.n	8006f86 <osThreadNew+0xca>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d108      	bne.n	8006f86 <osThreadNew+0xca>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	691b      	ldr	r3, [r3, #16]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d104      	bne.n	8006f86 <osThreadNew+0xca>
          mem = 0;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	61bb      	str	r3, [r7, #24]
 8006f80:	e001      	b.n	8006f86 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006f82:	2300      	movs	r3, #0
 8006f84:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006f86:	69bb      	ldr	r3, [r7, #24]
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d110      	bne.n	8006fae <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006f90:	687a      	ldr	r2, [r7, #4]
 8006f92:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006f94:	9202      	str	r2, [sp, #8]
 8006f96:	9301      	str	r3, [sp, #4]
 8006f98:	69fb      	ldr	r3, [r7, #28]
 8006f9a:	9300      	str	r3, [sp, #0]
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	6a3a      	ldr	r2, [r7, #32]
 8006fa0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006fa2:	68f8      	ldr	r0, [r7, #12]
 8006fa4:	f000 fe0c 	bl	8007bc0 <xTaskCreateStatic>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	613b      	str	r3, [r7, #16]
 8006fac:	e013      	b.n	8006fd6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006fae:	69bb      	ldr	r3, [r7, #24]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d110      	bne.n	8006fd6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006fb4:	6a3b      	ldr	r3, [r7, #32]
 8006fb6:	b29a      	uxth	r2, r3
 8006fb8:	f107 0310 	add.w	r3, r7, #16
 8006fbc:	9301      	str	r3, [sp, #4]
 8006fbe:	69fb      	ldr	r3, [r7, #28]
 8006fc0:	9300      	str	r3, [sp, #0]
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006fc6:	68f8      	ldr	r0, [r7, #12]
 8006fc8:	f000 fe57 	bl	8007c7a <xTaskCreate>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	2b01      	cmp	r3, #1
 8006fd0:	d001      	beq.n	8006fd6 <osThreadNew+0x11a>
            hTask = NULL;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006fd6:	693b      	ldr	r3, [r7, #16]
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3728      	adds	r7, #40	; 0x28
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b084      	sub	sp, #16
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006fe8:	f3ef 8305 	mrs	r3, IPSR
 8006fec:	60bb      	str	r3, [r7, #8]
  return(result);
 8006fee:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d003      	beq.n	8006ffc <osDelay+0x1c>
    stat = osErrorISR;
 8006ff4:	f06f 0305 	mvn.w	r3, #5
 8006ff8:	60fb      	str	r3, [r7, #12]
 8006ffa:	e007      	b.n	800700c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d002      	beq.n	800700c <osDelay+0x2c>
      vTaskDelay(ticks);
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f000 ff92 	bl	8007f30 <vTaskDelay>
    }
  }

  return (stat);
 800700c:	68fb      	ldr	r3, [r7, #12]
}
 800700e:	4618      	mov	r0, r3
 8007010:	3710      	adds	r7, #16
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
	...

08007018 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007018:	b480      	push	{r7}
 800701a:	b085      	sub	sp, #20
 800701c:	af00      	add	r7, sp, #0
 800701e:	60f8      	str	r0, [r7, #12]
 8007020:	60b9      	str	r1, [r7, #8]
 8007022:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	4a07      	ldr	r2, [pc, #28]	; (8007044 <vApplicationGetIdleTaskMemory+0x2c>)
 8007028:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	4a06      	ldr	r2, [pc, #24]	; (8007048 <vApplicationGetIdleTaskMemory+0x30>)
 800702e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2280      	movs	r2, #128	; 0x80
 8007034:	601a      	str	r2, [r3, #0]
}
 8007036:	bf00      	nop
 8007038:	3714      	adds	r7, #20
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr
 8007042:	bf00      	nop
 8007044:	200001f0 	.word	0x200001f0
 8007048:	200002ac 	.word	0x200002ac

0800704c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800704c:	b480      	push	{r7}
 800704e:	b085      	sub	sp, #20
 8007050:	af00      	add	r7, sp, #0
 8007052:	60f8      	str	r0, [r7, #12]
 8007054:	60b9      	str	r1, [r7, #8]
 8007056:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	4a07      	ldr	r2, [pc, #28]	; (8007078 <vApplicationGetTimerTaskMemory+0x2c>)
 800705c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	4a06      	ldr	r2, [pc, #24]	; (800707c <vApplicationGetTimerTaskMemory+0x30>)
 8007062:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f44f 7280 	mov.w	r2, #256	; 0x100
 800706a:	601a      	str	r2, [r3, #0]
}
 800706c:	bf00      	nop
 800706e:	3714      	adds	r7, #20
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr
 8007078:	200004ac 	.word	0x200004ac
 800707c:	20000568 	.word	0x20000568

08007080 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007080:	b480      	push	{r7}
 8007082:	b083      	sub	sp, #12
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f103 0208 	add.w	r2, r3, #8
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007098:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f103 0208 	add.w	r2, r3, #8
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f103 0208 	add.w	r2, r3, #8
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2200      	movs	r2, #0
 80070b2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80070b4:	bf00      	nop
 80070b6:	370c      	adds	r7, #12
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr

080070c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80070c0:	b480      	push	{r7}
 80070c2:	b083      	sub	sp, #12
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2200      	movs	r2, #0
 80070cc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80070ce:	bf00      	nop
 80070d0:	370c      	adds	r7, #12
 80070d2:	46bd      	mov	sp, r7
 80070d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d8:	4770      	bx	lr

080070da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80070da:	b480      	push	{r7}
 80070dc:	b085      	sub	sp, #20
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
 80070e2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	68fa      	ldr	r2, [r7, #12]
 80070ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	689a      	ldr	r2, [r3, #8]
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	683a      	ldr	r2, [r7, #0]
 80070fe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	683a      	ldr	r2, [r7, #0]
 8007104:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	1c5a      	adds	r2, r3, #1
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	601a      	str	r2, [r3, #0]
}
 8007116:	bf00      	nop
 8007118:	3714      	adds	r7, #20
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr

08007122 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007122:	b480      	push	{r7}
 8007124:	b085      	sub	sp, #20
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]
 800712a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007138:	d103      	bne.n	8007142 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	691b      	ldr	r3, [r3, #16]
 800713e:	60fb      	str	r3, [r7, #12]
 8007140:	e00c      	b.n	800715c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	3308      	adds	r3, #8
 8007146:	60fb      	str	r3, [r7, #12]
 8007148:	e002      	b.n	8007150 <vListInsert+0x2e>
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	60fb      	str	r3, [r7, #12]
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	68ba      	ldr	r2, [r7, #8]
 8007158:	429a      	cmp	r2, r3
 800715a:	d2f6      	bcs.n	800714a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	685a      	ldr	r2, [r3, #4]
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	683a      	ldr	r2, [r7, #0]
 800716a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	68fa      	ldr	r2, [r7, #12]
 8007170:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	683a      	ldr	r2, [r7, #0]
 8007176:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	687a      	ldr	r2, [r7, #4]
 800717c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	1c5a      	adds	r2, r3, #1
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	601a      	str	r2, [r3, #0]
}
 8007188:	bf00      	nop
 800718a:	3714      	adds	r7, #20
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr

08007194 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007194:	b480      	push	{r7}
 8007196:	b085      	sub	sp, #20
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	691b      	ldr	r3, [r3, #16]
 80071a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	687a      	ldr	r2, [r7, #4]
 80071a8:	6892      	ldr	r2, [r2, #8]
 80071aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	689b      	ldr	r3, [r3, #8]
 80071b0:	687a      	ldr	r2, [r7, #4]
 80071b2:	6852      	ldr	r2, [r2, #4]
 80071b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	687a      	ldr	r2, [r7, #4]
 80071bc:	429a      	cmp	r2, r3
 80071be:	d103      	bne.n	80071c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	689a      	ldr	r2, [r3, #8]
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2200      	movs	r2, #0
 80071cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	1e5a      	subs	r2, r3, #1
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
}
 80071dc:	4618      	mov	r0, r3
 80071de:	3714      	adds	r7, #20
 80071e0:	46bd      	mov	sp, r7
 80071e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e6:	4770      	bx	lr

080071e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b084      	sub	sp, #16
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
 80071f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d10a      	bne.n	8007212 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80071fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007200:	f383 8811 	msr	BASEPRI, r3
 8007204:	f3bf 8f6f 	isb	sy
 8007208:	f3bf 8f4f 	dsb	sy
 800720c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800720e:	bf00      	nop
 8007210:	e7fe      	b.n	8007210 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007212:	f002 f877 	bl	8009304 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681a      	ldr	r2, [r3, #0]
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800721e:	68f9      	ldr	r1, [r7, #12]
 8007220:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007222:	fb01 f303 	mul.w	r3, r1, r3
 8007226:	441a      	add	r2, r3
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2200      	movs	r2, #0
 8007230:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681a      	ldr	r2, [r3, #0]
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007242:	3b01      	subs	r3, #1
 8007244:	68f9      	ldr	r1, [r7, #12]
 8007246:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007248:	fb01 f303 	mul.w	r3, r1, r3
 800724c:	441a      	add	r2, r3
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	22ff      	movs	r2, #255	; 0xff
 8007256:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	22ff      	movs	r2, #255	; 0xff
 800725e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d114      	bne.n	8007292 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	691b      	ldr	r3, [r3, #16]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d01a      	beq.n	80072a6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	3310      	adds	r3, #16
 8007274:	4618      	mov	r0, r3
 8007276:	f001 f929 	bl	80084cc <xTaskRemoveFromEventList>
 800727a:	4603      	mov	r3, r0
 800727c:	2b00      	cmp	r3, #0
 800727e:	d012      	beq.n	80072a6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007280:	4b0c      	ldr	r3, [pc, #48]	; (80072b4 <xQueueGenericReset+0xcc>)
 8007282:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007286:	601a      	str	r2, [r3, #0]
 8007288:	f3bf 8f4f 	dsb	sy
 800728c:	f3bf 8f6f 	isb	sy
 8007290:	e009      	b.n	80072a6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	3310      	adds	r3, #16
 8007296:	4618      	mov	r0, r3
 8007298:	f7ff fef2 	bl	8007080 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	3324      	adds	r3, #36	; 0x24
 80072a0:	4618      	mov	r0, r3
 80072a2:	f7ff feed 	bl	8007080 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80072a6:	f002 f85d 	bl	8009364 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80072aa:	2301      	movs	r3, #1
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3710      	adds	r7, #16
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}
 80072b4:	e000ed04 	.word	0xe000ed04

080072b8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b08e      	sub	sp, #56	; 0x38
 80072bc:	af02      	add	r7, sp, #8
 80072be:	60f8      	str	r0, [r7, #12]
 80072c0:	60b9      	str	r1, [r7, #8]
 80072c2:	607a      	str	r2, [r7, #4]
 80072c4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d10a      	bne.n	80072e2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80072cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d0:	f383 8811 	msr	BASEPRI, r3
 80072d4:	f3bf 8f6f 	isb	sy
 80072d8:	f3bf 8f4f 	dsb	sy
 80072dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80072de:	bf00      	nop
 80072e0:	e7fe      	b.n	80072e0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d10a      	bne.n	80072fe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80072e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ec:	f383 8811 	msr	BASEPRI, r3
 80072f0:	f3bf 8f6f 	isb	sy
 80072f4:	f3bf 8f4f 	dsb	sy
 80072f8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80072fa:	bf00      	nop
 80072fc:	e7fe      	b.n	80072fc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d002      	beq.n	800730a <xQueueGenericCreateStatic+0x52>
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d001      	beq.n	800730e <xQueueGenericCreateStatic+0x56>
 800730a:	2301      	movs	r3, #1
 800730c:	e000      	b.n	8007310 <xQueueGenericCreateStatic+0x58>
 800730e:	2300      	movs	r3, #0
 8007310:	2b00      	cmp	r3, #0
 8007312:	d10a      	bne.n	800732a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007318:	f383 8811 	msr	BASEPRI, r3
 800731c:	f3bf 8f6f 	isb	sy
 8007320:	f3bf 8f4f 	dsb	sy
 8007324:	623b      	str	r3, [r7, #32]
}
 8007326:	bf00      	nop
 8007328:	e7fe      	b.n	8007328 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d102      	bne.n	8007336 <xQueueGenericCreateStatic+0x7e>
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d101      	bne.n	800733a <xQueueGenericCreateStatic+0x82>
 8007336:	2301      	movs	r3, #1
 8007338:	e000      	b.n	800733c <xQueueGenericCreateStatic+0x84>
 800733a:	2300      	movs	r3, #0
 800733c:	2b00      	cmp	r3, #0
 800733e:	d10a      	bne.n	8007356 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007344:	f383 8811 	msr	BASEPRI, r3
 8007348:	f3bf 8f6f 	isb	sy
 800734c:	f3bf 8f4f 	dsb	sy
 8007350:	61fb      	str	r3, [r7, #28]
}
 8007352:	bf00      	nop
 8007354:	e7fe      	b.n	8007354 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007356:	2350      	movs	r3, #80	; 0x50
 8007358:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	2b50      	cmp	r3, #80	; 0x50
 800735e:	d00a      	beq.n	8007376 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007364:	f383 8811 	msr	BASEPRI, r3
 8007368:	f3bf 8f6f 	isb	sy
 800736c:	f3bf 8f4f 	dsb	sy
 8007370:	61bb      	str	r3, [r7, #24]
}
 8007372:	bf00      	nop
 8007374:	e7fe      	b.n	8007374 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007376:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800737c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800737e:	2b00      	cmp	r3, #0
 8007380:	d00d      	beq.n	800739e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007384:	2201      	movs	r2, #1
 8007386:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800738a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800738e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007390:	9300      	str	r3, [sp, #0]
 8007392:	4613      	mov	r3, r2
 8007394:	687a      	ldr	r2, [r7, #4]
 8007396:	68b9      	ldr	r1, [r7, #8]
 8007398:	68f8      	ldr	r0, [r7, #12]
 800739a:	f000 f805 	bl	80073a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800739e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3730      	adds	r7, #48	; 0x30
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}

080073a8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b084      	sub	sp, #16
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	60f8      	str	r0, [r7, #12]
 80073b0:	60b9      	str	r1, [r7, #8]
 80073b2:	607a      	str	r2, [r7, #4]
 80073b4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d103      	bne.n	80073c4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80073bc:	69bb      	ldr	r3, [r7, #24]
 80073be:	69ba      	ldr	r2, [r7, #24]
 80073c0:	601a      	str	r2, [r3, #0]
 80073c2:	e002      	b.n	80073ca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80073c4:	69bb      	ldr	r3, [r7, #24]
 80073c6:	687a      	ldr	r2, [r7, #4]
 80073c8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80073ca:	69bb      	ldr	r3, [r7, #24]
 80073cc:	68fa      	ldr	r2, [r7, #12]
 80073ce:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80073d0:	69bb      	ldr	r3, [r7, #24]
 80073d2:	68ba      	ldr	r2, [r7, #8]
 80073d4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80073d6:	2101      	movs	r1, #1
 80073d8:	69b8      	ldr	r0, [r7, #24]
 80073da:	f7ff ff05 	bl	80071e8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80073de:	69bb      	ldr	r3, [r7, #24]
 80073e0:	78fa      	ldrb	r2, [r7, #3]
 80073e2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80073e6:	bf00      	nop
 80073e8:	3710      	adds	r7, #16
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}
	...

080073f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b08e      	sub	sp, #56	; 0x38
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	60f8      	str	r0, [r7, #12]
 80073f8:	60b9      	str	r1, [r7, #8]
 80073fa:	607a      	str	r2, [r7, #4]
 80073fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80073fe:	2300      	movs	r3, #0
 8007400:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007408:	2b00      	cmp	r3, #0
 800740a:	d10a      	bne.n	8007422 <xQueueGenericSend+0x32>
	__asm volatile
 800740c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007410:	f383 8811 	msr	BASEPRI, r3
 8007414:	f3bf 8f6f 	isb	sy
 8007418:	f3bf 8f4f 	dsb	sy
 800741c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800741e:	bf00      	nop
 8007420:	e7fe      	b.n	8007420 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d103      	bne.n	8007430 <xQueueGenericSend+0x40>
 8007428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800742a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800742c:	2b00      	cmp	r3, #0
 800742e:	d101      	bne.n	8007434 <xQueueGenericSend+0x44>
 8007430:	2301      	movs	r3, #1
 8007432:	e000      	b.n	8007436 <xQueueGenericSend+0x46>
 8007434:	2300      	movs	r3, #0
 8007436:	2b00      	cmp	r3, #0
 8007438:	d10a      	bne.n	8007450 <xQueueGenericSend+0x60>
	__asm volatile
 800743a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800743e:	f383 8811 	msr	BASEPRI, r3
 8007442:	f3bf 8f6f 	isb	sy
 8007446:	f3bf 8f4f 	dsb	sy
 800744a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800744c:	bf00      	nop
 800744e:	e7fe      	b.n	800744e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	2b02      	cmp	r3, #2
 8007454:	d103      	bne.n	800745e <xQueueGenericSend+0x6e>
 8007456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800745a:	2b01      	cmp	r3, #1
 800745c:	d101      	bne.n	8007462 <xQueueGenericSend+0x72>
 800745e:	2301      	movs	r3, #1
 8007460:	e000      	b.n	8007464 <xQueueGenericSend+0x74>
 8007462:	2300      	movs	r3, #0
 8007464:	2b00      	cmp	r3, #0
 8007466:	d10a      	bne.n	800747e <xQueueGenericSend+0x8e>
	__asm volatile
 8007468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800746c:	f383 8811 	msr	BASEPRI, r3
 8007470:	f3bf 8f6f 	isb	sy
 8007474:	f3bf 8f4f 	dsb	sy
 8007478:	623b      	str	r3, [r7, #32]
}
 800747a:	bf00      	nop
 800747c:	e7fe      	b.n	800747c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800747e:	f001 f9e7 	bl	8008850 <xTaskGetSchedulerState>
 8007482:	4603      	mov	r3, r0
 8007484:	2b00      	cmp	r3, #0
 8007486:	d102      	bne.n	800748e <xQueueGenericSend+0x9e>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d101      	bne.n	8007492 <xQueueGenericSend+0xa2>
 800748e:	2301      	movs	r3, #1
 8007490:	e000      	b.n	8007494 <xQueueGenericSend+0xa4>
 8007492:	2300      	movs	r3, #0
 8007494:	2b00      	cmp	r3, #0
 8007496:	d10a      	bne.n	80074ae <xQueueGenericSend+0xbe>
	__asm volatile
 8007498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800749c:	f383 8811 	msr	BASEPRI, r3
 80074a0:	f3bf 8f6f 	isb	sy
 80074a4:	f3bf 8f4f 	dsb	sy
 80074a8:	61fb      	str	r3, [r7, #28]
}
 80074aa:	bf00      	nop
 80074ac:	e7fe      	b.n	80074ac <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80074ae:	f001 ff29 	bl	8009304 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80074b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074ba:	429a      	cmp	r2, r3
 80074bc:	d302      	bcc.n	80074c4 <xQueueGenericSend+0xd4>
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	2b02      	cmp	r3, #2
 80074c2:	d129      	bne.n	8007518 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80074c4:	683a      	ldr	r2, [r7, #0]
 80074c6:	68b9      	ldr	r1, [r7, #8]
 80074c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80074ca:	f000 fa0b 	bl	80078e4 <prvCopyDataToQueue>
 80074ce:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80074d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d010      	beq.n	80074fa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80074d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074da:	3324      	adds	r3, #36	; 0x24
 80074dc:	4618      	mov	r0, r3
 80074de:	f000 fff5 	bl	80084cc <xTaskRemoveFromEventList>
 80074e2:	4603      	mov	r3, r0
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d013      	beq.n	8007510 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80074e8:	4b3f      	ldr	r3, [pc, #252]	; (80075e8 <xQueueGenericSend+0x1f8>)
 80074ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074ee:	601a      	str	r2, [r3, #0]
 80074f0:	f3bf 8f4f 	dsb	sy
 80074f4:	f3bf 8f6f 	isb	sy
 80074f8:	e00a      	b.n	8007510 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80074fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d007      	beq.n	8007510 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007500:	4b39      	ldr	r3, [pc, #228]	; (80075e8 <xQueueGenericSend+0x1f8>)
 8007502:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007506:	601a      	str	r2, [r3, #0]
 8007508:	f3bf 8f4f 	dsb	sy
 800750c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007510:	f001 ff28 	bl	8009364 <vPortExitCritical>
				return pdPASS;
 8007514:	2301      	movs	r3, #1
 8007516:	e063      	b.n	80075e0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d103      	bne.n	8007526 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800751e:	f001 ff21 	bl	8009364 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007522:	2300      	movs	r3, #0
 8007524:	e05c      	b.n	80075e0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007528:	2b00      	cmp	r3, #0
 800752a:	d106      	bne.n	800753a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800752c:	f107 0314 	add.w	r3, r7, #20
 8007530:	4618      	mov	r0, r3
 8007532:	f001 f82f 	bl	8008594 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007536:	2301      	movs	r3, #1
 8007538:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800753a:	f001 ff13 	bl	8009364 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800753e:	f000 fd9b 	bl	8008078 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007542:	f001 fedf 	bl	8009304 <vPortEnterCritical>
 8007546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007548:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800754c:	b25b      	sxtb	r3, r3
 800754e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007552:	d103      	bne.n	800755c <xQueueGenericSend+0x16c>
 8007554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007556:	2200      	movs	r2, #0
 8007558:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800755c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800755e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007562:	b25b      	sxtb	r3, r3
 8007564:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007568:	d103      	bne.n	8007572 <xQueueGenericSend+0x182>
 800756a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800756c:	2200      	movs	r2, #0
 800756e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007572:	f001 fef7 	bl	8009364 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007576:	1d3a      	adds	r2, r7, #4
 8007578:	f107 0314 	add.w	r3, r7, #20
 800757c:	4611      	mov	r1, r2
 800757e:	4618      	mov	r0, r3
 8007580:	f001 f81e 	bl	80085c0 <xTaskCheckForTimeOut>
 8007584:	4603      	mov	r3, r0
 8007586:	2b00      	cmp	r3, #0
 8007588:	d124      	bne.n	80075d4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800758a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800758c:	f000 faa2 	bl	8007ad4 <prvIsQueueFull>
 8007590:	4603      	mov	r3, r0
 8007592:	2b00      	cmp	r3, #0
 8007594:	d018      	beq.n	80075c8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007598:	3310      	adds	r3, #16
 800759a:	687a      	ldr	r2, [r7, #4]
 800759c:	4611      	mov	r1, r2
 800759e:	4618      	mov	r0, r3
 80075a0:	f000 ff44 	bl	800842c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80075a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075a6:	f000 fa2d 	bl	8007a04 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80075aa:	f000 fd73 	bl	8008094 <xTaskResumeAll>
 80075ae:	4603      	mov	r3, r0
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	f47f af7c 	bne.w	80074ae <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80075b6:	4b0c      	ldr	r3, [pc, #48]	; (80075e8 <xQueueGenericSend+0x1f8>)
 80075b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075bc:	601a      	str	r2, [r3, #0]
 80075be:	f3bf 8f4f 	dsb	sy
 80075c2:	f3bf 8f6f 	isb	sy
 80075c6:	e772      	b.n	80074ae <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80075c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075ca:	f000 fa1b 	bl	8007a04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80075ce:	f000 fd61 	bl	8008094 <xTaskResumeAll>
 80075d2:	e76c      	b.n	80074ae <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80075d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075d6:	f000 fa15 	bl	8007a04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80075da:	f000 fd5b 	bl	8008094 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80075de:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3738      	adds	r7, #56	; 0x38
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}
 80075e8:	e000ed04 	.word	0xe000ed04

080075ec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b090      	sub	sp, #64	; 0x40
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	60f8      	str	r0, [r7, #12]
 80075f4:	60b9      	str	r1, [r7, #8]
 80075f6:	607a      	str	r2, [r7, #4]
 80075f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80075fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007600:	2b00      	cmp	r3, #0
 8007602:	d10a      	bne.n	800761a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007608:	f383 8811 	msr	BASEPRI, r3
 800760c:	f3bf 8f6f 	isb	sy
 8007610:	f3bf 8f4f 	dsb	sy
 8007614:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007616:	bf00      	nop
 8007618:	e7fe      	b.n	8007618 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d103      	bne.n	8007628 <xQueueGenericSendFromISR+0x3c>
 8007620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007624:	2b00      	cmp	r3, #0
 8007626:	d101      	bne.n	800762c <xQueueGenericSendFromISR+0x40>
 8007628:	2301      	movs	r3, #1
 800762a:	e000      	b.n	800762e <xQueueGenericSendFromISR+0x42>
 800762c:	2300      	movs	r3, #0
 800762e:	2b00      	cmp	r3, #0
 8007630:	d10a      	bne.n	8007648 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007636:	f383 8811 	msr	BASEPRI, r3
 800763a:	f3bf 8f6f 	isb	sy
 800763e:	f3bf 8f4f 	dsb	sy
 8007642:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007644:	bf00      	nop
 8007646:	e7fe      	b.n	8007646 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	2b02      	cmp	r3, #2
 800764c:	d103      	bne.n	8007656 <xQueueGenericSendFromISR+0x6a>
 800764e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007652:	2b01      	cmp	r3, #1
 8007654:	d101      	bne.n	800765a <xQueueGenericSendFromISR+0x6e>
 8007656:	2301      	movs	r3, #1
 8007658:	e000      	b.n	800765c <xQueueGenericSendFromISR+0x70>
 800765a:	2300      	movs	r3, #0
 800765c:	2b00      	cmp	r3, #0
 800765e:	d10a      	bne.n	8007676 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007664:	f383 8811 	msr	BASEPRI, r3
 8007668:	f3bf 8f6f 	isb	sy
 800766c:	f3bf 8f4f 	dsb	sy
 8007670:	623b      	str	r3, [r7, #32]
}
 8007672:	bf00      	nop
 8007674:	e7fe      	b.n	8007674 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007676:	f001 ff27 	bl	80094c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800767a:	f3ef 8211 	mrs	r2, BASEPRI
 800767e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007682:	f383 8811 	msr	BASEPRI, r3
 8007686:	f3bf 8f6f 	isb	sy
 800768a:	f3bf 8f4f 	dsb	sy
 800768e:	61fa      	str	r2, [r7, #28]
 8007690:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007692:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007694:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007698:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800769a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800769c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800769e:	429a      	cmp	r2, r3
 80076a0:	d302      	bcc.n	80076a8 <xQueueGenericSendFromISR+0xbc>
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	2b02      	cmp	r3, #2
 80076a6:	d12f      	bne.n	8007708 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80076a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80076b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80076b8:	683a      	ldr	r2, [r7, #0]
 80076ba:	68b9      	ldr	r1, [r7, #8]
 80076bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80076be:	f000 f911 	bl	80078e4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80076c2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80076c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076ca:	d112      	bne.n	80076f2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80076cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d016      	beq.n	8007702 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80076d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076d6:	3324      	adds	r3, #36	; 0x24
 80076d8:	4618      	mov	r0, r3
 80076da:	f000 fef7 	bl	80084cc <xTaskRemoveFromEventList>
 80076de:	4603      	mov	r3, r0
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d00e      	beq.n	8007702 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d00b      	beq.n	8007702 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2201      	movs	r2, #1
 80076ee:	601a      	str	r2, [r3, #0]
 80076f0:	e007      	b.n	8007702 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80076f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80076f6:	3301      	adds	r3, #1
 80076f8:	b2db      	uxtb	r3, r3
 80076fa:	b25a      	sxtb	r2, r3
 80076fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007702:	2301      	movs	r3, #1
 8007704:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007706:	e001      	b.n	800770c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007708:	2300      	movs	r3, #0
 800770a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800770c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800770e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007716:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800771a:	4618      	mov	r0, r3
 800771c:	3740      	adds	r7, #64	; 0x40
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}
	...

08007724 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b08c      	sub	sp, #48	; 0x30
 8007728:	af00      	add	r7, sp, #0
 800772a:	60f8      	str	r0, [r7, #12]
 800772c:	60b9      	str	r1, [r7, #8]
 800772e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007730:	2300      	movs	r3, #0
 8007732:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800773a:	2b00      	cmp	r3, #0
 800773c:	d10a      	bne.n	8007754 <xQueueReceive+0x30>
	__asm volatile
 800773e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007742:	f383 8811 	msr	BASEPRI, r3
 8007746:	f3bf 8f6f 	isb	sy
 800774a:	f3bf 8f4f 	dsb	sy
 800774e:	623b      	str	r3, [r7, #32]
}
 8007750:	bf00      	nop
 8007752:	e7fe      	b.n	8007752 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d103      	bne.n	8007762 <xQueueReceive+0x3e>
 800775a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800775c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800775e:	2b00      	cmp	r3, #0
 8007760:	d101      	bne.n	8007766 <xQueueReceive+0x42>
 8007762:	2301      	movs	r3, #1
 8007764:	e000      	b.n	8007768 <xQueueReceive+0x44>
 8007766:	2300      	movs	r3, #0
 8007768:	2b00      	cmp	r3, #0
 800776a:	d10a      	bne.n	8007782 <xQueueReceive+0x5e>
	__asm volatile
 800776c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007770:	f383 8811 	msr	BASEPRI, r3
 8007774:	f3bf 8f6f 	isb	sy
 8007778:	f3bf 8f4f 	dsb	sy
 800777c:	61fb      	str	r3, [r7, #28]
}
 800777e:	bf00      	nop
 8007780:	e7fe      	b.n	8007780 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007782:	f001 f865 	bl	8008850 <xTaskGetSchedulerState>
 8007786:	4603      	mov	r3, r0
 8007788:	2b00      	cmp	r3, #0
 800778a:	d102      	bne.n	8007792 <xQueueReceive+0x6e>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d101      	bne.n	8007796 <xQueueReceive+0x72>
 8007792:	2301      	movs	r3, #1
 8007794:	e000      	b.n	8007798 <xQueueReceive+0x74>
 8007796:	2300      	movs	r3, #0
 8007798:	2b00      	cmp	r3, #0
 800779a:	d10a      	bne.n	80077b2 <xQueueReceive+0x8e>
	__asm volatile
 800779c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a0:	f383 8811 	msr	BASEPRI, r3
 80077a4:	f3bf 8f6f 	isb	sy
 80077a8:	f3bf 8f4f 	dsb	sy
 80077ac:	61bb      	str	r3, [r7, #24]
}
 80077ae:	bf00      	nop
 80077b0:	e7fe      	b.n	80077b0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80077b2:	f001 fda7 	bl	8009304 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80077b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ba:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80077bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d01f      	beq.n	8007802 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80077c2:	68b9      	ldr	r1, [r7, #8]
 80077c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077c6:	f000 f8f7 	bl	80079b8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80077ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077cc:	1e5a      	subs	r2, r3, #1
 80077ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80077d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d4:	691b      	ldr	r3, [r3, #16]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d00f      	beq.n	80077fa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80077da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077dc:	3310      	adds	r3, #16
 80077de:	4618      	mov	r0, r3
 80077e0:	f000 fe74 	bl	80084cc <xTaskRemoveFromEventList>
 80077e4:	4603      	mov	r3, r0
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d007      	beq.n	80077fa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80077ea:	4b3d      	ldr	r3, [pc, #244]	; (80078e0 <xQueueReceive+0x1bc>)
 80077ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077f0:	601a      	str	r2, [r3, #0]
 80077f2:	f3bf 8f4f 	dsb	sy
 80077f6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80077fa:	f001 fdb3 	bl	8009364 <vPortExitCritical>
				return pdPASS;
 80077fe:	2301      	movs	r3, #1
 8007800:	e069      	b.n	80078d6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d103      	bne.n	8007810 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007808:	f001 fdac 	bl	8009364 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800780c:	2300      	movs	r3, #0
 800780e:	e062      	b.n	80078d6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007812:	2b00      	cmp	r3, #0
 8007814:	d106      	bne.n	8007824 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007816:	f107 0310 	add.w	r3, r7, #16
 800781a:	4618      	mov	r0, r3
 800781c:	f000 feba 	bl	8008594 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007820:	2301      	movs	r3, #1
 8007822:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007824:	f001 fd9e 	bl	8009364 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007828:	f000 fc26 	bl	8008078 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800782c:	f001 fd6a 	bl	8009304 <vPortEnterCritical>
 8007830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007832:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007836:	b25b      	sxtb	r3, r3
 8007838:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800783c:	d103      	bne.n	8007846 <xQueueReceive+0x122>
 800783e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007840:	2200      	movs	r2, #0
 8007842:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007848:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800784c:	b25b      	sxtb	r3, r3
 800784e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007852:	d103      	bne.n	800785c <xQueueReceive+0x138>
 8007854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007856:	2200      	movs	r2, #0
 8007858:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800785c:	f001 fd82 	bl	8009364 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007860:	1d3a      	adds	r2, r7, #4
 8007862:	f107 0310 	add.w	r3, r7, #16
 8007866:	4611      	mov	r1, r2
 8007868:	4618      	mov	r0, r3
 800786a:	f000 fea9 	bl	80085c0 <xTaskCheckForTimeOut>
 800786e:	4603      	mov	r3, r0
 8007870:	2b00      	cmp	r3, #0
 8007872:	d123      	bne.n	80078bc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007874:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007876:	f000 f917 	bl	8007aa8 <prvIsQueueEmpty>
 800787a:	4603      	mov	r3, r0
 800787c:	2b00      	cmp	r3, #0
 800787e:	d017      	beq.n	80078b0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007882:	3324      	adds	r3, #36	; 0x24
 8007884:	687a      	ldr	r2, [r7, #4]
 8007886:	4611      	mov	r1, r2
 8007888:	4618      	mov	r0, r3
 800788a:	f000 fdcf 	bl	800842c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800788e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007890:	f000 f8b8 	bl	8007a04 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007894:	f000 fbfe 	bl	8008094 <xTaskResumeAll>
 8007898:	4603      	mov	r3, r0
 800789a:	2b00      	cmp	r3, #0
 800789c:	d189      	bne.n	80077b2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800789e:	4b10      	ldr	r3, [pc, #64]	; (80078e0 <xQueueReceive+0x1bc>)
 80078a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078a4:	601a      	str	r2, [r3, #0]
 80078a6:	f3bf 8f4f 	dsb	sy
 80078aa:	f3bf 8f6f 	isb	sy
 80078ae:	e780      	b.n	80077b2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80078b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078b2:	f000 f8a7 	bl	8007a04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80078b6:	f000 fbed 	bl	8008094 <xTaskResumeAll>
 80078ba:	e77a      	b.n	80077b2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80078bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078be:	f000 f8a1 	bl	8007a04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80078c2:	f000 fbe7 	bl	8008094 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80078c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078c8:	f000 f8ee 	bl	8007aa8 <prvIsQueueEmpty>
 80078cc:	4603      	mov	r3, r0
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	f43f af6f 	beq.w	80077b2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80078d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3730      	adds	r7, #48	; 0x30
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}
 80078de:	bf00      	nop
 80078e0:	e000ed04 	.word	0xe000ed04

080078e4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b086      	sub	sp, #24
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	60f8      	str	r0, [r7, #12]
 80078ec:	60b9      	str	r1, [r7, #8]
 80078ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80078f0:	2300      	movs	r3, #0
 80078f2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078f8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d10d      	bne.n	800791e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d14d      	bne.n	80079a6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	689b      	ldr	r3, [r3, #8]
 800790e:	4618      	mov	r0, r3
 8007910:	f000 ffbc 	bl	800888c <xTaskPriorityDisinherit>
 8007914:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2200      	movs	r2, #0
 800791a:	609a      	str	r2, [r3, #8]
 800791c:	e043      	b.n	80079a6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d119      	bne.n	8007958 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	6858      	ldr	r0, [r3, #4]
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800792c:	461a      	mov	r2, r3
 800792e:	68b9      	ldr	r1, [r7, #8]
 8007930:	f002 fdfc 	bl	800a52c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	685a      	ldr	r2, [r3, #4]
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800793c:	441a      	add	r2, r3
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	685a      	ldr	r2, [r3, #4]
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	689b      	ldr	r3, [r3, #8]
 800794a:	429a      	cmp	r2, r3
 800794c:	d32b      	bcc.n	80079a6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681a      	ldr	r2, [r3, #0]
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	605a      	str	r2, [r3, #4]
 8007956:	e026      	b.n	80079a6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	68d8      	ldr	r0, [r3, #12]
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007960:	461a      	mov	r2, r3
 8007962:	68b9      	ldr	r1, [r7, #8]
 8007964:	f002 fde2 	bl	800a52c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	68da      	ldr	r2, [r3, #12]
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007970:	425b      	negs	r3, r3
 8007972:	441a      	add	r2, r3
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	68da      	ldr	r2, [r3, #12]
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	429a      	cmp	r2, r3
 8007982:	d207      	bcs.n	8007994 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	689a      	ldr	r2, [r3, #8]
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800798c:	425b      	negs	r3, r3
 800798e:	441a      	add	r2, r3
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2b02      	cmp	r3, #2
 8007998:	d105      	bne.n	80079a6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d002      	beq.n	80079a6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80079a0:	693b      	ldr	r3, [r7, #16]
 80079a2:	3b01      	subs	r3, #1
 80079a4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	1c5a      	adds	r2, r3, #1
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80079ae:	697b      	ldr	r3, [r7, #20]
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3718      	adds	r7, #24
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}

080079b8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b082      	sub	sp, #8
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d018      	beq.n	80079fc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	68da      	ldr	r2, [r3, #12]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079d2:	441a      	add	r2, r3
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	68da      	ldr	r2, [r3, #12]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	689b      	ldr	r3, [r3, #8]
 80079e0:	429a      	cmp	r2, r3
 80079e2:	d303      	bcc.n	80079ec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681a      	ldr	r2, [r3, #0]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	68d9      	ldr	r1, [r3, #12]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079f4:	461a      	mov	r2, r3
 80079f6:	6838      	ldr	r0, [r7, #0]
 80079f8:	f002 fd98 	bl	800a52c <memcpy>
	}
}
 80079fc:	bf00      	nop
 80079fe:	3708      	adds	r7, #8
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}

08007a04 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b084      	sub	sp, #16
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007a0c:	f001 fc7a 	bl	8009304 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a16:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007a18:	e011      	b.n	8007a3e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d012      	beq.n	8007a48 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	3324      	adds	r3, #36	; 0x24
 8007a26:	4618      	mov	r0, r3
 8007a28:	f000 fd50 	bl	80084cc <xTaskRemoveFromEventList>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d001      	beq.n	8007a36 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007a32:	f000 fe27 	bl	8008684 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007a36:	7bfb      	ldrb	r3, [r7, #15]
 8007a38:	3b01      	subs	r3, #1
 8007a3a:	b2db      	uxtb	r3, r3
 8007a3c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007a3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	dce9      	bgt.n	8007a1a <prvUnlockQueue+0x16>
 8007a46:	e000      	b.n	8007a4a <prvUnlockQueue+0x46>
					break;
 8007a48:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	22ff      	movs	r2, #255	; 0xff
 8007a4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007a52:	f001 fc87 	bl	8009364 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007a56:	f001 fc55 	bl	8009304 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007a60:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007a62:	e011      	b.n	8007a88 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	691b      	ldr	r3, [r3, #16]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d012      	beq.n	8007a92 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	3310      	adds	r3, #16
 8007a70:	4618      	mov	r0, r3
 8007a72:	f000 fd2b 	bl	80084cc <xTaskRemoveFromEventList>
 8007a76:	4603      	mov	r3, r0
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d001      	beq.n	8007a80 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007a7c:	f000 fe02 	bl	8008684 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007a80:	7bbb      	ldrb	r3, [r7, #14]
 8007a82:	3b01      	subs	r3, #1
 8007a84:	b2db      	uxtb	r3, r3
 8007a86:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007a88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	dce9      	bgt.n	8007a64 <prvUnlockQueue+0x60>
 8007a90:	e000      	b.n	8007a94 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007a92:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	22ff      	movs	r2, #255	; 0xff
 8007a98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007a9c:	f001 fc62 	bl	8009364 <vPortExitCritical>
}
 8007aa0:	bf00      	nop
 8007aa2:	3710      	adds	r7, #16
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}

08007aa8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b084      	sub	sp, #16
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007ab0:	f001 fc28 	bl	8009304 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d102      	bne.n	8007ac2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007abc:	2301      	movs	r3, #1
 8007abe:	60fb      	str	r3, [r7, #12]
 8007ac0:	e001      	b.n	8007ac6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007ac6:	f001 fc4d 	bl	8009364 <vPortExitCritical>

	return xReturn;
 8007aca:	68fb      	ldr	r3, [r7, #12]
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3710      	adds	r7, #16
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}

08007ad4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b084      	sub	sp, #16
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007adc:	f001 fc12 	bl	8009304 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	d102      	bne.n	8007af2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007aec:	2301      	movs	r3, #1
 8007aee:	60fb      	str	r3, [r7, #12]
 8007af0:	e001      	b.n	8007af6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007af2:	2300      	movs	r3, #0
 8007af4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007af6:	f001 fc35 	bl	8009364 <vPortExitCritical>

	return xReturn;
 8007afa:	68fb      	ldr	r3, [r7, #12]
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3710      	adds	r7, #16
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}

08007b04 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007b04:	b480      	push	{r7}
 8007b06:	b085      	sub	sp, #20
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007b0e:	2300      	movs	r3, #0
 8007b10:	60fb      	str	r3, [r7, #12]
 8007b12:	e014      	b.n	8007b3e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007b14:	4a0f      	ldr	r2, [pc, #60]	; (8007b54 <vQueueAddToRegistry+0x50>)
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d10b      	bne.n	8007b38 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007b20:	490c      	ldr	r1, [pc, #48]	; (8007b54 <vQueueAddToRegistry+0x50>)
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	683a      	ldr	r2, [r7, #0]
 8007b26:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007b2a:	4a0a      	ldr	r2, [pc, #40]	; (8007b54 <vQueueAddToRegistry+0x50>)
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	00db      	lsls	r3, r3, #3
 8007b30:	4413      	add	r3, r2
 8007b32:	687a      	ldr	r2, [r7, #4]
 8007b34:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007b36:	e006      	b.n	8007b46 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	3301      	adds	r3, #1
 8007b3c:	60fb      	str	r3, [r7, #12]
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2b07      	cmp	r3, #7
 8007b42:	d9e7      	bls.n	8007b14 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007b44:	bf00      	nop
 8007b46:	bf00      	nop
 8007b48:	3714      	adds	r7, #20
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b50:	4770      	bx	lr
 8007b52:	bf00      	nop
 8007b54:	20000968 	.word	0x20000968

08007b58 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b086      	sub	sp, #24
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	60f8      	str	r0, [r7, #12]
 8007b60:	60b9      	str	r1, [r7, #8]
 8007b62:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007b68:	f001 fbcc 	bl	8009304 <vPortEnterCritical>
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b72:	b25b      	sxtb	r3, r3
 8007b74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b78:	d103      	bne.n	8007b82 <vQueueWaitForMessageRestricted+0x2a>
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b88:	b25b      	sxtb	r3, r3
 8007b8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b8e:	d103      	bne.n	8007b98 <vQueueWaitForMessageRestricted+0x40>
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	2200      	movs	r2, #0
 8007b94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b98:	f001 fbe4 	bl	8009364 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d106      	bne.n	8007bb2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	3324      	adds	r3, #36	; 0x24
 8007ba8:	687a      	ldr	r2, [r7, #4]
 8007baa:	68b9      	ldr	r1, [r7, #8]
 8007bac:	4618      	mov	r0, r3
 8007bae:	f000 fc61 	bl	8008474 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007bb2:	6978      	ldr	r0, [r7, #20]
 8007bb4:	f7ff ff26 	bl	8007a04 <prvUnlockQueue>
	}
 8007bb8:	bf00      	nop
 8007bba:	3718      	adds	r7, #24
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}

08007bc0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b08e      	sub	sp, #56	; 0x38
 8007bc4:	af04      	add	r7, sp, #16
 8007bc6:	60f8      	str	r0, [r7, #12]
 8007bc8:	60b9      	str	r1, [r7, #8]
 8007bca:	607a      	str	r2, [r7, #4]
 8007bcc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d10a      	bne.n	8007bea <xTaskCreateStatic+0x2a>
	__asm volatile
 8007bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd8:	f383 8811 	msr	BASEPRI, r3
 8007bdc:	f3bf 8f6f 	isb	sy
 8007be0:	f3bf 8f4f 	dsb	sy
 8007be4:	623b      	str	r3, [r7, #32]
}
 8007be6:	bf00      	nop
 8007be8:	e7fe      	b.n	8007be8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d10a      	bne.n	8007c06 <xTaskCreateStatic+0x46>
	__asm volatile
 8007bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bf4:	f383 8811 	msr	BASEPRI, r3
 8007bf8:	f3bf 8f6f 	isb	sy
 8007bfc:	f3bf 8f4f 	dsb	sy
 8007c00:	61fb      	str	r3, [r7, #28]
}
 8007c02:	bf00      	nop
 8007c04:	e7fe      	b.n	8007c04 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007c06:	23bc      	movs	r3, #188	; 0xbc
 8007c08:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	2bbc      	cmp	r3, #188	; 0xbc
 8007c0e:	d00a      	beq.n	8007c26 <xTaskCreateStatic+0x66>
	__asm volatile
 8007c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c14:	f383 8811 	msr	BASEPRI, r3
 8007c18:	f3bf 8f6f 	isb	sy
 8007c1c:	f3bf 8f4f 	dsb	sy
 8007c20:	61bb      	str	r3, [r7, #24]
}
 8007c22:	bf00      	nop
 8007c24:	e7fe      	b.n	8007c24 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007c26:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d01e      	beq.n	8007c6c <xTaskCreateStatic+0xac>
 8007c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d01b      	beq.n	8007c6c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c36:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c3c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c40:	2202      	movs	r2, #2
 8007c42:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007c46:	2300      	movs	r3, #0
 8007c48:	9303      	str	r3, [sp, #12]
 8007c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c4c:	9302      	str	r3, [sp, #8]
 8007c4e:	f107 0314 	add.w	r3, r7, #20
 8007c52:	9301      	str	r3, [sp, #4]
 8007c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c56:	9300      	str	r3, [sp, #0]
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	687a      	ldr	r2, [r7, #4]
 8007c5c:	68b9      	ldr	r1, [r7, #8]
 8007c5e:	68f8      	ldr	r0, [r7, #12]
 8007c60:	f000 f850 	bl	8007d04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007c64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007c66:	f000 f8f3 	bl	8007e50 <prvAddNewTaskToReadyList>
 8007c6a:	e001      	b.n	8007c70 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007c70:	697b      	ldr	r3, [r7, #20]
	}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3728      	adds	r7, #40	; 0x28
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}

08007c7a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007c7a:	b580      	push	{r7, lr}
 8007c7c:	b08c      	sub	sp, #48	; 0x30
 8007c7e:	af04      	add	r7, sp, #16
 8007c80:	60f8      	str	r0, [r7, #12]
 8007c82:	60b9      	str	r1, [r7, #8]
 8007c84:	603b      	str	r3, [r7, #0]
 8007c86:	4613      	mov	r3, r2
 8007c88:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007c8a:	88fb      	ldrh	r3, [r7, #6]
 8007c8c:	009b      	lsls	r3, r3, #2
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f001 fc5a 	bl	8009548 <pvPortMalloc>
 8007c94:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d00e      	beq.n	8007cba <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007c9c:	20bc      	movs	r0, #188	; 0xbc
 8007c9e:	f001 fc53 	bl	8009548 <pvPortMalloc>
 8007ca2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007ca4:	69fb      	ldr	r3, [r7, #28]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d003      	beq.n	8007cb2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007caa:	69fb      	ldr	r3, [r7, #28]
 8007cac:	697a      	ldr	r2, [r7, #20]
 8007cae:	631a      	str	r2, [r3, #48]	; 0x30
 8007cb0:	e005      	b.n	8007cbe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007cb2:	6978      	ldr	r0, [r7, #20]
 8007cb4:	f001 fd14 	bl	80096e0 <vPortFree>
 8007cb8:	e001      	b.n	8007cbe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007cbe:	69fb      	ldr	r3, [r7, #28]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d017      	beq.n	8007cf4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007cc4:	69fb      	ldr	r3, [r7, #28]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007ccc:	88fa      	ldrh	r2, [r7, #6]
 8007cce:	2300      	movs	r3, #0
 8007cd0:	9303      	str	r3, [sp, #12]
 8007cd2:	69fb      	ldr	r3, [r7, #28]
 8007cd4:	9302      	str	r3, [sp, #8]
 8007cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cd8:	9301      	str	r3, [sp, #4]
 8007cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cdc:	9300      	str	r3, [sp, #0]
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	68b9      	ldr	r1, [r7, #8]
 8007ce2:	68f8      	ldr	r0, [r7, #12]
 8007ce4:	f000 f80e 	bl	8007d04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007ce8:	69f8      	ldr	r0, [r7, #28]
 8007cea:	f000 f8b1 	bl	8007e50 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007cee:	2301      	movs	r3, #1
 8007cf0:	61bb      	str	r3, [r7, #24]
 8007cf2:	e002      	b.n	8007cfa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007cf4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007cf8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007cfa:	69bb      	ldr	r3, [r7, #24]
	}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3720      	adds	r7, #32
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b088      	sub	sp, #32
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	60f8      	str	r0, [r7, #12]
 8007d0c:	60b9      	str	r1, [r7, #8]
 8007d0e:	607a      	str	r2, [r7, #4]
 8007d10:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d14:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	009b      	lsls	r3, r3, #2
 8007d1a:	461a      	mov	r2, r3
 8007d1c:	21a5      	movs	r1, #165	; 0xa5
 8007d1e:	f002 fc13 	bl	800a548 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007d2c:	3b01      	subs	r3, #1
 8007d2e:	009b      	lsls	r3, r3, #2
 8007d30:	4413      	add	r3, r2
 8007d32:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007d34:	69bb      	ldr	r3, [r7, #24]
 8007d36:	f023 0307 	bic.w	r3, r3, #7
 8007d3a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007d3c:	69bb      	ldr	r3, [r7, #24]
 8007d3e:	f003 0307 	and.w	r3, r3, #7
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d00a      	beq.n	8007d5c <prvInitialiseNewTask+0x58>
	__asm volatile
 8007d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d4a:	f383 8811 	msr	BASEPRI, r3
 8007d4e:	f3bf 8f6f 	isb	sy
 8007d52:	f3bf 8f4f 	dsb	sy
 8007d56:	617b      	str	r3, [r7, #20]
}
 8007d58:	bf00      	nop
 8007d5a:	e7fe      	b.n	8007d5a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d01f      	beq.n	8007da2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007d62:	2300      	movs	r3, #0
 8007d64:	61fb      	str	r3, [r7, #28]
 8007d66:	e012      	b.n	8007d8e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007d68:	68ba      	ldr	r2, [r7, #8]
 8007d6a:	69fb      	ldr	r3, [r7, #28]
 8007d6c:	4413      	add	r3, r2
 8007d6e:	7819      	ldrb	r1, [r3, #0]
 8007d70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d72:	69fb      	ldr	r3, [r7, #28]
 8007d74:	4413      	add	r3, r2
 8007d76:	3334      	adds	r3, #52	; 0x34
 8007d78:	460a      	mov	r2, r1
 8007d7a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007d7c:	68ba      	ldr	r2, [r7, #8]
 8007d7e:	69fb      	ldr	r3, [r7, #28]
 8007d80:	4413      	add	r3, r2
 8007d82:	781b      	ldrb	r3, [r3, #0]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d006      	beq.n	8007d96 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007d88:	69fb      	ldr	r3, [r7, #28]
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	61fb      	str	r3, [r7, #28]
 8007d8e:	69fb      	ldr	r3, [r7, #28]
 8007d90:	2b0f      	cmp	r3, #15
 8007d92:	d9e9      	bls.n	8007d68 <prvInitialiseNewTask+0x64>
 8007d94:	e000      	b.n	8007d98 <prvInitialiseNewTask+0x94>
			{
				break;
 8007d96:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007da0:	e003      	b.n	8007daa <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da4:	2200      	movs	r2, #0
 8007da6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dac:	2b37      	cmp	r3, #55	; 0x37
 8007dae:	d901      	bls.n	8007db4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007db0:	2337      	movs	r3, #55	; 0x37
 8007db2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007db8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007dbe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc8:	3304      	adds	r3, #4
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f7ff f978 	bl	80070c0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd2:	3318      	adds	r3, #24
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f7ff f973 	bl	80070c0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ddc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dde:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df2:	2200      	movs	r2, #0
 8007df4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e02:	3354      	adds	r3, #84	; 0x54
 8007e04:	2260      	movs	r2, #96	; 0x60
 8007e06:	2100      	movs	r1, #0
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f002 fb9d 	bl	800a548 <memset>
 8007e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e10:	4a0c      	ldr	r2, [pc, #48]	; (8007e44 <prvInitialiseNewTask+0x140>)
 8007e12:	659a      	str	r2, [r3, #88]	; 0x58
 8007e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e16:	4a0c      	ldr	r2, [pc, #48]	; (8007e48 <prvInitialiseNewTask+0x144>)
 8007e18:	65da      	str	r2, [r3, #92]	; 0x5c
 8007e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e1c:	4a0b      	ldr	r2, [pc, #44]	; (8007e4c <prvInitialiseNewTask+0x148>)
 8007e1e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007e20:	683a      	ldr	r2, [r7, #0]
 8007e22:	68f9      	ldr	r1, [r7, #12]
 8007e24:	69b8      	ldr	r0, [r7, #24]
 8007e26:	f001 f941 	bl	80090ac <pxPortInitialiseStack>
 8007e2a:	4602      	mov	r2, r0
 8007e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e2e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d002      	beq.n	8007e3c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e3a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e3c:	bf00      	nop
 8007e3e:	3720      	adds	r7, #32
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}
 8007e44:	0800aa5c 	.word	0x0800aa5c
 8007e48:	0800aa7c 	.word	0x0800aa7c
 8007e4c:	0800aa3c 	.word	0x0800aa3c

08007e50 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b082      	sub	sp, #8
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007e58:	f001 fa54 	bl	8009304 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007e5c:	4b2d      	ldr	r3, [pc, #180]	; (8007f14 <prvAddNewTaskToReadyList+0xc4>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	3301      	adds	r3, #1
 8007e62:	4a2c      	ldr	r2, [pc, #176]	; (8007f14 <prvAddNewTaskToReadyList+0xc4>)
 8007e64:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007e66:	4b2c      	ldr	r3, [pc, #176]	; (8007f18 <prvAddNewTaskToReadyList+0xc8>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d109      	bne.n	8007e82 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007e6e:	4a2a      	ldr	r2, [pc, #168]	; (8007f18 <prvAddNewTaskToReadyList+0xc8>)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007e74:	4b27      	ldr	r3, [pc, #156]	; (8007f14 <prvAddNewTaskToReadyList+0xc4>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	d110      	bne.n	8007e9e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007e7c:	f000 fc26 	bl	80086cc <prvInitialiseTaskLists>
 8007e80:	e00d      	b.n	8007e9e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007e82:	4b26      	ldr	r3, [pc, #152]	; (8007f1c <prvAddNewTaskToReadyList+0xcc>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d109      	bne.n	8007e9e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007e8a:	4b23      	ldr	r3, [pc, #140]	; (8007f18 <prvAddNewTaskToReadyList+0xc8>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e94:	429a      	cmp	r2, r3
 8007e96:	d802      	bhi.n	8007e9e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007e98:	4a1f      	ldr	r2, [pc, #124]	; (8007f18 <prvAddNewTaskToReadyList+0xc8>)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007e9e:	4b20      	ldr	r3, [pc, #128]	; (8007f20 <prvAddNewTaskToReadyList+0xd0>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	3301      	adds	r3, #1
 8007ea4:	4a1e      	ldr	r2, [pc, #120]	; (8007f20 <prvAddNewTaskToReadyList+0xd0>)
 8007ea6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007ea8:	4b1d      	ldr	r3, [pc, #116]	; (8007f20 <prvAddNewTaskToReadyList+0xd0>)
 8007eaa:	681a      	ldr	r2, [r3, #0]
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eb4:	4b1b      	ldr	r3, [pc, #108]	; (8007f24 <prvAddNewTaskToReadyList+0xd4>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	d903      	bls.n	8007ec4 <prvAddNewTaskToReadyList+0x74>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ec0:	4a18      	ldr	r2, [pc, #96]	; (8007f24 <prvAddNewTaskToReadyList+0xd4>)
 8007ec2:	6013      	str	r3, [r2, #0]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ec8:	4613      	mov	r3, r2
 8007eca:	009b      	lsls	r3, r3, #2
 8007ecc:	4413      	add	r3, r2
 8007ece:	009b      	lsls	r3, r3, #2
 8007ed0:	4a15      	ldr	r2, [pc, #84]	; (8007f28 <prvAddNewTaskToReadyList+0xd8>)
 8007ed2:	441a      	add	r2, r3
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	3304      	adds	r3, #4
 8007ed8:	4619      	mov	r1, r3
 8007eda:	4610      	mov	r0, r2
 8007edc:	f7ff f8fd 	bl	80070da <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007ee0:	f001 fa40 	bl	8009364 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007ee4:	4b0d      	ldr	r3, [pc, #52]	; (8007f1c <prvAddNewTaskToReadyList+0xcc>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d00e      	beq.n	8007f0a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007eec:	4b0a      	ldr	r3, [pc, #40]	; (8007f18 <prvAddNewTaskToReadyList+0xc8>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ef6:	429a      	cmp	r2, r3
 8007ef8:	d207      	bcs.n	8007f0a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007efa:	4b0c      	ldr	r3, [pc, #48]	; (8007f2c <prvAddNewTaskToReadyList+0xdc>)
 8007efc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f00:	601a      	str	r2, [r3, #0]
 8007f02:	f3bf 8f4f 	dsb	sy
 8007f06:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f0a:	bf00      	nop
 8007f0c:	3708      	adds	r7, #8
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}
 8007f12:	bf00      	nop
 8007f14:	20000e7c 	.word	0x20000e7c
 8007f18:	200009a8 	.word	0x200009a8
 8007f1c:	20000e88 	.word	0x20000e88
 8007f20:	20000e98 	.word	0x20000e98
 8007f24:	20000e84 	.word	0x20000e84
 8007f28:	200009ac 	.word	0x200009ac
 8007f2c:	e000ed04 	.word	0xe000ed04

08007f30 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b084      	sub	sp, #16
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d017      	beq.n	8007f72 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007f42:	4b13      	ldr	r3, [pc, #76]	; (8007f90 <vTaskDelay+0x60>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d00a      	beq.n	8007f60 <vTaskDelay+0x30>
	__asm volatile
 8007f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f4e:	f383 8811 	msr	BASEPRI, r3
 8007f52:	f3bf 8f6f 	isb	sy
 8007f56:	f3bf 8f4f 	dsb	sy
 8007f5a:	60bb      	str	r3, [r7, #8]
}
 8007f5c:	bf00      	nop
 8007f5e:	e7fe      	b.n	8007f5e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007f60:	f000 f88a 	bl	8008078 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007f64:	2100      	movs	r1, #0
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f000 fcfe 	bl	8008968 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007f6c:	f000 f892 	bl	8008094 <xTaskResumeAll>
 8007f70:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d107      	bne.n	8007f88 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007f78:	4b06      	ldr	r3, [pc, #24]	; (8007f94 <vTaskDelay+0x64>)
 8007f7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f7e:	601a      	str	r2, [r3, #0]
 8007f80:	f3bf 8f4f 	dsb	sy
 8007f84:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007f88:	bf00      	nop
 8007f8a:	3710      	adds	r7, #16
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}
 8007f90:	20000ea4 	.word	0x20000ea4
 8007f94:	e000ed04 	.word	0xe000ed04

08007f98 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b08a      	sub	sp, #40	; 0x28
 8007f9c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007fa6:	463a      	mov	r2, r7
 8007fa8:	1d39      	adds	r1, r7, #4
 8007faa:	f107 0308 	add.w	r3, r7, #8
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f7ff f832 	bl	8007018 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007fb4:	6839      	ldr	r1, [r7, #0]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	68ba      	ldr	r2, [r7, #8]
 8007fba:	9202      	str	r2, [sp, #8]
 8007fbc:	9301      	str	r3, [sp, #4]
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	9300      	str	r3, [sp, #0]
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	460a      	mov	r2, r1
 8007fc6:	4924      	ldr	r1, [pc, #144]	; (8008058 <vTaskStartScheduler+0xc0>)
 8007fc8:	4824      	ldr	r0, [pc, #144]	; (800805c <vTaskStartScheduler+0xc4>)
 8007fca:	f7ff fdf9 	bl	8007bc0 <xTaskCreateStatic>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	4a23      	ldr	r2, [pc, #140]	; (8008060 <vTaskStartScheduler+0xc8>)
 8007fd2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007fd4:	4b22      	ldr	r3, [pc, #136]	; (8008060 <vTaskStartScheduler+0xc8>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d002      	beq.n	8007fe2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	617b      	str	r3, [r7, #20]
 8007fe0:	e001      	b.n	8007fe6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	2b01      	cmp	r3, #1
 8007fea:	d102      	bne.n	8007ff2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007fec:	f000 fd10 	bl	8008a10 <xTimerCreateTimerTask>
 8007ff0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	2b01      	cmp	r3, #1
 8007ff6:	d11b      	bne.n	8008030 <vTaskStartScheduler+0x98>
	__asm volatile
 8007ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ffc:	f383 8811 	msr	BASEPRI, r3
 8008000:	f3bf 8f6f 	isb	sy
 8008004:	f3bf 8f4f 	dsb	sy
 8008008:	613b      	str	r3, [r7, #16]
}
 800800a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800800c:	4b15      	ldr	r3, [pc, #84]	; (8008064 <vTaskStartScheduler+0xcc>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	3354      	adds	r3, #84	; 0x54
 8008012:	4a15      	ldr	r2, [pc, #84]	; (8008068 <vTaskStartScheduler+0xd0>)
 8008014:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008016:	4b15      	ldr	r3, [pc, #84]	; (800806c <vTaskStartScheduler+0xd4>)
 8008018:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800801c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800801e:	4b14      	ldr	r3, [pc, #80]	; (8008070 <vTaskStartScheduler+0xd8>)
 8008020:	2201      	movs	r2, #1
 8008022:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008024:	4b13      	ldr	r3, [pc, #76]	; (8008074 <vTaskStartScheduler+0xdc>)
 8008026:	2200      	movs	r2, #0
 8008028:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800802a:	f001 f8c9 	bl	80091c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800802e:	e00e      	b.n	800804e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008036:	d10a      	bne.n	800804e <vTaskStartScheduler+0xb6>
	__asm volatile
 8008038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800803c:	f383 8811 	msr	BASEPRI, r3
 8008040:	f3bf 8f6f 	isb	sy
 8008044:	f3bf 8f4f 	dsb	sy
 8008048:	60fb      	str	r3, [r7, #12]
}
 800804a:	bf00      	nop
 800804c:	e7fe      	b.n	800804c <vTaskStartScheduler+0xb4>
}
 800804e:	bf00      	nop
 8008050:	3718      	adds	r7, #24
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}
 8008056:	bf00      	nop
 8008058:	0800a920 	.word	0x0800a920
 800805c:	0800869d 	.word	0x0800869d
 8008060:	20000ea0 	.word	0x20000ea0
 8008064:	200009a8 	.word	0x200009a8
 8008068:	20000100 	.word	0x20000100
 800806c:	20000e9c 	.word	0x20000e9c
 8008070:	20000e88 	.word	0x20000e88
 8008074:	20000e80 	.word	0x20000e80

08008078 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008078:	b480      	push	{r7}
 800807a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800807c:	4b04      	ldr	r3, [pc, #16]	; (8008090 <vTaskSuspendAll+0x18>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	3301      	adds	r3, #1
 8008082:	4a03      	ldr	r2, [pc, #12]	; (8008090 <vTaskSuspendAll+0x18>)
 8008084:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008086:	bf00      	nop
 8008088:	46bd      	mov	sp, r7
 800808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808e:	4770      	bx	lr
 8008090:	20000ea4 	.word	0x20000ea4

08008094 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b084      	sub	sp, #16
 8008098:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800809a:	2300      	movs	r3, #0
 800809c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800809e:	2300      	movs	r3, #0
 80080a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80080a2:	4b42      	ldr	r3, [pc, #264]	; (80081ac <xTaskResumeAll+0x118>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d10a      	bne.n	80080c0 <xTaskResumeAll+0x2c>
	__asm volatile
 80080aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ae:	f383 8811 	msr	BASEPRI, r3
 80080b2:	f3bf 8f6f 	isb	sy
 80080b6:	f3bf 8f4f 	dsb	sy
 80080ba:	603b      	str	r3, [r7, #0]
}
 80080bc:	bf00      	nop
 80080be:	e7fe      	b.n	80080be <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80080c0:	f001 f920 	bl	8009304 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80080c4:	4b39      	ldr	r3, [pc, #228]	; (80081ac <xTaskResumeAll+0x118>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	3b01      	subs	r3, #1
 80080ca:	4a38      	ldr	r2, [pc, #224]	; (80081ac <xTaskResumeAll+0x118>)
 80080cc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080ce:	4b37      	ldr	r3, [pc, #220]	; (80081ac <xTaskResumeAll+0x118>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d162      	bne.n	800819c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80080d6:	4b36      	ldr	r3, [pc, #216]	; (80081b0 <xTaskResumeAll+0x11c>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d05e      	beq.n	800819c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80080de:	e02f      	b.n	8008140 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080e0:	4b34      	ldr	r3, [pc, #208]	; (80081b4 <xTaskResumeAll+0x120>)
 80080e2:	68db      	ldr	r3, [r3, #12]
 80080e4:	68db      	ldr	r3, [r3, #12]
 80080e6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	3318      	adds	r3, #24
 80080ec:	4618      	mov	r0, r3
 80080ee:	f7ff f851 	bl	8007194 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	3304      	adds	r3, #4
 80080f6:	4618      	mov	r0, r3
 80080f8:	f7ff f84c 	bl	8007194 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008100:	4b2d      	ldr	r3, [pc, #180]	; (80081b8 <xTaskResumeAll+0x124>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	429a      	cmp	r2, r3
 8008106:	d903      	bls.n	8008110 <xTaskResumeAll+0x7c>
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800810c:	4a2a      	ldr	r2, [pc, #168]	; (80081b8 <xTaskResumeAll+0x124>)
 800810e:	6013      	str	r3, [r2, #0]
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008114:	4613      	mov	r3, r2
 8008116:	009b      	lsls	r3, r3, #2
 8008118:	4413      	add	r3, r2
 800811a:	009b      	lsls	r3, r3, #2
 800811c:	4a27      	ldr	r2, [pc, #156]	; (80081bc <xTaskResumeAll+0x128>)
 800811e:	441a      	add	r2, r3
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	3304      	adds	r3, #4
 8008124:	4619      	mov	r1, r3
 8008126:	4610      	mov	r0, r2
 8008128:	f7fe ffd7 	bl	80070da <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008130:	4b23      	ldr	r3, [pc, #140]	; (80081c0 <xTaskResumeAll+0x12c>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008136:	429a      	cmp	r2, r3
 8008138:	d302      	bcc.n	8008140 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800813a:	4b22      	ldr	r3, [pc, #136]	; (80081c4 <xTaskResumeAll+0x130>)
 800813c:	2201      	movs	r2, #1
 800813e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008140:	4b1c      	ldr	r3, [pc, #112]	; (80081b4 <xTaskResumeAll+0x120>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d1cb      	bne.n	80080e0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d001      	beq.n	8008152 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800814e:	f000 fb5f 	bl	8008810 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008152:	4b1d      	ldr	r3, [pc, #116]	; (80081c8 <xTaskResumeAll+0x134>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d010      	beq.n	8008180 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800815e:	f000 f847 	bl	80081f0 <xTaskIncrementTick>
 8008162:	4603      	mov	r3, r0
 8008164:	2b00      	cmp	r3, #0
 8008166:	d002      	beq.n	800816e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008168:	4b16      	ldr	r3, [pc, #88]	; (80081c4 <xTaskResumeAll+0x130>)
 800816a:	2201      	movs	r2, #1
 800816c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	3b01      	subs	r3, #1
 8008172:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d1f1      	bne.n	800815e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800817a:	4b13      	ldr	r3, [pc, #76]	; (80081c8 <xTaskResumeAll+0x134>)
 800817c:	2200      	movs	r2, #0
 800817e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008180:	4b10      	ldr	r3, [pc, #64]	; (80081c4 <xTaskResumeAll+0x130>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d009      	beq.n	800819c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008188:	2301      	movs	r3, #1
 800818a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800818c:	4b0f      	ldr	r3, [pc, #60]	; (80081cc <xTaskResumeAll+0x138>)
 800818e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008192:	601a      	str	r2, [r3, #0]
 8008194:	f3bf 8f4f 	dsb	sy
 8008198:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800819c:	f001 f8e2 	bl	8009364 <vPortExitCritical>

	return xAlreadyYielded;
 80081a0:	68bb      	ldr	r3, [r7, #8]
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3710      	adds	r7, #16
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}
 80081aa:	bf00      	nop
 80081ac:	20000ea4 	.word	0x20000ea4
 80081b0:	20000e7c 	.word	0x20000e7c
 80081b4:	20000e3c 	.word	0x20000e3c
 80081b8:	20000e84 	.word	0x20000e84
 80081bc:	200009ac 	.word	0x200009ac
 80081c0:	200009a8 	.word	0x200009a8
 80081c4:	20000e90 	.word	0x20000e90
 80081c8:	20000e8c 	.word	0x20000e8c
 80081cc:	e000ed04 	.word	0xe000ed04

080081d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80081d0:	b480      	push	{r7}
 80081d2:	b083      	sub	sp, #12
 80081d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80081d6:	4b05      	ldr	r3, [pc, #20]	; (80081ec <xTaskGetTickCount+0x1c>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80081dc:	687b      	ldr	r3, [r7, #4]
}
 80081de:	4618      	mov	r0, r3
 80081e0:	370c      	adds	r7, #12
 80081e2:	46bd      	mov	sp, r7
 80081e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e8:	4770      	bx	lr
 80081ea:	bf00      	nop
 80081ec:	20000e80 	.word	0x20000e80

080081f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b086      	sub	sp, #24
 80081f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80081f6:	2300      	movs	r3, #0
 80081f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081fa:	4b4f      	ldr	r3, [pc, #316]	; (8008338 <xTaskIncrementTick+0x148>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	f040 808f 	bne.w	8008322 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008204:	4b4d      	ldr	r3, [pc, #308]	; (800833c <xTaskIncrementTick+0x14c>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	3301      	adds	r3, #1
 800820a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800820c:	4a4b      	ldr	r2, [pc, #300]	; (800833c <xTaskIncrementTick+0x14c>)
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d120      	bne.n	800825a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008218:	4b49      	ldr	r3, [pc, #292]	; (8008340 <xTaskIncrementTick+0x150>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d00a      	beq.n	8008238 <xTaskIncrementTick+0x48>
	__asm volatile
 8008222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008226:	f383 8811 	msr	BASEPRI, r3
 800822a:	f3bf 8f6f 	isb	sy
 800822e:	f3bf 8f4f 	dsb	sy
 8008232:	603b      	str	r3, [r7, #0]
}
 8008234:	bf00      	nop
 8008236:	e7fe      	b.n	8008236 <xTaskIncrementTick+0x46>
 8008238:	4b41      	ldr	r3, [pc, #260]	; (8008340 <xTaskIncrementTick+0x150>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	60fb      	str	r3, [r7, #12]
 800823e:	4b41      	ldr	r3, [pc, #260]	; (8008344 <xTaskIncrementTick+0x154>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4a3f      	ldr	r2, [pc, #252]	; (8008340 <xTaskIncrementTick+0x150>)
 8008244:	6013      	str	r3, [r2, #0]
 8008246:	4a3f      	ldr	r2, [pc, #252]	; (8008344 <xTaskIncrementTick+0x154>)
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	6013      	str	r3, [r2, #0]
 800824c:	4b3e      	ldr	r3, [pc, #248]	; (8008348 <xTaskIncrementTick+0x158>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	3301      	adds	r3, #1
 8008252:	4a3d      	ldr	r2, [pc, #244]	; (8008348 <xTaskIncrementTick+0x158>)
 8008254:	6013      	str	r3, [r2, #0]
 8008256:	f000 fadb 	bl	8008810 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800825a:	4b3c      	ldr	r3, [pc, #240]	; (800834c <xTaskIncrementTick+0x15c>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	693a      	ldr	r2, [r7, #16]
 8008260:	429a      	cmp	r2, r3
 8008262:	d349      	bcc.n	80082f8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008264:	4b36      	ldr	r3, [pc, #216]	; (8008340 <xTaskIncrementTick+0x150>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d104      	bne.n	8008278 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800826e:	4b37      	ldr	r3, [pc, #220]	; (800834c <xTaskIncrementTick+0x15c>)
 8008270:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008274:	601a      	str	r2, [r3, #0]
					break;
 8008276:	e03f      	b.n	80082f8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008278:	4b31      	ldr	r3, [pc, #196]	; (8008340 <xTaskIncrementTick+0x150>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	68db      	ldr	r3, [r3, #12]
 800827e:	68db      	ldr	r3, [r3, #12]
 8008280:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	685b      	ldr	r3, [r3, #4]
 8008286:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008288:	693a      	ldr	r2, [r7, #16]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	429a      	cmp	r2, r3
 800828e:	d203      	bcs.n	8008298 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008290:	4a2e      	ldr	r2, [pc, #184]	; (800834c <xTaskIncrementTick+0x15c>)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008296:	e02f      	b.n	80082f8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	3304      	adds	r3, #4
 800829c:	4618      	mov	r0, r3
 800829e:	f7fe ff79 	bl	8007194 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d004      	beq.n	80082b4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	3318      	adds	r3, #24
 80082ae:	4618      	mov	r0, r3
 80082b0:	f7fe ff70 	bl	8007194 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082b8:	4b25      	ldr	r3, [pc, #148]	; (8008350 <xTaskIncrementTick+0x160>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	429a      	cmp	r2, r3
 80082be:	d903      	bls.n	80082c8 <xTaskIncrementTick+0xd8>
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082c4:	4a22      	ldr	r2, [pc, #136]	; (8008350 <xTaskIncrementTick+0x160>)
 80082c6:	6013      	str	r3, [r2, #0]
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082cc:	4613      	mov	r3, r2
 80082ce:	009b      	lsls	r3, r3, #2
 80082d0:	4413      	add	r3, r2
 80082d2:	009b      	lsls	r3, r3, #2
 80082d4:	4a1f      	ldr	r2, [pc, #124]	; (8008354 <xTaskIncrementTick+0x164>)
 80082d6:	441a      	add	r2, r3
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	3304      	adds	r3, #4
 80082dc:	4619      	mov	r1, r3
 80082de:	4610      	mov	r0, r2
 80082e0:	f7fe fefb 	bl	80070da <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082e8:	4b1b      	ldr	r3, [pc, #108]	; (8008358 <xTaskIncrementTick+0x168>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ee:	429a      	cmp	r2, r3
 80082f0:	d3b8      	bcc.n	8008264 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80082f2:	2301      	movs	r3, #1
 80082f4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80082f6:	e7b5      	b.n	8008264 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80082f8:	4b17      	ldr	r3, [pc, #92]	; (8008358 <xTaskIncrementTick+0x168>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082fe:	4915      	ldr	r1, [pc, #84]	; (8008354 <xTaskIncrementTick+0x164>)
 8008300:	4613      	mov	r3, r2
 8008302:	009b      	lsls	r3, r3, #2
 8008304:	4413      	add	r3, r2
 8008306:	009b      	lsls	r3, r3, #2
 8008308:	440b      	add	r3, r1
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	2b01      	cmp	r3, #1
 800830e:	d901      	bls.n	8008314 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008310:	2301      	movs	r3, #1
 8008312:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008314:	4b11      	ldr	r3, [pc, #68]	; (800835c <xTaskIncrementTick+0x16c>)
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d007      	beq.n	800832c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800831c:	2301      	movs	r3, #1
 800831e:	617b      	str	r3, [r7, #20]
 8008320:	e004      	b.n	800832c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008322:	4b0f      	ldr	r3, [pc, #60]	; (8008360 <xTaskIncrementTick+0x170>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	3301      	adds	r3, #1
 8008328:	4a0d      	ldr	r2, [pc, #52]	; (8008360 <xTaskIncrementTick+0x170>)
 800832a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800832c:	697b      	ldr	r3, [r7, #20]
}
 800832e:	4618      	mov	r0, r3
 8008330:	3718      	adds	r7, #24
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}
 8008336:	bf00      	nop
 8008338:	20000ea4 	.word	0x20000ea4
 800833c:	20000e80 	.word	0x20000e80
 8008340:	20000e34 	.word	0x20000e34
 8008344:	20000e38 	.word	0x20000e38
 8008348:	20000e94 	.word	0x20000e94
 800834c:	20000e9c 	.word	0x20000e9c
 8008350:	20000e84 	.word	0x20000e84
 8008354:	200009ac 	.word	0x200009ac
 8008358:	200009a8 	.word	0x200009a8
 800835c:	20000e90 	.word	0x20000e90
 8008360:	20000e8c 	.word	0x20000e8c

08008364 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008364:	b480      	push	{r7}
 8008366:	b085      	sub	sp, #20
 8008368:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800836a:	4b2a      	ldr	r3, [pc, #168]	; (8008414 <vTaskSwitchContext+0xb0>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d003      	beq.n	800837a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008372:	4b29      	ldr	r3, [pc, #164]	; (8008418 <vTaskSwitchContext+0xb4>)
 8008374:	2201      	movs	r2, #1
 8008376:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008378:	e046      	b.n	8008408 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800837a:	4b27      	ldr	r3, [pc, #156]	; (8008418 <vTaskSwitchContext+0xb4>)
 800837c:	2200      	movs	r2, #0
 800837e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008380:	4b26      	ldr	r3, [pc, #152]	; (800841c <vTaskSwitchContext+0xb8>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	60fb      	str	r3, [r7, #12]
 8008386:	e010      	b.n	80083aa <vTaskSwitchContext+0x46>
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d10a      	bne.n	80083a4 <vTaskSwitchContext+0x40>
	__asm volatile
 800838e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008392:	f383 8811 	msr	BASEPRI, r3
 8008396:	f3bf 8f6f 	isb	sy
 800839a:	f3bf 8f4f 	dsb	sy
 800839e:	607b      	str	r3, [r7, #4]
}
 80083a0:	bf00      	nop
 80083a2:	e7fe      	b.n	80083a2 <vTaskSwitchContext+0x3e>
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	3b01      	subs	r3, #1
 80083a8:	60fb      	str	r3, [r7, #12]
 80083aa:	491d      	ldr	r1, [pc, #116]	; (8008420 <vTaskSwitchContext+0xbc>)
 80083ac:	68fa      	ldr	r2, [r7, #12]
 80083ae:	4613      	mov	r3, r2
 80083b0:	009b      	lsls	r3, r3, #2
 80083b2:	4413      	add	r3, r2
 80083b4:	009b      	lsls	r3, r3, #2
 80083b6:	440b      	add	r3, r1
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d0e4      	beq.n	8008388 <vTaskSwitchContext+0x24>
 80083be:	68fa      	ldr	r2, [r7, #12]
 80083c0:	4613      	mov	r3, r2
 80083c2:	009b      	lsls	r3, r3, #2
 80083c4:	4413      	add	r3, r2
 80083c6:	009b      	lsls	r3, r3, #2
 80083c8:	4a15      	ldr	r2, [pc, #84]	; (8008420 <vTaskSwitchContext+0xbc>)
 80083ca:	4413      	add	r3, r2
 80083cc:	60bb      	str	r3, [r7, #8]
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	685b      	ldr	r3, [r3, #4]
 80083d2:	685a      	ldr	r2, [r3, #4]
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	605a      	str	r2, [r3, #4]
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	685a      	ldr	r2, [r3, #4]
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	3308      	adds	r3, #8
 80083e0:	429a      	cmp	r2, r3
 80083e2:	d104      	bne.n	80083ee <vTaskSwitchContext+0x8a>
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	685b      	ldr	r3, [r3, #4]
 80083e8:	685a      	ldr	r2, [r3, #4]
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	605a      	str	r2, [r3, #4]
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	685b      	ldr	r3, [r3, #4]
 80083f2:	68db      	ldr	r3, [r3, #12]
 80083f4:	4a0b      	ldr	r2, [pc, #44]	; (8008424 <vTaskSwitchContext+0xc0>)
 80083f6:	6013      	str	r3, [r2, #0]
 80083f8:	4a08      	ldr	r2, [pc, #32]	; (800841c <vTaskSwitchContext+0xb8>)
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80083fe:	4b09      	ldr	r3, [pc, #36]	; (8008424 <vTaskSwitchContext+0xc0>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	3354      	adds	r3, #84	; 0x54
 8008404:	4a08      	ldr	r2, [pc, #32]	; (8008428 <vTaskSwitchContext+0xc4>)
 8008406:	6013      	str	r3, [r2, #0]
}
 8008408:	bf00      	nop
 800840a:	3714      	adds	r7, #20
 800840c:	46bd      	mov	sp, r7
 800840e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008412:	4770      	bx	lr
 8008414:	20000ea4 	.word	0x20000ea4
 8008418:	20000e90 	.word	0x20000e90
 800841c:	20000e84 	.word	0x20000e84
 8008420:	200009ac 	.word	0x200009ac
 8008424:	200009a8 	.word	0x200009a8
 8008428:	20000100 	.word	0x20000100

0800842c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b084      	sub	sp, #16
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
 8008434:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d10a      	bne.n	8008452 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800843c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008440:	f383 8811 	msr	BASEPRI, r3
 8008444:	f3bf 8f6f 	isb	sy
 8008448:	f3bf 8f4f 	dsb	sy
 800844c:	60fb      	str	r3, [r7, #12]
}
 800844e:	bf00      	nop
 8008450:	e7fe      	b.n	8008450 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008452:	4b07      	ldr	r3, [pc, #28]	; (8008470 <vTaskPlaceOnEventList+0x44>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	3318      	adds	r3, #24
 8008458:	4619      	mov	r1, r3
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f7fe fe61 	bl	8007122 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008460:	2101      	movs	r1, #1
 8008462:	6838      	ldr	r0, [r7, #0]
 8008464:	f000 fa80 	bl	8008968 <prvAddCurrentTaskToDelayedList>
}
 8008468:	bf00      	nop
 800846a:	3710      	adds	r7, #16
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}
 8008470:	200009a8 	.word	0x200009a8

08008474 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008474:	b580      	push	{r7, lr}
 8008476:	b086      	sub	sp, #24
 8008478:	af00      	add	r7, sp, #0
 800847a:	60f8      	str	r0, [r7, #12]
 800847c:	60b9      	str	r1, [r7, #8]
 800847e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d10a      	bne.n	800849c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800848a:	f383 8811 	msr	BASEPRI, r3
 800848e:	f3bf 8f6f 	isb	sy
 8008492:	f3bf 8f4f 	dsb	sy
 8008496:	617b      	str	r3, [r7, #20]
}
 8008498:	bf00      	nop
 800849a:	e7fe      	b.n	800849a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800849c:	4b0a      	ldr	r3, [pc, #40]	; (80084c8 <vTaskPlaceOnEventListRestricted+0x54>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	3318      	adds	r3, #24
 80084a2:	4619      	mov	r1, r3
 80084a4:	68f8      	ldr	r0, [r7, #12]
 80084a6:	f7fe fe18 	bl	80070da <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d002      	beq.n	80084b6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80084b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80084b4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80084b6:	6879      	ldr	r1, [r7, #4]
 80084b8:	68b8      	ldr	r0, [r7, #8]
 80084ba:	f000 fa55 	bl	8008968 <prvAddCurrentTaskToDelayedList>
	}
 80084be:	bf00      	nop
 80084c0:	3718      	adds	r7, #24
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}
 80084c6:	bf00      	nop
 80084c8:	200009a8 	.word	0x200009a8

080084cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b086      	sub	sp, #24
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	68db      	ldr	r3, [r3, #12]
 80084d8:	68db      	ldr	r3, [r3, #12]
 80084da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d10a      	bne.n	80084f8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80084e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e6:	f383 8811 	msr	BASEPRI, r3
 80084ea:	f3bf 8f6f 	isb	sy
 80084ee:	f3bf 8f4f 	dsb	sy
 80084f2:	60fb      	str	r3, [r7, #12]
}
 80084f4:	bf00      	nop
 80084f6:	e7fe      	b.n	80084f6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	3318      	adds	r3, #24
 80084fc:	4618      	mov	r0, r3
 80084fe:	f7fe fe49 	bl	8007194 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008502:	4b1e      	ldr	r3, [pc, #120]	; (800857c <xTaskRemoveFromEventList+0xb0>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d11d      	bne.n	8008546 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	3304      	adds	r3, #4
 800850e:	4618      	mov	r0, r3
 8008510:	f7fe fe40 	bl	8007194 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008514:	693b      	ldr	r3, [r7, #16]
 8008516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008518:	4b19      	ldr	r3, [pc, #100]	; (8008580 <xTaskRemoveFromEventList+0xb4>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	429a      	cmp	r2, r3
 800851e:	d903      	bls.n	8008528 <xTaskRemoveFromEventList+0x5c>
 8008520:	693b      	ldr	r3, [r7, #16]
 8008522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008524:	4a16      	ldr	r2, [pc, #88]	; (8008580 <xTaskRemoveFromEventList+0xb4>)
 8008526:	6013      	str	r3, [r2, #0]
 8008528:	693b      	ldr	r3, [r7, #16]
 800852a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800852c:	4613      	mov	r3, r2
 800852e:	009b      	lsls	r3, r3, #2
 8008530:	4413      	add	r3, r2
 8008532:	009b      	lsls	r3, r3, #2
 8008534:	4a13      	ldr	r2, [pc, #76]	; (8008584 <xTaskRemoveFromEventList+0xb8>)
 8008536:	441a      	add	r2, r3
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	3304      	adds	r3, #4
 800853c:	4619      	mov	r1, r3
 800853e:	4610      	mov	r0, r2
 8008540:	f7fe fdcb 	bl	80070da <vListInsertEnd>
 8008544:	e005      	b.n	8008552 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008546:	693b      	ldr	r3, [r7, #16]
 8008548:	3318      	adds	r3, #24
 800854a:	4619      	mov	r1, r3
 800854c:	480e      	ldr	r0, [pc, #56]	; (8008588 <xTaskRemoveFromEventList+0xbc>)
 800854e:	f7fe fdc4 	bl	80070da <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008552:	693b      	ldr	r3, [r7, #16]
 8008554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008556:	4b0d      	ldr	r3, [pc, #52]	; (800858c <xTaskRemoveFromEventList+0xc0>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800855c:	429a      	cmp	r2, r3
 800855e:	d905      	bls.n	800856c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008560:	2301      	movs	r3, #1
 8008562:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008564:	4b0a      	ldr	r3, [pc, #40]	; (8008590 <xTaskRemoveFromEventList+0xc4>)
 8008566:	2201      	movs	r2, #1
 8008568:	601a      	str	r2, [r3, #0]
 800856a:	e001      	b.n	8008570 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800856c:	2300      	movs	r3, #0
 800856e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008570:	697b      	ldr	r3, [r7, #20]
}
 8008572:	4618      	mov	r0, r3
 8008574:	3718      	adds	r7, #24
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}
 800857a:	bf00      	nop
 800857c:	20000ea4 	.word	0x20000ea4
 8008580:	20000e84 	.word	0x20000e84
 8008584:	200009ac 	.word	0x200009ac
 8008588:	20000e3c 	.word	0x20000e3c
 800858c:	200009a8 	.word	0x200009a8
 8008590:	20000e90 	.word	0x20000e90

08008594 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008594:	b480      	push	{r7}
 8008596:	b083      	sub	sp, #12
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800859c:	4b06      	ldr	r3, [pc, #24]	; (80085b8 <vTaskInternalSetTimeOutState+0x24>)
 800859e:	681a      	ldr	r2, [r3, #0]
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80085a4:	4b05      	ldr	r3, [pc, #20]	; (80085bc <vTaskInternalSetTimeOutState+0x28>)
 80085a6:	681a      	ldr	r2, [r3, #0]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	605a      	str	r2, [r3, #4]
}
 80085ac:	bf00      	nop
 80085ae:	370c      	adds	r7, #12
 80085b0:	46bd      	mov	sp, r7
 80085b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b6:	4770      	bx	lr
 80085b8:	20000e94 	.word	0x20000e94
 80085bc:	20000e80 	.word	0x20000e80

080085c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b088      	sub	sp, #32
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d10a      	bne.n	80085e6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80085d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d4:	f383 8811 	msr	BASEPRI, r3
 80085d8:	f3bf 8f6f 	isb	sy
 80085dc:	f3bf 8f4f 	dsb	sy
 80085e0:	613b      	str	r3, [r7, #16]
}
 80085e2:	bf00      	nop
 80085e4:	e7fe      	b.n	80085e4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d10a      	bne.n	8008602 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80085ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f0:	f383 8811 	msr	BASEPRI, r3
 80085f4:	f3bf 8f6f 	isb	sy
 80085f8:	f3bf 8f4f 	dsb	sy
 80085fc:	60fb      	str	r3, [r7, #12]
}
 80085fe:	bf00      	nop
 8008600:	e7fe      	b.n	8008600 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008602:	f000 fe7f 	bl	8009304 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008606:	4b1d      	ldr	r3, [pc, #116]	; (800867c <xTaskCheckForTimeOut+0xbc>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	69ba      	ldr	r2, [r7, #24]
 8008612:	1ad3      	subs	r3, r2, r3
 8008614:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800861e:	d102      	bne.n	8008626 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008620:	2300      	movs	r3, #0
 8008622:	61fb      	str	r3, [r7, #28]
 8008624:	e023      	b.n	800866e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681a      	ldr	r2, [r3, #0]
 800862a:	4b15      	ldr	r3, [pc, #84]	; (8008680 <xTaskCheckForTimeOut+0xc0>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	429a      	cmp	r2, r3
 8008630:	d007      	beq.n	8008642 <xTaskCheckForTimeOut+0x82>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	685b      	ldr	r3, [r3, #4]
 8008636:	69ba      	ldr	r2, [r7, #24]
 8008638:	429a      	cmp	r2, r3
 800863a:	d302      	bcc.n	8008642 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800863c:	2301      	movs	r3, #1
 800863e:	61fb      	str	r3, [r7, #28]
 8008640:	e015      	b.n	800866e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	697a      	ldr	r2, [r7, #20]
 8008648:	429a      	cmp	r2, r3
 800864a:	d20b      	bcs.n	8008664 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	681a      	ldr	r2, [r3, #0]
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	1ad2      	subs	r2, r2, r3
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f7ff ff9b 	bl	8008594 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800865e:	2300      	movs	r3, #0
 8008660:	61fb      	str	r3, [r7, #28]
 8008662:	e004      	b.n	800866e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	2200      	movs	r2, #0
 8008668:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800866a:	2301      	movs	r3, #1
 800866c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800866e:	f000 fe79 	bl	8009364 <vPortExitCritical>

	return xReturn;
 8008672:	69fb      	ldr	r3, [r7, #28]
}
 8008674:	4618      	mov	r0, r3
 8008676:	3720      	adds	r7, #32
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}
 800867c:	20000e80 	.word	0x20000e80
 8008680:	20000e94 	.word	0x20000e94

08008684 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008684:	b480      	push	{r7}
 8008686:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008688:	4b03      	ldr	r3, [pc, #12]	; (8008698 <vTaskMissedYield+0x14>)
 800868a:	2201      	movs	r2, #1
 800868c:	601a      	str	r2, [r3, #0]
}
 800868e:	bf00      	nop
 8008690:	46bd      	mov	sp, r7
 8008692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008696:	4770      	bx	lr
 8008698:	20000e90 	.word	0x20000e90

0800869c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b082      	sub	sp, #8
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80086a4:	f000 f852 	bl	800874c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80086a8:	4b06      	ldr	r3, [pc, #24]	; (80086c4 <prvIdleTask+0x28>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	2b01      	cmp	r3, #1
 80086ae:	d9f9      	bls.n	80086a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80086b0:	4b05      	ldr	r3, [pc, #20]	; (80086c8 <prvIdleTask+0x2c>)
 80086b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086b6:	601a      	str	r2, [r3, #0]
 80086b8:	f3bf 8f4f 	dsb	sy
 80086bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80086c0:	e7f0      	b.n	80086a4 <prvIdleTask+0x8>
 80086c2:	bf00      	nop
 80086c4:	200009ac 	.word	0x200009ac
 80086c8:	e000ed04 	.word	0xe000ed04

080086cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b082      	sub	sp, #8
 80086d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80086d2:	2300      	movs	r3, #0
 80086d4:	607b      	str	r3, [r7, #4]
 80086d6:	e00c      	b.n	80086f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80086d8:	687a      	ldr	r2, [r7, #4]
 80086da:	4613      	mov	r3, r2
 80086dc:	009b      	lsls	r3, r3, #2
 80086de:	4413      	add	r3, r2
 80086e0:	009b      	lsls	r3, r3, #2
 80086e2:	4a12      	ldr	r2, [pc, #72]	; (800872c <prvInitialiseTaskLists+0x60>)
 80086e4:	4413      	add	r3, r2
 80086e6:	4618      	mov	r0, r3
 80086e8:	f7fe fcca 	bl	8007080 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	3301      	adds	r3, #1
 80086f0:	607b      	str	r3, [r7, #4]
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2b37      	cmp	r3, #55	; 0x37
 80086f6:	d9ef      	bls.n	80086d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80086f8:	480d      	ldr	r0, [pc, #52]	; (8008730 <prvInitialiseTaskLists+0x64>)
 80086fa:	f7fe fcc1 	bl	8007080 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80086fe:	480d      	ldr	r0, [pc, #52]	; (8008734 <prvInitialiseTaskLists+0x68>)
 8008700:	f7fe fcbe 	bl	8007080 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008704:	480c      	ldr	r0, [pc, #48]	; (8008738 <prvInitialiseTaskLists+0x6c>)
 8008706:	f7fe fcbb 	bl	8007080 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800870a:	480c      	ldr	r0, [pc, #48]	; (800873c <prvInitialiseTaskLists+0x70>)
 800870c:	f7fe fcb8 	bl	8007080 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008710:	480b      	ldr	r0, [pc, #44]	; (8008740 <prvInitialiseTaskLists+0x74>)
 8008712:	f7fe fcb5 	bl	8007080 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008716:	4b0b      	ldr	r3, [pc, #44]	; (8008744 <prvInitialiseTaskLists+0x78>)
 8008718:	4a05      	ldr	r2, [pc, #20]	; (8008730 <prvInitialiseTaskLists+0x64>)
 800871a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800871c:	4b0a      	ldr	r3, [pc, #40]	; (8008748 <prvInitialiseTaskLists+0x7c>)
 800871e:	4a05      	ldr	r2, [pc, #20]	; (8008734 <prvInitialiseTaskLists+0x68>)
 8008720:	601a      	str	r2, [r3, #0]
}
 8008722:	bf00      	nop
 8008724:	3708      	adds	r7, #8
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}
 800872a:	bf00      	nop
 800872c:	200009ac 	.word	0x200009ac
 8008730:	20000e0c 	.word	0x20000e0c
 8008734:	20000e20 	.word	0x20000e20
 8008738:	20000e3c 	.word	0x20000e3c
 800873c:	20000e50 	.word	0x20000e50
 8008740:	20000e68 	.word	0x20000e68
 8008744:	20000e34 	.word	0x20000e34
 8008748:	20000e38 	.word	0x20000e38

0800874c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b082      	sub	sp, #8
 8008750:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008752:	e019      	b.n	8008788 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008754:	f000 fdd6 	bl	8009304 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008758:	4b10      	ldr	r3, [pc, #64]	; (800879c <prvCheckTasksWaitingTermination+0x50>)
 800875a:	68db      	ldr	r3, [r3, #12]
 800875c:	68db      	ldr	r3, [r3, #12]
 800875e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	3304      	adds	r3, #4
 8008764:	4618      	mov	r0, r3
 8008766:	f7fe fd15 	bl	8007194 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800876a:	4b0d      	ldr	r3, [pc, #52]	; (80087a0 <prvCheckTasksWaitingTermination+0x54>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	3b01      	subs	r3, #1
 8008770:	4a0b      	ldr	r2, [pc, #44]	; (80087a0 <prvCheckTasksWaitingTermination+0x54>)
 8008772:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008774:	4b0b      	ldr	r3, [pc, #44]	; (80087a4 <prvCheckTasksWaitingTermination+0x58>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	3b01      	subs	r3, #1
 800877a:	4a0a      	ldr	r2, [pc, #40]	; (80087a4 <prvCheckTasksWaitingTermination+0x58>)
 800877c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800877e:	f000 fdf1 	bl	8009364 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f000 f810 	bl	80087a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008788:	4b06      	ldr	r3, [pc, #24]	; (80087a4 <prvCheckTasksWaitingTermination+0x58>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d1e1      	bne.n	8008754 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008790:	bf00      	nop
 8008792:	bf00      	nop
 8008794:	3708      	adds	r7, #8
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}
 800879a:	bf00      	nop
 800879c:	20000e50 	.word	0x20000e50
 80087a0:	20000e7c 	.word	0x20000e7c
 80087a4:	20000e64 	.word	0x20000e64

080087a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b084      	sub	sp, #16
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	3354      	adds	r3, #84	; 0x54
 80087b4:	4618      	mov	r0, r3
 80087b6:	f001 ffbd 	bl	800a734 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d108      	bne.n	80087d6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087c8:	4618      	mov	r0, r3
 80087ca:	f000 ff89 	bl	80096e0 <vPortFree>
				vPortFree( pxTCB );
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f000 ff86 	bl	80096e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80087d4:	e018      	b.n	8008808 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80087dc:	2b01      	cmp	r3, #1
 80087de:	d103      	bne.n	80087e8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f000 ff7d 	bl	80096e0 <vPortFree>
	}
 80087e6:	e00f      	b.n	8008808 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80087ee:	2b02      	cmp	r3, #2
 80087f0:	d00a      	beq.n	8008808 <prvDeleteTCB+0x60>
	__asm volatile
 80087f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f6:	f383 8811 	msr	BASEPRI, r3
 80087fa:	f3bf 8f6f 	isb	sy
 80087fe:	f3bf 8f4f 	dsb	sy
 8008802:	60fb      	str	r3, [r7, #12]
}
 8008804:	bf00      	nop
 8008806:	e7fe      	b.n	8008806 <prvDeleteTCB+0x5e>
	}
 8008808:	bf00      	nop
 800880a:	3710      	adds	r7, #16
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}

08008810 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008810:	b480      	push	{r7}
 8008812:	b083      	sub	sp, #12
 8008814:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008816:	4b0c      	ldr	r3, [pc, #48]	; (8008848 <prvResetNextTaskUnblockTime+0x38>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d104      	bne.n	800882a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008820:	4b0a      	ldr	r3, [pc, #40]	; (800884c <prvResetNextTaskUnblockTime+0x3c>)
 8008822:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008826:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008828:	e008      	b.n	800883c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800882a:	4b07      	ldr	r3, [pc, #28]	; (8008848 <prvResetNextTaskUnblockTime+0x38>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	68db      	ldr	r3, [r3, #12]
 8008830:	68db      	ldr	r3, [r3, #12]
 8008832:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	4a04      	ldr	r2, [pc, #16]	; (800884c <prvResetNextTaskUnblockTime+0x3c>)
 800883a:	6013      	str	r3, [r2, #0]
}
 800883c:	bf00      	nop
 800883e:	370c      	adds	r7, #12
 8008840:	46bd      	mov	sp, r7
 8008842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008846:	4770      	bx	lr
 8008848:	20000e34 	.word	0x20000e34
 800884c:	20000e9c 	.word	0x20000e9c

08008850 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008850:	b480      	push	{r7}
 8008852:	b083      	sub	sp, #12
 8008854:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008856:	4b0b      	ldr	r3, [pc, #44]	; (8008884 <xTaskGetSchedulerState+0x34>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d102      	bne.n	8008864 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800885e:	2301      	movs	r3, #1
 8008860:	607b      	str	r3, [r7, #4]
 8008862:	e008      	b.n	8008876 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008864:	4b08      	ldr	r3, [pc, #32]	; (8008888 <xTaskGetSchedulerState+0x38>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d102      	bne.n	8008872 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800886c:	2302      	movs	r3, #2
 800886e:	607b      	str	r3, [r7, #4]
 8008870:	e001      	b.n	8008876 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008872:	2300      	movs	r3, #0
 8008874:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008876:	687b      	ldr	r3, [r7, #4]
	}
 8008878:	4618      	mov	r0, r3
 800887a:	370c      	adds	r7, #12
 800887c:	46bd      	mov	sp, r7
 800887e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008882:	4770      	bx	lr
 8008884:	20000e88 	.word	0x20000e88
 8008888:	20000ea4 	.word	0x20000ea4

0800888c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800888c:	b580      	push	{r7, lr}
 800888e:	b086      	sub	sp, #24
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008898:	2300      	movs	r3, #0
 800889a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d056      	beq.n	8008950 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80088a2:	4b2e      	ldr	r3, [pc, #184]	; (800895c <xTaskPriorityDisinherit+0xd0>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	693a      	ldr	r2, [r7, #16]
 80088a8:	429a      	cmp	r2, r3
 80088aa:	d00a      	beq.n	80088c2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80088ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b0:	f383 8811 	msr	BASEPRI, r3
 80088b4:	f3bf 8f6f 	isb	sy
 80088b8:	f3bf 8f4f 	dsb	sy
 80088bc:	60fb      	str	r3, [r7, #12]
}
 80088be:	bf00      	nop
 80088c0:	e7fe      	b.n	80088c0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d10a      	bne.n	80088e0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80088ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ce:	f383 8811 	msr	BASEPRI, r3
 80088d2:	f3bf 8f6f 	isb	sy
 80088d6:	f3bf 8f4f 	dsb	sy
 80088da:	60bb      	str	r3, [r7, #8]
}
 80088dc:	bf00      	nop
 80088de:	e7fe      	b.n	80088de <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80088e0:	693b      	ldr	r3, [r7, #16]
 80088e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088e4:	1e5a      	subs	r2, r3, #1
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088ee:	693b      	ldr	r3, [r7, #16]
 80088f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088f2:	429a      	cmp	r2, r3
 80088f4:	d02c      	beq.n	8008950 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80088f6:	693b      	ldr	r3, [r7, #16]
 80088f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d128      	bne.n	8008950 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	3304      	adds	r3, #4
 8008902:	4618      	mov	r0, r3
 8008904:	f7fe fc46 	bl	8007194 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008910:	693b      	ldr	r3, [r7, #16]
 8008912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008914:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800891c:	693b      	ldr	r3, [r7, #16]
 800891e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008920:	4b0f      	ldr	r3, [pc, #60]	; (8008960 <xTaskPriorityDisinherit+0xd4>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	429a      	cmp	r2, r3
 8008926:	d903      	bls.n	8008930 <xTaskPriorityDisinherit+0xa4>
 8008928:	693b      	ldr	r3, [r7, #16]
 800892a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800892c:	4a0c      	ldr	r2, [pc, #48]	; (8008960 <xTaskPriorityDisinherit+0xd4>)
 800892e:	6013      	str	r3, [r2, #0]
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008934:	4613      	mov	r3, r2
 8008936:	009b      	lsls	r3, r3, #2
 8008938:	4413      	add	r3, r2
 800893a:	009b      	lsls	r3, r3, #2
 800893c:	4a09      	ldr	r2, [pc, #36]	; (8008964 <xTaskPriorityDisinherit+0xd8>)
 800893e:	441a      	add	r2, r3
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	3304      	adds	r3, #4
 8008944:	4619      	mov	r1, r3
 8008946:	4610      	mov	r0, r2
 8008948:	f7fe fbc7 	bl	80070da <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800894c:	2301      	movs	r3, #1
 800894e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008950:	697b      	ldr	r3, [r7, #20]
	}
 8008952:	4618      	mov	r0, r3
 8008954:	3718      	adds	r7, #24
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}
 800895a:	bf00      	nop
 800895c:	200009a8 	.word	0x200009a8
 8008960:	20000e84 	.word	0x20000e84
 8008964:	200009ac 	.word	0x200009ac

08008968 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b084      	sub	sp, #16
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
 8008970:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008972:	4b21      	ldr	r3, [pc, #132]	; (80089f8 <prvAddCurrentTaskToDelayedList+0x90>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008978:	4b20      	ldr	r3, [pc, #128]	; (80089fc <prvAddCurrentTaskToDelayedList+0x94>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	3304      	adds	r3, #4
 800897e:	4618      	mov	r0, r3
 8008980:	f7fe fc08 	bl	8007194 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800898a:	d10a      	bne.n	80089a2 <prvAddCurrentTaskToDelayedList+0x3a>
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d007      	beq.n	80089a2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008992:	4b1a      	ldr	r3, [pc, #104]	; (80089fc <prvAddCurrentTaskToDelayedList+0x94>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	3304      	adds	r3, #4
 8008998:	4619      	mov	r1, r3
 800899a:	4819      	ldr	r0, [pc, #100]	; (8008a00 <prvAddCurrentTaskToDelayedList+0x98>)
 800899c:	f7fe fb9d 	bl	80070da <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80089a0:	e026      	b.n	80089f0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80089a2:	68fa      	ldr	r2, [r7, #12]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	4413      	add	r3, r2
 80089a8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80089aa:	4b14      	ldr	r3, [pc, #80]	; (80089fc <prvAddCurrentTaskToDelayedList+0x94>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	68ba      	ldr	r2, [r7, #8]
 80089b0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80089b2:	68ba      	ldr	r2, [r7, #8]
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	429a      	cmp	r2, r3
 80089b8:	d209      	bcs.n	80089ce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80089ba:	4b12      	ldr	r3, [pc, #72]	; (8008a04 <prvAddCurrentTaskToDelayedList+0x9c>)
 80089bc:	681a      	ldr	r2, [r3, #0]
 80089be:	4b0f      	ldr	r3, [pc, #60]	; (80089fc <prvAddCurrentTaskToDelayedList+0x94>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	3304      	adds	r3, #4
 80089c4:	4619      	mov	r1, r3
 80089c6:	4610      	mov	r0, r2
 80089c8:	f7fe fbab 	bl	8007122 <vListInsert>
}
 80089cc:	e010      	b.n	80089f0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80089ce:	4b0e      	ldr	r3, [pc, #56]	; (8008a08 <prvAddCurrentTaskToDelayedList+0xa0>)
 80089d0:	681a      	ldr	r2, [r3, #0]
 80089d2:	4b0a      	ldr	r3, [pc, #40]	; (80089fc <prvAddCurrentTaskToDelayedList+0x94>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	3304      	adds	r3, #4
 80089d8:	4619      	mov	r1, r3
 80089da:	4610      	mov	r0, r2
 80089dc:	f7fe fba1 	bl	8007122 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80089e0:	4b0a      	ldr	r3, [pc, #40]	; (8008a0c <prvAddCurrentTaskToDelayedList+0xa4>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	68ba      	ldr	r2, [r7, #8]
 80089e6:	429a      	cmp	r2, r3
 80089e8:	d202      	bcs.n	80089f0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80089ea:	4a08      	ldr	r2, [pc, #32]	; (8008a0c <prvAddCurrentTaskToDelayedList+0xa4>)
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	6013      	str	r3, [r2, #0]
}
 80089f0:	bf00      	nop
 80089f2:	3710      	adds	r7, #16
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}
 80089f8:	20000e80 	.word	0x20000e80
 80089fc:	200009a8 	.word	0x200009a8
 8008a00:	20000e68 	.word	0x20000e68
 8008a04:	20000e38 	.word	0x20000e38
 8008a08:	20000e34 	.word	0x20000e34
 8008a0c:	20000e9c 	.word	0x20000e9c

08008a10 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b08a      	sub	sp, #40	; 0x28
 8008a14:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008a16:	2300      	movs	r3, #0
 8008a18:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008a1a:	f000 fb07 	bl	800902c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008a1e:	4b1c      	ldr	r3, [pc, #112]	; (8008a90 <xTimerCreateTimerTask+0x80>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d021      	beq.n	8008a6a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008a26:	2300      	movs	r3, #0
 8008a28:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008a2e:	1d3a      	adds	r2, r7, #4
 8008a30:	f107 0108 	add.w	r1, r7, #8
 8008a34:	f107 030c 	add.w	r3, r7, #12
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f7fe fb07 	bl	800704c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008a3e:	6879      	ldr	r1, [r7, #4]
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	68fa      	ldr	r2, [r7, #12]
 8008a44:	9202      	str	r2, [sp, #8]
 8008a46:	9301      	str	r3, [sp, #4]
 8008a48:	2302      	movs	r3, #2
 8008a4a:	9300      	str	r3, [sp, #0]
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	460a      	mov	r2, r1
 8008a50:	4910      	ldr	r1, [pc, #64]	; (8008a94 <xTimerCreateTimerTask+0x84>)
 8008a52:	4811      	ldr	r0, [pc, #68]	; (8008a98 <xTimerCreateTimerTask+0x88>)
 8008a54:	f7ff f8b4 	bl	8007bc0 <xTaskCreateStatic>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	4a10      	ldr	r2, [pc, #64]	; (8008a9c <xTimerCreateTimerTask+0x8c>)
 8008a5c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008a5e:	4b0f      	ldr	r3, [pc, #60]	; (8008a9c <xTimerCreateTimerTask+0x8c>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d001      	beq.n	8008a6a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008a66:	2301      	movs	r3, #1
 8008a68:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d10a      	bne.n	8008a86 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a74:	f383 8811 	msr	BASEPRI, r3
 8008a78:	f3bf 8f6f 	isb	sy
 8008a7c:	f3bf 8f4f 	dsb	sy
 8008a80:	613b      	str	r3, [r7, #16]
}
 8008a82:	bf00      	nop
 8008a84:	e7fe      	b.n	8008a84 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008a86:	697b      	ldr	r3, [r7, #20]
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3718      	adds	r7, #24
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}
 8008a90:	20000ed8 	.word	0x20000ed8
 8008a94:	0800a928 	.word	0x0800a928
 8008a98:	08008bd5 	.word	0x08008bd5
 8008a9c:	20000edc 	.word	0x20000edc

08008aa0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b08a      	sub	sp, #40	; 0x28
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	60f8      	str	r0, [r7, #12]
 8008aa8:	60b9      	str	r1, [r7, #8]
 8008aaa:	607a      	str	r2, [r7, #4]
 8008aac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d10a      	bne.n	8008ace <xTimerGenericCommand+0x2e>
	__asm volatile
 8008ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008abc:	f383 8811 	msr	BASEPRI, r3
 8008ac0:	f3bf 8f6f 	isb	sy
 8008ac4:	f3bf 8f4f 	dsb	sy
 8008ac8:	623b      	str	r3, [r7, #32]
}
 8008aca:	bf00      	nop
 8008acc:	e7fe      	b.n	8008acc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008ace:	4b1a      	ldr	r3, [pc, #104]	; (8008b38 <xTimerGenericCommand+0x98>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d02a      	beq.n	8008b2c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	2b05      	cmp	r3, #5
 8008ae6:	dc18      	bgt.n	8008b1a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008ae8:	f7ff feb2 	bl	8008850 <xTaskGetSchedulerState>
 8008aec:	4603      	mov	r3, r0
 8008aee:	2b02      	cmp	r3, #2
 8008af0:	d109      	bne.n	8008b06 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008af2:	4b11      	ldr	r3, [pc, #68]	; (8008b38 <xTimerGenericCommand+0x98>)
 8008af4:	6818      	ldr	r0, [r3, #0]
 8008af6:	f107 0110 	add.w	r1, r7, #16
 8008afa:	2300      	movs	r3, #0
 8008afc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008afe:	f7fe fc77 	bl	80073f0 <xQueueGenericSend>
 8008b02:	6278      	str	r0, [r7, #36]	; 0x24
 8008b04:	e012      	b.n	8008b2c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008b06:	4b0c      	ldr	r3, [pc, #48]	; (8008b38 <xTimerGenericCommand+0x98>)
 8008b08:	6818      	ldr	r0, [r3, #0]
 8008b0a:	f107 0110 	add.w	r1, r7, #16
 8008b0e:	2300      	movs	r3, #0
 8008b10:	2200      	movs	r2, #0
 8008b12:	f7fe fc6d 	bl	80073f0 <xQueueGenericSend>
 8008b16:	6278      	str	r0, [r7, #36]	; 0x24
 8008b18:	e008      	b.n	8008b2c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008b1a:	4b07      	ldr	r3, [pc, #28]	; (8008b38 <xTimerGenericCommand+0x98>)
 8008b1c:	6818      	ldr	r0, [r3, #0]
 8008b1e:	f107 0110 	add.w	r1, r7, #16
 8008b22:	2300      	movs	r3, #0
 8008b24:	683a      	ldr	r2, [r7, #0]
 8008b26:	f7fe fd61 	bl	80075ec <xQueueGenericSendFromISR>
 8008b2a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3728      	adds	r7, #40	; 0x28
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}
 8008b36:	bf00      	nop
 8008b38:	20000ed8 	.word	0x20000ed8

08008b3c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b088      	sub	sp, #32
 8008b40:	af02      	add	r7, sp, #8
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b46:	4b22      	ldr	r3, [pc, #136]	; (8008bd0 <prvProcessExpiredTimer+0x94>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	68db      	ldr	r3, [r3, #12]
 8008b4c:	68db      	ldr	r3, [r3, #12]
 8008b4e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008b50:	697b      	ldr	r3, [r7, #20]
 8008b52:	3304      	adds	r3, #4
 8008b54:	4618      	mov	r0, r3
 8008b56:	f7fe fb1d 	bl	8007194 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b60:	f003 0304 	and.w	r3, r3, #4
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d022      	beq.n	8008bae <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008b68:	697b      	ldr	r3, [r7, #20]
 8008b6a:	699a      	ldr	r2, [r3, #24]
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	18d1      	adds	r1, r2, r3
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	683a      	ldr	r2, [r7, #0]
 8008b74:	6978      	ldr	r0, [r7, #20]
 8008b76:	f000 f8d1 	bl	8008d1c <prvInsertTimerInActiveList>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d01f      	beq.n	8008bc0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008b80:	2300      	movs	r3, #0
 8008b82:	9300      	str	r3, [sp, #0]
 8008b84:	2300      	movs	r3, #0
 8008b86:	687a      	ldr	r2, [r7, #4]
 8008b88:	2100      	movs	r1, #0
 8008b8a:	6978      	ldr	r0, [r7, #20]
 8008b8c:	f7ff ff88 	bl	8008aa0 <xTimerGenericCommand>
 8008b90:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d113      	bne.n	8008bc0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b9c:	f383 8811 	msr	BASEPRI, r3
 8008ba0:	f3bf 8f6f 	isb	sy
 8008ba4:	f3bf 8f4f 	dsb	sy
 8008ba8:	60fb      	str	r3, [r7, #12]
}
 8008baa:	bf00      	nop
 8008bac:	e7fe      	b.n	8008bac <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008bae:	697b      	ldr	r3, [r7, #20]
 8008bb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008bb4:	f023 0301 	bic.w	r3, r3, #1
 8008bb8:	b2da      	uxtb	r2, r3
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	6a1b      	ldr	r3, [r3, #32]
 8008bc4:	6978      	ldr	r0, [r7, #20]
 8008bc6:	4798      	blx	r3
}
 8008bc8:	bf00      	nop
 8008bca:	3718      	adds	r7, #24
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}
 8008bd0:	20000ed0 	.word	0x20000ed0

08008bd4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b084      	sub	sp, #16
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008bdc:	f107 0308 	add.w	r3, r7, #8
 8008be0:	4618      	mov	r0, r3
 8008be2:	f000 f857 	bl	8008c94 <prvGetNextExpireTime>
 8008be6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	4619      	mov	r1, r3
 8008bec:	68f8      	ldr	r0, [r7, #12]
 8008bee:	f000 f803 	bl	8008bf8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008bf2:	f000 f8d5 	bl	8008da0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008bf6:	e7f1      	b.n	8008bdc <prvTimerTask+0x8>

08008bf8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b084      	sub	sp, #16
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008c02:	f7ff fa39 	bl	8008078 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008c06:	f107 0308 	add.w	r3, r7, #8
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f000 f866 	bl	8008cdc <prvSampleTimeNow>
 8008c10:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d130      	bne.n	8008c7a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d10a      	bne.n	8008c34 <prvProcessTimerOrBlockTask+0x3c>
 8008c1e:	687a      	ldr	r2, [r7, #4]
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	429a      	cmp	r2, r3
 8008c24:	d806      	bhi.n	8008c34 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008c26:	f7ff fa35 	bl	8008094 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008c2a:	68f9      	ldr	r1, [r7, #12]
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f7ff ff85 	bl	8008b3c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008c32:	e024      	b.n	8008c7e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d008      	beq.n	8008c4c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008c3a:	4b13      	ldr	r3, [pc, #76]	; (8008c88 <prvProcessTimerOrBlockTask+0x90>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d101      	bne.n	8008c48 <prvProcessTimerOrBlockTask+0x50>
 8008c44:	2301      	movs	r3, #1
 8008c46:	e000      	b.n	8008c4a <prvProcessTimerOrBlockTask+0x52>
 8008c48:	2300      	movs	r3, #0
 8008c4a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008c4c:	4b0f      	ldr	r3, [pc, #60]	; (8008c8c <prvProcessTimerOrBlockTask+0x94>)
 8008c4e:	6818      	ldr	r0, [r3, #0]
 8008c50:	687a      	ldr	r2, [r7, #4]
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	1ad3      	subs	r3, r2, r3
 8008c56:	683a      	ldr	r2, [r7, #0]
 8008c58:	4619      	mov	r1, r3
 8008c5a:	f7fe ff7d 	bl	8007b58 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008c5e:	f7ff fa19 	bl	8008094 <xTaskResumeAll>
 8008c62:	4603      	mov	r3, r0
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d10a      	bne.n	8008c7e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008c68:	4b09      	ldr	r3, [pc, #36]	; (8008c90 <prvProcessTimerOrBlockTask+0x98>)
 8008c6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c6e:	601a      	str	r2, [r3, #0]
 8008c70:	f3bf 8f4f 	dsb	sy
 8008c74:	f3bf 8f6f 	isb	sy
}
 8008c78:	e001      	b.n	8008c7e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008c7a:	f7ff fa0b 	bl	8008094 <xTaskResumeAll>
}
 8008c7e:	bf00      	nop
 8008c80:	3710      	adds	r7, #16
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}
 8008c86:	bf00      	nop
 8008c88:	20000ed4 	.word	0x20000ed4
 8008c8c:	20000ed8 	.word	0x20000ed8
 8008c90:	e000ed04 	.word	0xe000ed04

08008c94 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008c94:	b480      	push	{r7}
 8008c96:	b085      	sub	sp, #20
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008c9c:	4b0e      	ldr	r3, [pc, #56]	; (8008cd8 <prvGetNextExpireTime+0x44>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d101      	bne.n	8008caa <prvGetNextExpireTime+0x16>
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	e000      	b.n	8008cac <prvGetNextExpireTime+0x18>
 8008caa:	2200      	movs	r2, #0
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d105      	bne.n	8008cc4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008cb8:	4b07      	ldr	r3, [pc, #28]	; (8008cd8 <prvGetNextExpireTime+0x44>)
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	68db      	ldr	r3, [r3, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	60fb      	str	r3, [r7, #12]
 8008cc2:	e001      	b.n	8008cc8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	3714      	adds	r7, #20
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd4:	4770      	bx	lr
 8008cd6:	bf00      	nop
 8008cd8:	20000ed0 	.word	0x20000ed0

08008cdc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b084      	sub	sp, #16
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008ce4:	f7ff fa74 	bl	80081d0 <xTaskGetTickCount>
 8008ce8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008cea:	4b0b      	ldr	r3, [pc, #44]	; (8008d18 <prvSampleTimeNow+0x3c>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	68fa      	ldr	r2, [r7, #12]
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d205      	bcs.n	8008d00 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008cf4:	f000 f936 	bl	8008f64 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	601a      	str	r2, [r3, #0]
 8008cfe:	e002      	b.n	8008d06 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2200      	movs	r2, #0
 8008d04:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008d06:	4a04      	ldr	r2, [pc, #16]	; (8008d18 <prvSampleTimeNow+0x3c>)
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3710      	adds	r7, #16
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}
 8008d16:	bf00      	nop
 8008d18:	20000ee0 	.word	0x20000ee0

08008d1c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b086      	sub	sp, #24
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	60f8      	str	r0, [r7, #12]
 8008d24:	60b9      	str	r1, [r7, #8]
 8008d26:	607a      	str	r2, [r7, #4]
 8008d28:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	68ba      	ldr	r2, [r7, #8]
 8008d32:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	68fa      	ldr	r2, [r7, #12]
 8008d38:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008d3a:	68ba      	ldr	r2, [r7, #8]
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	429a      	cmp	r2, r3
 8008d40:	d812      	bhi.n	8008d68 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d42:	687a      	ldr	r2, [r7, #4]
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	1ad2      	subs	r2, r2, r3
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	699b      	ldr	r3, [r3, #24]
 8008d4c:	429a      	cmp	r2, r3
 8008d4e:	d302      	bcc.n	8008d56 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008d50:	2301      	movs	r3, #1
 8008d52:	617b      	str	r3, [r7, #20]
 8008d54:	e01b      	b.n	8008d8e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008d56:	4b10      	ldr	r3, [pc, #64]	; (8008d98 <prvInsertTimerInActiveList+0x7c>)
 8008d58:	681a      	ldr	r2, [r3, #0]
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	3304      	adds	r3, #4
 8008d5e:	4619      	mov	r1, r3
 8008d60:	4610      	mov	r0, r2
 8008d62:	f7fe f9de 	bl	8007122 <vListInsert>
 8008d66:	e012      	b.n	8008d8e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008d68:	687a      	ldr	r2, [r7, #4]
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	429a      	cmp	r2, r3
 8008d6e:	d206      	bcs.n	8008d7e <prvInsertTimerInActiveList+0x62>
 8008d70:	68ba      	ldr	r2, [r7, #8]
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	429a      	cmp	r2, r3
 8008d76:	d302      	bcc.n	8008d7e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008d78:	2301      	movs	r3, #1
 8008d7a:	617b      	str	r3, [r7, #20]
 8008d7c:	e007      	b.n	8008d8e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008d7e:	4b07      	ldr	r3, [pc, #28]	; (8008d9c <prvInsertTimerInActiveList+0x80>)
 8008d80:	681a      	ldr	r2, [r3, #0]
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	3304      	adds	r3, #4
 8008d86:	4619      	mov	r1, r3
 8008d88:	4610      	mov	r0, r2
 8008d8a:	f7fe f9ca 	bl	8007122 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008d8e:	697b      	ldr	r3, [r7, #20]
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	3718      	adds	r7, #24
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}
 8008d98:	20000ed4 	.word	0x20000ed4
 8008d9c:	20000ed0 	.word	0x20000ed0

08008da0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b08e      	sub	sp, #56	; 0x38
 8008da4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008da6:	e0ca      	b.n	8008f3e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	da18      	bge.n	8008de0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008dae:	1d3b      	adds	r3, r7, #4
 8008db0:	3304      	adds	r3, #4
 8008db2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d10a      	bne.n	8008dd0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dbe:	f383 8811 	msr	BASEPRI, r3
 8008dc2:	f3bf 8f6f 	isb	sy
 8008dc6:	f3bf 8f4f 	dsb	sy
 8008dca:	61fb      	str	r3, [r7, #28]
}
 8008dcc:	bf00      	nop
 8008dce:	e7fe      	b.n	8008dce <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008dd6:	6850      	ldr	r0, [r2, #4]
 8008dd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008dda:	6892      	ldr	r2, [r2, #8]
 8008ddc:	4611      	mov	r1, r2
 8008dde:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	f2c0 80aa 	blt.w	8008f3c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dee:	695b      	ldr	r3, [r3, #20]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d004      	beq.n	8008dfe <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008df6:	3304      	adds	r3, #4
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f7fe f9cb 	bl	8007194 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008dfe:	463b      	mov	r3, r7
 8008e00:	4618      	mov	r0, r3
 8008e02:	f7ff ff6b 	bl	8008cdc <prvSampleTimeNow>
 8008e06:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2b09      	cmp	r3, #9
 8008e0c:	f200 8097 	bhi.w	8008f3e <prvProcessReceivedCommands+0x19e>
 8008e10:	a201      	add	r2, pc, #4	; (adr r2, 8008e18 <prvProcessReceivedCommands+0x78>)
 8008e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e16:	bf00      	nop
 8008e18:	08008e41 	.word	0x08008e41
 8008e1c:	08008e41 	.word	0x08008e41
 8008e20:	08008e41 	.word	0x08008e41
 8008e24:	08008eb5 	.word	0x08008eb5
 8008e28:	08008ec9 	.word	0x08008ec9
 8008e2c:	08008f13 	.word	0x08008f13
 8008e30:	08008e41 	.word	0x08008e41
 8008e34:	08008e41 	.word	0x08008e41
 8008e38:	08008eb5 	.word	0x08008eb5
 8008e3c:	08008ec9 	.word	0x08008ec9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008e46:	f043 0301 	orr.w	r3, r3, #1
 8008e4a:	b2da      	uxtb	r2, r3
 8008e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008e52:	68ba      	ldr	r2, [r7, #8]
 8008e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e56:	699b      	ldr	r3, [r3, #24]
 8008e58:	18d1      	adds	r1, r2, r3
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e60:	f7ff ff5c 	bl	8008d1c <prvInsertTimerInActiveList>
 8008e64:	4603      	mov	r3, r0
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d069      	beq.n	8008f3e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e6c:	6a1b      	ldr	r3, [r3, #32]
 8008e6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e70:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008e78:	f003 0304 	and.w	r3, r3, #4
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d05e      	beq.n	8008f3e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008e80:	68ba      	ldr	r2, [r7, #8]
 8008e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e84:	699b      	ldr	r3, [r3, #24]
 8008e86:	441a      	add	r2, r3
 8008e88:	2300      	movs	r3, #0
 8008e8a:	9300      	str	r3, [sp, #0]
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	2100      	movs	r1, #0
 8008e90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e92:	f7ff fe05 	bl	8008aa0 <xTimerGenericCommand>
 8008e96:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008e98:	6a3b      	ldr	r3, [r7, #32]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d14f      	bne.n	8008f3e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ea2:	f383 8811 	msr	BASEPRI, r3
 8008ea6:	f3bf 8f6f 	isb	sy
 8008eaa:	f3bf 8f4f 	dsb	sy
 8008eae:	61bb      	str	r3, [r7, #24]
}
 8008eb0:	bf00      	nop
 8008eb2:	e7fe      	b.n	8008eb2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eb6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008eba:	f023 0301 	bic.w	r3, r3, #1
 8008ebe:	b2da      	uxtb	r2, r3
 8008ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ec2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008ec6:	e03a      	b.n	8008f3e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ece:	f043 0301 	orr.w	r3, r3, #1
 8008ed2:	b2da      	uxtb	r2, r3
 8008ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ed6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008eda:	68ba      	ldr	r2, [r7, #8]
 8008edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ede:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ee2:	699b      	ldr	r3, [r3, #24]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d10a      	bne.n	8008efe <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eec:	f383 8811 	msr	BASEPRI, r3
 8008ef0:	f3bf 8f6f 	isb	sy
 8008ef4:	f3bf 8f4f 	dsb	sy
 8008ef8:	617b      	str	r3, [r7, #20]
}
 8008efa:	bf00      	nop
 8008efc:	e7fe      	b.n	8008efc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f00:	699a      	ldr	r2, [r3, #24]
 8008f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f04:	18d1      	adds	r1, r2, r3
 8008f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f0c:	f7ff ff06 	bl	8008d1c <prvInsertTimerInActiveList>
					break;
 8008f10:	e015      	b.n	8008f3e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f18:	f003 0302 	and.w	r3, r3, #2
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d103      	bne.n	8008f28 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008f20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f22:	f000 fbdd 	bl	80096e0 <vPortFree>
 8008f26:	e00a      	b.n	8008f3e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f2e:	f023 0301 	bic.w	r3, r3, #1
 8008f32:	b2da      	uxtb	r2, r3
 8008f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008f3a:	e000      	b.n	8008f3e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008f3c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008f3e:	4b08      	ldr	r3, [pc, #32]	; (8008f60 <prvProcessReceivedCommands+0x1c0>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	1d39      	adds	r1, r7, #4
 8008f44:	2200      	movs	r2, #0
 8008f46:	4618      	mov	r0, r3
 8008f48:	f7fe fbec 	bl	8007724 <xQueueReceive>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	f47f af2a 	bne.w	8008da8 <prvProcessReceivedCommands+0x8>
	}
}
 8008f54:	bf00      	nop
 8008f56:	bf00      	nop
 8008f58:	3730      	adds	r7, #48	; 0x30
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}
 8008f5e:	bf00      	nop
 8008f60:	20000ed8 	.word	0x20000ed8

08008f64 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b088      	sub	sp, #32
 8008f68:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008f6a:	e048      	b.n	8008ffe <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008f6c:	4b2d      	ldr	r3, [pc, #180]	; (8009024 <prvSwitchTimerLists+0xc0>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	68db      	ldr	r3, [r3, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f76:	4b2b      	ldr	r3, [pc, #172]	; (8009024 <prvSwitchTimerLists+0xc0>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	68db      	ldr	r3, [r3, #12]
 8008f7c:	68db      	ldr	r3, [r3, #12]
 8008f7e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	3304      	adds	r3, #4
 8008f84:	4618      	mov	r0, r3
 8008f86:	f7fe f905 	bl	8007194 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	6a1b      	ldr	r3, [r3, #32]
 8008f8e:	68f8      	ldr	r0, [r7, #12]
 8008f90:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f98:	f003 0304 	and.w	r3, r3, #4
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d02e      	beq.n	8008ffe <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	699b      	ldr	r3, [r3, #24]
 8008fa4:	693a      	ldr	r2, [r7, #16]
 8008fa6:	4413      	add	r3, r2
 8008fa8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008faa:	68ba      	ldr	r2, [r7, #8]
 8008fac:	693b      	ldr	r3, [r7, #16]
 8008fae:	429a      	cmp	r2, r3
 8008fb0:	d90e      	bls.n	8008fd0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	68ba      	ldr	r2, [r7, #8]
 8008fb6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	68fa      	ldr	r2, [r7, #12]
 8008fbc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008fbe:	4b19      	ldr	r3, [pc, #100]	; (8009024 <prvSwitchTimerLists+0xc0>)
 8008fc0:	681a      	ldr	r2, [r3, #0]
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	3304      	adds	r3, #4
 8008fc6:	4619      	mov	r1, r3
 8008fc8:	4610      	mov	r0, r2
 8008fca:	f7fe f8aa 	bl	8007122 <vListInsert>
 8008fce:	e016      	b.n	8008ffe <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	9300      	str	r3, [sp, #0]
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	693a      	ldr	r2, [r7, #16]
 8008fd8:	2100      	movs	r1, #0
 8008fda:	68f8      	ldr	r0, [r7, #12]
 8008fdc:	f7ff fd60 	bl	8008aa0 <xTimerGenericCommand>
 8008fe0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d10a      	bne.n	8008ffe <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fec:	f383 8811 	msr	BASEPRI, r3
 8008ff0:	f3bf 8f6f 	isb	sy
 8008ff4:	f3bf 8f4f 	dsb	sy
 8008ff8:	603b      	str	r3, [r7, #0]
}
 8008ffa:	bf00      	nop
 8008ffc:	e7fe      	b.n	8008ffc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008ffe:	4b09      	ldr	r3, [pc, #36]	; (8009024 <prvSwitchTimerLists+0xc0>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d1b1      	bne.n	8008f6c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009008:	4b06      	ldr	r3, [pc, #24]	; (8009024 <prvSwitchTimerLists+0xc0>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800900e:	4b06      	ldr	r3, [pc, #24]	; (8009028 <prvSwitchTimerLists+0xc4>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	4a04      	ldr	r2, [pc, #16]	; (8009024 <prvSwitchTimerLists+0xc0>)
 8009014:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009016:	4a04      	ldr	r2, [pc, #16]	; (8009028 <prvSwitchTimerLists+0xc4>)
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	6013      	str	r3, [r2, #0]
}
 800901c:	bf00      	nop
 800901e:	3718      	adds	r7, #24
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}
 8009024:	20000ed0 	.word	0x20000ed0
 8009028:	20000ed4 	.word	0x20000ed4

0800902c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b082      	sub	sp, #8
 8009030:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009032:	f000 f967 	bl	8009304 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009036:	4b15      	ldr	r3, [pc, #84]	; (800908c <prvCheckForValidListAndQueue+0x60>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d120      	bne.n	8009080 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800903e:	4814      	ldr	r0, [pc, #80]	; (8009090 <prvCheckForValidListAndQueue+0x64>)
 8009040:	f7fe f81e 	bl	8007080 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009044:	4813      	ldr	r0, [pc, #76]	; (8009094 <prvCheckForValidListAndQueue+0x68>)
 8009046:	f7fe f81b 	bl	8007080 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800904a:	4b13      	ldr	r3, [pc, #76]	; (8009098 <prvCheckForValidListAndQueue+0x6c>)
 800904c:	4a10      	ldr	r2, [pc, #64]	; (8009090 <prvCheckForValidListAndQueue+0x64>)
 800904e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009050:	4b12      	ldr	r3, [pc, #72]	; (800909c <prvCheckForValidListAndQueue+0x70>)
 8009052:	4a10      	ldr	r2, [pc, #64]	; (8009094 <prvCheckForValidListAndQueue+0x68>)
 8009054:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009056:	2300      	movs	r3, #0
 8009058:	9300      	str	r3, [sp, #0]
 800905a:	4b11      	ldr	r3, [pc, #68]	; (80090a0 <prvCheckForValidListAndQueue+0x74>)
 800905c:	4a11      	ldr	r2, [pc, #68]	; (80090a4 <prvCheckForValidListAndQueue+0x78>)
 800905e:	2110      	movs	r1, #16
 8009060:	200a      	movs	r0, #10
 8009062:	f7fe f929 	bl	80072b8 <xQueueGenericCreateStatic>
 8009066:	4603      	mov	r3, r0
 8009068:	4a08      	ldr	r2, [pc, #32]	; (800908c <prvCheckForValidListAndQueue+0x60>)
 800906a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800906c:	4b07      	ldr	r3, [pc, #28]	; (800908c <prvCheckForValidListAndQueue+0x60>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d005      	beq.n	8009080 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009074:	4b05      	ldr	r3, [pc, #20]	; (800908c <prvCheckForValidListAndQueue+0x60>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	490b      	ldr	r1, [pc, #44]	; (80090a8 <prvCheckForValidListAndQueue+0x7c>)
 800907a:	4618      	mov	r0, r3
 800907c:	f7fe fd42 	bl	8007b04 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009080:	f000 f970 	bl	8009364 <vPortExitCritical>
}
 8009084:	bf00      	nop
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}
 800908a:	bf00      	nop
 800908c:	20000ed8 	.word	0x20000ed8
 8009090:	20000ea8 	.word	0x20000ea8
 8009094:	20000ebc 	.word	0x20000ebc
 8009098:	20000ed0 	.word	0x20000ed0
 800909c:	20000ed4 	.word	0x20000ed4
 80090a0:	20000f84 	.word	0x20000f84
 80090a4:	20000ee4 	.word	0x20000ee4
 80090a8:	0800a930 	.word	0x0800a930

080090ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80090ac:	b480      	push	{r7}
 80090ae:	b085      	sub	sp, #20
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	60f8      	str	r0, [r7, #12]
 80090b4:	60b9      	str	r1, [r7, #8]
 80090b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	3b04      	subs	r3, #4
 80090bc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80090c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	3b04      	subs	r3, #4
 80090ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	f023 0201 	bic.w	r2, r3, #1
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	3b04      	subs	r3, #4
 80090da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80090dc:	4a0c      	ldr	r2, [pc, #48]	; (8009110 <pxPortInitialiseStack+0x64>)
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	3b14      	subs	r3, #20
 80090e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80090e8:	687a      	ldr	r2, [r7, #4]
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	3b04      	subs	r3, #4
 80090f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	f06f 0202 	mvn.w	r2, #2
 80090fa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	3b20      	subs	r3, #32
 8009100:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009102:	68fb      	ldr	r3, [r7, #12]
}
 8009104:	4618      	mov	r0, r3
 8009106:	3714      	adds	r7, #20
 8009108:	46bd      	mov	sp, r7
 800910a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910e:	4770      	bx	lr
 8009110:	08009115 	.word	0x08009115

08009114 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009114:	b480      	push	{r7}
 8009116:	b085      	sub	sp, #20
 8009118:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800911a:	2300      	movs	r3, #0
 800911c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800911e:	4b12      	ldr	r3, [pc, #72]	; (8009168 <prvTaskExitError+0x54>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009126:	d00a      	beq.n	800913e <prvTaskExitError+0x2a>
	__asm volatile
 8009128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800912c:	f383 8811 	msr	BASEPRI, r3
 8009130:	f3bf 8f6f 	isb	sy
 8009134:	f3bf 8f4f 	dsb	sy
 8009138:	60fb      	str	r3, [r7, #12]
}
 800913a:	bf00      	nop
 800913c:	e7fe      	b.n	800913c <prvTaskExitError+0x28>
	__asm volatile
 800913e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009142:	f383 8811 	msr	BASEPRI, r3
 8009146:	f3bf 8f6f 	isb	sy
 800914a:	f3bf 8f4f 	dsb	sy
 800914e:	60bb      	str	r3, [r7, #8]
}
 8009150:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009152:	bf00      	nop
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d0fc      	beq.n	8009154 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800915a:	bf00      	nop
 800915c:	bf00      	nop
 800915e:	3714      	adds	r7, #20
 8009160:	46bd      	mov	sp, r7
 8009162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009166:	4770      	bx	lr
 8009168:	20000098 	.word	0x20000098
 800916c:	00000000 	.word	0x00000000

08009170 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009170:	4b07      	ldr	r3, [pc, #28]	; (8009190 <pxCurrentTCBConst2>)
 8009172:	6819      	ldr	r1, [r3, #0]
 8009174:	6808      	ldr	r0, [r1, #0]
 8009176:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800917a:	f380 8809 	msr	PSP, r0
 800917e:	f3bf 8f6f 	isb	sy
 8009182:	f04f 0000 	mov.w	r0, #0
 8009186:	f380 8811 	msr	BASEPRI, r0
 800918a:	4770      	bx	lr
 800918c:	f3af 8000 	nop.w

08009190 <pxCurrentTCBConst2>:
 8009190:	200009a8 	.word	0x200009a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009194:	bf00      	nop
 8009196:	bf00      	nop

08009198 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009198:	4808      	ldr	r0, [pc, #32]	; (80091bc <prvPortStartFirstTask+0x24>)
 800919a:	6800      	ldr	r0, [r0, #0]
 800919c:	6800      	ldr	r0, [r0, #0]
 800919e:	f380 8808 	msr	MSP, r0
 80091a2:	f04f 0000 	mov.w	r0, #0
 80091a6:	f380 8814 	msr	CONTROL, r0
 80091aa:	b662      	cpsie	i
 80091ac:	b661      	cpsie	f
 80091ae:	f3bf 8f4f 	dsb	sy
 80091b2:	f3bf 8f6f 	isb	sy
 80091b6:	df00      	svc	0
 80091b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80091ba:	bf00      	nop
 80091bc:	e000ed08 	.word	0xe000ed08

080091c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b086      	sub	sp, #24
 80091c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80091c6:	4b46      	ldr	r3, [pc, #280]	; (80092e0 <xPortStartScheduler+0x120>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	4a46      	ldr	r2, [pc, #280]	; (80092e4 <xPortStartScheduler+0x124>)
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d10a      	bne.n	80091e6 <xPortStartScheduler+0x26>
	__asm volatile
 80091d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d4:	f383 8811 	msr	BASEPRI, r3
 80091d8:	f3bf 8f6f 	isb	sy
 80091dc:	f3bf 8f4f 	dsb	sy
 80091e0:	613b      	str	r3, [r7, #16]
}
 80091e2:	bf00      	nop
 80091e4:	e7fe      	b.n	80091e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80091e6:	4b3e      	ldr	r3, [pc, #248]	; (80092e0 <xPortStartScheduler+0x120>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	4a3f      	ldr	r2, [pc, #252]	; (80092e8 <xPortStartScheduler+0x128>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d10a      	bne.n	8009206 <xPortStartScheduler+0x46>
	__asm volatile
 80091f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091f4:	f383 8811 	msr	BASEPRI, r3
 80091f8:	f3bf 8f6f 	isb	sy
 80091fc:	f3bf 8f4f 	dsb	sy
 8009200:	60fb      	str	r3, [r7, #12]
}
 8009202:	bf00      	nop
 8009204:	e7fe      	b.n	8009204 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009206:	4b39      	ldr	r3, [pc, #228]	; (80092ec <xPortStartScheduler+0x12c>)
 8009208:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	781b      	ldrb	r3, [r3, #0]
 800920e:	b2db      	uxtb	r3, r3
 8009210:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	22ff      	movs	r2, #255	; 0xff
 8009216:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	781b      	ldrb	r3, [r3, #0]
 800921c:	b2db      	uxtb	r3, r3
 800921e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009220:	78fb      	ldrb	r3, [r7, #3]
 8009222:	b2db      	uxtb	r3, r3
 8009224:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009228:	b2da      	uxtb	r2, r3
 800922a:	4b31      	ldr	r3, [pc, #196]	; (80092f0 <xPortStartScheduler+0x130>)
 800922c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800922e:	4b31      	ldr	r3, [pc, #196]	; (80092f4 <xPortStartScheduler+0x134>)
 8009230:	2207      	movs	r2, #7
 8009232:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009234:	e009      	b.n	800924a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009236:	4b2f      	ldr	r3, [pc, #188]	; (80092f4 <xPortStartScheduler+0x134>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	3b01      	subs	r3, #1
 800923c:	4a2d      	ldr	r2, [pc, #180]	; (80092f4 <xPortStartScheduler+0x134>)
 800923e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009240:	78fb      	ldrb	r3, [r7, #3]
 8009242:	b2db      	uxtb	r3, r3
 8009244:	005b      	lsls	r3, r3, #1
 8009246:	b2db      	uxtb	r3, r3
 8009248:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800924a:	78fb      	ldrb	r3, [r7, #3]
 800924c:	b2db      	uxtb	r3, r3
 800924e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009252:	2b80      	cmp	r3, #128	; 0x80
 8009254:	d0ef      	beq.n	8009236 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009256:	4b27      	ldr	r3, [pc, #156]	; (80092f4 <xPortStartScheduler+0x134>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f1c3 0307 	rsb	r3, r3, #7
 800925e:	2b04      	cmp	r3, #4
 8009260:	d00a      	beq.n	8009278 <xPortStartScheduler+0xb8>
	__asm volatile
 8009262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009266:	f383 8811 	msr	BASEPRI, r3
 800926a:	f3bf 8f6f 	isb	sy
 800926e:	f3bf 8f4f 	dsb	sy
 8009272:	60bb      	str	r3, [r7, #8]
}
 8009274:	bf00      	nop
 8009276:	e7fe      	b.n	8009276 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009278:	4b1e      	ldr	r3, [pc, #120]	; (80092f4 <xPortStartScheduler+0x134>)
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	021b      	lsls	r3, r3, #8
 800927e:	4a1d      	ldr	r2, [pc, #116]	; (80092f4 <xPortStartScheduler+0x134>)
 8009280:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009282:	4b1c      	ldr	r3, [pc, #112]	; (80092f4 <xPortStartScheduler+0x134>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800928a:	4a1a      	ldr	r2, [pc, #104]	; (80092f4 <xPortStartScheduler+0x134>)
 800928c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	b2da      	uxtb	r2, r3
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009296:	4b18      	ldr	r3, [pc, #96]	; (80092f8 <xPortStartScheduler+0x138>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	4a17      	ldr	r2, [pc, #92]	; (80092f8 <xPortStartScheduler+0x138>)
 800929c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80092a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80092a2:	4b15      	ldr	r3, [pc, #84]	; (80092f8 <xPortStartScheduler+0x138>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	4a14      	ldr	r2, [pc, #80]	; (80092f8 <xPortStartScheduler+0x138>)
 80092a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80092ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80092ae:	f000 f8dd 	bl	800946c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80092b2:	4b12      	ldr	r3, [pc, #72]	; (80092fc <xPortStartScheduler+0x13c>)
 80092b4:	2200      	movs	r2, #0
 80092b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80092b8:	f000 f8fc 	bl	80094b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80092bc:	4b10      	ldr	r3, [pc, #64]	; (8009300 <xPortStartScheduler+0x140>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	4a0f      	ldr	r2, [pc, #60]	; (8009300 <xPortStartScheduler+0x140>)
 80092c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80092c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80092c8:	f7ff ff66 	bl	8009198 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80092cc:	f7ff f84a 	bl	8008364 <vTaskSwitchContext>
	prvTaskExitError();
 80092d0:	f7ff ff20 	bl	8009114 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80092d4:	2300      	movs	r3, #0
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	3718      	adds	r7, #24
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}
 80092de:	bf00      	nop
 80092e0:	e000ed00 	.word	0xe000ed00
 80092e4:	410fc271 	.word	0x410fc271
 80092e8:	410fc270 	.word	0x410fc270
 80092ec:	e000e400 	.word	0xe000e400
 80092f0:	20000fd4 	.word	0x20000fd4
 80092f4:	20000fd8 	.word	0x20000fd8
 80092f8:	e000ed20 	.word	0xe000ed20
 80092fc:	20000098 	.word	0x20000098
 8009300:	e000ef34 	.word	0xe000ef34

08009304 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009304:	b480      	push	{r7}
 8009306:	b083      	sub	sp, #12
 8009308:	af00      	add	r7, sp, #0
	__asm volatile
 800930a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800930e:	f383 8811 	msr	BASEPRI, r3
 8009312:	f3bf 8f6f 	isb	sy
 8009316:	f3bf 8f4f 	dsb	sy
 800931a:	607b      	str	r3, [r7, #4]
}
 800931c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800931e:	4b0f      	ldr	r3, [pc, #60]	; (800935c <vPortEnterCritical+0x58>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	3301      	adds	r3, #1
 8009324:	4a0d      	ldr	r2, [pc, #52]	; (800935c <vPortEnterCritical+0x58>)
 8009326:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009328:	4b0c      	ldr	r3, [pc, #48]	; (800935c <vPortEnterCritical+0x58>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	2b01      	cmp	r3, #1
 800932e:	d10f      	bne.n	8009350 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009330:	4b0b      	ldr	r3, [pc, #44]	; (8009360 <vPortEnterCritical+0x5c>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	b2db      	uxtb	r3, r3
 8009336:	2b00      	cmp	r3, #0
 8009338:	d00a      	beq.n	8009350 <vPortEnterCritical+0x4c>
	__asm volatile
 800933a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800933e:	f383 8811 	msr	BASEPRI, r3
 8009342:	f3bf 8f6f 	isb	sy
 8009346:	f3bf 8f4f 	dsb	sy
 800934a:	603b      	str	r3, [r7, #0]
}
 800934c:	bf00      	nop
 800934e:	e7fe      	b.n	800934e <vPortEnterCritical+0x4a>
	}
}
 8009350:	bf00      	nop
 8009352:	370c      	adds	r7, #12
 8009354:	46bd      	mov	sp, r7
 8009356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935a:	4770      	bx	lr
 800935c:	20000098 	.word	0x20000098
 8009360:	e000ed04 	.word	0xe000ed04

08009364 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009364:	b480      	push	{r7}
 8009366:	b083      	sub	sp, #12
 8009368:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800936a:	4b12      	ldr	r3, [pc, #72]	; (80093b4 <vPortExitCritical+0x50>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d10a      	bne.n	8009388 <vPortExitCritical+0x24>
	__asm volatile
 8009372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009376:	f383 8811 	msr	BASEPRI, r3
 800937a:	f3bf 8f6f 	isb	sy
 800937e:	f3bf 8f4f 	dsb	sy
 8009382:	607b      	str	r3, [r7, #4]
}
 8009384:	bf00      	nop
 8009386:	e7fe      	b.n	8009386 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009388:	4b0a      	ldr	r3, [pc, #40]	; (80093b4 <vPortExitCritical+0x50>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	3b01      	subs	r3, #1
 800938e:	4a09      	ldr	r2, [pc, #36]	; (80093b4 <vPortExitCritical+0x50>)
 8009390:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009392:	4b08      	ldr	r3, [pc, #32]	; (80093b4 <vPortExitCritical+0x50>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d105      	bne.n	80093a6 <vPortExitCritical+0x42>
 800939a:	2300      	movs	r3, #0
 800939c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	f383 8811 	msr	BASEPRI, r3
}
 80093a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80093a6:	bf00      	nop
 80093a8:	370c      	adds	r7, #12
 80093aa:	46bd      	mov	sp, r7
 80093ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b0:	4770      	bx	lr
 80093b2:	bf00      	nop
 80093b4:	20000098 	.word	0x20000098
	...

080093c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80093c0:	f3ef 8009 	mrs	r0, PSP
 80093c4:	f3bf 8f6f 	isb	sy
 80093c8:	4b15      	ldr	r3, [pc, #84]	; (8009420 <pxCurrentTCBConst>)
 80093ca:	681a      	ldr	r2, [r3, #0]
 80093cc:	f01e 0f10 	tst.w	lr, #16
 80093d0:	bf08      	it	eq
 80093d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80093d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093da:	6010      	str	r0, [r2, #0]
 80093dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80093e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80093e4:	f380 8811 	msr	BASEPRI, r0
 80093e8:	f3bf 8f4f 	dsb	sy
 80093ec:	f3bf 8f6f 	isb	sy
 80093f0:	f7fe ffb8 	bl	8008364 <vTaskSwitchContext>
 80093f4:	f04f 0000 	mov.w	r0, #0
 80093f8:	f380 8811 	msr	BASEPRI, r0
 80093fc:	bc09      	pop	{r0, r3}
 80093fe:	6819      	ldr	r1, [r3, #0]
 8009400:	6808      	ldr	r0, [r1, #0]
 8009402:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009406:	f01e 0f10 	tst.w	lr, #16
 800940a:	bf08      	it	eq
 800940c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009410:	f380 8809 	msr	PSP, r0
 8009414:	f3bf 8f6f 	isb	sy
 8009418:	4770      	bx	lr
 800941a:	bf00      	nop
 800941c:	f3af 8000 	nop.w

08009420 <pxCurrentTCBConst>:
 8009420:	200009a8 	.word	0x200009a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009424:	bf00      	nop
 8009426:	bf00      	nop

08009428 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b082      	sub	sp, #8
 800942c:	af00      	add	r7, sp, #0
	__asm volatile
 800942e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009432:	f383 8811 	msr	BASEPRI, r3
 8009436:	f3bf 8f6f 	isb	sy
 800943a:	f3bf 8f4f 	dsb	sy
 800943e:	607b      	str	r3, [r7, #4]
}
 8009440:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009442:	f7fe fed5 	bl	80081f0 <xTaskIncrementTick>
 8009446:	4603      	mov	r3, r0
 8009448:	2b00      	cmp	r3, #0
 800944a:	d003      	beq.n	8009454 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800944c:	4b06      	ldr	r3, [pc, #24]	; (8009468 <xPortSysTickHandler+0x40>)
 800944e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009452:	601a      	str	r2, [r3, #0]
 8009454:	2300      	movs	r3, #0
 8009456:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	f383 8811 	msr	BASEPRI, r3
}
 800945e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009460:	bf00      	nop
 8009462:	3708      	adds	r7, #8
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}
 8009468:	e000ed04 	.word	0xe000ed04

0800946c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800946c:	b480      	push	{r7}
 800946e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009470:	4b0b      	ldr	r3, [pc, #44]	; (80094a0 <vPortSetupTimerInterrupt+0x34>)
 8009472:	2200      	movs	r2, #0
 8009474:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009476:	4b0b      	ldr	r3, [pc, #44]	; (80094a4 <vPortSetupTimerInterrupt+0x38>)
 8009478:	2200      	movs	r2, #0
 800947a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800947c:	4b0a      	ldr	r3, [pc, #40]	; (80094a8 <vPortSetupTimerInterrupt+0x3c>)
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	4a0a      	ldr	r2, [pc, #40]	; (80094ac <vPortSetupTimerInterrupt+0x40>)
 8009482:	fba2 2303 	umull	r2, r3, r2, r3
 8009486:	099b      	lsrs	r3, r3, #6
 8009488:	4a09      	ldr	r2, [pc, #36]	; (80094b0 <vPortSetupTimerInterrupt+0x44>)
 800948a:	3b01      	subs	r3, #1
 800948c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800948e:	4b04      	ldr	r3, [pc, #16]	; (80094a0 <vPortSetupTimerInterrupt+0x34>)
 8009490:	2207      	movs	r2, #7
 8009492:	601a      	str	r2, [r3, #0]
}
 8009494:	bf00      	nop
 8009496:	46bd      	mov	sp, r7
 8009498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949c:	4770      	bx	lr
 800949e:	bf00      	nop
 80094a0:	e000e010 	.word	0xe000e010
 80094a4:	e000e018 	.word	0xe000e018
 80094a8:	20000000 	.word	0x20000000
 80094ac:	10624dd3 	.word	0x10624dd3
 80094b0:	e000e014 	.word	0xe000e014

080094b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80094b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80094c4 <vPortEnableVFP+0x10>
 80094b8:	6801      	ldr	r1, [r0, #0]
 80094ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80094be:	6001      	str	r1, [r0, #0]
 80094c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80094c2:	bf00      	nop
 80094c4:	e000ed88 	.word	0xe000ed88

080094c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80094c8:	b480      	push	{r7}
 80094ca:	b085      	sub	sp, #20
 80094cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80094ce:	f3ef 8305 	mrs	r3, IPSR
 80094d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	2b0f      	cmp	r3, #15
 80094d8:	d914      	bls.n	8009504 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80094da:	4a17      	ldr	r2, [pc, #92]	; (8009538 <vPortValidateInterruptPriority+0x70>)
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	4413      	add	r3, r2
 80094e0:	781b      	ldrb	r3, [r3, #0]
 80094e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80094e4:	4b15      	ldr	r3, [pc, #84]	; (800953c <vPortValidateInterruptPriority+0x74>)
 80094e6:	781b      	ldrb	r3, [r3, #0]
 80094e8:	7afa      	ldrb	r2, [r7, #11]
 80094ea:	429a      	cmp	r2, r3
 80094ec:	d20a      	bcs.n	8009504 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80094ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094f2:	f383 8811 	msr	BASEPRI, r3
 80094f6:	f3bf 8f6f 	isb	sy
 80094fa:	f3bf 8f4f 	dsb	sy
 80094fe:	607b      	str	r3, [r7, #4]
}
 8009500:	bf00      	nop
 8009502:	e7fe      	b.n	8009502 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009504:	4b0e      	ldr	r3, [pc, #56]	; (8009540 <vPortValidateInterruptPriority+0x78>)
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800950c:	4b0d      	ldr	r3, [pc, #52]	; (8009544 <vPortValidateInterruptPriority+0x7c>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	429a      	cmp	r2, r3
 8009512:	d90a      	bls.n	800952a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009518:	f383 8811 	msr	BASEPRI, r3
 800951c:	f3bf 8f6f 	isb	sy
 8009520:	f3bf 8f4f 	dsb	sy
 8009524:	603b      	str	r3, [r7, #0]
}
 8009526:	bf00      	nop
 8009528:	e7fe      	b.n	8009528 <vPortValidateInterruptPriority+0x60>
	}
 800952a:	bf00      	nop
 800952c:	3714      	adds	r7, #20
 800952e:	46bd      	mov	sp, r7
 8009530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009534:	4770      	bx	lr
 8009536:	bf00      	nop
 8009538:	e000e3f0 	.word	0xe000e3f0
 800953c:	20000fd4 	.word	0x20000fd4
 8009540:	e000ed0c 	.word	0xe000ed0c
 8009544:	20000fd8 	.word	0x20000fd8

08009548 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b08a      	sub	sp, #40	; 0x28
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009550:	2300      	movs	r3, #0
 8009552:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009554:	f7fe fd90 	bl	8008078 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009558:	4b5b      	ldr	r3, [pc, #364]	; (80096c8 <pvPortMalloc+0x180>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d101      	bne.n	8009564 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009560:	f000 f920 	bl	80097a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009564:	4b59      	ldr	r3, [pc, #356]	; (80096cc <pvPortMalloc+0x184>)
 8009566:	681a      	ldr	r2, [r3, #0]
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	4013      	ands	r3, r2
 800956c:	2b00      	cmp	r3, #0
 800956e:	f040 8093 	bne.w	8009698 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d01d      	beq.n	80095b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009578:	2208      	movs	r2, #8
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	4413      	add	r3, r2
 800957e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f003 0307 	and.w	r3, r3, #7
 8009586:	2b00      	cmp	r3, #0
 8009588:	d014      	beq.n	80095b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f023 0307 	bic.w	r3, r3, #7
 8009590:	3308      	adds	r3, #8
 8009592:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f003 0307 	and.w	r3, r3, #7
 800959a:	2b00      	cmp	r3, #0
 800959c:	d00a      	beq.n	80095b4 <pvPortMalloc+0x6c>
	__asm volatile
 800959e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095a2:	f383 8811 	msr	BASEPRI, r3
 80095a6:	f3bf 8f6f 	isb	sy
 80095aa:	f3bf 8f4f 	dsb	sy
 80095ae:	617b      	str	r3, [r7, #20]
}
 80095b0:	bf00      	nop
 80095b2:	e7fe      	b.n	80095b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d06e      	beq.n	8009698 <pvPortMalloc+0x150>
 80095ba:	4b45      	ldr	r3, [pc, #276]	; (80096d0 <pvPortMalloc+0x188>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	687a      	ldr	r2, [r7, #4]
 80095c0:	429a      	cmp	r2, r3
 80095c2:	d869      	bhi.n	8009698 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80095c4:	4b43      	ldr	r3, [pc, #268]	; (80096d4 <pvPortMalloc+0x18c>)
 80095c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80095c8:	4b42      	ldr	r3, [pc, #264]	; (80096d4 <pvPortMalloc+0x18c>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80095ce:	e004      	b.n	80095da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80095d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80095d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80095da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095dc:	685b      	ldr	r3, [r3, #4]
 80095de:	687a      	ldr	r2, [r7, #4]
 80095e0:	429a      	cmp	r2, r3
 80095e2:	d903      	bls.n	80095ec <pvPortMalloc+0xa4>
 80095e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d1f1      	bne.n	80095d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80095ec:	4b36      	ldr	r3, [pc, #216]	; (80096c8 <pvPortMalloc+0x180>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095f2:	429a      	cmp	r2, r3
 80095f4:	d050      	beq.n	8009698 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80095f6:	6a3b      	ldr	r3, [r7, #32]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	2208      	movs	r2, #8
 80095fc:	4413      	add	r3, r2
 80095fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009602:	681a      	ldr	r2, [r3, #0]
 8009604:	6a3b      	ldr	r3, [r7, #32]
 8009606:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800960a:	685a      	ldr	r2, [r3, #4]
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	1ad2      	subs	r2, r2, r3
 8009610:	2308      	movs	r3, #8
 8009612:	005b      	lsls	r3, r3, #1
 8009614:	429a      	cmp	r2, r3
 8009616:	d91f      	bls.n	8009658 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	4413      	add	r3, r2
 800961e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009620:	69bb      	ldr	r3, [r7, #24]
 8009622:	f003 0307 	and.w	r3, r3, #7
 8009626:	2b00      	cmp	r3, #0
 8009628:	d00a      	beq.n	8009640 <pvPortMalloc+0xf8>
	__asm volatile
 800962a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800962e:	f383 8811 	msr	BASEPRI, r3
 8009632:	f3bf 8f6f 	isb	sy
 8009636:	f3bf 8f4f 	dsb	sy
 800963a:	613b      	str	r3, [r7, #16]
}
 800963c:	bf00      	nop
 800963e:	e7fe      	b.n	800963e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009642:	685a      	ldr	r2, [r3, #4]
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	1ad2      	subs	r2, r2, r3
 8009648:	69bb      	ldr	r3, [r7, #24]
 800964a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800964c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800964e:	687a      	ldr	r2, [r7, #4]
 8009650:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009652:	69b8      	ldr	r0, [r7, #24]
 8009654:	f000 f908 	bl	8009868 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009658:	4b1d      	ldr	r3, [pc, #116]	; (80096d0 <pvPortMalloc+0x188>)
 800965a:	681a      	ldr	r2, [r3, #0]
 800965c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800965e:	685b      	ldr	r3, [r3, #4]
 8009660:	1ad3      	subs	r3, r2, r3
 8009662:	4a1b      	ldr	r2, [pc, #108]	; (80096d0 <pvPortMalloc+0x188>)
 8009664:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009666:	4b1a      	ldr	r3, [pc, #104]	; (80096d0 <pvPortMalloc+0x188>)
 8009668:	681a      	ldr	r2, [r3, #0]
 800966a:	4b1b      	ldr	r3, [pc, #108]	; (80096d8 <pvPortMalloc+0x190>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	429a      	cmp	r2, r3
 8009670:	d203      	bcs.n	800967a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009672:	4b17      	ldr	r3, [pc, #92]	; (80096d0 <pvPortMalloc+0x188>)
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	4a18      	ldr	r2, [pc, #96]	; (80096d8 <pvPortMalloc+0x190>)
 8009678:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800967a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800967c:	685a      	ldr	r2, [r3, #4]
 800967e:	4b13      	ldr	r3, [pc, #76]	; (80096cc <pvPortMalloc+0x184>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	431a      	orrs	r2, r3
 8009684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009686:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800968a:	2200      	movs	r2, #0
 800968c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800968e:	4b13      	ldr	r3, [pc, #76]	; (80096dc <pvPortMalloc+0x194>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	3301      	adds	r3, #1
 8009694:	4a11      	ldr	r2, [pc, #68]	; (80096dc <pvPortMalloc+0x194>)
 8009696:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009698:	f7fe fcfc 	bl	8008094 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800969c:	69fb      	ldr	r3, [r7, #28]
 800969e:	f003 0307 	and.w	r3, r3, #7
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d00a      	beq.n	80096bc <pvPortMalloc+0x174>
	__asm volatile
 80096a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096aa:	f383 8811 	msr	BASEPRI, r3
 80096ae:	f3bf 8f6f 	isb	sy
 80096b2:	f3bf 8f4f 	dsb	sy
 80096b6:	60fb      	str	r3, [r7, #12]
}
 80096b8:	bf00      	nop
 80096ba:	e7fe      	b.n	80096ba <pvPortMalloc+0x172>
	return pvReturn;
 80096bc:	69fb      	ldr	r3, [r7, #28]
}
 80096be:	4618      	mov	r0, r3
 80096c0:	3728      	adds	r7, #40	; 0x28
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}
 80096c6:	bf00      	nop
 80096c8:	20004be4 	.word	0x20004be4
 80096cc:	20004bf8 	.word	0x20004bf8
 80096d0:	20004be8 	.word	0x20004be8
 80096d4:	20004bdc 	.word	0x20004bdc
 80096d8:	20004bec 	.word	0x20004bec
 80096dc:	20004bf0 	.word	0x20004bf0

080096e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b086      	sub	sp, #24
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d04d      	beq.n	800978e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80096f2:	2308      	movs	r3, #8
 80096f4:	425b      	negs	r3, r3
 80096f6:	697a      	ldr	r2, [r7, #20]
 80096f8:	4413      	add	r3, r2
 80096fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80096fc:	697b      	ldr	r3, [r7, #20]
 80096fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009700:	693b      	ldr	r3, [r7, #16]
 8009702:	685a      	ldr	r2, [r3, #4]
 8009704:	4b24      	ldr	r3, [pc, #144]	; (8009798 <vPortFree+0xb8>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	4013      	ands	r3, r2
 800970a:	2b00      	cmp	r3, #0
 800970c:	d10a      	bne.n	8009724 <vPortFree+0x44>
	__asm volatile
 800970e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009712:	f383 8811 	msr	BASEPRI, r3
 8009716:	f3bf 8f6f 	isb	sy
 800971a:	f3bf 8f4f 	dsb	sy
 800971e:	60fb      	str	r3, [r7, #12]
}
 8009720:	bf00      	nop
 8009722:	e7fe      	b.n	8009722 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009724:	693b      	ldr	r3, [r7, #16]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d00a      	beq.n	8009742 <vPortFree+0x62>
	__asm volatile
 800972c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009730:	f383 8811 	msr	BASEPRI, r3
 8009734:	f3bf 8f6f 	isb	sy
 8009738:	f3bf 8f4f 	dsb	sy
 800973c:	60bb      	str	r3, [r7, #8]
}
 800973e:	bf00      	nop
 8009740:	e7fe      	b.n	8009740 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009742:	693b      	ldr	r3, [r7, #16]
 8009744:	685a      	ldr	r2, [r3, #4]
 8009746:	4b14      	ldr	r3, [pc, #80]	; (8009798 <vPortFree+0xb8>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	4013      	ands	r3, r2
 800974c:	2b00      	cmp	r3, #0
 800974e:	d01e      	beq.n	800978e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d11a      	bne.n	800978e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009758:	693b      	ldr	r3, [r7, #16]
 800975a:	685a      	ldr	r2, [r3, #4]
 800975c:	4b0e      	ldr	r3, [pc, #56]	; (8009798 <vPortFree+0xb8>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	43db      	mvns	r3, r3
 8009762:	401a      	ands	r2, r3
 8009764:	693b      	ldr	r3, [r7, #16]
 8009766:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009768:	f7fe fc86 	bl	8008078 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800976c:	693b      	ldr	r3, [r7, #16]
 800976e:	685a      	ldr	r2, [r3, #4]
 8009770:	4b0a      	ldr	r3, [pc, #40]	; (800979c <vPortFree+0xbc>)
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	4413      	add	r3, r2
 8009776:	4a09      	ldr	r2, [pc, #36]	; (800979c <vPortFree+0xbc>)
 8009778:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800977a:	6938      	ldr	r0, [r7, #16]
 800977c:	f000 f874 	bl	8009868 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009780:	4b07      	ldr	r3, [pc, #28]	; (80097a0 <vPortFree+0xc0>)
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	3301      	adds	r3, #1
 8009786:	4a06      	ldr	r2, [pc, #24]	; (80097a0 <vPortFree+0xc0>)
 8009788:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800978a:	f7fe fc83 	bl	8008094 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800978e:	bf00      	nop
 8009790:	3718      	adds	r7, #24
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}
 8009796:	bf00      	nop
 8009798:	20004bf8 	.word	0x20004bf8
 800979c:	20004be8 	.word	0x20004be8
 80097a0:	20004bf4 	.word	0x20004bf4

080097a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80097a4:	b480      	push	{r7}
 80097a6:	b085      	sub	sp, #20
 80097a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80097aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80097ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80097b0:	4b27      	ldr	r3, [pc, #156]	; (8009850 <prvHeapInit+0xac>)
 80097b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	f003 0307 	and.w	r3, r3, #7
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d00c      	beq.n	80097d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	3307      	adds	r3, #7
 80097c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	f023 0307 	bic.w	r3, r3, #7
 80097ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80097cc:	68ba      	ldr	r2, [r7, #8]
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	1ad3      	subs	r3, r2, r3
 80097d2:	4a1f      	ldr	r2, [pc, #124]	; (8009850 <prvHeapInit+0xac>)
 80097d4:	4413      	add	r3, r2
 80097d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80097dc:	4a1d      	ldr	r2, [pc, #116]	; (8009854 <prvHeapInit+0xb0>)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80097e2:	4b1c      	ldr	r3, [pc, #112]	; (8009854 <prvHeapInit+0xb0>)
 80097e4:	2200      	movs	r2, #0
 80097e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	68ba      	ldr	r2, [r7, #8]
 80097ec:	4413      	add	r3, r2
 80097ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80097f0:	2208      	movs	r2, #8
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	1a9b      	subs	r3, r3, r2
 80097f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	f023 0307 	bic.w	r3, r3, #7
 80097fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	4a15      	ldr	r2, [pc, #84]	; (8009858 <prvHeapInit+0xb4>)
 8009804:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009806:	4b14      	ldr	r3, [pc, #80]	; (8009858 <prvHeapInit+0xb4>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	2200      	movs	r2, #0
 800980c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800980e:	4b12      	ldr	r3, [pc, #72]	; (8009858 <prvHeapInit+0xb4>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	2200      	movs	r2, #0
 8009814:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	68fa      	ldr	r2, [r7, #12]
 800981e:	1ad2      	subs	r2, r2, r3
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009824:	4b0c      	ldr	r3, [pc, #48]	; (8009858 <prvHeapInit+0xb4>)
 8009826:	681a      	ldr	r2, [r3, #0]
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	685b      	ldr	r3, [r3, #4]
 8009830:	4a0a      	ldr	r2, [pc, #40]	; (800985c <prvHeapInit+0xb8>)
 8009832:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	685b      	ldr	r3, [r3, #4]
 8009838:	4a09      	ldr	r2, [pc, #36]	; (8009860 <prvHeapInit+0xbc>)
 800983a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800983c:	4b09      	ldr	r3, [pc, #36]	; (8009864 <prvHeapInit+0xc0>)
 800983e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009842:	601a      	str	r2, [r3, #0]
}
 8009844:	bf00      	nop
 8009846:	3714      	adds	r7, #20
 8009848:	46bd      	mov	sp, r7
 800984a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984e:	4770      	bx	lr
 8009850:	20000fdc 	.word	0x20000fdc
 8009854:	20004bdc 	.word	0x20004bdc
 8009858:	20004be4 	.word	0x20004be4
 800985c:	20004bec 	.word	0x20004bec
 8009860:	20004be8 	.word	0x20004be8
 8009864:	20004bf8 	.word	0x20004bf8

08009868 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009868:	b480      	push	{r7}
 800986a:	b085      	sub	sp, #20
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009870:	4b28      	ldr	r3, [pc, #160]	; (8009914 <prvInsertBlockIntoFreeList+0xac>)
 8009872:	60fb      	str	r3, [r7, #12]
 8009874:	e002      	b.n	800987c <prvInsertBlockIntoFreeList+0x14>
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	60fb      	str	r3, [r7, #12]
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	687a      	ldr	r2, [r7, #4]
 8009882:	429a      	cmp	r2, r3
 8009884:	d8f7      	bhi.n	8009876 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	685b      	ldr	r3, [r3, #4]
 800988e:	68ba      	ldr	r2, [r7, #8]
 8009890:	4413      	add	r3, r2
 8009892:	687a      	ldr	r2, [r7, #4]
 8009894:	429a      	cmp	r2, r3
 8009896:	d108      	bne.n	80098aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	685a      	ldr	r2, [r3, #4]
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	685b      	ldr	r3, [r3, #4]
 80098a0:	441a      	add	r2, r3
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	685b      	ldr	r3, [r3, #4]
 80098b2:	68ba      	ldr	r2, [r7, #8]
 80098b4:	441a      	add	r2, r3
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	429a      	cmp	r2, r3
 80098bc:	d118      	bne.n	80098f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	681a      	ldr	r2, [r3, #0]
 80098c2:	4b15      	ldr	r3, [pc, #84]	; (8009918 <prvInsertBlockIntoFreeList+0xb0>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	429a      	cmp	r2, r3
 80098c8:	d00d      	beq.n	80098e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	685a      	ldr	r2, [r3, #4]
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	685b      	ldr	r3, [r3, #4]
 80098d4:	441a      	add	r2, r3
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	681a      	ldr	r2, [r3, #0]
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	601a      	str	r2, [r3, #0]
 80098e4:	e008      	b.n	80098f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80098e6:	4b0c      	ldr	r3, [pc, #48]	; (8009918 <prvInsertBlockIntoFreeList+0xb0>)
 80098e8:	681a      	ldr	r2, [r3, #0]
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	601a      	str	r2, [r3, #0]
 80098ee:	e003      	b.n	80098f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	681a      	ldr	r2, [r3, #0]
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80098f8:	68fa      	ldr	r2, [r7, #12]
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	429a      	cmp	r2, r3
 80098fe:	d002      	beq.n	8009906 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	687a      	ldr	r2, [r7, #4]
 8009904:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009906:	bf00      	nop
 8009908:	3714      	adds	r7, #20
 800990a:	46bd      	mov	sp, r7
 800990c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009910:	4770      	bx	lr
 8009912:	bf00      	nop
 8009914:	20004bdc 	.word	0x20004bdc
 8009918:	20004be4 	.word	0x20004be4

0800991c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009920:	2200      	movs	r2, #0
 8009922:	4912      	ldr	r1, [pc, #72]	; (800996c <MX_USB_DEVICE_Init+0x50>)
 8009924:	4812      	ldr	r0, [pc, #72]	; (8009970 <MX_USB_DEVICE_Init+0x54>)
 8009926:	f7fb ff49 	bl	80057bc <USBD_Init>
 800992a:	4603      	mov	r3, r0
 800992c:	2b00      	cmp	r3, #0
 800992e:	d001      	beq.n	8009934 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009930:	f7f6 ff52 	bl	80007d8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009934:	490f      	ldr	r1, [pc, #60]	; (8009974 <MX_USB_DEVICE_Init+0x58>)
 8009936:	480e      	ldr	r0, [pc, #56]	; (8009970 <MX_USB_DEVICE_Init+0x54>)
 8009938:	f7fb ff70 	bl	800581c <USBD_RegisterClass>
 800993c:	4603      	mov	r3, r0
 800993e:	2b00      	cmp	r3, #0
 8009940:	d001      	beq.n	8009946 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009942:	f7f6 ff49 	bl	80007d8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009946:	490c      	ldr	r1, [pc, #48]	; (8009978 <MX_USB_DEVICE_Init+0x5c>)
 8009948:	4809      	ldr	r0, [pc, #36]	; (8009970 <MX_USB_DEVICE_Init+0x54>)
 800994a:	f7fb fe61 	bl	8005610 <USBD_CDC_RegisterInterface>
 800994e:	4603      	mov	r3, r0
 8009950:	2b00      	cmp	r3, #0
 8009952:	d001      	beq.n	8009958 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009954:	f7f6 ff40 	bl	80007d8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009958:	4805      	ldr	r0, [pc, #20]	; (8009970 <MX_USB_DEVICE_Init+0x54>)
 800995a:	f7fb ff95 	bl	8005888 <USBD_Start>
 800995e:	4603      	mov	r3, r0
 8009960:	2b00      	cmp	r3, #0
 8009962:	d001      	beq.n	8009968 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009964:	f7f6 ff38 	bl	80007d8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009968:	bf00      	nop
 800996a:	bd80      	pop	{r7, pc}
 800996c:	200000b0 	.word	0x200000b0
 8009970:	20004bfc 	.word	0x20004bfc
 8009974:	20000018 	.word	0x20000018
 8009978:	2000009c 	.word	0x2000009c

0800997c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009980:	2200      	movs	r2, #0
 8009982:	4905      	ldr	r1, [pc, #20]	; (8009998 <CDC_Init_FS+0x1c>)
 8009984:	4805      	ldr	r0, [pc, #20]	; (800999c <CDC_Init_FS+0x20>)
 8009986:	f7fb fe5d 	bl	8005644 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800998a:	4905      	ldr	r1, [pc, #20]	; (80099a0 <CDC_Init_FS+0x24>)
 800998c:	4803      	ldr	r0, [pc, #12]	; (800999c <CDC_Init_FS+0x20>)
 800998e:	f7fb fe7b 	bl	8005688 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009992:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009994:	4618      	mov	r0, r3
 8009996:	bd80      	pop	{r7, pc}
 8009998:	200056d8 	.word	0x200056d8
 800999c:	20004bfc 	.word	0x20004bfc
 80099a0:	20004ed8 	.word	0x20004ed8

080099a4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80099a4:	b480      	push	{r7}
 80099a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80099a8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	46bd      	mov	sp, r7
 80099ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b2:	4770      	bx	lr

080099b4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80099b4:	b480      	push	{r7}
 80099b6:	b083      	sub	sp, #12
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	4603      	mov	r3, r0
 80099bc:	6039      	str	r1, [r7, #0]
 80099be:	71fb      	strb	r3, [r7, #7]
 80099c0:	4613      	mov	r3, r2
 80099c2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80099c4:	79fb      	ldrb	r3, [r7, #7]
 80099c6:	2b23      	cmp	r3, #35	; 0x23
 80099c8:	d84a      	bhi.n	8009a60 <CDC_Control_FS+0xac>
 80099ca:	a201      	add	r2, pc, #4	; (adr r2, 80099d0 <CDC_Control_FS+0x1c>)
 80099cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099d0:	08009a61 	.word	0x08009a61
 80099d4:	08009a61 	.word	0x08009a61
 80099d8:	08009a61 	.word	0x08009a61
 80099dc:	08009a61 	.word	0x08009a61
 80099e0:	08009a61 	.word	0x08009a61
 80099e4:	08009a61 	.word	0x08009a61
 80099e8:	08009a61 	.word	0x08009a61
 80099ec:	08009a61 	.word	0x08009a61
 80099f0:	08009a61 	.word	0x08009a61
 80099f4:	08009a61 	.word	0x08009a61
 80099f8:	08009a61 	.word	0x08009a61
 80099fc:	08009a61 	.word	0x08009a61
 8009a00:	08009a61 	.word	0x08009a61
 8009a04:	08009a61 	.word	0x08009a61
 8009a08:	08009a61 	.word	0x08009a61
 8009a0c:	08009a61 	.word	0x08009a61
 8009a10:	08009a61 	.word	0x08009a61
 8009a14:	08009a61 	.word	0x08009a61
 8009a18:	08009a61 	.word	0x08009a61
 8009a1c:	08009a61 	.word	0x08009a61
 8009a20:	08009a61 	.word	0x08009a61
 8009a24:	08009a61 	.word	0x08009a61
 8009a28:	08009a61 	.word	0x08009a61
 8009a2c:	08009a61 	.word	0x08009a61
 8009a30:	08009a61 	.word	0x08009a61
 8009a34:	08009a61 	.word	0x08009a61
 8009a38:	08009a61 	.word	0x08009a61
 8009a3c:	08009a61 	.word	0x08009a61
 8009a40:	08009a61 	.word	0x08009a61
 8009a44:	08009a61 	.word	0x08009a61
 8009a48:	08009a61 	.word	0x08009a61
 8009a4c:	08009a61 	.word	0x08009a61
 8009a50:	08009a61 	.word	0x08009a61
 8009a54:	08009a61 	.word	0x08009a61
 8009a58:	08009a61 	.word	0x08009a61
 8009a5c:	08009a61 	.word	0x08009a61
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009a60:	bf00      	nop
  }

  return (USBD_OK);
 8009a62:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009a64:	4618      	mov	r0, r3
 8009a66:	370c      	adds	r7, #12
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6e:	4770      	bx	lr

08009a70 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b082      	sub	sp, #8
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
 8009a78:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009a7a:	6879      	ldr	r1, [r7, #4]
 8009a7c:	4805      	ldr	r0, [pc, #20]	; (8009a94 <CDC_Receive_FS+0x24>)
 8009a7e:	f7fb fe03 	bl	8005688 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009a82:	4804      	ldr	r0, [pc, #16]	; (8009a94 <CDC_Receive_FS+0x24>)
 8009a84:	f7fb fe64 	bl	8005750 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009a88:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	3708      	adds	r7, #8
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd80      	pop	{r7, pc}
 8009a92:	bf00      	nop
 8009a94:	20004bfc 	.word	0x20004bfc

08009a98 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b084      	sub	sp, #16
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
 8009aa0:	460b      	mov	r3, r1
 8009aa2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009aa8:	4b0d      	ldr	r3, [pc, #52]	; (8009ae0 <CDC_Transmit_FS+0x48>)
 8009aaa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009aae:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d001      	beq.n	8009abe <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009aba:	2301      	movs	r3, #1
 8009abc:	e00b      	b.n	8009ad6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009abe:	887b      	ldrh	r3, [r7, #2]
 8009ac0:	461a      	mov	r2, r3
 8009ac2:	6879      	ldr	r1, [r7, #4]
 8009ac4:	4806      	ldr	r0, [pc, #24]	; (8009ae0 <CDC_Transmit_FS+0x48>)
 8009ac6:	f7fb fdbd 	bl	8005644 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009aca:	4805      	ldr	r0, [pc, #20]	; (8009ae0 <CDC_Transmit_FS+0x48>)
 8009acc:	f7fb fdfa 	bl	80056c4 <USBD_CDC_TransmitPacket>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	3710      	adds	r7, #16
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}
 8009ade:	bf00      	nop
 8009ae0:	20004bfc 	.word	0x20004bfc

08009ae4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009ae4:	b480      	push	{r7}
 8009ae6:	b087      	sub	sp, #28
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	60f8      	str	r0, [r7, #12]
 8009aec:	60b9      	str	r1, [r7, #8]
 8009aee:	4613      	mov	r3, r2
 8009af0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009af2:	2300      	movs	r3, #0
 8009af4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009af6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009afa:	4618      	mov	r0, r3
 8009afc:	371c      	adds	r7, #28
 8009afe:	46bd      	mov	sp, r7
 8009b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b04:	4770      	bx	lr
	...

08009b08 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b08:	b480      	push	{r7}
 8009b0a:	b083      	sub	sp, #12
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	4603      	mov	r3, r0
 8009b10:	6039      	str	r1, [r7, #0]
 8009b12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	2212      	movs	r2, #18
 8009b18:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009b1a:	4b03      	ldr	r3, [pc, #12]	; (8009b28 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	370c      	adds	r7, #12
 8009b20:	46bd      	mov	sp, r7
 8009b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b26:	4770      	bx	lr
 8009b28:	200000cc 	.word	0x200000cc

08009b2c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	b083      	sub	sp, #12
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	4603      	mov	r3, r0
 8009b34:	6039      	str	r1, [r7, #0]
 8009b36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	2204      	movs	r2, #4
 8009b3c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009b3e:	4b03      	ldr	r3, [pc, #12]	; (8009b4c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009b40:	4618      	mov	r0, r3
 8009b42:	370c      	adds	r7, #12
 8009b44:	46bd      	mov	sp, r7
 8009b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4a:	4770      	bx	lr
 8009b4c:	200000e0 	.word	0x200000e0

08009b50 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b082      	sub	sp, #8
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	4603      	mov	r3, r0
 8009b58:	6039      	str	r1, [r7, #0]
 8009b5a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009b5c:	79fb      	ldrb	r3, [r7, #7]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d105      	bne.n	8009b6e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009b62:	683a      	ldr	r2, [r7, #0]
 8009b64:	4907      	ldr	r1, [pc, #28]	; (8009b84 <USBD_FS_ProductStrDescriptor+0x34>)
 8009b66:	4808      	ldr	r0, [pc, #32]	; (8009b88 <USBD_FS_ProductStrDescriptor+0x38>)
 8009b68:	f7fd f83a 	bl	8006be0 <USBD_GetString>
 8009b6c:	e004      	b.n	8009b78 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009b6e:	683a      	ldr	r2, [r7, #0]
 8009b70:	4904      	ldr	r1, [pc, #16]	; (8009b84 <USBD_FS_ProductStrDescriptor+0x34>)
 8009b72:	4805      	ldr	r0, [pc, #20]	; (8009b88 <USBD_FS_ProductStrDescriptor+0x38>)
 8009b74:	f7fd f834 	bl	8006be0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009b78:	4b02      	ldr	r3, [pc, #8]	; (8009b84 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	3708      	adds	r7, #8
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}
 8009b82:	bf00      	nop
 8009b84:	20005ed8 	.word	0x20005ed8
 8009b88:	0800a938 	.word	0x0800a938

08009b8c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b082      	sub	sp, #8
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	4603      	mov	r3, r0
 8009b94:	6039      	str	r1, [r7, #0]
 8009b96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009b98:	683a      	ldr	r2, [r7, #0]
 8009b9a:	4904      	ldr	r1, [pc, #16]	; (8009bac <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009b9c:	4804      	ldr	r0, [pc, #16]	; (8009bb0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009b9e:	f7fd f81f 	bl	8006be0 <USBD_GetString>
  return USBD_StrDesc;
 8009ba2:	4b02      	ldr	r3, [pc, #8]	; (8009bac <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3708      	adds	r7, #8
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}
 8009bac:	20005ed8 	.word	0x20005ed8
 8009bb0:	0800a944 	.word	0x0800a944

08009bb4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b082      	sub	sp, #8
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	4603      	mov	r3, r0
 8009bbc:	6039      	str	r1, [r7, #0]
 8009bbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	221a      	movs	r2, #26
 8009bc4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009bc6:	f000 f843 	bl	8009c50 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009bca:	4b02      	ldr	r3, [pc, #8]	; (8009bd4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	3708      	adds	r7, #8
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}
 8009bd4:	200000e4 	.word	0x200000e4

08009bd8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b082      	sub	sp, #8
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	4603      	mov	r3, r0
 8009be0:	6039      	str	r1, [r7, #0]
 8009be2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009be4:	79fb      	ldrb	r3, [r7, #7]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d105      	bne.n	8009bf6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009bea:	683a      	ldr	r2, [r7, #0]
 8009bec:	4907      	ldr	r1, [pc, #28]	; (8009c0c <USBD_FS_ConfigStrDescriptor+0x34>)
 8009bee:	4808      	ldr	r0, [pc, #32]	; (8009c10 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009bf0:	f7fc fff6 	bl	8006be0 <USBD_GetString>
 8009bf4:	e004      	b.n	8009c00 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009bf6:	683a      	ldr	r2, [r7, #0]
 8009bf8:	4904      	ldr	r1, [pc, #16]	; (8009c0c <USBD_FS_ConfigStrDescriptor+0x34>)
 8009bfa:	4805      	ldr	r0, [pc, #20]	; (8009c10 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009bfc:	f7fc fff0 	bl	8006be0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009c00:	4b02      	ldr	r3, [pc, #8]	; (8009c0c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	3708      	adds	r7, #8
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}
 8009c0a:	bf00      	nop
 8009c0c:	20005ed8 	.word	0x20005ed8
 8009c10:	0800a958 	.word	0x0800a958

08009c14 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b082      	sub	sp, #8
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	6039      	str	r1, [r7, #0]
 8009c1e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009c20:	79fb      	ldrb	r3, [r7, #7]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d105      	bne.n	8009c32 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009c26:	683a      	ldr	r2, [r7, #0]
 8009c28:	4907      	ldr	r1, [pc, #28]	; (8009c48 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009c2a:	4808      	ldr	r0, [pc, #32]	; (8009c4c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009c2c:	f7fc ffd8 	bl	8006be0 <USBD_GetString>
 8009c30:	e004      	b.n	8009c3c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009c32:	683a      	ldr	r2, [r7, #0]
 8009c34:	4904      	ldr	r1, [pc, #16]	; (8009c48 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009c36:	4805      	ldr	r0, [pc, #20]	; (8009c4c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009c38:	f7fc ffd2 	bl	8006be0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009c3c:	4b02      	ldr	r3, [pc, #8]	; (8009c48 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	3708      	adds	r7, #8
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}
 8009c46:	bf00      	nop
 8009c48:	20005ed8 	.word	0x20005ed8
 8009c4c:	0800a964 	.word	0x0800a964

08009c50 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b084      	sub	sp, #16
 8009c54:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009c56:	4b0f      	ldr	r3, [pc, #60]	; (8009c94 <Get_SerialNum+0x44>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009c5c:	4b0e      	ldr	r3, [pc, #56]	; (8009c98 <Get_SerialNum+0x48>)
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009c62:	4b0e      	ldr	r3, [pc, #56]	; (8009c9c <Get_SerialNum+0x4c>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009c68:	68fa      	ldr	r2, [r7, #12]
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	4413      	add	r3, r2
 8009c6e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d009      	beq.n	8009c8a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009c76:	2208      	movs	r2, #8
 8009c78:	4909      	ldr	r1, [pc, #36]	; (8009ca0 <Get_SerialNum+0x50>)
 8009c7a:	68f8      	ldr	r0, [r7, #12]
 8009c7c:	f000 f814 	bl	8009ca8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009c80:	2204      	movs	r2, #4
 8009c82:	4908      	ldr	r1, [pc, #32]	; (8009ca4 <Get_SerialNum+0x54>)
 8009c84:	68b8      	ldr	r0, [r7, #8]
 8009c86:	f000 f80f 	bl	8009ca8 <IntToUnicode>
  }
}
 8009c8a:	bf00      	nop
 8009c8c:	3710      	adds	r7, #16
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}
 8009c92:	bf00      	nop
 8009c94:	1fff7a10 	.word	0x1fff7a10
 8009c98:	1fff7a14 	.word	0x1fff7a14
 8009c9c:	1fff7a18 	.word	0x1fff7a18
 8009ca0:	200000e6 	.word	0x200000e6
 8009ca4:	200000f6 	.word	0x200000f6

08009ca8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009ca8:	b480      	push	{r7}
 8009caa:	b087      	sub	sp, #28
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	60f8      	str	r0, [r7, #12]
 8009cb0:	60b9      	str	r1, [r7, #8]
 8009cb2:	4613      	mov	r3, r2
 8009cb4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009cba:	2300      	movs	r3, #0
 8009cbc:	75fb      	strb	r3, [r7, #23]
 8009cbe:	e027      	b.n	8009d10 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	0f1b      	lsrs	r3, r3, #28
 8009cc4:	2b09      	cmp	r3, #9
 8009cc6:	d80b      	bhi.n	8009ce0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	0f1b      	lsrs	r3, r3, #28
 8009ccc:	b2da      	uxtb	r2, r3
 8009cce:	7dfb      	ldrb	r3, [r7, #23]
 8009cd0:	005b      	lsls	r3, r3, #1
 8009cd2:	4619      	mov	r1, r3
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	440b      	add	r3, r1
 8009cd8:	3230      	adds	r2, #48	; 0x30
 8009cda:	b2d2      	uxtb	r2, r2
 8009cdc:	701a      	strb	r2, [r3, #0]
 8009cde:	e00a      	b.n	8009cf6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	0f1b      	lsrs	r3, r3, #28
 8009ce4:	b2da      	uxtb	r2, r3
 8009ce6:	7dfb      	ldrb	r3, [r7, #23]
 8009ce8:	005b      	lsls	r3, r3, #1
 8009cea:	4619      	mov	r1, r3
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	440b      	add	r3, r1
 8009cf0:	3237      	adds	r2, #55	; 0x37
 8009cf2:	b2d2      	uxtb	r2, r2
 8009cf4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	011b      	lsls	r3, r3, #4
 8009cfa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009cfc:	7dfb      	ldrb	r3, [r7, #23]
 8009cfe:	005b      	lsls	r3, r3, #1
 8009d00:	3301      	adds	r3, #1
 8009d02:	68ba      	ldr	r2, [r7, #8]
 8009d04:	4413      	add	r3, r2
 8009d06:	2200      	movs	r2, #0
 8009d08:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009d0a:	7dfb      	ldrb	r3, [r7, #23]
 8009d0c:	3301      	adds	r3, #1
 8009d0e:	75fb      	strb	r3, [r7, #23]
 8009d10:	7dfa      	ldrb	r2, [r7, #23]
 8009d12:	79fb      	ldrb	r3, [r7, #7]
 8009d14:	429a      	cmp	r2, r3
 8009d16:	d3d3      	bcc.n	8009cc0 <IntToUnicode+0x18>
  }
}
 8009d18:	bf00      	nop
 8009d1a:	bf00      	nop
 8009d1c:	371c      	adds	r7, #28
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d24:	4770      	bx	lr
	...

08009d28 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b08a      	sub	sp, #40	; 0x28
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009d30:	f107 0314 	add.w	r3, r7, #20
 8009d34:	2200      	movs	r2, #0
 8009d36:	601a      	str	r2, [r3, #0]
 8009d38:	605a      	str	r2, [r3, #4]
 8009d3a:	609a      	str	r2, [r3, #8]
 8009d3c:	60da      	str	r2, [r3, #12]
 8009d3e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009d48:	d13a      	bne.n	8009dc0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	613b      	str	r3, [r7, #16]
 8009d4e:	4b1e      	ldr	r3, [pc, #120]	; (8009dc8 <HAL_PCD_MspInit+0xa0>)
 8009d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d52:	4a1d      	ldr	r2, [pc, #116]	; (8009dc8 <HAL_PCD_MspInit+0xa0>)
 8009d54:	f043 0301 	orr.w	r3, r3, #1
 8009d58:	6313      	str	r3, [r2, #48]	; 0x30
 8009d5a:	4b1b      	ldr	r3, [pc, #108]	; (8009dc8 <HAL_PCD_MspInit+0xa0>)
 8009d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d5e:	f003 0301 	and.w	r3, r3, #1
 8009d62:	613b      	str	r3, [r7, #16]
 8009d64:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009d66:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009d6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009d6c:	2302      	movs	r3, #2
 8009d6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d70:	2300      	movs	r3, #0
 8009d72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009d74:	2303      	movs	r3, #3
 8009d76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009d78:	230a      	movs	r3, #10
 8009d7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009d7c:	f107 0314 	add.w	r3, r7, #20
 8009d80:	4619      	mov	r1, r3
 8009d82:	4812      	ldr	r0, [pc, #72]	; (8009dcc <HAL_PCD_MspInit+0xa4>)
 8009d84:	f7f7 f846 	bl	8000e14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009d88:	4b0f      	ldr	r3, [pc, #60]	; (8009dc8 <HAL_PCD_MspInit+0xa0>)
 8009d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d8c:	4a0e      	ldr	r2, [pc, #56]	; (8009dc8 <HAL_PCD_MspInit+0xa0>)
 8009d8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d92:	6353      	str	r3, [r2, #52]	; 0x34
 8009d94:	2300      	movs	r3, #0
 8009d96:	60fb      	str	r3, [r7, #12]
 8009d98:	4b0b      	ldr	r3, [pc, #44]	; (8009dc8 <HAL_PCD_MspInit+0xa0>)
 8009d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d9c:	4a0a      	ldr	r2, [pc, #40]	; (8009dc8 <HAL_PCD_MspInit+0xa0>)
 8009d9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009da2:	6453      	str	r3, [r2, #68]	; 0x44
 8009da4:	4b08      	ldr	r3, [pc, #32]	; (8009dc8 <HAL_PCD_MspInit+0xa0>)
 8009da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009da8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009dac:	60fb      	str	r3, [r7, #12]
 8009dae:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8009db0:	2200      	movs	r2, #0
 8009db2:	2105      	movs	r1, #5
 8009db4:	2043      	movs	r0, #67	; 0x43
 8009db6:	f7f7 f803 	bl	8000dc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009dba:	2043      	movs	r0, #67	; 0x43
 8009dbc:	f7f7 f81c 	bl	8000df8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009dc0:	bf00      	nop
 8009dc2:	3728      	adds	r7, #40	; 0x28
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}
 8009dc8:	40023800 	.word	0x40023800
 8009dcc:	40020000 	.word	0x40020000

08009dd0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b082      	sub	sp, #8
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009de4:	4619      	mov	r1, r3
 8009de6:	4610      	mov	r0, r2
 8009de8:	f7fb fd9b 	bl	8005922 <USBD_LL_SetupStage>
}
 8009dec:	bf00      	nop
 8009dee:	3708      	adds	r7, #8
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}

08009df4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b082      	sub	sp, #8
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
 8009dfc:	460b      	mov	r3, r1
 8009dfe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009e06:	78fa      	ldrb	r2, [r7, #3]
 8009e08:	6879      	ldr	r1, [r7, #4]
 8009e0a:	4613      	mov	r3, r2
 8009e0c:	00db      	lsls	r3, r3, #3
 8009e0e:	4413      	add	r3, r2
 8009e10:	009b      	lsls	r3, r3, #2
 8009e12:	440b      	add	r3, r1
 8009e14:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009e18:	681a      	ldr	r2, [r3, #0]
 8009e1a:	78fb      	ldrb	r3, [r7, #3]
 8009e1c:	4619      	mov	r1, r3
 8009e1e:	f7fb fdd5 	bl	80059cc <USBD_LL_DataOutStage>
}
 8009e22:	bf00      	nop
 8009e24:	3708      	adds	r7, #8
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bd80      	pop	{r7, pc}

08009e2a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e2a:	b580      	push	{r7, lr}
 8009e2c:	b082      	sub	sp, #8
 8009e2e:	af00      	add	r7, sp, #0
 8009e30:	6078      	str	r0, [r7, #4]
 8009e32:	460b      	mov	r3, r1
 8009e34:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009e3c:	78fa      	ldrb	r2, [r7, #3]
 8009e3e:	6879      	ldr	r1, [r7, #4]
 8009e40:	4613      	mov	r3, r2
 8009e42:	00db      	lsls	r3, r3, #3
 8009e44:	4413      	add	r3, r2
 8009e46:	009b      	lsls	r3, r3, #2
 8009e48:	440b      	add	r3, r1
 8009e4a:	334c      	adds	r3, #76	; 0x4c
 8009e4c:	681a      	ldr	r2, [r3, #0]
 8009e4e:	78fb      	ldrb	r3, [r7, #3]
 8009e50:	4619      	mov	r1, r3
 8009e52:	f7fb fe6e 	bl	8005b32 <USBD_LL_DataInStage>
}
 8009e56:	bf00      	nop
 8009e58:	3708      	adds	r7, #8
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}

08009e5e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e5e:	b580      	push	{r7, lr}
 8009e60:	b082      	sub	sp, #8
 8009e62:	af00      	add	r7, sp, #0
 8009e64:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f7fb ffa2 	bl	8005db6 <USBD_LL_SOF>
}
 8009e72:	bf00      	nop
 8009e74:	3708      	adds	r7, #8
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}

08009e7a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e7a:	b580      	push	{r7, lr}
 8009e7c:	b084      	sub	sp, #16
 8009e7e:	af00      	add	r7, sp, #0
 8009e80:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009e82:	2301      	movs	r3, #1
 8009e84:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	68db      	ldr	r3, [r3, #12]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d102      	bne.n	8009e94 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009e8e:	2300      	movs	r3, #0
 8009e90:	73fb      	strb	r3, [r7, #15]
 8009e92:	e008      	b.n	8009ea6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	68db      	ldr	r3, [r3, #12]
 8009e98:	2b02      	cmp	r3, #2
 8009e9a:	d102      	bne.n	8009ea2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	73fb      	strb	r3, [r7, #15]
 8009ea0:	e001      	b.n	8009ea6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009ea2:	f7f6 fc99 	bl	80007d8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009eac:	7bfa      	ldrb	r2, [r7, #15]
 8009eae:	4611      	mov	r1, r2
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	f7fb ff42 	bl	8005d3a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	f7fb feea 	bl	8005c96 <USBD_LL_Reset>
}
 8009ec2:	bf00      	nop
 8009ec4:	3710      	adds	r7, #16
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}
	...

08009ecc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b082      	sub	sp, #8
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009eda:	4618      	mov	r0, r3
 8009edc:	f7fb ff3d 	bl	8005d5a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	687a      	ldr	r2, [r7, #4]
 8009eec:	6812      	ldr	r2, [r2, #0]
 8009eee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009ef2:	f043 0301 	orr.w	r3, r3, #1
 8009ef6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	6a1b      	ldr	r3, [r3, #32]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d005      	beq.n	8009f0c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009f00:	4b04      	ldr	r3, [pc, #16]	; (8009f14 <HAL_PCD_SuspendCallback+0x48>)
 8009f02:	691b      	ldr	r3, [r3, #16]
 8009f04:	4a03      	ldr	r2, [pc, #12]	; (8009f14 <HAL_PCD_SuspendCallback+0x48>)
 8009f06:	f043 0306 	orr.w	r3, r3, #6
 8009f0a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009f0c:	bf00      	nop
 8009f0e:	3708      	adds	r7, #8
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}
 8009f14:	e000ed00 	.word	0xe000ed00

08009f18 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b082      	sub	sp, #8
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009f26:	4618      	mov	r0, r3
 8009f28:	f7fb ff2d 	bl	8005d86 <USBD_LL_Resume>
}
 8009f2c:	bf00      	nop
 8009f2e:	3708      	adds	r7, #8
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bd80      	pop	{r7, pc}

08009f34 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b082      	sub	sp, #8
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
 8009f3c:	460b      	mov	r3, r1
 8009f3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009f46:	78fa      	ldrb	r2, [r7, #3]
 8009f48:	4611      	mov	r1, r2
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f7fb ff85 	bl	8005e5a <USBD_LL_IsoOUTIncomplete>
}
 8009f50:	bf00      	nop
 8009f52:	3708      	adds	r7, #8
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bd80      	pop	{r7, pc}

08009f58 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b082      	sub	sp, #8
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
 8009f60:	460b      	mov	r3, r1
 8009f62:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009f6a:	78fa      	ldrb	r2, [r7, #3]
 8009f6c:	4611      	mov	r1, r2
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f7fb ff41 	bl	8005df6 <USBD_LL_IsoINIncomplete>
}
 8009f74:	bf00      	nop
 8009f76:	3708      	adds	r7, #8
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	bd80      	pop	{r7, pc}

08009f7c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b082      	sub	sp, #8
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f7fb ff97 	bl	8005ebe <USBD_LL_DevConnected>
}
 8009f90:	bf00      	nop
 8009f92:	3708      	adds	r7, #8
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}

08009f98 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b082      	sub	sp, #8
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	f7fb ff94 	bl	8005ed4 <USBD_LL_DevDisconnected>
}
 8009fac:	bf00      	nop
 8009fae:	3708      	adds	r7, #8
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}

08009fb4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b082      	sub	sp, #8
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	781b      	ldrb	r3, [r3, #0]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d13c      	bne.n	800a03e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009fc4:	4a20      	ldr	r2, [pc, #128]	; (800a048 <USBD_LL_Init+0x94>)
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	4a1e      	ldr	r2, [pc, #120]	; (800a048 <USBD_LL_Init+0x94>)
 8009fd0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009fd4:	4b1c      	ldr	r3, [pc, #112]	; (800a048 <USBD_LL_Init+0x94>)
 8009fd6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009fda:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009fdc:	4b1a      	ldr	r3, [pc, #104]	; (800a048 <USBD_LL_Init+0x94>)
 8009fde:	2204      	movs	r2, #4
 8009fe0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009fe2:	4b19      	ldr	r3, [pc, #100]	; (800a048 <USBD_LL_Init+0x94>)
 8009fe4:	2202      	movs	r2, #2
 8009fe6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009fe8:	4b17      	ldr	r3, [pc, #92]	; (800a048 <USBD_LL_Init+0x94>)
 8009fea:	2200      	movs	r2, #0
 8009fec:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009fee:	4b16      	ldr	r3, [pc, #88]	; (800a048 <USBD_LL_Init+0x94>)
 8009ff0:	2202      	movs	r2, #2
 8009ff2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009ff4:	4b14      	ldr	r3, [pc, #80]	; (800a048 <USBD_LL_Init+0x94>)
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009ffa:	4b13      	ldr	r3, [pc, #76]	; (800a048 <USBD_LL_Init+0x94>)
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a000:	4b11      	ldr	r3, [pc, #68]	; (800a048 <USBD_LL_Init+0x94>)
 800a002:	2200      	movs	r2, #0
 800a004:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a006:	4b10      	ldr	r3, [pc, #64]	; (800a048 <USBD_LL_Init+0x94>)
 800a008:	2200      	movs	r2, #0
 800a00a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a00c:	4b0e      	ldr	r3, [pc, #56]	; (800a048 <USBD_LL_Init+0x94>)
 800a00e:	2200      	movs	r2, #0
 800a010:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a012:	480d      	ldr	r0, [pc, #52]	; (800a048 <USBD_LL_Init+0x94>)
 800a014:	f7f7 f8cd 	bl	80011b2 <HAL_PCD_Init>
 800a018:	4603      	mov	r3, r0
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d001      	beq.n	800a022 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a01e:	f7f6 fbdb 	bl	80007d8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a022:	2180      	movs	r1, #128	; 0x80
 800a024:	4808      	ldr	r0, [pc, #32]	; (800a048 <USBD_LL_Init+0x94>)
 800a026:	f7f8 fb24 	bl	8002672 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a02a:	2240      	movs	r2, #64	; 0x40
 800a02c:	2100      	movs	r1, #0
 800a02e:	4806      	ldr	r0, [pc, #24]	; (800a048 <USBD_LL_Init+0x94>)
 800a030:	f7f8 fad8 	bl	80025e4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a034:	2280      	movs	r2, #128	; 0x80
 800a036:	2101      	movs	r1, #1
 800a038:	4803      	ldr	r0, [pc, #12]	; (800a048 <USBD_LL_Init+0x94>)
 800a03a:	f7f8 fad3 	bl	80025e4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a03e:	2300      	movs	r3, #0
}
 800a040:	4618      	mov	r0, r3
 800a042:	3708      	adds	r7, #8
 800a044:	46bd      	mov	sp, r7
 800a046:	bd80      	pop	{r7, pc}
 800a048:	200060d8 	.word	0x200060d8

0800a04c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b084      	sub	sp, #16
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a054:	2300      	movs	r3, #0
 800a056:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a058:	2300      	movs	r3, #0
 800a05a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a062:	4618      	mov	r0, r3
 800a064:	f7f7 f9c2 	bl	80013ec <HAL_PCD_Start>
 800a068:	4603      	mov	r3, r0
 800a06a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a06c:	7bfb      	ldrb	r3, [r7, #15]
 800a06e:	4618      	mov	r0, r3
 800a070:	f000 f942 	bl	800a2f8 <USBD_Get_USB_Status>
 800a074:	4603      	mov	r3, r0
 800a076:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a078:	7bbb      	ldrb	r3, [r7, #14]
}
 800a07a:	4618      	mov	r0, r3
 800a07c:	3710      	adds	r7, #16
 800a07e:	46bd      	mov	sp, r7
 800a080:	bd80      	pop	{r7, pc}

0800a082 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a082:	b580      	push	{r7, lr}
 800a084:	b084      	sub	sp, #16
 800a086:	af00      	add	r7, sp, #0
 800a088:	6078      	str	r0, [r7, #4]
 800a08a:	4608      	mov	r0, r1
 800a08c:	4611      	mov	r1, r2
 800a08e:	461a      	mov	r2, r3
 800a090:	4603      	mov	r3, r0
 800a092:	70fb      	strb	r3, [r7, #3]
 800a094:	460b      	mov	r3, r1
 800a096:	70bb      	strb	r3, [r7, #2]
 800a098:	4613      	mov	r3, r2
 800a09a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a09c:	2300      	movs	r3, #0
 800a09e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a0aa:	78bb      	ldrb	r3, [r7, #2]
 800a0ac:	883a      	ldrh	r2, [r7, #0]
 800a0ae:	78f9      	ldrb	r1, [r7, #3]
 800a0b0:	f7f7 fe93 	bl	8001dda <HAL_PCD_EP_Open>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0b8:	7bfb      	ldrb	r3, [r7, #15]
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f000 f91c 	bl	800a2f8 <USBD_Get_USB_Status>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0c4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	3710      	adds	r7, #16
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bd80      	pop	{r7, pc}

0800a0ce <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a0ce:	b580      	push	{r7, lr}
 800a0d0:	b084      	sub	sp, #16
 800a0d2:	af00      	add	r7, sp, #0
 800a0d4:	6078      	str	r0, [r7, #4]
 800a0d6:	460b      	mov	r3, r1
 800a0d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a0e8:	78fa      	ldrb	r2, [r7, #3]
 800a0ea:	4611      	mov	r1, r2
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	f7f7 fedc 	bl	8001eaa <HAL_PCD_EP_Close>
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0f6:	7bfb      	ldrb	r3, [r7, #15]
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	f000 f8fd 	bl	800a2f8 <USBD_Get_USB_Status>
 800a0fe:	4603      	mov	r3, r0
 800a100:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a102:	7bbb      	ldrb	r3, [r7, #14]
}
 800a104:	4618      	mov	r0, r3
 800a106:	3710      	adds	r7, #16
 800a108:	46bd      	mov	sp, r7
 800a10a:	bd80      	pop	{r7, pc}

0800a10c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b084      	sub	sp, #16
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
 800a114:	460b      	mov	r3, r1
 800a116:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a118:	2300      	movs	r3, #0
 800a11a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a11c:	2300      	movs	r3, #0
 800a11e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a126:	78fa      	ldrb	r2, [r7, #3]
 800a128:	4611      	mov	r1, r2
 800a12a:	4618      	mov	r0, r3
 800a12c:	f7f7 ffb4 	bl	8002098 <HAL_PCD_EP_SetStall>
 800a130:	4603      	mov	r3, r0
 800a132:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a134:	7bfb      	ldrb	r3, [r7, #15]
 800a136:	4618      	mov	r0, r3
 800a138:	f000 f8de 	bl	800a2f8 <USBD_Get_USB_Status>
 800a13c:	4603      	mov	r3, r0
 800a13e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a140:	7bbb      	ldrb	r3, [r7, #14]
}
 800a142:	4618      	mov	r0, r3
 800a144:	3710      	adds	r7, #16
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}

0800a14a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a14a:	b580      	push	{r7, lr}
 800a14c:	b084      	sub	sp, #16
 800a14e:	af00      	add	r7, sp, #0
 800a150:	6078      	str	r0, [r7, #4]
 800a152:	460b      	mov	r3, r1
 800a154:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a156:	2300      	movs	r3, #0
 800a158:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a15a:	2300      	movs	r3, #0
 800a15c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a164:	78fa      	ldrb	r2, [r7, #3]
 800a166:	4611      	mov	r1, r2
 800a168:	4618      	mov	r0, r3
 800a16a:	f7f7 fff9 	bl	8002160 <HAL_PCD_EP_ClrStall>
 800a16e:	4603      	mov	r3, r0
 800a170:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a172:	7bfb      	ldrb	r3, [r7, #15]
 800a174:	4618      	mov	r0, r3
 800a176:	f000 f8bf 	bl	800a2f8 <USBD_Get_USB_Status>
 800a17a:	4603      	mov	r3, r0
 800a17c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a17e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a180:	4618      	mov	r0, r3
 800a182:	3710      	adds	r7, #16
 800a184:	46bd      	mov	sp, r7
 800a186:	bd80      	pop	{r7, pc}

0800a188 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a188:	b480      	push	{r7}
 800a18a:	b085      	sub	sp, #20
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
 800a190:	460b      	mov	r3, r1
 800a192:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a19a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a19c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	da0b      	bge.n	800a1bc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a1a4:	78fb      	ldrb	r3, [r7, #3]
 800a1a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a1aa:	68f9      	ldr	r1, [r7, #12]
 800a1ac:	4613      	mov	r3, r2
 800a1ae:	00db      	lsls	r3, r3, #3
 800a1b0:	4413      	add	r3, r2
 800a1b2:	009b      	lsls	r3, r3, #2
 800a1b4:	440b      	add	r3, r1
 800a1b6:	333e      	adds	r3, #62	; 0x3e
 800a1b8:	781b      	ldrb	r3, [r3, #0]
 800a1ba:	e00b      	b.n	800a1d4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a1bc:	78fb      	ldrb	r3, [r7, #3]
 800a1be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a1c2:	68f9      	ldr	r1, [r7, #12]
 800a1c4:	4613      	mov	r3, r2
 800a1c6:	00db      	lsls	r3, r3, #3
 800a1c8:	4413      	add	r3, r2
 800a1ca:	009b      	lsls	r3, r3, #2
 800a1cc:	440b      	add	r3, r1
 800a1ce:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800a1d2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	3714      	adds	r7, #20
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1de:	4770      	bx	lr

0800a1e0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b084      	sub	sp, #16
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
 800a1e8:	460b      	mov	r3, r1
 800a1ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a1fa:	78fa      	ldrb	r2, [r7, #3]
 800a1fc:	4611      	mov	r1, r2
 800a1fe:	4618      	mov	r0, r3
 800a200:	f7f7 fdc6 	bl	8001d90 <HAL_PCD_SetAddress>
 800a204:	4603      	mov	r3, r0
 800a206:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a208:	7bfb      	ldrb	r3, [r7, #15]
 800a20a:	4618      	mov	r0, r3
 800a20c:	f000 f874 	bl	800a2f8 <USBD_Get_USB_Status>
 800a210:	4603      	mov	r3, r0
 800a212:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a214:	7bbb      	ldrb	r3, [r7, #14]
}
 800a216:	4618      	mov	r0, r3
 800a218:	3710      	adds	r7, #16
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}

0800a21e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a21e:	b580      	push	{r7, lr}
 800a220:	b086      	sub	sp, #24
 800a222:	af00      	add	r7, sp, #0
 800a224:	60f8      	str	r0, [r7, #12]
 800a226:	607a      	str	r2, [r7, #4]
 800a228:	603b      	str	r3, [r7, #0]
 800a22a:	460b      	mov	r3, r1
 800a22c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a22e:	2300      	movs	r3, #0
 800a230:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a232:	2300      	movs	r3, #0
 800a234:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a23c:	7af9      	ldrb	r1, [r7, #11]
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	687a      	ldr	r2, [r7, #4]
 800a242:	f7f7 fedf 	bl	8002004 <HAL_PCD_EP_Transmit>
 800a246:	4603      	mov	r3, r0
 800a248:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a24a:	7dfb      	ldrb	r3, [r7, #23]
 800a24c:	4618      	mov	r0, r3
 800a24e:	f000 f853 	bl	800a2f8 <USBD_Get_USB_Status>
 800a252:	4603      	mov	r3, r0
 800a254:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a256:	7dbb      	ldrb	r3, [r7, #22]
}
 800a258:	4618      	mov	r0, r3
 800a25a:	3718      	adds	r7, #24
 800a25c:	46bd      	mov	sp, r7
 800a25e:	bd80      	pop	{r7, pc}

0800a260 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b086      	sub	sp, #24
 800a264:	af00      	add	r7, sp, #0
 800a266:	60f8      	str	r0, [r7, #12]
 800a268:	607a      	str	r2, [r7, #4]
 800a26a:	603b      	str	r3, [r7, #0]
 800a26c:	460b      	mov	r3, r1
 800a26e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a270:	2300      	movs	r3, #0
 800a272:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a274:	2300      	movs	r3, #0
 800a276:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a27e:	7af9      	ldrb	r1, [r7, #11]
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	687a      	ldr	r2, [r7, #4]
 800a284:	f7f7 fe5b 	bl	8001f3e <HAL_PCD_EP_Receive>
 800a288:	4603      	mov	r3, r0
 800a28a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a28c:	7dfb      	ldrb	r3, [r7, #23]
 800a28e:	4618      	mov	r0, r3
 800a290:	f000 f832 	bl	800a2f8 <USBD_Get_USB_Status>
 800a294:	4603      	mov	r3, r0
 800a296:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a298:	7dbb      	ldrb	r3, [r7, #22]
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	3718      	adds	r7, #24
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}

0800a2a2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2a2:	b580      	push	{r7, lr}
 800a2a4:	b082      	sub	sp, #8
 800a2a6:	af00      	add	r7, sp, #0
 800a2a8:	6078      	str	r0, [r7, #4]
 800a2aa:	460b      	mov	r3, r1
 800a2ac:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a2b4:	78fa      	ldrb	r2, [r7, #3]
 800a2b6:	4611      	mov	r1, r2
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	f7f7 fe8b 	bl	8001fd4 <HAL_PCD_EP_GetRxCount>
 800a2be:	4603      	mov	r3, r0
}
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	3708      	adds	r7, #8
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd80      	pop	{r7, pc}

0800a2c8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	b083      	sub	sp, #12
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a2d0:	4b03      	ldr	r3, [pc, #12]	; (800a2e0 <USBD_static_malloc+0x18>)
}
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	370c      	adds	r7, #12
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2dc:	4770      	bx	lr
 800a2de:	bf00      	nop
 800a2e0:	200065e4 	.word	0x200065e4

0800a2e4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	b083      	sub	sp, #12
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]

}
 800a2ec:	bf00      	nop
 800a2ee:	370c      	adds	r7, #12
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f6:	4770      	bx	lr

0800a2f8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	b085      	sub	sp, #20
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	4603      	mov	r3, r0
 800a300:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a302:	2300      	movs	r3, #0
 800a304:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a306:	79fb      	ldrb	r3, [r7, #7]
 800a308:	2b03      	cmp	r3, #3
 800a30a:	d817      	bhi.n	800a33c <USBD_Get_USB_Status+0x44>
 800a30c:	a201      	add	r2, pc, #4	; (adr r2, 800a314 <USBD_Get_USB_Status+0x1c>)
 800a30e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a312:	bf00      	nop
 800a314:	0800a325 	.word	0x0800a325
 800a318:	0800a32b 	.word	0x0800a32b
 800a31c:	0800a331 	.word	0x0800a331
 800a320:	0800a337 	.word	0x0800a337
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a324:	2300      	movs	r3, #0
 800a326:	73fb      	strb	r3, [r7, #15]
    break;
 800a328:	e00b      	b.n	800a342 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a32a:	2303      	movs	r3, #3
 800a32c:	73fb      	strb	r3, [r7, #15]
    break;
 800a32e:	e008      	b.n	800a342 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a330:	2301      	movs	r3, #1
 800a332:	73fb      	strb	r3, [r7, #15]
    break;
 800a334:	e005      	b.n	800a342 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a336:	2303      	movs	r3, #3
 800a338:	73fb      	strb	r3, [r7, #15]
    break;
 800a33a:	e002      	b.n	800a342 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a33c:	2303      	movs	r3, #3
 800a33e:	73fb      	strb	r3, [r7, #15]
    break;
 800a340:	bf00      	nop
  }
  return usb_status;
 800a342:	7bfb      	ldrb	r3, [r7, #15]
}
 800a344:	4618      	mov	r0, r3
 800a346:	3714      	adds	r7, #20
 800a348:	46bd      	mov	sp, r7
 800a34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34e:	4770      	bx	lr

0800a350 <_ZNSaIcEC1Ev>:
 800a350:	4770      	bx	lr

0800a352 <_ZNSaIcED1Ev>:
 800a352:	4770      	bx	lr

0800a354 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 800a354:	b10a      	cbz	r2, 800a35a <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 800a356:	f000 b8e9 	b.w	800a52c <memcpy>
 800a35a:	4770      	bx	lr

0800a35c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 800a35c:	b508      	push	{r3, lr}
 800a35e:	680b      	ldr	r3, [r1, #0]
 800a360:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a364:	d302      	bcc.n	800a36c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 800a366:	480d      	ldr	r0, [pc, #52]	; (800a39c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 800a368:	f000 f890 	bl	800a48c <_ZSt20__throw_length_errorPKc>
 800a36c:	4293      	cmp	r3, r2
 800a36e:	d90b      	bls.n	800a388 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800a370:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 800a374:	ea4f 0042 	mov.w	r0, r2, lsl #1
 800a378:	d206      	bcs.n	800a388 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800a37a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800a37e:	bf2a      	itet	cs
 800a380:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 800a384:	6008      	strcc	r0, [r1, #0]
 800a386:	600b      	strcs	r3, [r1, #0]
 800a388:	6808      	ldr	r0, [r1, #0]
 800a38a:	3001      	adds	r0, #1
 800a38c:	d501      	bpl.n	800a392 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 800a38e:	f000 f877 	bl	800a480 <_ZSt17__throw_bad_allocv>
 800a392:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a396:	f000 b862 	b.w	800a45e <_Znwj>
 800a39a:	bf00      	nop
 800a39c:	0800a9f8 	.word	0x0800a9f8

0800a3a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 800a3a0:	f850 3b08 	ldr.w	r3, [r0], #8
 800a3a4:	4283      	cmp	r3, r0
 800a3a6:	d002      	beq.n	800a3ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	f000 b856 	b.w	800a45a <_ZdlPv>
 800a3ae:	4770      	bx	lr

0800a3b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 800a3b0:	2a01      	cmp	r2, #1
 800a3b2:	b410      	push	{r4}
 800a3b4:	d104      	bne.n	800a3c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 800a3b6:	780a      	ldrb	r2, [r1, #0]
 800a3b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a3bc:	7002      	strb	r2, [r0, #0]
 800a3be:	4770      	bx	lr
 800a3c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a3c4:	f7ff bfc6 	b.w	800a354 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

0800a3c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 800a3c8:	b508      	push	{r3, lr}
 800a3ca:	1a52      	subs	r2, r2, r1
 800a3cc:	f7ff fff0 	bl	800a3b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800a3d0:	bd08      	pop	{r3, pc}

0800a3d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 800a3d2:	b510      	push	{r4, lr}
 800a3d4:	4604      	mov	r4, r0
 800a3d6:	f7ff ffe3 	bl	800a3a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800a3da:	4620      	mov	r0, r4
 800a3dc:	bd10      	pop	{r4, pc}

0800a3de <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
 800a3de:	6840      	ldr	r0, [r0, #4]
 800a3e0:	4770      	bx	lr

0800a3e2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 800a3e2:	6800      	ldr	r0, [r0, #0]
 800a3e4:	4770      	bx	lr
	...

0800a3e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 800a3e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a3ea:	4604      	mov	r4, r0
 800a3ec:	4616      	mov	r6, r2
 800a3ee:	460d      	mov	r5, r1
 800a3f0:	b919      	cbnz	r1, 800a3fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800a3f2:	b112      	cbz	r2, 800a3fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800a3f4:	480d      	ldr	r0, [pc, #52]	; (800a42c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 800a3f6:	f000 f846 	bl	800a486 <_ZSt19__throw_logic_errorPKc>
 800a3fa:	1b73      	subs	r3, r6, r5
 800a3fc:	2b0f      	cmp	r3, #15
 800a3fe:	9301      	str	r3, [sp, #4]
 800a400:	d907      	bls.n	800a412 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 800a402:	2200      	movs	r2, #0
 800a404:	a901      	add	r1, sp, #4
 800a406:	4620      	mov	r0, r4
 800a408:	f7ff ffa8 	bl	800a35c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800a40c:	9b01      	ldr	r3, [sp, #4]
 800a40e:	6020      	str	r0, [r4, #0]
 800a410:	60a3      	str	r3, [r4, #8]
 800a412:	4632      	mov	r2, r6
 800a414:	4629      	mov	r1, r5
 800a416:	6820      	ldr	r0, [r4, #0]
 800a418:	f7ff ffd6 	bl	800a3c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 800a41c:	9b01      	ldr	r3, [sp, #4]
 800a41e:	6822      	ldr	r2, [r4, #0]
 800a420:	6063      	str	r3, [r4, #4]
 800a422:	2100      	movs	r1, #0
 800a424:	54d1      	strb	r1, [r2, r3]
 800a426:	b002      	add	sp, #8
 800a428:	bd70      	pop	{r4, r5, r6, pc}
 800a42a:	bf00      	nop
 800a42c:	0800aa10 	.word	0x0800aa10

0800a430 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 800a430:	b538      	push	{r3, r4, r5, lr}
 800a432:	f100 0308 	add.w	r3, r0, #8
 800a436:	4604      	mov	r4, r0
 800a438:	6003      	str	r3, [r0, #0]
 800a43a:	460d      	mov	r5, r1
 800a43c:	b159      	cbz	r1, 800a456 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 800a43e:	4608      	mov	r0, r1
 800a440:	f7f5 fec6 	bl	80001d0 <strlen>
 800a444:	182a      	adds	r2, r5, r0
 800a446:	4620      	mov	r0, r4
 800a448:	f04f 0300 	mov.w	r3, #0
 800a44c:	4629      	mov	r1, r5
 800a44e:	f7ff ffcb 	bl	800a3e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 800a452:	4620      	mov	r0, r4
 800a454:	bd38      	pop	{r3, r4, r5, pc}
 800a456:	2201      	movs	r2, #1
 800a458:	e7f5      	b.n	800a446 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

0800a45a <_ZdlPv>:
 800a45a:	f000 b85f 	b.w	800a51c <free>

0800a45e <_Znwj>:
 800a45e:	2801      	cmp	r0, #1
 800a460:	bf38      	it	cc
 800a462:	2001      	movcc	r0, #1
 800a464:	b510      	push	{r4, lr}
 800a466:	4604      	mov	r4, r0
 800a468:	4620      	mov	r0, r4
 800a46a:	f000 f84f 	bl	800a50c <malloc>
 800a46e:	b930      	cbnz	r0, 800a47e <_Znwj+0x20>
 800a470:	f000 f810 	bl	800a494 <_ZSt15get_new_handlerv>
 800a474:	b908      	cbnz	r0, 800a47a <_Znwj+0x1c>
 800a476:	f000 f815 	bl	800a4a4 <abort>
 800a47a:	4780      	blx	r0
 800a47c:	e7f4      	b.n	800a468 <_Znwj+0xa>
 800a47e:	bd10      	pop	{r4, pc}

0800a480 <_ZSt17__throw_bad_allocv>:
 800a480:	b508      	push	{r3, lr}
 800a482:	f000 f80f 	bl	800a4a4 <abort>

0800a486 <_ZSt19__throw_logic_errorPKc>:
 800a486:	b508      	push	{r3, lr}
 800a488:	f000 f80c 	bl	800a4a4 <abort>

0800a48c <_ZSt20__throw_length_errorPKc>:
 800a48c:	b508      	push	{r3, lr}
 800a48e:	f000 f809 	bl	800a4a4 <abort>
	...

0800a494 <_ZSt15get_new_handlerv>:
 800a494:	4b02      	ldr	r3, [pc, #8]	; (800a4a0 <_ZSt15get_new_handlerv+0xc>)
 800a496:	6818      	ldr	r0, [r3, #0]
 800a498:	f3bf 8f5b 	dmb	ish
 800a49c:	4770      	bx	lr
 800a49e:	bf00      	nop
 800a4a0:	20006804 	.word	0x20006804

0800a4a4 <abort>:
 800a4a4:	b508      	push	{r3, lr}
 800a4a6:	2006      	movs	r0, #6
 800a4a8:	f000 f9d8 	bl	800a85c <raise>
 800a4ac:	2001      	movs	r0, #1
 800a4ae:	f7f6 faed 	bl	8000a8c <_exit>
	...

0800a4b4 <__errno>:
 800a4b4:	4b01      	ldr	r3, [pc, #4]	; (800a4bc <__errno+0x8>)
 800a4b6:	6818      	ldr	r0, [r3, #0]
 800a4b8:	4770      	bx	lr
 800a4ba:	bf00      	nop
 800a4bc:	20000100 	.word	0x20000100

0800a4c0 <__libc_init_array>:
 800a4c0:	b570      	push	{r4, r5, r6, lr}
 800a4c2:	4d0d      	ldr	r5, [pc, #52]	; (800a4f8 <__libc_init_array+0x38>)
 800a4c4:	4c0d      	ldr	r4, [pc, #52]	; (800a4fc <__libc_init_array+0x3c>)
 800a4c6:	1b64      	subs	r4, r4, r5
 800a4c8:	10a4      	asrs	r4, r4, #2
 800a4ca:	2600      	movs	r6, #0
 800a4cc:	42a6      	cmp	r6, r4
 800a4ce:	d109      	bne.n	800a4e4 <__libc_init_array+0x24>
 800a4d0:	4d0b      	ldr	r5, [pc, #44]	; (800a500 <__libc_init_array+0x40>)
 800a4d2:	4c0c      	ldr	r4, [pc, #48]	; (800a504 <__libc_init_array+0x44>)
 800a4d4:	f000 f9ea 	bl	800a8ac <_init>
 800a4d8:	1b64      	subs	r4, r4, r5
 800a4da:	10a4      	asrs	r4, r4, #2
 800a4dc:	2600      	movs	r6, #0
 800a4de:	42a6      	cmp	r6, r4
 800a4e0:	d105      	bne.n	800a4ee <__libc_init_array+0x2e>
 800a4e2:	bd70      	pop	{r4, r5, r6, pc}
 800a4e4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4e8:	4798      	blx	r3
 800a4ea:	3601      	adds	r6, #1
 800a4ec:	e7ee      	b.n	800a4cc <__libc_init_array+0xc>
 800a4ee:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4f2:	4798      	blx	r3
 800a4f4:	3601      	adds	r6, #1
 800a4f6:	e7f2      	b.n	800a4de <__libc_init_array+0x1e>
 800a4f8:	0800aaa4 	.word	0x0800aaa4
 800a4fc:	0800aaa4 	.word	0x0800aaa4
 800a500:	0800aaa4 	.word	0x0800aaa4
 800a504:	0800aab0 	.word	0x0800aab0

0800a508 <__retarget_lock_acquire_recursive>:
 800a508:	4770      	bx	lr

0800a50a <__retarget_lock_release_recursive>:
 800a50a:	4770      	bx	lr

0800a50c <malloc>:
 800a50c:	4b02      	ldr	r3, [pc, #8]	; (800a518 <malloc+0xc>)
 800a50e:	4601      	mov	r1, r0
 800a510:	6818      	ldr	r0, [r3, #0]
 800a512:	f000 b88d 	b.w	800a630 <_malloc_r>
 800a516:	bf00      	nop
 800a518:	20000100 	.word	0x20000100

0800a51c <free>:
 800a51c:	4b02      	ldr	r3, [pc, #8]	; (800a528 <free+0xc>)
 800a51e:	4601      	mov	r1, r0
 800a520:	6818      	ldr	r0, [r3, #0]
 800a522:	f000 b819 	b.w	800a558 <_free_r>
 800a526:	bf00      	nop
 800a528:	20000100 	.word	0x20000100

0800a52c <memcpy>:
 800a52c:	440a      	add	r2, r1
 800a52e:	4291      	cmp	r1, r2
 800a530:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a534:	d100      	bne.n	800a538 <memcpy+0xc>
 800a536:	4770      	bx	lr
 800a538:	b510      	push	{r4, lr}
 800a53a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a53e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a542:	4291      	cmp	r1, r2
 800a544:	d1f9      	bne.n	800a53a <memcpy+0xe>
 800a546:	bd10      	pop	{r4, pc}

0800a548 <memset>:
 800a548:	4402      	add	r2, r0
 800a54a:	4603      	mov	r3, r0
 800a54c:	4293      	cmp	r3, r2
 800a54e:	d100      	bne.n	800a552 <memset+0xa>
 800a550:	4770      	bx	lr
 800a552:	f803 1b01 	strb.w	r1, [r3], #1
 800a556:	e7f9      	b.n	800a54c <memset+0x4>

0800a558 <_free_r>:
 800a558:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a55a:	2900      	cmp	r1, #0
 800a55c:	d044      	beq.n	800a5e8 <_free_r+0x90>
 800a55e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a562:	9001      	str	r0, [sp, #4]
 800a564:	2b00      	cmp	r3, #0
 800a566:	f1a1 0404 	sub.w	r4, r1, #4
 800a56a:	bfb8      	it	lt
 800a56c:	18e4      	addlt	r4, r4, r3
 800a56e:	f000 f991 	bl	800a894 <__malloc_lock>
 800a572:	4a1e      	ldr	r2, [pc, #120]	; (800a5ec <_free_r+0x94>)
 800a574:	9801      	ldr	r0, [sp, #4]
 800a576:	6813      	ldr	r3, [r2, #0]
 800a578:	b933      	cbnz	r3, 800a588 <_free_r+0x30>
 800a57a:	6063      	str	r3, [r4, #4]
 800a57c:	6014      	str	r4, [r2, #0]
 800a57e:	b003      	add	sp, #12
 800a580:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a584:	f000 b98c 	b.w	800a8a0 <__malloc_unlock>
 800a588:	42a3      	cmp	r3, r4
 800a58a:	d908      	bls.n	800a59e <_free_r+0x46>
 800a58c:	6825      	ldr	r5, [r4, #0]
 800a58e:	1961      	adds	r1, r4, r5
 800a590:	428b      	cmp	r3, r1
 800a592:	bf01      	itttt	eq
 800a594:	6819      	ldreq	r1, [r3, #0]
 800a596:	685b      	ldreq	r3, [r3, #4]
 800a598:	1949      	addeq	r1, r1, r5
 800a59a:	6021      	streq	r1, [r4, #0]
 800a59c:	e7ed      	b.n	800a57a <_free_r+0x22>
 800a59e:	461a      	mov	r2, r3
 800a5a0:	685b      	ldr	r3, [r3, #4]
 800a5a2:	b10b      	cbz	r3, 800a5a8 <_free_r+0x50>
 800a5a4:	42a3      	cmp	r3, r4
 800a5a6:	d9fa      	bls.n	800a59e <_free_r+0x46>
 800a5a8:	6811      	ldr	r1, [r2, #0]
 800a5aa:	1855      	adds	r5, r2, r1
 800a5ac:	42a5      	cmp	r5, r4
 800a5ae:	d10b      	bne.n	800a5c8 <_free_r+0x70>
 800a5b0:	6824      	ldr	r4, [r4, #0]
 800a5b2:	4421      	add	r1, r4
 800a5b4:	1854      	adds	r4, r2, r1
 800a5b6:	42a3      	cmp	r3, r4
 800a5b8:	6011      	str	r1, [r2, #0]
 800a5ba:	d1e0      	bne.n	800a57e <_free_r+0x26>
 800a5bc:	681c      	ldr	r4, [r3, #0]
 800a5be:	685b      	ldr	r3, [r3, #4]
 800a5c0:	6053      	str	r3, [r2, #4]
 800a5c2:	4421      	add	r1, r4
 800a5c4:	6011      	str	r1, [r2, #0]
 800a5c6:	e7da      	b.n	800a57e <_free_r+0x26>
 800a5c8:	d902      	bls.n	800a5d0 <_free_r+0x78>
 800a5ca:	230c      	movs	r3, #12
 800a5cc:	6003      	str	r3, [r0, #0]
 800a5ce:	e7d6      	b.n	800a57e <_free_r+0x26>
 800a5d0:	6825      	ldr	r5, [r4, #0]
 800a5d2:	1961      	adds	r1, r4, r5
 800a5d4:	428b      	cmp	r3, r1
 800a5d6:	bf04      	itt	eq
 800a5d8:	6819      	ldreq	r1, [r3, #0]
 800a5da:	685b      	ldreq	r3, [r3, #4]
 800a5dc:	6063      	str	r3, [r4, #4]
 800a5de:	bf04      	itt	eq
 800a5e0:	1949      	addeq	r1, r1, r5
 800a5e2:	6021      	streq	r1, [r4, #0]
 800a5e4:	6054      	str	r4, [r2, #4]
 800a5e6:	e7ca      	b.n	800a57e <_free_r+0x26>
 800a5e8:	b003      	add	sp, #12
 800a5ea:	bd30      	pop	{r4, r5, pc}
 800a5ec:	2000680c 	.word	0x2000680c

0800a5f0 <sbrk_aligned>:
 800a5f0:	b570      	push	{r4, r5, r6, lr}
 800a5f2:	4e0e      	ldr	r6, [pc, #56]	; (800a62c <sbrk_aligned+0x3c>)
 800a5f4:	460c      	mov	r4, r1
 800a5f6:	6831      	ldr	r1, [r6, #0]
 800a5f8:	4605      	mov	r5, r0
 800a5fa:	b911      	cbnz	r1, 800a602 <sbrk_aligned+0x12>
 800a5fc:	f000 f8f6 	bl	800a7ec <_sbrk_r>
 800a600:	6030      	str	r0, [r6, #0]
 800a602:	4621      	mov	r1, r4
 800a604:	4628      	mov	r0, r5
 800a606:	f000 f8f1 	bl	800a7ec <_sbrk_r>
 800a60a:	1c43      	adds	r3, r0, #1
 800a60c:	d00a      	beq.n	800a624 <sbrk_aligned+0x34>
 800a60e:	1cc4      	adds	r4, r0, #3
 800a610:	f024 0403 	bic.w	r4, r4, #3
 800a614:	42a0      	cmp	r0, r4
 800a616:	d007      	beq.n	800a628 <sbrk_aligned+0x38>
 800a618:	1a21      	subs	r1, r4, r0
 800a61a:	4628      	mov	r0, r5
 800a61c:	f000 f8e6 	bl	800a7ec <_sbrk_r>
 800a620:	3001      	adds	r0, #1
 800a622:	d101      	bne.n	800a628 <sbrk_aligned+0x38>
 800a624:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a628:	4620      	mov	r0, r4
 800a62a:	bd70      	pop	{r4, r5, r6, pc}
 800a62c:	20006810 	.word	0x20006810

0800a630 <_malloc_r>:
 800a630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a634:	1ccd      	adds	r5, r1, #3
 800a636:	f025 0503 	bic.w	r5, r5, #3
 800a63a:	3508      	adds	r5, #8
 800a63c:	2d0c      	cmp	r5, #12
 800a63e:	bf38      	it	cc
 800a640:	250c      	movcc	r5, #12
 800a642:	2d00      	cmp	r5, #0
 800a644:	4607      	mov	r7, r0
 800a646:	db01      	blt.n	800a64c <_malloc_r+0x1c>
 800a648:	42a9      	cmp	r1, r5
 800a64a:	d905      	bls.n	800a658 <_malloc_r+0x28>
 800a64c:	230c      	movs	r3, #12
 800a64e:	603b      	str	r3, [r7, #0]
 800a650:	2600      	movs	r6, #0
 800a652:	4630      	mov	r0, r6
 800a654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a658:	4e2e      	ldr	r6, [pc, #184]	; (800a714 <_malloc_r+0xe4>)
 800a65a:	f000 f91b 	bl	800a894 <__malloc_lock>
 800a65e:	6833      	ldr	r3, [r6, #0]
 800a660:	461c      	mov	r4, r3
 800a662:	bb34      	cbnz	r4, 800a6b2 <_malloc_r+0x82>
 800a664:	4629      	mov	r1, r5
 800a666:	4638      	mov	r0, r7
 800a668:	f7ff ffc2 	bl	800a5f0 <sbrk_aligned>
 800a66c:	1c43      	adds	r3, r0, #1
 800a66e:	4604      	mov	r4, r0
 800a670:	d14d      	bne.n	800a70e <_malloc_r+0xde>
 800a672:	6834      	ldr	r4, [r6, #0]
 800a674:	4626      	mov	r6, r4
 800a676:	2e00      	cmp	r6, #0
 800a678:	d140      	bne.n	800a6fc <_malloc_r+0xcc>
 800a67a:	6823      	ldr	r3, [r4, #0]
 800a67c:	4631      	mov	r1, r6
 800a67e:	4638      	mov	r0, r7
 800a680:	eb04 0803 	add.w	r8, r4, r3
 800a684:	f000 f8b2 	bl	800a7ec <_sbrk_r>
 800a688:	4580      	cmp	r8, r0
 800a68a:	d13a      	bne.n	800a702 <_malloc_r+0xd2>
 800a68c:	6821      	ldr	r1, [r4, #0]
 800a68e:	3503      	adds	r5, #3
 800a690:	1a6d      	subs	r5, r5, r1
 800a692:	f025 0503 	bic.w	r5, r5, #3
 800a696:	3508      	adds	r5, #8
 800a698:	2d0c      	cmp	r5, #12
 800a69a:	bf38      	it	cc
 800a69c:	250c      	movcc	r5, #12
 800a69e:	4629      	mov	r1, r5
 800a6a0:	4638      	mov	r0, r7
 800a6a2:	f7ff ffa5 	bl	800a5f0 <sbrk_aligned>
 800a6a6:	3001      	adds	r0, #1
 800a6a8:	d02b      	beq.n	800a702 <_malloc_r+0xd2>
 800a6aa:	6823      	ldr	r3, [r4, #0]
 800a6ac:	442b      	add	r3, r5
 800a6ae:	6023      	str	r3, [r4, #0]
 800a6b0:	e00e      	b.n	800a6d0 <_malloc_r+0xa0>
 800a6b2:	6822      	ldr	r2, [r4, #0]
 800a6b4:	1b52      	subs	r2, r2, r5
 800a6b6:	d41e      	bmi.n	800a6f6 <_malloc_r+0xc6>
 800a6b8:	2a0b      	cmp	r2, #11
 800a6ba:	d916      	bls.n	800a6ea <_malloc_r+0xba>
 800a6bc:	1961      	adds	r1, r4, r5
 800a6be:	42a3      	cmp	r3, r4
 800a6c0:	6025      	str	r5, [r4, #0]
 800a6c2:	bf18      	it	ne
 800a6c4:	6059      	strne	r1, [r3, #4]
 800a6c6:	6863      	ldr	r3, [r4, #4]
 800a6c8:	bf08      	it	eq
 800a6ca:	6031      	streq	r1, [r6, #0]
 800a6cc:	5162      	str	r2, [r4, r5]
 800a6ce:	604b      	str	r3, [r1, #4]
 800a6d0:	4638      	mov	r0, r7
 800a6d2:	f104 060b 	add.w	r6, r4, #11
 800a6d6:	f000 f8e3 	bl	800a8a0 <__malloc_unlock>
 800a6da:	f026 0607 	bic.w	r6, r6, #7
 800a6de:	1d23      	adds	r3, r4, #4
 800a6e0:	1af2      	subs	r2, r6, r3
 800a6e2:	d0b6      	beq.n	800a652 <_malloc_r+0x22>
 800a6e4:	1b9b      	subs	r3, r3, r6
 800a6e6:	50a3      	str	r3, [r4, r2]
 800a6e8:	e7b3      	b.n	800a652 <_malloc_r+0x22>
 800a6ea:	6862      	ldr	r2, [r4, #4]
 800a6ec:	42a3      	cmp	r3, r4
 800a6ee:	bf0c      	ite	eq
 800a6f0:	6032      	streq	r2, [r6, #0]
 800a6f2:	605a      	strne	r2, [r3, #4]
 800a6f4:	e7ec      	b.n	800a6d0 <_malloc_r+0xa0>
 800a6f6:	4623      	mov	r3, r4
 800a6f8:	6864      	ldr	r4, [r4, #4]
 800a6fa:	e7b2      	b.n	800a662 <_malloc_r+0x32>
 800a6fc:	4634      	mov	r4, r6
 800a6fe:	6876      	ldr	r6, [r6, #4]
 800a700:	e7b9      	b.n	800a676 <_malloc_r+0x46>
 800a702:	230c      	movs	r3, #12
 800a704:	603b      	str	r3, [r7, #0]
 800a706:	4638      	mov	r0, r7
 800a708:	f000 f8ca 	bl	800a8a0 <__malloc_unlock>
 800a70c:	e7a1      	b.n	800a652 <_malloc_r+0x22>
 800a70e:	6025      	str	r5, [r4, #0]
 800a710:	e7de      	b.n	800a6d0 <_malloc_r+0xa0>
 800a712:	bf00      	nop
 800a714:	2000680c 	.word	0x2000680c

0800a718 <cleanup_glue>:
 800a718:	b538      	push	{r3, r4, r5, lr}
 800a71a:	460c      	mov	r4, r1
 800a71c:	6809      	ldr	r1, [r1, #0]
 800a71e:	4605      	mov	r5, r0
 800a720:	b109      	cbz	r1, 800a726 <cleanup_glue+0xe>
 800a722:	f7ff fff9 	bl	800a718 <cleanup_glue>
 800a726:	4621      	mov	r1, r4
 800a728:	4628      	mov	r0, r5
 800a72a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a72e:	f7ff bf13 	b.w	800a558 <_free_r>
	...

0800a734 <_reclaim_reent>:
 800a734:	4b2c      	ldr	r3, [pc, #176]	; (800a7e8 <_reclaim_reent+0xb4>)
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	4283      	cmp	r3, r0
 800a73a:	b570      	push	{r4, r5, r6, lr}
 800a73c:	4604      	mov	r4, r0
 800a73e:	d051      	beq.n	800a7e4 <_reclaim_reent+0xb0>
 800a740:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a742:	b143      	cbz	r3, 800a756 <_reclaim_reent+0x22>
 800a744:	68db      	ldr	r3, [r3, #12]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d14a      	bne.n	800a7e0 <_reclaim_reent+0xac>
 800a74a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a74c:	6819      	ldr	r1, [r3, #0]
 800a74e:	b111      	cbz	r1, 800a756 <_reclaim_reent+0x22>
 800a750:	4620      	mov	r0, r4
 800a752:	f7ff ff01 	bl	800a558 <_free_r>
 800a756:	6961      	ldr	r1, [r4, #20]
 800a758:	b111      	cbz	r1, 800a760 <_reclaim_reent+0x2c>
 800a75a:	4620      	mov	r0, r4
 800a75c:	f7ff fefc 	bl	800a558 <_free_r>
 800a760:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a762:	b111      	cbz	r1, 800a76a <_reclaim_reent+0x36>
 800a764:	4620      	mov	r0, r4
 800a766:	f7ff fef7 	bl	800a558 <_free_r>
 800a76a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a76c:	b111      	cbz	r1, 800a774 <_reclaim_reent+0x40>
 800a76e:	4620      	mov	r0, r4
 800a770:	f7ff fef2 	bl	800a558 <_free_r>
 800a774:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a776:	b111      	cbz	r1, 800a77e <_reclaim_reent+0x4a>
 800a778:	4620      	mov	r0, r4
 800a77a:	f7ff feed 	bl	800a558 <_free_r>
 800a77e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a780:	b111      	cbz	r1, 800a788 <_reclaim_reent+0x54>
 800a782:	4620      	mov	r0, r4
 800a784:	f7ff fee8 	bl	800a558 <_free_r>
 800a788:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a78a:	b111      	cbz	r1, 800a792 <_reclaim_reent+0x5e>
 800a78c:	4620      	mov	r0, r4
 800a78e:	f7ff fee3 	bl	800a558 <_free_r>
 800a792:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a794:	b111      	cbz	r1, 800a79c <_reclaim_reent+0x68>
 800a796:	4620      	mov	r0, r4
 800a798:	f7ff fede 	bl	800a558 <_free_r>
 800a79c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a79e:	b111      	cbz	r1, 800a7a6 <_reclaim_reent+0x72>
 800a7a0:	4620      	mov	r0, r4
 800a7a2:	f7ff fed9 	bl	800a558 <_free_r>
 800a7a6:	69a3      	ldr	r3, [r4, #24]
 800a7a8:	b1e3      	cbz	r3, 800a7e4 <_reclaim_reent+0xb0>
 800a7aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a7ac:	4620      	mov	r0, r4
 800a7ae:	4798      	blx	r3
 800a7b0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a7b2:	b1b9      	cbz	r1, 800a7e4 <_reclaim_reent+0xb0>
 800a7b4:	4620      	mov	r0, r4
 800a7b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a7ba:	f7ff bfad 	b.w	800a718 <cleanup_glue>
 800a7be:	5949      	ldr	r1, [r1, r5]
 800a7c0:	b941      	cbnz	r1, 800a7d4 <_reclaim_reent+0xa0>
 800a7c2:	3504      	adds	r5, #4
 800a7c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a7c6:	2d80      	cmp	r5, #128	; 0x80
 800a7c8:	68d9      	ldr	r1, [r3, #12]
 800a7ca:	d1f8      	bne.n	800a7be <_reclaim_reent+0x8a>
 800a7cc:	4620      	mov	r0, r4
 800a7ce:	f7ff fec3 	bl	800a558 <_free_r>
 800a7d2:	e7ba      	b.n	800a74a <_reclaim_reent+0x16>
 800a7d4:	680e      	ldr	r6, [r1, #0]
 800a7d6:	4620      	mov	r0, r4
 800a7d8:	f7ff febe 	bl	800a558 <_free_r>
 800a7dc:	4631      	mov	r1, r6
 800a7de:	e7ef      	b.n	800a7c0 <_reclaim_reent+0x8c>
 800a7e0:	2500      	movs	r5, #0
 800a7e2:	e7ef      	b.n	800a7c4 <_reclaim_reent+0x90>
 800a7e4:	bd70      	pop	{r4, r5, r6, pc}
 800a7e6:	bf00      	nop
 800a7e8:	20000100 	.word	0x20000100

0800a7ec <_sbrk_r>:
 800a7ec:	b538      	push	{r3, r4, r5, lr}
 800a7ee:	4d06      	ldr	r5, [pc, #24]	; (800a808 <_sbrk_r+0x1c>)
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	4604      	mov	r4, r0
 800a7f4:	4608      	mov	r0, r1
 800a7f6:	602b      	str	r3, [r5, #0]
 800a7f8:	f7f6 f952 	bl	8000aa0 <_sbrk>
 800a7fc:	1c43      	adds	r3, r0, #1
 800a7fe:	d102      	bne.n	800a806 <_sbrk_r+0x1a>
 800a800:	682b      	ldr	r3, [r5, #0]
 800a802:	b103      	cbz	r3, 800a806 <_sbrk_r+0x1a>
 800a804:	6023      	str	r3, [r4, #0]
 800a806:	bd38      	pop	{r3, r4, r5, pc}
 800a808:	20006814 	.word	0x20006814

0800a80c <_raise_r>:
 800a80c:	291f      	cmp	r1, #31
 800a80e:	b538      	push	{r3, r4, r5, lr}
 800a810:	4604      	mov	r4, r0
 800a812:	460d      	mov	r5, r1
 800a814:	d904      	bls.n	800a820 <_raise_r+0x14>
 800a816:	2316      	movs	r3, #22
 800a818:	6003      	str	r3, [r0, #0]
 800a81a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a81e:	bd38      	pop	{r3, r4, r5, pc}
 800a820:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a822:	b112      	cbz	r2, 800a82a <_raise_r+0x1e>
 800a824:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a828:	b94b      	cbnz	r3, 800a83e <_raise_r+0x32>
 800a82a:	4620      	mov	r0, r4
 800a82c:	f000 f830 	bl	800a890 <_getpid_r>
 800a830:	462a      	mov	r2, r5
 800a832:	4601      	mov	r1, r0
 800a834:	4620      	mov	r0, r4
 800a836:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a83a:	f000 b817 	b.w	800a86c <_kill_r>
 800a83e:	2b01      	cmp	r3, #1
 800a840:	d00a      	beq.n	800a858 <_raise_r+0x4c>
 800a842:	1c59      	adds	r1, r3, #1
 800a844:	d103      	bne.n	800a84e <_raise_r+0x42>
 800a846:	2316      	movs	r3, #22
 800a848:	6003      	str	r3, [r0, #0]
 800a84a:	2001      	movs	r0, #1
 800a84c:	e7e7      	b.n	800a81e <_raise_r+0x12>
 800a84e:	2400      	movs	r4, #0
 800a850:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a854:	4628      	mov	r0, r5
 800a856:	4798      	blx	r3
 800a858:	2000      	movs	r0, #0
 800a85a:	e7e0      	b.n	800a81e <_raise_r+0x12>

0800a85c <raise>:
 800a85c:	4b02      	ldr	r3, [pc, #8]	; (800a868 <raise+0xc>)
 800a85e:	4601      	mov	r1, r0
 800a860:	6818      	ldr	r0, [r3, #0]
 800a862:	f7ff bfd3 	b.w	800a80c <_raise_r>
 800a866:	bf00      	nop
 800a868:	20000100 	.word	0x20000100

0800a86c <_kill_r>:
 800a86c:	b538      	push	{r3, r4, r5, lr}
 800a86e:	4d07      	ldr	r5, [pc, #28]	; (800a88c <_kill_r+0x20>)
 800a870:	2300      	movs	r3, #0
 800a872:	4604      	mov	r4, r0
 800a874:	4608      	mov	r0, r1
 800a876:	4611      	mov	r1, r2
 800a878:	602b      	str	r3, [r5, #0]
 800a87a:	f7f6 f8f7 	bl	8000a6c <_kill>
 800a87e:	1c43      	adds	r3, r0, #1
 800a880:	d102      	bne.n	800a888 <_kill_r+0x1c>
 800a882:	682b      	ldr	r3, [r5, #0]
 800a884:	b103      	cbz	r3, 800a888 <_kill_r+0x1c>
 800a886:	6023      	str	r3, [r4, #0]
 800a888:	bd38      	pop	{r3, r4, r5, pc}
 800a88a:	bf00      	nop
 800a88c:	20006814 	.word	0x20006814

0800a890 <_getpid_r>:
 800a890:	f7f6 b8e4 	b.w	8000a5c <_getpid>

0800a894 <__malloc_lock>:
 800a894:	4801      	ldr	r0, [pc, #4]	; (800a89c <__malloc_lock+0x8>)
 800a896:	f7ff be37 	b.w	800a508 <__retarget_lock_acquire_recursive>
 800a89a:	bf00      	nop
 800a89c:	20006808 	.word	0x20006808

0800a8a0 <__malloc_unlock>:
 800a8a0:	4801      	ldr	r0, [pc, #4]	; (800a8a8 <__malloc_unlock+0x8>)
 800a8a2:	f7ff be32 	b.w	800a50a <__retarget_lock_release_recursive>
 800a8a6:	bf00      	nop
 800a8a8:	20006808 	.word	0x20006808

0800a8ac <_init>:
 800a8ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8ae:	bf00      	nop
 800a8b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8b2:	bc08      	pop	{r3}
 800a8b4:	469e      	mov	lr, r3
 800a8b6:	4770      	bx	lr

0800a8b8 <_fini>:
 800a8b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8ba:	bf00      	nop
 800a8bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8be:	bc08      	pop	{r3}
 800a8c0:	469e      	mov	lr, r3
 800a8c2:	4770      	bx	lr
