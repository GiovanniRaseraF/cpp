
usbandfreertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bcbc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c0  0800be4c  0800be4c  0001be4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c20c  0800c20c  00020164  2**0
                  CONTENTS
  4 .ARM          00000008  0800c20c  0800c20c  0001c20c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c214  0800c214  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  0800c214  0800c214  0001c214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c224  0800c224  0001c224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  0800c228  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020164  2**0
                  CONTENTS
 10 .bss          00006714  20000164  20000164  00020164  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20006878  20006878  00020164  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003934c  00000000  00000000  00020192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000624c  00000000  00000000  000594de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c90  00000000  00000000  0005f730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001a68  00000000  00000000  000613c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000bdbd  00000000  00000000  00062e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023122  00000000  00000000  0006ebe5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dde48  00000000  00000000  00091d07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016fb4f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009040  00000000  00000000  0016fba0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000164 	.word	0x20000164
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800be34 	.word	0x0800be34

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000168 	.word	0x20000168
 80001cc:	0800be34 	.word	0x0800be34

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <main>:
void usbcomunicationserial(void *argument);
static void MX_SPI1_Init(void);
void gyroreadings(void *argument);


int main(void){
 80004e4:	b590      	push	{r4, r7, lr}
 80004e6:	b089      	sub	sp, #36	; 0x24
 80004e8:	af00      	add	r7, sp, #0
  HAL_Init();
 80004ea:	f000 ff91 	bl	8001410 <HAL_Init>
  SystemClock_Config();
 80004ee:	f000 f863 	bl	80005b8 <_Z18SystemClock_Configv>
  MX_GPIO_Init();
 80004f2:	f000 f8d7 	bl	80006a4 <_ZL12MX_GPIO_Initv>
  MX_SPI1_Init();
 80004f6:	f000 f93b 	bl	8000770 <_ZL12MX_SPI1_Initv>
  MX_USB_DEVICE_Init();
 80004fa:	f00a fbff 	bl	800acfc <MX_USB_DEVICE_Init>

  Vesp::console.log("\n\n\n-------Vesp-------\n");
 80004fe:	4b20      	ldr	r3, [pc, #128]	; (8000580 <main+0x9c>)
 8000500:	681c      	ldr	r4, [r3, #0]
 8000502:	f107 031c 	add.w	r3, r7, #28
 8000506:	4618      	mov	r0, r3
 8000508:	f00b f914 	bl	800b734 <_ZNSaIcEC1Ev>
 800050c:	f107 021c 	add.w	r2, r7, #28
 8000510:	1d3b      	adds	r3, r7, #4
 8000512:	491c      	ldr	r1, [pc, #112]	; (8000584 <main+0xa0>)
 8000514:	4618      	mov	r0, r3
 8000516:	f00b fa4f 	bl	800b9b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800051a:	1d3b      	adds	r3, r7, #4
 800051c:	4619      	mov	r1, r3
 800051e:	4620      	mov	r0, r4
 8000520:	f000 fd8a 	bl	8001038 <_ZN7printer3logENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8000524:	1d3b      	adds	r3, r7, #4
 8000526:	4618      	mov	r0, r3
 8000528:	f00b f9db 	bl	800b8e2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800052c:	f107 031c 	add.w	r3, r7, #28
 8000530:	4618      	mov	r0, r3
 8000532:	f00b f900 	bl	800b736 <_ZNSaIcED1Ev>
  osKernelInitialize();
 8000536:	f007 fe65 	bl	8008204 <osKernelInitialize>

  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800053a:	4a13      	ldr	r2, [pc, #76]	; (8000588 <main+0xa4>)
 800053c:	2100      	movs	r1, #0
 800053e:	4813      	ldr	r0, [pc, #76]	; (800058c <main+0xa8>)
 8000540:	f007 feaa 	bl	8008298 <osThreadNew>
 8000544:	4603      	mov	r3, r0
 8000546:	4a12      	ldr	r2, [pc, #72]	; (8000590 <main+0xac>)
 8000548:	6013      	str	r3, [r2, #0]
  ledtoggleHandle = osThreadNew(ledstatustoggle, NULL, &ledtoggle_attributes);
 800054a:	4a12      	ldr	r2, [pc, #72]	; (8000594 <main+0xb0>)
 800054c:	2100      	movs	r1, #0
 800054e:	4812      	ldr	r0, [pc, #72]	; (8000598 <main+0xb4>)
 8000550:	f007 fea2 	bl	8008298 <osThreadNew>
 8000554:	4603      	mov	r3, r0
 8000556:	4a11      	ldr	r2, [pc, #68]	; (800059c <main+0xb8>)
 8000558:	6013      	str	r3, [r2, #0]
  usbcomunicationHandle = osThreadNew(usbcomunicationserial, NULL, &usbcomunication_attributes);
 800055a:	4a11      	ldr	r2, [pc, #68]	; (80005a0 <main+0xbc>)
 800055c:	2100      	movs	r1, #0
 800055e:	4811      	ldr	r0, [pc, #68]	; (80005a4 <main+0xc0>)
 8000560:	f007 fe9a 	bl	8008298 <osThreadNew>
 8000564:	4603      	mov	r3, r0
 8000566:	4a10      	ldr	r2, [pc, #64]	; (80005a8 <main+0xc4>)
 8000568:	6013      	str	r3, [r2, #0]
  gyroreadingsHandle = osThreadNew(gyroreadings, NULL, &gyroreadings_attributes);
 800056a:	4a10      	ldr	r2, [pc, #64]	; (80005ac <main+0xc8>)
 800056c:	2100      	movs	r1, #0
 800056e:	4810      	ldr	r0, [pc, #64]	; (80005b0 <main+0xcc>)
 8000570:	f007 fe92 	bl	8008298 <osThreadNew>
 8000574:	4603      	mov	r3, r0
 8000576:	4a0f      	ldr	r2, [pc, #60]	; (80005b4 <main+0xd0>)
 8000578:	6013      	str	r3, [r2, #0]

  osKernelStart();
 800057a:	f007 fe67 	bl	800824c <osKernelStart>

  for(;;);
 800057e:	e7fe      	b.n	800057e <main+0x9a>
 8000580:	20000180 	.word	0x20000180
 8000584:	0800be84 	.word	0x0800be84
 8000588:	0800bf04 	.word	0x0800bf04
 800058c:	08000889 	.word	0x08000889
 8000590:	20000184 	.word	0x20000184
 8000594:	0800bf28 	.word	0x0800bf28
 8000598:	0800089d 	.word	0x0800089d
 800059c:	20000188 	.word	0x20000188
 80005a0:	0800bf4c 	.word	0x0800bf4c
 80005a4:	080008bd 	.word	0x080008bd
 80005a8:	2000018c 	.word	0x2000018c
 80005ac:	0800bf70 	.word	0x0800bf70
 80005b0:	080007e9 	.word	0x080007e9
 80005b4:	200001e8 	.word	0x200001e8

080005b8 <_Z18SystemClock_Configv>:
}


void SystemClock_Config(void){
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b094      	sub	sp, #80	; 0x50
 80005bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005be:	f107 0320 	add.w	r3, r7, #32
 80005c2:	2230      	movs	r2, #48	; 0x30
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f00b fa82 	bl	800bad0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005cc:	f107 030c 	add.w	r3, r7, #12
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
 80005da:	611a      	str	r2, [r3, #16]

  __HAL_RCC_PWR_CLK_ENABLE();
 80005dc:	2300      	movs	r3, #0
 80005de:	60bb      	str	r3, [r7, #8]
 80005e0:	4b2e      	ldr	r3, [pc, #184]	; (800069c <_Z18SystemClock_Configv+0xe4>)
 80005e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e4:	4a2d      	ldr	r2, [pc, #180]	; (800069c <_Z18SystemClock_Configv+0xe4>)
 80005e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ea:	6413      	str	r3, [r2, #64]	; 0x40
 80005ec:	4b2b      	ldr	r3, [pc, #172]	; (800069c <_Z18SystemClock_Configv+0xe4>)
 80005ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f4:	60bb      	str	r3, [r7, #8]
 80005f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005f8:	2300      	movs	r3, #0
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	4b28      	ldr	r3, [pc, #160]	; (80006a0 <_Z18SystemClock_Configv+0xe8>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a27      	ldr	r2, [pc, #156]	; (80006a0 <_Z18SystemClock_Configv+0xe8>)
 8000602:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000606:	6013      	str	r3, [r2, #0]
 8000608:	4b25      	ldr	r3, [pc, #148]	; (80006a0 <_Z18SystemClock_Configv+0xe8>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000610:	607b      	str	r3, [r7, #4]
 8000612:	687b      	ldr	r3, [r7, #4]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000614:	2303      	movs	r3, #3
 8000616:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000618:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800061c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800061e:	2301      	movs	r3, #1
 8000620:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000622:	2310      	movs	r3, #16
 8000624:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000626:	2302      	movs	r3, #2
 8000628:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800062a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800062e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000630:	2304      	movs	r3, #4
 8000632:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000634:	2348      	movs	r3, #72	; 0x48
 8000636:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000638:	2302      	movs	r3, #2
 800063a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800063c:	2303      	movs	r3, #3
 800063e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000640:	f107 0320 	add.w	r3, r7, #32
 8000644:	4618      	mov	r0, r3
 8000646:	f002 fc77 	bl	8002f38 <HAL_RCC_OscConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	bf14      	ite	ne
 8000650:	2301      	movne	r3, #1
 8000652:	2300      	moveq	r3, #0
 8000654:	b2db      	uxtb	r3, r3
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 800065a:	f000 f94b 	bl	80008f4 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065e:	230f      	movs	r3, #15
 8000660:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000662:	2300      	movs	r3, #0
 8000664:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000666:	2300      	movs	r3, #0
 8000668:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066e:	2300      	movs	r3, #0
 8000670:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000672:	f107 030c 	add.w	r3, r7, #12
 8000676:	2100      	movs	r1, #0
 8000678:	4618      	mov	r0, r3
 800067a:	f002 fed5 	bl	8003428 <HAL_RCC_ClockConfig>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	bf14      	ite	ne
 8000684:	2301      	movne	r3, #1
 8000686:	2300      	moveq	r3, #0
 8000688:	b2db      	uxtb	r3, r3
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 800068e:	f000 f931 	bl	80008f4 <Error_Handler>
  }
}
 8000692:	bf00      	nop
 8000694:	3750      	adds	r7, #80	; 0x50
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40023800 	.word	0x40023800
 80006a0:	40007000 	.word	0x40007000

080006a4 <_ZL12MX_GPIO_Initv>:


static void MX_GPIO_Init(void){
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b088      	sub	sp, #32
 80006a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006aa:	f107 030c 	add.w	r3, r7, #12
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
 80006b6:	60da      	str	r2, [r3, #12]
 80006b8:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	60bb      	str	r3, [r7, #8]
 80006be:	4b29      	ldr	r3, [pc, #164]	; (8000764 <_ZL12MX_GPIO_Initv+0xc0>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a28      	ldr	r2, [pc, #160]	; (8000764 <_ZL12MX_GPIO_Initv+0xc0>)
 80006c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ca:	4b26      	ldr	r3, [pc, #152]	; (8000764 <_ZL12MX_GPIO_Initv+0xc0>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006d2:	60bb      	str	r3, [r7, #8]
 80006d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	4b22      	ldr	r3, [pc, #136]	; (8000764 <_ZL12MX_GPIO_Initv+0xc0>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a21      	ldr	r2, [pc, #132]	; (8000764 <_ZL12MX_GPIO_Initv+0xc0>)
 80006e0:	f043 0301 	orr.w	r3, r3, #1
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
 80006e6:	4b1f      	ldr	r3, [pc, #124]	; (8000764 <_ZL12MX_GPIO_Initv+0xc0>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	f003 0301 	and.w	r3, r3, #1
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	603b      	str	r3, [r7, #0]
 80006f6:	4b1b      	ldr	r3, [pc, #108]	; (8000764 <_ZL12MX_GPIO_Initv+0xc0>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a1a      	ldr	r2, [pc, #104]	; (8000764 <_ZL12MX_GPIO_Initv+0xc0>)
 80006fc:	f043 0302 	orr.w	r3, r3, #2
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4b18      	ldr	r3, [pc, #96]	; (8000764 <_ZL12MX_GPIO_Initv+0xc0>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f003 0302 	and.w	r3, r3, #2
 800070a:	603b      	str	r3, [r7, #0]
 800070c:	683b      	ldr	r3, [r7, #0]

  HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 800070e:	2200      	movs	r2, #0
 8000710:	2110      	movs	r1, #16
 8000712:	4815      	ldr	r0, [pc, #84]	; (8000768 <_ZL12MX_GPIO_Initv+0xc4>)
 8000714:	f001 f960 	bl	80019d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 8000718:	2200      	movs	r2, #0
 800071a:	2120      	movs	r1, #32
 800071c:	4813      	ldr	r0, [pc, #76]	; (800076c <_ZL12MX_GPIO_Initv+0xc8>)
 800071e:	f001 f95b 	bl	80019d8 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = GYRO_CS_Pin;
 8000722:	2310      	movs	r3, #16
 8000724:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000726:	2301      	movs	r3, #1
 8000728:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072a:	2300      	movs	r3, #0
 800072c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072e:	2300      	movs	r3, #0
 8000730:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GYRO_CS_GPIO_Port, &GPIO_InitStruct);
 8000732:	f107 030c 	add.w	r3, r7, #12
 8000736:	4619      	mov	r1, r3
 8000738:	480b      	ldr	r0, [pc, #44]	; (8000768 <_ZL12MX_GPIO_Initv+0xc4>)
 800073a:	f000 ffb1 	bl	80016a0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = led_Pin;
 800073e:	2320      	movs	r3, #32
 8000740:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000742:	2301      	movs	r3, #1
 8000744:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074a:	2300      	movs	r3, #0
 800074c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 800074e:	f107 030c 	add.w	r3, r7, #12
 8000752:	4619      	mov	r1, r3
 8000754:	4805      	ldr	r0, [pc, #20]	; (800076c <_ZL12MX_GPIO_Initv+0xc8>)
 8000756:	f000 ffa3 	bl	80016a0 <HAL_GPIO_Init>
}
 800075a:	bf00      	nop
 800075c:	3720      	adds	r7, #32
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40023800 	.word	0x40023800
 8000768:	40020000 	.word	0x40020000
 800076c:	40020400 	.word	0x40020400

08000770 <_ZL12MX_SPI1_Initv>:


static void MX_SPI1_Init(void){
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  hspi1.Instance = SPI1;
 8000774:	4b1a      	ldr	r3, [pc, #104]	; (80007e0 <_ZL12MX_SPI1_Initv+0x70>)
 8000776:	4a1b      	ldr	r2, [pc, #108]	; (80007e4 <_ZL12MX_SPI1_Initv+0x74>)
 8000778:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800077a:	4b19      	ldr	r3, [pc, #100]	; (80007e0 <_ZL12MX_SPI1_Initv+0x70>)
 800077c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000780:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000782:	4b17      	ldr	r3, [pc, #92]	; (80007e0 <_ZL12MX_SPI1_Initv+0x70>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000788:	4b15      	ldr	r3, [pc, #84]	; (80007e0 <_ZL12MX_SPI1_Initv+0x70>)
 800078a:	2200      	movs	r2, #0
 800078c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800078e:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <_ZL12MX_SPI1_Initv+0x70>)
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000794:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <_ZL12MX_SPI1_Initv+0x70>)
 8000796:	2200      	movs	r2, #0
 8000798:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800079a:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <_ZL12MX_SPI1_Initv+0x70>)
 800079c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007a0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007a2:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <_ZL12MX_SPI1_Initv+0x70>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007a8:	4b0d      	ldr	r3, [pc, #52]	; (80007e0 <_ZL12MX_SPI1_Initv+0x70>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007ae:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <_ZL12MX_SPI1_Initv+0x70>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007b4:	4b0a      	ldr	r3, [pc, #40]	; (80007e0 <_ZL12MX_SPI1_Initv+0x70>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007ba:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <_ZL12MX_SPI1_Initv+0x70>)
 80007bc:	220a      	movs	r2, #10
 80007be:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007c0:	4807      	ldr	r0, [pc, #28]	; (80007e0 <_ZL12MX_SPI1_Initv+0x70>)
 80007c2:	f003 f86f 	bl	80038a4 <HAL_SPI_Init>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	bf14      	ite	ne
 80007cc:	2301      	movne	r3, #1
 80007ce:	2300      	moveq	r3, #0
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 80007d6:	f000 f88d 	bl	80008f4 <Error_Handler>
  }
}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20000190 	.word	0x20000190
 80007e4:	40013000 	.word	0x40013000

080007e8 <_Z12gyroreadingsPv>:

// Threads implementation
void gyroreadings(void *argument){
 80007e8:	b5b0      	push	{r4, r5, r7, lr}
 80007ea:	b0b8      	sub	sp, #224	; 0xe0
 80007ec:	af16      	add	r7, sp, #88	; 0x58
 80007ee:	6078      	str	r0, [r7, #4]
	osDelay(7000);
 80007f0:	f641 3058 	movw	r0, #7000	; 0x1b58
 80007f4:	f007 fde2 	bl	80083bc <osDelay>

	// gyro setup
	mpu6000 mpu{hspi1, GYRO_CS_Pin, GYRO_CS_GPIO_Port};
 80007f8:	4c1f      	ldr	r4, [pc, #124]	; (8000878 <_Z12gyroreadingsPv+0x90>)
 80007fa:	f107 0508 	add.w	r5, r7, #8
 80007fe:	4b1f      	ldr	r3, [pc, #124]	; (800087c <_Z12gyroreadingsPv+0x94>)
 8000800:	9314      	str	r3, [sp, #80]	; 0x50
 8000802:	2310      	movs	r3, #16
 8000804:	9313      	str	r3, [sp, #76]	; 0x4c
 8000806:	4668      	mov	r0, sp
 8000808:	f104 030c 	add.w	r3, r4, #12
 800080c:	224c      	movs	r2, #76	; 0x4c
 800080e:	4619      	mov	r1, r3
 8000810:	f00b f950 	bl	800bab4 <memcpy>
 8000814:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8000818:	4628      	mov	r0, r5
 800081a:	f000 f8fb 	bl	8000a14 <_ZN7mpu6000C1E19__SPI_HandleTypeDeftP12GPIO_TypeDef>
	mpu.init();
 800081e:	f107 0308 	add.w	r3, r7, #8
 8000822:	4618      	mov	r0, r3
 8000824:	f000 f936 	bl	8000a94 <_ZN7mpu60004initEv>

	Vesp::console.log("mpu init done \n");
 8000828:	4b15      	ldr	r3, [pc, #84]	; (8000880 <_Z12gyroreadingsPv+0x98>)
 800082a:	681c      	ldr	r4, [r3, #0]
 800082c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000830:	4618      	mov	r0, r3
 8000832:	f00a ff7f 	bl	800b734 <_ZNSaIcEC1Ev>
 8000836:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800083a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800083e:	4911      	ldr	r1, [pc, #68]	; (8000884 <_Z12gyroreadingsPv+0x9c>)
 8000840:	4618      	mov	r0, r3
 8000842:	f00b f8b9 	bl	800b9b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8000846:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800084a:	4619      	mov	r1, r3
 800084c:	4620      	mov	r0, r4
 800084e:	f000 fbf3 	bl	8001038 <_ZN7printer3logENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8000852:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000856:	4618      	mov	r0, r3
 8000858:	f00b f843 	bl	800b8e2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800085c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000860:	4618      	mov	r0, r3
 8000862:	f00a ff68 	bl	800b736 <_ZNSaIcED1Ev>

	for(;;){
		mpu.read_acc();
 8000866:	f107 0308 	add.w	r3, r7, #8
 800086a:	4618      	mov	r0, r3
 800086c:	f000 f9a0 	bl	8000bb0 <_ZN7mpu60008read_accEv>

		osDelay(200);
 8000870:	20c8      	movs	r0, #200	; 0xc8
 8000872:	f007 fda3 	bl	80083bc <osDelay>
		mpu.read_acc();
 8000876:	e7f6      	b.n	8000866 <_Z12gyroreadingsPv+0x7e>
 8000878:	20000190 	.word	0x20000190
 800087c:	40020000 	.word	0x40020000
 8000880:	20000180 	.word	0x20000180
 8000884:	0800be9c 	.word	0x0800be9c

08000888 <_Z16StartDefaultTaskPv>:
	}
}

void StartDefaultTask(void *argument){
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  for(;;){
    osDelay(1000);
 8000890:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000894:	f007 fd92 	bl	80083bc <osDelay>
 8000898:	e7fa      	b.n	8000890 <_Z16StartDefaultTaskPv+0x8>
	...

0800089c <_Z15ledstatustogglePv>:
  }
}

void ledstatustoggle(void *argument){
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  for(;;){
	  HAL_GPIO_TogglePin(led_GPIO_Port, led_Pin);
 80008a4:	2120      	movs	r1, #32
 80008a6:	4804      	ldr	r0, [pc, #16]	; (80008b8 <_Z15ledstatustogglePv+0x1c>)
 80008a8:	f001 f8af 	bl	8001a0a <HAL_GPIO_TogglePin>
	  osDelay(1000);
 80008ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008b0:	f007 fd84 	bl	80083bc <osDelay>
	  HAL_GPIO_TogglePin(led_GPIO_Port, led_Pin);
 80008b4:	e7f6      	b.n	80008a4 <_Z15ledstatustogglePv+0x8>
 80008b6:	bf00      	nop
 80008b8:	40020400 	.word	0x40020400

080008bc <_Z21usbcomunicationserialPv>:
  }
}

void usbcomunicationserial(void *argument){
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  for(;;){
	//Vesp::getprinter().log("Vespin2.0 Firmaware 1.0\n");

	osDelay(2000);
 80008c4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80008c8:	f007 fd78 	bl	80083bc <osDelay>
 80008cc:	e7fa      	b.n	80008c4 <_Z21usbcomunicationserialPv+0x8>
	...

080008d0 <HAL_TIM_PeriodElapsedCallback>:
  }
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM6) {
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a04      	ldr	r2, [pc, #16]	; (80008f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d101      	bne.n	80008e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008e2:	f000 fdb7 	bl	8001454 <HAL_IncTick>
  }
}
 80008e6:	bf00      	nop
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40001000 	.word	0x40001000

080008f4 <Error_Handler>:

void Error_Handler(void){
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f8:	b672      	cpsid	i
}
 80008fa:	bf00      	nop
  __disable_irq();
  while (1){}
 80008fc:	e7fe      	b.n	80008fc <Error_Handler+0x8>
	...

08000900 <_Z41__static_initialization_and_destruction_0ii>:
}
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	6039      	str	r1, [r7, #0]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	2b01      	cmp	r3, #1
 800090e:	d109      	bne.n	8000924 <_Z41__static_initialization_and_destruction_0ii+0x24>
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000916:	4293      	cmp	r3, r2
 8000918:	d104      	bne.n	8000924 <_Z41__static_initialization_and_destruction_0ii+0x24>

};

namespace Vesp{
	printer &getprinter();
	static printer& console = getprinter();
 800091a:	f000 fba3 	bl	8001064 <_ZN4Vesp10getprinterEv>
 800091e:	4603      	mov	r3, r0
 8000920:	4a02      	ldr	r2, [pc, #8]	; (800092c <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8000922:	6013      	str	r3, [r2, #0]
 8000924:	bf00      	nop
 8000926:	3708      	adds	r7, #8
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20000180 	.word	0x20000180

08000930 <_GLOBAL__sub_I_defaultTaskHandle>:
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
 8000934:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000938:	2001      	movs	r0, #1
 800093a:	f7ff ffe1 	bl	8000900 <_Z41__static_initialization_and_destruction_0ii>
 800093e:	bd80      	pop	{r7, pc}

08000940 <_ZNSt7__cxx119to_stringEi>:

  // DR 1261. Insufficent overloads for to_string / to_wstring

  inline string
  to_string(int __val)
  {
 8000940:	b590      	push	{r4, r7, lr}
 8000942:	b087      	sub	sp, #28
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
 8000948:	6039      	str	r1, [r7, #0]
    const bool __neg = __val < 0;
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	0fdb      	lsrs	r3, r3, #31
 800094e:	75fb      	strb	r3, [r7, #23]
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
 8000950:	7dfb      	ldrb	r3, [r7, #23]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d002      	beq.n	800095c <_ZNSt7__cxx119to_stringEi+0x1c>
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	425b      	negs	r3, r3
 800095a:	e000      	b.n	800095e <_ZNSt7__cxx119to_stringEi+0x1e>
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	613b      	str	r3, [r7, #16]
    const auto __len = __detail::__to_chars_len(__uval);
 8000960:	210a      	movs	r1, #10
 8000962:	6938      	ldr	r0, [r7, #16]
 8000964:	f000 f9ae 	bl	8000cc4 <_ZNSt8__detail14__to_chars_lenIjEEjT_i>
 8000968:	60f8      	str	r0, [r7, #12]
    string __str(__neg + __len, '-');
 800096a:	7dfa      	ldrb	r2, [r7, #23]
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	18d4      	adds	r4, r2, r3
 8000970:	f107 0308 	add.w	r3, r7, #8
 8000974:	4618      	mov	r0, r3
 8000976:	f00a fedd 	bl	800b734 <_ZNSaIcEC1Ev>
 800097a:	f107 0308 	add.w	r3, r7, #8
 800097e:	222d      	movs	r2, #45	; 0x2d
 8000980:	4621      	mov	r1, r4
 8000982:	6878      	ldr	r0, [r7, #4]
 8000984:	f00a ff8a 	bl	800b89c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EjcRKS3_>
 8000988:	f107 0308 	add.w	r3, r7, #8
 800098c:	4618      	mov	r0, r3
 800098e:	f00a fed2 	bl	800b736 <_ZNSaIcED1Ev>
    __detail::__to_chars_10_impl(&__str[__neg], __len, __uval);
 8000992:	7dfb      	ldrb	r3, [r7, #23]
 8000994:	4619      	mov	r1, r3
 8000996:	6878      	ldr	r0, [r7, #4]
 8000998:	f00a ffad 	bl	800b8f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 800099c:	4603      	mov	r3, r0
 800099e:	693a      	ldr	r2, [r7, #16]
 80009a0:	68f9      	ldr	r1, [r7, #12]
 80009a2:	4618      	mov	r0, r3
 80009a4:	f000 f9ce 	bl	8000d44 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_>
    return __str;
 80009a8:	bf00      	nop
  }
 80009aa:	6878      	ldr	r0, [r7, #4]
 80009ac:	371c      	adds	r7, #28
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd90      	pop	{r4, r7, pc}

080009b2 <_ZNSt7__cxx119to_stringEy>:
    return __str;
  }

  inline string
  to_string(unsigned long long __val)
  {
 80009b2:	b590      	push	{r4, r7, lr}
 80009b4:	b087      	sub	sp, #28
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	60f8      	str	r0, [r7, #12]
 80009ba:	e9c7 2300 	strd	r2, r3, [r7]
    string __str(__detail::__to_chars_len(__val), '\0');
 80009be:	220a      	movs	r2, #10
 80009c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80009c4:	f000 fa14 	bl	8000df0 <_ZNSt8__detail14__to_chars_lenIyEEjT_i>
 80009c8:	4604      	mov	r4, r0
 80009ca:	f107 0314 	add.w	r3, r7, #20
 80009ce:	4618      	mov	r0, r3
 80009d0:	f00a feb0 	bl	800b734 <_ZNSaIcEC1Ev>
 80009d4:	f107 0314 	add.w	r3, r7, #20
 80009d8:	2200      	movs	r2, #0
 80009da:	4621      	mov	r1, r4
 80009dc:	68f8      	ldr	r0, [r7, #12]
 80009de:	f00a ff5d 	bl	800b89c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EjcRKS3_>
 80009e2:	f107 0314 	add.w	r3, r7, #20
 80009e6:	4618      	mov	r0, r3
 80009e8:	f00a fea5 	bl	800b736 <_ZNSaIcED1Ev>
    __detail::__to_chars_10_impl(&__str[0], __str.size(), __val);
 80009ec:	2100      	movs	r1, #0
 80009ee:	68f8      	ldr	r0, [r7, #12]
 80009f0:	f00a ff81 	bl	800b8f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80009f4:	4604      	mov	r4, r0
 80009f6:	68f8      	ldr	r0, [r7, #12]
 80009f8:	f00a ff79 	bl	800b8ee <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 80009fc:	4601      	mov	r1, r0
 80009fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000a02:	4620      	mov	r0, r4
 8000a04:	f000 fa56 	bl	8000eb4 <_ZNSt8__detail18__to_chars_10_implIyEEvPcjT_>
    return __str;
 8000a08:	bf00      	nop
  }
 8000a0a:	68f8      	ldr	r0, [r7, #12]
 8000a0c:	371c      	adds	r7, #28
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd90      	pop	{r4, r7, pc}
	...

08000a14 <_ZN7mpu6000C1E19__SPI_HandleTypeDeftP12GPIO_TypeDef>:
 */

#include "mpu6000.h"
#include "printer.h"

mpu6000::mpu6000(SPI_HandleTypeDef _spi, uint16_t _cs_pin, GPIO_TypeDef *_cs_port) : spi{_spi}, cs_pin{_cs_pin}, cs_port{_cs_port}{}
 8000a14:	b084      	sub	sp, #16
 8000a16:	b580      	push	{r7, lr}
 8000a18:	b082      	sub	sp, #8
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	6078      	str	r0, [r7, #4]
 8000a1e:	f107 0014 	add.w	r0, r7, #20
 8000a22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000a26:	4a0d      	ldr	r2, [pc, #52]	; (8000a5c <_ZN7mpu6000C1E19__SPI_HandleTypeDeftP12GPIO_TypeDef+0x48>)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	3304      	adds	r3, #4
 8000a30:	f107 0114 	add.w	r1, r7, #20
 8000a34:	2258      	movs	r2, #88	; 0x58
 8000a36:	4618      	mov	r0, r3
 8000a38:	f00b f83c 	bl	800bab4 <memcpy>
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8000a42:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000a4a:	661a      	str	r2, [r3, #96]	; 0x60
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a58:	b004      	add	sp, #16
 8000a5a:	4770      	bx	lr
 8000a5c:	0800c134 	.word	0x0800c134

08000a60 <_ZN7mpu60008transmitEh>:

HAL_StatusTypeDef mpu6000::transmit(uint8_t datavalue){
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
 8000a68:	460b      	mov	r3, r1
 8000a6a:	70fb      	strb	r3, [r7, #3]
	uint8_t data[1];
	data[0] = datavalue;
 8000a6c:	78fb      	ldrb	r3, [r7, #3]
 8000a6e:	733b      	strb	r3, [r7, #12]

	HAL_StatusTypeDef ret = HAL_SPI_Transmit(&spi, data, 1, 10);
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	1d18      	adds	r0, r3, #4
 8000a74:	f107 010c 	add.w	r1, r7, #12
 8000a78:	230a      	movs	r3, #10
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	f002 ff9b 	bl	80039b6 <HAL_SPI_Transmit>
 8000a80:	4603      	mov	r3, r0
 8000a82:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(1);
 8000a84:	2001      	movs	r0, #1
 8000a86:	f000 fd05 	bl	8001494 <HAL_Delay>

	}else{

	}

	return ret;
 8000a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3710      	adds	r7, #16
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <_ZN7mpu60004initEv>:

int mpu6000::init(){
 8000a94:	b590      	push	{r4, r7, lr}
 8000a96:	b091      	sub	sp, #68	; 0x44
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
	// Deselect I2C comunication
	select();
 8000a9c:	6878      	ldr	r0, [r7, #4]
 8000a9e:	f000 f8cf 	bl	8000c40 <_ZN7mpu60006selectEv>
	transmit(MPUREG_USER_CTRL);
 8000aa2:	216a      	movs	r1, #106	; 0x6a
 8000aa4:	6878      	ldr	r0, [r7, #4]
 8000aa6:	f7ff ffdb 	bl	8000a60 <_ZN7mpu60008transmitEh>
	transmit(BIT_I2C_IF_DIS);
 8000aaa:	2110      	movs	r1, #16
 8000aac:	6878      	ldr	r0, [r7, #4]
 8000aae:	f7ff ffd7 	bl	8000a60 <_ZN7mpu60008transmitEh>
	unselect();
 8000ab2:	6878      	ldr	r0, [r7, #4]
 8000ab4:	f000 f8d5 	bl	8000c62 <_ZN7mpu60008unselectEv>

	select();
 8000ab8:	6878      	ldr	r0, [r7, #4]
 8000aba:	f000 f8c1 	bl	8000c40 <_ZN7mpu60006selectEv>
	transmit(MPUREG_PWR_MGMT_1);
 8000abe:	216b      	movs	r1, #107	; 0x6b
 8000ac0:	6878      	ldr	r0, [r7, #4]
 8000ac2:	f7ff ffcd 	bl	8000a60 <_ZN7mpu60008transmitEh>
	transmit(BIT_H_RESET);
 8000ac6:	2180      	movs	r1, #128	; 0x80
 8000ac8:	6878      	ldr	r0, [r7, #4]
 8000aca:	f7ff ffc9 	bl	8000a60 <_ZN7mpu60008transmitEh>
	unselect();
 8000ace:	6878      	ldr	r0, [r7, #4]
 8000ad0:	f000 f8c7 	bl	8000c62 <_ZN7mpu60008unselectEv>
	HAL_Delay(150);
 8000ad4:	2096      	movs	r0, #150	; 0x96
 8000ad6:	f000 fcdd 	bl	8001494 <HAL_Delay>

	select();
 8000ada:	6878      	ldr	r0, [r7, #4]
 8000adc:	f000 f8b0 	bl	8000c40 <_ZN7mpu60006selectEv>
	transmit(MPUREG_PWR_MGMT_1);
 8000ae0:	216b      	movs	r1, #107	; 0x6b
 8000ae2:	6878      	ldr	r0, [r7, #4]
 8000ae4:	f7ff ffbc 	bl	8000a60 <_ZN7mpu60008transmitEh>
	transmit(MPU_CLK_SEL_PLLGYROZ);
 8000ae8:	2103      	movs	r1, #3
 8000aea:	6878      	ldr	r0, [r7, #4]
 8000aec:	f7ff ffb8 	bl	8000a60 <_ZN7mpu60008transmitEh>
	unselect();
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f000 f8b6 	bl	8000c62 <_ZN7mpu60008unselectEv>

	select();
 8000af6:	6878      	ldr	r0, [r7, #4]
 8000af8:	f000 f8a2 	bl	8000c40 <_ZN7mpu60006selectEv>
	transmit(MPUREG_USER_CTRL);
 8000afc:	216a      	movs	r1, #106	; 0x6a
 8000afe:	6878      	ldr	r0, [r7, #4]
 8000b00:	f7ff ffae 	bl	8000a60 <_ZN7mpu60008transmitEh>
	transmit(BIT_I2C_IF_DIS);
 8000b04:	2110      	movs	r1, #16
 8000b06:	6878      	ldr	r0, [r7, #4]
 8000b08:	f7ff ffaa 	bl	8000a60 <_ZN7mpu60008transmitEh>
	unselect();
 8000b0c:	6878      	ldr	r0, [r7, #4]
 8000b0e:	f000 f8a8 	bl	8000c62 <_ZN7mpu60008unselectEv>

	uint64_t data[1];
	select();
 8000b12:	6878      	ldr	r0, [r7, #4]
 8000b14:	f000 f894 	bl	8000c40 <_ZN7mpu60006selectEv>
	transmit(MPUREG_WHOAMI|READ_FLAG);
 8000b18:	21f5      	movs	r1, #245	; 0xf5
 8000b1a:	6878      	ldr	r0, [r7, #4]
 8000b1c:	f7ff ffa0 	bl	8000a60 <_ZN7mpu60008transmitEh>
	HAL_SPI_Receive(&spi, (uint8_t *)data, 8, 40);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	1d18      	adds	r0, r3, #4
 8000b24:	f107 0108 	add.w	r1, r7, #8
 8000b28:	2328      	movs	r3, #40	; 0x28
 8000b2a:	2208      	movs	r2, #8
 8000b2c:	f003 f87f 	bl	8003c2e <HAL_SPI_Receive>
	unselect();
 8000b30:	6878      	ldr	r0, [r7, #4]
 8000b32:	f000 f896 	bl	8000c62 <_ZN7mpu60008unselectEv>

	select();
 8000b36:	6878      	ldr	r0, [r7, #4]
 8000b38:	f000 f882 	bl	8000c40 <_ZN7mpu60006selectEv>
	transmit(MPUREG_ACCEL_XOUT_H | READ_FLAG);
 8000b3c:	21bb      	movs	r1, #187	; 0xbb
 8000b3e:	6878      	ldr	r0, [r7, #4]
 8000b40:	f7ff ff8e 	bl	8000a60 <_ZN7mpu60008transmitEh>
	HAL_SPI_Receive(&spi, (uint8_t *)data, 2, 40);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	1d18      	adds	r0, r3, #4
 8000b48:	f107 0108 	add.w	r1, r7, #8
 8000b4c:	2328      	movs	r3, #40	; 0x28
 8000b4e:	2202      	movs	r2, #2
 8000b50:	f003 f86d 	bl	8003c2e <HAL_SPI_Receive>
	unselect();
 8000b54:	6878      	ldr	r0, [r7, #4]
 8000b56:	f000 f884 	bl	8000c62 <_ZN7mpu60008unselectEv>

	Vesp::console.log(std::to_string(data[0])+"\n");
 8000b5a:	4b13      	ldr	r3, [pc, #76]	; (8000ba8 <_ZN7mpu60004initEv+0x114>)
 8000b5c:	681c      	ldr	r4, [r3, #0]
 8000b5e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000b62:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000b66:	4608      	mov	r0, r1
 8000b68:	f7ff ff23 	bl	80009b2 <_ZNSt7__cxx119to_stringEy>
 8000b6c:	f107 0310 	add.w	r3, r7, #16
 8000b70:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000b74:	4a0d      	ldr	r2, [pc, #52]	; (8000bac <_ZN7mpu60004initEv+0x118>)
 8000b76:	4618      	mov	r0, r3
 8000b78:	f000 fa10 	bl	8000f9c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8000b7c:	f107 0310 	add.w	r3, r7, #16
 8000b80:	4619      	mov	r1, r3
 8000b82:	4620      	mov	r0, r4
 8000b84:	f000 fa58 	bl	8001038 <_ZN7printer3logENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8000b88:	f107 0310 	add.w	r3, r7, #16
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f00a fea8 	bl	800b8e2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000b92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b96:	4618      	mov	r0, r3
 8000b98:	f00a fea3 	bl	800b8e2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

	return 0;
 8000b9c:	2300      	movs	r3, #0
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3744      	adds	r7, #68	; 0x44
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd90      	pop	{r4, r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	200001ec 	.word	0x200001ec
 8000bac:	0800beac 	.word	0x0800beac

08000bb0 <_ZN7mpu60008read_accEv>:
uint64_t mpu6000::read_acc(){
 8000bb0:	b590      	push	{r4, r7, lr}
 8000bb2:	b091      	sub	sp, #68	; 0x44
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
	uint16_t data[1];
	data[0] = 0;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	81bb      	strh	r3, [r7, #12]

	select();
 8000bbc:	6878      	ldr	r0, [r7, #4]
 8000bbe:	f000 f83f 	bl	8000c40 <_ZN7mpu60006selectEv>
	transmit(MPUREG_ACCEL_XOUT_H | READ_FLAG);
 8000bc2:	21bb      	movs	r1, #187	; 0xbb
 8000bc4:	6878      	ldr	r0, [r7, #4]
 8000bc6:	f7ff ff4b 	bl	8000a60 <_ZN7mpu60008transmitEh>
	HAL_SPI_Receive(&spi, (uint8_t *)data, 2, 40);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	1d18      	adds	r0, r3, #4
 8000bce:	f107 010c 	add.w	r1, r7, #12
 8000bd2:	2328      	movs	r3, #40	; 0x28
 8000bd4:	2202      	movs	r2, #2
 8000bd6:	f003 f82a 	bl	8003c2e <HAL_SPI_Receive>
	unselect();
 8000bda:	6878      	ldr	r0, [r7, #4]
 8000bdc:	f000 f841 	bl	8000c62 <_ZN7mpu60008unselectEv>

	Vesp::console.log(std::to_string(data[0])+"\n");
 8000be0:	4b15      	ldr	r3, [pc, #84]	; (8000c38 <_ZN7mpu60008read_accEv+0x88>)
 8000be2:	681c      	ldr	r4, [r3, #0]
 8000be4:	89bb      	ldrh	r3, [r7, #12]
 8000be6:	461a      	mov	r2, r3
 8000be8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bec:	4611      	mov	r1, r2
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff fea6 	bl	8000940 <_ZNSt7__cxx119to_stringEi>
 8000bf4:	f107 0310 	add.w	r3, r7, #16
 8000bf8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000bfc:	4a0f      	ldr	r2, [pc, #60]	; (8000c3c <_ZN7mpu60008read_accEv+0x8c>)
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f000 f9cc 	bl	8000f9c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8000c04:	f107 0310 	add.w	r3, r7, #16
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4620      	mov	r0, r4
 8000c0c:	f000 fa14 	bl	8001038 <_ZN7printer3logENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8000c10:	f107 0310 	add.w	r3, r7, #16
 8000c14:	4618      	mov	r0, r3
 8000c16:	f00a fe64 	bl	800b8e2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000c1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f00a fe5f 	bl	800b8e2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

	return 0;
 8000c24:	f04f 0200 	mov.w	r2, #0
 8000c28:	f04f 0300 	mov.w	r3, #0
}
 8000c2c:	4610      	mov	r0, r2
 8000c2e:	4619      	mov	r1, r3
 8000c30:	3744      	adds	r7, #68	; 0x44
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd90      	pop	{r4, r7, pc}
 8000c36:	bf00      	nop
 8000c38:	200001ec 	.word	0x200001ec
 8000c3c:	0800beac 	.word	0x0800beac

08000c40 <_ZN7mpu60006selectEv>:

void mpu6000::select(){
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(cs_port, cs_pin, GPIO_PIN_RESET);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8000c52:	2200      	movs	r2, #0
 8000c54:	4619      	mov	r1, r3
 8000c56:	f000 febf 	bl	80019d8 <HAL_GPIO_WritePin>
}
 8000c5a:	bf00      	nop
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <_ZN7mpu60008unselectEv>:

void mpu6000::unselect(){
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b082      	sub	sp, #8
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(cs_port, cs_pin, GPIO_PIN_SET);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8000c74:	2201      	movs	r2, #1
 8000c76:	4619      	mov	r1, r3
 8000c78:	f000 feae 	bl	80019d8 <HAL_GPIO_WritePin>
}
 8000c7c:	bf00      	nop
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <_ZN7mpu6000D1Ev>:

mpu6000::~mpu6000() {
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
 8000c8c:	4a04      	ldr	r2, [pc, #16]	; (8000ca0 <_ZN7mpu6000D1Ev+0x1c>)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4618      	mov	r0, r3
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	0800c134 	.word	0x0800c134

08000ca4 <_ZN7mpu6000D0Ev>:
mpu6000::~mpu6000() {
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
}
 8000cac:	6878      	ldr	r0, [r7, #4]
 8000cae:	f7ff ffe9 	bl	8000c84 <_ZN7mpu6000D1Ev>
 8000cb2:	2164      	movs	r1, #100	; 0x64
 8000cb4:	6878      	ldr	r0, [r7, #4]
 8000cb6:	f00a fd3b 	bl	800b730 <_ZdlPvj>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <_ZNSt8__detail14__to_chars_lenIjEEjT_i>:
namespace __detail
{
  // Generic implementation for arbitrary bases.
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR unsigned
    __to_chars_len(_Tp __value, int __base = 10) noexcept
 8000cc4:	b480      	push	{r7}
 8000cc6:	b087      	sub	sp, #28
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	6039      	str	r1, [r7, #0]
    {
      static_assert(is_integral<_Tp>::value, "implementation bug");
      static_assert(is_unsigned<_Tp>::value, "implementation bug");

      unsigned __n = 1;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	617b      	str	r3, [r7, #20]
      const unsigned __b2 = __base  * __base;
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	fb03 f303 	mul.w	r3, r3, r3
 8000cd8:	613b      	str	r3, [r7, #16]
      const unsigned __b3 = __b2 * __base;
 8000cda:	683a      	ldr	r2, [r7, #0]
 8000cdc:	693b      	ldr	r3, [r7, #16]
 8000cde:	fb02 f303 	mul.w	r3, r2, r3
 8000ce2:	60fb      	str	r3, [r7, #12]
      const unsigned long __b4 = __b3 * __base;
 8000ce4:	683a      	ldr	r2, [r7, #0]
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	fb02 f303 	mul.w	r3, r2, r3
 8000cec:	60bb      	str	r3, [r7, #8]
      for (;;)
	{
	  if (__value < (unsigned)__base) return __n;
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	687a      	ldr	r2, [r7, #4]
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d201      	bcs.n	8000cfa <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x36>
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	e01d      	b.n	8000d36 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  if (__value < __b2) return __n + 1;
 8000cfa:	687a      	ldr	r2, [r7, #4]
 8000cfc:	693b      	ldr	r3, [r7, #16]
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	d202      	bcs.n	8000d08 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x44>
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	3301      	adds	r3, #1
 8000d06:	e016      	b.n	8000d36 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  if (__value < __b3) return __n + 2;
 8000d08:	687a      	ldr	r2, [r7, #4]
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d202      	bcs.n	8000d16 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x52>
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	3302      	adds	r3, #2
 8000d14:	e00f      	b.n	8000d36 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  if (__value < __b4) return __n + 3;
 8000d16:	687a      	ldr	r2, [r7, #4]
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	429a      	cmp	r2, r3
 8000d1c:	d202      	bcs.n	8000d24 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x60>
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	3303      	adds	r3, #3
 8000d22:	e008      	b.n	8000d36 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  __value /= __b4;
 8000d24:	687a      	ldr	r2, [r7, #4]
 8000d26:	68bb      	ldr	r3, [r7, #8]
 8000d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d2c:	607b      	str	r3, [r7, #4]
	  __n += 4;
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	3304      	adds	r3, #4
 8000d32:	617b      	str	r3, [r7, #20]
	  if (__value < (unsigned)__base) return __n;
 8000d34:	e7db      	b.n	8000cee <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x2a>
	}
    }
 8000d36:	4618      	mov	r0, r3
 8000d38:	371c      	adds	r7, #28
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
	...

08000d44 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_>:
  // Write an unsigned integer value to the range [first,first+len).
  // The caller is required to provide a buffer of exactly the right size
  // (which can be determined by the __to_chars_len function).
  template<typename _Tp>
    void
    __to_chars_10_impl(char* __first, unsigned __len, _Tp __val) noexcept
 8000d44:	b480      	push	{r7}
 8000d46:	b089      	sub	sp, #36	; 0x24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	60f8      	str	r0, [r7, #12]
 8000d4c:	60b9      	str	r1, [r7, #8]
 8000d4e:	607a      	str	r2, [r7, #4]
	"0001020304050607080910111213141516171819"
	"2021222324252627282930313233343536373839"
	"4041424344454647484950515253545556575859"
	"6061626364656667686970717273747576777879"
	"8081828384858687888990919293949596979899";
      unsigned __pos = __len - 1;
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	3b01      	subs	r3, #1
 8000d54:	61fb      	str	r3, [r7, #28]
      while (__val >= 100)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2b63      	cmp	r3, #99	; 0x63
 8000d5a:	d925      	bls.n	8000da8 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x64>
	{
	  auto const __num = (__val % 100) * 2;
 8000d5c:	687a      	ldr	r2, [r7, #4]
 8000d5e:	4b22      	ldr	r3, [pc, #136]	; (8000de8 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa4>)
 8000d60:	fba3 1302 	umull	r1, r3, r3, r2
 8000d64:	095b      	lsrs	r3, r3, #5
 8000d66:	2164      	movs	r1, #100	; 0x64
 8000d68:	fb01 f303 	mul.w	r3, r1, r3
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	005b      	lsls	r3, r3, #1
 8000d70:	61bb      	str	r3, [r7, #24]
	  __val /= 100;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4a1c      	ldr	r2, [pc, #112]	; (8000de8 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa4>)
 8000d76:	fba2 2303 	umull	r2, r3, r2, r3
 8000d7a:	095b      	lsrs	r3, r3, #5
 8000d7c:	607b      	str	r3, [r7, #4]
	  __first[__pos] = __digits[__num + 1];
 8000d7e:	69bb      	ldr	r3, [r7, #24]
 8000d80:	1c5a      	adds	r2, r3, #1
 8000d82:	68f9      	ldr	r1, [r7, #12]
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	440b      	add	r3, r1
 8000d88:	4918      	ldr	r1, [pc, #96]	; (8000dec <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 8000d8a:	5c8a      	ldrb	r2, [r1, r2]
 8000d8c:	701a      	strb	r2, [r3, #0]
	  __first[__pos - 1] = __digits[__num];
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	3b01      	subs	r3, #1
 8000d92:	68fa      	ldr	r2, [r7, #12]
 8000d94:	4413      	add	r3, r2
 8000d96:	4915      	ldr	r1, [pc, #84]	; (8000dec <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 8000d98:	69ba      	ldr	r2, [r7, #24]
 8000d9a:	440a      	add	r2, r1
 8000d9c:	7812      	ldrb	r2, [r2, #0]
 8000d9e:	701a      	strb	r2, [r3, #0]
	  __pos -= 2;
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	3b02      	subs	r3, #2
 8000da4:	61fb      	str	r3, [r7, #28]
      while (__val >= 100)
 8000da6:	e7d6      	b.n	8000d56 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x12>
	}
      if (__val >= 10)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2b09      	cmp	r3, #9
 8000dac:	d910      	bls.n	8000dd0 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x8c>
	{
	  auto const __num = __val * 2;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	617b      	str	r3, [r7, #20]
	  __first[1] = __digits[__num + 1];
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	1c5a      	adds	r2, r3, #1
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	490b      	ldr	r1, [pc, #44]	; (8000dec <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 8000dbe:	5c8a      	ldrb	r2, [r1, r2]
 8000dc0:	701a      	strb	r2, [r3, #0]
	  __first[0] = __digits[__num];
 8000dc2:	4a0a      	ldr	r2, [pc, #40]	; (8000dec <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	781a      	ldrb	r2, [r3, #0]
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	701a      	strb	r2, [r3, #0]
	}
      else
	__first[0] = '0' + __val;
    }
 8000dce:	e005      	b.n	8000ddc <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x98>
	__first[0] = '0' + __val;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	3330      	adds	r3, #48	; 0x30
 8000dd6:	b2da      	uxtb	r2, r3
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	701a      	strb	r2, [r3, #0]
    }
 8000ddc:	bf00      	nop
 8000dde:	3724      	adds	r7, #36	; 0x24
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	51eb851f 	.word	0x51eb851f
 8000dec:	0800bf94 	.word	0x0800bf94

08000df0 <_ZNSt8__detail14__to_chars_lenIyEEjT_i>:
    __to_chars_len(_Tp __value, int __base = 10) noexcept
 8000df0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000df4:	b08c      	sub	sp, #48	; 0x30
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8000dfc:	617a      	str	r2, [r7, #20]
      unsigned __n = 1;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	62fb      	str	r3, [r7, #44]	; 0x2c
      const unsigned __b2 = __base  * __base;
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	fb03 f303 	mul.w	r3, r3, r3
 8000e08:	62bb      	str	r3, [r7, #40]	; 0x28
      const unsigned __b3 = __b2 * __base;
 8000e0a:	697a      	ldr	r2, [r7, #20]
 8000e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e0e:	fb02 f303 	mul.w	r3, r2, r3
 8000e12:	627b      	str	r3, [r7, #36]	; 0x24
      const unsigned long __b4 = __b3 * __base;
 8000e14:	697a      	ldr	r2, [r7, #20]
 8000e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e18:	fb02 f303 	mul.w	r3, r2, r3
 8000e1c:	623b      	str	r3, [r7, #32]
	  if (__value < (unsigned)__base) return __n;
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	2200      	movs	r2, #0
 8000e22:	461c      	mov	r4, r3
 8000e24:	4615      	mov	r5, r2
 8000e26:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000e2a:	42a2      	cmp	r2, r4
 8000e2c:	41ab      	sbcs	r3, r5
 8000e2e:	d201      	bcs.n	8000e34 <_ZNSt8__detail14__to_chars_lenIyEEjT_i+0x44>
 8000e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e32:	e039      	b.n	8000ea8 <_ZNSt8__detail14__to_chars_lenIyEEjT_i+0xb8>
	  if (__value < __b2) return __n + 1;
 8000e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e36:	2200      	movs	r2, #0
 8000e38:	4698      	mov	r8, r3
 8000e3a:	4691      	mov	r9, r2
 8000e3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000e40:	4542      	cmp	r2, r8
 8000e42:	eb73 0309 	sbcs.w	r3, r3, r9
 8000e46:	d202      	bcs.n	8000e4e <_ZNSt8__detail14__to_chars_lenIyEEjT_i+0x5e>
 8000e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	e02c      	b.n	8000ea8 <_ZNSt8__detail14__to_chars_lenIyEEjT_i+0xb8>
	  if (__value < __b3) return __n + 2;
 8000e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e50:	2200      	movs	r2, #0
 8000e52:	469a      	mov	sl, r3
 8000e54:	4693      	mov	fp, r2
 8000e56:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000e5a:	4552      	cmp	r2, sl
 8000e5c:	eb73 030b 	sbcs.w	r3, r3, fp
 8000e60:	d202      	bcs.n	8000e68 <_ZNSt8__detail14__to_chars_lenIyEEjT_i+0x78>
 8000e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e64:	3302      	adds	r3, #2
 8000e66:	e01f      	b.n	8000ea8 <_ZNSt8__detail14__to_chars_lenIyEEjT_i+0xb8>
	  if (__value < __b4) return __n + 3;
 8000e68:	6a3b      	ldr	r3, [r7, #32]
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	60bb      	str	r3, [r7, #8]
 8000e6e:	60fa      	str	r2, [r7, #12]
 8000e70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000e74:	68b9      	ldr	r1, [r7, #8]
 8000e76:	428a      	cmp	r2, r1
 8000e78:	68f9      	ldr	r1, [r7, #12]
 8000e7a:	418b      	sbcs	r3, r1
 8000e7c:	d202      	bcs.n	8000e84 <_ZNSt8__detail14__to_chars_lenIyEEjT_i+0x94>
 8000e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e80:	3303      	adds	r3, #3
 8000e82:	e011      	b.n	8000ea8 <_ZNSt8__detail14__to_chars_lenIyEEjT_i+0xb8>
	  __value /= __b4;
 8000e84:	6a3b      	ldr	r3, [r7, #32]
 8000e86:	2200      	movs	r2, #0
 8000e88:	603b      	str	r3, [r7, #0]
 8000e8a:	607a      	str	r2, [r7, #4]
 8000e8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000e90:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000e94:	f7ff f9a4 	bl	80001e0 <__aeabi_uldivmod>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	460b      	mov	r3, r1
 8000e9c:	e9c7 2306 	strd	r2, r3, [r7, #24]
	  __n += 4;
 8000ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ea2:	3304      	adds	r3, #4
 8000ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if (__value < (unsigned)__base) return __n;
 8000ea6:	e7ba      	b.n	8000e1e <_ZNSt8__detail14__to_chars_lenIyEEjT_i+0x2e>
    }
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3730      	adds	r7, #48	; 0x30
 8000eac:	46bd      	mov	sp, r7
 8000eae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08000eb4 <_ZNSt8__detail18__to_chars_10_implIyEEvPcjT_>:
    __to_chars_10_impl(char* __first, unsigned __len, _Tp __val) noexcept
 8000eb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000eb8:	b08c      	sub	sp, #48	; 0x30
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6178      	str	r0, [r7, #20]
 8000ebe:	6139      	str	r1, [r7, #16]
 8000ec0:	e9c7 2302 	strd	r2, r3, [r7, #8]
      unsigned __pos = __len - 1;
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	3b01      	subs	r3, #1
 8000ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
      while (__val >= 100)
 8000eca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000ece:	2a64      	cmp	r2, #100	; 0x64
 8000ed0:	f173 0300 	sbcs.w	r3, r3, #0
 8000ed4:	d335      	bcc.n	8000f42 <_ZNSt8__detail18__to_chars_10_implIyEEvPcjT_+0x8e>
	  auto const __num = (__val % 100) * 2;
 8000ed6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000eda:	f04f 0264 	mov.w	r2, #100	; 0x64
 8000ede:	f04f 0300 	mov.w	r3, #0
 8000ee2:	f7ff f97d 	bl	80001e0 <__aeabi_uldivmod>
 8000ee6:	1891      	adds	r1, r2, r2
 8000ee8:	6039      	str	r1, [r7, #0]
 8000eea:	415b      	adcs	r3, r3
 8000eec:	607b      	str	r3, [r7, #4]
 8000eee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000ef2:	e9c7 2308 	strd	r2, r3, [r7, #32]
	  __val /= 100;
 8000ef6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000efa:	f04f 0264 	mov.w	r2, #100	; 0x64
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	f7ff f96d 	bl	80001e0 <__aeabi_uldivmod>
 8000f06:	4602      	mov	r2, r0
 8000f08:	460b      	mov	r3, r1
 8000f0a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	  __first[__pos] = __digits[__num + 1];
 8000f0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000f12:	f112 0a01 	adds.w	sl, r2, #1
 8000f16:	f143 0b00 	adc.w	fp, r3, #0
 8000f1a:	697a      	ldr	r2, [r7, #20]
 8000f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f1e:	4413      	add	r3, r2
 8000f20:	4a1d      	ldr	r2, [pc, #116]	; (8000f98 <_ZNSt8__detail18__to_chars_10_implIyEEvPcjT_+0xe4>)
 8000f22:	4452      	add	r2, sl
 8000f24:	7812      	ldrb	r2, [r2, #0]
 8000f26:	701a      	strb	r2, [r3, #0]
	  __first[__pos - 1] = __digits[__num];
 8000f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f2a:	3b01      	subs	r3, #1
 8000f2c:	697a      	ldr	r2, [r7, #20]
 8000f2e:	4413      	add	r3, r2
 8000f30:	4919      	ldr	r1, [pc, #100]	; (8000f98 <_ZNSt8__detail18__to_chars_10_implIyEEvPcjT_+0xe4>)
 8000f32:	6a3a      	ldr	r2, [r7, #32]
 8000f34:	440a      	add	r2, r1
 8000f36:	7812      	ldrb	r2, [r2, #0]
 8000f38:	701a      	strb	r2, [r3, #0]
	  __pos -= 2;
 8000f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f3c:	3b02      	subs	r3, #2
 8000f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
      while (__val >= 100)
 8000f40:	e7c3      	b.n	8000eca <_ZNSt8__detail18__to_chars_10_implIyEEvPcjT_+0x16>
      if (__val >= 10)
 8000f42:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000f46:	2a0a      	cmp	r2, #10
 8000f48:	f173 0300 	sbcs.w	r3, r3, #0
 8000f4c:	d319      	bcc.n	8000f82 <_ZNSt8__detail18__to_chars_10_implIyEEvPcjT_+0xce>
	  auto const __num = __val * 2;
 8000f4e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000f52:	eb12 0802 	adds.w	r8, r2, r2
 8000f56:	eb43 0903 	adc.w	r9, r3, r3
 8000f5a:	e9c7 8906 	strd	r8, r9, [r7, #24]
	  __first[1] = __digits[__num + 1];
 8000f5e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000f62:	1c54      	adds	r4, r2, #1
 8000f64:	f143 0500 	adc.w	r5, r3, #0
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	4a0a      	ldr	r2, [pc, #40]	; (8000f98 <_ZNSt8__detail18__to_chars_10_implIyEEvPcjT_+0xe4>)
 8000f6e:	4422      	add	r2, r4
 8000f70:	7812      	ldrb	r2, [r2, #0]
 8000f72:	701a      	strb	r2, [r3, #0]
	  __first[0] = __digits[__num];
 8000f74:	4a08      	ldr	r2, [pc, #32]	; (8000f98 <_ZNSt8__detail18__to_chars_10_implIyEEvPcjT_+0xe4>)
 8000f76:	69bb      	ldr	r3, [r7, #24]
 8000f78:	4413      	add	r3, r2
 8000f7a:	781a      	ldrb	r2, [r3, #0]
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	701a      	strb	r2, [r3, #0]
    }
 8000f80:	e004      	b.n	8000f8c <_ZNSt8__detail18__to_chars_10_implIyEEvPcjT_+0xd8>
	__first[0] = '0' + __val;
 8000f82:	7a3b      	ldrb	r3, [r7, #8]
 8000f84:	3330      	adds	r3, #48	; 0x30
 8000f86:	b2da      	uxtb	r2, r3
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	701a      	strb	r2, [r3, #0]
    }
 8000f8c:	bf00      	nop
 8000f8e:	3730      	adds	r7, #48	; 0x30
 8000f90:	46bd      	mov	sp, r7
 8000f92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000f96:	bf00      	nop
 8000f98:	0800c060 	.word	0x0800c060

08000f9c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>:
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
    { return std::move(__lhs.append(__rhs)); }
 8000fa8:	6879      	ldr	r1, [r7, #4]
 8000faa:	68b8      	ldr	r0, [r7, #8]
 8000fac:	f00a fcc8 	bl	800b940 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f000 f809 	bl	8000fca <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	4619      	mov	r1, r3
 8000fbc:	68f8      	ldr	r0, [r7, #12]
 8000fbe:	f00a fc76 	bl	800b8ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8000fc2:	68f8      	ldr	r0, [r7, #12]
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8000fca:	b480      	push	{r7}
 8000fcc:	b083      	sub	sp, #12
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <_Z41__static_initialization_and_destruction_0ii>:
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	6039      	str	r1, [r7, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d109      	bne.n	8001004 <_Z41__static_initialization_and_destruction_0ii+0x24>
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d104      	bne.n	8001004 <_Z41__static_initialization_and_destruction_0ii+0x24>
 8000ffa:	f000 f833 	bl	8001064 <_ZN4Vesp10getprinterEv>
 8000ffe:	4603      	mov	r3, r0
 8001000:	4a02      	ldr	r2, [pc, #8]	; (800100c <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8001002:	6013      	str	r3, [r2, #0]
 8001004:	bf00      	nop
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	200001ec 	.word	0x200001ec

08001010 <_GLOBAL__sub_I__ZN7mpu6000C2E19__SPI_HandleTypeDeftP12GPIO_TypeDef>:
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
 8001014:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001018:	2001      	movs	r0, #1
 800101a:	f7ff ffe1 	bl	8000fe0 <_Z41__static_initialization_and_destruction_0ii>
 800101e:	bd80      	pop	{r7, pc}

08001020 <_ZN7printer13get_singletonEv>:
	static printer *get_singleton(void){
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
		return singleton;
 8001024:	4b03      	ldr	r3, [pc, #12]	; (8001034 <_ZN7printer13get_singletonEv+0x14>)
 8001026:	681b      	ldr	r3, [r3, #0]
	}
 8001028:	4618      	mov	r0, r3
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	200001f0 	.word	0x200001f0

08001038 <_ZN7printer3logENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
 *      Author: giovannirasera
 */

#include "printer.h"

void printer::log(std::string toprint){
 8001038:	b590      	push	{r4, r7, lr}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	6039      	str	r1, [r7, #0]
	CDC_Transmit_FS((uint8_t *)toprint.c_str(), toprint.length());
 8001042:	6838      	ldr	r0, [r7, #0]
 8001044:	f00a fc92 	bl	800b96c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8001048:	4604      	mov	r4, r0
 800104a:	6838      	ldr	r0, [r7, #0]
 800104c:	f00a fc51 	bl	800b8f2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8001050:	4603      	mov	r3, r0
 8001052:	b29b      	uxth	r3, r3
 8001054:	4619      	mov	r1, r3
 8001056:	4620      	mov	r0, r4
 8001058:	f009 ff0e 	bl	800ae78 <CDC_Transmit_FS>
}
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	bd90      	pop	{r4, r7, pc}

08001064 <_ZN4Vesp10getprinterEv>:

namespace Vesp{
	printer &getprinter(){
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
		return *printer::get_singleton();
 8001068:	f7ff ffda 	bl	8001020 <_ZN7printer13get_singletonEv>
 800106c:	4603      	mov	r3, r0
	}
 800106e:	4618      	mov	r0, r3
 8001070:	bd80      	pop	{r7, pc}
	...

08001074 <_Z41__static_initialization_and_destruction_0ii>:

};
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	6039      	str	r1, [r7, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2b01      	cmp	r3, #1
 8001082:	d109      	bne.n	8001098 <_Z41__static_initialization_and_destruction_0ii+0x24>
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800108a:	4293      	cmp	r3, r2
 800108c:	d104      	bne.n	8001098 <_Z41__static_initialization_and_destruction_0ii+0x24>
	static printer& console = getprinter();
 800108e:	f7ff ffe9 	bl	8001064 <_ZN4Vesp10getprinterEv>
 8001092:	4603      	mov	r3, r0
 8001094:	4a02      	ldr	r2, [pc, #8]	; (80010a0 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8001096:	6013      	str	r3, [r2, #0]
 8001098:	bf00      	nop
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	200001f4 	.word	0x200001f4

080010a4 <_GLOBAL__sub_I__ZN7printer3logENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80010ac:	2001      	movs	r0, #1
 80010ae:	f7ff ffe1 	bl	8001074 <_Z41__static_initialization_and_destruction_0ii>
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	607b      	str	r3, [r7, #4]
 80010be:	4b12      	ldr	r3, [pc, #72]	; (8001108 <HAL_MspInit+0x54>)
 80010c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c2:	4a11      	ldr	r2, [pc, #68]	; (8001108 <HAL_MspInit+0x54>)
 80010c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010c8:	6453      	str	r3, [r2, #68]	; 0x44
 80010ca:	4b0f      	ldr	r3, [pc, #60]	; (8001108 <HAL_MspInit+0x54>)
 80010cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010d2:	607b      	str	r3, [r7, #4]
 80010d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	603b      	str	r3, [r7, #0]
 80010da:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <HAL_MspInit+0x54>)
 80010dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010de:	4a0a      	ldr	r2, [pc, #40]	; (8001108 <HAL_MspInit+0x54>)
 80010e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010e4:	6413      	str	r3, [r2, #64]	; 0x40
 80010e6:	4b08      	ldr	r3, [pc, #32]	; (8001108 <HAL_MspInit+0x54>)
 80010e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ee:	603b      	str	r3, [r7, #0]
 80010f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010f2:	2200      	movs	r2, #0
 80010f4:	210f      	movs	r1, #15
 80010f6:	f06f 0001 	mvn.w	r0, #1
 80010fa:	f000 faa7 	bl	800164c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40023800 	.word	0x40023800

0800110c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b08a      	sub	sp, #40	; 0x28
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001114:	f107 0314 	add.w	r3, r7, #20
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]
 8001122:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a19      	ldr	r2, [pc, #100]	; (8001190 <HAL_SPI_MspInit+0x84>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d12b      	bne.n	8001186 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	613b      	str	r3, [r7, #16]
 8001132:	4b18      	ldr	r3, [pc, #96]	; (8001194 <HAL_SPI_MspInit+0x88>)
 8001134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001136:	4a17      	ldr	r2, [pc, #92]	; (8001194 <HAL_SPI_MspInit+0x88>)
 8001138:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800113c:	6453      	str	r3, [r2, #68]	; 0x44
 800113e:	4b15      	ldr	r3, [pc, #84]	; (8001194 <HAL_SPI_MspInit+0x88>)
 8001140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001142:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001146:	613b      	str	r3, [r7, #16]
 8001148:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	4b11      	ldr	r3, [pc, #68]	; (8001194 <HAL_SPI_MspInit+0x88>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	4a10      	ldr	r2, [pc, #64]	; (8001194 <HAL_SPI_MspInit+0x88>)
 8001154:	f043 0301 	orr.w	r3, r3, #1
 8001158:	6313      	str	r3, [r2, #48]	; 0x30
 800115a:	4b0e      	ldr	r3, [pc, #56]	; (8001194 <HAL_SPI_MspInit+0x88>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001166:	23e0      	movs	r3, #224	; 0xe0
 8001168:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116a:	2302      	movs	r3, #2
 800116c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001172:	2303      	movs	r3, #3
 8001174:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001176:	2305      	movs	r3, #5
 8001178:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117a:	f107 0314 	add.w	r3, r7, #20
 800117e:	4619      	mov	r1, r3
 8001180:	4805      	ldr	r0, [pc, #20]	; (8001198 <HAL_SPI_MspInit+0x8c>)
 8001182:	f000 fa8d 	bl	80016a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001186:	bf00      	nop
 8001188:	3728      	adds	r7, #40	; 0x28
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40013000 	.word	0x40013000
 8001194:	40023800 	.word	0x40023800
 8001198:	40020000 	.word	0x40020000

0800119c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08e      	sub	sp, #56	; 0x38
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80011a4:	2300      	movs	r3, #0
 80011a6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80011a8:	2300      	movs	r3, #0
 80011aa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80011ac:	2300      	movs	r3, #0
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	4b33      	ldr	r3, [pc, #204]	; (8001280 <HAL_InitTick+0xe4>)
 80011b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b4:	4a32      	ldr	r2, [pc, #200]	; (8001280 <HAL_InitTick+0xe4>)
 80011b6:	f043 0310 	orr.w	r3, r3, #16
 80011ba:	6413      	str	r3, [r2, #64]	; 0x40
 80011bc:	4b30      	ldr	r3, [pc, #192]	; (8001280 <HAL_InitTick+0xe4>)
 80011be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c0:	f003 0310 	and.w	r3, r3, #16
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011c8:	f107 0210 	add.w	r2, r7, #16
 80011cc:	f107 0314 	add.w	r3, r7, #20
 80011d0:	4611      	mov	r1, r2
 80011d2:	4618      	mov	r0, r3
 80011d4:	f002 fb34 	bl	8003840 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80011d8:	6a3b      	ldr	r3, [r7, #32]
 80011da:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80011dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d103      	bne.n	80011ea <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80011e2:	f002 fb19 	bl	8003818 <HAL_RCC_GetPCLK1Freq>
 80011e6:	6378      	str	r0, [r7, #52]	; 0x34
 80011e8:	e004      	b.n	80011f4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80011ea:	f002 fb15 	bl	8003818 <HAL_RCC_GetPCLK1Freq>
 80011ee:	4603      	mov	r3, r0
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011f6:	4a23      	ldr	r2, [pc, #140]	; (8001284 <HAL_InitTick+0xe8>)
 80011f8:	fba2 2303 	umull	r2, r3, r2, r3
 80011fc:	0c9b      	lsrs	r3, r3, #18
 80011fe:	3b01      	subs	r3, #1
 8001200:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001202:	4b21      	ldr	r3, [pc, #132]	; (8001288 <HAL_InitTick+0xec>)
 8001204:	4a21      	ldr	r2, [pc, #132]	; (800128c <HAL_InitTick+0xf0>)
 8001206:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001208:	4b1f      	ldr	r3, [pc, #124]	; (8001288 <HAL_InitTick+0xec>)
 800120a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800120e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001210:	4a1d      	ldr	r2, [pc, #116]	; (8001288 <HAL_InitTick+0xec>)
 8001212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001214:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001216:	4b1c      	ldr	r3, [pc, #112]	; (8001288 <HAL_InitTick+0xec>)
 8001218:	2200      	movs	r2, #0
 800121a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800121c:	4b1a      	ldr	r3, [pc, #104]	; (8001288 <HAL_InitTick+0xec>)
 800121e:	2200      	movs	r2, #0
 8001220:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001222:	4b19      	ldr	r3, [pc, #100]	; (8001288 <HAL_InitTick+0xec>)
 8001224:	2200      	movs	r2, #0
 8001226:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001228:	4817      	ldr	r0, [pc, #92]	; (8001288 <HAL_InitTick+0xec>)
 800122a:	f003 f8e3 	bl	80043f4 <HAL_TIM_Base_Init>
 800122e:	4603      	mov	r3, r0
 8001230:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001234:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001238:	2b00      	cmp	r3, #0
 800123a:	d11b      	bne.n	8001274 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800123c:	4812      	ldr	r0, [pc, #72]	; (8001288 <HAL_InitTick+0xec>)
 800123e:	f003 f933 	bl	80044a8 <HAL_TIM_Base_Start_IT>
 8001242:	4603      	mov	r3, r0
 8001244:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001248:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800124c:	2b00      	cmp	r3, #0
 800124e:	d111      	bne.n	8001274 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001250:	2036      	movs	r0, #54	; 0x36
 8001252:	f000 fa17 	bl	8001684 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2b0f      	cmp	r3, #15
 800125a:	d808      	bhi.n	800126e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800125c:	2200      	movs	r2, #0
 800125e:	6879      	ldr	r1, [r7, #4]
 8001260:	2036      	movs	r0, #54	; 0x36
 8001262:	f000 f9f3 	bl	800164c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001266:	4a0a      	ldr	r2, [pc, #40]	; (8001290 <HAL_InitTick+0xf4>)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6013      	str	r3, [r2, #0]
 800126c:	e002      	b.n	8001274 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001274:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001278:	4618      	mov	r0, r3
 800127a:	3738      	adds	r7, #56	; 0x38
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	40023800 	.word	0x40023800
 8001284:	431bde83 	.word	0x431bde83
 8001288:	200001f8 	.word	0x200001f8
 800128c:	40001000 	.word	0x40001000
 8001290:	20000004 	.word	0x20000004

08001294 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001298:	e7fe      	b.n	8001298 <NMI_Handler+0x4>

0800129a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800129a:	b480      	push	{r7}
 800129c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800129e:	e7fe      	b.n	800129e <HardFault_Handler+0x4>

080012a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012a4:	e7fe      	b.n	80012a4 <MemManage_Handler+0x4>

080012a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012a6:	b480      	push	{r7}
 80012a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012aa:	e7fe      	b.n	80012aa <BusFault_Handler+0x4>

080012ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012b0:	e7fe      	b.n	80012b0 <UsageFault_Handler+0x4>

080012b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012b2:	b480      	push	{r7}
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80012c4:	4802      	ldr	r0, [pc, #8]	; (80012d0 <TIM6_DAC_IRQHandler+0x10>)
 80012c6:	f003 f95f 	bl	8004588 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	200001f8 	.word	0x200001f8

080012d4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80012d8:	4802      	ldr	r0, [pc, #8]	; (80012e4 <OTG_FS_IRQHandler+0x10>)
 80012da:	f000 fd00 	bl	8001cde <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20006138 	.word	0x20006138

080012e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
	return 1;
 80012ec:	2301      	movs	r3, #1
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <_kill>:

int _kill(int pid, int sig)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001302:	f00a fb9b 	bl	800ba3c <__errno>
 8001306:	4603      	mov	r3, r0
 8001308:	2216      	movs	r2, #22
 800130a:	601a      	str	r2, [r3, #0]
	return -1;
 800130c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001310:	4618      	mov	r0, r3
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <_exit>:

void _exit (int status)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001320:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f7ff ffe7 	bl	80012f8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800132a:	e7fe      	b.n	800132a <_exit+0x12>

0800132c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b086      	sub	sp, #24
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001334:	4a14      	ldr	r2, [pc, #80]	; (8001388 <_sbrk+0x5c>)
 8001336:	4b15      	ldr	r3, [pc, #84]	; (800138c <_sbrk+0x60>)
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001340:	4b13      	ldr	r3, [pc, #76]	; (8001390 <_sbrk+0x64>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d102      	bne.n	800134e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001348:	4b11      	ldr	r3, [pc, #68]	; (8001390 <_sbrk+0x64>)
 800134a:	4a12      	ldr	r2, [pc, #72]	; (8001394 <_sbrk+0x68>)
 800134c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800134e:	4b10      	ldr	r3, [pc, #64]	; (8001390 <_sbrk+0x64>)
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4413      	add	r3, r2
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	429a      	cmp	r2, r3
 800135a:	d207      	bcs.n	800136c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800135c:	f00a fb6e 	bl	800ba3c <__errno>
 8001360:	4603      	mov	r3, r0
 8001362:	220c      	movs	r2, #12
 8001364:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001366:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800136a:	e009      	b.n	8001380 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800136c:	4b08      	ldr	r3, [pc, #32]	; (8001390 <_sbrk+0x64>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001372:	4b07      	ldr	r3, [pc, #28]	; (8001390 <_sbrk+0x64>)
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4413      	add	r3, r2
 800137a:	4a05      	ldr	r2, [pc, #20]	; (8001390 <_sbrk+0x64>)
 800137c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800137e:	68fb      	ldr	r3, [r7, #12]
}
 8001380:	4618      	mov	r0, r3
 8001382:	3718      	adds	r7, #24
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	20020000 	.word	0x20020000
 800138c:	00000400 	.word	0x00000400
 8001390:	20000240 	.word	0x20000240
 8001394:	20006878 	.word	0x20006878

08001398 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800139c:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <SystemInit+0x20>)
 800139e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013a2:	4a05      	ldr	r2, [pc, #20]	; (80013b8 <SystemInit+0x20>)
 80013a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	e000ed00 	.word	0xe000ed00

080013bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80013bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013c0:	480d      	ldr	r0, [pc, #52]	; (80013f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013c2:	490e      	ldr	r1, [pc, #56]	; (80013fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013c4:	4a0e      	ldr	r2, [pc, #56]	; (8001400 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013c8:	e002      	b.n	80013d0 <LoopCopyDataInit>

080013ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ce:	3304      	adds	r3, #4

080013d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013d4:	d3f9      	bcc.n	80013ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013d6:	4a0b      	ldr	r2, [pc, #44]	; (8001404 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013d8:	4c0b      	ldr	r4, [pc, #44]	; (8001408 <LoopFillZerobss+0x26>)
  movs r3, #0
 80013da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013dc:	e001      	b.n	80013e2 <LoopFillZerobss>

080013de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013e0:	3204      	adds	r2, #4

080013e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013e4:	d3fb      	bcc.n	80013de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013e6:	f7ff ffd7 	bl	8001398 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013ea:	f00a fb2d 	bl	800ba48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013ee:	f7ff f879 	bl	80004e4 <main>
  bx  lr    
 80013f2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80013f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013fc:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 8001400:	0800c228 	.word	0x0800c228
  ldr r2, =_sbss
 8001404:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 8001408:	20006878 	.word	0x20006878

0800140c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800140c:	e7fe      	b.n	800140c <ADC_IRQHandler>
	...

08001410 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001414:	4b0e      	ldr	r3, [pc, #56]	; (8001450 <HAL_Init+0x40>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a0d      	ldr	r2, [pc, #52]	; (8001450 <HAL_Init+0x40>)
 800141a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800141e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001420:	4b0b      	ldr	r3, [pc, #44]	; (8001450 <HAL_Init+0x40>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a0a      	ldr	r2, [pc, #40]	; (8001450 <HAL_Init+0x40>)
 8001426:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800142a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800142c:	4b08      	ldr	r3, [pc, #32]	; (8001450 <HAL_Init+0x40>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a07      	ldr	r2, [pc, #28]	; (8001450 <HAL_Init+0x40>)
 8001432:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001436:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001438:	2003      	movs	r0, #3
 800143a:	f000 f8fc 	bl	8001636 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800143e:	200f      	movs	r0, #15
 8001440:	f7ff feac 	bl	800119c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001444:	f7ff fe36 	bl	80010b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001448:	2300      	movs	r3, #0
}
 800144a:	4618      	mov	r0, r3
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40023c00 	.word	0x40023c00

08001454 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001458:	4b06      	ldr	r3, [pc, #24]	; (8001474 <HAL_IncTick+0x20>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	461a      	mov	r2, r3
 800145e:	4b06      	ldr	r3, [pc, #24]	; (8001478 <HAL_IncTick+0x24>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4413      	add	r3, r2
 8001464:	4a04      	ldr	r2, [pc, #16]	; (8001478 <HAL_IncTick+0x24>)
 8001466:	6013      	str	r3, [r2, #0]
}
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	20000008 	.word	0x20000008
 8001478:	20000244 	.word	0x20000244

0800147c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  return uwTick;
 8001480:	4b03      	ldr	r3, [pc, #12]	; (8001490 <HAL_GetTick+0x14>)
 8001482:	681b      	ldr	r3, [r3, #0]
}
 8001484:	4618      	mov	r0, r3
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	20000244 	.word	0x20000244

08001494 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800149c:	f7ff ffee 	bl	800147c <HAL_GetTick>
 80014a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80014ac:	d005      	beq.n	80014ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014ae:	4b0a      	ldr	r3, [pc, #40]	; (80014d8 <HAL_Delay+0x44>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	461a      	mov	r2, r3
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	4413      	add	r3, r2
 80014b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014ba:	bf00      	nop
 80014bc:	f7ff ffde 	bl	800147c <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	68fa      	ldr	r2, [r7, #12]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d8f7      	bhi.n	80014bc <HAL_Delay+0x28>
  {
  }
}
 80014cc:	bf00      	nop
 80014ce:	bf00      	nop
 80014d0:	3710      	adds	r7, #16
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	20000008 	.word	0x20000008

080014dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f003 0307 	and.w	r3, r3, #7
 80014ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014ec:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <__NVIC_SetPriorityGrouping+0x44>)
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014f2:	68ba      	ldr	r2, [r7, #8]
 80014f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014f8:	4013      	ands	r3, r2
 80014fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001504:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001508:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800150c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800150e:	4a04      	ldr	r2, [pc, #16]	; (8001520 <__NVIC_SetPriorityGrouping+0x44>)
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	60d3      	str	r3, [r2, #12]
}
 8001514:	bf00      	nop
 8001516:	3714      	adds	r7, #20
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	e000ed00 	.word	0xe000ed00

08001524 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001528:	4b04      	ldr	r3, [pc, #16]	; (800153c <__NVIC_GetPriorityGrouping+0x18>)
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	0a1b      	lsrs	r3, r3, #8
 800152e:	f003 0307 	and.w	r3, r3, #7
}
 8001532:	4618      	mov	r0, r3
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	e000ed00 	.word	0xe000ed00

08001540 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800154a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154e:	2b00      	cmp	r3, #0
 8001550:	db0b      	blt.n	800156a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	f003 021f 	and.w	r2, r3, #31
 8001558:	4907      	ldr	r1, [pc, #28]	; (8001578 <__NVIC_EnableIRQ+0x38>)
 800155a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155e:	095b      	lsrs	r3, r3, #5
 8001560:	2001      	movs	r0, #1
 8001562:	fa00 f202 	lsl.w	r2, r0, r2
 8001566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800156a:	bf00      	nop
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	e000e100 	.word	0xe000e100

0800157c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	6039      	str	r1, [r7, #0]
 8001586:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158c:	2b00      	cmp	r3, #0
 800158e:	db0a      	blt.n	80015a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	b2da      	uxtb	r2, r3
 8001594:	490c      	ldr	r1, [pc, #48]	; (80015c8 <__NVIC_SetPriority+0x4c>)
 8001596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159a:	0112      	lsls	r2, r2, #4
 800159c:	b2d2      	uxtb	r2, r2
 800159e:	440b      	add	r3, r1
 80015a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015a4:	e00a      	b.n	80015bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	4908      	ldr	r1, [pc, #32]	; (80015cc <__NVIC_SetPriority+0x50>)
 80015ac:	79fb      	ldrb	r3, [r7, #7]
 80015ae:	f003 030f 	and.w	r3, r3, #15
 80015b2:	3b04      	subs	r3, #4
 80015b4:	0112      	lsls	r2, r2, #4
 80015b6:	b2d2      	uxtb	r2, r2
 80015b8:	440b      	add	r3, r1
 80015ba:	761a      	strb	r2, [r3, #24]
}
 80015bc:	bf00      	nop
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	e000e100 	.word	0xe000e100
 80015cc:	e000ed00 	.word	0xe000ed00

080015d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b089      	sub	sp, #36	; 0x24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f003 0307 	and.w	r3, r3, #7
 80015e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	f1c3 0307 	rsb	r3, r3, #7
 80015ea:	2b04      	cmp	r3, #4
 80015ec:	bf28      	it	cs
 80015ee:	2304      	movcs	r3, #4
 80015f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	3304      	adds	r3, #4
 80015f6:	2b06      	cmp	r3, #6
 80015f8:	d902      	bls.n	8001600 <NVIC_EncodePriority+0x30>
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	3b03      	subs	r3, #3
 80015fe:	e000      	b.n	8001602 <NVIC_EncodePriority+0x32>
 8001600:	2300      	movs	r3, #0
 8001602:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001604:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	43da      	mvns	r2, r3
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	401a      	ands	r2, r3
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001618:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	fa01 f303 	lsl.w	r3, r1, r3
 8001622:	43d9      	mvns	r1, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001628:	4313      	orrs	r3, r2
         );
}
 800162a:	4618      	mov	r0, r3
 800162c:	3724      	adds	r7, #36	; 0x24
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr

08001636 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b082      	sub	sp, #8
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f7ff ff4c 	bl	80014dc <__NVIC_SetPriorityGrouping>
}
 8001644:	bf00      	nop
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	60b9      	str	r1, [r7, #8]
 8001656:	607a      	str	r2, [r7, #4]
 8001658:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800165a:	2300      	movs	r3, #0
 800165c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800165e:	f7ff ff61 	bl	8001524 <__NVIC_GetPriorityGrouping>
 8001662:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	68b9      	ldr	r1, [r7, #8]
 8001668:	6978      	ldr	r0, [r7, #20]
 800166a:	f7ff ffb1 	bl	80015d0 <NVIC_EncodePriority>
 800166e:	4602      	mov	r2, r0
 8001670:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001674:	4611      	mov	r1, r2
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff ff80 	bl	800157c <__NVIC_SetPriority>
}
 800167c:	bf00      	nop
 800167e:	3718      	adds	r7, #24
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800168e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001692:	4618      	mov	r0, r3
 8001694:	f7ff ff54 	bl	8001540 <__NVIC_EnableIRQ>
}
 8001698:	bf00      	nop
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b089      	sub	sp, #36	; 0x24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016aa:	2300      	movs	r3, #0
 80016ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016ae:	2300      	movs	r3, #0
 80016b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016b2:	2300      	movs	r3, #0
 80016b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016b6:	2300      	movs	r3, #0
 80016b8:	61fb      	str	r3, [r7, #28]
 80016ba:	e16b      	b.n	8001994 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016bc:	2201      	movs	r2, #1
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	697a      	ldr	r2, [r7, #20]
 80016cc:	4013      	ands	r3, r2
 80016ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016d0:	693a      	ldr	r2, [r7, #16]
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	f040 815a 	bne.w	800198e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f003 0303 	and.w	r3, r3, #3
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d005      	beq.n	80016f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d130      	bne.n	8001754 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	2203      	movs	r2, #3
 80016fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001702:	43db      	mvns	r3, r3
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	4013      	ands	r3, r2
 8001708:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	68da      	ldr	r2, [r3, #12]
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	69ba      	ldr	r2, [r7, #24]
 8001718:	4313      	orrs	r3, r2
 800171a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001728:	2201      	movs	r2, #1
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	43db      	mvns	r3, r3
 8001732:	69ba      	ldr	r2, [r7, #24]
 8001734:	4013      	ands	r3, r2
 8001736:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	091b      	lsrs	r3, r3, #4
 800173e:	f003 0201 	and.w	r2, r3, #1
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	4313      	orrs	r3, r2
 800174c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f003 0303 	and.w	r3, r3, #3
 800175c:	2b03      	cmp	r3, #3
 800175e:	d017      	beq.n	8001790 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	2203      	movs	r2, #3
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	43db      	mvns	r3, r3
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	4013      	ands	r3, r2
 8001776:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	689a      	ldr	r2, [r3, #8]
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	4313      	orrs	r3, r2
 8001788:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f003 0303 	and.w	r3, r3, #3
 8001798:	2b02      	cmp	r3, #2
 800179a:	d123      	bne.n	80017e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	08da      	lsrs	r2, r3, #3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	3208      	adds	r2, #8
 80017a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	f003 0307 	and.w	r3, r3, #7
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	220f      	movs	r2, #15
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	43db      	mvns	r3, r3
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	4013      	ands	r3, r2
 80017be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	691a      	ldr	r2, [r3, #16]
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	f003 0307 	and.w	r3, r3, #7
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	08da      	lsrs	r2, r3, #3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	3208      	adds	r2, #8
 80017de:	69b9      	ldr	r1, [r7, #24]
 80017e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	2203      	movs	r2, #3
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	43db      	mvns	r3, r3
 80017f6:	69ba      	ldr	r2, [r7, #24]
 80017f8:	4013      	ands	r3, r2
 80017fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f003 0203 	and.w	r2, r3, #3
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	4313      	orrs	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001820:	2b00      	cmp	r3, #0
 8001822:	f000 80b4 	beq.w	800198e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	60fb      	str	r3, [r7, #12]
 800182a:	4b60      	ldr	r3, [pc, #384]	; (80019ac <HAL_GPIO_Init+0x30c>)
 800182c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182e:	4a5f      	ldr	r2, [pc, #380]	; (80019ac <HAL_GPIO_Init+0x30c>)
 8001830:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001834:	6453      	str	r3, [r2, #68]	; 0x44
 8001836:	4b5d      	ldr	r3, [pc, #372]	; (80019ac <HAL_GPIO_Init+0x30c>)
 8001838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001842:	4a5b      	ldr	r2, [pc, #364]	; (80019b0 <HAL_GPIO_Init+0x310>)
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	089b      	lsrs	r3, r3, #2
 8001848:	3302      	adds	r3, #2
 800184a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800184e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	f003 0303 	and.w	r3, r3, #3
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	220f      	movs	r2, #15
 800185a:	fa02 f303 	lsl.w	r3, r2, r3
 800185e:	43db      	mvns	r3, r3
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	4013      	ands	r3, r2
 8001864:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a52      	ldr	r2, [pc, #328]	; (80019b4 <HAL_GPIO_Init+0x314>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d02b      	beq.n	80018c6 <HAL_GPIO_Init+0x226>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a51      	ldr	r2, [pc, #324]	; (80019b8 <HAL_GPIO_Init+0x318>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d025      	beq.n	80018c2 <HAL_GPIO_Init+0x222>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a50      	ldr	r2, [pc, #320]	; (80019bc <HAL_GPIO_Init+0x31c>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d01f      	beq.n	80018be <HAL_GPIO_Init+0x21e>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a4f      	ldr	r2, [pc, #316]	; (80019c0 <HAL_GPIO_Init+0x320>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d019      	beq.n	80018ba <HAL_GPIO_Init+0x21a>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a4e      	ldr	r2, [pc, #312]	; (80019c4 <HAL_GPIO_Init+0x324>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d013      	beq.n	80018b6 <HAL_GPIO_Init+0x216>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a4d      	ldr	r2, [pc, #308]	; (80019c8 <HAL_GPIO_Init+0x328>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d00d      	beq.n	80018b2 <HAL_GPIO_Init+0x212>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a4c      	ldr	r2, [pc, #304]	; (80019cc <HAL_GPIO_Init+0x32c>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d007      	beq.n	80018ae <HAL_GPIO_Init+0x20e>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a4b      	ldr	r2, [pc, #300]	; (80019d0 <HAL_GPIO_Init+0x330>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d101      	bne.n	80018aa <HAL_GPIO_Init+0x20a>
 80018a6:	2307      	movs	r3, #7
 80018a8:	e00e      	b.n	80018c8 <HAL_GPIO_Init+0x228>
 80018aa:	2308      	movs	r3, #8
 80018ac:	e00c      	b.n	80018c8 <HAL_GPIO_Init+0x228>
 80018ae:	2306      	movs	r3, #6
 80018b0:	e00a      	b.n	80018c8 <HAL_GPIO_Init+0x228>
 80018b2:	2305      	movs	r3, #5
 80018b4:	e008      	b.n	80018c8 <HAL_GPIO_Init+0x228>
 80018b6:	2304      	movs	r3, #4
 80018b8:	e006      	b.n	80018c8 <HAL_GPIO_Init+0x228>
 80018ba:	2303      	movs	r3, #3
 80018bc:	e004      	b.n	80018c8 <HAL_GPIO_Init+0x228>
 80018be:	2302      	movs	r3, #2
 80018c0:	e002      	b.n	80018c8 <HAL_GPIO_Init+0x228>
 80018c2:	2301      	movs	r3, #1
 80018c4:	e000      	b.n	80018c8 <HAL_GPIO_Init+0x228>
 80018c6:	2300      	movs	r3, #0
 80018c8:	69fa      	ldr	r2, [r7, #28]
 80018ca:	f002 0203 	and.w	r2, r2, #3
 80018ce:	0092      	lsls	r2, r2, #2
 80018d0:	4093      	lsls	r3, r2
 80018d2:	69ba      	ldr	r2, [r7, #24]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018d8:	4935      	ldr	r1, [pc, #212]	; (80019b0 <HAL_GPIO_Init+0x310>)
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	089b      	lsrs	r3, r3, #2
 80018de:	3302      	adds	r3, #2
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018e6:	4b3b      	ldr	r3, [pc, #236]	; (80019d4 <HAL_GPIO_Init+0x334>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	43db      	mvns	r3, r3
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	4013      	ands	r3, r2
 80018f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d003      	beq.n	800190a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	4313      	orrs	r3, r2
 8001908:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800190a:	4a32      	ldr	r2, [pc, #200]	; (80019d4 <HAL_GPIO_Init+0x334>)
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001910:	4b30      	ldr	r3, [pc, #192]	; (80019d4 <HAL_GPIO_Init+0x334>)
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	43db      	mvns	r3, r3
 800191a:	69ba      	ldr	r2, [r7, #24]
 800191c:	4013      	ands	r3, r2
 800191e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d003      	beq.n	8001934 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	4313      	orrs	r3, r2
 8001932:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001934:	4a27      	ldr	r2, [pc, #156]	; (80019d4 <HAL_GPIO_Init+0x334>)
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800193a:	4b26      	ldr	r3, [pc, #152]	; (80019d4 <HAL_GPIO_Init+0x334>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	43db      	mvns	r3, r3
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	4013      	ands	r3, r2
 8001948:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d003      	beq.n	800195e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	4313      	orrs	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800195e:	4a1d      	ldr	r2, [pc, #116]	; (80019d4 <HAL_GPIO_Init+0x334>)
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001964:	4b1b      	ldr	r3, [pc, #108]	; (80019d4 <HAL_GPIO_Init+0x334>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	43db      	mvns	r3, r3
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	4013      	ands	r3, r2
 8001972:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800197c:	2b00      	cmp	r3, #0
 800197e:	d003      	beq.n	8001988 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	4313      	orrs	r3, r2
 8001986:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001988:	4a12      	ldr	r2, [pc, #72]	; (80019d4 <HAL_GPIO_Init+0x334>)
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	3301      	adds	r3, #1
 8001992:	61fb      	str	r3, [r7, #28]
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	2b0f      	cmp	r3, #15
 8001998:	f67f ae90 	bls.w	80016bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800199c:	bf00      	nop
 800199e:	bf00      	nop
 80019a0:	3724      	adds	r7, #36	; 0x24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	40023800 	.word	0x40023800
 80019b0:	40013800 	.word	0x40013800
 80019b4:	40020000 	.word	0x40020000
 80019b8:	40020400 	.word	0x40020400
 80019bc:	40020800 	.word	0x40020800
 80019c0:	40020c00 	.word	0x40020c00
 80019c4:	40021000 	.word	0x40021000
 80019c8:	40021400 	.word	0x40021400
 80019cc:	40021800 	.word	0x40021800
 80019d0:	40021c00 	.word	0x40021c00
 80019d4:	40013c00 	.word	0x40013c00

080019d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	460b      	mov	r3, r1
 80019e2:	807b      	strh	r3, [r7, #2]
 80019e4:	4613      	mov	r3, r2
 80019e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019e8:	787b      	ldrb	r3, [r7, #1]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d003      	beq.n	80019f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019ee:	887a      	ldrh	r2, [r7, #2]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019f4:	e003      	b.n	80019fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019f6:	887b      	ldrh	r3, [r7, #2]
 80019f8:	041a      	lsls	r2, r3, #16
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	619a      	str	r2, [r3, #24]
}
 80019fe:	bf00      	nop
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr

08001a0a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	b085      	sub	sp, #20
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
 8001a12:	460b      	mov	r3, r1
 8001a14:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	695b      	ldr	r3, [r3, #20]
 8001a1a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a1c:	887a      	ldrh	r2, [r7, #2]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	4013      	ands	r3, r2
 8001a22:	041a      	lsls	r2, r3, #16
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	43d9      	mvns	r1, r3
 8001a28:	887b      	ldrh	r3, [r7, #2]
 8001a2a:	400b      	ands	r3, r1
 8001a2c:	431a      	orrs	r2, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	619a      	str	r2, [r3, #24]
}
 8001a32:	bf00      	nop
 8001a34:	3714      	adds	r7, #20
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr

08001a3e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001a3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a40:	b08f      	sub	sp, #60	; 0x3c
 8001a42:	af0a      	add	r7, sp, #40	; 0x28
 8001a44:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d101      	bne.n	8001a50 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e10f      	b.n	8001c70 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d106      	bne.n	8001a70 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f009 fb4c 	bl	800b108 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2203      	movs	r2, #3
 8001a74:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d102      	bne.n	8001a8a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f003 f873 	bl	8004b7a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	603b      	str	r3, [r7, #0]
 8001a9a:	687e      	ldr	r6, [r7, #4]
 8001a9c:	466d      	mov	r5, sp
 8001a9e:	f106 0410 	add.w	r4, r6, #16
 8001aa2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001aa4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001aa6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001aa8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001aaa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001aae:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ab2:	1d33      	adds	r3, r6, #4
 8001ab4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ab6:	6838      	ldr	r0, [r7, #0]
 8001ab8:	f002 ff4a 	bl	8004950 <USB_CoreInit>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d005      	beq.n	8001ace <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2202      	movs	r2, #2
 8001ac6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e0d0      	b.n	8001c70 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f003 f861 	bl	8004b9c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ada:	2300      	movs	r3, #0
 8001adc:	73fb      	strb	r3, [r7, #15]
 8001ade:	e04a      	b.n	8001b76 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001ae0:	7bfa      	ldrb	r2, [r7, #15]
 8001ae2:	6879      	ldr	r1, [r7, #4]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	4413      	add	r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	440b      	add	r3, r1
 8001aee:	333d      	adds	r3, #61	; 0x3d
 8001af0:	2201      	movs	r2, #1
 8001af2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001af4:	7bfa      	ldrb	r2, [r7, #15]
 8001af6:	6879      	ldr	r1, [r7, #4]
 8001af8:	4613      	mov	r3, r2
 8001afa:	00db      	lsls	r3, r3, #3
 8001afc:	4413      	add	r3, r2
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	440b      	add	r3, r1
 8001b02:	333c      	adds	r3, #60	; 0x3c
 8001b04:	7bfa      	ldrb	r2, [r7, #15]
 8001b06:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001b08:	7bfa      	ldrb	r2, [r7, #15]
 8001b0a:	7bfb      	ldrb	r3, [r7, #15]
 8001b0c:	b298      	uxth	r0, r3
 8001b0e:	6879      	ldr	r1, [r7, #4]
 8001b10:	4613      	mov	r3, r2
 8001b12:	00db      	lsls	r3, r3, #3
 8001b14:	4413      	add	r3, r2
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	440b      	add	r3, r1
 8001b1a:	3344      	adds	r3, #68	; 0x44
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001b20:	7bfa      	ldrb	r2, [r7, #15]
 8001b22:	6879      	ldr	r1, [r7, #4]
 8001b24:	4613      	mov	r3, r2
 8001b26:	00db      	lsls	r3, r3, #3
 8001b28:	4413      	add	r3, r2
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	440b      	add	r3, r1
 8001b2e:	3340      	adds	r3, #64	; 0x40
 8001b30:	2200      	movs	r2, #0
 8001b32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001b34:	7bfa      	ldrb	r2, [r7, #15]
 8001b36:	6879      	ldr	r1, [r7, #4]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	00db      	lsls	r3, r3, #3
 8001b3c:	4413      	add	r3, r2
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	440b      	add	r3, r1
 8001b42:	3348      	adds	r3, #72	; 0x48
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001b48:	7bfa      	ldrb	r2, [r7, #15]
 8001b4a:	6879      	ldr	r1, [r7, #4]
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	00db      	lsls	r3, r3, #3
 8001b50:	4413      	add	r3, r2
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	440b      	add	r3, r1
 8001b56:	334c      	adds	r3, #76	; 0x4c
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001b5c:	7bfa      	ldrb	r2, [r7, #15]
 8001b5e:	6879      	ldr	r1, [r7, #4]
 8001b60:	4613      	mov	r3, r2
 8001b62:	00db      	lsls	r3, r3, #3
 8001b64:	4413      	add	r3, r2
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	440b      	add	r3, r1
 8001b6a:	3354      	adds	r3, #84	; 0x54
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b70:	7bfb      	ldrb	r3, [r7, #15]
 8001b72:	3301      	adds	r3, #1
 8001b74:	73fb      	strb	r3, [r7, #15]
 8001b76:	7bfa      	ldrb	r2, [r7, #15]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d3af      	bcc.n	8001ae0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b80:	2300      	movs	r3, #0
 8001b82:	73fb      	strb	r3, [r7, #15]
 8001b84:	e044      	b.n	8001c10 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001b86:	7bfa      	ldrb	r2, [r7, #15]
 8001b88:	6879      	ldr	r1, [r7, #4]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	00db      	lsls	r3, r3, #3
 8001b8e:	4413      	add	r3, r2
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	440b      	add	r3, r1
 8001b94:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001b98:	2200      	movs	r2, #0
 8001b9a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001b9c:	7bfa      	ldrb	r2, [r7, #15]
 8001b9e:	6879      	ldr	r1, [r7, #4]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	00db      	lsls	r3, r3, #3
 8001ba4:	4413      	add	r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	440b      	add	r3, r1
 8001baa:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001bae:	7bfa      	ldrb	r2, [r7, #15]
 8001bb0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001bb2:	7bfa      	ldrb	r2, [r7, #15]
 8001bb4:	6879      	ldr	r1, [r7, #4]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	00db      	lsls	r3, r3, #3
 8001bba:	4413      	add	r3, r2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	440b      	add	r3, r1
 8001bc0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001bc8:	7bfa      	ldrb	r2, [r7, #15]
 8001bca:	6879      	ldr	r1, [r7, #4]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	00db      	lsls	r3, r3, #3
 8001bd0:	4413      	add	r3, r2
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	440b      	add	r3, r1
 8001bd6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001bda:	2200      	movs	r2, #0
 8001bdc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001bde:	7bfa      	ldrb	r2, [r7, #15]
 8001be0:	6879      	ldr	r1, [r7, #4]
 8001be2:	4613      	mov	r3, r2
 8001be4:	00db      	lsls	r3, r3, #3
 8001be6:	4413      	add	r3, r2
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	440b      	add	r3, r1
 8001bec:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001bf4:	7bfa      	ldrb	r2, [r7, #15]
 8001bf6:	6879      	ldr	r1, [r7, #4]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	00db      	lsls	r3, r3, #3
 8001bfc:	4413      	add	r3, r2
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	440b      	add	r3, r1
 8001c02:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001c06:	2200      	movs	r2, #0
 8001c08:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c0a:	7bfb      	ldrb	r3, [r7, #15]
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	73fb      	strb	r3, [r7, #15]
 8001c10:	7bfa      	ldrb	r2, [r7, #15]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d3b5      	bcc.n	8001b86 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	603b      	str	r3, [r7, #0]
 8001c20:	687e      	ldr	r6, [r7, #4]
 8001c22:	466d      	mov	r5, sp
 8001c24:	f106 0410 	add.w	r4, r6, #16
 8001c28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c30:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c34:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c38:	1d33      	adds	r3, r6, #4
 8001c3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c3c:	6838      	ldr	r0, [r7, #0]
 8001c3e:	f002 fff9 	bl	8004c34 <USB_DevInit>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d005      	beq.n	8001c54 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2202      	movs	r2, #2
 8001c4c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e00d      	b.n	8001c70 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f004 f948 	bl	8005efe <USB_DevDisconnect>

  return HAL_OK;
 8001c6e:	2300      	movs	r3, #0
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3714      	adds	r7, #20
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c78 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d101      	bne.n	8001c94 <HAL_PCD_Start+0x1c>
 8001c90:	2302      	movs	r3, #2
 8001c92:	e020      	b.n	8001cd6 <HAL_PCD_Start+0x5e>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2201      	movs	r2, #1
 8001c98:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d109      	bne.n	8001cb8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d005      	beq.n	8001cb8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cb0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f002 ff4b 	bl	8004b58 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f004 f8f8 	bl	8005ebc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3710      	adds	r7, #16
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001cde:	b590      	push	{r4, r7, lr}
 8001ce0:	b08d      	sub	sp, #52	; 0x34
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001cec:	6a3b      	ldr	r3, [r7, #32]
 8001cee:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f004 f9b6 	bl	8006066 <USB_GetMode>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	f040 848a 	bne.w	8002616 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f004 f91a 	bl	8005f40 <USB_ReadInterrupts>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	f000 8480 	beq.w	8002614 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	0a1b      	lsrs	r3, r3, #8
 8001d1e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f004 f907 	bl	8005f40 <USB_ReadInterrupts>
 8001d32:	4603      	mov	r3, r0
 8001d34:	f003 0302 	and.w	r3, r3, #2
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d107      	bne.n	8001d4c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	695a      	ldr	r2, [r3, #20]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f002 0202 	and.w	r2, r2, #2
 8001d4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f004 f8f5 	bl	8005f40 <USB_ReadInterrupts>
 8001d56:	4603      	mov	r3, r0
 8001d58:	f003 0310 	and.w	r3, r3, #16
 8001d5c:	2b10      	cmp	r3, #16
 8001d5e:	d161      	bne.n	8001e24 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	699a      	ldr	r2, [r3, #24]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f022 0210 	bic.w	r2, r2, #16
 8001d6e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001d70:	6a3b      	ldr	r3, [r7, #32]
 8001d72:	6a1b      	ldr	r3, [r3, #32]
 8001d74:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	f003 020f 	and.w	r2, r3, #15
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	00db      	lsls	r3, r3, #3
 8001d80:	4413      	add	r3, r2
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	3304      	adds	r3, #4
 8001d8e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	0c5b      	lsrs	r3, r3, #17
 8001d94:	f003 030f 	and.w	r3, r3, #15
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d124      	bne.n	8001de6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001da2:	4013      	ands	r3, r2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d035      	beq.n	8001e14 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	091b      	lsrs	r3, r3, #4
 8001db0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001db2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	461a      	mov	r2, r3
 8001dba:	6a38      	ldr	r0, [r7, #32]
 8001dbc:	f003 ff2c 	bl	8005c18 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	691a      	ldr	r2, [r3, #16]
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	091b      	lsrs	r3, r3, #4
 8001dc8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001dcc:	441a      	add	r2, r3
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	6a1a      	ldr	r2, [r3, #32]
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	091b      	lsrs	r3, r3, #4
 8001dda:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001dde:	441a      	add	r2, r3
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	621a      	str	r2, [r3, #32]
 8001de4:	e016      	b.n	8001e14 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	0c5b      	lsrs	r3, r3, #17
 8001dea:	f003 030f 	and.w	r3, r3, #15
 8001dee:	2b06      	cmp	r3, #6
 8001df0:	d110      	bne.n	8001e14 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001df8:	2208      	movs	r2, #8
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	6a38      	ldr	r0, [r7, #32]
 8001dfe:	f003 ff0b 	bl	8005c18 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	6a1a      	ldr	r2, [r3, #32]
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	091b      	lsrs	r3, r3, #4
 8001e0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e0e:	441a      	add	r2, r3
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	699a      	ldr	r2, [r3, #24]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f042 0210 	orr.w	r2, r2, #16
 8001e22:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f004 f889 	bl	8005f40 <USB_ReadInterrupts>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e34:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001e38:	f040 80a7 	bne.w	8001f8a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f004 f88e 	bl	8005f66 <USB_ReadDevAllOutEpInterrupt>
 8001e4a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001e4c:	e099      	b.n	8001f82 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	f000 808e 	beq.w	8001f76 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e60:	b2d2      	uxtb	r2, r2
 8001e62:	4611      	mov	r1, r2
 8001e64:	4618      	mov	r0, r3
 8001e66:	f004 f8b2 	bl	8005fce <USB_ReadDevOutEPInterrupt>
 8001e6a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d00c      	beq.n	8001e90 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e78:	015a      	lsls	r2, r3, #5
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e82:	461a      	mov	r2, r3
 8001e84:	2301      	movs	r3, #1
 8001e86:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001e88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 fec2 	bl	8002c14 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	f003 0308 	and.w	r3, r3, #8
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d00c      	beq.n	8001eb4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9c:	015a      	lsls	r2, r3, #5
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	2308      	movs	r3, #8
 8001eaa:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001eac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f000 ff98 	bl	8002de4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	f003 0310 	and.w	r3, r3, #16
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d008      	beq.n	8001ed0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec0:	015a      	lsls	r2, r3, #5
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001eca:	461a      	mov	r2, r3
 8001ecc:	2310      	movs	r3, #16
 8001ece:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d030      	beq.n	8001f3c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001eda:	6a3b      	ldr	r3, [r7, #32]
 8001edc:	695b      	ldr	r3, [r3, #20]
 8001ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ee2:	2b80      	cmp	r3, #128	; 0x80
 8001ee4:	d109      	bne.n	8001efa <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	69fa      	ldr	r2, [r7, #28]
 8001ef0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ef4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ef8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001efa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001efc:	4613      	mov	r3, r2
 8001efe:	00db      	lsls	r3, r3, #3
 8001f00:	4413      	add	r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	3304      	adds	r3, #4
 8001f0e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	78db      	ldrb	r3, [r3, #3]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d108      	bne.n	8001f2a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	4619      	mov	r1, r3
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f009 f9f5 	bl	800b314 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2c:	015a      	lsls	r2, r3, #5
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	4413      	add	r3, r2
 8001f32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f36:	461a      	mov	r2, r3
 8001f38:	2302      	movs	r3, #2
 8001f3a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	f003 0320 	and.w	r3, r3, #32
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d008      	beq.n	8001f58 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f48:	015a      	lsls	r2, r3, #5
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f52:	461a      	mov	r2, r3
 8001f54:	2320      	movs	r3, #32
 8001f56:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d009      	beq.n	8001f76 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f64:	015a      	lsls	r2, r3, #5
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	4413      	add	r3, r2
 8001f6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f6e:	461a      	mov	r2, r3
 8001f70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f74:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f78:	3301      	adds	r3, #1
 8001f7a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f7e:	085b      	lsrs	r3, r3, #1
 8001f80:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	f47f af62 	bne.w	8001e4e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f003 ffd6 	bl	8005f40 <USB_ReadInterrupts>
 8001f94:	4603      	mov	r3, r0
 8001f96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f9a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001f9e:	f040 80db 	bne.w	8002158 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f003 fff7 	bl	8005f9a <USB_ReadDevAllInEpInterrupt>
 8001fac:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001fb2:	e0cd      	b.n	8002150 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	f000 80c2 	beq.w	8002144 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fc6:	b2d2      	uxtb	r2, r2
 8001fc8:	4611      	mov	r1, r2
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f004 f81d 	bl	800600a <USB_ReadDevInEPInterrupt>
 8001fd0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	f003 0301 	and.w	r3, r3, #1
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d057      	beq.n	800208c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fde:	f003 030f 	and.w	r3, r3, #15
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ff0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	69f9      	ldr	r1, [r7, #28]
 8001ff8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002002:	015a      	lsls	r2, r3, #5
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	4413      	add	r3, r2
 8002008:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800200c:	461a      	mov	r2, r3
 800200e:	2301      	movs	r3, #1
 8002010:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	2b01      	cmp	r3, #1
 8002018:	d132      	bne.n	8002080 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800201a:	6879      	ldr	r1, [r7, #4]
 800201c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800201e:	4613      	mov	r3, r2
 8002020:	00db      	lsls	r3, r3, #3
 8002022:	4413      	add	r3, r2
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	440b      	add	r3, r1
 8002028:	334c      	adds	r3, #76	; 0x4c
 800202a:	6819      	ldr	r1, [r3, #0]
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002030:	4613      	mov	r3, r2
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	4413      	add	r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4403      	add	r3, r0
 800203a:	3348      	adds	r3, #72	; 0x48
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4419      	add	r1, r3
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002044:	4613      	mov	r3, r2
 8002046:	00db      	lsls	r3, r3, #3
 8002048:	4413      	add	r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	4403      	add	r3, r0
 800204e:	334c      	adds	r3, #76	; 0x4c
 8002050:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002054:	2b00      	cmp	r3, #0
 8002056:	d113      	bne.n	8002080 <HAL_PCD_IRQHandler+0x3a2>
 8002058:	6879      	ldr	r1, [r7, #4]
 800205a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800205c:	4613      	mov	r3, r2
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	4413      	add	r3, r2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	440b      	add	r3, r1
 8002066:	3354      	adds	r3, #84	; 0x54
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d108      	bne.n	8002080 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6818      	ldr	r0, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002078:	461a      	mov	r2, r3
 800207a:	2101      	movs	r1, #1
 800207c:	f004 f824 	bl	80060c8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002082:	b2db      	uxtb	r3, r3
 8002084:	4619      	mov	r1, r3
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f009 f8bf 	bl	800b20a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	f003 0308 	and.w	r3, r3, #8
 8002092:	2b00      	cmp	r3, #0
 8002094:	d008      	beq.n	80020a8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002098:	015a      	lsls	r2, r3, #5
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	4413      	add	r3, r2
 800209e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020a2:	461a      	mov	r2, r3
 80020a4:	2308      	movs	r3, #8
 80020a6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	f003 0310 	and.w	r3, r3, #16
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d008      	beq.n	80020c4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80020b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b4:	015a      	lsls	r2, r3, #5
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	4413      	add	r3, r2
 80020ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020be:	461a      	mov	r2, r3
 80020c0:	2310      	movs	r3, #16
 80020c2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d008      	beq.n	80020e0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80020ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d0:	015a      	lsls	r2, r3, #5
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	4413      	add	r3, r2
 80020d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020da:	461a      	mov	r2, r3
 80020dc:	2340      	movs	r3, #64	; 0x40
 80020de:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d023      	beq.n	8002132 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80020ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020ec:	6a38      	ldr	r0, [r7, #32]
 80020ee:	f002 ff05 	bl	8004efc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80020f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020f4:	4613      	mov	r3, r2
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	4413      	add	r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	3338      	adds	r3, #56	; 0x38
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	4413      	add	r3, r2
 8002102:	3304      	adds	r3, #4
 8002104:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	78db      	ldrb	r3, [r3, #3]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d108      	bne.n	8002120 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	2200      	movs	r2, #0
 8002112:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002116:	b2db      	uxtb	r3, r3
 8002118:	4619      	mov	r1, r3
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f009 f90c 	bl	800b338 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002122:	015a      	lsls	r2, r3, #5
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	4413      	add	r3, r2
 8002128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800212c:	461a      	mov	r2, r3
 800212e:	2302      	movs	r3, #2
 8002130:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002138:	2b00      	cmp	r3, #0
 800213a:	d003      	beq.n	8002144 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800213c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f000 fcdb 	bl	8002afa <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002146:	3301      	adds	r3, #1
 8002148:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800214a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800214c:	085b      	lsrs	r3, r3, #1
 800214e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002152:	2b00      	cmp	r3, #0
 8002154:	f47f af2e 	bne.w	8001fb4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4618      	mov	r0, r3
 800215e:	f003 feef 	bl	8005f40 <USB_ReadInterrupts>
 8002162:	4603      	mov	r3, r0
 8002164:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002168:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800216c:	d122      	bne.n	80021b4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	69fa      	ldr	r2, [r7, #28]
 8002178:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800217c:	f023 0301 	bic.w	r3, r3, #1
 8002180:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002188:	2b01      	cmp	r3, #1
 800218a:	d108      	bne.n	800219e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002194:	2100      	movs	r1, #0
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f000 fec2 	bl	8002f20 <HAL_PCDEx_LPM_Callback>
 800219c:	e002      	b.n	80021a4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f009 f8aa 	bl	800b2f8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	695a      	ldr	r2, [r3, #20]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80021b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f003 fec1 	bl	8005f40 <USB_ReadInterrupts>
 80021be:	4603      	mov	r3, r0
 80021c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021c8:	d112      	bne.n	80021f0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d102      	bne.n	80021e0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f009 f866 	bl	800b2ac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	695a      	ldr	r2, [r3, #20]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80021ee:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f003 fea3 	bl	8005f40 <USB_ReadInterrupts>
 80021fa:	4603      	mov	r3, r0
 80021fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002200:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002204:	f040 80b7 	bne.w	8002376 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	69fa      	ldr	r2, [r7, #28]
 8002212:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002216:	f023 0301 	bic.w	r3, r3, #1
 800221a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2110      	movs	r1, #16
 8002222:	4618      	mov	r0, r3
 8002224:	f002 fe6a 	bl	8004efc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002228:	2300      	movs	r3, #0
 800222a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800222c:	e046      	b.n	80022bc <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800222e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002230:	015a      	lsls	r2, r3, #5
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	4413      	add	r3, r2
 8002236:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800223a:	461a      	mov	r2, r3
 800223c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002240:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002244:	015a      	lsls	r2, r3, #5
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	4413      	add	r3, r2
 800224a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002252:	0151      	lsls	r1, r2, #5
 8002254:	69fa      	ldr	r2, [r7, #28]
 8002256:	440a      	add	r2, r1
 8002258:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800225c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002260:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002264:	015a      	lsls	r2, r3, #5
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	4413      	add	r3, r2
 800226a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800226e:	461a      	mov	r2, r3
 8002270:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002274:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002278:	015a      	lsls	r2, r3, #5
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	4413      	add	r3, r2
 800227e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002286:	0151      	lsls	r1, r2, #5
 8002288:	69fa      	ldr	r2, [r7, #28]
 800228a:	440a      	add	r2, r1
 800228c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002290:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002294:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002298:	015a      	lsls	r2, r3, #5
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	4413      	add	r3, r2
 800229e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022a6:	0151      	lsls	r1, r2, #5
 80022a8:	69fa      	ldr	r2, [r7, #28]
 80022aa:	440a      	add	r2, r1
 80022ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80022b0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80022b4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b8:	3301      	adds	r3, #1
 80022ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d3b3      	bcc.n	800222e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022cc:	69db      	ldr	r3, [r3, #28]
 80022ce:	69fa      	ldr	r2, [r7, #28]
 80022d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022d4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80022d8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d016      	beq.n	8002310 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022ec:	69fa      	ldr	r2, [r7, #28]
 80022ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022f2:	f043 030b 	orr.w	r3, r3, #11
 80022f6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002302:	69fa      	ldr	r2, [r7, #28]
 8002304:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002308:	f043 030b 	orr.w	r3, r3, #11
 800230c:	6453      	str	r3, [r2, #68]	; 0x44
 800230e:	e015      	b.n	800233c <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002316:	695b      	ldr	r3, [r3, #20]
 8002318:	69fa      	ldr	r2, [r7, #28]
 800231a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800231e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002322:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002326:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	69fa      	ldr	r2, [r7, #28]
 8002332:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002336:	f043 030b 	orr.w	r3, r3, #11
 800233a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	69fa      	ldr	r2, [r7, #28]
 8002346:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800234a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800234e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6818      	ldr	r0, [r3, #0]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	691b      	ldr	r3, [r3, #16]
 8002358:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002360:	461a      	mov	r2, r3
 8002362:	f003 feb1 	bl	80060c8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	695a      	ldr	r2, [r3, #20]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002374:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4618      	mov	r0, r3
 800237c:	f003 fde0 	bl	8005f40 <USB_ReadInterrupts>
 8002380:	4603      	mov	r3, r0
 8002382:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002386:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800238a:	d124      	bne.n	80023d6 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4618      	mov	r0, r3
 8002392:	f003 fe76 	bl	8006082 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4618      	mov	r0, r3
 800239c:	f002 fe2b 	bl	8004ff6 <USB_GetDevSpeed>
 80023a0:	4603      	mov	r3, r0
 80023a2:	461a      	mov	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681c      	ldr	r4, [r3, #0]
 80023ac:	f001 fa28 	bl	8003800 <HAL_RCC_GetHCLKFreq>
 80023b0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	461a      	mov	r2, r3
 80023ba:	4620      	mov	r0, r4
 80023bc:	f002 fb2a 	bl	8004a14 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f008 ff4a 	bl	800b25a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	695a      	ldr	r2, [r3, #20]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80023d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4618      	mov	r0, r3
 80023dc:	f003 fdb0 	bl	8005f40 <USB_ReadInterrupts>
 80023e0:	4603      	mov	r3, r0
 80023e2:	f003 0308 	and.w	r3, r3, #8
 80023e6:	2b08      	cmp	r3, #8
 80023e8:	d10a      	bne.n	8002400 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f008 ff27 	bl	800b23e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	695a      	ldr	r2, [r3, #20]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f002 0208 	and.w	r2, r2, #8
 80023fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4618      	mov	r0, r3
 8002406:	f003 fd9b 	bl	8005f40 <USB_ReadInterrupts>
 800240a:	4603      	mov	r3, r0
 800240c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002410:	2b80      	cmp	r3, #128	; 0x80
 8002412:	d122      	bne.n	800245a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002414:	6a3b      	ldr	r3, [r7, #32]
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800241c:	6a3b      	ldr	r3, [r7, #32]
 800241e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002420:	2301      	movs	r3, #1
 8002422:	627b      	str	r3, [r7, #36]	; 0x24
 8002424:	e014      	b.n	8002450 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002426:	6879      	ldr	r1, [r7, #4]
 8002428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800242a:	4613      	mov	r3, r2
 800242c:	00db      	lsls	r3, r3, #3
 800242e:	4413      	add	r3, r2
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	440b      	add	r3, r1
 8002434:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d105      	bne.n	800244a <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800243e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002440:	b2db      	uxtb	r3, r3
 8002442:	4619      	mov	r1, r3
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f000 fb27 	bl	8002a98 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800244a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244c:	3301      	adds	r3, #1
 800244e:	627b      	str	r3, [r7, #36]	; 0x24
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002456:	429a      	cmp	r2, r3
 8002458:	d3e5      	bcc.n	8002426 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4618      	mov	r0, r3
 8002460:	f003 fd6e 	bl	8005f40 <USB_ReadInterrupts>
 8002464:	4603      	mov	r3, r0
 8002466:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800246a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800246e:	d13b      	bne.n	80024e8 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002470:	2301      	movs	r3, #1
 8002472:	627b      	str	r3, [r7, #36]	; 0x24
 8002474:	e02b      	b.n	80024ce <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002478:	015a      	lsls	r2, r3, #5
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	4413      	add	r3, r2
 800247e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002486:	6879      	ldr	r1, [r7, #4]
 8002488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800248a:	4613      	mov	r3, r2
 800248c:	00db      	lsls	r3, r3, #3
 800248e:	4413      	add	r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	440b      	add	r3, r1
 8002494:	3340      	adds	r3, #64	; 0x40
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d115      	bne.n	80024c8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800249c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800249e:	2b00      	cmp	r3, #0
 80024a0:	da12      	bge.n	80024c8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80024a2:	6879      	ldr	r1, [r7, #4]
 80024a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024a6:	4613      	mov	r3, r2
 80024a8:	00db      	lsls	r3, r3, #3
 80024aa:	4413      	add	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	440b      	add	r3, r1
 80024b0:	333f      	adds	r3, #63	; 0x3f
 80024b2:	2201      	movs	r2, #1
 80024b4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80024b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	4619      	mov	r1, r3
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f000 fae8 	bl	8002a98 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80024c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ca:	3301      	adds	r3, #1
 80024cc:	627b      	str	r3, [r7, #36]	; 0x24
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d3ce      	bcc.n	8002476 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	695a      	ldr	r2, [r3, #20]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80024e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f003 fd27 	bl	8005f40 <USB_ReadInterrupts>
 80024f2:	4603      	mov	r3, r0
 80024f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80024fc:	d155      	bne.n	80025aa <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80024fe:	2301      	movs	r3, #1
 8002500:	627b      	str	r3, [r7, #36]	; 0x24
 8002502:	e045      	b.n	8002590 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002506:	015a      	lsls	r2, r3, #5
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	4413      	add	r3, r2
 800250c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002514:	6879      	ldr	r1, [r7, #4]
 8002516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002518:	4613      	mov	r3, r2
 800251a:	00db      	lsls	r3, r3, #3
 800251c:	4413      	add	r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	440b      	add	r3, r1
 8002522:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	2b01      	cmp	r3, #1
 800252a:	d12e      	bne.n	800258a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800252c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800252e:	2b00      	cmp	r3, #0
 8002530:	da2b      	bge.n	800258a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800253e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002542:	429a      	cmp	r2, r3
 8002544:	d121      	bne.n	800258a <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002546:	6879      	ldr	r1, [r7, #4]
 8002548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800254a:	4613      	mov	r3, r2
 800254c:	00db      	lsls	r3, r3, #3
 800254e:	4413      	add	r3, r2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	440b      	add	r3, r1
 8002554:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002558:	2201      	movs	r2, #1
 800255a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800255c:	6a3b      	ldr	r3, [r7, #32]
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002564:	6a3b      	ldr	r3, [r7, #32]
 8002566:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002568:	6a3b      	ldr	r3, [r7, #32]
 800256a:	695b      	ldr	r3, [r3, #20]
 800256c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002570:	2b00      	cmp	r3, #0
 8002572:	d10a      	bne.n	800258a <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	69fa      	ldr	r2, [r7, #28]
 800257e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002582:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002586:	6053      	str	r3, [r2, #4]
            break;
 8002588:	e007      	b.n	800259a <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800258a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258c:	3301      	adds	r3, #1
 800258e:	627b      	str	r3, [r7, #36]	; 0x24
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002596:	429a      	cmp	r2, r3
 8002598:	d3b4      	bcc.n	8002504 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	695a      	ldr	r2, [r3, #20]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80025a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f003 fcc6 	bl	8005f40 <USB_ReadInterrupts>
 80025b4:	4603      	mov	r3, r0
 80025b6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80025ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025be:	d10a      	bne.n	80025d6 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f008 fecb 	bl	800b35c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	695a      	ldr	r2, [r3, #20]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80025d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4618      	mov	r0, r3
 80025dc:	f003 fcb0 	bl	8005f40 <USB_ReadInterrupts>
 80025e0:	4603      	mov	r3, r0
 80025e2:	f003 0304 	and.w	r3, r3, #4
 80025e6:	2b04      	cmp	r3, #4
 80025e8:	d115      	bne.n	8002616 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	f003 0304 	and.w	r3, r3, #4
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d002      	beq.n	8002602 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f008 febb 	bl	800b378 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	6859      	ldr	r1, [r3, #4]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	430a      	orrs	r2, r1
 8002610:	605a      	str	r2, [r3, #4]
 8002612:	e000      	b.n	8002616 <HAL_PCD_IRQHandler+0x938>
      return;
 8002614:	bf00      	nop
    }
  }
}
 8002616:	3734      	adds	r7, #52	; 0x34
 8002618:	46bd      	mov	sp, r7
 800261a:	bd90      	pop	{r4, r7, pc}

0800261c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	460b      	mov	r3, r1
 8002626:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800262e:	2b01      	cmp	r3, #1
 8002630:	d101      	bne.n	8002636 <HAL_PCD_SetAddress+0x1a>
 8002632:	2302      	movs	r3, #2
 8002634:	e013      	b.n	800265e <HAL_PCD_SetAddress+0x42>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2201      	movs	r2, #1
 800263a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	78fa      	ldrb	r2, [r7, #3]
 8002642:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	78fa      	ldrb	r2, [r7, #3]
 800264c:	4611      	mov	r1, r2
 800264e:	4618      	mov	r0, r3
 8002650:	f003 fc0e 	bl	8005e70 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}

08002666 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002666:	b580      	push	{r7, lr}
 8002668:	b084      	sub	sp, #16
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
 800266e:	4608      	mov	r0, r1
 8002670:	4611      	mov	r1, r2
 8002672:	461a      	mov	r2, r3
 8002674:	4603      	mov	r3, r0
 8002676:	70fb      	strb	r3, [r7, #3]
 8002678:	460b      	mov	r3, r1
 800267a:	803b      	strh	r3, [r7, #0]
 800267c:	4613      	mov	r3, r2
 800267e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002680:	2300      	movs	r3, #0
 8002682:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002684:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002688:	2b00      	cmp	r3, #0
 800268a:	da0f      	bge.n	80026ac <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800268c:	78fb      	ldrb	r3, [r7, #3]
 800268e:	f003 020f 	and.w	r2, r3, #15
 8002692:	4613      	mov	r3, r2
 8002694:	00db      	lsls	r3, r3, #3
 8002696:	4413      	add	r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	3338      	adds	r3, #56	; 0x38
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	4413      	add	r3, r2
 80026a0:	3304      	adds	r3, #4
 80026a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2201      	movs	r2, #1
 80026a8:	705a      	strb	r2, [r3, #1]
 80026aa:	e00f      	b.n	80026cc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026ac:	78fb      	ldrb	r3, [r7, #3]
 80026ae:	f003 020f 	and.w	r2, r3, #15
 80026b2:	4613      	mov	r3, r2
 80026b4:	00db      	lsls	r3, r3, #3
 80026b6:	4413      	add	r3, r2
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	4413      	add	r3, r2
 80026c2:	3304      	adds	r3, #4
 80026c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2200      	movs	r2, #0
 80026ca:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80026cc:	78fb      	ldrb	r3, [r7, #3]
 80026ce:	f003 030f 	and.w	r3, r3, #15
 80026d2:	b2da      	uxtb	r2, r3
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80026d8:	883a      	ldrh	r2, [r7, #0]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	78ba      	ldrb	r2, [r7, #2]
 80026e2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	785b      	ldrb	r3, [r3, #1]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d004      	beq.n	80026f6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	b29a      	uxth	r2, r3
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80026f6:	78bb      	ldrb	r3, [r7, #2]
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d102      	bne.n	8002702 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2200      	movs	r2, #0
 8002700:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002708:	2b01      	cmp	r3, #1
 800270a:	d101      	bne.n	8002710 <HAL_PCD_EP_Open+0xaa>
 800270c:	2302      	movs	r3, #2
 800270e:	e00e      	b.n	800272e <HAL_PCD_EP_Open+0xc8>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68f9      	ldr	r1, [r7, #12]
 800271e:	4618      	mov	r0, r3
 8002720:	f002 fc8e 	bl	8005040 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800272c:	7afb      	ldrb	r3, [r7, #11]
}
 800272e:	4618      	mov	r0, r3
 8002730:	3710      	adds	r7, #16
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002736:	b580      	push	{r7, lr}
 8002738:	b084      	sub	sp, #16
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
 800273e:	460b      	mov	r3, r1
 8002740:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002742:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002746:	2b00      	cmp	r3, #0
 8002748:	da0f      	bge.n	800276a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800274a:	78fb      	ldrb	r3, [r7, #3]
 800274c:	f003 020f 	and.w	r2, r3, #15
 8002750:	4613      	mov	r3, r2
 8002752:	00db      	lsls	r3, r3, #3
 8002754:	4413      	add	r3, r2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	3338      	adds	r3, #56	; 0x38
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	4413      	add	r3, r2
 800275e:	3304      	adds	r3, #4
 8002760:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2201      	movs	r2, #1
 8002766:	705a      	strb	r2, [r3, #1]
 8002768:	e00f      	b.n	800278a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800276a:	78fb      	ldrb	r3, [r7, #3]
 800276c:	f003 020f 	and.w	r2, r3, #15
 8002770:	4613      	mov	r3, r2
 8002772:	00db      	lsls	r3, r3, #3
 8002774:	4413      	add	r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	4413      	add	r3, r2
 8002780:	3304      	adds	r3, #4
 8002782:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2200      	movs	r2, #0
 8002788:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800278a:	78fb      	ldrb	r3, [r7, #3]
 800278c:	f003 030f 	and.w	r3, r3, #15
 8002790:	b2da      	uxtb	r2, r3
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800279c:	2b01      	cmp	r3, #1
 800279e:	d101      	bne.n	80027a4 <HAL_PCD_EP_Close+0x6e>
 80027a0:	2302      	movs	r3, #2
 80027a2:	e00e      	b.n	80027c2 <HAL_PCD_EP_Close+0x8c>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	68f9      	ldr	r1, [r7, #12]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f002 fccc 	bl	8005150 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b086      	sub	sp, #24
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	60f8      	str	r0, [r7, #12]
 80027d2:	607a      	str	r2, [r7, #4]
 80027d4:	603b      	str	r3, [r7, #0]
 80027d6:	460b      	mov	r3, r1
 80027d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027da:	7afb      	ldrb	r3, [r7, #11]
 80027dc:	f003 020f 	and.w	r2, r3, #15
 80027e0:	4613      	mov	r3, r2
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	4413      	add	r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80027ec:	68fa      	ldr	r2, [r7, #12]
 80027ee:	4413      	add	r3, r2
 80027f0:	3304      	adds	r3, #4
 80027f2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	683a      	ldr	r2, [r7, #0]
 80027fe:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	2200      	movs	r2, #0
 8002804:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	2200      	movs	r2, #0
 800280a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800280c:	7afb      	ldrb	r3, [r7, #11]
 800280e:	f003 030f 	and.w	r3, r3, #15
 8002812:	b2da      	uxtb	r2, r3
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	2b01      	cmp	r3, #1
 800281e:	d102      	bne.n	8002826 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002826:	7afb      	ldrb	r3, [r7, #11]
 8002828:	f003 030f 	and.w	r3, r3, #15
 800282c:	2b00      	cmp	r3, #0
 800282e:	d109      	bne.n	8002844 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6818      	ldr	r0, [r3, #0]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	691b      	ldr	r3, [r3, #16]
 8002838:	b2db      	uxtb	r3, r3
 800283a:	461a      	mov	r2, r3
 800283c:	6979      	ldr	r1, [r7, #20]
 800283e:	f002 ffab 	bl	8005798 <USB_EP0StartXfer>
 8002842:	e008      	b.n	8002856 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6818      	ldr	r0, [r3, #0]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	691b      	ldr	r3, [r3, #16]
 800284c:	b2db      	uxtb	r3, r3
 800284e:	461a      	mov	r2, r3
 8002850:	6979      	ldr	r1, [r7, #20]
 8002852:	f002 fd59 	bl	8005308 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3718      	adds	r7, #24
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	460b      	mov	r3, r1
 800286a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800286c:	78fb      	ldrb	r3, [r7, #3]
 800286e:	f003 020f 	and.w	r2, r3, #15
 8002872:	6879      	ldr	r1, [r7, #4]
 8002874:	4613      	mov	r3, r2
 8002876:	00db      	lsls	r3, r3, #3
 8002878:	4413      	add	r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	440b      	add	r3, r1
 800287e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002882:	681b      	ldr	r3, [r3, #0]
}
 8002884:	4618      	mov	r0, r3
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b086      	sub	sp, #24
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	607a      	str	r2, [r7, #4]
 800289a:	603b      	str	r3, [r7, #0]
 800289c:	460b      	mov	r3, r1
 800289e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028a0:	7afb      	ldrb	r3, [r7, #11]
 80028a2:	f003 020f 	and.w	r2, r3, #15
 80028a6:	4613      	mov	r3, r2
 80028a8:	00db      	lsls	r3, r3, #3
 80028aa:	4413      	add	r3, r2
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	3338      	adds	r3, #56	; 0x38
 80028b0:	68fa      	ldr	r2, [r7, #12]
 80028b2:	4413      	add	r3, r2
 80028b4:	3304      	adds	r3, #4
 80028b6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	683a      	ldr	r2, [r7, #0]
 80028c2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	2200      	movs	r2, #0
 80028c8:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	2201      	movs	r2, #1
 80028ce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028d0:	7afb      	ldrb	r3, [r7, #11]
 80028d2:	f003 030f 	and.w	r3, r3, #15
 80028d6:	b2da      	uxtb	r2, r3
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	691b      	ldr	r3, [r3, #16]
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d102      	bne.n	80028ea <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80028ea:	7afb      	ldrb	r3, [r7, #11]
 80028ec:	f003 030f 	and.w	r3, r3, #15
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d109      	bne.n	8002908 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6818      	ldr	r0, [r3, #0]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	691b      	ldr	r3, [r3, #16]
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	461a      	mov	r2, r3
 8002900:	6979      	ldr	r1, [r7, #20]
 8002902:	f002 ff49 	bl	8005798 <USB_EP0StartXfer>
 8002906:	e008      	b.n	800291a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6818      	ldr	r0, [r3, #0]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	b2db      	uxtb	r3, r3
 8002912:	461a      	mov	r2, r3
 8002914:	6979      	ldr	r1, [r7, #20]
 8002916:	f002 fcf7 	bl	8005308 <USB_EPStartXfer>
  }

  return HAL_OK;
 800291a:	2300      	movs	r3, #0
}
 800291c:	4618      	mov	r0, r3
 800291e:	3718      	adds	r7, #24
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	460b      	mov	r3, r1
 800292e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002930:	78fb      	ldrb	r3, [r7, #3]
 8002932:	f003 020f 	and.w	r2, r3, #15
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	429a      	cmp	r2, r3
 800293c:	d901      	bls.n	8002942 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e050      	b.n	80029e4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002942:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002946:	2b00      	cmp	r3, #0
 8002948:	da0f      	bge.n	800296a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800294a:	78fb      	ldrb	r3, [r7, #3]
 800294c:	f003 020f 	and.w	r2, r3, #15
 8002950:	4613      	mov	r3, r2
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	4413      	add	r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	3338      	adds	r3, #56	; 0x38
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	4413      	add	r3, r2
 800295e:	3304      	adds	r3, #4
 8002960:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2201      	movs	r2, #1
 8002966:	705a      	strb	r2, [r3, #1]
 8002968:	e00d      	b.n	8002986 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800296a:	78fa      	ldrb	r2, [r7, #3]
 800296c:	4613      	mov	r3, r2
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	4413      	add	r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	4413      	add	r3, r2
 800297c:	3304      	adds	r3, #4
 800297e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2200      	movs	r2, #0
 8002984:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2201      	movs	r2, #1
 800298a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800298c:	78fb      	ldrb	r3, [r7, #3]
 800298e:	f003 030f 	and.w	r3, r3, #15
 8002992:	b2da      	uxtb	r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d101      	bne.n	80029a6 <HAL_PCD_EP_SetStall+0x82>
 80029a2:	2302      	movs	r3, #2
 80029a4:	e01e      	b.n	80029e4 <HAL_PCD_EP_SetStall+0xc0>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2201      	movs	r2, #1
 80029aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	68f9      	ldr	r1, [r7, #12]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f003 f987 	bl	8005cc8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80029ba:	78fb      	ldrb	r3, [r7, #3]
 80029bc:	f003 030f 	and.w	r3, r3, #15
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d10a      	bne.n	80029da <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6818      	ldr	r0, [r3, #0]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	691b      	ldr	r3, [r3, #16]
 80029cc:	b2d9      	uxtb	r1, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80029d4:	461a      	mov	r2, r3
 80029d6:	f003 fb77 	bl	80060c8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3710      	adds	r7, #16
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	460b      	mov	r3, r1
 80029f6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80029f8:	78fb      	ldrb	r3, [r7, #3]
 80029fa:	f003 020f 	and.w	r2, r3, #15
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d901      	bls.n	8002a0a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e042      	b.n	8002a90 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	da0f      	bge.n	8002a32 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a12:	78fb      	ldrb	r3, [r7, #3]
 8002a14:	f003 020f 	and.w	r2, r3, #15
 8002a18:	4613      	mov	r3, r2
 8002a1a:	00db      	lsls	r3, r3, #3
 8002a1c:	4413      	add	r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	3338      	adds	r3, #56	; 0x38
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	4413      	add	r3, r2
 8002a26:	3304      	adds	r3, #4
 8002a28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	705a      	strb	r2, [r3, #1]
 8002a30:	e00f      	b.n	8002a52 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a32:	78fb      	ldrb	r3, [r7, #3]
 8002a34:	f003 020f 	and.w	r2, r3, #15
 8002a38:	4613      	mov	r3, r2
 8002a3a:	00db      	lsls	r3, r3, #3
 8002a3c:	4413      	add	r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	4413      	add	r3, r2
 8002a48:	3304      	adds	r3, #4
 8002a4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2200      	movs	r2, #0
 8002a56:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a58:	78fb      	ldrb	r3, [r7, #3]
 8002a5a:	f003 030f 	and.w	r3, r3, #15
 8002a5e:	b2da      	uxtb	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d101      	bne.n	8002a72 <HAL_PCD_EP_ClrStall+0x86>
 8002a6e:	2302      	movs	r3, #2
 8002a70:	e00e      	b.n	8002a90 <HAL_PCD_EP_ClrStall+0xa4>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2201      	movs	r2, #1
 8002a76:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68f9      	ldr	r1, [r7, #12]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f003 f98f 	bl	8005da4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002a8e:	2300      	movs	r3, #0
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3710      	adds	r7, #16
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002aa4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	da0c      	bge.n	8002ac6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002aac:	78fb      	ldrb	r3, [r7, #3]
 8002aae:	f003 020f 	and.w	r2, r3, #15
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	00db      	lsls	r3, r3, #3
 8002ab6:	4413      	add	r3, r2
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	3338      	adds	r3, #56	; 0x38
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	4413      	add	r3, r2
 8002ac0:	3304      	adds	r3, #4
 8002ac2:	60fb      	str	r3, [r7, #12]
 8002ac4:	e00c      	b.n	8002ae0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ac6:	78fb      	ldrb	r3, [r7, #3]
 8002ac8:	f003 020f 	and.w	r2, r3, #15
 8002acc:	4613      	mov	r3, r2
 8002ace:	00db      	lsls	r3, r3, #3
 8002ad0:	4413      	add	r3, r2
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	4413      	add	r3, r2
 8002adc:	3304      	adds	r3, #4
 8002ade:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68f9      	ldr	r1, [r7, #12]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f002 ffae 	bl	8005a48 <USB_EPStopXfer>
 8002aec:	4603      	mov	r3, r0
 8002aee:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002af0:	7afb      	ldrb	r3, [r7, #11]
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3710      	adds	r7, #16
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b08a      	sub	sp, #40	; 0x28
 8002afe:	af02      	add	r7, sp, #8
 8002b00:	6078      	str	r0, [r7, #4]
 8002b02:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002b0e:	683a      	ldr	r2, [r7, #0]
 8002b10:	4613      	mov	r3, r2
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	4413      	add	r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	3338      	adds	r3, #56	; 0x38
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	3304      	adds	r3, #4
 8002b20:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6a1a      	ldr	r2, [r3, #32]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	699b      	ldr	r3, [r3, #24]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d901      	bls.n	8002b32 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e06c      	b.n	8002c0c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	699a      	ldr	r2, [r3, #24]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6a1b      	ldr	r3, [r3, #32]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	69fa      	ldr	r2, [r7, #28]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d902      	bls.n	8002b4e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	3303      	adds	r3, #3
 8002b52:	089b      	lsrs	r3, r3, #2
 8002b54:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b56:	e02b      	b.n	8002bb0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	699a      	ldr	r2, [r3, #24]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6a1b      	ldr	r3, [r3, #32]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	69fa      	ldr	r2, [r7, #28]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d902      	bls.n	8002b74 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	3303      	adds	r3, #3
 8002b78:	089b      	lsrs	r3, r3, #2
 8002b7a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6919      	ldr	r1, [r3, #16]
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	b2da      	uxtb	r2, r3
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	9300      	str	r3, [sp, #0]
 8002b90:	4603      	mov	r3, r0
 8002b92:	6978      	ldr	r0, [r7, #20]
 8002b94:	f003 f802 	bl	8005b9c <USB_WritePacket>

    ep->xfer_buff  += len;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	691a      	ldr	r2, [r3, #16]
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	441a      	add	r2, r3
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6a1a      	ldr	r2, [r3, #32]
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	441a      	add	r2, r3
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	015a      	lsls	r2, r3, #5
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bbc:	699b      	ldr	r3, [r3, #24]
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d809      	bhi.n	8002bda <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6a1a      	ldr	r2, [r3, #32]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d203      	bcs.n	8002bda <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1be      	bne.n	8002b58 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	699a      	ldr	r2, [r3, #24]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6a1b      	ldr	r3, [r3, #32]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d811      	bhi.n	8002c0a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	f003 030f 	and.w	r3, r3, #15
 8002bec:	2201      	movs	r2, #1
 8002bee:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	43db      	mvns	r3, r3
 8002c00:	6939      	ldr	r1, [r7, #16]
 8002c02:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002c06:	4013      	ands	r3, r2
 8002c08:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3720      	adds	r7, #32
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b088      	sub	sp, #32
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	333c      	adds	r3, #60	; 0x3c
 8002c2c:	3304      	adds	r3, #4
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	015a      	lsls	r2, r3, #5
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	4413      	add	r3, r2
 8002c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d17b      	bne.n	8002d42 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	f003 0308 	and.w	r3, r3, #8
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d015      	beq.n	8002c80 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	4a61      	ldr	r2, [pc, #388]	; (8002ddc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	f240 80b9 	bls.w	8002dd0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	f000 80b3 	beq.w	8002dd0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	015a      	lsls	r2, r3, #5
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	4413      	add	r3, r2
 8002c72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c76:	461a      	mov	r2, r3
 8002c78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c7c:	6093      	str	r3, [r2, #8]
 8002c7e:	e0a7      	b.n	8002dd0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	f003 0320 	and.w	r3, r3, #32
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d009      	beq.n	8002c9e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	015a      	lsls	r2, r3, #5
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	4413      	add	r3, r2
 8002c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c96:	461a      	mov	r2, r3
 8002c98:	2320      	movs	r3, #32
 8002c9a:	6093      	str	r3, [r2, #8]
 8002c9c:	e098      	b.n	8002dd0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	f040 8093 	bne.w	8002dd0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	4a4b      	ldr	r2, [pc, #300]	; (8002ddc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d90f      	bls.n	8002cd2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d00a      	beq.n	8002cd2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	015a      	lsls	r2, r3, #5
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cc8:	461a      	mov	r2, r3
 8002cca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cce:	6093      	str	r3, [r2, #8]
 8002cd0:	e07e      	b.n	8002dd0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002cd2:	683a      	ldr	r2, [r7, #0]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	4413      	add	r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	3304      	adds	r3, #4
 8002ce6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	69da      	ldr	r2, [r3, #28]
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	0159      	lsls	r1, r3, #5
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	440b      	add	r3, r1
 8002cf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cfe:	1ad2      	subs	r2, r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d114      	bne.n	8002d34 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d109      	bne.n	8002d26 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6818      	ldr	r0, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	2101      	movs	r1, #1
 8002d20:	f003 f9d2 	bl	80060c8 <USB_EP0_OutStart>
 8002d24:	e006      	b.n	8002d34 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	691a      	ldr	r2, [r3, #16]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
 8002d2e:	441a      	add	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	4619      	mov	r1, r3
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f008 fa4a 	bl	800b1d4 <HAL_PCD_DataOutStageCallback>
 8002d40:	e046      	b.n	8002dd0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	4a26      	ldr	r2, [pc, #152]	; (8002de0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d124      	bne.n	8002d94 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d00a      	beq.n	8002d6a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	015a      	lsls	r2, r3, #5
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d60:	461a      	mov	r2, r3
 8002d62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d66:	6093      	str	r3, [r2, #8]
 8002d68:	e032      	b.n	8002dd0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	f003 0320 	and.w	r3, r3, #32
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d008      	beq.n	8002d86 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	015a      	lsls	r2, r3, #5
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d80:	461a      	mov	r2, r3
 8002d82:	2320      	movs	r3, #32
 8002d84:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f008 fa21 	bl	800b1d4 <HAL_PCD_DataOutStageCallback>
 8002d92:	e01d      	b.n	8002dd0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d114      	bne.n	8002dc4 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002d9a:	6879      	ldr	r1, [r7, #4]
 8002d9c:	683a      	ldr	r2, [r7, #0]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	00db      	lsls	r3, r3, #3
 8002da2:	4413      	add	r3, r2
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	440b      	add	r3, r1
 8002da8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d108      	bne.n	8002dc4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6818      	ldr	r0, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	2100      	movs	r1, #0
 8002dc0:	f003 f982 	bl	80060c8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	4619      	mov	r1, r3
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f008 fa02 	bl	800b1d4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3720      	adds	r7, #32
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	4f54300a 	.word	0x4f54300a
 8002de0:	4f54310a 	.word	0x4f54310a

08002de4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b086      	sub	sp, #24
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	333c      	adds	r3, #60	; 0x3c
 8002dfc:	3304      	adds	r3, #4
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	015a      	lsls	r2, r3, #5
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	4413      	add	r3, r2
 8002e0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	4a15      	ldr	r2, [pc, #84]	; (8002e6c <PCD_EP_OutSetupPacket_int+0x88>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d90e      	bls.n	8002e38 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d009      	beq.n	8002e38 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	015a      	lsls	r2, r3, #5
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e30:	461a      	mov	r2, r3
 8002e32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e36:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f008 f9b9 	bl	800b1b0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	4a0a      	ldr	r2, [pc, #40]	; (8002e6c <PCD_EP_OutSetupPacket_int+0x88>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d90c      	bls.n	8002e60 <PCD_EP_OutSetupPacket_int+0x7c>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d108      	bne.n	8002e60 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6818      	ldr	r0, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002e58:	461a      	mov	r2, r3
 8002e5a:	2101      	movs	r1, #1
 8002e5c:	f003 f934 	bl	80060c8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3718      	adds	r7, #24
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	4f54300a 	.word	0x4f54300a

08002e70 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b085      	sub	sp, #20
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	460b      	mov	r3, r1
 8002e7a:	70fb      	strb	r3, [r7, #3]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e86:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002e88:	78fb      	ldrb	r3, [r7, #3]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d107      	bne.n	8002e9e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002e8e:	883b      	ldrh	r3, [r7, #0]
 8002e90:	0419      	lsls	r1, r3, #16
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	68ba      	ldr	r2, [r7, #8]
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	629a      	str	r2, [r3, #40]	; 0x28
 8002e9c:	e028      	b.n	8002ef0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea4:	0c1b      	lsrs	r3, r3, #16
 8002ea6:	68ba      	ldr	r2, [r7, #8]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002eac:	2300      	movs	r3, #0
 8002eae:	73fb      	strb	r3, [r7, #15]
 8002eb0:	e00d      	b.n	8002ece <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	7bfb      	ldrb	r3, [r7, #15]
 8002eb8:	3340      	adds	r3, #64	; 0x40
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	4413      	add	r3, r2
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	0c1b      	lsrs	r3, r3, #16
 8002ec2:	68ba      	ldr	r2, [r7, #8]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002ec8:	7bfb      	ldrb	r3, [r7, #15]
 8002eca:	3301      	adds	r3, #1
 8002ecc:	73fb      	strb	r3, [r7, #15]
 8002ece:	7bfa      	ldrb	r2, [r7, #15]
 8002ed0:	78fb      	ldrb	r3, [r7, #3]
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d3ec      	bcc.n	8002eb2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002ed8:	883b      	ldrh	r3, [r7, #0]
 8002eda:	0418      	lsls	r0, r3, #16
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6819      	ldr	r1, [r3, #0]
 8002ee0:	78fb      	ldrb	r3, [r7, #3]
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	68ba      	ldr	r2, [r7, #8]
 8002ee6:	4302      	orrs	r2, r0
 8002ee8:	3340      	adds	r3, #64	; 0x40
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	440b      	add	r3, r1
 8002eee:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3714      	adds	r7, #20
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr

08002efe <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002efe:	b480      	push	{r7}
 8002f00:	b083      	sub	sp, #12
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
 8002f06:	460b      	mov	r3, r1
 8002f08:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	887a      	ldrh	r2, [r7, #2]
 8002f10:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	460b      	mov	r3, r1
 8002f2a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002f2c:	bf00      	nop
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b086      	sub	sp, #24
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d101      	bne.n	8002f4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e267      	b.n	800341a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0301 	and.w	r3, r3, #1
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d075      	beq.n	8003042 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f56:	4b88      	ldr	r3, [pc, #544]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f003 030c 	and.w	r3, r3, #12
 8002f5e:	2b04      	cmp	r3, #4
 8002f60:	d00c      	beq.n	8002f7c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f62:	4b85      	ldr	r3, [pc, #532]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f6a:	2b08      	cmp	r3, #8
 8002f6c:	d112      	bne.n	8002f94 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f6e:	4b82      	ldr	r3, [pc, #520]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f7a:	d10b      	bne.n	8002f94 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f7c:	4b7e      	ldr	r3, [pc, #504]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d05b      	beq.n	8003040 <HAL_RCC_OscConfig+0x108>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d157      	bne.n	8003040 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e242      	b.n	800341a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f9c:	d106      	bne.n	8002fac <HAL_RCC_OscConfig+0x74>
 8002f9e:	4b76      	ldr	r3, [pc, #472]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a75      	ldr	r2, [pc, #468]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 8002fa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fa8:	6013      	str	r3, [r2, #0]
 8002faa:	e01d      	b.n	8002fe8 <HAL_RCC_OscConfig+0xb0>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fb4:	d10c      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x98>
 8002fb6:	4b70      	ldr	r3, [pc, #448]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a6f      	ldr	r2, [pc, #444]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 8002fbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fc0:	6013      	str	r3, [r2, #0]
 8002fc2:	4b6d      	ldr	r3, [pc, #436]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a6c      	ldr	r2, [pc, #432]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 8002fc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fcc:	6013      	str	r3, [r2, #0]
 8002fce:	e00b      	b.n	8002fe8 <HAL_RCC_OscConfig+0xb0>
 8002fd0:	4b69      	ldr	r3, [pc, #420]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a68      	ldr	r2, [pc, #416]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 8002fd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fda:	6013      	str	r3, [r2, #0]
 8002fdc:	4b66      	ldr	r3, [pc, #408]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a65      	ldr	r2, [pc, #404]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 8002fe2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fe6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d013      	beq.n	8003018 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff0:	f7fe fa44 	bl	800147c <HAL_GetTick>
 8002ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ff6:	e008      	b.n	800300a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ff8:	f7fe fa40 	bl	800147c <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	2b64      	cmp	r3, #100	; 0x64
 8003004:	d901      	bls.n	800300a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e207      	b.n	800341a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800300a:	4b5b      	ldr	r3, [pc, #364]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d0f0      	beq.n	8002ff8 <HAL_RCC_OscConfig+0xc0>
 8003016:	e014      	b.n	8003042 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003018:	f7fe fa30 	bl	800147c <HAL_GetTick>
 800301c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800301e:	e008      	b.n	8003032 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003020:	f7fe fa2c 	bl	800147c <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b64      	cmp	r3, #100	; 0x64
 800302c:	d901      	bls.n	8003032 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e1f3      	b.n	800341a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003032:	4b51      	ldr	r3, [pc, #324]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d1f0      	bne.n	8003020 <HAL_RCC_OscConfig+0xe8>
 800303e:	e000      	b.n	8003042 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003040:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d063      	beq.n	8003116 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800304e:	4b4a      	ldr	r3, [pc, #296]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f003 030c 	and.w	r3, r3, #12
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00b      	beq.n	8003072 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800305a:	4b47      	ldr	r3, [pc, #284]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003062:	2b08      	cmp	r3, #8
 8003064:	d11c      	bne.n	80030a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003066:	4b44      	ldr	r3, [pc, #272]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d116      	bne.n	80030a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003072:	4b41      	ldr	r3, [pc, #260]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	2b00      	cmp	r3, #0
 800307c:	d005      	beq.n	800308a <HAL_RCC_OscConfig+0x152>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	2b01      	cmp	r3, #1
 8003084:	d001      	beq.n	800308a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e1c7      	b.n	800341a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800308a:	4b3b      	ldr	r3, [pc, #236]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	4937      	ldr	r1, [pc, #220]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 800309a:	4313      	orrs	r3, r2
 800309c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800309e:	e03a      	b.n	8003116 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d020      	beq.n	80030ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030a8:	4b34      	ldr	r3, [pc, #208]	; (800317c <HAL_RCC_OscConfig+0x244>)
 80030aa:	2201      	movs	r2, #1
 80030ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ae:	f7fe f9e5 	bl	800147c <HAL_GetTick>
 80030b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030b4:	e008      	b.n	80030c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030b6:	f7fe f9e1 	bl	800147c <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d901      	bls.n	80030c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e1a8      	b.n	800341a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030c8:	4b2b      	ldr	r3, [pc, #172]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0302 	and.w	r3, r3, #2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d0f0      	beq.n	80030b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030d4:	4b28      	ldr	r3, [pc, #160]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	691b      	ldr	r3, [r3, #16]
 80030e0:	00db      	lsls	r3, r3, #3
 80030e2:	4925      	ldr	r1, [pc, #148]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	600b      	str	r3, [r1, #0]
 80030e8:	e015      	b.n	8003116 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030ea:	4b24      	ldr	r3, [pc, #144]	; (800317c <HAL_RCC_OscConfig+0x244>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f0:	f7fe f9c4 	bl	800147c <HAL_GetTick>
 80030f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030f6:	e008      	b.n	800310a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030f8:	f7fe f9c0 	bl	800147c <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b02      	cmp	r3, #2
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e187      	b.n	800341a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800310a:	4b1b      	ldr	r3, [pc, #108]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1f0      	bne.n	80030f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0308 	and.w	r3, r3, #8
 800311e:	2b00      	cmp	r3, #0
 8003120:	d036      	beq.n	8003190 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d016      	beq.n	8003158 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800312a:	4b15      	ldr	r3, [pc, #84]	; (8003180 <HAL_RCC_OscConfig+0x248>)
 800312c:	2201      	movs	r2, #1
 800312e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003130:	f7fe f9a4 	bl	800147c <HAL_GetTick>
 8003134:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003136:	e008      	b.n	800314a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003138:	f7fe f9a0 	bl	800147c <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b02      	cmp	r3, #2
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e167      	b.n	800341a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800314a:	4b0b      	ldr	r3, [pc, #44]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 800314c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d0f0      	beq.n	8003138 <HAL_RCC_OscConfig+0x200>
 8003156:	e01b      	b.n	8003190 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003158:	4b09      	ldr	r3, [pc, #36]	; (8003180 <HAL_RCC_OscConfig+0x248>)
 800315a:	2200      	movs	r2, #0
 800315c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800315e:	f7fe f98d 	bl	800147c <HAL_GetTick>
 8003162:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003164:	e00e      	b.n	8003184 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003166:	f7fe f989 	bl	800147c <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	2b02      	cmp	r3, #2
 8003172:	d907      	bls.n	8003184 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e150      	b.n	800341a <HAL_RCC_OscConfig+0x4e2>
 8003178:	40023800 	.word	0x40023800
 800317c:	42470000 	.word	0x42470000
 8003180:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003184:	4b88      	ldr	r3, [pc, #544]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 8003186:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003188:	f003 0302 	and.w	r3, r3, #2
 800318c:	2b00      	cmp	r3, #0
 800318e:	d1ea      	bne.n	8003166 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0304 	and.w	r3, r3, #4
 8003198:	2b00      	cmp	r3, #0
 800319a:	f000 8097 	beq.w	80032cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800319e:	2300      	movs	r3, #0
 80031a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031a2:	4b81      	ldr	r3, [pc, #516]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 80031a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d10f      	bne.n	80031ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031ae:	2300      	movs	r3, #0
 80031b0:	60bb      	str	r3, [r7, #8]
 80031b2:	4b7d      	ldr	r3, [pc, #500]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 80031b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b6:	4a7c      	ldr	r2, [pc, #496]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 80031b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031bc:	6413      	str	r3, [r2, #64]	; 0x40
 80031be:	4b7a      	ldr	r3, [pc, #488]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 80031c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031c6:	60bb      	str	r3, [r7, #8]
 80031c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031ca:	2301      	movs	r3, #1
 80031cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ce:	4b77      	ldr	r3, [pc, #476]	; (80033ac <HAL_RCC_OscConfig+0x474>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d118      	bne.n	800320c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031da:	4b74      	ldr	r3, [pc, #464]	; (80033ac <HAL_RCC_OscConfig+0x474>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a73      	ldr	r2, [pc, #460]	; (80033ac <HAL_RCC_OscConfig+0x474>)
 80031e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031e6:	f7fe f949 	bl	800147c <HAL_GetTick>
 80031ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ec:	e008      	b.n	8003200 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031ee:	f7fe f945 	bl	800147c <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d901      	bls.n	8003200 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e10c      	b.n	800341a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003200:	4b6a      	ldr	r3, [pc, #424]	; (80033ac <HAL_RCC_OscConfig+0x474>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003208:	2b00      	cmp	r3, #0
 800320a:	d0f0      	beq.n	80031ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	2b01      	cmp	r3, #1
 8003212:	d106      	bne.n	8003222 <HAL_RCC_OscConfig+0x2ea>
 8003214:	4b64      	ldr	r3, [pc, #400]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 8003216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003218:	4a63      	ldr	r2, [pc, #396]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 800321a:	f043 0301 	orr.w	r3, r3, #1
 800321e:	6713      	str	r3, [r2, #112]	; 0x70
 8003220:	e01c      	b.n	800325c <HAL_RCC_OscConfig+0x324>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	2b05      	cmp	r3, #5
 8003228:	d10c      	bne.n	8003244 <HAL_RCC_OscConfig+0x30c>
 800322a:	4b5f      	ldr	r3, [pc, #380]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 800322c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800322e:	4a5e      	ldr	r2, [pc, #376]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 8003230:	f043 0304 	orr.w	r3, r3, #4
 8003234:	6713      	str	r3, [r2, #112]	; 0x70
 8003236:	4b5c      	ldr	r3, [pc, #368]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 8003238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800323a:	4a5b      	ldr	r2, [pc, #364]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 800323c:	f043 0301 	orr.w	r3, r3, #1
 8003240:	6713      	str	r3, [r2, #112]	; 0x70
 8003242:	e00b      	b.n	800325c <HAL_RCC_OscConfig+0x324>
 8003244:	4b58      	ldr	r3, [pc, #352]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 8003246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003248:	4a57      	ldr	r2, [pc, #348]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 800324a:	f023 0301 	bic.w	r3, r3, #1
 800324e:	6713      	str	r3, [r2, #112]	; 0x70
 8003250:	4b55      	ldr	r3, [pc, #340]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 8003252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003254:	4a54      	ldr	r2, [pc, #336]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 8003256:	f023 0304 	bic.w	r3, r3, #4
 800325a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d015      	beq.n	8003290 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003264:	f7fe f90a 	bl	800147c <HAL_GetTick>
 8003268:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800326a:	e00a      	b.n	8003282 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800326c:	f7fe f906 	bl	800147c <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	f241 3288 	movw	r2, #5000	; 0x1388
 800327a:	4293      	cmp	r3, r2
 800327c:	d901      	bls.n	8003282 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e0cb      	b.n	800341a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003282:	4b49      	ldr	r3, [pc, #292]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 8003284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d0ee      	beq.n	800326c <HAL_RCC_OscConfig+0x334>
 800328e:	e014      	b.n	80032ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003290:	f7fe f8f4 	bl	800147c <HAL_GetTick>
 8003294:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003296:	e00a      	b.n	80032ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003298:	f7fe f8f0 	bl	800147c <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e0b5      	b.n	800341a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032ae:	4b3e      	ldr	r3, [pc, #248]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 80032b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1ee      	bne.n	8003298 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032ba:	7dfb      	ldrb	r3, [r7, #23]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d105      	bne.n	80032cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032c0:	4b39      	ldr	r3, [pc, #228]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 80032c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c4:	4a38      	ldr	r2, [pc, #224]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 80032c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	699b      	ldr	r3, [r3, #24]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	f000 80a1 	beq.w	8003418 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032d6:	4b34      	ldr	r3, [pc, #208]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f003 030c 	and.w	r3, r3, #12
 80032de:	2b08      	cmp	r3, #8
 80032e0:	d05c      	beq.n	800339c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	699b      	ldr	r3, [r3, #24]
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d141      	bne.n	800336e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ea:	4b31      	ldr	r3, [pc, #196]	; (80033b0 <HAL_RCC_OscConfig+0x478>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f0:	f7fe f8c4 	bl	800147c <HAL_GetTick>
 80032f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032f6:	e008      	b.n	800330a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032f8:	f7fe f8c0 	bl	800147c <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b02      	cmp	r3, #2
 8003304:	d901      	bls.n	800330a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e087      	b.n	800341a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800330a:	4b27      	ldr	r3, [pc, #156]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1f0      	bne.n	80032f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	69da      	ldr	r2, [r3, #28]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a1b      	ldr	r3, [r3, #32]
 800331e:	431a      	orrs	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003324:	019b      	lsls	r3, r3, #6
 8003326:	431a      	orrs	r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800332c:	085b      	lsrs	r3, r3, #1
 800332e:	3b01      	subs	r3, #1
 8003330:	041b      	lsls	r3, r3, #16
 8003332:	431a      	orrs	r2, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003338:	061b      	lsls	r3, r3, #24
 800333a:	491b      	ldr	r1, [pc, #108]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 800333c:	4313      	orrs	r3, r2
 800333e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003340:	4b1b      	ldr	r3, [pc, #108]	; (80033b0 <HAL_RCC_OscConfig+0x478>)
 8003342:	2201      	movs	r2, #1
 8003344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003346:	f7fe f899 	bl	800147c <HAL_GetTick>
 800334a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800334c:	e008      	b.n	8003360 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800334e:	f7fe f895 	bl	800147c <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	2b02      	cmp	r3, #2
 800335a:	d901      	bls.n	8003360 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e05c      	b.n	800341a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003360:	4b11      	ldr	r3, [pc, #68]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d0f0      	beq.n	800334e <HAL_RCC_OscConfig+0x416>
 800336c:	e054      	b.n	8003418 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800336e:	4b10      	ldr	r3, [pc, #64]	; (80033b0 <HAL_RCC_OscConfig+0x478>)
 8003370:	2200      	movs	r2, #0
 8003372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003374:	f7fe f882 	bl	800147c <HAL_GetTick>
 8003378:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800337a:	e008      	b.n	800338e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800337c:	f7fe f87e 	bl	800147c <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b02      	cmp	r3, #2
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e045      	b.n	800341a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800338e:	4b06      	ldr	r3, [pc, #24]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1f0      	bne.n	800337c <HAL_RCC_OscConfig+0x444>
 800339a:	e03d      	b.n	8003418 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d107      	bne.n	80033b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e038      	b.n	800341a <HAL_RCC_OscConfig+0x4e2>
 80033a8:	40023800 	.word	0x40023800
 80033ac:	40007000 	.word	0x40007000
 80033b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033b4:	4b1b      	ldr	r3, [pc, #108]	; (8003424 <HAL_RCC_OscConfig+0x4ec>)
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d028      	beq.n	8003414 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d121      	bne.n	8003414 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033da:	429a      	cmp	r2, r3
 80033dc:	d11a      	bne.n	8003414 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033de:	68fa      	ldr	r2, [r7, #12]
 80033e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80033e4:	4013      	ands	r3, r2
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d111      	bne.n	8003414 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fa:	085b      	lsrs	r3, r3, #1
 80033fc:	3b01      	subs	r3, #1
 80033fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003400:	429a      	cmp	r2, r3
 8003402:	d107      	bne.n	8003414 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003410:	429a      	cmp	r2, r3
 8003412:	d001      	beq.n	8003418 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e000      	b.n	800341a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3718      	adds	r7, #24
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	40023800 	.word	0x40023800

08003428 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d101      	bne.n	800343c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e0cc      	b.n	80035d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800343c:	4b68      	ldr	r3, [pc, #416]	; (80035e0 <HAL_RCC_ClockConfig+0x1b8>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0307 	and.w	r3, r3, #7
 8003444:	683a      	ldr	r2, [r7, #0]
 8003446:	429a      	cmp	r2, r3
 8003448:	d90c      	bls.n	8003464 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800344a:	4b65      	ldr	r3, [pc, #404]	; (80035e0 <HAL_RCC_ClockConfig+0x1b8>)
 800344c:	683a      	ldr	r2, [r7, #0]
 800344e:	b2d2      	uxtb	r2, r2
 8003450:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003452:	4b63      	ldr	r3, [pc, #396]	; (80035e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0307 	and.w	r3, r3, #7
 800345a:	683a      	ldr	r2, [r7, #0]
 800345c:	429a      	cmp	r2, r3
 800345e:	d001      	beq.n	8003464 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e0b8      	b.n	80035d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0302 	and.w	r3, r3, #2
 800346c:	2b00      	cmp	r3, #0
 800346e:	d020      	beq.n	80034b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0304 	and.w	r3, r3, #4
 8003478:	2b00      	cmp	r3, #0
 800347a:	d005      	beq.n	8003488 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800347c:	4b59      	ldr	r3, [pc, #356]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	4a58      	ldr	r2, [pc, #352]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003482:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003486:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0308 	and.w	r3, r3, #8
 8003490:	2b00      	cmp	r3, #0
 8003492:	d005      	beq.n	80034a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003494:	4b53      	ldr	r3, [pc, #332]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	4a52      	ldr	r2, [pc, #328]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 800349a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800349e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034a0:	4b50      	ldr	r3, [pc, #320]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	494d      	ldr	r1, [pc, #308]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d044      	beq.n	8003548 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d107      	bne.n	80034d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034c6:	4b47      	ldr	r3, [pc, #284]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d119      	bne.n	8003506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e07f      	b.n	80035d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d003      	beq.n	80034e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034e2:	2b03      	cmp	r3, #3
 80034e4:	d107      	bne.n	80034f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034e6:	4b3f      	ldr	r3, [pc, #252]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d109      	bne.n	8003506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e06f      	b.n	80035d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034f6:	4b3b      	ldr	r3, [pc, #236]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d101      	bne.n	8003506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e067      	b.n	80035d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003506:	4b37      	ldr	r3, [pc, #220]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	f023 0203 	bic.w	r2, r3, #3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	4934      	ldr	r1, [pc, #208]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003514:	4313      	orrs	r3, r2
 8003516:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003518:	f7fd ffb0 	bl	800147c <HAL_GetTick>
 800351c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800351e:	e00a      	b.n	8003536 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003520:	f7fd ffac 	bl	800147c <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	f241 3288 	movw	r2, #5000	; 0x1388
 800352e:	4293      	cmp	r3, r2
 8003530:	d901      	bls.n	8003536 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e04f      	b.n	80035d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003536:	4b2b      	ldr	r3, [pc, #172]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f003 020c 	and.w	r2, r3, #12
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	429a      	cmp	r2, r3
 8003546:	d1eb      	bne.n	8003520 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003548:	4b25      	ldr	r3, [pc, #148]	; (80035e0 <HAL_RCC_ClockConfig+0x1b8>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0307 	and.w	r3, r3, #7
 8003550:	683a      	ldr	r2, [r7, #0]
 8003552:	429a      	cmp	r2, r3
 8003554:	d20c      	bcs.n	8003570 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003556:	4b22      	ldr	r3, [pc, #136]	; (80035e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003558:	683a      	ldr	r2, [r7, #0]
 800355a:	b2d2      	uxtb	r2, r2
 800355c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800355e:	4b20      	ldr	r3, [pc, #128]	; (80035e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0307 	and.w	r3, r3, #7
 8003566:	683a      	ldr	r2, [r7, #0]
 8003568:	429a      	cmp	r2, r3
 800356a:	d001      	beq.n	8003570 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e032      	b.n	80035d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0304 	and.w	r3, r3, #4
 8003578:	2b00      	cmp	r3, #0
 800357a:	d008      	beq.n	800358e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800357c:	4b19      	ldr	r3, [pc, #100]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	4916      	ldr	r1, [pc, #88]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 800358a:	4313      	orrs	r3, r2
 800358c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0308 	and.w	r3, r3, #8
 8003596:	2b00      	cmp	r3, #0
 8003598:	d009      	beq.n	80035ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800359a:	4b12      	ldr	r3, [pc, #72]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	00db      	lsls	r3, r3, #3
 80035a8:	490e      	ldr	r1, [pc, #56]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80035ae:	f000 f821 	bl	80035f4 <HAL_RCC_GetSysClockFreq>
 80035b2:	4602      	mov	r2, r0
 80035b4:	4b0b      	ldr	r3, [pc, #44]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	091b      	lsrs	r3, r3, #4
 80035ba:	f003 030f 	and.w	r3, r3, #15
 80035be:	490a      	ldr	r1, [pc, #40]	; (80035e8 <HAL_RCC_ClockConfig+0x1c0>)
 80035c0:	5ccb      	ldrb	r3, [r1, r3]
 80035c2:	fa22 f303 	lsr.w	r3, r2, r3
 80035c6:	4a09      	ldr	r2, [pc, #36]	; (80035ec <HAL_RCC_ClockConfig+0x1c4>)
 80035c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80035ca:	4b09      	ldr	r3, [pc, #36]	; (80035f0 <HAL_RCC_ClockConfig+0x1c8>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7fd fde4 	bl	800119c <HAL_InitTick>

  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3710      	adds	r7, #16
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	40023c00 	.word	0x40023c00
 80035e4:	40023800 	.word	0x40023800
 80035e8:	0800c13c 	.word	0x0800c13c
 80035ec:	20000000 	.word	0x20000000
 80035f0:	20000004 	.word	0x20000004

080035f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035f8:	b094      	sub	sp, #80	; 0x50
 80035fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80035fc:	2300      	movs	r3, #0
 80035fe:	647b      	str	r3, [r7, #68]	; 0x44
 8003600:	2300      	movs	r3, #0
 8003602:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003604:	2300      	movs	r3, #0
 8003606:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003608:	2300      	movs	r3, #0
 800360a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800360c:	4b79      	ldr	r3, [pc, #484]	; (80037f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f003 030c 	and.w	r3, r3, #12
 8003614:	2b08      	cmp	r3, #8
 8003616:	d00d      	beq.n	8003634 <HAL_RCC_GetSysClockFreq+0x40>
 8003618:	2b08      	cmp	r3, #8
 800361a:	f200 80e1 	bhi.w	80037e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800361e:	2b00      	cmp	r3, #0
 8003620:	d002      	beq.n	8003628 <HAL_RCC_GetSysClockFreq+0x34>
 8003622:	2b04      	cmp	r3, #4
 8003624:	d003      	beq.n	800362e <HAL_RCC_GetSysClockFreq+0x3a>
 8003626:	e0db      	b.n	80037e0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003628:	4b73      	ldr	r3, [pc, #460]	; (80037f8 <HAL_RCC_GetSysClockFreq+0x204>)
 800362a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800362c:	e0db      	b.n	80037e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800362e:	4b73      	ldr	r3, [pc, #460]	; (80037fc <HAL_RCC_GetSysClockFreq+0x208>)
 8003630:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003632:	e0d8      	b.n	80037e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003634:	4b6f      	ldr	r3, [pc, #444]	; (80037f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800363c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800363e:	4b6d      	ldr	r3, [pc, #436]	; (80037f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d063      	beq.n	8003712 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800364a:	4b6a      	ldr	r3, [pc, #424]	; (80037f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	099b      	lsrs	r3, r3, #6
 8003650:	2200      	movs	r2, #0
 8003652:	63bb      	str	r3, [r7, #56]	; 0x38
 8003654:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003658:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800365c:	633b      	str	r3, [r7, #48]	; 0x30
 800365e:	2300      	movs	r3, #0
 8003660:	637b      	str	r3, [r7, #52]	; 0x34
 8003662:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003666:	4622      	mov	r2, r4
 8003668:	462b      	mov	r3, r5
 800366a:	f04f 0000 	mov.w	r0, #0
 800366e:	f04f 0100 	mov.w	r1, #0
 8003672:	0159      	lsls	r1, r3, #5
 8003674:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003678:	0150      	lsls	r0, r2, #5
 800367a:	4602      	mov	r2, r0
 800367c:	460b      	mov	r3, r1
 800367e:	4621      	mov	r1, r4
 8003680:	1a51      	subs	r1, r2, r1
 8003682:	6139      	str	r1, [r7, #16]
 8003684:	4629      	mov	r1, r5
 8003686:	eb63 0301 	sbc.w	r3, r3, r1
 800368a:	617b      	str	r3, [r7, #20]
 800368c:	f04f 0200 	mov.w	r2, #0
 8003690:	f04f 0300 	mov.w	r3, #0
 8003694:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003698:	4659      	mov	r1, fp
 800369a:	018b      	lsls	r3, r1, #6
 800369c:	4651      	mov	r1, sl
 800369e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80036a2:	4651      	mov	r1, sl
 80036a4:	018a      	lsls	r2, r1, #6
 80036a6:	4651      	mov	r1, sl
 80036a8:	ebb2 0801 	subs.w	r8, r2, r1
 80036ac:	4659      	mov	r1, fp
 80036ae:	eb63 0901 	sbc.w	r9, r3, r1
 80036b2:	f04f 0200 	mov.w	r2, #0
 80036b6:	f04f 0300 	mov.w	r3, #0
 80036ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036c6:	4690      	mov	r8, r2
 80036c8:	4699      	mov	r9, r3
 80036ca:	4623      	mov	r3, r4
 80036cc:	eb18 0303 	adds.w	r3, r8, r3
 80036d0:	60bb      	str	r3, [r7, #8]
 80036d2:	462b      	mov	r3, r5
 80036d4:	eb49 0303 	adc.w	r3, r9, r3
 80036d8:	60fb      	str	r3, [r7, #12]
 80036da:	f04f 0200 	mov.w	r2, #0
 80036de:	f04f 0300 	mov.w	r3, #0
 80036e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80036e6:	4629      	mov	r1, r5
 80036e8:	024b      	lsls	r3, r1, #9
 80036ea:	4621      	mov	r1, r4
 80036ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80036f0:	4621      	mov	r1, r4
 80036f2:	024a      	lsls	r2, r1, #9
 80036f4:	4610      	mov	r0, r2
 80036f6:	4619      	mov	r1, r3
 80036f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036fa:	2200      	movs	r2, #0
 80036fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80036fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003700:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003704:	f7fc fd6c 	bl	80001e0 <__aeabi_uldivmod>
 8003708:	4602      	mov	r2, r0
 800370a:	460b      	mov	r3, r1
 800370c:	4613      	mov	r3, r2
 800370e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003710:	e058      	b.n	80037c4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003712:	4b38      	ldr	r3, [pc, #224]	; (80037f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	099b      	lsrs	r3, r3, #6
 8003718:	2200      	movs	r2, #0
 800371a:	4618      	mov	r0, r3
 800371c:	4611      	mov	r1, r2
 800371e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003722:	623b      	str	r3, [r7, #32]
 8003724:	2300      	movs	r3, #0
 8003726:	627b      	str	r3, [r7, #36]	; 0x24
 8003728:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800372c:	4642      	mov	r2, r8
 800372e:	464b      	mov	r3, r9
 8003730:	f04f 0000 	mov.w	r0, #0
 8003734:	f04f 0100 	mov.w	r1, #0
 8003738:	0159      	lsls	r1, r3, #5
 800373a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800373e:	0150      	lsls	r0, r2, #5
 8003740:	4602      	mov	r2, r0
 8003742:	460b      	mov	r3, r1
 8003744:	4641      	mov	r1, r8
 8003746:	ebb2 0a01 	subs.w	sl, r2, r1
 800374a:	4649      	mov	r1, r9
 800374c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003750:	f04f 0200 	mov.w	r2, #0
 8003754:	f04f 0300 	mov.w	r3, #0
 8003758:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800375c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003760:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003764:	ebb2 040a 	subs.w	r4, r2, sl
 8003768:	eb63 050b 	sbc.w	r5, r3, fp
 800376c:	f04f 0200 	mov.w	r2, #0
 8003770:	f04f 0300 	mov.w	r3, #0
 8003774:	00eb      	lsls	r3, r5, #3
 8003776:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800377a:	00e2      	lsls	r2, r4, #3
 800377c:	4614      	mov	r4, r2
 800377e:	461d      	mov	r5, r3
 8003780:	4643      	mov	r3, r8
 8003782:	18e3      	adds	r3, r4, r3
 8003784:	603b      	str	r3, [r7, #0]
 8003786:	464b      	mov	r3, r9
 8003788:	eb45 0303 	adc.w	r3, r5, r3
 800378c:	607b      	str	r3, [r7, #4]
 800378e:	f04f 0200 	mov.w	r2, #0
 8003792:	f04f 0300 	mov.w	r3, #0
 8003796:	e9d7 4500 	ldrd	r4, r5, [r7]
 800379a:	4629      	mov	r1, r5
 800379c:	028b      	lsls	r3, r1, #10
 800379e:	4621      	mov	r1, r4
 80037a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037a4:	4621      	mov	r1, r4
 80037a6:	028a      	lsls	r2, r1, #10
 80037a8:	4610      	mov	r0, r2
 80037aa:	4619      	mov	r1, r3
 80037ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037ae:	2200      	movs	r2, #0
 80037b0:	61bb      	str	r3, [r7, #24]
 80037b2:	61fa      	str	r2, [r7, #28]
 80037b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037b8:	f7fc fd12 	bl	80001e0 <__aeabi_uldivmod>
 80037bc:	4602      	mov	r2, r0
 80037be:	460b      	mov	r3, r1
 80037c0:	4613      	mov	r3, r2
 80037c2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80037c4:	4b0b      	ldr	r3, [pc, #44]	; (80037f4 <HAL_RCC_GetSysClockFreq+0x200>)
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	0c1b      	lsrs	r3, r3, #16
 80037ca:	f003 0303 	and.w	r3, r3, #3
 80037ce:	3301      	adds	r3, #1
 80037d0:	005b      	lsls	r3, r3, #1
 80037d2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80037d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80037d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037de:	e002      	b.n	80037e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037e0:	4b05      	ldr	r3, [pc, #20]	; (80037f8 <HAL_RCC_GetSysClockFreq+0x204>)
 80037e2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3750      	adds	r7, #80	; 0x50
 80037ec:	46bd      	mov	sp, r7
 80037ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037f2:	bf00      	nop
 80037f4:	40023800 	.word	0x40023800
 80037f8:	00f42400 	.word	0x00f42400
 80037fc:	007a1200 	.word	0x007a1200

08003800 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003800:	b480      	push	{r7}
 8003802:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003804:	4b03      	ldr	r3, [pc, #12]	; (8003814 <HAL_RCC_GetHCLKFreq+0x14>)
 8003806:	681b      	ldr	r3, [r3, #0]
}
 8003808:	4618      	mov	r0, r3
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	20000000 	.word	0x20000000

08003818 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800381c:	f7ff fff0 	bl	8003800 <HAL_RCC_GetHCLKFreq>
 8003820:	4602      	mov	r2, r0
 8003822:	4b05      	ldr	r3, [pc, #20]	; (8003838 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	0a9b      	lsrs	r3, r3, #10
 8003828:	f003 0307 	and.w	r3, r3, #7
 800382c:	4903      	ldr	r1, [pc, #12]	; (800383c <HAL_RCC_GetPCLK1Freq+0x24>)
 800382e:	5ccb      	ldrb	r3, [r1, r3]
 8003830:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003834:	4618      	mov	r0, r3
 8003836:	bd80      	pop	{r7, pc}
 8003838:	40023800 	.word	0x40023800
 800383c:	0800c14c 	.word	0x0800c14c

08003840 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	220f      	movs	r2, #15
 800384e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003850:	4b12      	ldr	r3, [pc, #72]	; (800389c <HAL_RCC_GetClockConfig+0x5c>)
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	f003 0203 	and.w	r2, r3, #3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800385c:	4b0f      	ldr	r3, [pc, #60]	; (800389c <HAL_RCC_GetClockConfig+0x5c>)
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003868:	4b0c      	ldr	r3, [pc, #48]	; (800389c <HAL_RCC_GetClockConfig+0x5c>)
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003874:	4b09      	ldr	r3, [pc, #36]	; (800389c <HAL_RCC_GetClockConfig+0x5c>)
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	08db      	lsrs	r3, r3, #3
 800387a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003882:	4b07      	ldr	r3, [pc, #28]	; (80038a0 <HAL_RCC_GetClockConfig+0x60>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0207 	and.w	r2, r3, #7
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	601a      	str	r2, [r3, #0]
}
 800388e:	bf00      	nop
 8003890:	370c      	adds	r7, #12
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	40023800 	.word	0x40023800
 80038a0:	40023c00 	.word	0x40023c00

080038a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d101      	bne.n	80038b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e07b      	b.n	80039ae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d108      	bne.n	80038d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038c6:	d009      	beq.n	80038dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	61da      	str	r2, [r3, #28]
 80038ce:	e005      	b.n	80038dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d106      	bne.n	80038fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f7fd fc08 	bl	800110c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2202      	movs	r2, #2
 8003900:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003912:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003924:	431a      	orrs	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800392e:	431a      	orrs	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	691b      	ldr	r3, [r3, #16]
 8003934:	f003 0302 	and.w	r3, r3, #2
 8003938:	431a      	orrs	r2, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	695b      	ldr	r3, [r3, #20]
 800393e:	f003 0301 	and.w	r3, r3, #1
 8003942:	431a      	orrs	r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800394c:	431a      	orrs	r2, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	69db      	ldr	r3, [r3, #28]
 8003952:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003956:	431a      	orrs	r2, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6a1b      	ldr	r3, [r3, #32]
 800395c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003960:	ea42 0103 	orr.w	r1, r2, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003968:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	430a      	orrs	r2, r1
 8003972:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	699b      	ldr	r3, [r3, #24]
 8003978:	0c1b      	lsrs	r3, r3, #16
 800397a:	f003 0104 	and.w	r1, r3, #4
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003982:	f003 0210 	and.w	r2, r3, #16
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	430a      	orrs	r2, r1
 800398c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	69da      	ldr	r2, [r3, #28]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800399c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3708      	adds	r7, #8
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}

080039b6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039b6:	b580      	push	{r7, lr}
 80039b8:	b088      	sub	sp, #32
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	60f8      	str	r0, [r7, #12]
 80039be:	60b9      	str	r1, [r7, #8]
 80039c0:	603b      	str	r3, [r7, #0]
 80039c2:	4613      	mov	r3, r2
 80039c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80039c6:	2300      	movs	r3, #0
 80039c8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d101      	bne.n	80039d8 <HAL_SPI_Transmit+0x22>
 80039d4:	2302      	movs	r3, #2
 80039d6:	e126      	b.n	8003c26 <HAL_SPI_Transmit+0x270>
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80039e0:	f7fd fd4c 	bl	800147c <HAL_GetTick>
 80039e4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80039e6:	88fb      	ldrh	r3, [r7, #6]
 80039e8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d002      	beq.n	80039fc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80039f6:	2302      	movs	r3, #2
 80039f8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80039fa:	e10b      	b.n	8003c14 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d002      	beq.n	8003a08 <HAL_SPI_Transmit+0x52>
 8003a02:	88fb      	ldrh	r3, [r7, #6]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d102      	bne.n	8003a0e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003a0c:	e102      	b.n	8003c14 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2203      	movs	r2, #3
 8003a12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	68ba      	ldr	r2, [r7, #8]
 8003a20:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	88fa      	ldrh	r2, [r7, #6]
 8003a26:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	88fa      	ldrh	r2, [r7, #6]
 8003a2c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2200      	movs	r2, #0
 8003a38:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2200      	movs	r2, #0
 8003a44:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a54:	d10f      	bne.n	8003a76 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a64:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a74:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a80:	2b40      	cmp	r3, #64	; 0x40
 8003a82:	d007      	beq.n	8003a94 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a92:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a9c:	d14b      	bne.n	8003b36 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d002      	beq.n	8003aac <HAL_SPI_Transmit+0xf6>
 8003aa6:	8afb      	ldrh	r3, [r7, #22]
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d13e      	bne.n	8003b2a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab0:	881a      	ldrh	r2, [r3, #0]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003abc:	1c9a      	adds	r2, r3, #2
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	3b01      	subs	r3, #1
 8003aca:	b29a      	uxth	r2, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003ad0:	e02b      	b.n	8003b2a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f003 0302 	and.w	r3, r3, #2
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d112      	bne.n	8003b06 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae4:	881a      	ldrh	r2, [r3, #0]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af0:	1c9a      	adds	r2, r3, #2
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	3b01      	subs	r3, #1
 8003afe:	b29a      	uxth	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	86da      	strh	r2, [r3, #54]	; 0x36
 8003b04:	e011      	b.n	8003b2a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b06:	f7fd fcb9 	bl	800147c <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	683a      	ldr	r2, [r7, #0]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d803      	bhi.n	8003b1e <HAL_SPI_Transmit+0x168>
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b1c:	d102      	bne.n	8003b24 <HAL_SPI_Transmit+0x16e>
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d102      	bne.n	8003b2a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003b28:	e074      	b.n	8003c14 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d1ce      	bne.n	8003ad2 <HAL_SPI_Transmit+0x11c>
 8003b34:	e04c      	b.n	8003bd0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d002      	beq.n	8003b44 <HAL_SPI_Transmit+0x18e>
 8003b3e:	8afb      	ldrh	r3, [r7, #22]
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d140      	bne.n	8003bc6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	330c      	adds	r3, #12
 8003b4e:	7812      	ldrb	r2, [r2, #0]
 8003b50:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b56:	1c5a      	adds	r2, r3, #1
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	3b01      	subs	r3, #1
 8003b64:	b29a      	uxth	r2, r3
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003b6a:	e02c      	b.n	8003bc6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d113      	bne.n	8003ba2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	330c      	adds	r3, #12
 8003b84:	7812      	ldrb	r2, [r2, #0]
 8003b86:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8c:	1c5a      	adds	r2, r3, #1
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	3b01      	subs	r3, #1
 8003b9a:	b29a      	uxth	r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003ba0:	e011      	b.n	8003bc6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ba2:	f7fd fc6b 	bl	800147c <HAL_GetTick>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	683a      	ldr	r2, [r7, #0]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d803      	bhi.n	8003bba <HAL_SPI_Transmit+0x204>
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bb8:	d102      	bne.n	8003bc0 <HAL_SPI_Transmit+0x20a>
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d102      	bne.n	8003bc6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003bc4:	e026      	b.n	8003c14 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1cd      	bne.n	8003b6c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003bd0:	69ba      	ldr	r2, [r7, #24]
 8003bd2:	6839      	ldr	r1, [r7, #0]
 8003bd4:	68f8      	ldr	r0, [r7, #12]
 8003bd6:	f000 fbcb 	bl	8004370 <SPI_EndRxTxTransaction>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d002      	beq.n	8003be6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2220      	movs	r2, #32
 8003be4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d10a      	bne.n	8003c04 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003bee:	2300      	movs	r3, #0
 8003bf0:	613b      	str	r3, [r7, #16]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	613b      	str	r3, [r7, #16]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	613b      	str	r3, [r7, #16]
 8003c02:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d002      	beq.n	8003c12 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	77fb      	strb	r3, [r7, #31]
 8003c10:	e000      	b.n	8003c14 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003c12:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003c24:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3720      	adds	r7, #32
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}

08003c2e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c2e:	b580      	push	{r7, lr}
 8003c30:	b088      	sub	sp, #32
 8003c32:	af02      	add	r7, sp, #8
 8003c34:	60f8      	str	r0, [r7, #12]
 8003c36:	60b9      	str	r1, [r7, #8]
 8003c38:	603b      	str	r3, [r7, #0]
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c4a:	d112      	bne.n	8003c72 <HAL_SPI_Receive+0x44>
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d10e      	bne.n	8003c72 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2204      	movs	r2, #4
 8003c58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003c5c:	88fa      	ldrh	r2, [r7, #6]
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	9300      	str	r3, [sp, #0]
 8003c62:	4613      	mov	r3, r2
 8003c64:	68ba      	ldr	r2, [r7, #8]
 8003c66:	68b9      	ldr	r1, [r7, #8]
 8003c68:	68f8      	ldr	r0, [r7, #12]
 8003c6a:	f000 f8f1 	bl	8003e50 <HAL_SPI_TransmitReceive>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	e0ea      	b.n	8003e48 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d101      	bne.n	8003c80 <HAL_SPI_Receive+0x52>
 8003c7c:	2302      	movs	r3, #2
 8003c7e:	e0e3      	b.n	8003e48 <HAL_SPI_Receive+0x21a>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c88:	f7fd fbf8 	bl	800147c <HAL_GetTick>
 8003c8c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d002      	beq.n	8003ca0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003c9a:	2302      	movs	r3, #2
 8003c9c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003c9e:	e0ca      	b.n	8003e36 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d002      	beq.n	8003cac <HAL_SPI_Receive+0x7e>
 8003ca6:	88fb      	ldrh	r3, [r7, #6]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d102      	bne.n	8003cb2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003cb0:	e0c1      	b.n	8003e36 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2204      	movs	r2, #4
 8003cb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	68ba      	ldr	r2, [r7, #8]
 8003cc4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	88fa      	ldrh	r2, [r7, #6]
 8003cca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	88fa      	ldrh	r2, [r7, #6]
 8003cd0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2200      	movs	r2, #0
 8003cee:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cf8:	d10f      	bne.n	8003d1a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d08:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003d18:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d24:	2b40      	cmp	r3, #64	; 0x40
 8003d26:	d007      	beq.n	8003d38 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d36:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d162      	bne.n	8003e06 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003d40:	e02e      	b.n	8003da0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	f003 0301 	and.w	r3, r3, #1
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d115      	bne.n	8003d7c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f103 020c 	add.w	r2, r3, #12
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d5c:	7812      	ldrb	r2, [r2, #0]
 8003d5e:	b2d2      	uxtb	r2, r2
 8003d60:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d66:	1c5a      	adds	r2, r3, #1
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	3b01      	subs	r3, #1
 8003d74:	b29a      	uxth	r2, r3
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d7a:	e011      	b.n	8003da0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d7c:	f7fd fb7e 	bl	800147c <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	683a      	ldr	r2, [r7, #0]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d803      	bhi.n	8003d94 <HAL_SPI_Receive+0x166>
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d92:	d102      	bne.n	8003d9a <HAL_SPI_Receive+0x16c>
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d102      	bne.n	8003da0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003d9e:	e04a      	b.n	8003e36 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1cb      	bne.n	8003d42 <HAL_SPI_Receive+0x114>
 8003daa:	e031      	b.n	8003e10 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d113      	bne.n	8003de2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	68da      	ldr	r2, [r3, #12]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc4:	b292      	uxth	r2, r2
 8003dc6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dcc:	1c9a      	adds	r2, r3, #2
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	3b01      	subs	r3, #1
 8003dda:	b29a      	uxth	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003de0:	e011      	b.n	8003e06 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003de2:	f7fd fb4b 	bl	800147c <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	683a      	ldr	r2, [r7, #0]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d803      	bhi.n	8003dfa <HAL_SPI_Receive+0x1cc>
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003df8:	d102      	bne.n	8003e00 <HAL_SPI_Receive+0x1d2>
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d102      	bne.n	8003e06 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003e04:	e017      	b.n	8003e36 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d1cd      	bne.n	8003dac <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e10:	693a      	ldr	r2, [r7, #16]
 8003e12:	6839      	ldr	r1, [r7, #0]
 8003e14:	68f8      	ldr	r0, [r7, #12]
 8003e16:	f000 fa45 	bl	80042a4 <SPI_EndRxTransaction>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d002      	beq.n	8003e26 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2220      	movs	r2, #32
 8003e24:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d002      	beq.n	8003e34 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	75fb      	strb	r3, [r7, #23]
 8003e32:	e000      	b.n	8003e36 <HAL_SPI_Receive+0x208>
  }

error :
 8003e34:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003e46:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3718      	adds	r7, #24
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b08c      	sub	sp, #48	; 0x30
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	60b9      	str	r1, [r7, #8]
 8003e5a:	607a      	str	r2, [r7, #4]
 8003e5c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003e62:	2300      	movs	r3, #0
 8003e64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d101      	bne.n	8003e76 <HAL_SPI_TransmitReceive+0x26>
 8003e72:	2302      	movs	r3, #2
 8003e74:	e18a      	b.n	800418c <HAL_SPI_TransmitReceive+0x33c>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e7e:	f7fd fafd 	bl	800147c <HAL_GetTick>
 8003e82:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003e94:	887b      	ldrh	r3, [r7, #2]
 8003e96:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003e98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d00f      	beq.n	8003ec0 <HAL_SPI_TransmitReceive+0x70>
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ea6:	d107      	bne.n	8003eb8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d103      	bne.n	8003eb8 <HAL_SPI_TransmitReceive+0x68>
 8003eb0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003eb4:	2b04      	cmp	r3, #4
 8003eb6:	d003      	beq.n	8003ec0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003eb8:	2302      	movs	r3, #2
 8003eba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003ebe:	e15b      	b.n	8004178 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d005      	beq.n	8003ed2 <HAL_SPI_TransmitReceive+0x82>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d002      	beq.n	8003ed2 <HAL_SPI_TransmitReceive+0x82>
 8003ecc:	887b      	ldrh	r3, [r7, #2]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d103      	bne.n	8003eda <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003ed8:	e14e      	b.n	8004178 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	2b04      	cmp	r3, #4
 8003ee4:	d003      	beq.n	8003eee <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2205      	movs	r2, #5
 8003eea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	887a      	ldrh	r2, [r7, #2]
 8003efe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	887a      	ldrh	r2, [r7, #2]
 8003f04:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	68ba      	ldr	r2, [r7, #8]
 8003f0a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	887a      	ldrh	r2, [r7, #2]
 8003f10:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	887a      	ldrh	r2, [r7, #2]
 8003f16:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2200      	movs	r2, #0
 8003f22:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f2e:	2b40      	cmp	r3, #64	; 0x40
 8003f30:	d007      	beq.n	8003f42 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f40:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f4a:	d178      	bne.n	800403e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d002      	beq.n	8003f5a <HAL_SPI_TransmitReceive+0x10a>
 8003f54:	8b7b      	ldrh	r3, [r7, #26]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d166      	bne.n	8004028 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5e:	881a      	ldrh	r2, [r3, #0]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6a:	1c9a      	adds	r2, r3, #2
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	3b01      	subs	r3, #1
 8003f78:	b29a      	uxth	r2, r3
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f7e:	e053      	b.n	8004028 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	f003 0302 	and.w	r3, r3, #2
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d11b      	bne.n	8003fc6 <HAL_SPI_TransmitReceive+0x176>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d016      	beq.n	8003fc6 <HAL_SPI_TransmitReceive+0x176>
 8003f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d113      	bne.n	8003fc6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa2:	881a      	ldrh	r2, [r3, #0]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fae:	1c9a      	adds	r2, r3, #2
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	b29a      	uxth	r2, r3
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f003 0301 	and.w	r3, r3, #1
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d119      	bne.n	8004008 <HAL_SPI_TransmitReceive+0x1b8>
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d014      	beq.n	8004008 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	68da      	ldr	r2, [r3, #12]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe8:	b292      	uxth	r2, r2
 8003fea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff0:	1c9a      	adds	r2, r3, #2
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	3b01      	subs	r3, #1
 8003ffe:	b29a      	uxth	r2, r3
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004004:	2301      	movs	r3, #1
 8004006:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004008:	f7fd fa38 	bl	800147c <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004014:	429a      	cmp	r2, r3
 8004016:	d807      	bhi.n	8004028 <HAL_SPI_TransmitReceive+0x1d8>
 8004018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800401a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800401e:	d003      	beq.n	8004028 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004020:	2303      	movs	r3, #3
 8004022:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004026:	e0a7      	b.n	8004178 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800402c:	b29b      	uxth	r3, r3
 800402e:	2b00      	cmp	r3, #0
 8004030:	d1a6      	bne.n	8003f80 <HAL_SPI_TransmitReceive+0x130>
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004036:	b29b      	uxth	r3, r3
 8004038:	2b00      	cmp	r3, #0
 800403a:	d1a1      	bne.n	8003f80 <HAL_SPI_TransmitReceive+0x130>
 800403c:	e07c      	b.n	8004138 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d002      	beq.n	800404c <HAL_SPI_TransmitReceive+0x1fc>
 8004046:	8b7b      	ldrh	r3, [r7, #26]
 8004048:	2b01      	cmp	r3, #1
 800404a:	d16b      	bne.n	8004124 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	330c      	adds	r3, #12
 8004056:	7812      	ldrb	r2, [r2, #0]
 8004058:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405e:	1c5a      	adds	r2, r3, #1
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004068:	b29b      	uxth	r3, r3
 800406a:	3b01      	subs	r3, #1
 800406c:	b29a      	uxth	r2, r3
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004072:	e057      	b.n	8004124 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f003 0302 	and.w	r3, r3, #2
 800407e:	2b02      	cmp	r3, #2
 8004080:	d11c      	bne.n	80040bc <HAL_SPI_TransmitReceive+0x26c>
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004086:	b29b      	uxth	r3, r3
 8004088:	2b00      	cmp	r3, #0
 800408a:	d017      	beq.n	80040bc <HAL_SPI_TransmitReceive+0x26c>
 800408c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800408e:	2b01      	cmp	r3, #1
 8004090:	d114      	bne.n	80040bc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	330c      	adds	r3, #12
 800409c:	7812      	ldrb	r2, [r2, #0]
 800409e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a4:	1c5a      	adds	r2, r3, #1
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	3b01      	subs	r3, #1
 80040b2:	b29a      	uxth	r2, r3
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80040b8:	2300      	movs	r3, #0
 80040ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	f003 0301 	and.w	r3, r3, #1
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d119      	bne.n	80040fe <HAL_SPI_TransmitReceive+0x2ae>
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d014      	beq.n	80040fe <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68da      	ldr	r2, [r3, #12]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040de:	b2d2      	uxtb	r2, r2
 80040e0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e6:	1c5a      	adds	r2, r3, #1
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	3b01      	subs	r3, #1
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80040fa:	2301      	movs	r3, #1
 80040fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80040fe:	f7fd f9bd 	bl	800147c <HAL_GetTick>
 8004102:	4602      	mov	r2, r0
 8004104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800410a:	429a      	cmp	r2, r3
 800410c:	d803      	bhi.n	8004116 <HAL_SPI_TransmitReceive+0x2c6>
 800410e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004110:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004114:	d102      	bne.n	800411c <HAL_SPI_TransmitReceive+0x2cc>
 8004116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004118:	2b00      	cmp	r3, #0
 800411a:	d103      	bne.n	8004124 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004122:	e029      	b.n	8004178 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004128:	b29b      	uxth	r3, r3
 800412a:	2b00      	cmp	r3, #0
 800412c:	d1a2      	bne.n	8004074 <HAL_SPI_TransmitReceive+0x224>
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004132:	b29b      	uxth	r3, r3
 8004134:	2b00      	cmp	r3, #0
 8004136:	d19d      	bne.n	8004074 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800413a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800413c:	68f8      	ldr	r0, [r7, #12]
 800413e:	f000 f917 	bl	8004370 <SPI_EndRxTxTransaction>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d006      	beq.n	8004156 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2220      	movs	r2, #32
 8004152:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004154:	e010      	b.n	8004178 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d10b      	bne.n	8004176 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800415e:	2300      	movs	r3, #0
 8004160:	617b      	str	r3, [r7, #20]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	617b      	str	r3, [r7, #20]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	617b      	str	r3, [r7, #20]
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	e000      	b.n	8004178 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004176:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2200      	movs	r2, #0
 8004184:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004188:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800418c:	4618      	mov	r0, r3
 800418e:	3730      	adds	r7, #48	; 0x30
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b088      	sub	sp, #32
 8004198:	af00      	add	r7, sp, #0
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	603b      	str	r3, [r7, #0]
 80041a0:	4613      	mov	r3, r2
 80041a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80041a4:	f7fd f96a 	bl	800147c <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ac:	1a9b      	subs	r3, r3, r2
 80041ae:	683a      	ldr	r2, [r7, #0]
 80041b0:	4413      	add	r3, r2
 80041b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80041b4:	f7fd f962 	bl	800147c <HAL_GetTick>
 80041b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80041ba:	4b39      	ldr	r3, [pc, #228]	; (80042a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	015b      	lsls	r3, r3, #5
 80041c0:	0d1b      	lsrs	r3, r3, #20
 80041c2:	69fa      	ldr	r2, [r7, #28]
 80041c4:	fb02 f303 	mul.w	r3, r2, r3
 80041c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041ca:	e054      	b.n	8004276 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041d2:	d050      	beq.n	8004276 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80041d4:	f7fd f952 	bl	800147c <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	69fa      	ldr	r2, [r7, #28]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d902      	bls.n	80041ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d13d      	bne.n	8004266 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	685a      	ldr	r2, [r3, #4]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80041f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004202:	d111      	bne.n	8004228 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800420c:	d004      	beq.n	8004218 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004216:	d107      	bne.n	8004228 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004226:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800422c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004230:	d10f      	bne.n	8004252 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004240:	601a      	str	r2, [r3, #0]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004250:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2201      	movs	r2, #1
 8004256:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e017      	b.n	8004296 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d101      	bne.n	8004270 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800426c:	2300      	movs	r3, #0
 800426e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	3b01      	subs	r3, #1
 8004274:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	689a      	ldr	r2, [r3, #8]
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	4013      	ands	r3, r2
 8004280:	68ba      	ldr	r2, [r7, #8]
 8004282:	429a      	cmp	r2, r3
 8004284:	bf0c      	ite	eq
 8004286:	2301      	moveq	r3, #1
 8004288:	2300      	movne	r3, #0
 800428a:	b2db      	uxtb	r3, r3
 800428c:	461a      	mov	r2, r3
 800428e:	79fb      	ldrb	r3, [r7, #7]
 8004290:	429a      	cmp	r2, r3
 8004292:	d19b      	bne.n	80041cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3720      	adds	r7, #32
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	20000000 	.word	0x20000000

080042a4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b086      	sub	sp, #24
 80042a8:	af02      	add	r7, sp, #8
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042b8:	d111      	bne.n	80042de <SPI_EndRxTransaction+0x3a>
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042c2:	d004      	beq.n	80042ce <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042cc:	d107      	bne.n	80042de <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042dc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042e6:	d12a      	bne.n	800433e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042f0:	d012      	beq.n	8004318 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	9300      	str	r3, [sp, #0]
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	2200      	movs	r2, #0
 80042fa:	2180      	movs	r1, #128	; 0x80
 80042fc:	68f8      	ldr	r0, [r7, #12]
 80042fe:	f7ff ff49 	bl	8004194 <SPI_WaitFlagStateUntilTimeout>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d02d      	beq.n	8004364 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800430c:	f043 0220 	orr.w	r2, r3, #32
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	e026      	b.n	8004366 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	9300      	str	r3, [sp, #0]
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	2200      	movs	r2, #0
 8004320:	2101      	movs	r1, #1
 8004322:	68f8      	ldr	r0, [r7, #12]
 8004324:	f7ff ff36 	bl	8004194 <SPI_WaitFlagStateUntilTimeout>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d01a      	beq.n	8004364 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004332:	f043 0220 	orr.w	r2, r3, #32
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e013      	b.n	8004366 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	9300      	str	r3, [sp, #0]
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	2200      	movs	r2, #0
 8004346:	2101      	movs	r1, #1
 8004348:	68f8      	ldr	r0, [r7, #12]
 800434a:	f7ff ff23 	bl	8004194 <SPI_WaitFlagStateUntilTimeout>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d007      	beq.n	8004364 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004358:	f043 0220 	orr.w	r2, r3, #32
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004360:	2303      	movs	r3, #3
 8004362:	e000      	b.n	8004366 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	3710      	adds	r7, #16
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
	...

08004370 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b088      	sub	sp, #32
 8004374:	af02      	add	r7, sp, #8
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	60b9      	str	r1, [r7, #8]
 800437a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800437c:	4b1b      	ldr	r3, [pc, #108]	; (80043ec <SPI_EndRxTxTransaction+0x7c>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a1b      	ldr	r2, [pc, #108]	; (80043f0 <SPI_EndRxTxTransaction+0x80>)
 8004382:	fba2 2303 	umull	r2, r3, r2, r3
 8004386:	0d5b      	lsrs	r3, r3, #21
 8004388:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800438c:	fb02 f303 	mul.w	r3, r2, r3
 8004390:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800439a:	d112      	bne.n	80043c2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	9300      	str	r3, [sp, #0]
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	2200      	movs	r2, #0
 80043a4:	2180      	movs	r1, #128	; 0x80
 80043a6:	68f8      	ldr	r0, [r7, #12]
 80043a8:	f7ff fef4 	bl	8004194 <SPI_WaitFlagStateUntilTimeout>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d016      	beq.n	80043e0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043b6:	f043 0220 	orr.w	r2, r3, #32
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e00f      	b.n	80043e2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d00a      	beq.n	80043de <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	3b01      	subs	r3, #1
 80043cc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043d8:	2b80      	cmp	r3, #128	; 0x80
 80043da:	d0f2      	beq.n	80043c2 <SPI_EndRxTxTransaction+0x52>
 80043dc:	e000      	b.n	80043e0 <SPI_EndRxTxTransaction+0x70>
        break;
 80043de:	bf00      	nop
  }

  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3718      	adds	r7, #24
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	20000000 	.word	0x20000000
 80043f0:	165e9f81 	.word	0x165e9f81

080043f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b082      	sub	sp, #8
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d101      	bne.n	8004406 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e041      	b.n	800448a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2b00      	cmp	r3, #0
 8004410:	d106      	bne.n	8004420 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 f839 	bl	8004492 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2202      	movs	r2, #2
 8004424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	3304      	adds	r3, #4
 8004430:	4619      	mov	r1, r3
 8004432:	4610      	mov	r0, r2
 8004434:	f000 f9d8 	bl	80047e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3708      	adds	r7, #8
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}

08004492 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004492:	b480      	push	{r7}
 8004494:	b083      	sub	sp, #12
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800449a:	bf00      	nop
 800449c:	370c      	adds	r7, #12
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr
	...

080044a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b085      	sub	sp, #20
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d001      	beq.n	80044c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e04e      	b.n	800455e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2202      	movs	r2, #2
 80044c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68da      	ldr	r2, [r3, #12]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f042 0201 	orr.w	r2, r2, #1
 80044d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a23      	ldr	r2, [pc, #140]	; (800456c <HAL_TIM_Base_Start_IT+0xc4>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d022      	beq.n	8004528 <HAL_TIM_Base_Start_IT+0x80>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044ea:	d01d      	beq.n	8004528 <HAL_TIM_Base_Start_IT+0x80>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a1f      	ldr	r2, [pc, #124]	; (8004570 <HAL_TIM_Base_Start_IT+0xc8>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d018      	beq.n	8004528 <HAL_TIM_Base_Start_IT+0x80>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a1e      	ldr	r2, [pc, #120]	; (8004574 <HAL_TIM_Base_Start_IT+0xcc>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d013      	beq.n	8004528 <HAL_TIM_Base_Start_IT+0x80>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a1c      	ldr	r2, [pc, #112]	; (8004578 <HAL_TIM_Base_Start_IT+0xd0>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d00e      	beq.n	8004528 <HAL_TIM_Base_Start_IT+0x80>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a1b      	ldr	r2, [pc, #108]	; (800457c <HAL_TIM_Base_Start_IT+0xd4>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d009      	beq.n	8004528 <HAL_TIM_Base_Start_IT+0x80>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a19      	ldr	r2, [pc, #100]	; (8004580 <HAL_TIM_Base_Start_IT+0xd8>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d004      	beq.n	8004528 <HAL_TIM_Base_Start_IT+0x80>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a18      	ldr	r2, [pc, #96]	; (8004584 <HAL_TIM_Base_Start_IT+0xdc>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d111      	bne.n	800454c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f003 0307 	and.w	r3, r3, #7
 8004532:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2b06      	cmp	r3, #6
 8004538:	d010      	beq.n	800455c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f042 0201 	orr.w	r2, r2, #1
 8004548:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800454a:	e007      	b.n	800455c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f042 0201 	orr.w	r2, r2, #1
 800455a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	3714      	adds	r7, #20
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	40010000 	.word	0x40010000
 8004570:	40000400 	.word	0x40000400
 8004574:	40000800 	.word	0x40000800
 8004578:	40000c00 	.word	0x40000c00
 800457c:	40010400 	.word	0x40010400
 8004580:	40014000 	.word	0x40014000
 8004584:	40001800 	.word	0x40001800

08004588 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b082      	sub	sp, #8
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	f003 0302 	and.w	r3, r3, #2
 800459a:	2b02      	cmp	r3, #2
 800459c:	d122      	bne.n	80045e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	f003 0302 	and.w	r3, r3, #2
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d11b      	bne.n	80045e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f06f 0202 	mvn.w	r2, #2
 80045b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2201      	movs	r2, #1
 80045ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	699b      	ldr	r3, [r3, #24]
 80045c2:	f003 0303 	and.w	r3, r3, #3
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d003      	beq.n	80045d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 f8ee 	bl	80047ac <HAL_TIM_IC_CaptureCallback>
 80045d0:	e005      	b.n	80045de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 f8e0 	bl	8004798 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f000 f8f1 	bl	80047c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	f003 0304 	and.w	r3, r3, #4
 80045ee:	2b04      	cmp	r3, #4
 80045f0:	d122      	bne.n	8004638 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	f003 0304 	and.w	r3, r3, #4
 80045fc:	2b04      	cmp	r3, #4
 80045fe:	d11b      	bne.n	8004638 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f06f 0204 	mvn.w	r2, #4
 8004608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2202      	movs	r2, #2
 800460e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	699b      	ldr	r3, [r3, #24]
 8004616:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800461a:	2b00      	cmp	r3, #0
 800461c:	d003      	beq.n	8004626 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 f8c4 	bl	80047ac <HAL_TIM_IC_CaptureCallback>
 8004624:	e005      	b.n	8004632 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 f8b6 	bl	8004798 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 f8c7 	bl	80047c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	f003 0308 	and.w	r3, r3, #8
 8004642:	2b08      	cmp	r3, #8
 8004644:	d122      	bne.n	800468c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	f003 0308 	and.w	r3, r3, #8
 8004650:	2b08      	cmp	r3, #8
 8004652:	d11b      	bne.n	800468c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f06f 0208 	mvn.w	r2, #8
 800465c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2204      	movs	r2, #4
 8004662:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	69db      	ldr	r3, [r3, #28]
 800466a:	f003 0303 	and.w	r3, r3, #3
 800466e:	2b00      	cmp	r3, #0
 8004670:	d003      	beq.n	800467a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 f89a 	bl	80047ac <HAL_TIM_IC_CaptureCallback>
 8004678:	e005      	b.n	8004686 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 f88c 	bl	8004798 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f000 f89d 	bl	80047c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	f003 0310 	and.w	r3, r3, #16
 8004696:	2b10      	cmp	r3, #16
 8004698:	d122      	bne.n	80046e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	f003 0310 	and.w	r3, r3, #16
 80046a4:	2b10      	cmp	r3, #16
 80046a6:	d11b      	bne.n	80046e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f06f 0210 	mvn.w	r2, #16
 80046b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2208      	movs	r2, #8
 80046b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	69db      	ldr	r3, [r3, #28]
 80046be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d003      	beq.n	80046ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 f870 	bl	80047ac <HAL_TIM_IC_CaptureCallback>
 80046cc:	e005      	b.n	80046da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 f862 	bl	8004798 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f000 f873 	bl	80047c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	f003 0301 	and.w	r3, r3, #1
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d10e      	bne.n	800470c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	f003 0301 	and.w	r3, r3, #1
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d107      	bne.n	800470c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f06f 0201 	mvn.w	r2, #1
 8004704:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f7fc f8e2 	bl	80008d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004716:	2b80      	cmp	r3, #128	; 0x80
 8004718:	d10e      	bne.n	8004738 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004724:	2b80      	cmp	r3, #128	; 0x80
 8004726:	d107      	bne.n	8004738 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004730:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 f902 	bl	800493c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004742:	2b40      	cmp	r3, #64	; 0x40
 8004744:	d10e      	bne.n	8004764 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004750:	2b40      	cmp	r3, #64	; 0x40
 8004752:	d107      	bne.n	8004764 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800475c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f000 f838 	bl	80047d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	f003 0320 	and.w	r3, r3, #32
 800476e:	2b20      	cmp	r3, #32
 8004770:	d10e      	bne.n	8004790 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	f003 0320 	and.w	r3, r3, #32
 800477c:	2b20      	cmp	r3, #32
 800477e:	d107      	bne.n	8004790 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f06f 0220 	mvn.w	r2, #32
 8004788:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f000 f8cc 	bl	8004928 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004790:	bf00      	nop
 8004792:	3708      	adds	r7, #8
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047a0:	bf00      	nop
 80047a2:	370c      	adds	r7, #12
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047b4:	bf00      	nop
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047c8:	bf00      	nop
 80047ca:	370c      	adds	r7, #12
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr

080047d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047dc:	bf00      	nop
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b085      	sub	sp, #20
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4a40      	ldr	r2, [pc, #256]	; (80048fc <TIM_Base_SetConfig+0x114>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d013      	beq.n	8004828 <TIM_Base_SetConfig+0x40>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004806:	d00f      	beq.n	8004828 <TIM_Base_SetConfig+0x40>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	4a3d      	ldr	r2, [pc, #244]	; (8004900 <TIM_Base_SetConfig+0x118>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d00b      	beq.n	8004828 <TIM_Base_SetConfig+0x40>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4a3c      	ldr	r2, [pc, #240]	; (8004904 <TIM_Base_SetConfig+0x11c>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d007      	beq.n	8004828 <TIM_Base_SetConfig+0x40>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	4a3b      	ldr	r2, [pc, #236]	; (8004908 <TIM_Base_SetConfig+0x120>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d003      	beq.n	8004828 <TIM_Base_SetConfig+0x40>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4a3a      	ldr	r2, [pc, #232]	; (800490c <TIM_Base_SetConfig+0x124>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d108      	bne.n	800483a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800482e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	68fa      	ldr	r2, [r7, #12]
 8004836:	4313      	orrs	r3, r2
 8004838:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a2f      	ldr	r2, [pc, #188]	; (80048fc <TIM_Base_SetConfig+0x114>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d02b      	beq.n	800489a <TIM_Base_SetConfig+0xb2>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004848:	d027      	beq.n	800489a <TIM_Base_SetConfig+0xb2>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a2c      	ldr	r2, [pc, #176]	; (8004900 <TIM_Base_SetConfig+0x118>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d023      	beq.n	800489a <TIM_Base_SetConfig+0xb2>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a2b      	ldr	r2, [pc, #172]	; (8004904 <TIM_Base_SetConfig+0x11c>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d01f      	beq.n	800489a <TIM_Base_SetConfig+0xb2>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a2a      	ldr	r2, [pc, #168]	; (8004908 <TIM_Base_SetConfig+0x120>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d01b      	beq.n	800489a <TIM_Base_SetConfig+0xb2>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a29      	ldr	r2, [pc, #164]	; (800490c <TIM_Base_SetConfig+0x124>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d017      	beq.n	800489a <TIM_Base_SetConfig+0xb2>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a28      	ldr	r2, [pc, #160]	; (8004910 <TIM_Base_SetConfig+0x128>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d013      	beq.n	800489a <TIM_Base_SetConfig+0xb2>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a27      	ldr	r2, [pc, #156]	; (8004914 <TIM_Base_SetConfig+0x12c>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d00f      	beq.n	800489a <TIM_Base_SetConfig+0xb2>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a26      	ldr	r2, [pc, #152]	; (8004918 <TIM_Base_SetConfig+0x130>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d00b      	beq.n	800489a <TIM_Base_SetConfig+0xb2>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a25      	ldr	r2, [pc, #148]	; (800491c <TIM_Base_SetConfig+0x134>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d007      	beq.n	800489a <TIM_Base_SetConfig+0xb2>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a24      	ldr	r2, [pc, #144]	; (8004920 <TIM_Base_SetConfig+0x138>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d003      	beq.n	800489a <TIM_Base_SetConfig+0xb2>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a23      	ldr	r2, [pc, #140]	; (8004924 <TIM_Base_SetConfig+0x13c>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d108      	bne.n	80048ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	695b      	ldr	r3, [r3, #20]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	68fa      	ldr	r2, [r7, #12]
 80048be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	689a      	ldr	r2, [r3, #8]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4a0a      	ldr	r2, [pc, #40]	; (80048fc <TIM_Base_SetConfig+0x114>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d003      	beq.n	80048e0 <TIM_Base_SetConfig+0xf8>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	4a0c      	ldr	r2, [pc, #48]	; (800490c <TIM_Base_SetConfig+0x124>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d103      	bne.n	80048e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	691a      	ldr	r2, [r3, #16]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	615a      	str	r2, [r3, #20]
}
 80048ee:	bf00      	nop
 80048f0:	3714      	adds	r7, #20
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	40010000 	.word	0x40010000
 8004900:	40000400 	.word	0x40000400
 8004904:	40000800 	.word	0x40000800
 8004908:	40000c00 	.word	0x40000c00
 800490c:	40010400 	.word	0x40010400
 8004910:	40014000 	.word	0x40014000
 8004914:	40014400 	.word	0x40014400
 8004918:	40014800 	.word	0x40014800
 800491c:	40001800 	.word	0x40001800
 8004920:	40001c00 	.word	0x40001c00
 8004924:	40002000 	.word	0x40002000

08004928 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004930:	bf00      	nop
 8004932:	370c      	adds	r7, #12
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004944:	bf00      	nop
 8004946:	370c      	adds	r7, #12
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004950:	b084      	sub	sp, #16
 8004952:	b580      	push	{r7, lr}
 8004954:	b084      	sub	sp, #16
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
 800495a:	f107 001c 	add.w	r0, r7, #28
 800495e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004964:	2b01      	cmp	r3, #1
 8004966:	d122      	bne.n	80049ae <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800496c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800497c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004990:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004992:	2b01      	cmp	r3, #1
 8004994:	d105      	bne.n	80049a2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f001 fbee 	bl	8006184 <USB_CoreReset>
 80049a8:	4603      	mov	r3, r0
 80049aa:	73fb      	strb	r3, [r7, #15]
 80049ac:	e01a      	b.n	80049e4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f001 fbe2 	bl	8006184 <USB_CoreReset>
 80049c0:	4603      	mov	r3, r0
 80049c2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80049c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d106      	bne.n	80049d8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ce:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	639a      	str	r2, [r3, #56]	; 0x38
 80049d6:	e005      	b.n	80049e4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80049e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d10b      	bne.n	8004a02 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f043 0206 	orr.w	r2, r3, #6
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	f043 0220 	orr.w	r2, r3, #32
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3710      	adds	r7, #16
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a0e:	b004      	add	sp, #16
 8004a10:	4770      	bx	lr
	...

08004a14 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b087      	sub	sp, #28
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	4613      	mov	r3, r2
 8004a20:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004a22:	79fb      	ldrb	r3, [r7, #7]
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	d165      	bne.n	8004af4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	4a41      	ldr	r2, [pc, #260]	; (8004b30 <USB_SetTurnaroundTime+0x11c>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d906      	bls.n	8004a3e <USB_SetTurnaroundTime+0x2a>
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	4a40      	ldr	r2, [pc, #256]	; (8004b34 <USB_SetTurnaroundTime+0x120>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d202      	bcs.n	8004a3e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004a38:	230f      	movs	r3, #15
 8004a3a:	617b      	str	r3, [r7, #20]
 8004a3c:	e062      	b.n	8004b04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	4a3c      	ldr	r2, [pc, #240]	; (8004b34 <USB_SetTurnaroundTime+0x120>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d306      	bcc.n	8004a54 <USB_SetTurnaroundTime+0x40>
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	4a3b      	ldr	r2, [pc, #236]	; (8004b38 <USB_SetTurnaroundTime+0x124>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d202      	bcs.n	8004a54 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004a4e:	230e      	movs	r3, #14
 8004a50:	617b      	str	r3, [r7, #20]
 8004a52:	e057      	b.n	8004b04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	4a38      	ldr	r2, [pc, #224]	; (8004b38 <USB_SetTurnaroundTime+0x124>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d306      	bcc.n	8004a6a <USB_SetTurnaroundTime+0x56>
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	4a37      	ldr	r2, [pc, #220]	; (8004b3c <USB_SetTurnaroundTime+0x128>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d202      	bcs.n	8004a6a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004a64:	230d      	movs	r3, #13
 8004a66:	617b      	str	r3, [r7, #20]
 8004a68:	e04c      	b.n	8004b04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	4a33      	ldr	r2, [pc, #204]	; (8004b3c <USB_SetTurnaroundTime+0x128>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d306      	bcc.n	8004a80 <USB_SetTurnaroundTime+0x6c>
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	4a32      	ldr	r2, [pc, #200]	; (8004b40 <USB_SetTurnaroundTime+0x12c>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d802      	bhi.n	8004a80 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004a7a:	230c      	movs	r3, #12
 8004a7c:	617b      	str	r3, [r7, #20]
 8004a7e:	e041      	b.n	8004b04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	4a2f      	ldr	r2, [pc, #188]	; (8004b40 <USB_SetTurnaroundTime+0x12c>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d906      	bls.n	8004a96 <USB_SetTurnaroundTime+0x82>
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	4a2e      	ldr	r2, [pc, #184]	; (8004b44 <USB_SetTurnaroundTime+0x130>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d802      	bhi.n	8004a96 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004a90:	230b      	movs	r3, #11
 8004a92:	617b      	str	r3, [r7, #20]
 8004a94:	e036      	b.n	8004b04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	4a2a      	ldr	r2, [pc, #168]	; (8004b44 <USB_SetTurnaroundTime+0x130>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d906      	bls.n	8004aac <USB_SetTurnaroundTime+0x98>
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	4a29      	ldr	r2, [pc, #164]	; (8004b48 <USB_SetTurnaroundTime+0x134>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d802      	bhi.n	8004aac <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004aa6:	230a      	movs	r3, #10
 8004aa8:	617b      	str	r3, [r7, #20]
 8004aaa:	e02b      	b.n	8004b04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	4a26      	ldr	r2, [pc, #152]	; (8004b48 <USB_SetTurnaroundTime+0x134>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d906      	bls.n	8004ac2 <USB_SetTurnaroundTime+0xae>
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	4a25      	ldr	r2, [pc, #148]	; (8004b4c <USB_SetTurnaroundTime+0x138>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d202      	bcs.n	8004ac2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004abc:	2309      	movs	r3, #9
 8004abe:	617b      	str	r3, [r7, #20]
 8004ac0:	e020      	b.n	8004b04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	4a21      	ldr	r2, [pc, #132]	; (8004b4c <USB_SetTurnaroundTime+0x138>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d306      	bcc.n	8004ad8 <USB_SetTurnaroundTime+0xc4>
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	4a20      	ldr	r2, [pc, #128]	; (8004b50 <USB_SetTurnaroundTime+0x13c>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d802      	bhi.n	8004ad8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004ad2:	2308      	movs	r3, #8
 8004ad4:	617b      	str	r3, [r7, #20]
 8004ad6:	e015      	b.n	8004b04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	4a1d      	ldr	r2, [pc, #116]	; (8004b50 <USB_SetTurnaroundTime+0x13c>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d906      	bls.n	8004aee <USB_SetTurnaroundTime+0xda>
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	4a1c      	ldr	r2, [pc, #112]	; (8004b54 <USB_SetTurnaroundTime+0x140>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d202      	bcs.n	8004aee <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004ae8:	2307      	movs	r3, #7
 8004aea:	617b      	str	r3, [r7, #20]
 8004aec:	e00a      	b.n	8004b04 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004aee:	2306      	movs	r3, #6
 8004af0:	617b      	str	r3, [r7, #20]
 8004af2:	e007      	b.n	8004b04 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004af4:	79fb      	ldrb	r3, [r7, #7]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d102      	bne.n	8004b00 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004afa:	2309      	movs	r3, #9
 8004afc:	617b      	str	r3, [r7, #20]
 8004afe:	e001      	b.n	8004b04 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004b00:	2309      	movs	r3, #9
 8004b02:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	68da      	ldr	r2, [r3, #12]
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	029b      	lsls	r3, r3, #10
 8004b18:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004b1c:	431a      	orrs	r2, r3
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004b22:	2300      	movs	r3, #0
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	371c      	adds	r7, #28
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr
 8004b30:	00d8acbf 	.word	0x00d8acbf
 8004b34:	00e4e1c0 	.word	0x00e4e1c0
 8004b38:	00f42400 	.word	0x00f42400
 8004b3c:	01067380 	.word	0x01067380
 8004b40:	011a499f 	.word	0x011a499f
 8004b44:	01312cff 	.word	0x01312cff
 8004b48:	014ca43f 	.word	0x014ca43f
 8004b4c:	016e3600 	.word	0x016e3600
 8004b50:	01a6ab1f 	.word	0x01a6ab1f
 8004b54:	01e84800 	.word	0x01e84800

08004b58 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	f043 0201 	orr.w	r2, r3, #1
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	370c      	adds	r7, #12
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr

08004b7a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b7a:	b480      	push	{r7}
 8004b7c:	b083      	sub	sp, #12
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f023 0201 	bic.w	r2, r3, #1
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b8e:	2300      	movs	r3, #0
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	370c      	adds	r7, #12
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004bb8:	78fb      	ldrb	r3, [r7, #3]
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d115      	bne.n	8004bea <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004bca:	2001      	movs	r0, #1
 8004bcc:	f7fc fc62 	bl	8001494 <HAL_Delay>
      ms++;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f001 fa45 	bl	8006066 <USB_GetMode>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d01e      	beq.n	8004c20 <USB_SetCurrentMode+0x84>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2b31      	cmp	r3, #49	; 0x31
 8004be6:	d9f0      	bls.n	8004bca <USB_SetCurrentMode+0x2e>
 8004be8:	e01a      	b.n	8004c20 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004bea:	78fb      	ldrb	r3, [r7, #3]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d115      	bne.n	8004c1c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004bfc:	2001      	movs	r0, #1
 8004bfe:	f7fc fc49 	bl	8001494 <HAL_Delay>
      ms++;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	3301      	adds	r3, #1
 8004c06:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f001 fa2c 	bl	8006066 <USB_GetMode>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d005      	beq.n	8004c20 <USB_SetCurrentMode+0x84>
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2b31      	cmp	r3, #49	; 0x31
 8004c18:	d9f0      	bls.n	8004bfc <USB_SetCurrentMode+0x60>
 8004c1a:	e001      	b.n	8004c20 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e005      	b.n	8004c2c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2b32      	cmp	r3, #50	; 0x32
 8004c24:	d101      	bne.n	8004c2a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e000      	b.n	8004c2c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3710      	adds	r7, #16
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c34:	b084      	sub	sp, #16
 8004c36:	b580      	push	{r7, lr}
 8004c38:	b086      	sub	sp, #24
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
 8004c3e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004c42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004c46:	2300      	movs	r3, #0
 8004c48:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004c4e:	2300      	movs	r3, #0
 8004c50:	613b      	str	r3, [r7, #16]
 8004c52:	e009      	b.n	8004c68 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	3340      	adds	r3, #64	; 0x40
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	4413      	add	r3, r2
 8004c5e:	2200      	movs	r2, #0
 8004c60:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	3301      	adds	r3, #1
 8004c66:	613b      	str	r3, [r7, #16]
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	2b0e      	cmp	r3, #14
 8004c6c:	d9f2      	bls.n	8004c54 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004c6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d11c      	bne.n	8004cae <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c82:	f043 0302 	orr.w	r3, r3, #2
 8004c86:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c8c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c98:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	639a      	str	r2, [r3, #56]	; 0x38
 8004cac:	e00b      	b.n	8004cc6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cbe:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004ccc:	461a      	mov	r2, r3
 8004cce:	2300      	movs	r3, #0
 8004cd0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cd8:	4619      	mov	r1, r3
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	680b      	ldr	r3, [r1, #0]
 8004ce4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d10c      	bne.n	8004d06 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d104      	bne.n	8004cfc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004cf2:	2100      	movs	r1, #0
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f000 f965 	bl	8004fc4 <USB_SetDevSpeed>
 8004cfa:	e008      	b.n	8004d0e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004cfc:	2101      	movs	r1, #1
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f000 f960 	bl	8004fc4 <USB_SetDevSpeed>
 8004d04:	e003      	b.n	8004d0e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004d06:	2103      	movs	r1, #3
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f000 f95b 	bl	8004fc4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004d0e:	2110      	movs	r1, #16
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f000 f8f3 	bl	8004efc <USB_FlushTxFifo>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d001      	beq.n	8004d20 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f000 f91f 	bl	8004f64 <USB_FlushRxFifo>
 8004d26:	4603      	mov	r3, r0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d001      	beq.n	8004d30 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d36:	461a      	mov	r2, r3
 8004d38:	2300      	movs	r3, #0
 8004d3a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d42:	461a      	mov	r2, r3
 8004d44:	2300      	movs	r3, #0
 8004d46:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d4e:	461a      	mov	r2, r3
 8004d50:	2300      	movs	r3, #0
 8004d52:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d54:	2300      	movs	r3, #0
 8004d56:	613b      	str	r3, [r7, #16]
 8004d58:	e043      	b.n	8004de2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	015a      	lsls	r2, r3, #5
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	4413      	add	r3, r2
 8004d62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d70:	d118      	bne.n	8004da4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d10a      	bne.n	8004d8e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	015a      	lsls	r2, r3, #5
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	4413      	add	r3, r2
 8004d80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d84:	461a      	mov	r2, r3
 8004d86:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004d8a:	6013      	str	r3, [r2, #0]
 8004d8c:	e013      	b.n	8004db6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	015a      	lsls	r2, r3, #5
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	4413      	add	r3, r2
 8004d96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004da0:	6013      	str	r3, [r2, #0]
 8004da2:	e008      	b.n	8004db6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	015a      	lsls	r2, r3, #5
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	4413      	add	r3, r2
 8004dac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004db0:	461a      	mov	r2, r3
 8004db2:	2300      	movs	r3, #0
 8004db4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	015a      	lsls	r2, r3, #5
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	4413      	add	r3, r2
 8004dbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	015a      	lsls	r2, r3, #5
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	4413      	add	r3, r2
 8004dd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004dda:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	3301      	adds	r3, #1
 8004de0:	613b      	str	r3, [r7, #16]
 8004de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de4:	693a      	ldr	r2, [r7, #16]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d3b7      	bcc.n	8004d5a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004dea:	2300      	movs	r3, #0
 8004dec:	613b      	str	r3, [r7, #16]
 8004dee:	e043      	b.n	8004e78 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	015a      	lsls	r2, r3, #5
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	4413      	add	r3, r2
 8004df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e06:	d118      	bne.n	8004e3a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d10a      	bne.n	8004e24 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	015a      	lsls	r2, r3, #5
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	4413      	add	r3, r2
 8004e16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004e20:	6013      	str	r3, [r2, #0]
 8004e22:	e013      	b.n	8004e4c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	015a      	lsls	r2, r3, #5
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	4413      	add	r3, r2
 8004e2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e30:	461a      	mov	r2, r3
 8004e32:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004e36:	6013      	str	r3, [r2, #0]
 8004e38:	e008      	b.n	8004e4c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	015a      	lsls	r2, r3, #5
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	4413      	add	r3, r2
 8004e42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e46:	461a      	mov	r2, r3
 8004e48:	2300      	movs	r3, #0
 8004e4a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	015a      	lsls	r2, r3, #5
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	4413      	add	r3, r2
 8004e54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e58:	461a      	mov	r2, r3
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	015a      	lsls	r2, r3, #5
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	4413      	add	r3, r2
 8004e66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004e70:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	3301      	adds	r3, #1
 8004e76:	613b      	str	r3, [r7, #16]
 8004e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7a:	693a      	ldr	r2, [r7, #16]
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d3b7      	bcc.n	8004df0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	68fa      	ldr	r2, [r7, #12]
 8004e8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e92:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004ea0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d105      	bne.n	8004eb4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	699b      	ldr	r3, [r3, #24]
 8004eac:	f043 0210 	orr.w	r2, r3, #16
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	699a      	ldr	r2, [r3, #24]
 8004eb8:	4b0f      	ldr	r3, [pc, #60]	; (8004ef8 <USB_DevInit+0x2c4>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004ec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d005      	beq.n	8004ed2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	f043 0208 	orr.w	r2, r3, #8
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004ed2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d107      	bne.n	8004ee8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	699b      	ldr	r3, [r3, #24]
 8004edc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ee0:	f043 0304 	orr.w	r3, r3, #4
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004ee8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3718      	adds	r7, #24
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ef4:	b004      	add	sp, #16
 8004ef6:	4770      	bx	lr
 8004ef8:	803c3800 	.word	0x803c3800

08004efc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b085      	sub	sp, #20
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004f06:	2300      	movs	r3, #0
 8004f08:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	4a13      	ldr	r2, [pc, #76]	; (8004f60 <USB_FlushTxFifo+0x64>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d901      	bls.n	8004f1c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004f18:	2303      	movs	r3, #3
 8004f1a:	e01b      	b.n	8004f54 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	691b      	ldr	r3, [r3, #16]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	daf2      	bge.n	8004f0a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004f24:	2300      	movs	r3, #0
 8004f26:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	019b      	lsls	r3, r3, #6
 8004f2c:	f043 0220 	orr.w	r2, r3, #32
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	3301      	adds	r3, #1
 8004f38:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	4a08      	ldr	r2, [pc, #32]	; (8004f60 <USB_FlushTxFifo+0x64>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d901      	bls.n	8004f46 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	e006      	b.n	8004f54 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	f003 0320 	and.w	r3, r3, #32
 8004f4e:	2b20      	cmp	r3, #32
 8004f50:	d0f0      	beq.n	8004f34 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004f52:	2300      	movs	r3, #0
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3714      	adds	r7, #20
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr
 8004f60:	00030d40 	.word	0x00030d40

08004f64 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b085      	sub	sp, #20
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	3301      	adds	r3, #1
 8004f74:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	4a11      	ldr	r2, [pc, #68]	; (8004fc0 <USB_FlushRxFifo+0x5c>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d901      	bls.n	8004f82 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e018      	b.n	8004fb4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	daf2      	bge.n	8004f70 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2210      	movs	r2, #16
 8004f92:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	3301      	adds	r3, #1
 8004f98:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	4a08      	ldr	r2, [pc, #32]	; (8004fc0 <USB_FlushRxFifo+0x5c>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d901      	bls.n	8004fa6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e006      	b.n	8004fb4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	691b      	ldr	r3, [r3, #16]
 8004faa:	f003 0310 	and.w	r3, r3, #16
 8004fae:	2b10      	cmp	r3, #16
 8004fb0:	d0f0      	beq.n	8004f94 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004fb2:	2300      	movs	r3, #0
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3714      	adds	r7, #20
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr
 8004fc0:	00030d40 	.word	0x00030d40

08004fc4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b085      	sub	sp, #20
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	460b      	mov	r3, r1
 8004fce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	78fb      	ldrb	r3, [r7, #3]
 8004fde:	68f9      	ldr	r1, [r7, #12]
 8004fe0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3714      	adds	r7, #20
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr

08004ff6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004ff6:	b480      	push	{r7}
 8004ff8:	b087      	sub	sp, #28
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	f003 0306 	and.w	r3, r3, #6
 800500e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d102      	bne.n	800501c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005016:	2300      	movs	r3, #0
 8005018:	75fb      	strb	r3, [r7, #23]
 800501a:	e00a      	b.n	8005032 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2b02      	cmp	r3, #2
 8005020:	d002      	beq.n	8005028 <USB_GetDevSpeed+0x32>
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2b06      	cmp	r3, #6
 8005026:	d102      	bne.n	800502e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005028:	2302      	movs	r3, #2
 800502a:	75fb      	strb	r3, [r7, #23]
 800502c:	e001      	b.n	8005032 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800502e:	230f      	movs	r3, #15
 8005030:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005032:	7dfb      	ldrb	r3, [r7, #23]
}
 8005034:	4618      	mov	r0, r3
 8005036:	371c      	adds	r7, #28
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005040:	b480      	push	{r7}
 8005042:	b085      	sub	sp, #20
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	785b      	ldrb	r3, [r3, #1]
 8005058:	2b01      	cmp	r3, #1
 800505a:	d13a      	bne.n	80050d2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005062:	69da      	ldr	r2, [r3, #28]
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	f003 030f 	and.w	r3, r3, #15
 800506c:	2101      	movs	r1, #1
 800506e:	fa01 f303 	lsl.w	r3, r1, r3
 8005072:	b29b      	uxth	r3, r3
 8005074:	68f9      	ldr	r1, [r7, #12]
 8005076:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800507a:	4313      	orrs	r3, r2
 800507c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	015a      	lsls	r2, r3, #5
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	4413      	add	r3, r2
 8005086:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005090:	2b00      	cmp	r3, #0
 8005092:	d155      	bne.n	8005140 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	015a      	lsls	r2, r3, #5
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	4413      	add	r3, r2
 800509c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	68db      	ldr	r3, [r3, #12]
 80050a6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	791b      	ldrb	r3, [r3, #4]
 80050ae:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80050b0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	059b      	lsls	r3, r3, #22
 80050b6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80050b8:	4313      	orrs	r3, r2
 80050ba:	68ba      	ldr	r2, [r7, #8]
 80050bc:	0151      	lsls	r1, r2, #5
 80050be:	68fa      	ldr	r2, [r7, #12]
 80050c0:	440a      	add	r2, r1
 80050c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050ce:	6013      	str	r3, [r2, #0]
 80050d0:	e036      	b.n	8005140 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050d8:	69da      	ldr	r2, [r3, #28]
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	f003 030f 	and.w	r3, r3, #15
 80050e2:	2101      	movs	r1, #1
 80050e4:	fa01 f303 	lsl.w	r3, r1, r3
 80050e8:	041b      	lsls	r3, r3, #16
 80050ea:	68f9      	ldr	r1, [r7, #12]
 80050ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050f0:	4313      	orrs	r3, r2
 80050f2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	015a      	lsls	r2, r3, #5
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	4413      	add	r3, r2
 80050fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d11a      	bne.n	8005140 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	015a      	lsls	r2, r3, #5
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	4413      	add	r3, r2
 8005112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	791b      	ldrb	r3, [r3, #4]
 8005124:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005126:	430b      	orrs	r3, r1
 8005128:	4313      	orrs	r3, r2
 800512a:	68ba      	ldr	r2, [r7, #8]
 800512c:	0151      	lsls	r1, r2, #5
 800512e:	68fa      	ldr	r2, [r7, #12]
 8005130:	440a      	add	r2, r1
 8005132:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005136:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800513a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800513e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	3714      	adds	r7, #20
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr
	...

08005150 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005150:	b480      	push	{r7}
 8005152:	b085      	sub	sp, #20
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	785b      	ldrb	r3, [r3, #1]
 8005168:	2b01      	cmp	r3, #1
 800516a:	d161      	bne.n	8005230 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	015a      	lsls	r2, r3, #5
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	4413      	add	r3, r2
 8005174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800517e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005182:	d11f      	bne.n	80051c4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	015a      	lsls	r2, r3, #5
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	4413      	add	r3, r2
 800518c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	68ba      	ldr	r2, [r7, #8]
 8005194:	0151      	lsls	r1, r2, #5
 8005196:	68fa      	ldr	r2, [r7, #12]
 8005198:	440a      	add	r2, r1
 800519a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800519e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80051a2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	015a      	lsls	r2, r3, #5
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	4413      	add	r3, r2
 80051ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	68ba      	ldr	r2, [r7, #8]
 80051b4:	0151      	lsls	r1, r2, #5
 80051b6:	68fa      	ldr	r2, [r7, #12]
 80051b8:	440a      	add	r2, r1
 80051ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80051c2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	f003 030f 	and.w	r3, r3, #15
 80051d4:	2101      	movs	r1, #1
 80051d6:	fa01 f303 	lsl.w	r3, r1, r3
 80051da:	b29b      	uxth	r3, r3
 80051dc:	43db      	mvns	r3, r3
 80051de:	68f9      	ldr	r1, [r7, #12]
 80051e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051e4:	4013      	ands	r3, r2
 80051e6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ee:	69da      	ldr	r2, [r3, #28]
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	f003 030f 	and.w	r3, r3, #15
 80051f8:	2101      	movs	r1, #1
 80051fa:	fa01 f303 	lsl.w	r3, r1, r3
 80051fe:	b29b      	uxth	r3, r3
 8005200:	43db      	mvns	r3, r3
 8005202:	68f9      	ldr	r1, [r7, #12]
 8005204:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005208:	4013      	ands	r3, r2
 800520a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	015a      	lsls	r2, r3, #5
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	4413      	add	r3, r2
 8005214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	0159      	lsls	r1, r3, #5
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	440b      	add	r3, r1
 8005222:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005226:	4619      	mov	r1, r3
 8005228:	4b35      	ldr	r3, [pc, #212]	; (8005300 <USB_DeactivateEndpoint+0x1b0>)
 800522a:	4013      	ands	r3, r2
 800522c:	600b      	str	r3, [r1, #0]
 800522e:	e060      	b.n	80052f2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	015a      	lsls	r2, r3, #5
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	4413      	add	r3, r2
 8005238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005242:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005246:	d11f      	bne.n	8005288 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	015a      	lsls	r2, r3, #5
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	4413      	add	r3, r2
 8005250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68ba      	ldr	r2, [r7, #8]
 8005258:	0151      	lsls	r1, r2, #5
 800525a:	68fa      	ldr	r2, [r7, #12]
 800525c:	440a      	add	r2, r1
 800525e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005262:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005266:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	015a      	lsls	r2, r3, #5
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	4413      	add	r3, r2
 8005270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68ba      	ldr	r2, [r7, #8]
 8005278:	0151      	lsls	r1, r2, #5
 800527a:	68fa      	ldr	r2, [r7, #12]
 800527c:	440a      	add	r2, r1
 800527e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005282:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005286:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800528e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	f003 030f 	and.w	r3, r3, #15
 8005298:	2101      	movs	r1, #1
 800529a:	fa01 f303 	lsl.w	r3, r1, r3
 800529e:	041b      	lsls	r3, r3, #16
 80052a0:	43db      	mvns	r3, r3
 80052a2:	68f9      	ldr	r1, [r7, #12]
 80052a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052a8:	4013      	ands	r3, r2
 80052aa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052b2:	69da      	ldr	r2, [r3, #28]
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	f003 030f 	and.w	r3, r3, #15
 80052bc:	2101      	movs	r1, #1
 80052be:	fa01 f303 	lsl.w	r3, r1, r3
 80052c2:	041b      	lsls	r3, r3, #16
 80052c4:	43db      	mvns	r3, r3
 80052c6:	68f9      	ldr	r1, [r7, #12]
 80052c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052cc:	4013      	ands	r3, r2
 80052ce:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	015a      	lsls	r2, r3, #5
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	4413      	add	r3, r2
 80052d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	0159      	lsls	r1, r3, #5
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	440b      	add	r3, r1
 80052e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ea:	4619      	mov	r1, r3
 80052ec:	4b05      	ldr	r3, [pc, #20]	; (8005304 <USB_DeactivateEndpoint+0x1b4>)
 80052ee:	4013      	ands	r3, r2
 80052f0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80052f2:	2300      	movs	r3, #0
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3714      	adds	r7, #20
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr
 8005300:	ec337800 	.word	0xec337800
 8005304:	eff37800 	.word	0xeff37800

08005308 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b08a      	sub	sp, #40	; 0x28
 800530c:	af02      	add	r7, sp, #8
 800530e:	60f8      	str	r0, [r7, #12]
 8005310:	60b9      	str	r1, [r7, #8]
 8005312:	4613      	mov	r3, r2
 8005314:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	785b      	ldrb	r3, [r3, #1]
 8005324:	2b01      	cmp	r3, #1
 8005326:	f040 815c 	bne.w	80055e2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	699b      	ldr	r3, [r3, #24]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d132      	bne.n	8005398 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005332:	69bb      	ldr	r3, [r7, #24]
 8005334:	015a      	lsls	r2, r3, #5
 8005336:	69fb      	ldr	r3, [r7, #28]
 8005338:	4413      	add	r3, r2
 800533a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800533e:	691b      	ldr	r3, [r3, #16]
 8005340:	69ba      	ldr	r2, [r7, #24]
 8005342:	0151      	lsls	r1, r2, #5
 8005344:	69fa      	ldr	r2, [r7, #28]
 8005346:	440a      	add	r2, r1
 8005348:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800534c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005350:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005354:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	015a      	lsls	r2, r3, #5
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	4413      	add	r3, r2
 800535e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005362:	691b      	ldr	r3, [r3, #16]
 8005364:	69ba      	ldr	r2, [r7, #24]
 8005366:	0151      	lsls	r1, r2, #5
 8005368:	69fa      	ldr	r2, [r7, #28]
 800536a:	440a      	add	r2, r1
 800536c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005370:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005374:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005376:	69bb      	ldr	r3, [r7, #24]
 8005378:	015a      	lsls	r2, r3, #5
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	4413      	add	r3, r2
 800537e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005382:	691b      	ldr	r3, [r3, #16]
 8005384:	69ba      	ldr	r2, [r7, #24]
 8005386:	0151      	lsls	r1, r2, #5
 8005388:	69fa      	ldr	r2, [r7, #28]
 800538a:	440a      	add	r2, r1
 800538c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005390:	0cdb      	lsrs	r3, r3, #19
 8005392:	04db      	lsls	r3, r3, #19
 8005394:	6113      	str	r3, [r2, #16]
 8005396:	e074      	b.n	8005482 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	015a      	lsls	r2, r3, #5
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	4413      	add	r3, r2
 80053a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053a4:	691b      	ldr	r3, [r3, #16]
 80053a6:	69ba      	ldr	r2, [r7, #24]
 80053a8:	0151      	lsls	r1, r2, #5
 80053aa:	69fa      	ldr	r2, [r7, #28]
 80053ac:	440a      	add	r2, r1
 80053ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053b2:	0cdb      	lsrs	r3, r3, #19
 80053b4:	04db      	lsls	r3, r3, #19
 80053b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	015a      	lsls	r2, r3, #5
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	4413      	add	r3, r2
 80053c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	69ba      	ldr	r2, [r7, #24]
 80053c8:	0151      	lsls	r1, r2, #5
 80053ca:	69fa      	ldr	r2, [r7, #28]
 80053cc:	440a      	add	r2, r1
 80053ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053d2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80053d6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80053da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	015a      	lsls	r2, r3, #5
 80053e0:	69fb      	ldr	r3, [r7, #28]
 80053e2:	4413      	add	r3, r2
 80053e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053e8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	6999      	ldr	r1, [r3, #24]
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	440b      	add	r3, r1
 80053f4:	1e59      	subs	r1, r3, #1
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80053fe:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005400:	4b9d      	ldr	r3, [pc, #628]	; (8005678 <USB_EPStartXfer+0x370>)
 8005402:	400b      	ands	r3, r1
 8005404:	69b9      	ldr	r1, [r7, #24]
 8005406:	0148      	lsls	r0, r1, #5
 8005408:	69f9      	ldr	r1, [r7, #28]
 800540a:	4401      	add	r1, r0
 800540c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005410:	4313      	orrs	r3, r2
 8005412:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005414:	69bb      	ldr	r3, [r7, #24]
 8005416:	015a      	lsls	r2, r3, #5
 8005418:	69fb      	ldr	r3, [r7, #28]
 800541a:	4413      	add	r3, r2
 800541c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005420:	691a      	ldr	r2, [r3, #16]
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	699b      	ldr	r3, [r3, #24]
 8005426:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800542a:	69b9      	ldr	r1, [r7, #24]
 800542c:	0148      	lsls	r0, r1, #5
 800542e:	69f9      	ldr	r1, [r7, #28]
 8005430:	4401      	add	r1, r0
 8005432:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005436:	4313      	orrs	r3, r2
 8005438:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	791b      	ldrb	r3, [r3, #4]
 800543e:	2b01      	cmp	r3, #1
 8005440:	d11f      	bne.n	8005482 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	015a      	lsls	r2, r3, #5
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	4413      	add	r3, r2
 800544a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800544e:	691b      	ldr	r3, [r3, #16]
 8005450:	69ba      	ldr	r2, [r7, #24]
 8005452:	0151      	lsls	r1, r2, #5
 8005454:	69fa      	ldr	r2, [r7, #28]
 8005456:	440a      	add	r2, r1
 8005458:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800545c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005460:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005462:	69bb      	ldr	r3, [r7, #24]
 8005464:	015a      	lsls	r2, r3, #5
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	4413      	add	r3, r2
 800546a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	69ba      	ldr	r2, [r7, #24]
 8005472:	0151      	lsls	r1, r2, #5
 8005474:	69fa      	ldr	r2, [r7, #28]
 8005476:	440a      	add	r2, r1
 8005478:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800547c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005480:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005482:	79fb      	ldrb	r3, [r7, #7]
 8005484:	2b01      	cmp	r3, #1
 8005486:	d14b      	bne.n	8005520 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	695b      	ldr	r3, [r3, #20]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d009      	beq.n	80054a4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005490:	69bb      	ldr	r3, [r7, #24]
 8005492:	015a      	lsls	r2, r3, #5
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	4413      	add	r3, r2
 8005498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800549c:	461a      	mov	r2, r3
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	695b      	ldr	r3, [r3, #20]
 80054a2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	791b      	ldrb	r3, [r3, #4]
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d128      	bne.n	80054fe <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d110      	bne.n	80054de <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	015a      	lsls	r2, r3, #5
 80054c0:	69fb      	ldr	r3, [r7, #28]
 80054c2:	4413      	add	r3, r2
 80054c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	69ba      	ldr	r2, [r7, #24]
 80054cc:	0151      	lsls	r1, r2, #5
 80054ce:	69fa      	ldr	r2, [r7, #28]
 80054d0:	440a      	add	r2, r1
 80054d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80054da:	6013      	str	r3, [r2, #0]
 80054dc:	e00f      	b.n	80054fe <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80054de:	69bb      	ldr	r3, [r7, #24]
 80054e0:	015a      	lsls	r2, r3, #5
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	4413      	add	r3, r2
 80054e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	69ba      	ldr	r2, [r7, #24]
 80054ee:	0151      	lsls	r1, r2, #5
 80054f0:	69fa      	ldr	r2, [r7, #28]
 80054f2:	440a      	add	r2, r1
 80054f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054fc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	015a      	lsls	r2, r3, #5
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	4413      	add	r3, r2
 8005506:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	69ba      	ldr	r2, [r7, #24]
 800550e:	0151      	lsls	r1, r2, #5
 8005510:	69fa      	ldr	r2, [r7, #28]
 8005512:	440a      	add	r2, r1
 8005514:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005518:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800551c:	6013      	str	r3, [r2, #0]
 800551e:	e133      	b.n	8005788 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005520:	69bb      	ldr	r3, [r7, #24]
 8005522:	015a      	lsls	r2, r3, #5
 8005524:	69fb      	ldr	r3, [r7, #28]
 8005526:	4413      	add	r3, r2
 8005528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	69ba      	ldr	r2, [r7, #24]
 8005530:	0151      	lsls	r1, r2, #5
 8005532:	69fa      	ldr	r2, [r7, #28]
 8005534:	440a      	add	r2, r1
 8005536:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800553a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800553e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	791b      	ldrb	r3, [r3, #4]
 8005544:	2b01      	cmp	r3, #1
 8005546:	d015      	beq.n	8005574 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	699b      	ldr	r3, [r3, #24]
 800554c:	2b00      	cmp	r3, #0
 800554e:	f000 811b 	beq.w	8005788 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005558:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	f003 030f 	and.w	r3, r3, #15
 8005562:	2101      	movs	r1, #1
 8005564:	fa01 f303 	lsl.w	r3, r1, r3
 8005568:	69f9      	ldr	r1, [r7, #28]
 800556a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800556e:	4313      	orrs	r3, r2
 8005570:	634b      	str	r3, [r1, #52]	; 0x34
 8005572:	e109      	b.n	8005788 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005580:	2b00      	cmp	r3, #0
 8005582:	d110      	bne.n	80055a6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005584:	69bb      	ldr	r3, [r7, #24]
 8005586:	015a      	lsls	r2, r3, #5
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	4413      	add	r3, r2
 800558c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	69ba      	ldr	r2, [r7, #24]
 8005594:	0151      	lsls	r1, r2, #5
 8005596:	69fa      	ldr	r2, [r7, #28]
 8005598:	440a      	add	r2, r1
 800559a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800559e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80055a2:	6013      	str	r3, [r2, #0]
 80055a4:	e00f      	b.n	80055c6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80055a6:	69bb      	ldr	r3, [r7, #24]
 80055a8:	015a      	lsls	r2, r3, #5
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	4413      	add	r3, r2
 80055ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	69ba      	ldr	r2, [r7, #24]
 80055b6:	0151      	lsls	r1, r2, #5
 80055b8:	69fa      	ldr	r2, [r7, #28]
 80055ba:	440a      	add	r2, r1
 80055bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055c4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	6919      	ldr	r1, [r3, #16]
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	781a      	ldrb	r2, [r3, #0]
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	699b      	ldr	r3, [r3, #24]
 80055d2:	b298      	uxth	r0, r3
 80055d4:	79fb      	ldrb	r3, [r7, #7]
 80055d6:	9300      	str	r3, [sp, #0]
 80055d8:	4603      	mov	r3, r0
 80055da:	68f8      	ldr	r0, [r7, #12]
 80055dc:	f000 fade 	bl	8005b9c <USB_WritePacket>
 80055e0:	e0d2      	b.n	8005788 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80055e2:	69bb      	ldr	r3, [r7, #24]
 80055e4:	015a      	lsls	r2, r3, #5
 80055e6:	69fb      	ldr	r3, [r7, #28]
 80055e8:	4413      	add	r3, r2
 80055ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ee:	691b      	ldr	r3, [r3, #16]
 80055f0:	69ba      	ldr	r2, [r7, #24]
 80055f2:	0151      	lsls	r1, r2, #5
 80055f4:	69fa      	ldr	r2, [r7, #28]
 80055f6:	440a      	add	r2, r1
 80055f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055fc:	0cdb      	lsrs	r3, r3, #19
 80055fe:	04db      	lsls	r3, r3, #19
 8005600:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	015a      	lsls	r2, r3, #5
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	4413      	add	r3, r2
 800560a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800560e:	691b      	ldr	r3, [r3, #16]
 8005610:	69ba      	ldr	r2, [r7, #24]
 8005612:	0151      	lsls	r1, r2, #5
 8005614:	69fa      	ldr	r2, [r7, #28]
 8005616:	440a      	add	r2, r1
 8005618:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800561c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005620:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005624:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	699b      	ldr	r3, [r3, #24]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d126      	bne.n	800567c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800562e:	69bb      	ldr	r3, [r7, #24]
 8005630:	015a      	lsls	r2, r3, #5
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	4413      	add	r3, r2
 8005636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800563a:	691a      	ldr	r2, [r3, #16]
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005644:	69b9      	ldr	r1, [r7, #24]
 8005646:	0148      	lsls	r0, r1, #5
 8005648:	69f9      	ldr	r1, [r7, #28]
 800564a:	4401      	add	r1, r0
 800564c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005650:	4313      	orrs	r3, r2
 8005652:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005654:	69bb      	ldr	r3, [r7, #24]
 8005656:	015a      	lsls	r2, r3, #5
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	4413      	add	r3, r2
 800565c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	69ba      	ldr	r2, [r7, #24]
 8005664:	0151      	lsls	r1, r2, #5
 8005666:	69fa      	ldr	r2, [r7, #28]
 8005668:	440a      	add	r2, r1
 800566a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800566e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005672:	6113      	str	r3, [r2, #16]
 8005674:	e03a      	b.n	80056ec <USB_EPStartXfer+0x3e4>
 8005676:	bf00      	nop
 8005678:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	699a      	ldr	r2, [r3, #24]
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	4413      	add	r3, r2
 8005686:	1e5a      	subs	r2, r3, #1
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005690:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	8afa      	ldrh	r2, [r7, #22]
 8005698:	fb03 f202 	mul.w	r2, r3, r2
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	015a      	lsls	r2, r3, #5
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	4413      	add	r3, r2
 80056a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ac:	691a      	ldr	r2, [r3, #16]
 80056ae:	8afb      	ldrh	r3, [r7, #22]
 80056b0:	04d9      	lsls	r1, r3, #19
 80056b2:	4b38      	ldr	r3, [pc, #224]	; (8005794 <USB_EPStartXfer+0x48c>)
 80056b4:	400b      	ands	r3, r1
 80056b6:	69b9      	ldr	r1, [r7, #24]
 80056b8:	0148      	lsls	r0, r1, #5
 80056ba:	69f9      	ldr	r1, [r7, #28]
 80056bc:	4401      	add	r1, r0
 80056be:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80056c2:	4313      	orrs	r3, r2
 80056c4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	015a      	lsls	r2, r3, #5
 80056ca:	69fb      	ldr	r3, [r7, #28]
 80056cc:	4413      	add	r3, r2
 80056ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056d2:	691a      	ldr	r2, [r3, #16]
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	69db      	ldr	r3, [r3, #28]
 80056d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056dc:	69b9      	ldr	r1, [r7, #24]
 80056de:	0148      	lsls	r0, r1, #5
 80056e0:	69f9      	ldr	r1, [r7, #28]
 80056e2:	4401      	add	r1, r0
 80056e4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80056e8:	4313      	orrs	r3, r2
 80056ea:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80056ec:	79fb      	ldrb	r3, [r7, #7]
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d10d      	bne.n	800570e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d009      	beq.n	800570e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	6919      	ldr	r1, [r3, #16]
 80056fe:	69bb      	ldr	r3, [r7, #24]
 8005700:	015a      	lsls	r2, r3, #5
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	4413      	add	r3, r2
 8005706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800570a:	460a      	mov	r2, r1
 800570c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	791b      	ldrb	r3, [r3, #4]
 8005712:	2b01      	cmp	r3, #1
 8005714:	d128      	bne.n	8005768 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005722:	2b00      	cmp	r3, #0
 8005724:	d110      	bne.n	8005748 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	015a      	lsls	r2, r3, #5
 800572a:	69fb      	ldr	r3, [r7, #28]
 800572c:	4413      	add	r3, r2
 800572e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	69ba      	ldr	r2, [r7, #24]
 8005736:	0151      	lsls	r1, r2, #5
 8005738:	69fa      	ldr	r2, [r7, #28]
 800573a:	440a      	add	r2, r1
 800573c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005740:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005744:	6013      	str	r3, [r2, #0]
 8005746:	e00f      	b.n	8005768 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005748:	69bb      	ldr	r3, [r7, #24]
 800574a:	015a      	lsls	r2, r3, #5
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	4413      	add	r3, r2
 8005750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	69ba      	ldr	r2, [r7, #24]
 8005758:	0151      	lsls	r1, r2, #5
 800575a:	69fa      	ldr	r2, [r7, #28]
 800575c:	440a      	add	r2, r1
 800575e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005762:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005766:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	015a      	lsls	r2, r3, #5
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	4413      	add	r3, r2
 8005770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	69ba      	ldr	r2, [r7, #24]
 8005778:	0151      	lsls	r1, r2, #5
 800577a:	69fa      	ldr	r2, [r7, #28]
 800577c:	440a      	add	r2, r1
 800577e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005782:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005786:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3720      	adds	r7, #32
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	1ff80000 	.word	0x1ff80000

08005798 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005798:	b480      	push	{r7}
 800579a:	b087      	sub	sp, #28
 800579c:	af00      	add	r7, sp, #0
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	4613      	mov	r3, r2
 80057a4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	785b      	ldrb	r3, [r3, #1]
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	f040 80ce 	bne.w	8005956 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	699b      	ldr	r3, [r3, #24]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d132      	bne.n	8005828 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	015a      	lsls	r2, r3, #5
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	4413      	add	r3, r2
 80057ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	693a      	ldr	r2, [r7, #16]
 80057d2:	0151      	lsls	r1, r2, #5
 80057d4:	697a      	ldr	r2, [r7, #20]
 80057d6:	440a      	add	r2, r1
 80057d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80057e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80057e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	015a      	lsls	r2, r3, #5
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	4413      	add	r3, r2
 80057ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057f2:	691b      	ldr	r3, [r3, #16]
 80057f4:	693a      	ldr	r2, [r7, #16]
 80057f6:	0151      	lsls	r1, r2, #5
 80057f8:	697a      	ldr	r2, [r7, #20]
 80057fa:	440a      	add	r2, r1
 80057fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005800:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005804:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	015a      	lsls	r2, r3, #5
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	4413      	add	r3, r2
 800580e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005812:	691b      	ldr	r3, [r3, #16]
 8005814:	693a      	ldr	r2, [r7, #16]
 8005816:	0151      	lsls	r1, r2, #5
 8005818:	697a      	ldr	r2, [r7, #20]
 800581a:	440a      	add	r2, r1
 800581c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005820:	0cdb      	lsrs	r3, r3, #19
 8005822:	04db      	lsls	r3, r3, #19
 8005824:	6113      	str	r3, [r2, #16]
 8005826:	e04e      	b.n	80058c6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	015a      	lsls	r2, r3, #5
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	4413      	add	r3, r2
 8005830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005834:	691b      	ldr	r3, [r3, #16]
 8005836:	693a      	ldr	r2, [r7, #16]
 8005838:	0151      	lsls	r1, r2, #5
 800583a:	697a      	ldr	r2, [r7, #20]
 800583c:	440a      	add	r2, r1
 800583e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005842:	0cdb      	lsrs	r3, r3, #19
 8005844:	04db      	lsls	r3, r3, #19
 8005846:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	015a      	lsls	r2, r3, #5
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	4413      	add	r3, r2
 8005850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005854:	691b      	ldr	r3, [r3, #16]
 8005856:	693a      	ldr	r2, [r7, #16]
 8005858:	0151      	lsls	r1, r2, #5
 800585a:	697a      	ldr	r2, [r7, #20]
 800585c:	440a      	add	r2, r1
 800585e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005862:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005866:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800586a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	699a      	ldr	r2, [r3, #24]
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	429a      	cmp	r2, r3
 8005876:	d903      	bls.n	8005880 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	68da      	ldr	r2, [r3, #12]
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	015a      	lsls	r2, r3, #5
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	4413      	add	r3, r2
 8005888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800588c:	691b      	ldr	r3, [r3, #16]
 800588e:	693a      	ldr	r2, [r7, #16]
 8005890:	0151      	lsls	r1, r2, #5
 8005892:	697a      	ldr	r2, [r7, #20]
 8005894:	440a      	add	r2, r1
 8005896:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800589a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800589e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	015a      	lsls	r2, r3, #5
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	4413      	add	r3, r2
 80058a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058ac:	691a      	ldr	r2, [r3, #16]
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	699b      	ldr	r3, [r3, #24]
 80058b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058b6:	6939      	ldr	r1, [r7, #16]
 80058b8:	0148      	lsls	r0, r1, #5
 80058ba:	6979      	ldr	r1, [r7, #20]
 80058bc:	4401      	add	r1, r0
 80058be:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80058c2:	4313      	orrs	r3, r2
 80058c4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80058c6:	79fb      	ldrb	r3, [r7, #7]
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d11e      	bne.n	800590a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	695b      	ldr	r3, [r3, #20]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d009      	beq.n	80058e8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	015a      	lsls	r2, r3, #5
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	4413      	add	r3, r2
 80058dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058e0:	461a      	mov	r2, r3
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	695b      	ldr	r3, [r3, #20]
 80058e6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	015a      	lsls	r2, r3, #5
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	4413      	add	r3, r2
 80058f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	693a      	ldr	r2, [r7, #16]
 80058f8:	0151      	lsls	r1, r2, #5
 80058fa:	697a      	ldr	r2, [r7, #20]
 80058fc:	440a      	add	r2, r1
 80058fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005902:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005906:	6013      	str	r3, [r2, #0]
 8005908:	e097      	b.n	8005a3a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	015a      	lsls	r2, r3, #5
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	4413      	add	r3, r2
 8005912:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	693a      	ldr	r2, [r7, #16]
 800591a:	0151      	lsls	r1, r2, #5
 800591c:	697a      	ldr	r2, [r7, #20]
 800591e:	440a      	add	r2, r1
 8005920:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005924:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005928:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	699b      	ldr	r3, [r3, #24]
 800592e:	2b00      	cmp	r3, #0
 8005930:	f000 8083 	beq.w	8005a3a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800593a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	f003 030f 	and.w	r3, r3, #15
 8005944:	2101      	movs	r1, #1
 8005946:	fa01 f303 	lsl.w	r3, r1, r3
 800594a:	6979      	ldr	r1, [r7, #20]
 800594c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005950:	4313      	orrs	r3, r2
 8005952:	634b      	str	r3, [r1, #52]	; 0x34
 8005954:	e071      	b.n	8005a3a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	015a      	lsls	r2, r3, #5
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	4413      	add	r3, r2
 800595e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005962:	691b      	ldr	r3, [r3, #16]
 8005964:	693a      	ldr	r2, [r7, #16]
 8005966:	0151      	lsls	r1, r2, #5
 8005968:	697a      	ldr	r2, [r7, #20]
 800596a:	440a      	add	r2, r1
 800596c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005970:	0cdb      	lsrs	r3, r3, #19
 8005972:	04db      	lsls	r3, r3, #19
 8005974:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	015a      	lsls	r2, r3, #5
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	4413      	add	r3, r2
 800597e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005982:	691b      	ldr	r3, [r3, #16]
 8005984:	693a      	ldr	r2, [r7, #16]
 8005986:	0151      	lsls	r1, r2, #5
 8005988:	697a      	ldr	r2, [r7, #20]
 800598a:	440a      	add	r2, r1
 800598c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005990:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005994:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005998:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	699b      	ldr	r3, [r3, #24]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d003      	beq.n	80059aa <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	68da      	ldr	r2, [r3, #12]
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	68da      	ldr	r2, [r3, #12]
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	015a      	lsls	r2, r3, #5
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	4413      	add	r3, r2
 80059ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059be:	691b      	ldr	r3, [r3, #16]
 80059c0:	693a      	ldr	r2, [r7, #16]
 80059c2:	0151      	lsls	r1, r2, #5
 80059c4:	697a      	ldr	r2, [r7, #20]
 80059c6:	440a      	add	r2, r1
 80059c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80059d0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	015a      	lsls	r2, r3, #5
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	4413      	add	r3, r2
 80059da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059de:	691a      	ldr	r2, [r3, #16]
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	69db      	ldr	r3, [r3, #28]
 80059e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059e8:	6939      	ldr	r1, [r7, #16]
 80059ea:	0148      	lsls	r0, r1, #5
 80059ec:	6979      	ldr	r1, [r7, #20]
 80059ee:	4401      	add	r1, r0
 80059f0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80059f4:	4313      	orrs	r3, r2
 80059f6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80059f8:	79fb      	ldrb	r3, [r7, #7]
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d10d      	bne.n	8005a1a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	691b      	ldr	r3, [r3, #16]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d009      	beq.n	8005a1a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	6919      	ldr	r1, [r3, #16]
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	015a      	lsls	r2, r3, #5
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	4413      	add	r3, r2
 8005a12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a16:	460a      	mov	r2, r1
 8005a18:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	015a      	lsls	r2, r3, #5
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	4413      	add	r3, r2
 8005a22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	693a      	ldr	r2, [r7, #16]
 8005a2a:	0151      	lsls	r1, r2, #5
 8005a2c:	697a      	ldr	r2, [r7, #20]
 8005a2e:	440a      	add	r2, r1
 8005a30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a34:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a38:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005a3a:	2300      	movs	r3, #0
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	371c      	adds	r7, #28
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr

08005a48 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b087      	sub	sp, #28
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005a52:	2300      	movs	r3, #0
 8005a54:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005a56:	2300      	movs	r3, #0
 8005a58:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	785b      	ldrb	r3, [r3, #1]
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d14a      	bne.n	8005afc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	781b      	ldrb	r3, [r3, #0]
 8005a6a:	015a      	lsls	r2, r3, #5
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	4413      	add	r3, r2
 8005a70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a7e:	f040 8086 	bne.w	8005b8e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	015a      	lsls	r2, r3, #5
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	4413      	add	r3, r2
 8005a8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	683a      	ldr	r2, [r7, #0]
 8005a94:	7812      	ldrb	r2, [r2, #0]
 8005a96:	0151      	lsls	r1, r2, #5
 8005a98:	693a      	ldr	r2, [r7, #16]
 8005a9a:	440a      	add	r2, r1
 8005a9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aa0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005aa4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	015a      	lsls	r2, r3, #5
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	4413      	add	r3, r2
 8005ab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	683a      	ldr	r2, [r7, #0]
 8005ab8:	7812      	ldrb	r2, [r2, #0]
 8005aba:	0151      	lsls	r1, r2, #5
 8005abc:	693a      	ldr	r2, [r7, #16]
 8005abe:	440a      	add	r2, r1
 8005ac0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ac4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ac8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	3301      	adds	r3, #1
 8005ace:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f242 7210 	movw	r2, #10000	; 0x2710
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d902      	bls.n	8005ae0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	75fb      	strb	r3, [r7, #23]
          break;
 8005ade:	e056      	b.n	8005b8e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	015a      	lsls	r2, r3, #5
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	4413      	add	r3, r2
 8005aea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005af4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005af8:	d0e7      	beq.n	8005aca <USB_EPStopXfer+0x82>
 8005afa:	e048      	b.n	8005b8e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	015a      	lsls	r2, r3, #5
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	4413      	add	r3, r2
 8005b06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b14:	d13b      	bne.n	8005b8e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	015a      	lsls	r2, r3, #5
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	4413      	add	r3, r2
 8005b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	683a      	ldr	r2, [r7, #0]
 8005b28:	7812      	ldrb	r2, [r2, #0]
 8005b2a:	0151      	lsls	r1, r2, #5
 8005b2c:	693a      	ldr	r2, [r7, #16]
 8005b2e:	440a      	add	r2, r1
 8005b30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b34:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005b38:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	015a      	lsls	r2, r3, #5
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	4413      	add	r3, r2
 8005b44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	683a      	ldr	r2, [r7, #0]
 8005b4c:	7812      	ldrb	r2, [r2, #0]
 8005b4e:	0151      	lsls	r1, r2, #5
 8005b50:	693a      	ldr	r2, [r7, #16]
 8005b52:	440a      	add	r2, r1
 8005b54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b5c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	3301      	adds	r3, #1
 8005b62:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f242 7210 	movw	r2, #10000	; 0x2710
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d902      	bls.n	8005b74 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	75fb      	strb	r3, [r7, #23]
          break;
 8005b72:	e00c      	b.n	8005b8e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	015a      	lsls	r2, r3, #5
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b8c:	d0e7      	beq.n	8005b5e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005b8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	371c      	adds	r7, #28
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr

08005b9c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b089      	sub	sp, #36	; 0x24
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	60b9      	str	r1, [r7, #8]
 8005ba6:	4611      	mov	r1, r2
 8005ba8:	461a      	mov	r2, r3
 8005baa:	460b      	mov	r3, r1
 8005bac:	71fb      	strb	r3, [r7, #7]
 8005bae:	4613      	mov	r3, r2
 8005bb0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005bba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d123      	bne.n	8005c0a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005bc2:	88bb      	ldrh	r3, [r7, #4]
 8005bc4:	3303      	adds	r3, #3
 8005bc6:	089b      	lsrs	r3, r3, #2
 8005bc8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005bca:	2300      	movs	r3, #0
 8005bcc:	61bb      	str	r3, [r7, #24]
 8005bce:	e018      	b.n	8005c02 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005bd0:	79fb      	ldrb	r3, [r7, #7]
 8005bd2:	031a      	lsls	r2, r3, #12
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	4413      	add	r3, r2
 8005bd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bdc:	461a      	mov	r2, r3
 8005bde:	69fb      	ldr	r3, [r7, #28]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	3301      	adds	r3, #1
 8005be8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005bea:	69fb      	ldr	r3, [r7, #28]
 8005bec:	3301      	adds	r3, #1
 8005bee:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005bf6:	69fb      	ldr	r3, [r7, #28]
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005bfc:	69bb      	ldr	r3, [r7, #24]
 8005bfe:	3301      	adds	r3, #1
 8005c00:	61bb      	str	r3, [r7, #24]
 8005c02:	69ba      	ldr	r2, [r7, #24]
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d3e2      	bcc.n	8005bd0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005c0a:	2300      	movs	r3, #0
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3724      	adds	r7, #36	; 0x24
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr

08005c18 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b08b      	sub	sp, #44	; 0x2c
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	60b9      	str	r1, [r7, #8]
 8005c22:	4613      	mov	r3, r2
 8005c24:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005c2e:	88fb      	ldrh	r3, [r7, #6]
 8005c30:	089b      	lsrs	r3, r3, #2
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005c36:	88fb      	ldrh	r3, [r7, #6]
 8005c38:	f003 0303 	and.w	r3, r3, #3
 8005c3c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005c3e:	2300      	movs	r3, #0
 8005c40:	623b      	str	r3, [r7, #32]
 8005c42:	e014      	b.n	8005c6e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005c44:	69bb      	ldr	r3, [r7, #24]
 8005c46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c52:	3301      	adds	r3, #1
 8005c54:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c58:	3301      	adds	r3, #1
 8005c5a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5e:	3301      	adds	r3, #1
 8005c60:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c64:	3301      	adds	r3, #1
 8005c66:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005c68:	6a3b      	ldr	r3, [r7, #32]
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	623b      	str	r3, [r7, #32]
 8005c6e:	6a3a      	ldr	r2, [r7, #32]
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d3e6      	bcc.n	8005c44 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005c76:	8bfb      	ldrh	r3, [r7, #30]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d01e      	beq.n	8005cba <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005c80:	69bb      	ldr	r3, [r7, #24]
 8005c82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c86:	461a      	mov	r2, r3
 8005c88:	f107 0310 	add.w	r3, r7, #16
 8005c8c:	6812      	ldr	r2, [r2, #0]
 8005c8e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005c90:	693a      	ldr	r2, [r7, #16]
 8005c92:	6a3b      	ldr	r3, [r7, #32]
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	00db      	lsls	r3, r3, #3
 8005c98:	fa22 f303 	lsr.w	r3, r2, r3
 8005c9c:	b2da      	uxtb	r2, r3
 8005c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca0:	701a      	strb	r2, [r3, #0]
      i++;
 8005ca2:	6a3b      	ldr	r3, [r7, #32]
 8005ca4:	3301      	adds	r3, #1
 8005ca6:	623b      	str	r3, [r7, #32]
      pDest++;
 8005ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005caa:	3301      	adds	r3, #1
 8005cac:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005cae:	8bfb      	ldrh	r3, [r7, #30]
 8005cb0:	3b01      	subs	r3, #1
 8005cb2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005cb4:	8bfb      	ldrh	r3, [r7, #30]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d1ea      	bne.n	8005c90 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	372c      	adds	r7, #44	; 0x2c
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr

08005cc8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b085      	sub	sp, #20
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	785b      	ldrb	r3, [r3, #1]
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d12c      	bne.n	8005d3e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	015a      	lsls	r2, r3, #5
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	4413      	add	r3, r2
 8005cec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	db12      	blt.n	8005d1c <USB_EPSetStall+0x54>
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d00f      	beq.n	8005d1c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	015a      	lsls	r2, r3, #5
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	4413      	add	r3, r2
 8005d04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	68ba      	ldr	r2, [r7, #8]
 8005d0c:	0151      	lsls	r1, r2, #5
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	440a      	add	r2, r1
 8005d12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d16:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005d1a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	015a      	lsls	r2, r3, #5
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	4413      	add	r3, r2
 8005d24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	68ba      	ldr	r2, [r7, #8]
 8005d2c:	0151      	lsls	r1, r2, #5
 8005d2e:	68fa      	ldr	r2, [r7, #12]
 8005d30:	440a      	add	r2, r1
 8005d32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d36:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005d3a:	6013      	str	r3, [r2, #0]
 8005d3c:	e02b      	b.n	8005d96 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	015a      	lsls	r2, r3, #5
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	4413      	add	r3, r2
 8005d46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	db12      	blt.n	8005d76 <USB_EPSetStall+0xae>
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d00f      	beq.n	8005d76 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	015a      	lsls	r2, r3, #5
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	68ba      	ldr	r2, [r7, #8]
 8005d66:	0151      	lsls	r1, r2, #5
 8005d68:	68fa      	ldr	r2, [r7, #12]
 8005d6a:	440a      	add	r2, r1
 8005d6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d70:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005d74:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	015a      	lsls	r2, r3, #5
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	4413      	add	r3, r2
 8005d7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	68ba      	ldr	r2, [r7, #8]
 8005d86:	0151      	lsls	r1, r2, #5
 8005d88:	68fa      	ldr	r2, [r7, #12]
 8005d8a:	440a      	add	r2, r1
 8005d8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005d94:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d96:	2300      	movs	r3, #0
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3714      	adds	r7, #20
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr

08005da4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b085      	sub	sp, #20
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	781b      	ldrb	r3, [r3, #0]
 8005db6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	785b      	ldrb	r3, [r3, #1]
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d128      	bne.n	8005e12 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	015a      	lsls	r2, r3, #5
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	4413      	add	r3, r2
 8005dc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	68ba      	ldr	r2, [r7, #8]
 8005dd0:	0151      	lsls	r1, r2, #5
 8005dd2:	68fa      	ldr	r2, [r7, #12]
 8005dd4:	440a      	add	r2, r1
 8005dd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dda:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005dde:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	791b      	ldrb	r3, [r3, #4]
 8005de4:	2b03      	cmp	r3, #3
 8005de6:	d003      	beq.n	8005df0 <USB_EPClearStall+0x4c>
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	791b      	ldrb	r3, [r3, #4]
 8005dec:	2b02      	cmp	r3, #2
 8005dee:	d138      	bne.n	8005e62 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	015a      	lsls	r2, r3, #5
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	4413      	add	r3, r2
 8005df8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	68ba      	ldr	r2, [r7, #8]
 8005e00:	0151      	lsls	r1, r2, #5
 8005e02:	68fa      	ldr	r2, [r7, #12]
 8005e04:	440a      	add	r2, r1
 8005e06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e0e:	6013      	str	r3, [r2, #0]
 8005e10:	e027      	b.n	8005e62 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	015a      	lsls	r2, r3, #5
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	4413      	add	r3, r2
 8005e1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	68ba      	ldr	r2, [r7, #8]
 8005e22:	0151      	lsls	r1, r2, #5
 8005e24:	68fa      	ldr	r2, [r7, #12]
 8005e26:	440a      	add	r2, r1
 8005e28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e2c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e30:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	791b      	ldrb	r3, [r3, #4]
 8005e36:	2b03      	cmp	r3, #3
 8005e38:	d003      	beq.n	8005e42 <USB_EPClearStall+0x9e>
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	791b      	ldrb	r3, [r3, #4]
 8005e3e:	2b02      	cmp	r3, #2
 8005e40:	d10f      	bne.n	8005e62 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	015a      	lsls	r2, r3, #5
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	4413      	add	r3, r2
 8005e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68ba      	ldr	r2, [r7, #8]
 8005e52:	0151      	lsls	r1, r2, #5
 8005e54:	68fa      	ldr	r2, [r7, #12]
 8005e56:	440a      	add	r2, r1
 8005e58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e60:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005e62:	2300      	movs	r3, #0
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3714      	adds	r7, #20
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr

08005e70 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b085      	sub	sp, #20
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	460b      	mov	r3, r1
 8005e7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	68fa      	ldr	r2, [r7, #12]
 8005e8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e8e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005e92:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	78fb      	ldrb	r3, [r7, #3]
 8005e9e:	011b      	lsls	r3, r3, #4
 8005ea0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005ea4:	68f9      	ldr	r1, [r7, #12]
 8005ea6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005eae:	2300      	movs	r3, #0
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3714      	adds	r7, #20
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

08005ebc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b085      	sub	sp, #20
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68fa      	ldr	r2, [r7, #12]
 8005ed2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005ed6:	f023 0303 	bic.w	r3, r3, #3
 8005eda:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	68fa      	ldr	r2, [r7, #12]
 8005ee6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005eea:	f023 0302 	bic.w	r3, r3, #2
 8005eee:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005ef0:	2300      	movs	r3, #0
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3714      	adds	r7, #20
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr

08005efe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005efe:	b480      	push	{r7}
 8005f00:	b085      	sub	sp, #20
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	68fa      	ldr	r2, [r7, #12]
 8005f14:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005f18:	f023 0303 	bic.w	r3, r3, #3
 8005f1c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	68fa      	ldr	r2, [r7, #12]
 8005f28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f2c:	f043 0302 	orr.w	r3, r3, #2
 8005f30:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005f32:	2300      	movs	r3, #0
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3714      	adds	r7, #20
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr

08005f40 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b085      	sub	sp, #20
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	695b      	ldr	r3, [r3, #20]
 8005f4c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	699b      	ldr	r3, [r3, #24]
 8005f52:	68fa      	ldr	r2, [r7, #12]
 8005f54:	4013      	ands	r3, r2
 8005f56:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005f58:	68fb      	ldr	r3, [r7, #12]
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3714      	adds	r7, #20
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr

08005f66 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f66:	b480      	push	{r7}
 8005f68:	b085      	sub	sp, #20
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f78:	699b      	ldr	r3, [r3, #24]
 8005f7a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f82:	69db      	ldr	r3, [r3, #28]
 8005f84:	68ba      	ldr	r2, [r7, #8]
 8005f86:	4013      	ands	r3, r2
 8005f88:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	0c1b      	lsrs	r3, r3, #16
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3714      	adds	r7, #20
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr

08005f9a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f9a:	b480      	push	{r7}
 8005f9c:	b085      	sub	sp, #20
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fac:	699b      	ldr	r3, [r3, #24]
 8005fae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fb6:	69db      	ldr	r3, [r3, #28]
 8005fb8:	68ba      	ldr	r2, [r7, #8]
 8005fba:	4013      	ands	r3, r2
 8005fbc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	b29b      	uxth	r3, r3
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3714      	adds	r7, #20
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr

08005fce <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005fce:	b480      	push	{r7}
 8005fd0:	b085      	sub	sp, #20
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	6078      	str	r0, [r7, #4]
 8005fd6:	460b      	mov	r3, r1
 8005fd8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005fde:	78fb      	ldrb	r3, [r7, #3]
 8005fe0:	015a      	lsls	r2, r3, #5
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	4413      	add	r3, r2
 8005fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ff4:	695b      	ldr	r3, [r3, #20]
 8005ff6:	68ba      	ldr	r2, [r7, #8]
 8005ff8:	4013      	ands	r3, r2
 8005ffa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005ffc:	68bb      	ldr	r3, [r7, #8]
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3714      	adds	r7, #20
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr

0800600a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800600a:	b480      	push	{r7}
 800600c:	b087      	sub	sp, #28
 800600e:	af00      	add	r7, sp, #0
 8006010:	6078      	str	r0, [r7, #4]
 8006012:	460b      	mov	r3, r1
 8006014:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006020:	691b      	ldr	r3, [r3, #16]
 8006022:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800602a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800602c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800602e:	78fb      	ldrb	r3, [r7, #3]
 8006030:	f003 030f 	and.w	r3, r3, #15
 8006034:	68fa      	ldr	r2, [r7, #12]
 8006036:	fa22 f303 	lsr.w	r3, r2, r3
 800603a:	01db      	lsls	r3, r3, #7
 800603c:	b2db      	uxtb	r3, r3
 800603e:	693a      	ldr	r2, [r7, #16]
 8006040:	4313      	orrs	r3, r2
 8006042:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006044:	78fb      	ldrb	r3, [r7, #3]
 8006046:	015a      	lsls	r2, r3, #5
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	4413      	add	r3, r2
 800604c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	693a      	ldr	r2, [r7, #16]
 8006054:	4013      	ands	r3, r2
 8006056:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006058:	68bb      	ldr	r3, [r7, #8]
}
 800605a:	4618      	mov	r0, r3
 800605c:	371c      	adds	r7, #28
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr

08006066 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006066:	b480      	push	{r7}
 8006068:	b083      	sub	sp, #12
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	695b      	ldr	r3, [r3, #20]
 8006072:	f003 0301 	and.w	r3, r3, #1
}
 8006076:	4618      	mov	r0, r3
 8006078:	370c      	adds	r7, #12
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr

08006082 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006082:	b480      	push	{r7}
 8006084:	b085      	sub	sp, #20
 8006086:	af00      	add	r7, sp, #0
 8006088:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	68fa      	ldr	r2, [r7, #12]
 8006098:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800609c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80060a0:	f023 0307 	bic.w	r3, r3, #7
 80060a4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	68fa      	ldr	r2, [r7, #12]
 80060b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80060ba:	2300      	movs	r3, #0
}
 80060bc:	4618      	mov	r0, r3
 80060be:	3714      	adds	r7, #20
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr

080060c8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b087      	sub	sp, #28
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	60f8      	str	r0, [r7, #12]
 80060d0:	460b      	mov	r3, r1
 80060d2:	607a      	str	r2, [r7, #4]
 80060d4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	333c      	adds	r3, #60	; 0x3c
 80060de:	3304      	adds	r3, #4
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	4a26      	ldr	r2, [pc, #152]	; (8006180 <USB_EP0_OutStart+0xb8>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d90a      	bls.n	8006102 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060fc:	d101      	bne.n	8006102 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80060fe:	2300      	movs	r3, #0
 8006100:	e037      	b.n	8006172 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006108:	461a      	mov	r2, r3
 800610a:	2300      	movs	r3, #0
 800610c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006114:	691b      	ldr	r3, [r3, #16]
 8006116:	697a      	ldr	r2, [r7, #20]
 8006118:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800611c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006120:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006128:	691b      	ldr	r3, [r3, #16]
 800612a:	697a      	ldr	r2, [r7, #20]
 800612c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006130:	f043 0318 	orr.w	r3, r3, #24
 8006134:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800613c:	691b      	ldr	r3, [r3, #16]
 800613e:	697a      	ldr	r2, [r7, #20]
 8006140:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006144:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006148:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800614a:	7afb      	ldrb	r3, [r7, #11]
 800614c:	2b01      	cmp	r3, #1
 800614e:	d10f      	bne.n	8006170 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006156:	461a      	mov	r2, r3
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	697a      	ldr	r2, [r7, #20]
 8006166:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800616a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800616e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006170:	2300      	movs	r3, #0
}
 8006172:	4618      	mov	r0, r3
 8006174:	371c      	adds	r7, #28
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr
 800617e:	bf00      	nop
 8006180:	4f54300a 	.word	0x4f54300a

08006184 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006184:	b480      	push	{r7}
 8006186:	b085      	sub	sp, #20
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800618c:	2300      	movs	r3, #0
 800618e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	3301      	adds	r3, #1
 8006194:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	4a13      	ldr	r2, [pc, #76]	; (80061e8 <USB_CoreReset+0x64>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d901      	bls.n	80061a2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800619e:	2303      	movs	r3, #3
 80061a0:	e01b      	b.n	80061da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	691b      	ldr	r3, [r3, #16]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	daf2      	bge.n	8006190 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80061aa:	2300      	movs	r3, #0
 80061ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	691b      	ldr	r3, [r3, #16]
 80061b2:	f043 0201 	orr.w	r2, r3, #1
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	3301      	adds	r3, #1
 80061be:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	4a09      	ldr	r2, [pc, #36]	; (80061e8 <USB_CoreReset+0x64>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d901      	bls.n	80061cc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80061c8:	2303      	movs	r3, #3
 80061ca:	e006      	b.n	80061da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	691b      	ldr	r3, [r3, #16]
 80061d0:	f003 0301 	and.w	r3, r3, #1
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d0f0      	beq.n	80061ba <USB_CoreReset+0x36>

  return HAL_OK;
 80061d8:	2300      	movs	r3, #0
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3714      	adds	r7, #20
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr
 80061e6:	bf00      	nop
 80061e8:	00030d40 	.word	0x00030d40

080061ec <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	460b      	mov	r3, r1
 80061f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80061f8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80061fc:	f005 fa54 	bl	800b6a8 <USBD_static_malloc>
 8006200:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d109      	bne.n	800621c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	32b0      	adds	r2, #176	; 0xb0
 8006212:	2100      	movs	r1, #0
 8006214:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006218:	2302      	movs	r3, #2
 800621a:	e0d4      	b.n	80063c6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800621c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006220:	2100      	movs	r1, #0
 8006222:	68f8      	ldr	r0, [r7, #12]
 8006224:	f005 fc54 	bl	800bad0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	32b0      	adds	r2, #176	; 0xb0
 8006232:	68f9      	ldr	r1, [r7, #12]
 8006234:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	32b0      	adds	r2, #176	; 0xb0
 8006242:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	7c1b      	ldrb	r3, [r3, #16]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d138      	bne.n	80062c6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006254:	4b5e      	ldr	r3, [pc, #376]	; (80063d0 <USBD_CDC_Init+0x1e4>)
 8006256:	7819      	ldrb	r1, [r3, #0]
 8006258:	f44f 7300 	mov.w	r3, #512	; 0x200
 800625c:	2202      	movs	r2, #2
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f005 f8ff 	bl	800b462 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006264:	4b5a      	ldr	r3, [pc, #360]	; (80063d0 <USBD_CDC_Init+0x1e4>)
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	f003 020f 	and.w	r2, r3, #15
 800626c:	6879      	ldr	r1, [r7, #4]
 800626e:	4613      	mov	r3, r2
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	4413      	add	r3, r2
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	440b      	add	r3, r1
 8006278:	3324      	adds	r3, #36	; 0x24
 800627a:	2201      	movs	r2, #1
 800627c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800627e:	4b55      	ldr	r3, [pc, #340]	; (80063d4 <USBD_CDC_Init+0x1e8>)
 8006280:	7819      	ldrb	r1, [r3, #0]
 8006282:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006286:	2202      	movs	r2, #2
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f005 f8ea 	bl	800b462 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800628e:	4b51      	ldr	r3, [pc, #324]	; (80063d4 <USBD_CDC_Init+0x1e8>)
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	f003 020f 	and.w	r2, r3, #15
 8006296:	6879      	ldr	r1, [r7, #4]
 8006298:	4613      	mov	r3, r2
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	4413      	add	r3, r2
 800629e:	009b      	lsls	r3, r3, #2
 80062a0:	440b      	add	r3, r1
 80062a2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80062a6:	2201      	movs	r2, #1
 80062a8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80062aa:	4b4b      	ldr	r3, [pc, #300]	; (80063d8 <USBD_CDC_Init+0x1ec>)
 80062ac:	781b      	ldrb	r3, [r3, #0]
 80062ae:	f003 020f 	and.w	r2, r3, #15
 80062b2:	6879      	ldr	r1, [r7, #4]
 80062b4:	4613      	mov	r3, r2
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	4413      	add	r3, r2
 80062ba:	009b      	lsls	r3, r3, #2
 80062bc:	440b      	add	r3, r1
 80062be:	3326      	adds	r3, #38	; 0x26
 80062c0:	2210      	movs	r2, #16
 80062c2:	801a      	strh	r2, [r3, #0]
 80062c4:	e035      	b.n	8006332 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80062c6:	4b42      	ldr	r3, [pc, #264]	; (80063d0 <USBD_CDC_Init+0x1e4>)
 80062c8:	7819      	ldrb	r1, [r3, #0]
 80062ca:	2340      	movs	r3, #64	; 0x40
 80062cc:	2202      	movs	r2, #2
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f005 f8c7 	bl	800b462 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80062d4:	4b3e      	ldr	r3, [pc, #248]	; (80063d0 <USBD_CDC_Init+0x1e4>)
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	f003 020f 	and.w	r2, r3, #15
 80062dc:	6879      	ldr	r1, [r7, #4]
 80062de:	4613      	mov	r3, r2
 80062e0:	009b      	lsls	r3, r3, #2
 80062e2:	4413      	add	r3, r2
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	440b      	add	r3, r1
 80062e8:	3324      	adds	r3, #36	; 0x24
 80062ea:	2201      	movs	r2, #1
 80062ec:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80062ee:	4b39      	ldr	r3, [pc, #228]	; (80063d4 <USBD_CDC_Init+0x1e8>)
 80062f0:	7819      	ldrb	r1, [r3, #0]
 80062f2:	2340      	movs	r3, #64	; 0x40
 80062f4:	2202      	movs	r2, #2
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f005 f8b3 	bl	800b462 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80062fc:	4b35      	ldr	r3, [pc, #212]	; (80063d4 <USBD_CDC_Init+0x1e8>)
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	f003 020f 	and.w	r2, r3, #15
 8006304:	6879      	ldr	r1, [r7, #4]
 8006306:	4613      	mov	r3, r2
 8006308:	009b      	lsls	r3, r3, #2
 800630a:	4413      	add	r3, r2
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	440b      	add	r3, r1
 8006310:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006314:	2201      	movs	r2, #1
 8006316:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006318:	4b2f      	ldr	r3, [pc, #188]	; (80063d8 <USBD_CDC_Init+0x1ec>)
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	f003 020f 	and.w	r2, r3, #15
 8006320:	6879      	ldr	r1, [r7, #4]
 8006322:	4613      	mov	r3, r2
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	4413      	add	r3, r2
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	440b      	add	r3, r1
 800632c:	3326      	adds	r3, #38	; 0x26
 800632e:	2210      	movs	r2, #16
 8006330:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006332:	4b29      	ldr	r3, [pc, #164]	; (80063d8 <USBD_CDC_Init+0x1ec>)
 8006334:	7819      	ldrb	r1, [r3, #0]
 8006336:	2308      	movs	r3, #8
 8006338:	2203      	movs	r2, #3
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f005 f891 	bl	800b462 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006340:	4b25      	ldr	r3, [pc, #148]	; (80063d8 <USBD_CDC_Init+0x1ec>)
 8006342:	781b      	ldrb	r3, [r3, #0]
 8006344:	f003 020f 	and.w	r2, r3, #15
 8006348:	6879      	ldr	r1, [r7, #4]
 800634a:	4613      	mov	r3, r2
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	4413      	add	r3, r2
 8006350:	009b      	lsls	r3, r3, #2
 8006352:	440b      	add	r3, r1
 8006354:	3324      	adds	r3, #36	; 0x24
 8006356:	2201      	movs	r2, #1
 8006358:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2200      	movs	r2, #0
 800635e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	33b0      	adds	r3, #176	; 0xb0
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	4413      	add	r3, r2
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2200      	movs	r2, #0
 800637a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2200      	movs	r2, #0
 8006382:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800638c:	2b00      	cmp	r3, #0
 800638e:	d101      	bne.n	8006394 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006390:	2302      	movs	r3, #2
 8006392:	e018      	b.n	80063c6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	7c1b      	ldrb	r3, [r3, #16]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d10a      	bne.n	80063b2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800639c:	4b0d      	ldr	r3, [pc, #52]	; (80063d4 <USBD_CDC_Init+0x1e8>)
 800639e:	7819      	ldrb	r1, [r3, #0]
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80063a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f005 f948 	bl	800b640 <USBD_LL_PrepareReceive>
 80063b0:	e008      	b.n	80063c4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80063b2:	4b08      	ldr	r3, [pc, #32]	; (80063d4 <USBD_CDC_Init+0x1e8>)
 80063b4:	7819      	ldrb	r1, [r3, #0]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80063bc:	2340      	movs	r3, #64	; 0x40
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f005 f93e 	bl	800b640 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80063c4:	2300      	movs	r3, #0
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3710      	adds	r7, #16
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	20000093 	.word	0x20000093
 80063d4:	20000094 	.word	0x20000094
 80063d8:	20000095 	.word	0x20000095

080063dc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b082      	sub	sp, #8
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	460b      	mov	r3, r1
 80063e6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80063e8:	4b3a      	ldr	r3, [pc, #232]	; (80064d4 <USBD_CDC_DeInit+0xf8>)
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	4619      	mov	r1, r3
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f005 f85d 	bl	800b4ae <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80063f4:	4b37      	ldr	r3, [pc, #220]	; (80064d4 <USBD_CDC_DeInit+0xf8>)
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	f003 020f 	and.w	r2, r3, #15
 80063fc:	6879      	ldr	r1, [r7, #4]
 80063fe:	4613      	mov	r3, r2
 8006400:	009b      	lsls	r3, r3, #2
 8006402:	4413      	add	r3, r2
 8006404:	009b      	lsls	r3, r3, #2
 8006406:	440b      	add	r3, r1
 8006408:	3324      	adds	r3, #36	; 0x24
 800640a:	2200      	movs	r2, #0
 800640c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800640e:	4b32      	ldr	r3, [pc, #200]	; (80064d8 <USBD_CDC_DeInit+0xfc>)
 8006410:	781b      	ldrb	r3, [r3, #0]
 8006412:	4619      	mov	r1, r3
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f005 f84a 	bl	800b4ae <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800641a:	4b2f      	ldr	r3, [pc, #188]	; (80064d8 <USBD_CDC_DeInit+0xfc>)
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	f003 020f 	and.w	r2, r3, #15
 8006422:	6879      	ldr	r1, [r7, #4]
 8006424:	4613      	mov	r3, r2
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	4413      	add	r3, r2
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	440b      	add	r3, r1
 800642e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006432:	2200      	movs	r2, #0
 8006434:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006436:	4b29      	ldr	r3, [pc, #164]	; (80064dc <USBD_CDC_DeInit+0x100>)
 8006438:	781b      	ldrb	r3, [r3, #0]
 800643a:	4619      	mov	r1, r3
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f005 f836 	bl	800b4ae <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006442:	4b26      	ldr	r3, [pc, #152]	; (80064dc <USBD_CDC_DeInit+0x100>)
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	f003 020f 	and.w	r2, r3, #15
 800644a:	6879      	ldr	r1, [r7, #4]
 800644c:	4613      	mov	r3, r2
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	4413      	add	r3, r2
 8006452:	009b      	lsls	r3, r3, #2
 8006454:	440b      	add	r3, r1
 8006456:	3324      	adds	r3, #36	; 0x24
 8006458:	2200      	movs	r2, #0
 800645a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800645c:	4b1f      	ldr	r3, [pc, #124]	; (80064dc <USBD_CDC_DeInit+0x100>)
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	f003 020f 	and.w	r2, r3, #15
 8006464:	6879      	ldr	r1, [r7, #4]
 8006466:	4613      	mov	r3, r2
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	4413      	add	r3, r2
 800646c:	009b      	lsls	r3, r3, #2
 800646e:	440b      	add	r3, r1
 8006470:	3326      	adds	r3, #38	; 0x26
 8006472:	2200      	movs	r2, #0
 8006474:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	32b0      	adds	r2, #176	; 0xb0
 8006480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d01f      	beq.n	80064c8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	33b0      	adds	r3, #176	; 0xb0
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	4413      	add	r3, r2
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	32b0      	adds	r2, #176	; 0xb0
 80064a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064aa:	4618      	mov	r0, r3
 80064ac:	f005 f90a 	bl	800b6c4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	32b0      	adds	r2, #176	; 0xb0
 80064ba:	2100      	movs	r1, #0
 80064bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80064c8:	2300      	movs	r3, #0
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3708      	adds	r7, #8
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
 80064d2:	bf00      	nop
 80064d4:	20000093 	.word	0x20000093
 80064d8:	20000094 	.word	0x20000094
 80064dc:	20000095 	.word	0x20000095

080064e0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b086      	sub	sp, #24
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	32b0      	adds	r2, #176	; 0xb0
 80064f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064f8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80064fa:	2300      	movs	r3, #0
 80064fc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80064fe:	2300      	movs	r3, #0
 8006500:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006502:	2300      	movs	r3, #0
 8006504:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d101      	bne.n	8006510 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800650c:	2303      	movs	r3, #3
 800650e:	e0bf      	b.n	8006690 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006518:	2b00      	cmp	r3, #0
 800651a:	d050      	beq.n	80065be <USBD_CDC_Setup+0xde>
 800651c:	2b20      	cmp	r3, #32
 800651e:	f040 80af 	bne.w	8006680 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	88db      	ldrh	r3, [r3, #6]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d03a      	beq.n	80065a0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	b25b      	sxtb	r3, r3
 8006530:	2b00      	cmp	r3, #0
 8006532:	da1b      	bge.n	800656c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	33b0      	adds	r3, #176	; 0xb0
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	4413      	add	r3, r2
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	683a      	ldr	r2, [r7, #0]
 8006548:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800654a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800654c:	683a      	ldr	r2, [r7, #0]
 800654e:	88d2      	ldrh	r2, [r2, #6]
 8006550:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	88db      	ldrh	r3, [r3, #6]
 8006556:	2b07      	cmp	r3, #7
 8006558:	bf28      	it	cs
 800655a:	2307      	movcs	r3, #7
 800655c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	89fa      	ldrh	r2, [r7, #14]
 8006562:	4619      	mov	r1, r3
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f001 fd89 	bl	800807c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800656a:	e090      	b.n	800668e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	785a      	ldrb	r2, [r3, #1]
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	88db      	ldrh	r3, [r3, #6]
 800657a:	2b3f      	cmp	r3, #63	; 0x3f
 800657c:	d803      	bhi.n	8006586 <USBD_CDC_Setup+0xa6>
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	88db      	ldrh	r3, [r3, #6]
 8006582:	b2da      	uxtb	r2, r3
 8006584:	e000      	b.n	8006588 <USBD_CDC_Setup+0xa8>
 8006586:	2240      	movs	r2, #64	; 0x40
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800658e:	6939      	ldr	r1, [r7, #16]
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006596:	461a      	mov	r2, r3
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f001 fd9b 	bl	80080d4 <USBD_CtlPrepareRx>
      break;
 800659e:	e076      	b.n	800668e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	33b0      	adds	r3, #176	; 0xb0
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	4413      	add	r3, r2
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	683a      	ldr	r2, [r7, #0]
 80065b4:	7850      	ldrb	r0, [r2, #1]
 80065b6:	2200      	movs	r2, #0
 80065b8:	6839      	ldr	r1, [r7, #0]
 80065ba:	4798      	blx	r3
      break;
 80065bc:	e067      	b.n	800668e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	785b      	ldrb	r3, [r3, #1]
 80065c2:	2b0b      	cmp	r3, #11
 80065c4:	d851      	bhi.n	800666a <USBD_CDC_Setup+0x18a>
 80065c6:	a201      	add	r2, pc, #4	; (adr r2, 80065cc <USBD_CDC_Setup+0xec>)
 80065c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065cc:	080065fd 	.word	0x080065fd
 80065d0:	08006679 	.word	0x08006679
 80065d4:	0800666b 	.word	0x0800666b
 80065d8:	0800666b 	.word	0x0800666b
 80065dc:	0800666b 	.word	0x0800666b
 80065e0:	0800666b 	.word	0x0800666b
 80065e4:	0800666b 	.word	0x0800666b
 80065e8:	0800666b 	.word	0x0800666b
 80065ec:	0800666b 	.word	0x0800666b
 80065f0:	0800666b 	.word	0x0800666b
 80065f4:	08006627 	.word	0x08006627
 80065f8:	08006651 	.word	0x08006651
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006602:	b2db      	uxtb	r3, r3
 8006604:	2b03      	cmp	r3, #3
 8006606:	d107      	bne.n	8006618 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006608:	f107 030a 	add.w	r3, r7, #10
 800660c:	2202      	movs	r2, #2
 800660e:	4619      	mov	r1, r3
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f001 fd33 	bl	800807c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006616:	e032      	b.n	800667e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006618:	6839      	ldr	r1, [r7, #0]
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f001 fcbd 	bl	8007f9a <USBD_CtlError>
            ret = USBD_FAIL;
 8006620:	2303      	movs	r3, #3
 8006622:	75fb      	strb	r3, [r7, #23]
          break;
 8006624:	e02b      	b.n	800667e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800662c:	b2db      	uxtb	r3, r3
 800662e:	2b03      	cmp	r3, #3
 8006630:	d107      	bne.n	8006642 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006632:	f107 030d 	add.w	r3, r7, #13
 8006636:	2201      	movs	r2, #1
 8006638:	4619      	mov	r1, r3
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f001 fd1e 	bl	800807c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006640:	e01d      	b.n	800667e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006642:	6839      	ldr	r1, [r7, #0]
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f001 fca8 	bl	8007f9a <USBD_CtlError>
            ret = USBD_FAIL;
 800664a:	2303      	movs	r3, #3
 800664c:	75fb      	strb	r3, [r7, #23]
          break;
 800664e:	e016      	b.n	800667e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006656:	b2db      	uxtb	r3, r3
 8006658:	2b03      	cmp	r3, #3
 800665a:	d00f      	beq.n	800667c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800665c:	6839      	ldr	r1, [r7, #0]
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f001 fc9b 	bl	8007f9a <USBD_CtlError>
            ret = USBD_FAIL;
 8006664:	2303      	movs	r3, #3
 8006666:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006668:	e008      	b.n	800667c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800666a:	6839      	ldr	r1, [r7, #0]
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f001 fc94 	bl	8007f9a <USBD_CtlError>
          ret = USBD_FAIL;
 8006672:	2303      	movs	r3, #3
 8006674:	75fb      	strb	r3, [r7, #23]
          break;
 8006676:	e002      	b.n	800667e <USBD_CDC_Setup+0x19e>
          break;
 8006678:	bf00      	nop
 800667a:	e008      	b.n	800668e <USBD_CDC_Setup+0x1ae>
          break;
 800667c:	bf00      	nop
      }
      break;
 800667e:	e006      	b.n	800668e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006680:	6839      	ldr	r1, [r7, #0]
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f001 fc89 	bl	8007f9a <USBD_CtlError>
      ret = USBD_FAIL;
 8006688:	2303      	movs	r3, #3
 800668a:	75fb      	strb	r3, [r7, #23]
      break;
 800668c:	bf00      	nop
  }

  return (uint8_t)ret;
 800668e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006690:	4618      	mov	r0, r3
 8006692:	3718      	adds	r7, #24
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}

08006698 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b084      	sub	sp, #16
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	460b      	mov	r3, r1
 80066a2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80066aa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	32b0      	adds	r2, #176	; 0xb0
 80066b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d101      	bne.n	80066c2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80066be:	2303      	movs	r3, #3
 80066c0:	e065      	b.n	800678e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	32b0      	adds	r2, #176	; 0xb0
 80066cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066d0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80066d2:	78fb      	ldrb	r3, [r7, #3]
 80066d4:	f003 020f 	and.w	r2, r3, #15
 80066d8:	6879      	ldr	r1, [r7, #4]
 80066da:	4613      	mov	r3, r2
 80066dc:	009b      	lsls	r3, r3, #2
 80066de:	4413      	add	r3, r2
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	440b      	add	r3, r1
 80066e4:	3318      	adds	r3, #24
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d02f      	beq.n	800674c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80066ec:	78fb      	ldrb	r3, [r7, #3]
 80066ee:	f003 020f 	and.w	r2, r3, #15
 80066f2:	6879      	ldr	r1, [r7, #4]
 80066f4:	4613      	mov	r3, r2
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	4413      	add	r3, r2
 80066fa:	009b      	lsls	r3, r3, #2
 80066fc:	440b      	add	r3, r1
 80066fe:	3318      	adds	r3, #24
 8006700:	681a      	ldr	r2, [r3, #0]
 8006702:	78fb      	ldrb	r3, [r7, #3]
 8006704:	f003 010f 	and.w	r1, r3, #15
 8006708:	68f8      	ldr	r0, [r7, #12]
 800670a:	460b      	mov	r3, r1
 800670c:	00db      	lsls	r3, r3, #3
 800670e:	440b      	add	r3, r1
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	4403      	add	r3, r0
 8006714:	3348      	adds	r3, #72	; 0x48
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	fbb2 f1f3 	udiv	r1, r2, r3
 800671c:	fb01 f303 	mul.w	r3, r1, r3
 8006720:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006722:	2b00      	cmp	r3, #0
 8006724:	d112      	bne.n	800674c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006726:	78fb      	ldrb	r3, [r7, #3]
 8006728:	f003 020f 	and.w	r2, r3, #15
 800672c:	6879      	ldr	r1, [r7, #4]
 800672e:	4613      	mov	r3, r2
 8006730:	009b      	lsls	r3, r3, #2
 8006732:	4413      	add	r3, r2
 8006734:	009b      	lsls	r3, r3, #2
 8006736:	440b      	add	r3, r1
 8006738:	3318      	adds	r3, #24
 800673a:	2200      	movs	r2, #0
 800673c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800673e:	78f9      	ldrb	r1, [r7, #3]
 8006740:	2300      	movs	r3, #0
 8006742:	2200      	movs	r2, #0
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f004 ff5a 	bl	800b5fe <USBD_LL_Transmit>
 800674a:	e01f      	b.n	800678c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	2200      	movs	r2, #0
 8006750:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800675a:	687a      	ldr	r2, [r7, #4]
 800675c:	33b0      	adds	r3, #176	; 0xb0
 800675e:	009b      	lsls	r3, r3, #2
 8006760:	4413      	add	r3, r2
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	691b      	ldr	r3, [r3, #16]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d010      	beq.n	800678c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	33b0      	adds	r3, #176	; 0xb0
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	4413      	add	r3, r2
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	691b      	ldr	r3, [r3, #16]
 800677c:	68ba      	ldr	r2, [r7, #8]
 800677e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006782:	68ba      	ldr	r2, [r7, #8]
 8006784:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006788:	78fa      	ldrb	r2, [r7, #3]
 800678a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800678c:	2300      	movs	r3, #0
}
 800678e:	4618      	mov	r0, r3
 8006790:	3710      	adds	r7, #16
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}

08006796 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006796:	b580      	push	{r7, lr}
 8006798:	b084      	sub	sp, #16
 800679a:	af00      	add	r7, sp, #0
 800679c:	6078      	str	r0, [r7, #4]
 800679e:	460b      	mov	r3, r1
 80067a0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	32b0      	adds	r2, #176	; 0xb0
 80067ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067b0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	32b0      	adds	r2, #176	; 0xb0
 80067bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d101      	bne.n	80067c8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80067c4:	2303      	movs	r3, #3
 80067c6:	e01a      	b.n	80067fe <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80067c8:	78fb      	ldrb	r3, [r7, #3]
 80067ca:	4619      	mov	r1, r3
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f004 ff58 	bl	800b682 <USBD_LL_GetRxDataSize>
 80067d2:	4602      	mov	r2, r0
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	33b0      	adds	r3, #176	; 0xb0
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	4413      	add	r3, r2
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	68db      	ldr	r3, [r3, #12]
 80067ec:	68fa      	ldr	r2, [r7, #12]
 80067ee:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80067f2:	68fa      	ldr	r2, [r7, #12]
 80067f4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80067f8:	4611      	mov	r1, r2
 80067fa:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80067fc:	2300      	movs	r3, #0
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3710      	adds	r7, #16
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}

08006806 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006806:	b580      	push	{r7, lr}
 8006808:	b084      	sub	sp, #16
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	32b0      	adds	r2, #176	; 0xb0
 8006818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800681c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d101      	bne.n	8006828 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006824:	2303      	movs	r3, #3
 8006826:	e025      	b.n	8006874 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800682e:	687a      	ldr	r2, [r7, #4]
 8006830:	33b0      	adds	r3, #176	; 0xb0
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	4413      	add	r3, r2
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d01a      	beq.n	8006872 <USBD_CDC_EP0_RxReady+0x6c>
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006842:	2bff      	cmp	r3, #255	; 0xff
 8006844:	d015      	beq.n	8006872 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	33b0      	adds	r3, #176	; 0xb0
 8006850:	009b      	lsls	r3, r3, #2
 8006852:	4413      	add	r3, r2
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	68fa      	ldr	r2, [r7, #12]
 800685a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800685e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006860:	68fa      	ldr	r2, [r7, #12]
 8006862:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006866:	b292      	uxth	r2, r2
 8006868:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	22ff      	movs	r2, #255	; 0xff
 800686e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006872:	2300      	movs	r3, #0
}
 8006874:	4618      	mov	r0, r3
 8006876:	3710      	adds	r7, #16
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b086      	sub	sp, #24
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006884:	2182      	movs	r1, #130	; 0x82
 8006886:	4818      	ldr	r0, [pc, #96]	; (80068e8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006888:	f000 fd4f 	bl	800732a <USBD_GetEpDesc>
 800688c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800688e:	2101      	movs	r1, #1
 8006890:	4815      	ldr	r0, [pc, #84]	; (80068e8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006892:	f000 fd4a 	bl	800732a <USBD_GetEpDesc>
 8006896:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006898:	2181      	movs	r1, #129	; 0x81
 800689a:	4813      	ldr	r0, [pc, #76]	; (80068e8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800689c:	f000 fd45 	bl	800732a <USBD_GetEpDesc>
 80068a0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d002      	beq.n	80068ae <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	2210      	movs	r2, #16
 80068ac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d006      	beq.n	80068c2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	2200      	movs	r2, #0
 80068b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068bc:	711a      	strb	r2, [r3, #4]
 80068be:	2200      	movs	r2, #0
 80068c0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d006      	beq.n	80068d6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	2200      	movs	r2, #0
 80068cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068d0:	711a      	strb	r2, [r3, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2243      	movs	r2, #67	; 0x43
 80068da:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80068dc:	4b02      	ldr	r3, [pc, #8]	; (80068e8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3718      	adds	r7, #24
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	bf00      	nop
 80068e8:	20000050 	.word	0x20000050

080068ec <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b086      	sub	sp, #24
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80068f4:	2182      	movs	r1, #130	; 0x82
 80068f6:	4818      	ldr	r0, [pc, #96]	; (8006958 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80068f8:	f000 fd17 	bl	800732a <USBD_GetEpDesc>
 80068fc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80068fe:	2101      	movs	r1, #1
 8006900:	4815      	ldr	r0, [pc, #84]	; (8006958 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006902:	f000 fd12 	bl	800732a <USBD_GetEpDesc>
 8006906:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006908:	2181      	movs	r1, #129	; 0x81
 800690a:	4813      	ldr	r0, [pc, #76]	; (8006958 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800690c:	f000 fd0d 	bl	800732a <USBD_GetEpDesc>
 8006910:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d002      	beq.n	800691e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	2210      	movs	r2, #16
 800691c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d006      	beq.n	8006932 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	2200      	movs	r2, #0
 8006928:	711a      	strb	r2, [r3, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	f042 0202 	orr.w	r2, r2, #2
 8006930:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d006      	beq.n	8006946 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2200      	movs	r2, #0
 800693c:	711a      	strb	r2, [r3, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	f042 0202 	orr.w	r2, r2, #2
 8006944:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2243      	movs	r2, #67	; 0x43
 800694a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800694c:	4b02      	ldr	r3, [pc, #8]	; (8006958 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800694e:	4618      	mov	r0, r3
 8006950:	3718      	adds	r7, #24
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
 8006956:	bf00      	nop
 8006958:	20000050 	.word	0x20000050

0800695c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b086      	sub	sp, #24
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006964:	2182      	movs	r1, #130	; 0x82
 8006966:	4818      	ldr	r0, [pc, #96]	; (80069c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006968:	f000 fcdf 	bl	800732a <USBD_GetEpDesc>
 800696c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800696e:	2101      	movs	r1, #1
 8006970:	4815      	ldr	r0, [pc, #84]	; (80069c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006972:	f000 fcda 	bl	800732a <USBD_GetEpDesc>
 8006976:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006978:	2181      	movs	r1, #129	; 0x81
 800697a:	4813      	ldr	r0, [pc, #76]	; (80069c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800697c:	f000 fcd5 	bl	800732a <USBD_GetEpDesc>
 8006980:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d002      	beq.n	800698e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	2210      	movs	r2, #16
 800698c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d006      	beq.n	80069a2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	2200      	movs	r2, #0
 8006998:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800699c:	711a      	strb	r2, [r3, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d006      	beq.n	80069b6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2200      	movs	r2, #0
 80069ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069b0:	711a      	strb	r2, [r3, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2243      	movs	r2, #67	; 0x43
 80069ba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80069bc:	4b02      	ldr	r3, [pc, #8]	; (80069c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3718      	adds	r7, #24
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
 80069c6:	bf00      	nop
 80069c8:	20000050 	.word	0x20000050

080069cc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b083      	sub	sp, #12
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	220a      	movs	r2, #10
 80069d8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80069da:	4b03      	ldr	r3, [pc, #12]	; (80069e8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80069dc:	4618      	mov	r0, r3
 80069de:	370c      	adds	r7, #12
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr
 80069e8:	2000000c 	.word	0x2000000c

080069ec <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b083      	sub	sp, #12
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d101      	bne.n	8006a00 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80069fc:	2303      	movs	r3, #3
 80069fe:	e009      	b.n	8006a14 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	33b0      	adds	r3, #176	; 0xb0
 8006a0a:	009b      	lsls	r3, r3, #2
 8006a0c:	4413      	add	r3, r2
 8006a0e:	683a      	ldr	r2, [r7, #0]
 8006a10:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006a12:	2300      	movs	r3, #0
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	370c      	adds	r7, #12
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr

08006a20 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b087      	sub	sp, #28
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	60f8      	str	r0, [r7, #12]
 8006a28:	60b9      	str	r1, [r7, #8]
 8006a2a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	32b0      	adds	r2, #176	; 0xb0
 8006a36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a3a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d101      	bne.n	8006a46 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006a42:	2303      	movs	r3, #3
 8006a44:	e008      	b.n	8006a58 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	68ba      	ldr	r2, [r7, #8]
 8006a4a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006a56:	2300      	movs	r3, #0
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	371c      	adds	r7, #28
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr

08006a64 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b085      	sub	sp, #20
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	32b0      	adds	r2, #176	; 0xb0
 8006a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a7c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d101      	bne.n	8006a88 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006a84:	2303      	movs	r3, #3
 8006a86:	e004      	b.n	8006a92 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	683a      	ldr	r2, [r7, #0]
 8006a8c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006a90:	2300      	movs	r3, #0
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3714      	adds	r7, #20
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr
	...

08006aa0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b084      	sub	sp, #16
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	32b0      	adds	r2, #176	; 0xb0
 8006ab2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ab6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	32b0      	adds	r2, #176	; 0xb0
 8006ac6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d101      	bne.n	8006ad2 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006ace:	2303      	movs	r3, #3
 8006ad0:	e025      	b.n	8006b1e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d11f      	bne.n	8006b1c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006ae4:	4b10      	ldr	r3, [pc, #64]	; (8006b28 <USBD_CDC_TransmitPacket+0x88>)
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	f003 020f 	and.w	r2, r3, #15
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	4613      	mov	r3, r2
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	4413      	add	r3, r2
 8006afa:	009b      	lsls	r3, r3, #2
 8006afc:	4403      	add	r3, r0
 8006afe:	3318      	adds	r3, #24
 8006b00:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006b02:	4b09      	ldr	r3, [pc, #36]	; (8006b28 <USBD_CDC_TransmitPacket+0x88>)
 8006b04:	7819      	ldrb	r1, [r3, #0]
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f004 fd73 	bl	800b5fe <USBD_LL_Transmit>

    ret = USBD_OK;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3710      	adds	r7, #16
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}
 8006b26:	bf00      	nop
 8006b28:	20000093 	.word	0x20000093

08006b2c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b084      	sub	sp, #16
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	32b0      	adds	r2, #176	; 0xb0
 8006b3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b42:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	32b0      	adds	r2, #176	; 0xb0
 8006b4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d101      	bne.n	8006b5a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006b56:	2303      	movs	r3, #3
 8006b58:	e018      	b.n	8006b8c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	7c1b      	ldrb	r3, [r3, #16]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d10a      	bne.n	8006b78 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006b62:	4b0c      	ldr	r3, [pc, #48]	; (8006b94 <USBD_CDC_ReceivePacket+0x68>)
 8006b64:	7819      	ldrb	r1, [r3, #0]
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f004 fd65 	bl	800b640 <USBD_LL_PrepareReceive>
 8006b76:	e008      	b.n	8006b8a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006b78:	4b06      	ldr	r3, [pc, #24]	; (8006b94 <USBD_CDC_ReceivePacket+0x68>)
 8006b7a:	7819      	ldrb	r1, [r3, #0]
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b82:	2340      	movs	r3, #64	; 0x40
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f004 fd5b 	bl	800b640 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006b8a:	2300      	movs	r3, #0
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3710      	adds	r7, #16
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}
 8006b94:	20000094 	.word	0x20000094

08006b98 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b086      	sub	sp, #24
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	60f8      	str	r0, [r7, #12]
 8006ba0:	60b9      	str	r1, [r7, #8]
 8006ba2:	4613      	mov	r3, r2
 8006ba4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d101      	bne.n	8006bb0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006bac:	2303      	movs	r3, #3
 8006bae:	e01f      	b.n	8006bf0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d003      	beq.n	8006bd6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	68ba      	ldr	r2, [r7, #8]
 8006bd2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2201      	movs	r2, #1
 8006bda:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	79fa      	ldrb	r2, [r7, #7]
 8006be2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006be4:	68f8      	ldr	r0, [r7, #12]
 8006be6:	f004 fbd5 	bl	800b394 <USBD_LL_Init>
 8006bea:	4603      	mov	r3, r0
 8006bec:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006bee:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3718      	adds	r7, #24
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}

08006bf8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b084      	sub	sp, #16
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006c02:	2300      	movs	r3, #0
 8006c04:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d101      	bne.n	8006c10 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006c0c:	2303      	movs	r3, #3
 8006c0e:	e025      	b.n	8006c5c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	683a      	ldr	r2, [r7, #0]
 8006c14:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	32ae      	adds	r2, #174	; 0xae
 8006c22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d00f      	beq.n	8006c4c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	32ae      	adds	r2, #174	; 0xae
 8006c36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c3c:	f107 020e 	add.w	r2, r7, #14
 8006c40:	4610      	mov	r0, r2
 8006c42:	4798      	blx	r3
 8006c44:	4602      	mov	r2, r0
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006c52:	1c5a      	adds	r2, r3, #1
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006c5a:	2300      	movs	r3, #0
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3710      	adds	r7, #16
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}

08006c64 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b082      	sub	sp, #8
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f004 fbdd 	bl	800b42c <USBD_LL_Start>
 8006c72:	4603      	mov	r3, r0
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3708      	adds	r7, #8
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b083      	sub	sp, #12
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006c84:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	370c      	adds	r7, #12
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr

08006c92 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c92:	b580      	push	{r7, lr}
 8006c94:	b084      	sub	sp, #16
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	6078      	str	r0, [r7, #4]
 8006c9a:	460b      	mov	r3, r1
 8006c9c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d009      	beq.n	8006cc0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	78fa      	ldrb	r2, [r7, #3]
 8006cb6:	4611      	mov	r1, r2
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	4798      	blx	r3
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3710      	adds	r7, #16
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}

08006cca <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006cca:	b580      	push	{r7, lr}
 8006ccc:	b084      	sub	sp, #16
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	6078      	str	r0, [r7, #4]
 8006cd2:	460b      	mov	r3, r1
 8006cd4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	78fa      	ldrb	r2, [r7, #3]
 8006ce4:	4611      	mov	r1, r2
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	4798      	blx	r3
 8006cea:	4603      	mov	r3, r0
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d001      	beq.n	8006cf4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006cf0:	2303      	movs	r3, #3
 8006cf2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3710      	adds	r7, #16
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}

08006cfe <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006cfe:	b580      	push	{r7, lr}
 8006d00:	b084      	sub	sp, #16
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	6078      	str	r0, [r7, #4]
 8006d06:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006d0e:	6839      	ldr	r1, [r7, #0]
 8006d10:	4618      	mov	r0, r3
 8006d12:	f001 f908 	bl	8007f26 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2201      	movs	r2, #1
 8006d1a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006d24:	461a      	mov	r2, r3
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006d32:	f003 031f 	and.w	r3, r3, #31
 8006d36:	2b02      	cmp	r3, #2
 8006d38:	d01a      	beq.n	8006d70 <USBD_LL_SetupStage+0x72>
 8006d3a:	2b02      	cmp	r3, #2
 8006d3c:	d822      	bhi.n	8006d84 <USBD_LL_SetupStage+0x86>
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d002      	beq.n	8006d48 <USBD_LL_SetupStage+0x4a>
 8006d42:	2b01      	cmp	r3, #1
 8006d44:	d00a      	beq.n	8006d5c <USBD_LL_SetupStage+0x5e>
 8006d46:	e01d      	b.n	8006d84 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006d4e:	4619      	mov	r1, r3
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f000 fb5f 	bl	8007414 <USBD_StdDevReq>
 8006d56:	4603      	mov	r3, r0
 8006d58:	73fb      	strb	r3, [r7, #15]
      break;
 8006d5a:	e020      	b.n	8006d9e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006d62:	4619      	mov	r1, r3
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f000 fbc7 	bl	80074f8 <USBD_StdItfReq>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	73fb      	strb	r3, [r7, #15]
      break;
 8006d6e:	e016      	b.n	8006d9e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006d76:	4619      	mov	r1, r3
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f000 fc29 	bl	80075d0 <USBD_StdEPReq>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	73fb      	strb	r3, [r7, #15]
      break;
 8006d82:	e00c      	b.n	8006d9e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006d8a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006d8e:	b2db      	uxtb	r3, r3
 8006d90:	4619      	mov	r1, r3
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f004 fbaa 	bl	800b4ec <USBD_LL_StallEP>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	73fb      	strb	r3, [r7, #15]
      break;
 8006d9c:	bf00      	nop
  }

  return ret;
 8006d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3710      	adds	r7, #16
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}

08006da8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b086      	sub	sp, #24
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	60f8      	str	r0, [r7, #12]
 8006db0:	460b      	mov	r3, r1
 8006db2:	607a      	str	r2, [r7, #4]
 8006db4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006db6:	2300      	movs	r3, #0
 8006db8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006dba:	7afb      	ldrb	r3, [r7, #11]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d16e      	bne.n	8006e9e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006dc6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006dce:	2b03      	cmp	r3, #3
 8006dd0:	f040 8098 	bne.w	8006f04 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	689a      	ldr	r2, [r3, #8]
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	68db      	ldr	r3, [r3, #12]
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	d913      	bls.n	8006e08 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	689a      	ldr	r2, [r3, #8]
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	68db      	ldr	r3, [r3, #12]
 8006de8:	1ad2      	subs	r2, r2, r3
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	68da      	ldr	r2, [r3, #12]
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	689b      	ldr	r3, [r3, #8]
 8006df6:	4293      	cmp	r3, r2
 8006df8:	bf28      	it	cs
 8006dfa:	4613      	movcs	r3, r2
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	6879      	ldr	r1, [r7, #4]
 8006e00:	68f8      	ldr	r0, [r7, #12]
 8006e02:	f001 f984 	bl	800810e <USBD_CtlContinueRx>
 8006e06:	e07d      	b.n	8006f04 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006e0e:	f003 031f 	and.w	r3, r3, #31
 8006e12:	2b02      	cmp	r3, #2
 8006e14:	d014      	beq.n	8006e40 <USBD_LL_DataOutStage+0x98>
 8006e16:	2b02      	cmp	r3, #2
 8006e18:	d81d      	bhi.n	8006e56 <USBD_LL_DataOutStage+0xae>
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d002      	beq.n	8006e24 <USBD_LL_DataOutStage+0x7c>
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d003      	beq.n	8006e2a <USBD_LL_DataOutStage+0x82>
 8006e22:	e018      	b.n	8006e56 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006e24:	2300      	movs	r3, #0
 8006e26:	75bb      	strb	r3, [r7, #22]
            break;
 8006e28:	e018      	b.n	8006e5c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006e30:	b2db      	uxtb	r3, r3
 8006e32:	4619      	mov	r1, r3
 8006e34:	68f8      	ldr	r0, [r7, #12]
 8006e36:	f000 fa5e 	bl	80072f6 <USBD_CoreFindIF>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	75bb      	strb	r3, [r7, #22]
            break;
 8006e3e:	e00d      	b.n	8006e5c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006e46:	b2db      	uxtb	r3, r3
 8006e48:	4619      	mov	r1, r3
 8006e4a:	68f8      	ldr	r0, [r7, #12]
 8006e4c:	f000 fa60 	bl	8007310 <USBD_CoreFindEP>
 8006e50:	4603      	mov	r3, r0
 8006e52:	75bb      	strb	r3, [r7, #22]
            break;
 8006e54:	e002      	b.n	8006e5c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006e56:	2300      	movs	r3, #0
 8006e58:	75bb      	strb	r3, [r7, #22]
            break;
 8006e5a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006e5c:	7dbb      	ldrb	r3, [r7, #22]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d119      	bne.n	8006e96 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e68:	b2db      	uxtb	r3, r3
 8006e6a:	2b03      	cmp	r3, #3
 8006e6c:	d113      	bne.n	8006e96 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006e6e:	7dba      	ldrb	r2, [r7, #22]
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	32ae      	adds	r2, #174	; 0xae
 8006e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e78:	691b      	ldr	r3, [r3, #16]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d00b      	beq.n	8006e96 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006e7e:	7dba      	ldrb	r2, [r7, #22]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006e86:	7dba      	ldrb	r2, [r7, #22]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	32ae      	adds	r2, #174	; 0xae
 8006e8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e90:	691b      	ldr	r3, [r3, #16]
 8006e92:	68f8      	ldr	r0, [r7, #12]
 8006e94:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006e96:	68f8      	ldr	r0, [r7, #12]
 8006e98:	f001 f94a 	bl	8008130 <USBD_CtlSendStatus>
 8006e9c:	e032      	b.n	8006f04 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006e9e:	7afb      	ldrb	r3, [r7, #11]
 8006ea0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	4619      	mov	r1, r3
 8006ea8:	68f8      	ldr	r0, [r7, #12]
 8006eaa:	f000 fa31 	bl	8007310 <USBD_CoreFindEP>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006eb2:	7dbb      	ldrb	r3, [r7, #22]
 8006eb4:	2bff      	cmp	r3, #255	; 0xff
 8006eb6:	d025      	beq.n	8006f04 <USBD_LL_DataOutStage+0x15c>
 8006eb8:	7dbb      	ldrb	r3, [r7, #22]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d122      	bne.n	8006f04 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	2b03      	cmp	r3, #3
 8006ec8:	d117      	bne.n	8006efa <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006eca:	7dba      	ldrb	r2, [r7, #22]
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	32ae      	adds	r2, #174	; 0xae
 8006ed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ed4:	699b      	ldr	r3, [r3, #24]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d00f      	beq.n	8006efa <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006eda:	7dba      	ldrb	r2, [r7, #22]
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006ee2:	7dba      	ldrb	r2, [r7, #22]
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	32ae      	adds	r2, #174	; 0xae
 8006ee8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eec:	699b      	ldr	r3, [r3, #24]
 8006eee:	7afa      	ldrb	r2, [r7, #11]
 8006ef0:	4611      	mov	r1, r2
 8006ef2:	68f8      	ldr	r0, [r7, #12]
 8006ef4:	4798      	blx	r3
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006efa:	7dfb      	ldrb	r3, [r7, #23]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d001      	beq.n	8006f04 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006f00:	7dfb      	ldrb	r3, [r7, #23]
 8006f02:	e000      	b.n	8006f06 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006f04:	2300      	movs	r3, #0
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3718      	adds	r7, #24
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}

08006f0e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006f0e:	b580      	push	{r7, lr}
 8006f10:	b086      	sub	sp, #24
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	60f8      	str	r0, [r7, #12]
 8006f16:	460b      	mov	r3, r1
 8006f18:	607a      	str	r2, [r7, #4]
 8006f1a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006f1c:	7afb      	ldrb	r3, [r7, #11]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d16f      	bne.n	8007002 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	3314      	adds	r3, #20
 8006f26:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f2e:	2b02      	cmp	r3, #2
 8006f30:	d15a      	bne.n	8006fe8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	689a      	ldr	r2, [r3, #8]
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	68db      	ldr	r3, [r3, #12]
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d914      	bls.n	8006f68 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	689a      	ldr	r2, [r3, #8]
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	68db      	ldr	r3, [r3, #12]
 8006f46:	1ad2      	subs	r2, r2, r3
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	461a      	mov	r2, r3
 8006f52:	6879      	ldr	r1, [r7, #4]
 8006f54:	68f8      	ldr	r0, [r7, #12]
 8006f56:	f001 f8ac 	bl	80080b2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	2100      	movs	r1, #0
 8006f60:	68f8      	ldr	r0, [r7, #12]
 8006f62:	f004 fb6d 	bl	800b640 <USBD_LL_PrepareReceive>
 8006f66:	e03f      	b.n	8006fe8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	68da      	ldr	r2, [r3, #12]
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d11c      	bne.n	8006fae <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	685a      	ldr	r2, [r3, #4]
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d316      	bcc.n	8006fae <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	685a      	ldr	r2, [r3, #4]
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d20f      	bcs.n	8006fae <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006f8e:	2200      	movs	r2, #0
 8006f90:	2100      	movs	r1, #0
 8006f92:	68f8      	ldr	r0, [r7, #12]
 8006f94:	f001 f88d 	bl	80080b2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	2100      	movs	r1, #0
 8006fa6:	68f8      	ldr	r0, [r7, #12]
 8006fa8:	f004 fb4a 	bl	800b640 <USBD_LL_PrepareReceive>
 8006fac:	e01c      	b.n	8006fe8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fb4:	b2db      	uxtb	r3, r3
 8006fb6:	2b03      	cmp	r3, #3
 8006fb8:	d10f      	bne.n	8006fda <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fc0:	68db      	ldr	r3, [r3, #12]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d009      	beq.n	8006fda <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fd4:	68db      	ldr	r3, [r3, #12]
 8006fd6:	68f8      	ldr	r0, [r7, #12]
 8006fd8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006fda:	2180      	movs	r1, #128	; 0x80
 8006fdc:	68f8      	ldr	r0, [r7, #12]
 8006fde:	f004 fa85 	bl	800b4ec <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006fe2:	68f8      	ldr	r0, [r7, #12]
 8006fe4:	f001 f8b7 	bl	8008156 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d03a      	beq.n	8007068 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006ff2:	68f8      	ldr	r0, [r7, #12]
 8006ff4:	f7ff fe42 	bl	8006c7c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007000:	e032      	b.n	8007068 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007002:	7afb      	ldrb	r3, [r7, #11]
 8007004:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007008:	b2db      	uxtb	r3, r3
 800700a:	4619      	mov	r1, r3
 800700c:	68f8      	ldr	r0, [r7, #12]
 800700e:	f000 f97f 	bl	8007310 <USBD_CoreFindEP>
 8007012:	4603      	mov	r3, r0
 8007014:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007016:	7dfb      	ldrb	r3, [r7, #23]
 8007018:	2bff      	cmp	r3, #255	; 0xff
 800701a:	d025      	beq.n	8007068 <USBD_LL_DataInStage+0x15a>
 800701c:	7dfb      	ldrb	r3, [r7, #23]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d122      	bne.n	8007068 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007028:	b2db      	uxtb	r3, r3
 800702a:	2b03      	cmp	r3, #3
 800702c:	d11c      	bne.n	8007068 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800702e:	7dfa      	ldrb	r2, [r7, #23]
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	32ae      	adds	r2, #174	; 0xae
 8007034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007038:	695b      	ldr	r3, [r3, #20]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d014      	beq.n	8007068 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800703e:	7dfa      	ldrb	r2, [r7, #23]
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007046:	7dfa      	ldrb	r2, [r7, #23]
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	32ae      	adds	r2, #174	; 0xae
 800704c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007050:	695b      	ldr	r3, [r3, #20]
 8007052:	7afa      	ldrb	r2, [r7, #11]
 8007054:	4611      	mov	r1, r2
 8007056:	68f8      	ldr	r0, [r7, #12]
 8007058:	4798      	blx	r3
 800705a:	4603      	mov	r3, r0
 800705c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800705e:	7dbb      	ldrb	r3, [r7, #22]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d001      	beq.n	8007068 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007064:	7dbb      	ldrb	r3, [r7, #22]
 8007066:	e000      	b.n	800706a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007068:	2300      	movs	r3, #0
}
 800706a:	4618      	mov	r0, r3
 800706c:	3718      	adds	r7, #24
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}

08007072 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007072:	b580      	push	{r7, lr}
 8007074:	b084      	sub	sp, #16
 8007076:	af00      	add	r7, sp, #0
 8007078:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800707a:	2300      	movs	r3, #0
 800707c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2201      	movs	r2, #1
 8007082:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2200      	movs	r2, #0
 8007092:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2200      	movs	r2, #0
 8007098:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2200      	movs	r2, #0
 80070a0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d014      	beq.n	80070d8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d00e      	beq.n	80070d8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	6852      	ldr	r2, [r2, #4]
 80070c6:	b2d2      	uxtb	r2, r2
 80070c8:	4611      	mov	r1, r2
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	4798      	blx	r3
 80070ce:	4603      	mov	r3, r0
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d001      	beq.n	80070d8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80070d4:	2303      	movs	r3, #3
 80070d6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80070d8:	2340      	movs	r3, #64	; 0x40
 80070da:	2200      	movs	r2, #0
 80070dc:	2100      	movs	r1, #0
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f004 f9bf 	bl	800b462 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2201      	movs	r2, #1
 80070e8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2240      	movs	r2, #64	; 0x40
 80070f0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80070f4:	2340      	movs	r3, #64	; 0x40
 80070f6:	2200      	movs	r2, #0
 80070f8:	2180      	movs	r1, #128	; 0x80
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f004 f9b1 	bl	800b462 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2201      	movs	r2, #1
 8007104:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2240      	movs	r2, #64	; 0x40
 800710a:	621a      	str	r2, [r3, #32]

  return ret;
 800710c:	7bfb      	ldrb	r3, [r7, #15]
}
 800710e:	4618      	mov	r0, r3
 8007110:	3710      	adds	r7, #16
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}

08007116 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007116:	b480      	push	{r7}
 8007118:	b083      	sub	sp, #12
 800711a:	af00      	add	r7, sp, #0
 800711c:	6078      	str	r0, [r7, #4]
 800711e:	460b      	mov	r3, r1
 8007120:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	78fa      	ldrb	r2, [r7, #3]
 8007126:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007128:	2300      	movs	r3, #0
}
 800712a:	4618      	mov	r0, r3
 800712c:	370c      	adds	r7, #12
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr

08007136 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007136:	b480      	push	{r7}
 8007138:	b083      	sub	sp, #12
 800713a:	af00      	add	r7, sp, #0
 800713c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007144:	b2da      	uxtb	r2, r3
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2204      	movs	r2, #4
 8007150:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007154:	2300      	movs	r3, #0
}
 8007156:	4618      	mov	r0, r3
 8007158:	370c      	adds	r7, #12
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr

08007162 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007162:	b480      	push	{r7}
 8007164:	b083      	sub	sp, #12
 8007166:	af00      	add	r7, sp, #0
 8007168:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007170:	b2db      	uxtb	r3, r3
 8007172:	2b04      	cmp	r3, #4
 8007174:	d106      	bne.n	8007184 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800717c:	b2da      	uxtb	r2, r3
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007184:	2300      	movs	r3, #0
}
 8007186:	4618      	mov	r0, r3
 8007188:	370c      	adds	r7, #12
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr

08007192 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007192:	b580      	push	{r7, lr}
 8007194:	b082      	sub	sp, #8
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071a0:	b2db      	uxtb	r3, r3
 80071a2:	2b03      	cmp	r3, #3
 80071a4:	d110      	bne.n	80071c8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d00b      	beq.n	80071c8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071b6:	69db      	ldr	r3, [r3, #28]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d005      	beq.n	80071c8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071c2:	69db      	ldr	r3, [r3, #28]
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80071c8:	2300      	movs	r3, #0
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3708      	adds	r7, #8
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}

080071d2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80071d2:	b580      	push	{r7, lr}
 80071d4:	b082      	sub	sp, #8
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	6078      	str	r0, [r7, #4]
 80071da:	460b      	mov	r3, r1
 80071dc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	32ae      	adds	r2, #174	; 0xae
 80071e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d101      	bne.n	80071f4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80071f0:	2303      	movs	r3, #3
 80071f2:	e01c      	b.n	800722e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	2b03      	cmp	r3, #3
 80071fe:	d115      	bne.n	800722c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	32ae      	adds	r2, #174	; 0xae
 800720a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800720e:	6a1b      	ldr	r3, [r3, #32]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d00b      	beq.n	800722c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	32ae      	adds	r2, #174	; 0xae
 800721e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007222:	6a1b      	ldr	r3, [r3, #32]
 8007224:	78fa      	ldrb	r2, [r7, #3]
 8007226:	4611      	mov	r1, r2
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800722c:	2300      	movs	r3, #0
}
 800722e:	4618      	mov	r0, r3
 8007230:	3708      	adds	r7, #8
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}

08007236 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007236:	b580      	push	{r7, lr}
 8007238:	b082      	sub	sp, #8
 800723a:	af00      	add	r7, sp, #0
 800723c:	6078      	str	r0, [r7, #4]
 800723e:	460b      	mov	r3, r1
 8007240:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	32ae      	adds	r2, #174	; 0xae
 800724c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d101      	bne.n	8007258 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007254:	2303      	movs	r3, #3
 8007256:	e01c      	b.n	8007292 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800725e:	b2db      	uxtb	r3, r3
 8007260:	2b03      	cmp	r3, #3
 8007262:	d115      	bne.n	8007290 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	32ae      	adds	r2, #174	; 0xae
 800726e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007274:	2b00      	cmp	r3, #0
 8007276:	d00b      	beq.n	8007290 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	32ae      	adds	r2, #174	; 0xae
 8007282:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007288:	78fa      	ldrb	r2, [r7, #3]
 800728a:	4611      	mov	r1, r2
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007290:	2300      	movs	r3, #0
}
 8007292:	4618      	mov	r0, r3
 8007294:	3708      	adds	r7, #8
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}

0800729a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800729a:	b480      	push	{r7}
 800729c:	b083      	sub	sp, #12
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80072a2:	2300      	movs	r3, #0
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	370c      	adds	r7, #12
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr

080072b0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b084      	sub	sp, #16
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80072b8:	2300      	movs	r3, #0
 80072ba:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2201      	movs	r2, #1
 80072c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d00e      	beq.n	80072ec <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	687a      	ldr	r2, [r7, #4]
 80072d8:	6852      	ldr	r2, [r2, #4]
 80072da:	b2d2      	uxtb	r2, r2
 80072dc:	4611      	mov	r1, r2
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	4798      	blx	r3
 80072e2:	4603      	mov	r3, r0
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d001      	beq.n	80072ec <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80072e8:	2303      	movs	r3, #3
 80072ea:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80072ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3710      	adds	r7, #16
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}

080072f6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80072f6:	b480      	push	{r7}
 80072f8:	b083      	sub	sp, #12
 80072fa:	af00      	add	r7, sp, #0
 80072fc:	6078      	str	r0, [r7, #4]
 80072fe:	460b      	mov	r3, r1
 8007300:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007302:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007304:	4618      	mov	r0, r3
 8007306:	370c      	adds	r7, #12
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	460b      	mov	r3, r1
 800731a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800731c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800731e:	4618      	mov	r0, r3
 8007320:	370c      	adds	r7, #12
 8007322:	46bd      	mov	sp, r7
 8007324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007328:	4770      	bx	lr

0800732a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800732a:	b580      	push	{r7, lr}
 800732c:	b086      	sub	sp, #24
 800732e:	af00      	add	r7, sp, #0
 8007330:	6078      	str	r0, [r7, #4]
 8007332:	460b      	mov	r3, r1
 8007334:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800733e:	2300      	movs	r3, #0
 8007340:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	885b      	ldrh	r3, [r3, #2]
 8007346:	b29a      	uxth	r2, r3
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	781b      	ldrb	r3, [r3, #0]
 800734c:	b29b      	uxth	r3, r3
 800734e:	429a      	cmp	r2, r3
 8007350:	d920      	bls.n	8007394 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	781b      	ldrb	r3, [r3, #0]
 8007356:	b29b      	uxth	r3, r3
 8007358:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800735a:	e013      	b.n	8007384 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800735c:	f107 030a 	add.w	r3, r7, #10
 8007360:	4619      	mov	r1, r3
 8007362:	6978      	ldr	r0, [r7, #20]
 8007364:	f000 f81b 	bl	800739e <USBD_GetNextDesc>
 8007368:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	785b      	ldrb	r3, [r3, #1]
 800736e:	2b05      	cmp	r3, #5
 8007370:	d108      	bne.n	8007384 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	789b      	ldrb	r3, [r3, #2]
 800737a:	78fa      	ldrb	r2, [r7, #3]
 800737c:	429a      	cmp	r2, r3
 800737e:	d008      	beq.n	8007392 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007380:	2300      	movs	r3, #0
 8007382:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	885b      	ldrh	r3, [r3, #2]
 8007388:	b29a      	uxth	r2, r3
 800738a:	897b      	ldrh	r3, [r7, #10]
 800738c:	429a      	cmp	r2, r3
 800738e:	d8e5      	bhi.n	800735c <USBD_GetEpDesc+0x32>
 8007390:	e000      	b.n	8007394 <USBD_GetEpDesc+0x6a>
          break;
 8007392:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007394:	693b      	ldr	r3, [r7, #16]
}
 8007396:	4618      	mov	r0, r3
 8007398:	3718      	adds	r7, #24
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}

0800739e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800739e:	b480      	push	{r7}
 80073a0:	b085      	sub	sp, #20
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	6078      	str	r0, [r7, #4]
 80073a6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	881a      	ldrh	r2, [r3, #0]
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	781b      	ldrb	r3, [r3, #0]
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	4413      	add	r3, r2
 80073b8:	b29a      	uxth	r2, r3
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	781b      	ldrb	r3, [r3, #0]
 80073c2:	461a      	mov	r2, r3
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	4413      	add	r3, r2
 80073c8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80073ca:	68fb      	ldr	r3, [r7, #12]
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3714      	adds	r7, #20
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr

080073d8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80073d8:	b480      	push	{r7}
 80073da:	b087      	sub	sp, #28
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	781b      	ldrb	r3, [r3, #0]
 80073e8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	3301      	adds	r3, #1
 80073ee:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	781b      	ldrb	r3, [r3, #0]
 80073f4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80073f6:	8a3b      	ldrh	r3, [r7, #16]
 80073f8:	021b      	lsls	r3, r3, #8
 80073fa:	b21a      	sxth	r2, r3
 80073fc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007400:	4313      	orrs	r3, r2
 8007402:	b21b      	sxth	r3, r3
 8007404:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007406:	89fb      	ldrh	r3, [r7, #14]
}
 8007408:	4618      	mov	r0, r3
 800740a:	371c      	adds	r7, #28
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr

08007414 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b084      	sub	sp, #16
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800741e:	2300      	movs	r3, #0
 8007420:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	781b      	ldrb	r3, [r3, #0]
 8007426:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800742a:	2b40      	cmp	r3, #64	; 0x40
 800742c:	d005      	beq.n	800743a <USBD_StdDevReq+0x26>
 800742e:	2b40      	cmp	r3, #64	; 0x40
 8007430:	d857      	bhi.n	80074e2 <USBD_StdDevReq+0xce>
 8007432:	2b00      	cmp	r3, #0
 8007434:	d00f      	beq.n	8007456 <USBD_StdDevReq+0x42>
 8007436:	2b20      	cmp	r3, #32
 8007438:	d153      	bne.n	80074e2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	32ae      	adds	r2, #174	; 0xae
 8007444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007448:	689b      	ldr	r3, [r3, #8]
 800744a:	6839      	ldr	r1, [r7, #0]
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	4798      	blx	r3
 8007450:	4603      	mov	r3, r0
 8007452:	73fb      	strb	r3, [r7, #15]
      break;
 8007454:	e04a      	b.n	80074ec <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	785b      	ldrb	r3, [r3, #1]
 800745a:	2b09      	cmp	r3, #9
 800745c:	d83b      	bhi.n	80074d6 <USBD_StdDevReq+0xc2>
 800745e:	a201      	add	r2, pc, #4	; (adr r2, 8007464 <USBD_StdDevReq+0x50>)
 8007460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007464:	080074b9 	.word	0x080074b9
 8007468:	080074cd 	.word	0x080074cd
 800746c:	080074d7 	.word	0x080074d7
 8007470:	080074c3 	.word	0x080074c3
 8007474:	080074d7 	.word	0x080074d7
 8007478:	08007497 	.word	0x08007497
 800747c:	0800748d 	.word	0x0800748d
 8007480:	080074d7 	.word	0x080074d7
 8007484:	080074af 	.word	0x080074af
 8007488:	080074a1 	.word	0x080074a1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800748c:	6839      	ldr	r1, [r7, #0]
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 fa3c 	bl	800790c <USBD_GetDescriptor>
          break;
 8007494:	e024      	b.n	80074e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007496:	6839      	ldr	r1, [r7, #0]
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f000 fba1 	bl	8007be0 <USBD_SetAddress>
          break;
 800749e:	e01f      	b.n	80074e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80074a0:	6839      	ldr	r1, [r7, #0]
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 fbe0 	bl	8007c68 <USBD_SetConfig>
 80074a8:	4603      	mov	r3, r0
 80074aa:	73fb      	strb	r3, [r7, #15]
          break;
 80074ac:	e018      	b.n	80074e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80074ae:	6839      	ldr	r1, [r7, #0]
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f000 fc83 	bl	8007dbc <USBD_GetConfig>
          break;
 80074b6:	e013      	b.n	80074e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80074b8:	6839      	ldr	r1, [r7, #0]
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f000 fcb4 	bl	8007e28 <USBD_GetStatus>
          break;
 80074c0:	e00e      	b.n	80074e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80074c2:	6839      	ldr	r1, [r7, #0]
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f000 fce3 	bl	8007e90 <USBD_SetFeature>
          break;
 80074ca:	e009      	b.n	80074e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80074cc:	6839      	ldr	r1, [r7, #0]
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f000 fd07 	bl	8007ee2 <USBD_ClrFeature>
          break;
 80074d4:	e004      	b.n	80074e0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80074d6:	6839      	ldr	r1, [r7, #0]
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f000 fd5e 	bl	8007f9a <USBD_CtlError>
          break;
 80074de:	bf00      	nop
      }
      break;
 80074e0:	e004      	b.n	80074ec <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80074e2:	6839      	ldr	r1, [r7, #0]
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f000 fd58 	bl	8007f9a <USBD_CtlError>
      break;
 80074ea:	bf00      	nop
  }

  return ret;
 80074ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3710      	adds	r7, #16
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}
 80074f6:	bf00      	nop

080074f8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b084      	sub	sp, #16
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007502:	2300      	movs	r3, #0
 8007504:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	781b      	ldrb	r3, [r3, #0]
 800750a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800750e:	2b40      	cmp	r3, #64	; 0x40
 8007510:	d005      	beq.n	800751e <USBD_StdItfReq+0x26>
 8007512:	2b40      	cmp	r3, #64	; 0x40
 8007514:	d852      	bhi.n	80075bc <USBD_StdItfReq+0xc4>
 8007516:	2b00      	cmp	r3, #0
 8007518:	d001      	beq.n	800751e <USBD_StdItfReq+0x26>
 800751a:	2b20      	cmp	r3, #32
 800751c:	d14e      	bne.n	80075bc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007524:	b2db      	uxtb	r3, r3
 8007526:	3b01      	subs	r3, #1
 8007528:	2b02      	cmp	r3, #2
 800752a:	d840      	bhi.n	80075ae <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	889b      	ldrh	r3, [r3, #4]
 8007530:	b2db      	uxtb	r3, r3
 8007532:	2b01      	cmp	r3, #1
 8007534:	d836      	bhi.n	80075a4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	889b      	ldrh	r3, [r3, #4]
 800753a:	b2db      	uxtb	r3, r3
 800753c:	4619      	mov	r1, r3
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f7ff fed9 	bl	80072f6 <USBD_CoreFindIF>
 8007544:	4603      	mov	r3, r0
 8007546:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007548:	7bbb      	ldrb	r3, [r7, #14]
 800754a:	2bff      	cmp	r3, #255	; 0xff
 800754c:	d01d      	beq.n	800758a <USBD_StdItfReq+0x92>
 800754e:	7bbb      	ldrb	r3, [r7, #14]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d11a      	bne.n	800758a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007554:	7bba      	ldrb	r2, [r7, #14]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	32ae      	adds	r2, #174	; 0xae
 800755a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800755e:	689b      	ldr	r3, [r3, #8]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d00f      	beq.n	8007584 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007564:	7bba      	ldrb	r2, [r7, #14]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800756c:	7bba      	ldrb	r2, [r7, #14]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	32ae      	adds	r2, #174	; 0xae
 8007572:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	6839      	ldr	r1, [r7, #0]
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	4798      	blx	r3
 800757e:	4603      	mov	r3, r0
 8007580:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007582:	e004      	b.n	800758e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007584:	2303      	movs	r3, #3
 8007586:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007588:	e001      	b.n	800758e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800758a:	2303      	movs	r3, #3
 800758c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	88db      	ldrh	r3, [r3, #6]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d110      	bne.n	80075b8 <USBD_StdItfReq+0xc0>
 8007596:	7bfb      	ldrb	r3, [r7, #15]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d10d      	bne.n	80075b8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f000 fdc7 	bl	8008130 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80075a2:	e009      	b.n	80075b8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80075a4:	6839      	ldr	r1, [r7, #0]
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 fcf7 	bl	8007f9a <USBD_CtlError>
          break;
 80075ac:	e004      	b.n	80075b8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80075ae:	6839      	ldr	r1, [r7, #0]
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f000 fcf2 	bl	8007f9a <USBD_CtlError>
          break;
 80075b6:	e000      	b.n	80075ba <USBD_StdItfReq+0xc2>
          break;
 80075b8:	bf00      	nop
      }
      break;
 80075ba:	e004      	b.n	80075c6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80075bc:	6839      	ldr	r1, [r7, #0]
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 fceb 	bl	8007f9a <USBD_CtlError>
      break;
 80075c4:	bf00      	nop
  }

  return ret;
 80075c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3710      	adds	r7, #16
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b084      	sub	sp, #16
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80075da:	2300      	movs	r3, #0
 80075dc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	889b      	ldrh	r3, [r3, #4]
 80075e2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	781b      	ldrb	r3, [r3, #0]
 80075e8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80075ec:	2b40      	cmp	r3, #64	; 0x40
 80075ee:	d007      	beq.n	8007600 <USBD_StdEPReq+0x30>
 80075f0:	2b40      	cmp	r3, #64	; 0x40
 80075f2:	f200 817f 	bhi.w	80078f4 <USBD_StdEPReq+0x324>
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d02a      	beq.n	8007650 <USBD_StdEPReq+0x80>
 80075fa:	2b20      	cmp	r3, #32
 80075fc:	f040 817a 	bne.w	80078f4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007600:	7bbb      	ldrb	r3, [r7, #14]
 8007602:	4619      	mov	r1, r3
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f7ff fe83 	bl	8007310 <USBD_CoreFindEP>
 800760a:	4603      	mov	r3, r0
 800760c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800760e:	7b7b      	ldrb	r3, [r7, #13]
 8007610:	2bff      	cmp	r3, #255	; 0xff
 8007612:	f000 8174 	beq.w	80078fe <USBD_StdEPReq+0x32e>
 8007616:	7b7b      	ldrb	r3, [r7, #13]
 8007618:	2b00      	cmp	r3, #0
 800761a:	f040 8170 	bne.w	80078fe <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800761e:	7b7a      	ldrb	r2, [r7, #13]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007626:	7b7a      	ldrb	r2, [r7, #13]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	32ae      	adds	r2, #174	; 0xae
 800762c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007630:	689b      	ldr	r3, [r3, #8]
 8007632:	2b00      	cmp	r3, #0
 8007634:	f000 8163 	beq.w	80078fe <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007638:	7b7a      	ldrb	r2, [r7, #13]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	32ae      	adds	r2, #174	; 0xae
 800763e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007642:	689b      	ldr	r3, [r3, #8]
 8007644:	6839      	ldr	r1, [r7, #0]
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	4798      	blx	r3
 800764a:	4603      	mov	r3, r0
 800764c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800764e:	e156      	b.n	80078fe <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	785b      	ldrb	r3, [r3, #1]
 8007654:	2b03      	cmp	r3, #3
 8007656:	d008      	beq.n	800766a <USBD_StdEPReq+0x9a>
 8007658:	2b03      	cmp	r3, #3
 800765a:	f300 8145 	bgt.w	80078e8 <USBD_StdEPReq+0x318>
 800765e:	2b00      	cmp	r3, #0
 8007660:	f000 809b 	beq.w	800779a <USBD_StdEPReq+0x1ca>
 8007664:	2b01      	cmp	r3, #1
 8007666:	d03c      	beq.n	80076e2 <USBD_StdEPReq+0x112>
 8007668:	e13e      	b.n	80078e8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007670:	b2db      	uxtb	r3, r3
 8007672:	2b02      	cmp	r3, #2
 8007674:	d002      	beq.n	800767c <USBD_StdEPReq+0xac>
 8007676:	2b03      	cmp	r3, #3
 8007678:	d016      	beq.n	80076a8 <USBD_StdEPReq+0xd8>
 800767a:	e02c      	b.n	80076d6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800767c:	7bbb      	ldrb	r3, [r7, #14]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d00d      	beq.n	800769e <USBD_StdEPReq+0xce>
 8007682:	7bbb      	ldrb	r3, [r7, #14]
 8007684:	2b80      	cmp	r3, #128	; 0x80
 8007686:	d00a      	beq.n	800769e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007688:	7bbb      	ldrb	r3, [r7, #14]
 800768a:	4619      	mov	r1, r3
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f003 ff2d 	bl	800b4ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007692:	2180      	movs	r1, #128	; 0x80
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f003 ff29 	bl	800b4ec <USBD_LL_StallEP>
 800769a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800769c:	e020      	b.n	80076e0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800769e:	6839      	ldr	r1, [r7, #0]
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f000 fc7a 	bl	8007f9a <USBD_CtlError>
              break;
 80076a6:	e01b      	b.n	80076e0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	885b      	ldrh	r3, [r3, #2]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d10e      	bne.n	80076ce <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80076b0:	7bbb      	ldrb	r3, [r7, #14]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d00b      	beq.n	80076ce <USBD_StdEPReq+0xfe>
 80076b6:	7bbb      	ldrb	r3, [r7, #14]
 80076b8:	2b80      	cmp	r3, #128	; 0x80
 80076ba:	d008      	beq.n	80076ce <USBD_StdEPReq+0xfe>
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	88db      	ldrh	r3, [r3, #6]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d104      	bne.n	80076ce <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80076c4:	7bbb      	ldrb	r3, [r7, #14]
 80076c6:	4619      	mov	r1, r3
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f003 ff0f 	bl	800b4ec <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 fd2e 	bl	8008130 <USBD_CtlSendStatus>

              break;
 80076d4:	e004      	b.n	80076e0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80076d6:	6839      	ldr	r1, [r7, #0]
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f000 fc5e 	bl	8007f9a <USBD_CtlError>
              break;
 80076de:	bf00      	nop
          }
          break;
 80076e0:	e107      	b.n	80078f2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076e8:	b2db      	uxtb	r3, r3
 80076ea:	2b02      	cmp	r3, #2
 80076ec:	d002      	beq.n	80076f4 <USBD_StdEPReq+0x124>
 80076ee:	2b03      	cmp	r3, #3
 80076f0:	d016      	beq.n	8007720 <USBD_StdEPReq+0x150>
 80076f2:	e04b      	b.n	800778c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80076f4:	7bbb      	ldrb	r3, [r7, #14]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d00d      	beq.n	8007716 <USBD_StdEPReq+0x146>
 80076fa:	7bbb      	ldrb	r3, [r7, #14]
 80076fc:	2b80      	cmp	r3, #128	; 0x80
 80076fe:	d00a      	beq.n	8007716 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007700:	7bbb      	ldrb	r3, [r7, #14]
 8007702:	4619      	mov	r1, r3
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f003 fef1 	bl	800b4ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800770a:	2180      	movs	r1, #128	; 0x80
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f003 feed 	bl	800b4ec <USBD_LL_StallEP>
 8007712:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007714:	e040      	b.n	8007798 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007716:	6839      	ldr	r1, [r7, #0]
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f000 fc3e 	bl	8007f9a <USBD_CtlError>
              break;
 800771e:	e03b      	b.n	8007798 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	885b      	ldrh	r3, [r3, #2]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d136      	bne.n	8007796 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007728:	7bbb      	ldrb	r3, [r7, #14]
 800772a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800772e:	2b00      	cmp	r3, #0
 8007730:	d004      	beq.n	800773c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007732:	7bbb      	ldrb	r3, [r7, #14]
 8007734:	4619      	mov	r1, r3
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f003 fef7 	bl	800b52a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f000 fcf7 	bl	8008130 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007742:	7bbb      	ldrb	r3, [r7, #14]
 8007744:	4619      	mov	r1, r3
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f7ff fde2 	bl	8007310 <USBD_CoreFindEP>
 800774c:	4603      	mov	r3, r0
 800774e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007750:	7b7b      	ldrb	r3, [r7, #13]
 8007752:	2bff      	cmp	r3, #255	; 0xff
 8007754:	d01f      	beq.n	8007796 <USBD_StdEPReq+0x1c6>
 8007756:	7b7b      	ldrb	r3, [r7, #13]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d11c      	bne.n	8007796 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800775c:	7b7a      	ldrb	r2, [r7, #13]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007764:	7b7a      	ldrb	r2, [r7, #13]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	32ae      	adds	r2, #174	; 0xae
 800776a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d010      	beq.n	8007796 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007774:	7b7a      	ldrb	r2, [r7, #13]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	32ae      	adds	r2, #174	; 0xae
 800777a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800777e:	689b      	ldr	r3, [r3, #8]
 8007780:	6839      	ldr	r1, [r7, #0]
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	4798      	blx	r3
 8007786:	4603      	mov	r3, r0
 8007788:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800778a:	e004      	b.n	8007796 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800778c:	6839      	ldr	r1, [r7, #0]
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f000 fc03 	bl	8007f9a <USBD_CtlError>
              break;
 8007794:	e000      	b.n	8007798 <USBD_StdEPReq+0x1c8>
              break;
 8007796:	bf00      	nop
          }
          break;
 8007798:	e0ab      	b.n	80078f2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077a0:	b2db      	uxtb	r3, r3
 80077a2:	2b02      	cmp	r3, #2
 80077a4:	d002      	beq.n	80077ac <USBD_StdEPReq+0x1dc>
 80077a6:	2b03      	cmp	r3, #3
 80077a8:	d032      	beq.n	8007810 <USBD_StdEPReq+0x240>
 80077aa:	e097      	b.n	80078dc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80077ac:	7bbb      	ldrb	r3, [r7, #14]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d007      	beq.n	80077c2 <USBD_StdEPReq+0x1f2>
 80077b2:	7bbb      	ldrb	r3, [r7, #14]
 80077b4:	2b80      	cmp	r3, #128	; 0x80
 80077b6:	d004      	beq.n	80077c2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80077b8:	6839      	ldr	r1, [r7, #0]
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f000 fbed 	bl	8007f9a <USBD_CtlError>
                break;
 80077c0:	e091      	b.n	80078e6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80077c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	da0b      	bge.n	80077e2 <USBD_StdEPReq+0x212>
 80077ca:	7bbb      	ldrb	r3, [r7, #14]
 80077cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80077d0:	4613      	mov	r3, r2
 80077d2:	009b      	lsls	r3, r3, #2
 80077d4:	4413      	add	r3, r2
 80077d6:	009b      	lsls	r3, r3, #2
 80077d8:	3310      	adds	r3, #16
 80077da:	687a      	ldr	r2, [r7, #4]
 80077dc:	4413      	add	r3, r2
 80077de:	3304      	adds	r3, #4
 80077e0:	e00b      	b.n	80077fa <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80077e2:	7bbb      	ldrb	r3, [r7, #14]
 80077e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80077e8:	4613      	mov	r3, r2
 80077ea:	009b      	lsls	r3, r3, #2
 80077ec:	4413      	add	r3, r2
 80077ee:	009b      	lsls	r3, r3, #2
 80077f0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80077f4:	687a      	ldr	r2, [r7, #4]
 80077f6:	4413      	add	r3, r2
 80077f8:	3304      	adds	r3, #4
 80077fa:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	2200      	movs	r2, #0
 8007800:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	2202      	movs	r2, #2
 8007806:	4619      	mov	r1, r3
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f000 fc37 	bl	800807c <USBD_CtlSendData>
              break;
 800780e:	e06a      	b.n	80078e6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007810:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007814:	2b00      	cmp	r3, #0
 8007816:	da11      	bge.n	800783c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007818:	7bbb      	ldrb	r3, [r7, #14]
 800781a:	f003 020f 	and.w	r2, r3, #15
 800781e:	6879      	ldr	r1, [r7, #4]
 8007820:	4613      	mov	r3, r2
 8007822:	009b      	lsls	r3, r3, #2
 8007824:	4413      	add	r3, r2
 8007826:	009b      	lsls	r3, r3, #2
 8007828:	440b      	add	r3, r1
 800782a:	3324      	adds	r3, #36	; 0x24
 800782c:	881b      	ldrh	r3, [r3, #0]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d117      	bne.n	8007862 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007832:	6839      	ldr	r1, [r7, #0]
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f000 fbb0 	bl	8007f9a <USBD_CtlError>
                  break;
 800783a:	e054      	b.n	80078e6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800783c:	7bbb      	ldrb	r3, [r7, #14]
 800783e:	f003 020f 	and.w	r2, r3, #15
 8007842:	6879      	ldr	r1, [r7, #4]
 8007844:	4613      	mov	r3, r2
 8007846:	009b      	lsls	r3, r3, #2
 8007848:	4413      	add	r3, r2
 800784a:	009b      	lsls	r3, r3, #2
 800784c:	440b      	add	r3, r1
 800784e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007852:	881b      	ldrh	r3, [r3, #0]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d104      	bne.n	8007862 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007858:	6839      	ldr	r1, [r7, #0]
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f000 fb9d 	bl	8007f9a <USBD_CtlError>
                  break;
 8007860:	e041      	b.n	80078e6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007862:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007866:	2b00      	cmp	r3, #0
 8007868:	da0b      	bge.n	8007882 <USBD_StdEPReq+0x2b2>
 800786a:	7bbb      	ldrb	r3, [r7, #14]
 800786c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007870:	4613      	mov	r3, r2
 8007872:	009b      	lsls	r3, r3, #2
 8007874:	4413      	add	r3, r2
 8007876:	009b      	lsls	r3, r3, #2
 8007878:	3310      	adds	r3, #16
 800787a:	687a      	ldr	r2, [r7, #4]
 800787c:	4413      	add	r3, r2
 800787e:	3304      	adds	r3, #4
 8007880:	e00b      	b.n	800789a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007882:	7bbb      	ldrb	r3, [r7, #14]
 8007884:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007888:	4613      	mov	r3, r2
 800788a:	009b      	lsls	r3, r3, #2
 800788c:	4413      	add	r3, r2
 800788e:	009b      	lsls	r3, r3, #2
 8007890:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007894:	687a      	ldr	r2, [r7, #4]
 8007896:	4413      	add	r3, r2
 8007898:	3304      	adds	r3, #4
 800789a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800789c:	7bbb      	ldrb	r3, [r7, #14]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d002      	beq.n	80078a8 <USBD_StdEPReq+0x2d8>
 80078a2:	7bbb      	ldrb	r3, [r7, #14]
 80078a4:	2b80      	cmp	r3, #128	; 0x80
 80078a6:	d103      	bne.n	80078b0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	2200      	movs	r2, #0
 80078ac:	601a      	str	r2, [r3, #0]
 80078ae:	e00e      	b.n	80078ce <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80078b0:	7bbb      	ldrb	r3, [r7, #14]
 80078b2:	4619      	mov	r1, r3
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f003 fe57 	bl	800b568 <USBD_LL_IsStallEP>
 80078ba:	4603      	mov	r3, r0
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d003      	beq.n	80078c8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	2201      	movs	r2, #1
 80078c4:	601a      	str	r2, [r3, #0]
 80078c6:	e002      	b.n	80078ce <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	2200      	movs	r2, #0
 80078cc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	2202      	movs	r2, #2
 80078d2:	4619      	mov	r1, r3
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f000 fbd1 	bl	800807c <USBD_CtlSendData>
              break;
 80078da:	e004      	b.n	80078e6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80078dc:	6839      	ldr	r1, [r7, #0]
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f000 fb5b 	bl	8007f9a <USBD_CtlError>
              break;
 80078e4:	bf00      	nop
          }
          break;
 80078e6:	e004      	b.n	80078f2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80078e8:	6839      	ldr	r1, [r7, #0]
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 fb55 	bl	8007f9a <USBD_CtlError>
          break;
 80078f0:	bf00      	nop
      }
      break;
 80078f2:	e005      	b.n	8007900 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80078f4:	6839      	ldr	r1, [r7, #0]
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 fb4f 	bl	8007f9a <USBD_CtlError>
      break;
 80078fc:	e000      	b.n	8007900 <USBD_StdEPReq+0x330>
      break;
 80078fe:	bf00      	nop
  }

  return ret;
 8007900:	7bfb      	ldrb	r3, [r7, #15]
}
 8007902:	4618      	mov	r0, r3
 8007904:	3710      	adds	r7, #16
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}
	...

0800790c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b084      	sub	sp, #16
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007916:	2300      	movs	r3, #0
 8007918:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800791a:	2300      	movs	r3, #0
 800791c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800791e:	2300      	movs	r3, #0
 8007920:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	885b      	ldrh	r3, [r3, #2]
 8007926:	0a1b      	lsrs	r3, r3, #8
 8007928:	b29b      	uxth	r3, r3
 800792a:	3b01      	subs	r3, #1
 800792c:	2b06      	cmp	r3, #6
 800792e:	f200 8128 	bhi.w	8007b82 <USBD_GetDescriptor+0x276>
 8007932:	a201      	add	r2, pc, #4	; (adr r2, 8007938 <USBD_GetDescriptor+0x2c>)
 8007934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007938:	08007955 	.word	0x08007955
 800793c:	0800796d 	.word	0x0800796d
 8007940:	080079ad 	.word	0x080079ad
 8007944:	08007b83 	.word	0x08007b83
 8007948:	08007b83 	.word	0x08007b83
 800794c:	08007b23 	.word	0x08007b23
 8007950:	08007b4f 	.word	0x08007b4f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	687a      	ldr	r2, [r7, #4]
 800795e:	7c12      	ldrb	r2, [r2, #16]
 8007960:	f107 0108 	add.w	r1, r7, #8
 8007964:	4610      	mov	r0, r2
 8007966:	4798      	blx	r3
 8007968:	60f8      	str	r0, [r7, #12]
      break;
 800796a:	e112      	b.n	8007b92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	7c1b      	ldrb	r3, [r3, #16]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d10d      	bne.n	8007990 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800797a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800797c:	f107 0208 	add.w	r2, r7, #8
 8007980:	4610      	mov	r0, r2
 8007982:	4798      	blx	r3
 8007984:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	3301      	adds	r3, #1
 800798a:	2202      	movs	r2, #2
 800798c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800798e:	e100      	b.n	8007b92 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007998:	f107 0208 	add.w	r2, r7, #8
 800799c:	4610      	mov	r0, r2
 800799e:	4798      	blx	r3
 80079a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	3301      	adds	r3, #1
 80079a6:	2202      	movs	r2, #2
 80079a8:	701a      	strb	r2, [r3, #0]
      break;
 80079aa:	e0f2      	b.n	8007b92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	885b      	ldrh	r3, [r3, #2]
 80079b0:	b2db      	uxtb	r3, r3
 80079b2:	2b05      	cmp	r3, #5
 80079b4:	f200 80ac 	bhi.w	8007b10 <USBD_GetDescriptor+0x204>
 80079b8:	a201      	add	r2, pc, #4	; (adr r2, 80079c0 <USBD_GetDescriptor+0xb4>)
 80079ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079be:	bf00      	nop
 80079c0:	080079d9 	.word	0x080079d9
 80079c4:	08007a0d 	.word	0x08007a0d
 80079c8:	08007a41 	.word	0x08007a41
 80079cc:	08007a75 	.word	0x08007a75
 80079d0:	08007aa9 	.word	0x08007aa9
 80079d4:	08007add 	.word	0x08007add
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d00b      	beq.n	80079fc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	687a      	ldr	r2, [r7, #4]
 80079ee:	7c12      	ldrb	r2, [r2, #16]
 80079f0:	f107 0108 	add.w	r1, r7, #8
 80079f4:	4610      	mov	r0, r2
 80079f6:	4798      	blx	r3
 80079f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079fa:	e091      	b.n	8007b20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079fc:	6839      	ldr	r1, [r7, #0]
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f000 facb 	bl	8007f9a <USBD_CtlError>
            err++;
 8007a04:	7afb      	ldrb	r3, [r7, #11]
 8007a06:	3301      	adds	r3, #1
 8007a08:	72fb      	strb	r3, [r7, #11]
          break;
 8007a0a:	e089      	b.n	8007b20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a12:	689b      	ldr	r3, [r3, #8]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d00b      	beq.n	8007a30 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a1e:	689b      	ldr	r3, [r3, #8]
 8007a20:	687a      	ldr	r2, [r7, #4]
 8007a22:	7c12      	ldrb	r2, [r2, #16]
 8007a24:	f107 0108 	add.w	r1, r7, #8
 8007a28:	4610      	mov	r0, r2
 8007a2a:	4798      	blx	r3
 8007a2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a2e:	e077      	b.n	8007b20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a30:	6839      	ldr	r1, [r7, #0]
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f000 fab1 	bl	8007f9a <USBD_CtlError>
            err++;
 8007a38:	7afb      	ldrb	r3, [r7, #11]
 8007a3a:	3301      	adds	r3, #1
 8007a3c:	72fb      	strb	r3, [r7, #11]
          break;
 8007a3e:	e06f      	b.n	8007b20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a46:	68db      	ldr	r3, [r3, #12]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d00b      	beq.n	8007a64 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a52:	68db      	ldr	r3, [r3, #12]
 8007a54:	687a      	ldr	r2, [r7, #4]
 8007a56:	7c12      	ldrb	r2, [r2, #16]
 8007a58:	f107 0108 	add.w	r1, r7, #8
 8007a5c:	4610      	mov	r0, r2
 8007a5e:	4798      	blx	r3
 8007a60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a62:	e05d      	b.n	8007b20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a64:	6839      	ldr	r1, [r7, #0]
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 fa97 	bl	8007f9a <USBD_CtlError>
            err++;
 8007a6c:	7afb      	ldrb	r3, [r7, #11]
 8007a6e:	3301      	adds	r3, #1
 8007a70:	72fb      	strb	r3, [r7, #11]
          break;
 8007a72:	e055      	b.n	8007b20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a7a:	691b      	ldr	r3, [r3, #16]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d00b      	beq.n	8007a98 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a86:	691b      	ldr	r3, [r3, #16]
 8007a88:	687a      	ldr	r2, [r7, #4]
 8007a8a:	7c12      	ldrb	r2, [r2, #16]
 8007a8c:	f107 0108 	add.w	r1, r7, #8
 8007a90:	4610      	mov	r0, r2
 8007a92:	4798      	blx	r3
 8007a94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a96:	e043      	b.n	8007b20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a98:	6839      	ldr	r1, [r7, #0]
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f000 fa7d 	bl	8007f9a <USBD_CtlError>
            err++;
 8007aa0:	7afb      	ldrb	r3, [r7, #11]
 8007aa2:	3301      	adds	r3, #1
 8007aa4:	72fb      	strb	r3, [r7, #11]
          break;
 8007aa6:	e03b      	b.n	8007b20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007aae:	695b      	ldr	r3, [r3, #20]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d00b      	beq.n	8007acc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007aba:	695b      	ldr	r3, [r3, #20]
 8007abc:	687a      	ldr	r2, [r7, #4]
 8007abe:	7c12      	ldrb	r2, [r2, #16]
 8007ac0:	f107 0108 	add.w	r1, r7, #8
 8007ac4:	4610      	mov	r0, r2
 8007ac6:	4798      	blx	r3
 8007ac8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007aca:	e029      	b.n	8007b20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007acc:	6839      	ldr	r1, [r7, #0]
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f000 fa63 	bl	8007f9a <USBD_CtlError>
            err++;
 8007ad4:	7afb      	ldrb	r3, [r7, #11]
 8007ad6:	3301      	adds	r3, #1
 8007ad8:	72fb      	strb	r3, [r7, #11]
          break;
 8007ada:	e021      	b.n	8007b20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ae2:	699b      	ldr	r3, [r3, #24]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d00b      	beq.n	8007b00 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007aee:	699b      	ldr	r3, [r3, #24]
 8007af0:	687a      	ldr	r2, [r7, #4]
 8007af2:	7c12      	ldrb	r2, [r2, #16]
 8007af4:	f107 0108 	add.w	r1, r7, #8
 8007af8:	4610      	mov	r0, r2
 8007afa:	4798      	blx	r3
 8007afc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007afe:	e00f      	b.n	8007b20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b00:	6839      	ldr	r1, [r7, #0]
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f000 fa49 	bl	8007f9a <USBD_CtlError>
            err++;
 8007b08:	7afb      	ldrb	r3, [r7, #11]
 8007b0a:	3301      	adds	r3, #1
 8007b0c:	72fb      	strb	r3, [r7, #11]
          break;
 8007b0e:	e007      	b.n	8007b20 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007b10:	6839      	ldr	r1, [r7, #0]
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f000 fa41 	bl	8007f9a <USBD_CtlError>
          err++;
 8007b18:	7afb      	ldrb	r3, [r7, #11]
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007b1e:	bf00      	nop
      }
      break;
 8007b20:	e037      	b.n	8007b92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	7c1b      	ldrb	r3, [r3, #16]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d109      	bne.n	8007b3e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b32:	f107 0208 	add.w	r2, r7, #8
 8007b36:	4610      	mov	r0, r2
 8007b38:	4798      	blx	r3
 8007b3a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b3c:	e029      	b.n	8007b92 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007b3e:	6839      	ldr	r1, [r7, #0]
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f000 fa2a 	bl	8007f9a <USBD_CtlError>
        err++;
 8007b46:	7afb      	ldrb	r3, [r7, #11]
 8007b48:	3301      	adds	r3, #1
 8007b4a:	72fb      	strb	r3, [r7, #11]
      break;
 8007b4c:	e021      	b.n	8007b92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	7c1b      	ldrb	r3, [r3, #16]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d10d      	bne.n	8007b72 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b5e:	f107 0208 	add.w	r2, r7, #8
 8007b62:	4610      	mov	r0, r2
 8007b64:	4798      	blx	r3
 8007b66:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	3301      	adds	r3, #1
 8007b6c:	2207      	movs	r2, #7
 8007b6e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b70:	e00f      	b.n	8007b92 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007b72:	6839      	ldr	r1, [r7, #0]
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f000 fa10 	bl	8007f9a <USBD_CtlError>
        err++;
 8007b7a:	7afb      	ldrb	r3, [r7, #11]
 8007b7c:	3301      	adds	r3, #1
 8007b7e:	72fb      	strb	r3, [r7, #11]
      break;
 8007b80:	e007      	b.n	8007b92 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007b82:	6839      	ldr	r1, [r7, #0]
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f000 fa08 	bl	8007f9a <USBD_CtlError>
      err++;
 8007b8a:	7afb      	ldrb	r3, [r7, #11]
 8007b8c:	3301      	adds	r3, #1
 8007b8e:	72fb      	strb	r3, [r7, #11]
      break;
 8007b90:	bf00      	nop
  }

  if (err != 0U)
 8007b92:	7afb      	ldrb	r3, [r7, #11]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d11e      	bne.n	8007bd6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	88db      	ldrh	r3, [r3, #6]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d016      	beq.n	8007bce <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007ba0:	893b      	ldrh	r3, [r7, #8]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d00e      	beq.n	8007bc4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	88da      	ldrh	r2, [r3, #6]
 8007baa:	893b      	ldrh	r3, [r7, #8]
 8007bac:	4293      	cmp	r3, r2
 8007bae:	bf28      	it	cs
 8007bb0:	4613      	movcs	r3, r2
 8007bb2:	b29b      	uxth	r3, r3
 8007bb4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007bb6:	893b      	ldrh	r3, [r7, #8]
 8007bb8:	461a      	mov	r2, r3
 8007bba:	68f9      	ldr	r1, [r7, #12]
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f000 fa5d 	bl	800807c <USBD_CtlSendData>
 8007bc2:	e009      	b.n	8007bd8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007bc4:	6839      	ldr	r1, [r7, #0]
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 f9e7 	bl	8007f9a <USBD_CtlError>
 8007bcc:	e004      	b.n	8007bd8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f000 faae 	bl	8008130 <USBD_CtlSendStatus>
 8007bd4:	e000      	b.n	8007bd8 <USBD_GetDescriptor+0x2cc>
    return;
 8007bd6:	bf00      	nop
  }
}
 8007bd8:	3710      	adds	r7, #16
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}
 8007bde:	bf00      	nop

08007be0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b084      	sub	sp, #16
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
 8007be8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	889b      	ldrh	r3, [r3, #4]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d131      	bne.n	8007c56 <USBD_SetAddress+0x76>
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	88db      	ldrh	r3, [r3, #6]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d12d      	bne.n	8007c56 <USBD_SetAddress+0x76>
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	885b      	ldrh	r3, [r3, #2]
 8007bfe:	2b7f      	cmp	r3, #127	; 0x7f
 8007c00:	d829      	bhi.n	8007c56 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	885b      	ldrh	r3, [r3, #2]
 8007c06:	b2db      	uxtb	r3, r3
 8007c08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c0c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c14:	b2db      	uxtb	r3, r3
 8007c16:	2b03      	cmp	r3, #3
 8007c18:	d104      	bne.n	8007c24 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007c1a:	6839      	ldr	r1, [r7, #0]
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f000 f9bc 	bl	8007f9a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c22:	e01d      	b.n	8007c60 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	7bfa      	ldrb	r2, [r7, #15]
 8007c28:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007c2c:	7bfb      	ldrb	r3, [r7, #15]
 8007c2e:	4619      	mov	r1, r3
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f003 fcc5 	bl	800b5c0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f000 fa7a 	bl	8008130 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007c3c:	7bfb      	ldrb	r3, [r7, #15]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d004      	beq.n	8007c4c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2202      	movs	r2, #2
 8007c46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c4a:	e009      	b.n	8007c60 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2201      	movs	r2, #1
 8007c50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c54:	e004      	b.n	8007c60 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007c56:	6839      	ldr	r1, [r7, #0]
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f000 f99e 	bl	8007f9a <USBD_CtlError>
  }
}
 8007c5e:	bf00      	nop
 8007c60:	bf00      	nop
 8007c62:	3710      	adds	r7, #16
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b084      	sub	sp, #16
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c72:	2300      	movs	r3, #0
 8007c74:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	885b      	ldrh	r3, [r3, #2]
 8007c7a:	b2da      	uxtb	r2, r3
 8007c7c:	4b4e      	ldr	r3, [pc, #312]	; (8007db8 <USBD_SetConfig+0x150>)
 8007c7e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007c80:	4b4d      	ldr	r3, [pc, #308]	; (8007db8 <USBD_SetConfig+0x150>)
 8007c82:	781b      	ldrb	r3, [r3, #0]
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	d905      	bls.n	8007c94 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007c88:	6839      	ldr	r1, [r7, #0]
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 f985 	bl	8007f9a <USBD_CtlError>
    return USBD_FAIL;
 8007c90:	2303      	movs	r3, #3
 8007c92:	e08c      	b.n	8007dae <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	2b02      	cmp	r3, #2
 8007c9e:	d002      	beq.n	8007ca6 <USBD_SetConfig+0x3e>
 8007ca0:	2b03      	cmp	r3, #3
 8007ca2:	d029      	beq.n	8007cf8 <USBD_SetConfig+0x90>
 8007ca4:	e075      	b.n	8007d92 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007ca6:	4b44      	ldr	r3, [pc, #272]	; (8007db8 <USBD_SetConfig+0x150>)
 8007ca8:	781b      	ldrb	r3, [r3, #0]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d020      	beq.n	8007cf0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007cae:	4b42      	ldr	r3, [pc, #264]	; (8007db8 <USBD_SetConfig+0x150>)
 8007cb0:	781b      	ldrb	r3, [r3, #0]
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007cb8:	4b3f      	ldr	r3, [pc, #252]	; (8007db8 <USBD_SetConfig+0x150>)
 8007cba:	781b      	ldrb	r3, [r3, #0]
 8007cbc:	4619      	mov	r1, r3
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f7fe ffe7 	bl	8006c92 <USBD_SetClassConfig>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007cc8:	7bfb      	ldrb	r3, [r7, #15]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d008      	beq.n	8007ce0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007cce:	6839      	ldr	r1, [r7, #0]
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f000 f962 	bl	8007f9a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2202      	movs	r2, #2
 8007cda:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007cde:	e065      	b.n	8007dac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f000 fa25 	bl	8008130 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2203      	movs	r2, #3
 8007cea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007cee:	e05d      	b.n	8007dac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f000 fa1d 	bl	8008130 <USBD_CtlSendStatus>
      break;
 8007cf6:	e059      	b.n	8007dac <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007cf8:	4b2f      	ldr	r3, [pc, #188]	; (8007db8 <USBD_SetConfig+0x150>)
 8007cfa:	781b      	ldrb	r3, [r3, #0]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d112      	bne.n	8007d26 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2202      	movs	r2, #2
 8007d04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007d08:	4b2b      	ldr	r3, [pc, #172]	; (8007db8 <USBD_SetConfig+0x150>)
 8007d0a:	781b      	ldrb	r3, [r3, #0]
 8007d0c:	461a      	mov	r2, r3
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007d12:	4b29      	ldr	r3, [pc, #164]	; (8007db8 <USBD_SetConfig+0x150>)
 8007d14:	781b      	ldrb	r3, [r3, #0]
 8007d16:	4619      	mov	r1, r3
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f7fe ffd6 	bl	8006cca <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 fa06 	bl	8008130 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007d24:	e042      	b.n	8007dac <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007d26:	4b24      	ldr	r3, [pc, #144]	; (8007db8 <USBD_SetConfig+0x150>)
 8007d28:	781b      	ldrb	r3, [r3, #0]
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d02a      	beq.n	8007d8a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	b2db      	uxtb	r3, r3
 8007d3a:	4619      	mov	r1, r3
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f7fe ffc4 	bl	8006cca <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007d42:	4b1d      	ldr	r3, [pc, #116]	; (8007db8 <USBD_SetConfig+0x150>)
 8007d44:	781b      	ldrb	r3, [r3, #0]
 8007d46:	461a      	mov	r2, r3
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007d4c:	4b1a      	ldr	r3, [pc, #104]	; (8007db8 <USBD_SetConfig+0x150>)
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	4619      	mov	r1, r3
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f7fe ff9d 	bl	8006c92 <USBD_SetClassConfig>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007d5c:	7bfb      	ldrb	r3, [r7, #15]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d00f      	beq.n	8007d82 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007d62:	6839      	ldr	r1, [r7, #0]
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f000 f918 	bl	8007f9a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	b2db      	uxtb	r3, r3
 8007d70:	4619      	mov	r1, r3
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f7fe ffa9 	bl	8006cca <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2202      	movs	r2, #2
 8007d7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007d80:	e014      	b.n	8007dac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f000 f9d4 	bl	8008130 <USBD_CtlSendStatus>
      break;
 8007d88:	e010      	b.n	8007dac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f000 f9d0 	bl	8008130 <USBD_CtlSendStatus>
      break;
 8007d90:	e00c      	b.n	8007dac <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007d92:	6839      	ldr	r1, [r7, #0]
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f000 f900 	bl	8007f9a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007d9a:	4b07      	ldr	r3, [pc, #28]	; (8007db8 <USBD_SetConfig+0x150>)
 8007d9c:	781b      	ldrb	r3, [r3, #0]
 8007d9e:	4619      	mov	r1, r3
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f7fe ff92 	bl	8006cca <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007da6:	2303      	movs	r3, #3
 8007da8:	73fb      	strb	r3, [r7, #15]
      break;
 8007daa:	bf00      	nop
  }

  return ret;
 8007dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3710      	adds	r7, #16
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}
 8007db6:	bf00      	nop
 8007db8:	20000248 	.word	0x20000248

08007dbc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b082      	sub	sp, #8
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
 8007dc4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	88db      	ldrh	r3, [r3, #6]
 8007dca:	2b01      	cmp	r3, #1
 8007dcc:	d004      	beq.n	8007dd8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007dce:	6839      	ldr	r1, [r7, #0]
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f000 f8e2 	bl	8007f9a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007dd6:	e023      	b.n	8007e20 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dde:	b2db      	uxtb	r3, r3
 8007de0:	2b02      	cmp	r3, #2
 8007de2:	dc02      	bgt.n	8007dea <USBD_GetConfig+0x2e>
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	dc03      	bgt.n	8007df0 <USBD_GetConfig+0x34>
 8007de8:	e015      	b.n	8007e16 <USBD_GetConfig+0x5a>
 8007dea:	2b03      	cmp	r3, #3
 8007dec:	d00b      	beq.n	8007e06 <USBD_GetConfig+0x4a>
 8007dee:	e012      	b.n	8007e16 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2200      	movs	r2, #0
 8007df4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	3308      	adds	r3, #8
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	4619      	mov	r1, r3
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f000 f93c 	bl	800807c <USBD_CtlSendData>
        break;
 8007e04:	e00c      	b.n	8007e20 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	3304      	adds	r3, #4
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f000 f934 	bl	800807c <USBD_CtlSendData>
        break;
 8007e14:	e004      	b.n	8007e20 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007e16:	6839      	ldr	r1, [r7, #0]
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f000 f8be 	bl	8007f9a <USBD_CtlError>
        break;
 8007e1e:	bf00      	nop
}
 8007e20:	bf00      	nop
 8007e22:	3708      	adds	r7, #8
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}

08007e28 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b082      	sub	sp, #8
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e38:	b2db      	uxtb	r3, r3
 8007e3a:	3b01      	subs	r3, #1
 8007e3c:	2b02      	cmp	r3, #2
 8007e3e:	d81e      	bhi.n	8007e7e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	88db      	ldrh	r3, [r3, #6]
 8007e44:	2b02      	cmp	r3, #2
 8007e46:	d004      	beq.n	8007e52 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007e48:	6839      	ldr	r1, [r7, #0]
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f000 f8a5 	bl	8007f9a <USBD_CtlError>
        break;
 8007e50:	e01a      	b.n	8007e88 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2201      	movs	r2, #1
 8007e56:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d005      	beq.n	8007e6e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	68db      	ldr	r3, [r3, #12]
 8007e66:	f043 0202 	orr.w	r2, r3, #2
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	330c      	adds	r3, #12
 8007e72:	2202      	movs	r2, #2
 8007e74:	4619      	mov	r1, r3
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 f900 	bl	800807c <USBD_CtlSendData>
      break;
 8007e7c:	e004      	b.n	8007e88 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007e7e:	6839      	ldr	r1, [r7, #0]
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f000 f88a 	bl	8007f9a <USBD_CtlError>
      break;
 8007e86:	bf00      	nop
  }
}
 8007e88:	bf00      	nop
 8007e8a:	3708      	adds	r7, #8
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}

08007e90 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b082      	sub	sp, #8
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	885b      	ldrh	r3, [r3, #2]
 8007e9e:	2b01      	cmp	r3, #1
 8007ea0:	d107      	bne.n	8007eb2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 f940 	bl	8008130 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007eb0:	e013      	b.n	8007eda <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	885b      	ldrh	r3, [r3, #2]
 8007eb6:	2b02      	cmp	r3, #2
 8007eb8:	d10b      	bne.n	8007ed2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	889b      	ldrh	r3, [r3, #4]
 8007ebe:	0a1b      	lsrs	r3, r3, #8
 8007ec0:	b29b      	uxth	r3, r3
 8007ec2:	b2da      	uxtb	r2, r3
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f000 f930 	bl	8008130 <USBD_CtlSendStatus>
}
 8007ed0:	e003      	b.n	8007eda <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007ed2:	6839      	ldr	r1, [r7, #0]
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f000 f860 	bl	8007f9a <USBD_CtlError>
}
 8007eda:	bf00      	nop
 8007edc:	3708      	adds	r7, #8
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}

08007ee2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ee2:	b580      	push	{r7, lr}
 8007ee4:	b082      	sub	sp, #8
 8007ee6:	af00      	add	r7, sp, #0
 8007ee8:	6078      	str	r0, [r7, #4]
 8007eea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ef2:	b2db      	uxtb	r3, r3
 8007ef4:	3b01      	subs	r3, #1
 8007ef6:	2b02      	cmp	r3, #2
 8007ef8:	d80b      	bhi.n	8007f12 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	885b      	ldrh	r3, [r3, #2]
 8007efe:	2b01      	cmp	r3, #1
 8007f00:	d10c      	bne.n	8007f1c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2200      	movs	r2, #0
 8007f06:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f000 f910 	bl	8008130 <USBD_CtlSendStatus>
      }
      break;
 8007f10:	e004      	b.n	8007f1c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007f12:	6839      	ldr	r1, [r7, #0]
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f000 f840 	bl	8007f9a <USBD_CtlError>
      break;
 8007f1a:	e000      	b.n	8007f1e <USBD_ClrFeature+0x3c>
      break;
 8007f1c:	bf00      	nop
  }
}
 8007f1e:	bf00      	nop
 8007f20:	3708      	adds	r7, #8
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}

08007f26 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007f26:	b580      	push	{r7, lr}
 8007f28:	b084      	sub	sp, #16
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	6078      	str	r0, [r7, #4]
 8007f2e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	781a      	ldrb	r2, [r3, #0]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	3301      	adds	r3, #1
 8007f40:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	781a      	ldrb	r2, [r3, #0]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	3301      	adds	r3, #1
 8007f4e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007f50:	68f8      	ldr	r0, [r7, #12]
 8007f52:	f7ff fa41 	bl	80073d8 <SWAPBYTE>
 8007f56:	4603      	mov	r3, r0
 8007f58:	461a      	mov	r2, r3
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	3301      	adds	r3, #1
 8007f62:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	3301      	adds	r3, #1
 8007f68:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007f6a:	68f8      	ldr	r0, [r7, #12]
 8007f6c:	f7ff fa34 	bl	80073d8 <SWAPBYTE>
 8007f70:	4603      	mov	r3, r0
 8007f72:	461a      	mov	r2, r3
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	3301      	adds	r3, #1
 8007f7c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	3301      	adds	r3, #1
 8007f82:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007f84:	68f8      	ldr	r0, [r7, #12]
 8007f86:	f7ff fa27 	bl	80073d8 <SWAPBYTE>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	80da      	strh	r2, [r3, #6]
}
 8007f92:	bf00      	nop
 8007f94:	3710      	adds	r7, #16
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}

08007f9a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f9a:	b580      	push	{r7, lr}
 8007f9c:	b082      	sub	sp, #8
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	6078      	str	r0, [r7, #4]
 8007fa2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007fa4:	2180      	movs	r1, #128	; 0x80
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f003 faa0 	bl	800b4ec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007fac:	2100      	movs	r1, #0
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f003 fa9c 	bl	800b4ec <USBD_LL_StallEP>
}
 8007fb4:	bf00      	nop
 8007fb6:	3708      	adds	r7, #8
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}

08007fbc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b086      	sub	sp, #24
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	60f8      	str	r0, [r7, #12]
 8007fc4:	60b9      	str	r1, [r7, #8]
 8007fc6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d036      	beq.n	8008040 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007fd6:	6938      	ldr	r0, [r7, #16]
 8007fd8:	f000 f836 	bl	8008048 <USBD_GetLen>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	3301      	adds	r3, #1
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	005b      	lsls	r3, r3, #1
 8007fe4:	b29a      	uxth	r2, r3
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007fea:	7dfb      	ldrb	r3, [r7, #23]
 8007fec:	68ba      	ldr	r2, [r7, #8]
 8007fee:	4413      	add	r3, r2
 8007ff0:	687a      	ldr	r2, [r7, #4]
 8007ff2:	7812      	ldrb	r2, [r2, #0]
 8007ff4:	701a      	strb	r2, [r3, #0]
  idx++;
 8007ff6:	7dfb      	ldrb	r3, [r7, #23]
 8007ff8:	3301      	adds	r3, #1
 8007ffa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007ffc:	7dfb      	ldrb	r3, [r7, #23]
 8007ffe:	68ba      	ldr	r2, [r7, #8]
 8008000:	4413      	add	r3, r2
 8008002:	2203      	movs	r2, #3
 8008004:	701a      	strb	r2, [r3, #0]
  idx++;
 8008006:	7dfb      	ldrb	r3, [r7, #23]
 8008008:	3301      	adds	r3, #1
 800800a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800800c:	e013      	b.n	8008036 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800800e:	7dfb      	ldrb	r3, [r7, #23]
 8008010:	68ba      	ldr	r2, [r7, #8]
 8008012:	4413      	add	r3, r2
 8008014:	693a      	ldr	r2, [r7, #16]
 8008016:	7812      	ldrb	r2, [r2, #0]
 8008018:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	3301      	adds	r3, #1
 800801e:	613b      	str	r3, [r7, #16]
    idx++;
 8008020:	7dfb      	ldrb	r3, [r7, #23]
 8008022:	3301      	adds	r3, #1
 8008024:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008026:	7dfb      	ldrb	r3, [r7, #23]
 8008028:	68ba      	ldr	r2, [r7, #8]
 800802a:	4413      	add	r3, r2
 800802c:	2200      	movs	r2, #0
 800802e:	701a      	strb	r2, [r3, #0]
    idx++;
 8008030:	7dfb      	ldrb	r3, [r7, #23]
 8008032:	3301      	adds	r3, #1
 8008034:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	781b      	ldrb	r3, [r3, #0]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d1e7      	bne.n	800800e <USBD_GetString+0x52>
 800803e:	e000      	b.n	8008042 <USBD_GetString+0x86>
    return;
 8008040:	bf00      	nop
  }
}
 8008042:	3718      	adds	r7, #24
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008048:	b480      	push	{r7}
 800804a:	b085      	sub	sp, #20
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008050:	2300      	movs	r3, #0
 8008052:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008058:	e005      	b.n	8008066 <USBD_GetLen+0x1e>
  {
    len++;
 800805a:	7bfb      	ldrb	r3, [r7, #15]
 800805c:	3301      	adds	r3, #1
 800805e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	3301      	adds	r3, #1
 8008064:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	781b      	ldrb	r3, [r3, #0]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d1f5      	bne.n	800805a <USBD_GetLen+0x12>
  }

  return len;
 800806e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008070:	4618      	mov	r0, r3
 8008072:	3714      	adds	r7, #20
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr

0800807c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b084      	sub	sp, #16
 8008080:	af00      	add	r7, sp, #0
 8008082:	60f8      	str	r0, [r7, #12]
 8008084:	60b9      	str	r1, [r7, #8]
 8008086:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	2202      	movs	r2, #2
 800808c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	687a      	ldr	r2, [r7, #4]
 8008094:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	687a      	ldr	r2, [r7, #4]
 800809a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	68ba      	ldr	r2, [r7, #8]
 80080a0:	2100      	movs	r1, #0
 80080a2:	68f8      	ldr	r0, [r7, #12]
 80080a4:	f003 faab 	bl	800b5fe <USBD_LL_Transmit>

  return USBD_OK;
 80080a8:	2300      	movs	r3, #0
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3710      	adds	r7, #16
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}

080080b2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80080b2:	b580      	push	{r7, lr}
 80080b4:	b084      	sub	sp, #16
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	60f8      	str	r0, [r7, #12]
 80080ba:	60b9      	str	r1, [r7, #8]
 80080bc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	68ba      	ldr	r2, [r7, #8]
 80080c2:	2100      	movs	r1, #0
 80080c4:	68f8      	ldr	r0, [r7, #12]
 80080c6:	f003 fa9a 	bl	800b5fe <USBD_LL_Transmit>

  return USBD_OK;
 80080ca:	2300      	movs	r3, #0
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	3710      	adds	r7, #16
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}

080080d4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b084      	sub	sp, #16
 80080d8:	af00      	add	r7, sp, #0
 80080da:	60f8      	str	r0, [r7, #12]
 80080dc:	60b9      	str	r1, [r7, #8]
 80080de:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	2203      	movs	r2, #3
 80080e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	687a      	ldr	r2, [r7, #4]
 80080ec:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	687a      	ldr	r2, [r7, #4]
 80080f4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	68ba      	ldr	r2, [r7, #8]
 80080fc:	2100      	movs	r1, #0
 80080fe:	68f8      	ldr	r0, [r7, #12]
 8008100:	f003 fa9e 	bl	800b640 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008104:	2300      	movs	r3, #0
}
 8008106:	4618      	mov	r0, r3
 8008108:	3710      	adds	r7, #16
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}

0800810e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800810e:	b580      	push	{r7, lr}
 8008110:	b084      	sub	sp, #16
 8008112:	af00      	add	r7, sp, #0
 8008114:	60f8      	str	r0, [r7, #12]
 8008116:	60b9      	str	r1, [r7, #8]
 8008118:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	68ba      	ldr	r2, [r7, #8]
 800811e:	2100      	movs	r1, #0
 8008120:	68f8      	ldr	r0, [r7, #12]
 8008122:	f003 fa8d 	bl	800b640 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008126:	2300      	movs	r3, #0
}
 8008128:	4618      	mov	r0, r3
 800812a:	3710      	adds	r7, #16
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}

08008130 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b082      	sub	sp, #8
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2204      	movs	r2, #4
 800813c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008140:	2300      	movs	r3, #0
 8008142:	2200      	movs	r2, #0
 8008144:	2100      	movs	r1, #0
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f003 fa59 	bl	800b5fe <USBD_LL_Transmit>

  return USBD_OK;
 800814c:	2300      	movs	r3, #0
}
 800814e:	4618      	mov	r0, r3
 8008150:	3708      	adds	r7, #8
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}

08008156 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008156:	b580      	push	{r7, lr}
 8008158:	b082      	sub	sp, #8
 800815a:	af00      	add	r7, sp, #0
 800815c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2205      	movs	r2, #5
 8008162:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008166:	2300      	movs	r3, #0
 8008168:	2200      	movs	r2, #0
 800816a:	2100      	movs	r1, #0
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f003 fa67 	bl	800b640 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008172:	2300      	movs	r3, #0
}
 8008174:	4618      	mov	r0, r3
 8008176:	3708      	adds	r7, #8
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}

0800817c <__NVIC_SetPriority>:
{
 800817c:	b480      	push	{r7}
 800817e:	b083      	sub	sp, #12
 8008180:	af00      	add	r7, sp, #0
 8008182:	4603      	mov	r3, r0
 8008184:	6039      	str	r1, [r7, #0]
 8008186:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800818c:	2b00      	cmp	r3, #0
 800818e:	db0a      	blt.n	80081a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	b2da      	uxtb	r2, r3
 8008194:	490c      	ldr	r1, [pc, #48]	; (80081c8 <__NVIC_SetPriority+0x4c>)
 8008196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800819a:	0112      	lsls	r2, r2, #4
 800819c:	b2d2      	uxtb	r2, r2
 800819e:	440b      	add	r3, r1
 80081a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80081a4:	e00a      	b.n	80081bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	b2da      	uxtb	r2, r3
 80081aa:	4908      	ldr	r1, [pc, #32]	; (80081cc <__NVIC_SetPriority+0x50>)
 80081ac:	79fb      	ldrb	r3, [r7, #7]
 80081ae:	f003 030f 	and.w	r3, r3, #15
 80081b2:	3b04      	subs	r3, #4
 80081b4:	0112      	lsls	r2, r2, #4
 80081b6:	b2d2      	uxtb	r2, r2
 80081b8:	440b      	add	r3, r1
 80081ba:	761a      	strb	r2, [r3, #24]
}
 80081bc:	bf00      	nop
 80081be:	370c      	adds	r7, #12
 80081c0:	46bd      	mov	sp, r7
 80081c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c6:	4770      	bx	lr
 80081c8:	e000e100 	.word	0xe000e100
 80081cc:	e000ed00 	.word	0xe000ed00

080081d0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80081d0:	b580      	push	{r7, lr}
 80081d2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80081d4:	4b05      	ldr	r3, [pc, #20]	; (80081ec <SysTick_Handler+0x1c>)
 80081d6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80081d8:	f001 fd28 	bl	8009c2c <xTaskGetSchedulerState>
 80081dc:	4603      	mov	r3, r0
 80081de:	2b01      	cmp	r3, #1
 80081e0:	d001      	beq.n	80081e6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80081e2:	f002 fb11 	bl	800a808 <xPortSysTickHandler>
  }
}
 80081e6:	bf00      	nop
 80081e8:	bd80      	pop	{r7, pc}
 80081ea:	bf00      	nop
 80081ec:	e000e010 	.word	0xe000e010

080081f0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80081f0:	b580      	push	{r7, lr}
 80081f2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80081f4:	2100      	movs	r1, #0
 80081f6:	f06f 0004 	mvn.w	r0, #4
 80081fa:	f7ff ffbf 	bl	800817c <__NVIC_SetPriority>
#endif
}
 80081fe:	bf00      	nop
 8008200:	bd80      	pop	{r7, pc}
	...

08008204 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008204:	b480      	push	{r7}
 8008206:	b083      	sub	sp, #12
 8008208:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800820a:	f3ef 8305 	mrs	r3, IPSR
 800820e:	603b      	str	r3, [r7, #0]
  return(result);
 8008210:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008212:	2b00      	cmp	r3, #0
 8008214:	d003      	beq.n	800821e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008216:	f06f 0305 	mvn.w	r3, #5
 800821a:	607b      	str	r3, [r7, #4]
 800821c:	e00c      	b.n	8008238 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800821e:	4b0a      	ldr	r3, [pc, #40]	; (8008248 <osKernelInitialize+0x44>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d105      	bne.n	8008232 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008226:	4b08      	ldr	r3, [pc, #32]	; (8008248 <osKernelInitialize+0x44>)
 8008228:	2201      	movs	r2, #1
 800822a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800822c:	2300      	movs	r3, #0
 800822e:	607b      	str	r3, [r7, #4]
 8008230:	e002      	b.n	8008238 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008232:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008236:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008238:	687b      	ldr	r3, [r7, #4]
}
 800823a:	4618      	mov	r0, r3
 800823c:	370c      	adds	r7, #12
 800823e:	46bd      	mov	sp, r7
 8008240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008244:	4770      	bx	lr
 8008246:	bf00      	nop
 8008248:	2000024c 	.word	0x2000024c

0800824c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800824c:	b580      	push	{r7, lr}
 800824e:	b082      	sub	sp, #8
 8008250:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008252:	f3ef 8305 	mrs	r3, IPSR
 8008256:	603b      	str	r3, [r7, #0]
  return(result);
 8008258:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800825a:	2b00      	cmp	r3, #0
 800825c:	d003      	beq.n	8008266 <osKernelStart+0x1a>
    stat = osErrorISR;
 800825e:	f06f 0305 	mvn.w	r3, #5
 8008262:	607b      	str	r3, [r7, #4]
 8008264:	e010      	b.n	8008288 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008266:	4b0b      	ldr	r3, [pc, #44]	; (8008294 <osKernelStart+0x48>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	2b01      	cmp	r3, #1
 800826c:	d109      	bne.n	8008282 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800826e:	f7ff ffbf 	bl	80081f0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008272:	4b08      	ldr	r3, [pc, #32]	; (8008294 <osKernelStart+0x48>)
 8008274:	2202      	movs	r2, #2
 8008276:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008278:	f001 f87c 	bl	8009374 <vTaskStartScheduler>
      stat = osOK;
 800827c:	2300      	movs	r3, #0
 800827e:	607b      	str	r3, [r7, #4]
 8008280:	e002      	b.n	8008288 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008282:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008286:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008288:	687b      	ldr	r3, [r7, #4]
}
 800828a:	4618      	mov	r0, r3
 800828c:	3708      	adds	r7, #8
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}
 8008292:	bf00      	nop
 8008294:	2000024c 	.word	0x2000024c

08008298 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008298:	b580      	push	{r7, lr}
 800829a:	b08e      	sub	sp, #56	; 0x38
 800829c:	af04      	add	r7, sp, #16
 800829e:	60f8      	str	r0, [r7, #12]
 80082a0:	60b9      	str	r1, [r7, #8]
 80082a2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80082a4:	2300      	movs	r3, #0
 80082a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80082a8:	f3ef 8305 	mrs	r3, IPSR
 80082ac:	617b      	str	r3, [r7, #20]
  return(result);
 80082ae:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d17e      	bne.n	80083b2 <osThreadNew+0x11a>
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d07b      	beq.n	80083b2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80082ba:	2380      	movs	r3, #128	; 0x80
 80082bc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80082be:	2318      	movs	r3, #24
 80082c0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80082c2:	2300      	movs	r3, #0
 80082c4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80082c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80082ca:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d045      	beq.n	800835e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d002      	beq.n	80082e0 <osThreadNew+0x48>
        name = attr->name;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	699b      	ldr	r3, [r3, #24]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d002      	beq.n	80082ee <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	699b      	ldr	r3, [r3, #24]
 80082ec:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80082ee:	69fb      	ldr	r3, [r7, #28]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d008      	beq.n	8008306 <osThreadNew+0x6e>
 80082f4:	69fb      	ldr	r3, [r7, #28]
 80082f6:	2b38      	cmp	r3, #56	; 0x38
 80082f8:	d805      	bhi.n	8008306 <osThreadNew+0x6e>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	f003 0301 	and.w	r3, r3, #1
 8008302:	2b00      	cmp	r3, #0
 8008304:	d001      	beq.n	800830a <osThreadNew+0x72>
        return (NULL);
 8008306:	2300      	movs	r3, #0
 8008308:	e054      	b.n	80083b4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	695b      	ldr	r3, [r3, #20]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d003      	beq.n	800831a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	695b      	ldr	r3, [r3, #20]
 8008316:	089b      	lsrs	r3, r3, #2
 8008318:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	689b      	ldr	r3, [r3, #8]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d00e      	beq.n	8008340 <osThreadNew+0xa8>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	68db      	ldr	r3, [r3, #12]
 8008326:	2bbb      	cmp	r3, #187	; 0xbb
 8008328:	d90a      	bls.n	8008340 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800832e:	2b00      	cmp	r3, #0
 8008330:	d006      	beq.n	8008340 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	695b      	ldr	r3, [r3, #20]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d002      	beq.n	8008340 <osThreadNew+0xa8>
        mem = 1;
 800833a:	2301      	movs	r3, #1
 800833c:	61bb      	str	r3, [r7, #24]
 800833e:	e010      	b.n	8008362 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	689b      	ldr	r3, [r3, #8]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d10c      	bne.n	8008362 <osThreadNew+0xca>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	68db      	ldr	r3, [r3, #12]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d108      	bne.n	8008362 <osThreadNew+0xca>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	691b      	ldr	r3, [r3, #16]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d104      	bne.n	8008362 <osThreadNew+0xca>
          mem = 0;
 8008358:	2300      	movs	r3, #0
 800835a:	61bb      	str	r3, [r7, #24]
 800835c:	e001      	b.n	8008362 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800835e:	2300      	movs	r3, #0
 8008360:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008362:	69bb      	ldr	r3, [r7, #24]
 8008364:	2b01      	cmp	r3, #1
 8008366:	d110      	bne.n	800838a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800836c:	687a      	ldr	r2, [r7, #4]
 800836e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008370:	9202      	str	r2, [sp, #8]
 8008372:	9301      	str	r3, [sp, #4]
 8008374:	69fb      	ldr	r3, [r7, #28]
 8008376:	9300      	str	r3, [sp, #0]
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	6a3a      	ldr	r2, [r7, #32]
 800837c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800837e:	68f8      	ldr	r0, [r7, #12]
 8008380:	f000 fe0c 	bl	8008f9c <xTaskCreateStatic>
 8008384:	4603      	mov	r3, r0
 8008386:	613b      	str	r3, [r7, #16]
 8008388:	e013      	b.n	80083b2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800838a:	69bb      	ldr	r3, [r7, #24]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d110      	bne.n	80083b2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008390:	6a3b      	ldr	r3, [r7, #32]
 8008392:	b29a      	uxth	r2, r3
 8008394:	f107 0310 	add.w	r3, r7, #16
 8008398:	9301      	str	r3, [sp, #4]
 800839a:	69fb      	ldr	r3, [r7, #28]
 800839c:	9300      	str	r3, [sp, #0]
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80083a2:	68f8      	ldr	r0, [r7, #12]
 80083a4:	f000 fe57 	bl	8009056 <xTaskCreate>
 80083a8:	4603      	mov	r3, r0
 80083aa:	2b01      	cmp	r3, #1
 80083ac:	d001      	beq.n	80083b2 <osThreadNew+0x11a>
            hTask = NULL;
 80083ae:	2300      	movs	r3, #0
 80083b0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80083b2:	693b      	ldr	r3, [r7, #16]
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3728      	adds	r7, #40	; 0x28
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}

080083bc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80083bc:	b580      	push	{r7, lr}
 80083be:	b084      	sub	sp, #16
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80083c4:	f3ef 8305 	mrs	r3, IPSR
 80083c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80083ca:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d003      	beq.n	80083d8 <osDelay+0x1c>
    stat = osErrorISR;
 80083d0:	f06f 0305 	mvn.w	r3, #5
 80083d4:	60fb      	str	r3, [r7, #12]
 80083d6:	e007      	b.n	80083e8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80083d8:	2300      	movs	r3, #0
 80083da:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d002      	beq.n	80083e8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 ff92 	bl	800930c <vTaskDelay>
    }
  }

  return (stat);
 80083e8:	68fb      	ldr	r3, [r7, #12]
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	3710      	adds	r7, #16
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}
	...

080083f4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80083f4:	b480      	push	{r7}
 80083f6:	b085      	sub	sp, #20
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	60f8      	str	r0, [r7, #12]
 80083fc:	60b9      	str	r1, [r7, #8]
 80083fe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	4a07      	ldr	r2, [pc, #28]	; (8008420 <vApplicationGetIdleTaskMemory+0x2c>)
 8008404:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	4a06      	ldr	r2, [pc, #24]	; (8008424 <vApplicationGetIdleTaskMemory+0x30>)
 800840a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2280      	movs	r2, #128	; 0x80
 8008410:	601a      	str	r2, [r3, #0]
}
 8008412:	bf00      	nop
 8008414:	3714      	adds	r7, #20
 8008416:	46bd      	mov	sp, r7
 8008418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841c:	4770      	bx	lr
 800841e:	bf00      	nop
 8008420:	20000250 	.word	0x20000250
 8008424:	2000030c 	.word	0x2000030c

08008428 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008428:	b480      	push	{r7}
 800842a:	b085      	sub	sp, #20
 800842c:	af00      	add	r7, sp, #0
 800842e:	60f8      	str	r0, [r7, #12]
 8008430:	60b9      	str	r1, [r7, #8]
 8008432:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	4a07      	ldr	r2, [pc, #28]	; (8008454 <vApplicationGetTimerTaskMemory+0x2c>)
 8008438:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	4a06      	ldr	r2, [pc, #24]	; (8008458 <vApplicationGetTimerTaskMemory+0x30>)
 800843e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008446:	601a      	str	r2, [r3, #0]
}
 8008448:	bf00      	nop
 800844a:	3714      	adds	r7, #20
 800844c:	46bd      	mov	sp, r7
 800844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008452:	4770      	bx	lr
 8008454:	2000050c 	.word	0x2000050c
 8008458:	200005c8 	.word	0x200005c8

0800845c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800845c:	b480      	push	{r7}
 800845e:	b083      	sub	sp, #12
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f103 0208 	add.w	r2, r3, #8
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008474:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f103 0208 	add.w	r2, r3, #8
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f103 0208 	add.w	r2, r3, #8
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2200      	movs	r2, #0
 800848e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008490:	bf00      	nop
 8008492:	370c      	adds	r7, #12
 8008494:	46bd      	mov	sp, r7
 8008496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849a:	4770      	bx	lr

0800849c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800849c:	b480      	push	{r7}
 800849e:	b083      	sub	sp, #12
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2200      	movs	r2, #0
 80084a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80084aa:	bf00      	nop
 80084ac:	370c      	adds	r7, #12
 80084ae:	46bd      	mov	sp, r7
 80084b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b4:	4770      	bx	lr

080084b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80084b6:	b480      	push	{r7}
 80084b8:	b085      	sub	sp, #20
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	6078      	str	r0, [r7, #4]
 80084be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	685b      	ldr	r3, [r3, #4]
 80084c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	68fa      	ldr	r2, [r7, #12]
 80084ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	689a      	ldr	r2, [r3, #8]
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	689b      	ldr	r3, [r3, #8]
 80084d8:	683a      	ldr	r2, [r7, #0]
 80084da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	683a      	ldr	r2, [r7, #0]
 80084e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	687a      	ldr	r2, [r7, #4]
 80084e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	1c5a      	adds	r2, r3, #1
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	601a      	str	r2, [r3, #0]
}
 80084f2:	bf00      	nop
 80084f4:	3714      	adds	r7, #20
 80084f6:	46bd      	mov	sp, r7
 80084f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fc:	4770      	bx	lr

080084fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80084fe:	b480      	push	{r7}
 8008500:	b085      	sub	sp, #20
 8008502:	af00      	add	r7, sp, #0
 8008504:	6078      	str	r0, [r7, #4]
 8008506:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008514:	d103      	bne.n	800851e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	691b      	ldr	r3, [r3, #16]
 800851a:	60fb      	str	r3, [r7, #12]
 800851c:	e00c      	b.n	8008538 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	3308      	adds	r3, #8
 8008522:	60fb      	str	r3, [r7, #12]
 8008524:	e002      	b.n	800852c <vListInsert+0x2e>
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	685b      	ldr	r3, [r3, #4]
 800852a:	60fb      	str	r3, [r7, #12]
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	685b      	ldr	r3, [r3, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	68ba      	ldr	r2, [r7, #8]
 8008534:	429a      	cmp	r2, r3
 8008536:	d2f6      	bcs.n	8008526 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	685a      	ldr	r2, [r3, #4]
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	685b      	ldr	r3, [r3, #4]
 8008544:	683a      	ldr	r2, [r7, #0]
 8008546:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	68fa      	ldr	r2, [r7, #12]
 800854c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	683a      	ldr	r2, [r7, #0]
 8008552:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	687a      	ldr	r2, [r7, #4]
 8008558:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	1c5a      	adds	r2, r3, #1
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	601a      	str	r2, [r3, #0]
}
 8008564:	bf00      	nop
 8008566:	3714      	adds	r7, #20
 8008568:	46bd      	mov	sp, r7
 800856a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856e:	4770      	bx	lr

08008570 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008570:	b480      	push	{r7}
 8008572:	b085      	sub	sp, #20
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	691b      	ldr	r3, [r3, #16]
 800857c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	685b      	ldr	r3, [r3, #4]
 8008582:	687a      	ldr	r2, [r7, #4]
 8008584:	6892      	ldr	r2, [r2, #8]
 8008586:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	689b      	ldr	r3, [r3, #8]
 800858c:	687a      	ldr	r2, [r7, #4]
 800858e:	6852      	ldr	r2, [r2, #4]
 8008590:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	687a      	ldr	r2, [r7, #4]
 8008598:	429a      	cmp	r2, r3
 800859a:	d103      	bne.n	80085a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	689a      	ldr	r2, [r3, #8]
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2200      	movs	r2, #0
 80085a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	1e5a      	subs	r2, r3, #1
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	3714      	adds	r7, #20
 80085bc:	46bd      	mov	sp, r7
 80085be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c2:	4770      	bx	lr

080085c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b084      	sub	sp, #16
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
 80085cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d10a      	bne.n	80085ee <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80085d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085dc:	f383 8811 	msr	BASEPRI, r3
 80085e0:	f3bf 8f6f 	isb	sy
 80085e4:	f3bf 8f4f 	dsb	sy
 80085e8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80085ea:	bf00      	nop
 80085ec:	e7fe      	b.n	80085ec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80085ee:	f002 f879 	bl	800a6e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681a      	ldr	r2, [r3, #0]
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085fa:	68f9      	ldr	r1, [r7, #12]
 80085fc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80085fe:	fb01 f303 	mul.w	r3, r1, r3
 8008602:	441a      	add	r2, r3
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	2200      	movs	r2, #0
 800860c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681a      	ldr	r2, [r3, #0]
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681a      	ldr	r2, [r3, #0]
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800861e:	3b01      	subs	r3, #1
 8008620:	68f9      	ldr	r1, [r7, #12]
 8008622:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008624:	fb01 f303 	mul.w	r3, r1, r3
 8008628:	441a      	add	r2, r3
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	22ff      	movs	r2, #255	; 0xff
 8008632:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	22ff      	movs	r2, #255	; 0xff
 800863a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d114      	bne.n	800866e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	691b      	ldr	r3, [r3, #16]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d01a      	beq.n	8008682 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	3310      	adds	r3, #16
 8008650:	4618      	mov	r0, r3
 8008652:	f001 f929 	bl	80098a8 <xTaskRemoveFromEventList>
 8008656:	4603      	mov	r3, r0
 8008658:	2b00      	cmp	r3, #0
 800865a:	d012      	beq.n	8008682 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800865c:	4b0c      	ldr	r3, [pc, #48]	; (8008690 <xQueueGenericReset+0xcc>)
 800865e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008662:	601a      	str	r2, [r3, #0]
 8008664:	f3bf 8f4f 	dsb	sy
 8008668:	f3bf 8f6f 	isb	sy
 800866c:	e009      	b.n	8008682 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	3310      	adds	r3, #16
 8008672:	4618      	mov	r0, r3
 8008674:	f7ff fef2 	bl	800845c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	3324      	adds	r3, #36	; 0x24
 800867c:	4618      	mov	r0, r3
 800867e:	f7ff feed 	bl	800845c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008682:	f002 f85f 	bl	800a744 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008686:	2301      	movs	r3, #1
}
 8008688:	4618      	mov	r0, r3
 800868a:	3710      	adds	r7, #16
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}
 8008690:	e000ed04 	.word	0xe000ed04

08008694 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008694:	b580      	push	{r7, lr}
 8008696:	b08e      	sub	sp, #56	; 0x38
 8008698:	af02      	add	r7, sp, #8
 800869a:	60f8      	str	r0, [r7, #12]
 800869c:	60b9      	str	r1, [r7, #8]
 800869e:	607a      	str	r2, [r7, #4]
 80086a0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d10a      	bne.n	80086be <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80086a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ac:	f383 8811 	msr	BASEPRI, r3
 80086b0:	f3bf 8f6f 	isb	sy
 80086b4:	f3bf 8f4f 	dsb	sy
 80086b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80086ba:	bf00      	nop
 80086bc:	e7fe      	b.n	80086bc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d10a      	bne.n	80086da <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80086c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c8:	f383 8811 	msr	BASEPRI, r3
 80086cc:	f3bf 8f6f 	isb	sy
 80086d0:	f3bf 8f4f 	dsb	sy
 80086d4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80086d6:	bf00      	nop
 80086d8:	e7fe      	b.n	80086d8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d002      	beq.n	80086e6 <xQueueGenericCreateStatic+0x52>
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d001      	beq.n	80086ea <xQueueGenericCreateStatic+0x56>
 80086e6:	2301      	movs	r3, #1
 80086e8:	e000      	b.n	80086ec <xQueueGenericCreateStatic+0x58>
 80086ea:	2300      	movs	r3, #0
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d10a      	bne.n	8008706 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80086f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f4:	f383 8811 	msr	BASEPRI, r3
 80086f8:	f3bf 8f6f 	isb	sy
 80086fc:	f3bf 8f4f 	dsb	sy
 8008700:	623b      	str	r3, [r7, #32]
}
 8008702:	bf00      	nop
 8008704:	e7fe      	b.n	8008704 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d102      	bne.n	8008712 <xQueueGenericCreateStatic+0x7e>
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d101      	bne.n	8008716 <xQueueGenericCreateStatic+0x82>
 8008712:	2301      	movs	r3, #1
 8008714:	e000      	b.n	8008718 <xQueueGenericCreateStatic+0x84>
 8008716:	2300      	movs	r3, #0
 8008718:	2b00      	cmp	r3, #0
 800871a:	d10a      	bne.n	8008732 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800871c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008720:	f383 8811 	msr	BASEPRI, r3
 8008724:	f3bf 8f6f 	isb	sy
 8008728:	f3bf 8f4f 	dsb	sy
 800872c:	61fb      	str	r3, [r7, #28]
}
 800872e:	bf00      	nop
 8008730:	e7fe      	b.n	8008730 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008732:	2350      	movs	r3, #80	; 0x50
 8008734:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	2b50      	cmp	r3, #80	; 0x50
 800873a:	d00a      	beq.n	8008752 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800873c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008740:	f383 8811 	msr	BASEPRI, r3
 8008744:	f3bf 8f6f 	isb	sy
 8008748:	f3bf 8f4f 	dsb	sy
 800874c:	61bb      	str	r3, [r7, #24]
}
 800874e:	bf00      	nop
 8008750:	e7fe      	b.n	8008750 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008752:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800875a:	2b00      	cmp	r3, #0
 800875c:	d00d      	beq.n	800877a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800875e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008760:	2201      	movs	r2, #1
 8008762:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008766:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800876a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800876c:	9300      	str	r3, [sp, #0]
 800876e:	4613      	mov	r3, r2
 8008770:	687a      	ldr	r2, [r7, #4]
 8008772:	68b9      	ldr	r1, [r7, #8]
 8008774:	68f8      	ldr	r0, [r7, #12]
 8008776:	f000 f805 	bl	8008784 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800877a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800877c:	4618      	mov	r0, r3
 800877e:	3730      	adds	r7, #48	; 0x30
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}

08008784 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b084      	sub	sp, #16
 8008788:	af00      	add	r7, sp, #0
 800878a:	60f8      	str	r0, [r7, #12]
 800878c:	60b9      	str	r1, [r7, #8]
 800878e:	607a      	str	r2, [r7, #4]
 8008790:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d103      	bne.n	80087a0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008798:	69bb      	ldr	r3, [r7, #24]
 800879a:	69ba      	ldr	r2, [r7, #24]
 800879c:	601a      	str	r2, [r3, #0]
 800879e:	e002      	b.n	80087a6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80087a0:	69bb      	ldr	r3, [r7, #24]
 80087a2:	687a      	ldr	r2, [r7, #4]
 80087a4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80087a6:	69bb      	ldr	r3, [r7, #24]
 80087a8:	68fa      	ldr	r2, [r7, #12]
 80087aa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80087ac:	69bb      	ldr	r3, [r7, #24]
 80087ae:	68ba      	ldr	r2, [r7, #8]
 80087b0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80087b2:	2101      	movs	r1, #1
 80087b4:	69b8      	ldr	r0, [r7, #24]
 80087b6:	f7ff ff05 	bl	80085c4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80087ba:	69bb      	ldr	r3, [r7, #24]
 80087bc:	78fa      	ldrb	r2, [r7, #3]
 80087be:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80087c2:	bf00      	nop
 80087c4:	3710      	adds	r7, #16
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}
	...

080087cc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b08e      	sub	sp, #56	; 0x38
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	60f8      	str	r0, [r7, #12]
 80087d4:	60b9      	str	r1, [r7, #8]
 80087d6:	607a      	str	r2, [r7, #4]
 80087d8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80087da:	2300      	movs	r3, #0
 80087dc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80087e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d10a      	bne.n	80087fe <xQueueGenericSend+0x32>
	__asm volatile
 80087e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ec:	f383 8811 	msr	BASEPRI, r3
 80087f0:	f3bf 8f6f 	isb	sy
 80087f4:	f3bf 8f4f 	dsb	sy
 80087f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80087fa:	bf00      	nop
 80087fc:	e7fe      	b.n	80087fc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d103      	bne.n	800880c <xQueueGenericSend+0x40>
 8008804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008808:	2b00      	cmp	r3, #0
 800880a:	d101      	bne.n	8008810 <xQueueGenericSend+0x44>
 800880c:	2301      	movs	r3, #1
 800880e:	e000      	b.n	8008812 <xQueueGenericSend+0x46>
 8008810:	2300      	movs	r3, #0
 8008812:	2b00      	cmp	r3, #0
 8008814:	d10a      	bne.n	800882c <xQueueGenericSend+0x60>
	__asm volatile
 8008816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800881a:	f383 8811 	msr	BASEPRI, r3
 800881e:	f3bf 8f6f 	isb	sy
 8008822:	f3bf 8f4f 	dsb	sy
 8008826:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008828:	bf00      	nop
 800882a:	e7fe      	b.n	800882a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	2b02      	cmp	r3, #2
 8008830:	d103      	bne.n	800883a <xQueueGenericSend+0x6e>
 8008832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008836:	2b01      	cmp	r3, #1
 8008838:	d101      	bne.n	800883e <xQueueGenericSend+0x72>
 800883a:	2301      	movs	r3, #1
 800883c:	e000      	b.n	8008840 <xQueueGenericSend+0x74>
 800883e:	2300      	movs	r3, #0
 8008840:	2b00      	cmp	r3, #0
 8008842:	d10a      	bne.n	800885a <xQueueGenericSend+0x8e>
	__asm volatile
 8008844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008848:	f383 8811 	msr	BASEPRI, r3
 800884c:	f3bf 8f6f 	isb	sy
 8008850:	f3bf 8f4f 	dsb	sy
 8008854:	623b      	str	r3, [r7, #32]
}
 8008856:	bf00      	nop
 8008858:	e7fe      	b.n	8008858 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800885a:	f001 f9e7 	bl	8009c2c <xTaskGetSchedulerState>
 800885e:	4603      	mov	r3, r0
 8008860:	2b00      	cmp	r3, #0
 8008862:	d102      	bne.n	800886a <xQueueGenericSend+0x9e>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d101      	bne.n	800886e <xQueueGenericSend+0xa2>
 800886a:	2301      	movs	r3, #1
 800886c:	e000      	b.n	8008870 <xQueueGenericSend+0xa4>
 800886e:	2300      	movs	r3, #0
 8008870:	2b00      	cmp	r3, #0
 8008872:	d10a      	bne.n	800888a <xQueueGenericSend+0xbe>
	__asm volatile
 8008874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008878:	f383 8811 	msr	BASEPRI, r3
 800887c:	f3bf 8f6f 	isb	sy
 8008880:	f3bf 8f4f 	dsb	sy
 8008884:	61fb      	str	r3, [r7, #28]
}
 8008886:	bf00      	nop
 8008888:	e7fe      	b.n	8008888 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800888a:	f001 ff2b 	bl	800a6e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800888e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008890:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008896:	429a      	cmp	r2, r3
 8008898:	d302      	bcc.n	80088a0 <xQueueGenericSend+0xd4>
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	2b02      	cmp	r3, #2
 800889e:	d129      	bne.n	80088f4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80088a0:	683a      	ldr	r2, [r7, #0]
 80088a2:	68b9      	ldr	r1, [r7, #8]
 80088a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80088a6:	f000 fa0b 	bl	8008cc0 <prvCopyDataToQueue>
 80088aa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80088ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d010      	beq.n	80088d6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80088b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b6:	3324      	adds	r3, #36	; 0x24
 80088b8:	4618      	mov	r0, r3
 80088ba:	f000 fff5 	bl	80098a8 <xTaskRemoveFromEventList>
 80088be:	4603      	mov	r3, r0
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d013      	beq.n	80088ec <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80088c4:	4b3f      	ldr	r3, [pc, #252]	; (80089c4 <xQueueGenericSend+0x1f8>)
 80088c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088ca:	601a      	str	r2, [r3, #0]
 80088cc:	f3bf 8f4f 	dsb	sy
 80088d0:	f3bf 8f6f 	isb	sy
 80088d4:	e00a      	b.n	80088ec <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80088d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d007      	beq.n	80088ec <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80088dc:	4b39      	ldr	r3, [pc, #228]	; (80089c4 <xQueueGenericSend+0x1f8>)
 80088de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088e2:	601a      	str	r2, [r3, #0]
 80088e4:	f3bf 8f4f 	dsb	sy
 80088e8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80088ec:	f001 ff2a 	bl	800a744 <vPortExitCritical>
				return pdPASS;
 80088f0:	2301      	movs	r3, #1
 80088f2:	e063      	b.n	80089bc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d103      	bne.n	8008902 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80088fa:	f001 ff23 	bl	800a744 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80088fe:	2300      	movs	r3, #0
 8008900:	e05c      	b.n	80089bc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008904:	2b00      	cmp	r3, #0
 8008906:	d106      	bne.n	8008916 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008908:	f107 0314 	add.w	r3, r7, #20
 800890c:	4618      	mov	r0, r3
 800890e:	f001 f82f 	bl	8009970 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008912:	2301      	movs	r3, #1
 8008914:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008916:	f001 ff15 	bl	800a744 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800891a:	f000 fd9b 	bl	8009454 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800891e:	f001 fee1 	bl	800a6e4 <vPortEnterCritical>
 8008922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008924:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008928:	b25b      	sxtb	r3, r3
 800892a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800892e:	d103      	bne.n	8008938 <xQueueGenericSend+0x16c>
 8008930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008932:	2200      	movs	r2, #0
 8008934:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800893a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800893e:	b25b      	sxtb	r3, r3
 8008940:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008944:	d103      	bne.n	800894e <xQueueGenericSend+0x182>
 8008946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008948:	2200      	movs	r2, #0
 800894a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800894e:	f001 fef9 	bl	800a744 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008952:	1d3a      	adds	r2, r7, #4
 8008954:	f107 0314 	add.w	r3, r7, #20
 8008958:	4611      	mov	r1, r2
 800895a:	4618      	mov	r0, r3
 800895c:	f001 f81e 	bl	800999c <xTaskCheckForTimeOut>
 8008960:	4603      	mov	r3, r0
 8008962:	2b00      	cmp	r3, #0
 8008964:	d124      	bne.n	80089b0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008966:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008968:	f000 faa2 	bl	8008eb0 <prvIsQueueFull>
 800896c:	4603      	mov	r3, r0
 800896e:	2b00      	cmp	r3, #0
 8008970:	d018      	beq.n	80089a4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008974:	3310      	adds	r3, #16
 8008976:	687a      	ldr	r2, [r7, #4]
 8008978:	4611      	mov	r1, r2
 800897a:	4618      	mov	r0, r3
 800897c:	f000 ff44 	bl	8009808 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008980:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008982:	f000 fa2d 	bl	8008de0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008986:	f000 fd73 	bl	8009470 <xTaskResumeAll>
 800898a:	4603      	mov	r3, r0
 800898c:	2b00      	cmp	r3, #0
 800898e:	f47f af7c 	bne.w	800888a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008992:	4b0c      	ldr	r3, [pc, #48]	; (80089c4 <xQueueGenericSend+0x1f8>)
 8008994:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008998:	601a      	str	r2, [r3, #0]
 800899a:	f3bf 8f4f 	dsb	sy
 800899e:	f3bf 8f6f 	isb	sy
 80089a2:	e772      	b.n	800888a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80089a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80089a6:	f000 fa1b 	bl	8008de0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80089aa:	f000 fd61 	bl	8009470 <xTaskResumeAll>
 80089ae:	e76c      	b.n	800888a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80089b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80089b2:	f000 fa15 	bl	8008de0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80089b6:	f000 fd5b 	bl	8009470 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80089ba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80089bc:	4618      	mov	r0, r3
 80089be:	3738      	adds	r7, #56	; 0x38
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}
 80089c4:	e000ed04 	.word	0xe000ed04

080089c8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b090      	sub	sp, #64	; 0x40
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	60f8      	str	r0, [r7, #12]
 80089d0:	60b9      	str	r1, [r7, #8]
 80089d2:	607a      	str	r2, [r7, #4]
 80089d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80089da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d10a      	bne.n	80089f6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80089e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e4:	f383 8811 	msr	BASEPRI, r3
 80089e8:	f3bf 8f6f 	isb	sy
 80089ec:	f3bf 8f4f 	dsb	sy
 80089f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80089f2:	bf00      	nop
 80089f4:	e7fe      	b.n	80089f4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d103      	bne.n	8008a04 <xQueueGenericSendFromISR+0x3c>
 80089fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d101      	bne.n	8008a08 <xQueueGenericSendFromISR+0x40>
 8008a04:	2301      	movs	r3, #1
 8008a06:	e000      	b.n	8008a0a <xQueueGenericSendFromISR+0x42>
 8008a08:	2300      	movs	r3, #0
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d10a      	bne.n	8008a24 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a12:	f383 8811 	msr	BASEPRI, r3
 8008a16:	f3bf 8f6f 	isb	sy
 8008a1a:	f3bf 8f4f 	dsb	sy
 8008a1e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008a20:	bf00      	nop
 8008a22:	e7fe      	b.n	8008a22 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	2b02      	cmp	r3, #2
 8008a28:	d103      	bne.n	8008a32 <xQueueGenericSendFromISR+0x6a>
 8008a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a2e:	2b01      	cmp	r3, #1
 8008a30:	d101      	bne.n	8008a36 <xQueueGenericSendFromISR+0x6e>
 8008a32:	2301      	movs	r3, #1
 8008a34:	e000      	b.n	8008a38 <xQueueGenericSendFromISR+0x70>
 8008a36:	2300      	movs	r3, #0
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d10a      	bne.n	8008a52 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a40:	f383 8811 	msr	BASEPRI, r3
 8008a44:	f3bf 8f6f 	isb	sy
 8008a48:	f3bf 8f4f 	dsb	sy
 8008a4c:	623b      	str	r3, [r7, #32]
}
 8008a4e:	bf00      	nop
 8008a50:	e7fe      	b.n	8008a50 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008a52:	f001 ff29 	bl	800a8a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008a56:	f3ef 8211 	mrs	r2, BASEPRI
 8008a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a5e:	f383 8811 	msr	BASEPRI, r3
 8008a62:	f3bf 8f6f 	isb	sy
 8008a66:	f3bf 8f4f 	dsb	sy
 8008a6a:	61fa      	str	r2, [r7, #28]
 8008a6c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008a6e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008a70:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a7a:	429a      	cmp	r2, r3
 8008a7c:	d302      	bcc.n	8008a84 <xQueueGenericSendFromISR+0xbc>
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	2b02      	cmp	r3, #2
 8008a82:	d12f      	bne.n	8008ae4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a92:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008a94:	683a      	ldr	r2, [r7, #0]
 8008a96:	68b9      	ldr	r1, [r7, #8]
 8008a98:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008a9a:	f000 f911 	bl	8008cc0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008a9e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008aa2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008aa6:	d112      	bne.n	8008ace <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d016      	beq.n	8008ade <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ab2:	3324      	adds	r3, #36	; 0x24
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f000 fef7 	bl	80098a8 <xTaskRemoveFromEventList>
 8008aba:	4603      	mov	r3, r0
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d00e      	beq.n	8008ade <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d00b      	beq.n	8008ade <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2201      	movs	r2, #1
 8008aca:	601a      	str	r2, [r3, #0]
 8008acc:	e007      	b.n	8008ade <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008ace:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008ad2:	3301      	adds	r3, #1
 8008ad4:	b2db      	uxtb	r3, r3
 8008ad6:	b25a      	sxtb	r2, r3
 8008ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ada:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008ade:	2301      	movs	r3, #1
 8008ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008ae2:	e001      	b.n	8008ae8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008aea:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008aec:	697b      	ldr	r3, [r7, #20]
 8008aee:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008af2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008af4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3740      	adds	r7, #64	; 0x40
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}
	...

08008b00 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b08c      	sub	sp, #48	; 0x30
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	60f8      	str	r0, [r7, #12]
 8008b08:	60b9      	str	r1, [r7, #8]
 8008b0a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d10a      	bne.n	8008b30 <xQueueReceive+0x30>
	__asm volatile
 8008b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b1e:	f383 8811 	msr	BASEPRI, r3
 8008b22:	f3bf 8f6f 	isb	sy
 8008b26:	f3bf 8f4f 	dsb	sy
 8008b2a:	623b      	str	r3, [r7, #32]
}
 8008b2c:	bf00      	nop
 8008b2e:	e7fe      	b.n	8008b2e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d103      	bne.n	8008b3e <xQueueReceive+0x3e>
 8008b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d101      	bne.n	8008b42 <xQueueReceive+0x42>
 8008b3e:	2301      	movs	r3, #1
 8008b40:	e000      	b.n	8008b44 <xQueueReceive+0x44>
 8008b42:	2300      	movs	r3, #0
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d10a      	bne.n	8008b5e <xQueueReceive+0x5e>
	__asm volatile
 8008b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b4c:	f383 8811 	msr	BASEPRI, r3
 8008b50:	f3bf 8f6f 	isb	sy
 8008b54:	f3bf 8f4f 	dsb	sy
 8008b58:	61fb      	str	r3, [r7, #28]
}
 8008b5a:	bf00      	nop
 8008b5c:	e7fe      	b.n	8008b5c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008b5e:	f001 f865 	bl	8009c2c <xTaskGetSchedulerState>
 8008b62:	4603      	mov	r3, r0
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d102      	bne.n	8008b6e <xQueueReceive+0x6e>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d101      	bne.n	8008b72 <xQueueReceive+0x72>
 8008b6e:	2301      	movs	r3, #1
 8008b70:	e000      	b.n	8008b74 <xQueueReceive+0x74>
 8008b72:	2300      	movs	r3, #0
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d10a      	bne.n	8008b8e <xQueueReceive+0x8e>
	__asm volatile
 8008b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b7c:	f383 8811 	msr	BASEPRI, r3
 8008b80:	f3bf 8f6f 	isb	sy
 8008b84:	f3bf 8f4f 	dsb	sy
 8008b88:	61bb      	str	r3, [r7, #24]
}
 8008b8a:	bf00      	nop
 8008b8c:	e7fe      	b.n	8008b8c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008b8e:	f001 fda9 	bl	800a6e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b96:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d01f      	beq.n	8008bde <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008b9e:	68b9      	ldr	r1, [r7, #8]
 8008ba0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ba2:	f000 f8f7 	bl	8008d94 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba8:	1e5a      	subs	r2, r3, #1
 8008baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bac:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bb0:	691b      	ldr	r3, [r3, #16]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d00f      	beq.n	8008bd6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bb8:	3310      	adds	r3, #16
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f000 fe74 	bl	80098a8 <xTaskRemoveFromEventList>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d007      	beq.n	8008bd6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008bc6:	4b3d      	ldr	r3, [pc, #244]	; (8008cbc <xQueueReceive+0x1bc>)
 8008bc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bcc:	601a      	str	r2, [r3, #0]
 8008bce:	f3bf 8f4f 	dsb	sy
 8008bd2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008bd6:	f001 fdb5 	bl	800a744 <vPortExitCritical>
				return pdPASS;
 8008bda:	2301      	movs	r3, #1
 8008bdc:	e069      	b.n	8008cb2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d103      	bne.n	8008bec <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008be4:	f001 fdae 	bl	800a744 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008be8:	2300      	movs	r3, #0
 8008bea:	e062      	b.n	8008cb2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d106      	bne.n	8008c00 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008bf2:	f107 0310 	add.w	r3, r7, #16
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f000 feba 	bl	8009970 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008c00:	f001 fda0 	bl	800a744 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008c04:	f000 fc26 	bl	8009454 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008c08:	f001 fd6c 	bl	800a6e4 <vPortEnterCritical>
 8008c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008c12:	b25b      	sxtb	r3, r3
 8008c14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c18:	d103      	bne.n	8008c22 <xQueueReceive+0x122>
 8008c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c28:	b25b      	sxtb	r3, r3
 8008c2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c2e:	d103      	bne.n	8008c38 <xQueueReceive+0x138>
 8008c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c32:	2200      	movs	r2, #0
 8008c34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008c38:	f001 fd84 	bl	800a744 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008c3c:	1d3a      	adds	r2, r7, #4
 8008c3e:	f107 0310 	add.w	r3, r7, #16
 8008c42:	4611      	mov	r1, r2
 8008c44:	4618      	mov	r0, r3
 8008c46:	f000 fea9 	bl	800999c <xTaskCheckForTimeOut>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d123      	bne.n	8008c98 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008c50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c52:	f000 f917 	bl	8008e84 <prvIsQueueEmpty>
 8008c56:	4603      	mov	r3, r0
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d017      	beq.n	8008c8c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c5e:	3324      	adds	r3, #36	; 0x24
 8008c60:	687a      	ldr	r2, [r7, #4]
 8008c62:	4611      	mov	r1, r2
 8008c64:	4618      	mov	r0, r3
 8008c66:	f000 fdcf 	bl	8009808 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008c6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c6c:	f000 f8b8 	bl	8008de0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008c70:	f000 fbfe 	bl	8009470 <xTaskResumeAll>
 8008c74:	4603      	mov	r3, r0
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d189      	bne.n	8008b8e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008c7a:	4b10      	ldr	r3, [pc, #64]	; (8008cbc <xQueueReceive+0x1bc>)
 8008c7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c80:	601a      	str	r2, [r3, #0]
 8008c82:	f3bf 8f4f 	dsb	sy
 8008c86:	f3bf 8f6f 	isb	sy
 8008c8a:	e780      	b.n	8008b8e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008c8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c8e:	f000 f8a7 	bl	8008de0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008c92:	f000 fbed 	bl	8009470 <xTaskResumeAll>
 8008c96:	e77a      	b.n	8008b8e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008c98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c9a:	f000 f8a1 	bl	8008de0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008c9e:	f000 fbe7 	bl	8009470 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008ca2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ca4:	f000 f8ee 	bl	8008e84 <prvIsQueueEmpty>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	f43f af6f 	beq.w	8008b8e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008cb0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3730      	adds	r7, #48	; 0x30
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}
 8008cba:	bf00      	nop
 8008cbc:	e000ed04 	.word	0xe000ed04

08008cc0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b086      	sub	sp, #24
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	60f8      	str	r0, [r7, #12]
 8008cc8:	60b9      	str	r1, [r7, #8]
 8008cca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008ccc:	2300      	movs	r3, #0
 8008cce:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cd4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d10d      	bne.n	8008cfa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d14d      	bne.n	8008d82 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	689b      	ldr	r3, [r3, #8]
 8008cea:	4618      	mov	r0, r3
 8008cec:	f000 ffbc 	bl	8009c68 <xTaskPriorityDisinherit>
 8008cf0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	609a      	str	r2, [r3, #8]
 8008cf8:	e043      	b.n	8008d82 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d119      	bne.n	8008d34 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	6858      	ldr	r0, [r3, #4]
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d08:	461a      	mov	r2, r3
 8008d0a:	68b9      	ldr	r1, [r7, #8]
 8008d0c:	f002 fed2 	bl	800bab4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	685a      	ldr	r2, [r3, #4]
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d18:	441a      	add	r2, r3
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	685a      	ldr	r2, [r3, #4]
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	689b      	ldr	r3, [r3, #8]
 8008d26:	429a      	cmp	r2, r3
 8008d28:	d32b      	bcc.n	8008d82 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681a      	ldr	r2, [r3, #0]
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	605a      	str	r2, [r3, #4]
 8008d32:	e026      	b.n	8008d82 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	68d8      	ldr	r0, [r3, #12]
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d3c:	461a      	mov	r2, r3
 8008d3e:	68b9      	ldr	r1, [r7, #8]
 8008d40:	f002 feb8 	bl	800bab4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	68da      	ldr	r2, [r3, #12]
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d4c:	425b      	negs	r3, r3
 8008d4e:	441a      	add	r2, r3
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	68da      	ldr	r2, [r3, #12]
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	429a      	cmp	r2, r3
 8008d5e:	d207      	bcs.n	8008d70 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	689a      	ldr	r2, [r3, #8]
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d68:	425b      	negs	r3, r3
 8008d6a:	441a      	add	r2, r3
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2b02      	cmp	r3, #2
 8008d74:	d105      	bne.n	8008d82 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d002      	beq.n	8008d82 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008d7c:	693b      	ldr	r3, [r7, #16]
 8008d7e:	3b01      	subs	r3, #1
 8008d80:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008d82:	693b      	ldr	r3, [r7, #16]
 8008d84:	1c5a      	adds	r2, r3, #1
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008d8a:	697b      	ldr	r3, [r7, #20]
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	3718      	adds	r7, #24
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}

08008d94 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b082      	sub	sp, #8
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
 8008d9c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d018      	beq.n	8008dd8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	68da      	ldr	r2, [r3, #12]
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dae:	441a      	add	r2, r3
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	68da      	ldr	r2, [r3, #12]
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	689b      	ldr	r3, [r3, #8]
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	d303      	bcc.n	8008dc8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681a      	ldr	r2, [r3, #0]
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	68d9      	ldr	r1, [r3, #12]
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dd0:	461a      	mov	r2, r3
 8008dd2:	6838      	ldr	r0, [r7, #0]
 8008dd4:	f002 fe6e 	bl	800bab4 <memcpy>
	}
}
 8008dd8:	bf00      	nop
 8008dda:	3708      	adds	r7, #8
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}

08008de0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b084      	sub	sp, #16
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008de8:	f001 fc7c 	bl	800a6e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008df2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008df4:	e011      	b.n	8008e1a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d012      	beq.n	8008e24 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	3324      	adds	r3, #36	; 0x24
 8008e02:	4618      	mov	r0, r3
 8008e04:	f000 fd50 	bl	80098a8 <xTaskRemoveFromEventList>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d001      	beq.n	8008e12 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008e0e:	f000 fe27 	bl	8009a60 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008e12:	7bfb      	ldrb	r3, [r7, #15]
 8008e14:	3b01      	subs	r3, #1
 8008e16:	b2db      	uxtb	r3, r3
 8008e18:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	dce9      	bgt.n	8008df6 <prvUnlockQueue+0x16>
 8008e22:	e000      	b.n	8008e26 <prvUnlockQueue+0x46>
					break;
 8008e24:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	22ff      	movs	r2, #255	; 0xff
 8008e2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008e2e:	f001 fc89 	bl	800a744 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008e32:	f001 fc57 	bl	800a6e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008e3c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008e3e:	e011      	b.n	8008e64 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	691b      	ldr	r3, [r3, #16]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d012      	beq.n	8008e6e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	3310      	adds	r3, #16
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f000 fd2b 	bl	80098a8 <xTaskRemoveFromEventList>
 8008e52:	4603      	mov	r3, r0
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d001      	beq.n	8008e5c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008e58:	f000 fe02 	bl	8009a60 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008e5c:	7bbb      	ldrb	r3, [r7, #14]
 8008e5e:	3b01      	subs	r3, #1
 8008e60:	b2db      	uxtb	r3, r3
 8008e62:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008e64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	dce9      	bgt.n	8008e40 <prvUnlockQueue+0x60>
 8008e6c:	e000      	b.n	8008e70 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008e6e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	22ff      	movs	r2, #255	; 0xff
 8008e74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008e78:	f001 fc64 	bl	800a744 <vPortExitCritical>
}
 8008e7c:	bf00      	nop
 8008e7e:	3710      	adds	r7, #16
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}

08008e84 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b084      	sub	sp, #16
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008e8c:	f001 fc2a 	bl	800a6e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d102      	bne.n	8008e9e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008e98:	2301      	movs	r3, #1
 8008e9a:	60fb      	str	r3, [r7, #12]
 8008e9c:	e001      	b.n	8008ea2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008ea2:	f001 fc4f 	bl	800a744 <vPortExitCritical>

	return xReturn;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	3710      	adds	r7, #16
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}

08008eb0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b084      	sub	sp, #16
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008eb8:	f001 fc14 	bl	800a6e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ec4:	429a      	cmp	r2, r3
 8008ec6:	d102      	bne.n	8008ece <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008ec8:	2301      	movs	r3, #1
 8008eca:	60fb      	str	r3, [r7, #12]
 8008ecc:	e001      	b.n	8008ed2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008ed2:	f001 fc37 	bl	800a744 <vPortExitCritical>

	return xReturn;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	3710      	adds	r7, #16
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}

08008ee0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b085      	sub	sp, #20
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008eea:	2300      	movs	r3, #0
 8008eec:	60fb      	str	r3, [r7, #12]
 8008eee:	e014      	b.n	8008f1a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008ef0:	4a0f      	ldr	r2, [pc, #60]	; (8008f30 <vQueueAddToRegistry+0x50>)
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d10b      	bne.n	8008f14 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008efc:	490c      	ldr	r1, [pc, #48]	; (8008f30 <vQueueAddToRegistry+0x50>)
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	683a      	ldr	r2, [r7, #0]
 8008f02:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008f06:	4a0a      	ldr	r2, [pc, #40]	; (8008f30 <vQueueAddToRegistry+0x50>)
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	00db      	lsls	r3, r3, #3
 8008f0c:	4413      	add	r3, r2
 8008f0e:	687a      	ldr	r2, [r7, #4]
 8008f10:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008f12:	e006      	b.n	8008f22 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	3301      	adds	r3, #1
 8008f18:	60fb      	str	r3, [r7, #12]
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	2b07      	cmp	r3, #7
 8008f1e:	d9e7      	bls.n	8008ef0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008f20:	bf00      	nop
 8008f22:	bf00      	nop
 8008f24:	3714      	adds	r7, #20
 8008f26:	46bd      	mov	sp, r7
 8008f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2c:	4770      	bx	lr
 8008f2e:	bf00      	nop
 8008f30:	200009c8 	.word	0x200009c8

08008f34 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b086      	sub	sp, #24
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	60f8      	str	r0, [r7, #12]
 8008f3c:	60b9      	str	r1, [r7, #8]
 8008f3e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008f44:	f001 fbce 	bl	800a6e4 <vPortEnterCritical>
 8008f48:	697b      	ldr	r3, [r7, #20]
 8008f4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008f4e:	b25b      	sxtb	r3, r3
 8008f50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f54:	d103      	bne.n	8008f5e <vQueueWaitForMessageRestricted+0x2a>
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f64:	b25b      	sxtb	r3, r3
 8008f66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f6a:	d103      	bne.n	8008f74 <vQueueWaitForMessageRestricted+0x40>
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008f74:	f001 fbe6 	bl	800a744 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008f78:	697b      	ldr	r3, [r7, #20]
 8008f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d106      	bne.n	8008f8e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008f80:	697b      	ldr	r3, [r7, #20]
 8008f82:	3324      	adds	r3, #36	; 0x24
 8008f84:	687a      	ldr	r2, [r7, #4]
 8008f86:	68b9      	ldr	r1, [r7, #8]
 8008f88:	4618      	mov	r0, r3
 8008f8a:	f000 fc61 	bl	8009850 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008f8e:	6978      	ldr	r0, [r7, #20]
 8008f90:	f7ff ff26 	bl	8008de0 <prvUnlockQueue>
	}
 8008f94:	bf00      	nop
 8008f96:	3718      	adds	r7, #24
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd80      	pop	{r7, pc}

08008f9c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b08e      	sub	sp, #56	; 0x38
 8008fa0:	af04      	add	r7, sp, #16
 8008fa2:	60f8      	str	r0, [r7, #12]
 8008fa4:	60b9      	str	r1, [r7, #8]
 8008fa6:	607a      	str	r2, [r7, #4]
 8008fa8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d10a      	bne.n	8008fc6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8008fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fb4:	f383 8811 	msr	BASEPRI, r3
 8008fb8:	f3bf 8f6f 	isb	sy
 8008fbc:	f3bf 8f4f 	dsb	sy
 8008fc0:	623b      	str	r3, [r7, #32]
}
 8008fc2:	bf00      	nop
 8008fc4:	e7fe      	b.n	8008fc4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d10a      	bne.n	8008fe2 <xTaskCreateStatic+0x46>
	__asm volatile
 8008fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd0:	f383 8811 	msr	BASEPRI, r3
 8008fd4:	f3bf 8f6f 	isb	sy
 8008fd8:	f3bf 8f4f 	dsb	sy
 8008fdc:	61fb      	str	r3, [r7, #28]
}
 8008fde:	bf00      	nop
 8008fe0:	e7fe      	b.n	8008fe0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008fe2:	23bc      	movs	r3, #188	; 0xbc
 8008fe4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008fe6:	693b      	ldr	r3, [r7, #16]
 8008fe8:	2bbc      	cmp	r3, #188	; 0xbc
 8008fea:	d00a      	beq.n	8009002 <xTaskCreateStatic+0x66>
	__asm volatile
 8008fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff0:	f383 8811 	msr	BASEPRI, r3
 8008ff4:	f3bf 8f6f 	isb	sy
 8008ff8:	f3bf 8f4f 	dsb	sy
 8008ffc:	61bb      	str	r3, [r7, #24]
}
 8008ffe:	bf00      	nop
 8009000:	e7fe      	b.n	8009000 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009002:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009006:	2b00      	cmp	r3, #0
 8009008:	d01e      	beq.n	8009048 <xTaskCreateStatic+0xac>
 800900a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800900c:	2b00      	cmp	r3, #0
 800900e:	d01b      	beq.n	8009048 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009012:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009016:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009018:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800901a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800901c:	2202      	movs	r2, #2
 800901e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009022:	2300      	movs	r3, #0
 8009024:	9303      	str	r3, [sp, #12]
 8009026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009028:	9302      	str	r3, [sp, #8]
 800902a:	f107 0314 	add.w	r3, r7, #20
 800902e:	9301      	str	r3, [sp, #4]
 8009030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009032:	9300      	str	r3, [sp, #0]
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	687a      	ldr	r2, [r7, #4]
 8009038:	68b9      	ldr	r1, [r7, #8]
 800903a:	68f8      	ldr	r0, [r7, #12]
 800903c:	f000 f850 	bl	80090e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009040:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009042:	f000 f8f3 	bl	800922c <prvAddNewTaskToReadyList>
 8009046:	e001      	b.n	800904c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009048:	2300      	movs	r3, #0
 800904a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800904c:	697b      	ldr	r3, [r7, #20]
	}
 800904e:	4618      	mov	r0, r3
 8009050:	3728      	adds	r7, #40	; 0x28
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}

08009056 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009056:	b580      	push	{r7, lr}
 8009058:	b08c      	sub	sp, #48	; 0x30
 800905a:	af04      	add	r7, sp, #16
 800905c:	60f8      	str	r0, [r7, #12]
 800905e:	60b9      	str	r1, [r7, #8]
 8009060:	603b      	str	r3, [r7, #0]
 8009062:	4613      	mov	r3, r2
 8009064:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009066:	88fb      	ldrh	r3, [r7, #6]
 8009068:	009b      	lsls	r3, r3, #2
 800906a:	4618      	mov	r0, r3
 800906c:	f001 fc5c 	bl	800a928 <pvPortMalloc>
 8009070:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d00e      	beq.n	8009096 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009078:	20bc      	movs	r0, #188	; 0xbc
 800907a:	f001 fc55 	bl	800a928 <pvPortMalloc>
 800907e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009080:	69fb      	ldr	r3, [r7, #28]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d003      	beq.n	800908e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009086:	69fb      	ldr	r3, [r7, #28]
 8009088:	697a      	ldr	r2, [r7, #20]
 800908a:	631a      	str	r2, [r3, #48]	; 0x30
 800908c:	e005      	b.n	800909a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800908e:	6978      	ldr	r0, [r7, #20]
 8009090:	f001 fd16 	bl	800aac0 <vPortFree>
 8009094:	e001      	b.n	800909a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009096:	2300      	movs	r3, #0
 8009098:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800909a:	69fb      	ldr	r3, [r7, #28]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d017      	beq.n	80090d0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80090a0:	69fb      	ldr	r3, [r7, #28]
 80090a2:	2200      	movs	r2, #0
 80090a4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80090a8:	88fa      	ldrh	r2, [r7, #6]
 80090aa:	2300      	movs	r3, #0
 80090ac:	9303      	str	r3, [sp, #12]
 80090ae:	69fb      	ldr	r3, [r7, #28]
 80090b0:	9302      	str	r3, [sp, #8]
 80090b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090b4:	9301      	str	r3, [sp, #4]
 80090b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090b8:	9300      	str	r3, [sp, #0]
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	68b9      	ldr	r1, [r7, #8]
 80090be:	68f8      	ldr	r0, [r7, #12]
 80090c0:	f000 f80e 	bl	80090e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80090c4:	69f8      	ldr	r0, [r7, #28]
 80090c6:	f000 f8b1 	bl	800922c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80090ca:	2301      	movs	r3, #1
 80090cc:	61bb      	str	r3, [r7, #24]
 80090ce:	e002      	b.n	80090d6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80090d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80090d4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80090d6:	69bb      	ldr	r3, [r7, #24]
	}
 80090d8:	4618      	mov	r0, r3
 80090da:	3720      	adds	r7, #32
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}

080090e0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b088      	sub	sp, #32
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	60f8      	str	r0, [r7, #12]
 80090e8:	60b9      	str	r1, [r7, #8]
 80090ea:	607a      	str	r2, [r7, #4]
 80090ec:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80090ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090f0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	009b      	lsls	r3, r3, #2
 80090f6:	461a      	mov	r2, r3
 80090f8:	21a5      	movs	r1, #165	; 0xa5
 80090fa:	f002 fce9 	bl	800bad0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80090fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009100:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009108:	3b01      	subs	r3, #1
 800910a:	009b      	lsls	r3, r3, #2
 800910c:	4413      	add	r3, r2
 800910e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009110:	69bb      	ldr	r3, [r7, #24]
 8009112:	f023 0307 	bic.w	r3, r3, #7
 8009116:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009118:	69bb      	ldr	r3, [r7, #24]
 800911a:	f003 0307 	and.w	r3, r3, #7
 800911e:	2b00      	cmp	r3, #0
 8009120:	d00a      	beq.n	8009138 <prvInitialiseNewTask+0x58>
	__asm volatile
 8009122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009126:	f383 8811 	msr	BASEPRI, r3
 800912a:	f3bf 8f6f 	isb	sy
 800912e:	f3bf 8f4f 	dsb	sy
 8009132:	617b      	str	r3, [r7, #20]
}
 8009134:	bf00      	nop
 8009136:	e7fe      	b.n	8009136 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d01f      	beq.n	800917e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800913e:	2300      	movs	r3, #0
 8009140:	61fb      	str	r3, [r7, #28]
 8009142:	e012      	b.n	800916a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009144:	68ba      	ldr	r2, [r7, #8]
 8009146:	69fb      	ldr	r3, [r7, #28]
 8009148:	4413      	add	r3, r2
 800914a:	7819      	ldrb	r1, [r3, #0]
 800914c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800914e:	69fb      	ldr	r3, [r7, #28]
 8009150:	4413      	add	r3, r2
 8009152:	3334      	adds	r3, #52	; 0x34
 8009154:	460a      	mov	r2, r1
 8009156:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009158:	68ba      	ldr	r2, [r7, #8]
 800915a:	69fb      	ldr	r3, [r7, #28]
 800915c:	4413      	add	r3, r2
 800915e:	781b      	ldrb	r3, [r3, #0]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d006      	beq.n	8009172 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009164:	69fb      	ldr	r3, [r7, #28]
 8009166:	3301      	adds	r3, #1
 8009168:	61fb      	str	r3, [r7, #28]
 800916a:	69fb      	ldr	r3, [r7, #28]
 800916c:	2b0f      	cmp	r3, #15
 800916e:	d9e9      	bls.n	8009144 <prvInitialiseNewTask+0x64>
 8009170:	e000      	b.n	8009174 <prvInitialiseNewTask+0x94>
			{
				break;
 8009172:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009176:	2200      	movs	r2, #0
 8009178:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800917c:	e003      	b.n	8009186 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800917e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009180:	2200      	movs	r2, #0
 8009182:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009188:	2b37      	cmp	r3, #55	; 0x37
 800918a:	d901      	bls.n	8009190 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800918c:	2337      	movs	r3, #55	; 0x37
 800918e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009192:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009194:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009198:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800919a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800919c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800919e:	2200      	movs	r2, #0
 80091a0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80091a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091a4:	3304      	adds	r3, #4
 80091a6:	4618      	mov	r0, r3
 80091a8:	f7ff f978 	bl	800849c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80091ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ae:	3318      	adds	r3, #24
 80091b0:	4618      	mov	r0, r3
 80091b2:	f7ff f973 	bl	800849c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80091b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091ba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091be:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80091c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091c4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80091c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091ca:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80091cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ce:	2200      	movs	r2, #0
 80091d0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80091d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091d6:	2200      	movs	r2, #0
 80091d8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80091dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091de:	3354      	adds	r3, #84	; 0x54
 80091e0:	2260      	movs	r2, #96	; 0x60
 80091e2:	2100      	movs	r1, #0
 80091e4:	4618      	mov	r0, r3
 80091e6:	f002 fc73 	bl	800bad0 <memset>
 80091ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ec:	4a0c      	ldr	r2, [pc, #48]	; (8009220 <prvInitialiseNewTask+0x140>)
 80091ee:	659a      	str	r2, [r3, #88]	; 0x58
 80091f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091f2:	4a0c      	ldr	r2, [pc, #48]	; (8009224 <prvInitialiseNewTask+0x144>)
 80091f4:	65da      	str	r2, [r3, #92]	; 0x5c
 80091f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091f8:	4a0b      	ldr	r2, [pc, #44]	; (8009228 <prvInitialiseNewTask+0x148>)
 80091fa:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80091fc:	683a      	ldr	r2, [r7, #0]
 80091fe:	68f9      	ldr	r1, [r7, #12]
 8009200:	69b8      	ldr	r0, [r7, #24]
 8009202:	f001 f941 	bl	800a488 <pxPortInitialiseStack>
 8009206:	4602      	mov	r2, r0
 8009208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800920a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800920c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800920e:	2b00      	cmp	r3, #0
 8009210:	d002      	beq.n	8009218 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009214:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009216:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009218:	bf00      	nop
 800921a:	3720      	adds	r7, #32
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}
 8009220:	0800c1cc 	.word	0x0800c1cc
 8009224:	0800c1ec 	.word	0x0800c1ec
 8009228:	0800c1ac 	.word	0x0800c1ac

0800922c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b082      	sub	sp, #8
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009234:	f001 fa56 	bl	800a6e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009238:	4b2d      	ldr	r3, [pc, #180]	; (80092f0 <prvAddNewTaskToReadyList+0xc4>)
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	3301      	adds	r3, #1
 800923e:	4a2c      	ldr	r2, [pc, #176]	; (80092f0 <prvAddNewTaskToReadyList+0xc4>)
 8009240:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009242:	4b2c      	ldr	r3, [pc, #176]	; (80092f4 <prvAddNewTaskToReadyList+0xc8>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d109      	bne.n	800925e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800924a:	4a2a      	ldr	r2, [pc, #168]	; (80092f4 <prvAddNewTaskToReadyList+0xc8>)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009250:	4b27      	ldr	r3, [pc, #156]	; (80092f0 <prvAddNewTaskToReadyList+0xc4>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	2b01      	cmp	r3, #1
 8009256:	d110      	bne.n	800927a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009258:	f000 fc26 	bl	8009aa8 <prvInitialiseTaskLists>
 800925c:	e00d      	b.n	800927a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800925e:	4b26      	ldr	r3, [pc, #152]	; (80092f8 <prvAddNewTaskToReadyList+0xcc>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d109      	bne.n	800927a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009266:	4b23      	ldr	r3, [pc, #140]	; (80092f4 <prvAddNewTaskToReadyList+0xc8>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009270:	429a      	cmp	r2, r3
 8009272:	d802      	bhi.n	800927a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009274:	4a1f      	ldr	r2, [pc, #124]	; (80092f4 <prvAddNewTaskToReadyList+0xc8>)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800927a:	4b20      	ldr	r3, [pc, #128]	; (80092fc <prvAddNewTaskToReadyList+0xd0>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	3301      	adds	r3, #1
 8009280:	4a1e      	ldr	r2, [pc, #120]	; (80092fc <prvAddNewTaskToReadyList+0xd0>)
 8009282:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009284:	4b1d      	ldr	r3, [pc, #116]	; (80092fc <prvAddNewTaskToReadyList+0xd0>)
 8009286:	681a      	ldr	r2, [r3, #0]
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009290:	4b1b      	ldr	r3, [pc, #108]	; (8009300 <prvAddNewTaskToReadyList+0xd4>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	429a      	cmp	r2, r3
 8009296:	d903      	bls.n	80092a0 <prvAddNewTaskToReadyList+0x74>
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800929c:	4a18      	ldr	r2, [pc, #96]	; (8009300 <prvAddNewTaskToReadyList+0xd4>)
 800929e:	6013      	str	r3, [r2, #0]
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092a4:	4613      	mov	r3, r2
 80092a6:	009b      	lsls	r3, r3, #2
 80092a8:	4413      	add	r3, r2
 80092aa:	009b      	lsls	r3, r3, #2
 80092ac:	4a15      	ldr	r2, [pc, #84]	; (8009304 <prvAddNewTaskToReadyList+0xd8>)
 80092ae:	441a      	add	r2, r3
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	3304      	adds	r3, #4
 80092b4:	4619      	mov	r1, r3
 80092b6:	4610      	mov	r0, r2
 80092b8:	f7ff f8fd 	bl	80084b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80092bc:	f001 fa42 	bl	800a744 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80092c0:	4b0d      	ldr	r3, [pc, #52]	; (80092f8 <prvAddNewTaskToReadyList+0xcc>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d00e      	beq.n	80092e6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80092c8:	4b0a      	ldr	r3, [pc, #40]	; (80092f4 <prvAddNewTaskToReadyList+0xc8>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092d2:	429a      	cmp	r2, r3
 80092d4:	d207      	bcs.n	80092e6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80092d6:	4b0c      	ldr	r3, [pc, #48]	; (8009308 <prvAddNewTaskToReadyList+0xdc>)
 80092d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092dc:	601a      	str	r2, [r3, #0]
 80092de:	f3bf 8f4f 	dsb	sy
 80092e2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80092e6:	bf00      	nop
 80092e8:	3708      	adds	r7, #8
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}
 80092ee:	bf00      	nop
 80092f0:	20000edc 	.word	0x20000edc
 80092f4:	20000a08 	.word	0x20000a08
 80092f8:	20000ee8 	.word	0x20000ee8
 80092fc:	20000ef8 	.word	0x20000ef8
 8009300:	20000ee4 	.word	0x20000ee4
 8009304:	20000a0c 	.word	0x20000a0c
 8009308:	e000ed04 	.word	0xe000ed04

0800930c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800930c:	b580      	push	{r7, lr}
 800930e:	b084      	sub	sp, #16
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009314:	2300      	movs	r3, #0
 8009316:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d017      	beq.n	800934e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800931e:	4b13      	ldr	r3, [pc, #76]	; (800936c <vTaskDelay+0x60>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d00a      	beq.n	800933c <vTaskDelay+0x30>
	__asm volatile
 8009326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800932a:	f383 8811 	msr	BASEPRI, r3
 800932e:	f3bf 8f6f 	isb	sy
 8009332:	f3bf 8f4f 	dsb	sy
 8009336:	60bb      	str	r3, [r7, #8]
}
 8009338:	bf00      	nop
 800933a:	e7fe      	b.n	800933a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800933c:	f000 f88a 	bl	8009454 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009340:	2100      	movs	r1, #0
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f000 fcfe 	bl	8009d44 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009348:	f000 f892 	bl	8009470 <xTaskResumeAll>
 800934c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d107      	bne.n	8009364 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009354:	4b06      	ldr	r3, [pc, #24]	; (8009370 <vTaskDelay+0x64>)
 8009356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800935a:	601a      	str	r2, [r3, #0]
 800935c:	f3bf 8f4f 	dsb	sy
 8009360:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009364:	bf00      	nop
 8009366:	3710      	adds	r7, #16
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}
 800936c:	20000f04 	.word	0x20000f04
 8009370:	e000ed04 	.word	0xe000ed04

08009374 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b08a      	sub	sp, #40	; 0x28
 8009378:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800937a:	2300      	movs	r3, #0
 800937c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800937e:	2300      	movs	r3, #0
 8009380:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009382:	463a      	mov	r2, r7
 8009384:	1d39      	adds	r1, r7, #4
 8009386:	f107 0308 	add.w	r3, r7, #8
 800938a:	4618      	mov	r0, r3
 800938c:	f7ff f832 	bl	80083f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009390:	6839      	ldr	r1, [r7, #0]
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	68ba      	ldr	r2, [r7, #8]
 8009396:	9202      	str	r2, [sp, #8]
 8009398:	9301      	str	r3, [sp, #4]
 800939a:	2300      	movs	r3, #0
 800939c:	9300      	str	r3, [sp, #0]
 800939e:	2300      	movs	r3, #0
 80093a0:	460a      	mov	r2, r1
 80093a2:	4924      	ldr	r1, [pc, #144]	; (8009434 <vTaskStartScheduler+0xc0>)
 80093a4:	4824      	ldr	r0, [pc, #144]	; (8009438 <vTaskStartScheduler+0xc4>)
 80093a6:	f7ff fdf9 	bl	8008f9c <xTaskCreateStatic>
 80093aa:	4603      	mov	r3, r0
 80093ac:	4a23      	ldr	r2, [pc, #140]	; (800943c <vTaskStartScheduler+0xc8>)
 80093ae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80093b0:	4b22      	ldr	r3, [pc, #136]	; (800943c <vTaskStartScheduler+0xc8>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d002      	beq.n	80093be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80093b8:	2301      	movs	r3, #1
 80093ba:	617b      	str	r3, [r7, #20]
 80093bc:	e001      	b.n	80093c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80093be:	2300      	movs	r3, #0
 80093c0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80093c2:	697b      	ldr	r3, [r7, #20]
 80093c4:	2b01      	cmp	r3, #1
 80093c6:	d102      	bne.n	80093ce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80093c8:	f000 fd10 	bl	8009dec <xTimerCreateTimerTask>
 80093cc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80093ce:	697b      	ldr	r3, [r7, #20]
 80093d0:	2b01      	cmp	r3, #1
 80093d2:	d11b      	bne.n	800940c <vTaskStartScheduler+0x98>
	__asm volatile
 80093d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093d8:	f383 8811 	msr	BASEPRI, r3
 80093dc:	f3bf 8f6f 	isb	sy
 80093e0:	f3bf 8f4f 	dsb	sy
 80093e4:	613b      	str	r3, [r7, #16]
}
 80093e6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80093e8:	4b15      	ldr	r3, [pc, #84]	; (8009440 <vTaskStartScheduler+0xcc>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	3354      	adds	r3, #84	; 0x54
 80093ee:	4a15      	ldr	r2, [pc, #84]	; (8009444 <vTaskStartScheduler+0xd0>)
 80093f0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80093f2:	4b15      	ldr	r3, [pc, #84]	; (8009448 <vTaskStartScheduler+0xd4>)
 80093f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80093f8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80093fa:	4b14      	ldr	r3, [pc, #80]	; (800944c <vTaskStartScheduler+0xd8>)
 80093fc:	2201      	movs	r2, #1
 80093fe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009400:	4b13      	ldr	r3, [pc, #76]	; (8009450 <vTaskStartScheduler+0xdc>)
 8009402:	2200      	movs	r2, #0
 8009404:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009406:	f001 f8cb 	bl	800a5a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800940a:	e00e      	b.n	800942a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800940c:	697b      	ldr	r3, [r7, #20]
 800940e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009412:	d10a      	bne.n	800942a <vTaskStartScheduler+0xb6>
	__asm volatile
 8009414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009418:	f383 8811 	msr	BASEPRI, r3
 800941c:	f3bf 8f6f 	isb	sy
 8009420:	f3bf 8f4f 	dsb	sy
 8009424:	60fb      	str	r3, [r7, #12]
}
 8009426:	bf00      	nop
 8009428:	e7fe      	b.n	8009428 <vTaskStartScheduler+0xb4>
}
 800942a:	bf00      	nop
 800942c:	3718      	adds	r7, #24
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}
 8009432:	bf00      	nop
 8009434:	0800beb0 	.word	0x0800beb0
 8009438:	08009a79 	.word	0x08009a79
 800943c:	20000f00 	.word	0x20000f00
 8009440:	20000a08 	.word	0x20000a08
 8009444:	20000100 	.word	0x20000100
 8009448:	20000efc 	.word	0x20000efc
 800944c:	20000ee8 	.word	0x20000ee8
 8009450:	20000ee0 	.word	0x20000ee0

08009454 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009454:	b480      	push	{r7}
 8009456:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009458:	4b04      	ldr	r3, [pc, #16]	; (800946c <vTaskSuspendAll+0x18>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	3301      	adds	r3, #1
 800945e:	4a03      	ldr	r2, [pc, #12]	; (800946c <vTaskSuspendAll+0x18>)
 8009460:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009462:	bf00      	nop
 8009464:	46bd      	mov	sp, r7
 8009466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946a:	4770      	bx	lr
 800946c:	20000f04 	.word	0x20000f04

08009470 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b084      	sub	sp, #16
 8009474:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009476:	2300      	movs	r3, #0
 8009478:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800947a:	2300      	movs	r3, #0
 800947c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800947e:	4b42      	ldr	r3, [pc, #264]	; (8009588 <xTaskResumeAll+0x118>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d10a      	bne.n	800949c <xTaskResumeAll+0x2c>
	__asm volatile
 8009486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800948a:	f383 8811 	msr	BASEPRI, r3
 800948e:	f3bf 8f6f 	isb	sy
 8009492:	f3bf 8f4f 	dsb	sy
 8009496:	603b      	str	r3, [r7, #0]
}
 8009498:	bf00      	nop
 800949a:	e7fe      	b.n	800949a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800949c:	f001 f922 	bl	800a6e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80094a0:	4b39      	ldr	r3, [pc, #228]	; (8009588 <xTaskResumeAll+0x118>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	3b01      	subs	r3, #1
 80094a6:	4a38      	ldr	r2, [pc, #224]	; (8009588 <xTaskResumeAll+0x118>)
 80094a8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80094aa:	4b37      	ldr	r3, [pc, #220]	; (8009588 <xTaskResumeAll+0x118>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d162      	bne.n	8009578 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80094b2:	4b36      	ldr	r3, [pc, #216]	; (800958c <xTaskResumeAll+0x11c>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d05e      	beq.n	8009578 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80094ba:	e02f      	b.n	800951c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094bc:	4b34      	ldr	r3, [pc, #208]	; (8009590 <xTaskResumeAll+0x120>)
 80094be:	68db      	ldr	r3, [r3, #12]
 80094c0:	68db      	ldr	r3, [r3, #12]
 80094c2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	3318      	adds	r3, #24
 80094c8:	4618      	mov	r0, r3
 80094ca:	f7ff f851 	bl	8008570 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	3304      	adds	r3, #4
 80094d2:	4618      	mov	r0, r3
 80094d4:	f7ff f84c 	bl	8008570 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094dc:	4b2d      	ldr	r3, [pc, #180]	; (8009594 <xTaskResumeAll+0x124>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	429a      	cmp	r2, r3
 80094e2:	d903      	bls.n	80094ec <xTaskResumeAll+0x7c>
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094e8:	4a2a      	ldr	r2, [pc, #168]	; (8009594 <xTaskResumeAll+0x124>)
 80094ea:	6013      	str	r3, [r2, #0]
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094f0:	4613      	mov	r3, r2
 80094f2:	009b      	lsls	r3, r3, #2
 80094f4:	4413      	add	r3, r2
 80094f6:	009b      	lsls	r3, r3, #2
 80094f8:	4a27      	ldr	r2, [pc, #156]	; (8009598 <xTaskResumeAll+0x128>)
 80094fa:	441a      	add	r2, r3
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	3304      	adds	r3, #4
 8009500:	4619      	mov	r1, r3
 8009502:	4610      	mov	r0, r2
 8009504:	f7fe ffd7 	bl	80084b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800950c:	4b23      	ldr	r3, [pc, #140]	; (800959c <xTaskResumeAll+0x12c>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009512:	429a      	cmp	r2, r3
 8009514:	d302      	bcc.n	800951c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009516:	4b22      	ldr	r3, [pc, #136]	; (80095a0 <xTaskResumeAll+0x130>)
 8009518:	2201      	movs	r2, #1
 800951a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800951c:	4b1c      	ldr	r3, [pc, #112]	; (8009590 <xTaskResumeAll+0x120>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d1cb      	bne.n	80094bc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d001      	beq.n	800952e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800952a:	f000 fb5f 	bl	8009bec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800952e:	4b1d      	ldr	r3, [pc, #116]	; (80095a4 <xTaskResumeAll+0x134>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d010      	beq.n	800955c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800953a:	f000 f847 	bl	80095cc <xTaskIncrementTick>
 800953e:	4603      	mov	r3, r0
 8009540:	2b00      	cmp	r3, #0
 8009542:	d002      	beq.n	800954a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009544:	4b16      	ldr	r3, [pc, #88]	; (80095a0 <xTaskResumeAll+0x130>)
 8009546:	2201      	movs	r2, #1
 8009548:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	3b01      	subs	r3, #1
 800954e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d1f1      	bne.n	800953a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009556:	4b13      	ldr	r3, [pc, #76]	; (80095a4 <xTaskResumeAll+0x134>)
 8009558:	2200      	movs	r2, #0
 800955a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800955c:	4b10      	ldr	r3, [pc, #64]	; (80095a0 <xTaskResumeAll+0x130>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d009      	beq.n	8009578 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009564:	2301      	movs	r3, #1
 8009566:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009568:	4b0f      	ldr	r3, [pc, #60]	; (80095a8 <xTaskResumeAll+0x138>)
 800956a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800956e:	601a      	str	r2, [r3, #0]
 8009570:	f3bf 8f4f 	dsb	sy
 8009574:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009578:	f001 f8e4 	bl	800a744 <vPortExitCritical>

	return xAlreadyYielded;
 800957c:	68bb      	ldr	r3, [r7, #8]
}
 800957e:	4618      	mov	r0, r3
 8009580:	3710      	adds	r7, #16
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}
 8009586:	bf00      	nop
 8009588:	20000f04 	.word	0x20000f04
 800958c:	20000edc 	.word	0x20000edc
 8009590:	20000e9c 	.word	0x20000e9c
 8009594:	20000ee4 	.word	0x20000ee4
 8009598:	20000a0c 	.word	0x20000a0c
 800959c:	20000a08 	.word	0x20000a08
 80095a0:	20000ef0 	.word	0x20000ef0
 80095a4:	20000eec 	.word	0x20000eec
 80095a8:	e000ed04 	.word	0xe000ed04

080095ac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80095ac:	b480      	push	{r7}
 80095ae:	b083      	sub	sp, #12
 80095b0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80095b2:	4b05      	ldr	r3, [pc, #20]	; (80095c8 <xTaskGetTickCount+0x1c>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80095b8:	687b      	ldr	r3, [r7, #4]
}
 80095ba:	4618      	mov	r0, r3
 80095bc:	370c      	adds	r7, #12
 80095be:	46bd      	mov	sp, r7
 80095c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c4:	4770      	bx	lr
 80095c6:	bf00      	nop
 80095c8:	20000ee0 	.word	0x20000ee0

080095cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b086      	sub	sp, #24
 80095d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80095d2:	2300      	movs	r3, #0
 80095d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80095d6:	4b4f      	ldr	r3, [pc, #316]	; (8009714 <xTaskIncrementTick+0x148>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	f040 808f 	bne.w	80096fe <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80095e0:	4b4d      	ldr	r3, [pc, #308]	; (8009718 <xTaskIncrementTick+0x14c>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	3301      	adds	r3, #1
 80095e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80095e8:	4a4b      	ldr	r2, [pc, #300]	; (8009718 <xTaskIncrementTick+0x14c>)
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80095ee:	693b      	ldr	r3, [r7, #16]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d120      	bne.n	8009636 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80095f4:	4b49      	ldr	r3, [pc, #292]	; (800971c <xTaskIncrementTick+0x150>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d00a      	beq.n	8009614 <xTaskIncrementTick+0x48>
	__asm volatile
 80095fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009602:	f383 8811 	msr	BASEPRI, r3
 8009606:	f3bf 8f6f 	isb	sy
 800960a:	f3bf 8f4f 	dsb	sy
 800960e:	603b      	str	r3, [r7, #0]
}
 8009610:	bf00      	nop
 8009612:	e7fe      	b.n	8009612 <xTaskIncrementTick+0x46>
 8009614:	4b41      	ldr	r3, [pc, #260]	; (800971c <xTaskIncrementTick+0x150>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	60fb      	str	r3, [r7, #12]
 800961a:	4b41      	ldr	r3, [pc, #260]	; (8009720 <xTaskIncrementTick+0x154>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	4a3f      	ldr	r2, [pc, #252]	; (800971c <xTaskIncrementTick+0x150>)
 8009620:	6013      	str	r3, [r2, #0]
 8009622:	4a3f      	ldr	r2, [pc, #252]	; (8009720 <xTaskIncrementTick+0x154>)
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	6013      	str	r3, [r2, #0]
 8009628:	4b3e      	ldr	r3, [pc, #248]	; (8009724 <xTaskIncrementTick+0x158>)
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	3301      	adds	r3, #1
 800962e:	4a3d      	ldr	r2, [pc, #244]	; (8009724 <xTaskIncrementTick+0x158>)
 8009630:	6013      	str	r3, [r2, #0]
 8009632:	f000 fadb 	bl	8009bec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009636:	4b3c      	ldr	r3, [pc, #240]	; (8009728 <xTaskIncrementTick+0x15c>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	693a      	ldr	r2, [r7, #16]
 800963c:	429a      	cmp	r2, r3
 800963e:	d349      	bcc.n	80096d4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009640:	4b36      	ldr	r3, [pc, #216]	; (800971c <xTaskIncrementTick+0x150>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d104      	bne.n	8009654 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800964a:	4b37      	ldr	r3, [pc, #220]	; (8009728 <xTaskIncrementTick+0x15c>)
 800964c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009650:	601a      	str	r2, [r3, #0]
					break;
 8009652:	e03f      	b.n	80096d4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009654:	4b31      	ldr	r3, [pc, #196]	; (800971c <xTaskIncrementTick+0x150>)
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	68db      	ldr	r3, [r3, #12]
 800965a:	68db      	ldr	r3, [r3, #12]
 800965c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800965e:	68bb      	ldr	r3, [r7, #8]
 8009660:	685b      	ldr	r3, [r3, #4]
 8009662:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009664:	693a      	ldr	r2, [r7, #16]
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	429a      	cmp	r2, r3
 800966a:	d203      	bcs.n	8009674 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800966c:	4a2e      	ldr	r2, [pc, #184]	; (8009728 <xTaskIncrementTick+0x15c>)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009672:	e02f      	b.n	80096d4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	3304      	adds	r3, #4
 8009678:	4618      	mov	r0, r3
 800967a:	f7fe ff79 	bl	8008570 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009682:	2b00      	cmp	r3, #0
 8009684:	d004      	beq.n	8009690 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	3318      	adds	r3, #24
 800968a:	4618      	mov	r0, r3
 800968c:	f7fe ff70 	bl	8008570 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009694:	4b25      	ldr	r3, [pc, #148]	; (800972c <xTaskIncrementTick+0x160>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	429a      	cmp	r2, r3
 800969a:	d903      	bls.n	80096a4 <xTaskIncrementTick+0xd8>
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096a0:	4a22      	ldr	r2, [pc, #136]	; (800972c <xTaskIncrementTick+0x160>)
 80096a2:	6013      	str	r3, [r2, #0]
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096a8:	4613      	mov	r3, r2
 80096aa:	009b      	lsls	r3, r3, #2
 80096ac:	4413      	add	r3, r2
 80096ae:	009b      	lsls	r3, r3, #2
 80096b0:	4a1f      	ldr	r2, [pc, #124]	; (8009730 <xTaskIncrementTick+0x164>)
 80096b2:	441a      	add	r2, r3
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	3304      	adds	r3, #4
 80096b8:	4619      	mov	r1, r3
 80096ba:	4610      	mov	r0, r2
 80096bc:	f7fe fefb 	bl	80084b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096c4:	4b1b      	ldr	r3, [pc, #108]	; (8009734 <xTaskIncrementTick+0x168>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096ca:	429a      	cmp	r2, r3
 80096cc:	d3b8      	bcc.n	8009640 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80096ce:	2301      	movs	r3, #1
 80096d0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80096d2:	e7b5      	b.n	8009640 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80096d4:	4b17      	ldr	r3, [pc, #92]	; (8009734 <xTaskIncrementTick+0x168>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096da:	4915      	ldr	r1, [pc, #84]	; (8009730 <xTaskIncrementTick+0x164>)
 80096dc:	4613      	mov	r3, r2
 80096de:	009b      	lsls	r3, r3, #2
 80096e0:	4413      	add	r3, r2
 80096e2:	009b      	lsls	r3, r3, #2
 80096e4:	440b      	add	r3, r1
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	2b01      	cmp	r3, #1
 80096ea:	d901      	bls.n	80096f0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80096ec:	2301      	movs	r3, #1
 80096ee:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80096f0:	4b11      	ldr	r3, [pc, #68]	; (8009738 <xTaskIncrementTick+0x16c>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d007      	beq.n	8009708 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80096f8:	2301      	movs	r3, #1
 80096fa:	617b      	str	r3, [r7, #20]
 80096fc:	e004      	b.n	8009708 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80096fe:	4b0f      	ldr	r3, [pc, #60]	; (800973c <xTaskIncrementTick+0x170>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	3301      	adds	r3, #1
 8009704:	4a0d      	ldr	r2, [pc, #52]	; (800973c <xTaskIncrementTick+0x170>)
 8009706:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009708:	697b      	ldr	r3, [r7, #20]
}
 800970a:	4618      	mov	r0, r3
 800970c:	3718      	adds	r7, #24
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}
 8009712:	bf00      	nop
 8009714:	20000f04 	.word	0x20000f04
 8009718:	20000ee0 	.word	0x20000ee0
 800971c:	20000e94 	.word	0x20000e94
 8009720:	20000e98 	.word	0x20000e98
 8009724:	20000ef4 	.word	0x20000ef4
 8009728:	20000efc 	.word	0x20000efc
 800972c:	20000ee4 	.word	0x20000ee4
 8009730:	20000a0c 	.word	0x20000a0c
 8009734:	20000a08 	.word	0x20000a08
 8009738:	20000ef0 	.word	0x20000ef0
 800973c:	20000eec 	.word	0x20000eec

08009740 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009740:	b480      	push	{r7}
 8009742:	b085      	sub	sp, #20
 8009744:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009746:	4b2a      	ldr	r3, [pc, #168]	; (80097f0 <vTaskSwitchContext+0xb0>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d003      	beq.n	8009756 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800974e:	4b29      	ldr	r3, [pc, #164]	; (80097f4 <vTaskSwitchContext+0xb4>)
 8009750:	2201      	movs	r2, #1
 8009752:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009754:	e046      	b.n	80097e4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8009756:	4b27      	ldr	r3, [pc, #156]	; (80097f4 <vTaskSwitchContext+0xb4>)
 8009758:	2200      	movs	r2, #0
 800975a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800975c:	4b26      	ldr	r3, [pc, #152]	; (80097f8 <vTaskSwitchContext+0xb8>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	60fb      	str	r3, [r7, #12]
 8009762:	e010      	b.n	8009786 <vTaskSwitchContext+0x46>
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d10a      	bne.n	8009780 <vTaskSwitchContext+0x40>
	__asm volatile
 800976a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800976e:	f383 8811 	msr	BASEPRI, r3
 8009772:	f3bf 8f6f 	isb	sy
 8009776:	f3bf 8f4f 	dsb	sy
 800977a:	607b      	str	r3, [r7, #4]
}
 800977c:	bf00      	nop
 800977e:	e7fe      	b.n	800977e <vTaskSwitchContext+0x3e>
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	3b01      	subs	r3, #1
 8009784:	60fb      	str	r3, [r7, #12]
 8009786:	491d      	ldr	r1, [pc, #116]	; (80097fc <vTaskSwitchContext+0xbc>)
 8009788:	68fa      	ldr	r2, [r7, #12]
 800978a:	4613      	mov	r3, r2
 800978c:	009b      	lsls	r3, r3, #2
 800978e:	4413      	add	r3, r2
 8009790:	009b      	lsls	r3, r3, #2
 8009792:	440b      	add	r3, r1
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d0e4      	beq.n	8009764 <vTaskSwitchContext+0x24>
 800979a:	68fa      	ldr	r2, [r7, #12]
 800979c:	4613      	mov	r3, r2
 800979e:	009b      	lsls	r3, r3, #2
 80097a0:	4413      	add	r3, r2
 80097a2:	009b      	lsls	r3, r3, #2
 80097a4:	4a15      	ldr	r2, [pc, #84]	; (80097fc <vTaskSwitchContext+0xbc>)
 80097a6:	4413      	add	r3, r2
 80097a8:	60bb      	str	r3, [r7, #8]
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	685b      	ldr	r3, [r3, #4]
 80097ae:	685a      	ldr	r2, [r3, #4]
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	605a      	str	r2, [r3, #4]
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	685a      	ldr	r2, [r3, #4]
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	3308      	adds	r3, #8
 80097bc:	429a      	cmp	r2, r3
 80097be:	d104      	bne.n	80097ca <vTaskSwitchContext+0x8a>
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	685b      	ldr	r3, [r3, #4]
 80097c4:	685a      	ldr	r2, [r3, #4]
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	605a      	str	r2, [r3, #4]
 80097ca:	68bb      	ldr	r3, [r7, #8]
 80097cc:	685b      	ldr	r3, [r3, #4]
 80097ce:	68db      	ldr	r3, [r3, #12]
 80097d0:	4a0b      	ldr	r2, [pc, #44]	; (8009800 <vTaskSwitchContext+0xc0>)
 80097d2:	6013      	str	r3, [r2, #0]
 80097d4:	4a08      	ldr	r2, [pc, #32]	; (80097f8 <vTaskSwitchContext+0xb8>)
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80097da:	4b09      	ldr	r3, [pc, #36]	; (8009800 <vTaskSwitchContext+0xc0>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	3354      	adds	r3, #84	; 0x54
 80097e0:	4a08      	ldr	r2, [pc, #32]	; (8009804 <vTaskSwitchContext+0xc4>)
 80097e2:	6013      	str	r3, [r2, #0]
}
 80097e4:	bf00      	nop
 80097e6:	3714      	adds	r7, #20
 80097e8:	46bd      	mov	sp, r7
 80097ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ee:	4770      	bx	lr
 80097f0:	20000f04 	.word	0x20000f04
 80097f4:	20000ef0 	.word	0x20000ef0
 80097f8:	20000ee4 	.word	0x20000ee4
 80097fc:	20000a0c 	.word	0x20000a0c
 8009800:	20000a08 	.word	0x20000a08
 8009804:	20000100 	.word	0x20000100

08009808 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b084      	sub	sp, #16
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
 8009810:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d10a      	bne.n	800982e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800981c:	f383 8811 	msr	BASEPRI, r3
 8009820:	f3bf 8f6f 	isb	sy
 8009824:	f3bf 8f4f 	dsb	sy
 8009828:	60fb      	str	r3, [r7, #12]
}
 800982a:	bf00      	nop
 800982c:	e7fe      	b.n	800982c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800982e:	4b07      	ldr	r3, [pc, #28]	; (800984c <vTaskPlaceOnEventList+0x44>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	3318      	adds	r3, #24
 8009834:	4619      	mov	r1, r3
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f7fe fe61 	bl	80084fe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800983c:	2101      	movs	r1, #1
 800983e:	6838      	ldr	r0, [r7, #0]
 8009840:	f000 fa80 	bl	8009d44 <prvAddCurrentTaskToDelayedList>
}
 8009844:	bf00      	nop
 8009846:	3710      	adds	r7, #16
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}
 800984c:	20000a08 	.word	0x20000a08

08009850 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009850:	b580      	push	{r7, lr}
 8009852:	b086      	sub	sp, #24
 8009854:	af00      	add	r7, sp, #0
 8009856:	60f8      	str	r0, [r7, #12]
 8009858:	60b9      	str	r1, [r7, #8]
 800985a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d10a      	bne.n	8009878 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009866:	f383 8811 	msr	BASEPRI, r3
 800986a:	f3bf 8f6f 	isb	sy
 800986e:	f3bf 8f4f 	dsb	sy
 8009872:	617b      	str	r3, [r7, #20]
}
 8009874:	bf00      	nop
 8009876:	e7fe      	b.n	8009876 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009878:	4b0a      	ldr	r3, [pc, #40]	; (80098a4 <vTaskPlaceOnEventListRestricted+0x54>)
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	3318      	adds	r3, #24
 800987e:	4619      	mov	r1, r3
 8009880:	68f8      	ldr	r0, [r7, #12]
 8009882:	f7fe fe18 	bl	80084b6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d002      	beq.n	8009892 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800988c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009890:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009892:	6879      	ldr	r1, [r7, #4]
 8009894:	68b8      	ldr	r0, [r7, #8]
 8009896:	f000 fa55 	bl	8009d44 <prvAddCurrentTaskToDelayedList>
	}
 800989a:	bf00      	nop
 800989c:	3718      	adds	r7, #24
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}
 80098a2:	bf00      	nop
 80098a4:	20000a08 	.word	0x20000a08

080098a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b086      	sub	sp, #24
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	68db      	ldr	r3, [r3, #12]
 80098b4:	68db      	ldr	r3, [r3, #12]
 80098b6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d10a      	bne.n	80098d4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80098be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098c2:	f383 8811 	msr	BASEPRI, r3
 80098c6:	f3bf 8f6f 	isb	sy
 80098ca:	f3bf 8f4f 	dsb	sy
 80098ce:	60fb      	str	r3, [r7, #12]
}
 80098d0:	bf00      	nop
 80098d2:	e7fe      	b.n	80098d2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80098d4:	693b      	ldr	r3, [r7, #16]
 80098d6:	3318      	adds	r3, #24
 80098d8:	4618      	mov	r0, r3
 80098da:	f7fe fe49 	bl	8008570 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80098de:	4b1e      	ldr	r3, [pc, #120]	; (8009958 <xTaskRemoveFromEventList+0xb0>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d11d      	bne.n	8009922 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80098e6:	693b      	ldr	r3, [r7, #16]
 80098e8:	3304      	adds	r3, #4
 80098ea:	4618      	mov	r0, r3
 80098ec:	f7fe fe40 	bl	8008570 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098f4:	4b19      	ldr	r3, [pc, #100]	; (800995c <xTaskRemoveFromEventList+0xb4>)
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	429a      	cmp	r2, r3
 80098fa:	d903      	bls.n	8009904 <xTaskRemoveFromEventList+0x5c>
 80098fc:	693b      	ldr	r3, [r7, #16]
 80098fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009900:	4a16      	ldr	r2, [pc, #88]	; (800995c <xTaskRemoveFromEventList+0xb4>)
 8009902:	6013      	str	r3, [r2, #0]
 8009904:	693b      	ldr	r3, [r7, #16]
 8009906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009908:	4613      	mov	r3, r2
 800990a:	009b      	lsls	r3, r3, #2
 800990c:	4413      	add	r3, r2
 800990e:	009b      	lsls	r3, r3, #2
 8009910:	4a13      	ldr	r2, [pc, #76]	; (8009960 <xTaskRemoveFromEventList+0xb8>)
 8009912:	441a      	add	r2, r3
 8009914:	693b      	ldr	r3, [r7, #16]
 8009916:	3304      	adds	r3, #4
 8009918:	4619      	mov	r1, r3
 800991a:	4610      	mov	r0, r2
 800991c:	f7fe fdcb 	bl	80084b6 <vListInsertEnd>
 8009920:	e005      	b.n	800992e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009922:	693b      	ldr	r3, [r7, #16]
 8009924:	3318      	adds	r3, #24
 8009926:	4619      	mov	r1, r3
 8009928:	480e      	ldr	r0, [pc, #56]	; (8009964 <xTaskRemoveFromEventList+0xbc>)
 800992a:	f7fe fdc4 	bl	80084b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800992e:	693b      	ldr	r3, [r7, #16]
 8009930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009932:	4b0d      	ldr	r3, [pc, #52]	; (8009968 <xTaskRemoveFromEventList+0xc0>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009938:	429a      	cmp	r2, r3
 800993a:	d905      	bls.n	8009948 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800993c:	2301      	movs	r3, #1
 800993e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009940:	4b0a      	ldr	r3, [pc, #40]	; (800996c <xTaskRemoveFromEventList+0xc4>)
 8009942:	2201      	movs	r2, #1
 8009944:	601a      	str	r2, [r3, #0]
 8009946:	e001      	b.n	800994c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009948:	2300      	movs	r3, #0
 800994a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800994c:	697b      	ldr	r3, [r7, #20]
}
 800994e:	4618      	mov	r0, r3
 8009950:	3718      	adds	r7, #24
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}
 8009956:	bf00      	nop
 8009958:	20000f04 	.word	0x20000f04
 800995c:	20000ee4 	.word	0x20000ee4
 8009960:	20000a0c 	.word	0x20000a0c
 8009964:	20000e9c 	.word	0x20000e9c
 8009968:	20000a08 	.word	0x20000a08
 800996c:	20000ef0 	.word	0x20000ef0

08009970 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009970:	b480      	push	{r7}
 8009972:	b083      	sub	sp, #12
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009978:	4b06      	ldr	r3, [pc, #24]	; (8009994 <vTaskInternalSetTimeOutState+0x24>)
 800997a:	681a      	ldr	r2, [r3, #0]
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009980:	4b05      	ldr	r3, [pc, #20]	; (8009998 <vTaskInternalSetTimeOutState+0x28>)
 8009982:	681a      	ldr	r2, [r3, #0]
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	605a      	str	r2, [r3, #4]
}
 8009988:	bf00      	nop
 800998a:	370c      	adds	r7, #12
 800998c:	46bd      	mov	sp, r7
 800998e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009992:	4770      	bx	lr
 8009994:	20000ef4 	.word	0x20000ef4
 8009998:	20000ee0 	.word	0x20000ee0

0800999c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b088      	sub	sp, #32
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
 80099a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d10a      	bne.n	80099c2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80099ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099b0:	f383 8811 	msr	BASEPRI, r3
 80099b4:	f3bf 8f6f 	isb	sy
 80099b8:	f3bf 8f4f 	dsb	sy
 80099bc:	613b      	str	r3, [r7, #16]
}
 80099be:	bf00      	nop
 80099c0:	e7fe      	b.n	80099c0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d10a      	bne.n	80099de <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80099c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099cc:	f383 8811 	msr	BASEPRI, r3
 80099d0:	f3bf 8f6f 	isb	sy
 80099d4:	f3bf 8f4f 	dsb	sy
 80099d8:	60fb      	str	r3, [r7, #12]
}
 80099da:	bf00      	nop
 80099dc:	e7fe      	b.n	80099dc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80099de:	f000 fe81 	bl	800a6e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80099e2:	4b1d      	ldr	r3, [pc, #116]	; (8009a58 <xTaskCheckForTimeOut+0xbc>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	685b      	ldr	r3, [r3, #4]
 80099ec:	69ba      	ldr	r2, [r7, #24]
 80099ee:	1ad3      	subs	r3, r2, r3
 80099f0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80099fa:	d102      	bne.n	8009a02 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80099fc:	2300      	movs	r3, #0
 80099fe:	61fb      	str	r3, [r7, #28]
 8009a00:	e023      	b.n	8009a4a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681a      	ldr	r2, [r3, #0]
 8009a06:	4b15      	ldr	r3, [pc, #84]	; (8009a5c <xTaskCheckForTimeOut+0xc0>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	429a      	cmp	r2, r3
 8009a0c:	d007      	beq.n	8009a1e <xTaskCheckForTimeOut+0x82>
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	685b      	ldr	r3, [r3, #4]
 8009a12:	69ba      	ldr	r2, [r7, #24]
 8009a14:	429a      	cmp	r2, r3
 8009a16:	d302      	bcc.n	8009a1e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009a18:	2301      	movs	r3, #1
 8009a1a:	61fb      	str	r3, [r7, #28]
 8009a1c:	e015      	b.n	8009a4a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	697a      	ldr	r2, [r7, #20]
 8009a24:	429a      	cmp	r2, r3
 8009a26:	d20b      	bcs.n	8009a40 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	681a      	ldr	r2, [r3, #0]
 8009a2c:	697b      	ldr	r3, [r7, #20]
 8009a2e:	1ad2      	subs	r2, r2, r3
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f7ff ff9b 	bl	8009970 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	61fb      	str	r3, [r7, #28]
 8009a3e:	e004      	b.n	8009a4a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	2200      	movs	r2, #0
 8009a44:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009a46:	2301      	movs	r3, #1
 8009a48:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009a4a:	f000 fe7b 	bl	800a744 <vPortExitCritical>

	return xReturn;
 8009a4e:	69fb      	ldr	r3, [r7, #28]
}
 8009a50:	4618      	mov	r0, r3
 8009a52:	3720      	adds	r7, #32
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bd80      	pop	{r7, pc}
 8009a58:	20000ee0 	.word	0x20000ee0
 8009a5c:	20000ef4 	.word	0x20000ef4

08009a60 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009a60:	b480      	push	{r7}
 8009a62:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009a64:	4b03      	ldr	r3, [pc, #12]	; (8009a74 <vTaskMissedYield+0x14>)
 8009a66:	2201      	movs	r2, #1
 8009a68:	601a      	str	r2, [r3, #0]
}
 8009a6a:	bf00      	nop
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a72:	4770      	bx	lr
 8009a74:	20000ef0 	.word	0x20000ef0

08009a78 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b082      	sub	sp, #8
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009a80:	f000 f852 	bl	8009b28 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009a84:	4b06      	ldr	r3, [pc, #24]	; (8009aa0 <prvIdleTask+0x28>)
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	2b01      	cmp	r3, #1
 8009a8a:	d9f9      	bls.n	8009a80 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009a8c:	4b05      	ldr	r3, [pc, #20]	; (8009aa4 <prvIdleTask+0x2c>)
 8009a8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a92:	601a      	str	r2, [r3, #0]
 8009a94:	f3bf 8f4f 	dsb	sy
 8009a98:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009a9c:	e7f0      	b.n	8009a80 <prvIdleTask+0x8>
 8009a9e:	bf00      	nop
 8009aa0:	20000a0c 	.word	0x20000a0c
 8009aa4:	e000ed04 	.word	0xe000ed04

08009aa8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b082      	sub	sp, #8
 8009aac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009aae:	2300      	movs	r3, #0
 8009ab0:	607b      	str	r3, [r7, #4]
 8009ab2:	e00c      	b.n	8009ace <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009ab4:	687a      	ldr	r2, [r7, #4]
 8009ab6:	4613      	mov	r3, r2
 8009ab8:	009b      	lsls	r3, r3, #2
 8009aba:	4413      	add	r3, r2
 8009abc:	009b      	lsls	r3, r3, #2
 8009abe:	4a12      	ldr	r2, [pc, #72]	; (8009b08 <prvInitialiseTaskLists+0x60>)
 8009ac0:	4413      	add	r3, r2
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f7fe fcca 	bl	800845c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	3301      	adds	r3, #1
 8009acc:	607b      	str	r3, [r7, #4]
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2b37      	cmp	r3, #55	; 0x37
 8009ad2:	d9ef      	bls.n	8009ab4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009ad4:	480d      	ldr	r0, [pc, #52]	; (8009b0c <prvInitialiseTaskLists+0x64>)
 8009ad6:	f7fe fcc1 	bl	800845c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009ada:	480d      	ldr	r0, [pc, #52]	; (8009b10 <prvInitialiseTaskLists+0x68>)
 8009adc:	f7fe fcbe 	bl	800845c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009ae0:	480c      	ldr	r0, [pc, #48]	; (8009b14 <prvInitialiseTaskLists+0x6c>)
 8009ae2:	f7fe fcbb 	bl	800845c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009ae6:	480c      	ldr	r0, [pc, #48]	; (8009b18 <prvInitialiseTaskLists+0x70>)
 8009ae8:	f7fe fcb8 	bl	800845c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009aec:	480b      	ldr	r0, [pc, #44]	; (8009b1c <prvInitialiseTaskLists+0x74>)
 8009aee:	f7fe fcb5 	bl	800845c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009af2:	4b0b      	ldr	r3, [pc, #44]	; (8009b20 <prvInitialiseTaskLists+0x78>)
 8009af4:	4a05      	ldr	r2, [pc, #20]	; (8009b0c <prvInitialiseTaskLists+0x64>)
 8009af6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009af8:	4b0a      	ldr	r3, [pc, #40]	; (8009b24 <prvInitialiseTaskLists+0x7c>)
 8009afa:	4a05      	ldr	r2, [pc, #20]	; (8009b10 <prvInitialiseTaskLists+0x68>)
 8009afc:	601a      	str	r2, [r3, #0]
}
 8009afe:	bf00      	nop
 8009b00:	3708      	adds	r7, #8
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}
 8009b06:	bf00      	nop
 8009b08:	20000a0c 	.word	0x20000a0c
 8009b0c:	20000e6c 	.word	0x20000e6c
 8009b10:	20000e80 	.word	0x20000e80
 8009b14:	20000e9c 	.word	0x20000e9c
 8009b18:	20000eb0 	.word	0x20000eb0
 8009b1c:	20000ec8 	.word	0x20000ec8
 8009b20:	20000e94 	.word	0x20000e94
 8009b24:	20000e98 	.word	0x20000e98

08009b28 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b082      	sub	sp, #8
 8009b2c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009b2e:	e019      	b.n	8009b64 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009b30:	f000 fdd8 	bl	800a6e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b34:	4b10      	ldr	r3, [pc, #64]	; (8009b78 <prvCheckTasksWaitingTermination+0x50>)
 8009b36:	68db      	ldr	r3, [r3, #12]
 8009b38:	68db      	ldr	r3, [r3, #12]
 8009b3a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	3304      	adds	r3, #4
 8009b40:	4618      	mov	r0, r3
 8009b42:	f7fe fd15 	bl	8008570 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009b46:	4b0d      	ldr	r3, [pc, #52]	; (8009b7c <prvCheckTasksWaitingTermination+0x54>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	3b01      	subs	r3, #1
 8009b4c:	4a0b      	ldr	r2, [pc, #44]	; (8009b7c <prvCheckTasksWaitingTermination+0x54>)
 8009b4e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009b50:	4b0b      	ldr	r3, [pc, #44]	; (8009b80 <prvCheckTasksWaitingTermination+0x58>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	3b01      	subs	r3, #1
 8009b56:	4a0a      	ldr	r2, [pc, #40]	; (8009b80 <prvCheckTasksWaitingTermination+0x58>)
 8009b58:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009b5a:	f000 fdf3 	bl	800a744 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f000 f810 	bl	8009b84 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009b64:	4b06      	ldr	r3, [pc, #24]	; (8009b80 <prvCheckTasksWaitingTermination+0x58>)
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d1e1      	bne.n	8009b30 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009b6c:	bf00      	nop
 8009b6e:	bf00      	nop
 8009b70:	3708      	adds	r7, #8
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}
 8009b76:	bf00      	nop
 8009b78:	20000eb0 	.word	0x20000eb0
 8009b7c:	20000edc 	.word	0x20000edc
 8009b80:	20000ec4 	.word	0x20000ec4

08009b84 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b084      	sub	sp, #16
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	3354      	adds	r3, #84	; 0x54
 8009b90:	4618      	mov	r0, r3
 8009b92:	f002 f893 	bl	800bcbc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d108      	bne.n	8009bb2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	f000 ff8b 	bl	800aac0 <vPortFree>
				vPortFree( pxTCB );
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f000 ff88 	bl	800aac0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009bb0:	e018      	b.n	8009be4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009bb8:	2b01      	cmp	r3, #1
 8009bba:	d103      	bne.n	8009bc4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f000 ff7f 	bl	800aac0 <vPortFree>
	}
 8009bc2:	e00f      	b.n	8009be4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009bca:	2b02      	cmp	r3, #2
 8009bcc:	d00a      	beq.n	8009be4 <prvDeleteTCB+0x60>
	__asm volatile
 8009bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bd2:	f383 8811 	msr	BASEPRI, r3
 8009bd6:	f3bf 8f6f 	isb	sy
 8009bda:	f3bf 8f4f 	dsb	sy
 8009bde:	60fb      	str	r3, [r7, #12]
}
 8009be0:	bf00      	nop
 8009be2:	e7fe      	b.n	8009be2 <prvDeleteTCB+0x5e>
	}
 8009be4:	bf00      	nop
 8009be6:	3710      	adds	r7, #16
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bd80      	pop	{r7, pc}

08009bec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009bec:	b480      	push	{r7}
 8009bee:	b083      	sub	sp, #12
 8009bf0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009bf2:	4b0c      	ldr	r3, [pc, #48]	; (8009c24 <prvResetNextTaskUnblockTime+0x38>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d104      	bne.n	8009c06 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009bfc:	4b0a      	ldr	r3, [pc, #40]	; (8009c28 <prvResetNextTaskUnblockTime+0x3c>)
 8009bfe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009c02:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009c04:	e008      	b.n	8009c18 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c06:	4b07      	ldr	r3, [pc, #28]	; (8009c24 <prvResetNextTaskUnblockTime+0x38>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	68db      	ldr	r3, [r3, #12]
 8009c0c:	68db      	ldr	r3, [r3, #12]
 8009c0e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	685b      	ldr	r3, [r3, #4]
 8009c14:	4a04      	ldr	r2, [pc, #16]	; (8009c28 <prvResetNextTaskUnblockTime+0x3c>)
 8009c16:	6013      	str	r3, [r2, #0]
}
 8009c18:	bf00      	nop
 8009c1a:	370c      	adds	r7, #12
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c22:	4770      	bx	lr
 8009c24:	20000e94 	.word	0x20000e94
 8009c28:	20000efc 	.word	0x20000efc

08009c2c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009c2c:	b480      	push	{r7}
 8009c2e:	b083      	sub	sp, #12
 8009c30:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009c32:	4b0b      	ldr	r3, [pc, #44]	; (8009c60 <xTaskGetSchedulerState+0x34>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d102      	bne.n	8009c40 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009c3a:	2301      	movs	r3, #1
 8009c3c:	607b      	str	r3, [r7, #4]
 8009c3e:	e008      	b.n	8009c52 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c40:	4b08      	ldr	r3, [pc, #32]	; (8009c64 <xTaskGetSchedulerState+0x38>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d102      	bne.n	8009c4e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009c48:	2302      	movs	r3, #2
 8009c4a:	607b      	str	r3, [r7, #4]
 8009c4c:	e001      	b.n	8009c52 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009c52:	687b      	ldr	r3, [r7, #4]
	}
 8009c54:	4618      	mov	r0, r3
 8009c56:	370c      	adds	r7, #12
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5e:	4770      	bx	lr
 8009c60:	20000ee8 	.word	0x20000ee8
 8009c64:	20000f04 	.word	0x20000f04

08009c68 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b086      	sub	sp, #24
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009c74:	2300      	movs	r3, #0
 8009c76:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d056      	beq.n	8009d2c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009c7e:	4b2e      	ldr	r3, [pc, #184]	; (8009d38 <xTaskPriorityDisinherit+0xd0>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	693a      	ldr	r2, [r7, #16]
 8009c84:	429a      	cmp	r2, r3
 8009c86:	d00a      	beq.n	8009c9e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c8c:	f383 8811 	msr	BASEPRI, r3
 8009c90:	f3bf 8f6f 	isb	sy
 8009c94:	f3bf 8f4f 	dsb	sy
 8009c98:	60fb      	str	r3, [r7, #12]
}
 8009c9a:	bf00      	nop
 8009c9c:	e7fe      	b.n	8009c9c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009c9e:	693b      	ldr	r3, [r7, #16]
 8009ca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d10a      	bne.n	8009cbc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009caa:	f383 8811 	msr	BASEPRI, r3
 8009cae:	f3bf 8f6f 	isb	sy
 8009cb2:	f3bf 8f4f 	dsb	sy
 8009cb6:	60bb      	str	r3, [r7, #8]
}
 8009cb8:	bf00      	nop
 8009cba:	e7fe      	b.n	8009cba <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009cbc:	693b      	ldr	r3, [r7, #16]
 8009cbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cc0:	1e5a      	subs	r2, r3, #1
 8009cc2:	693b      	ldr	r3, [r7, #16]
 8009cc4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009cc6:	693b      	ldr	r3, [r7, #16]
 8009cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cca:	693b      	ldr	r3, [r7, #16]
 8009ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009cce:	429a      	cmp	r2, r3
 8009cd0:	d02c      	beq.n	8009d2c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009cd2:	693b      	ldr	r3, [r7, #16]
 8009cd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d128      	bne.n	8009d2c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009cda:	693b      	ldr	r3, [r7, #16]
 8009cdc:	3304      	adds	r3, #4
 8009cde:	4618      	mov	r0, r3
 8009ce0:	f7fe fc46 	bl	8008570 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009ce4:	693b      	ldr	r3, [r7, #16]
 8009ce6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009ce8:	693b      	ldr	r3, [r7, #16]
 8009cea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009cec:	693b      	ldr	r3, [r7, #16]
 8009cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cf0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009cf4:	693b      	ldr	r3, [r7, #16]
 8009cf6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009cf8:	693b      	ldr	r3, [r7, #16]
 8009cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cfc:	4b0f      	ldr	r3, [pc, #60]	; (8009d3c <xTaskPriorityDisinherit+0xd4>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	429a      	cmp	r2, r3
 8009d02:	d903      	bls.n	8009d0c <xTaskPriorityDisinherit+0xa4>
 8009d04:	693b      	ldr	r3, [r7, #16]
 8009d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d08:	4a0c      	ldr	r2, [pc, #48]	; (8009d3c <xTaskPriorityDisinherit+0xd4>)
 8009d0a:	6013      	str	r3, [r2, #0]
 8009d0c:	693b      	ldr	r3, [r7, #16]
 8009d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d10:	4613      	mov	r3, r2
 8009d12:	009b      	lsls	r3, r3, #2
 8009d14:	4413      	add	r3, r2
 8009d16:	009b      	lsls	r3, r3, #2
 8009d18:	4a09      	ldr	r2, [pc, #36]	; (8009d40 <xTaskPriorityDisinherit+0xd8>)
 8009d1a:	441a      	add	r2, r3
 8009d1c:	693b      	ldr	r3, [r7, #16]
 8009d1e:	3304      	adds	r3, #4
 8009d20:	4619      	mov	r1, r3
 8009d22:	4610      	mov	r0, r2
 8009d24:	f7fe fbc7 	bl	80084b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009d28:	2301      	movs	r3, #1
 8009d2a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009d2c:	697b      	ldr	r3, [r7, #20]
	}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	3718      	adds	r7, #24
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}
 8009d36:	bf00      	nop
 8009d38:	20000a08 	.word	0x20000a08
 8009d3c:	20000ee4 	.word	0x20000ee4
 8009d40:	20000a0c 	.word	0x20000a0c

08009d44 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b084      	sub	sp, #16
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
 8009d4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009d4e:	4b21      	ldr	r3, [pc, #132]	; (8009dd4 <prvAddCurrentTaskToDelayedList+0x90>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009d54:	4b20      	ldr	r3, [pc, #128]	; (8009dd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	3304      	adds	r3, #4
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	f7fe fc08 	bl	8008570 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d66:	d10a      	bne.n	8009d7e <prvAddCurrentTaskToDelayedList+0x3a>
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d007      	beq.n	8009d7e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d6e:	4b1a      	ldr	r3, [pc, #104]	; (8009dd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	3304      	adds	r3, #4
 8009d74:	4619      	mov	r1, r3
 8009d76:	4819      	ldr	r0, [pc, #100]	; (8009ddc <prvAddCurrentTaskToDelayedList+0x98>)
 8009d78:	f7fe fb9d 	bl	80084b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009d7c:	e026      	b.n	8009dcc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009d7e:	68fa      	ldr	r2, [r7, #12]
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	4413      	add	r3, r2
 8009d84:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009d86:	4b14      	ldr	r3, [pc, #80]	; (8009dd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	68ba      	ldr	r2, [r7, #8]
 8009d8c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009d8e:	68ba      	ldr	r2, [r7, #8]
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	429a      	cmp	r2, r3
 8009d94:	d209      	bcs.n	8009daa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d96:	4b12      	ldr	r3, [pc, #72]	; (8009de0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009d98:	681a      	ldr	r2, [r3, #0]
 8009d9a:	4b0f      	ldr	r3, [pc, #60]	; (8009dd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	3304      	adds	r3, #4
 8009da0:	4619      	mov	r1, r3
 8009da2:	4610      	mov	r0, r2
 8009da4:	f7fe fbab 	bl	80084fe <vListInsert>
}
 8009da8:	e010      	b.n	8009dcc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009daa:	4b0e      	ldr	r3, [pc, #56]	; (8009de4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009dac:	681a      	ldr	r2, [r3, #0]
 8009dae:	4b0a      	ldr	r3, [pc, #40]	; (8009dd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	3304      	adds	r3, #4
 8009db4:	4619      	mov	r1, r3
 8009db6:	4610      	mov	r0, r2
 8009db8:	f7fe fba1 	bl	80084fe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009dbc:	4b0a      	ldr	r3, [pc, #40]	; (8009de8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	68ba      	ldr	r2, [r7, #8]
 8009dc2:	429a      	cmp	r2, r3
 8009dc4:	d202      	bcs.n	8009dcc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009dc6:	4a08      	ldr	r2, [pc, #32]	; (8009de8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	6013      	str	r3, [r2, #0]
}
 8009dcc:	bf00      	nop
 8009dce:	3710      	adds	r7, #16
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}
 8009dd4:	20000ee0 	.word	0x20000ee0
 8009dd8:	20000a08 	.word	0x20000a08
 8009ddc:	20000ec8 	.word	0x20000ec8
 8009de0:	20000e98 	.word	0x20000e98
 8009de4:	20000e94 	.word	0x20000e94
 8009de8:	20000efc 	.word	0x20000efc

08009dec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b08a      	sub	sp, #40	; 0x28
 8009df0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009df2:	2300      	movs	r3, #0
 8009df4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009df6:	f000 fb07 	bl	800a408 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009dfa:	4b1c      	ldr	r3, [pc, #112]	; (8009e6c <xTimerCreateTimerTask+0x80>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d021      	beq.n	8009e46 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009e02:	2300      	movs	r3, #0
 8009e04:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009e06:	2300      	movs	r3, #0
 8009e08:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009e0a:	1d3a      	adds	r2, r7, #4
 8009e0c:	f107 0108 	add.w	r1, r7, #8
 8009e10:	f107 030c 	add.w	r3, r7, #12
 8009e14:	4618      	mov	r0, r3
 8009e16:	f7fe fb07 	bl	8008428 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009e1a:	6879      	ldr	r1, [r7, #4]
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	68fa      	ldr	r2, [r7, #12]
 8009e20:	9202      	str	r2, [sp, #8]
 8009e22:	9301      	str	r3, [sp, #4]
 8009e24:	2302      	movs	r3, #2
 8009e26:	9300      	str	r3, [sp, #0]
 8009e28:	2300      	movs	r3, #0
 8009e2a:	460a      	mov	r2, r1
 8009e2c:	4910      	ldr	r1, [pc, #64]	; (8009e70 <xTimerCreateTimerTask+0x84>)
 8009e2e:	4811      	ldr	r0, [pc, #68]	; (8009e74 <xTimerCreateTimerTask+0x88>)
 8009e30:	f7ff f8b4 	bl	8008f9c <xTaskCreateStatic>
 8009e34:	4603      	mov	r3, r0
 8009e36:	4a10      	ldr	r2, [pc, #64]	; (8009e78 <xTimerCreateTimerTask+0x8c>)
 8009e38:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009e3a:	4b0f      	ldr	r3, [pc, #60]	; (8009e78 <xTimerCreateTimerTask+0x8c>)
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d001      	beq.n	8009e46 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009e42:	2301      	movs	r3, #1
 8009e44:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009e46:	697b      	ldr	r3, [r7, #20]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d10a      	bne.n	8009e62 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e50:	f383 8811 	msr	BASEPRI, r3
 8009e54:	f3bf 8f6f 	isb	sy
 8009e58:	f3bf 8f4f 	dsb	sy
 8009e5c:	613b      	str	r3, [r7, #16]
}
 8009e5e:	bf00      	nop
 8009e60:	e7fe      	b.n	8009e60 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009e62:	697b      	ldr	r3, [r7, #20]
}
 8009e64:	4618      	mov	r0, r3
 8009e66:	3718      	adds	r7, #24
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bd80      	pop	{r7, pc}
 8009e6c:	20000f38 	.word	0x20000f38
 8009e70:	0800beb8 	.word	0x0800beb8
 8009e74:	08009fb1 	.word	0x08009fb1
 8009e78:	20000f3c 	.word	0x20000f3c

08009e7c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b08a      	sub	sp, #40	; 0x28
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	60f8      	str	r0, [r7, #12]
 8009e84:	60b9      	str	r1, [r7, #8]
 8009e86:	607a      	str	r2, [r7, #4]
 8009e88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d10a      	bne.n	8009eaa <xTimerGenericCommand+0x2e>
	__asm volatile
 8009e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e98:	f383 8811 	msr	BASEPRI, r3
 8009e9c:	f3bf 8f6f 	isb	sy
 8009ea0:	f3bf 8f4f 	dsb	sy
 8009ea4:	623b      	str	r3, [r7, #32]
}
 8009ea6:	bf00      	nop
 8009ea8:	e7fe      	b.n	8009ea8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009eaa:	4b1a      	ldr	r3, [pc, #104]	; (8009f14 <xTimerGenericCommand+0x98>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d02a      	beq.n	8009f08 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009ebe:	68bb      	ldr	r3, [r7, #8]
 8009ec0:	2b05      	cmp	r3, #5
 8009ec2:	dc18      	bgt.n	8009ef6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009ec4:	f7ff feb2 	bl	8009c2c <xTaskGetSchedulerState>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	2b02      	cmp	r3, #2
 8009ecc:	d109      	bne.n	8009ee2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009ece:	4b11      	ldr	r3, [pc, #68]	; (8009f14 <xTimerGenericCommand+0x98>)
 8009ed0:	6818      	ldr	r0, [r3, #0]
 8009ed2:	f107 0110 	add.w	r1, r7, #16
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009eda:	f7fe fc77 	bl	80087cc <xQueueGenericSend>
 8009ede:	6278      	str	r0, [r7, #36]	; 0x24
 8009ee0:	e012      	b.n	8009f08 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009ee2:	4b0c      	ldr	r3, [pc, #48]	; (8009f14 <xTimerGenericCommand+0x98>)
 8009ee4:	6818      	ldr	r0, [r3, #0]
 8009ee6:	f107 0110 	add.w	r1, r7, #16
 8009eea:	2300      	movs	r3, #0
 8009eec:	2200      	movs	r2, #0
 8009eee:	f7fe fc6d 	bl	80087cc <xQueueGenericSend>
 8009ef2:	6278      	str	r0, [r7, #36]	; 0x24
 8009ef4:	e008      	b.n	8009f08 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009ef6:	4b07      	ldr	r3, [pc, #28]	; (8009f14 <xTimerGenericCommand+0x98>)
 8009ef8:	6818      	ldr	r0, [r3, #0]
 8009efa:	f107 0110 	add.w	r1, r7, #16
 8009efe:	2300      	movs	r3, #0
 8009f00:	683a      	ldr	r2, [r7, #0]
 8009f02:	f7fe fd61 	bl	80089c8 <xQueueGenericSendFromISR>
 8009f06:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	3728      	adds	r7, #40	; 0x28
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}
 8009f12:	bf00      	nop
 8009f14:	20000f38 	.word	0x20000f38

08009f18 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b088      	sub	sp, #32
 8009f1c:	af02      	add	r7, sp, #8
 8009f1e:	6078      	str	r0, [r7, #4]
 8009f20:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f22:	4b22      	ldr	r3, [pc, #136]	; (8009fac <prvProcessExpiredTimer+0x94>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	68db      	ldr	r3, [r3, #12]
 8009f28:	68db      	ldr	r3, [r3, #12]
 8009f2a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009f2c:	697b      	ldr	r3, [r7, #20]
 8009f2e:	3304      	adds	r3, #4
 8009f30:	4618      	mov	r0, r3
 8009f32:	f7fe fb1d 	bl	8008570 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f3c:	f003 0304 	and.w	r3, r3, #4
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d022      	beq.n	8009f8a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009f44:	697b      	ldr	r3, [r7, #20]
 8009f46:	699a      	ldr	r2, [r3, #24]
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	18d1      	adds	r1, r2, r3
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	683a      	ldr	r2, [r7, #0]
 8009f50:	6978      	ldr	r0, [r7, #20]
 8009f52:	f000 f8d1 	bl	800a0f8 <prvInsertTimerInActiveList>
 8009f56:	4603      	mov	r3, r0
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d01f      	beq.n	8009f9c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	9300      	str	r3, [sp, #0]
 8009f60:	2300      	movs	r3, #0
 8009f62:	687a      	ldr	r2, [r7, #4]
 8009f64:	2100      	movs	r1, #0
 8009f66:	6978      	ldr	r0, [r7, #20]
 8009f68:	f7ff ff88 	bl	8009e7c <xTimerGenericCommand>
 8009f6c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009f6e:	693b      	ldr	r3, [r7, #16]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d113      	bne.n	8009f9c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f78:	f383 8811 	msr	BASEPRI, r3
 8009f7c:	f3bf 8f6f 	isb	sy
 8009f80:	f3bf 8f4f 	dsb	sy
 8009f84:	60fb      	str	r3, [r7, #12]
}
 8009f86:	bf00      	nop
 8009f88:	e7fe      	b.n	8009f88 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009f8a:	697b      	ldr	r3, [r7, #20]
 8009f8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f90:	f023 0301 	bic.w	r3, r3, #1
 8009f94:	b2da      	uxtb	r2, r3
 8009f96:	697b      	ldr	r3, [r7, #20]
 8009f98:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009f9c:	697b      	ldr	r3, [r7, #20]
 8009f9e:	6a1b      	ldr	r3, [r3, #32]
 8009fa0:	6978      	ldr	r0, [r7, #20]
 8009fa2:	4798      	blx	r3
}
 8009fa4:	bf00      	nop
 8009fa6:	3718      	adds	r7, #24
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}
 8009fac:	20000f30 	.word	0x20000f30

08009fb0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b084      	sub	sp, #16
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009fb8:	f107 0308 	add.w	r3, r7, #8
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	f000 f857 	bl	800a070 <prvGetNextExpireTime>
 8009fc2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	4619      	mov	r1, r3
 8009fc8:	68f8      	ldr	r0, [r7, #12]
 8009fca:	f000 f803 	bl	8009fd4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009fce:	f000 f8d5 	bl	800a17c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009fd2:	e7f1      	b.n	8009fb8 <prvTimerTask+0x8>

08009fd4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b084      	sub	sp, #16
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
 8009fdc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009fde:	f7ff fa39 	bl	8009454 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009fe2:	f107 0308 	add.w	r3, r7, #8
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f000 f866 	bl	800a0b8 <prvSampleTimeNow>
 8009fec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009fee:	68bb      	ldr	r3, [r7, #8]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d130      	bne.n	800a056 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d10a      	bne.n	800a010 <prvProcessTimerOrBlockTask+0x3c>
 8009ffa:	687a      	ldr	r2, [r7, #4]
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	429a      	cmp	r2, r3
 800a000:	d806      	bhi.n	800a010 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a002:	f7ff fa35 	bl	8009470 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a006:	68f9      	ldr	r1, [r7, #12]
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	f7ff ff85 	bl	8009f18 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a00e:	e024      	b.n	800a05a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d008      	beq.n	800a028 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a016:	4b13      	ldr	r3, [pc, #76]	; (800a064 <prvProcessTimerOrBlockTask+0x90>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d101      	bne.n	800a024 <prvProcessTimerOrBlockTask+0x50>
 800a020:	2301      	movs	r3, #1
 800a022:	e000      	b.n	800a026 <prvProcessTimerOrBlockTask+0x52>
 800a024:	2300      	movs	r3, #0
 800a026:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a028:	4b0f      	ldr	r3, [pc, #60]	; (800a068 <prvProcessTimerOrBlockTask+0x94>)
 800a02a:	6818      	ldr	r0, [r3, #0]
 800a02c:	687a      	ldr	r2, [r7, #4]
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	1ad3      	subs	r3, r2, r3
 800a032:	683a      	ldr	r2, [r7, #0]
 800a034:	4619      	mov	r1, r3
 800a036:	f7fe ff7d 	bl	8008f34 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a03a:	f7ff fa19 	bl	8009470 <xTaskResumeAll>
 800a03e:	4603      	mov	r3, r0
 800a040:	2b00      	cmp	r3, #0
 800a042:	d10a      	bne.n	800a05a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a044:	4b09      	ldr	r3, [pc, #36]	; (800a06c <prvProcessTimerOrBlockTask+0x98>)
 800a046:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a04a:	601a      	str	r2, [r3, #0]
 800a04c:	f3bf 8f4f 	dsb	sy
 800a050:	f3bf 8f6f 	isb	sy
}
 800a054:	e001      	b.n	800a05a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a056:	f7ff fa0b 	bl	8009470 <xTaskResumeAll>
}
 800a05a:	bf00      	nop
 800a05c:	3710      	adds	r7, #16
 800a05e:	46bd      	mov	sp, r7
 800a060:	bd80      	pop	{r7, pc}
 800a062:	bf00      	nop
 800a064:	20000f34 	.word	0x20000f34
 800a068:	20000f38 	.word	0x20000f38
 800a06c:	e000ed04 	.word	0xe000ed04

0800a070 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a070:	b480      	push	{r7}
 800a072:	b085      	sub	sp, #20
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a078:	4b0e      	ldr	r3, [pc, #56]	; (800a0b4 <prvGetNextExpireTime+0x44>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d101      	bne.n	800a086 <prvGetNextExpireTime+0x16>
 800a082:	2201      	movs	r2, #1
 800a084:	e000      	b.n	800a088 <prvGetNextExpireTime+0x18>
 800a086:	2200      	movs	r2, #0
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d105      	bne.n	800a0a0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a094:	4b07      	ldr	r3, [pc, #28]	; (800a0b4 <prvGetNextExpireTime+0x44>)
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	68db      	ldr	r3, [r3, #12]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	60fb      	str	r3, [r7, #12]
 800a09e:	e001      	b.n	800a0a4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
}
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	3714      	adds	r7, #20
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b0:	4770      	bx	lr
 800a0b2:	bf00      	nop
 800a0b4:	20000f30 	.word	0x20000f30

0800a0b8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b084      	sub	sp, #16
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a0c0:	f7ff fa74 	bl	80095ac <xTaskGetTickCount>
 800a0c4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a0c6:	4b0b      	ldr	r3, [pc, #44]	; (800a0f4 <prvSampleTimeNow+0x3c>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	68fa      	ldr	r2, [r7, #12]
 800a0cc:	429a      	cmp	r2, r3
 800a0ce:	d205      	bcs.n	800a0dc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a0d0:	f000 f936 	bl	800a340 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2201      	movs	r2, #1
 800a0d8:	601a      	str	r2, [r3, #0]
 800a0da:	e002      	b.n	800a0e2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2200      	movs	r2, #0
 800a0e0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a0e2:	4a04      	ldr	r2, [pc, #16]	; (800a0f4 <prvSampleTimeNow+0x3c>)
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
}
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	3710      	adds	r7, #16
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}
 800a0f2:	bf00      	nop
 800a0f4:	20000f40 	.word	0x20000f40

0800a0f8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b086      	sub	sp, #24
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	60f8      	str	r0, [r7, #12]
 800a100:	60b9      	str	r1, [r7, #8]
 800a102:	607a      	str	r2, [r7, #4]
 800a104:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a106:	2300      	movs	r3, #0
 800a108:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	68ba      	ldr	r2, [r7, #8]
 800a10e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	68fa      	ldr	r2, [r7, #12]
 800a114:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a116:	68ba      	ldr	r2, [r7, #8]
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	429a      	cmp	r2, r3
 800a11c:	d812      	bhi.n	800a144 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a11e:	687a      	ldr	r2, [r7, #4]
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	1ad2      	subs	r2, r2, r3
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	699b      	ldr	r3, [r3, #24]
 800a128:	429a      	cmp	r2, r3
 800a12a:	d302      	bcc.n	800a132 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a12c:	2301      	movs	r3, #1
 800a12e:	617b      	str	r3, [r7, #20]
 800a130:	e01b      	b.n	800a16a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a132:	4b10      	ldr	r3, [pc, #64]	; (800a174 <prvInsertTimerInActiveList+0x7c>)
 800a134:	681a      	ldr	r2, [r3, #0]
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	3304      	adds	r3, #4
 800a13a:	4619      	mov	r1, r3
 800a13c:	4610      	mov	r0, r2
 800a13e:	f7fe f9de 	bl	80084fe <vListInsert>
 800a142:	e012      	b.n	800a16a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a144:	687a      	ldr	r2, [r7, #4]
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	429a      	cmp	r2, r3
 800a14a:	d206      	bcs.n	800a15a <prvInsertTimerInActiveList+0x62>
 800a14c:	68ba      	ldr	r2, [r7, #8]
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	429a      	cmp	r2, r3
 800a152:	d302      	bcc.n	800a15a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a154:	2301      	movs	r3, #1
 800a156:	617b      	str	r3, [r7, #20]
 800a158:	e007      	b.n	800a16a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a15a:	4b07      	ldr	r3, [pc, #28]	; (800a178 <prvInsertTimerInActiveList+0x80>)
 800a15c:	681a      	ldr	r2, [r3, #0]
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	3304      	adds	r3, #4
 800a162:	4619      	mov	r1, r3
 800a164:	4610      	mov	r0, r2
 800a166:	f7fe f9ca 	bl	80084fe <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a16a:	697b      	ldr	r3, [r7, #20]
}
 800a16c:	4618      	mov	r0, r3
 800a16e:	3718      	adds	r7, #24
 800a170:	46bd      	mov	sp, r7
 800a172:	bd80      	pop	{r7, pc}
 800a174:	20000f34 	.word	0x20000f34
 800a178:	20000f30 	.word	0x20000f30

0800a17c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b08e      	sub	sp, #56	; 0x38
 800a180:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a182:	e0ca      	b.n	800a31a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2b00      	cmp	r3, #0
 800a188:	da18      	bge.n	800a1bc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a18a:	1d3b      	adds	r3, r7, #4
 800a18c:	3304      	adds	r3, #4
 800a18e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a192:	2b00      	cmp	r3, #0
 800a194:	d10a      	bne.n	800a1ac <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a19a:	f383 8811 	msr	BASEPRI, r3
 800a19e:	f3bf 8f6f 	isb	sy
 800a1a2:	f3bf 8f4f 	dsb	sy
 800a1a6:	61fb      	str	r3, [r7, #28]
}
 800a1a8:	bf00      	nop
 800a1aa:	e7fe      	b.n	800a1aa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a1ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a1b2:	6850      	ldr	r0, [r2, #4]
 800a1b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a1b6:	6892      	ldr	r2, [r2, #8]
 800a1b8:	4611      	mov	r1, r2
 800a1ba:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	f2c0 80aa 	blt.w	800a318 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a1c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ca:	695b      	ldr	r3, [r3, #20]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d004      	beq.n	800a1da <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a1d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1d2:	3304      	adds	r3, #4
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	f7fe f9cb 	bl	8008570 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a1da:	463b      	mov	r3, r7
 800a1dc:	4618      	mov	r0, r3
 800a1de:	f7ff ff6b 	bl	800a0b8 <prvSampleTimeNow>
 800a1e2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2b09      	cmp	r3, #9
 800a1e8:	f200 8097 	bhi.w	800a31a <prvProcessReceivedCommands+0x19e>
 800a1ec:	a201      	add	r2, pc, #4	; (adr r2, 800a1f4 <prvProcessReceivedCommands+0x78>)
 800a1ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1f2:	bf00      	nop
 800a1f4:	0800a21d 	.word	0x0800a21d
 800a1f8:	0800a21d 	.word	0x0800a21d
 800a1fc:	0800a21d 	.word	0x0800a21d
 800a200:	0800a291 	.word	0x0800a291
 800a204:	0800a2a5 	.word	0x0800a2a5
 800a208:	0800a2ef 	.word	0x0800a2ef
 800a20c:	0800a21d 	.word	0x0800a21d
 800a210:	0800a21d 	.word	0x0800a21d
 800a214:	0800a291 	.word	0x0800a291
 800a218:	0800a2a5 	.word	0x0800a2a5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a21c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a21e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a222:	f043 0301 	orr.w	r3, r3, #1
 800a226:	b2da      	uxtb	r2, r3
 800a228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a22a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a22e:	68ba      	ldr	r2, [r7, #8]
 800a230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a232:	699b      	ldr	r3, [r3, #24]
 800a234:	18d1      	adds	r1, r2, r3
 800a236:	68bb      	ldr	r3, [r7, #8]
 800a238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a23a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a23c:	f7ff ff5c 	bl	800a0f8 <prvInsertTimerInActiveList>
 800a240:	4603      	mov	r3, r0
 800a242:	2b00      	cmp	r3, #0
 800a244:	d069      	beq.n	800a31a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a248:	6a1b      	ldr	r3, [r3, #32]
 800a24a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a24c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a24e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a250:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a254:	f003 0304 	and.w	r3, r3, #4
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d05e      	beq.n	800a31a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a25c:	68ba      	ldr	r2, [r7, #8]
 800a25e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a260:	699b      	ldr	r3, [r3, #24]
 800a262:	441a      	add	r2, r3
 800a264:	2300      	movs	r3, #0
 800a266:	9300      	str	r3, [sp, #0]
 800a268:	2300      	movs	r3, #0
 800a26a:	2100      	movs	r1, #0
 800a26c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a26e:	f7ff fe05 	bl	8009e7c <xTimerGenericCommand>
 800a272:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a274:	6a3b      	ldr	r3, [r7, #32]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d14f      	bne.n	800a31a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a27a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a27e:	f383 8811 	msr	BASEPRI, r3
 800a282:	f3bf 8f6f 	isb	sy
 800a286:	f3bf 8f4f 	dsb	sy
 800a28a:	61bb      	str	r3, [r7, #24]
}
 800a28c:	bf00      	nop
 800a28e:	e7fe      	b.n	800a28e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a292:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a296:	f023 0301 	bic.w	r3, r3, #1
 800a29a:	b2da      	uxtb	r2, r3
 800a29c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a29e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a2a2:	e03a      	b.n	800a31a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a2a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a2aa:	f043 0301 	orr.w	r3, r3, #1
 800a2ae:	b2da      	uxtb	r2, r3
 800a2b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a2b6:	68ba      	ldr	r2, [r7, #8]
 800a2b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2ba:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a2bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2be:	699b      	ldr	r3, [r3, #24]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d10a      	bne.n	800a2da <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a2c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2c8:	f383 8811 	msr	BASEPRI, r3
 800a2cc:	f3bf 8f6f 	isb	sy
 800a2d0:	f3bf 8f4f 	dsb	sy
 800a2d4:	617b      	str	r3, [r7, #20]
}
 800a2d6:	bf00      	nop
 800a2d8:	e7fe      	b.n	800a2d8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a2da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2dc:	699a      	ldr	r2, [r3, #24]
 800a2de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2e0:	18d1      	adds	r1, r2, r3
 800a2e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2e8:	f7ff ff06 	bl	800a0f8 <prvInsertTimerInActiveList>
					break;
 800a2ec:	e015      	b.n	800a31a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a2ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a2f4:	f003 0302 	and.w	r3, r3, #2
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d103      	bne.n	800a304 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a2fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2fe:	f000 fbdf 	bl	800aac0 <vPortFree>
 800a302:	e00a      	b.n	800a31a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a306:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a30a:	f023 0301 	bic.w	r3, r3, #1
 800a30e:	b2da      	uxtb	r2, r3
 800a310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a312:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a316:	e000      	b.n	800a31a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a318:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a31a:	4b08      	ldr	r3, [pc, #32]	; (800a33c <prvProcessReceivedCommands+0x1c0>)
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	1d39      	adds	r1, r7, #4
 800a320:	2200      	movs	r2, #0
 800a322:	4618      	mov	r0, r3
 800a324:	f7fe fbec 	bl	8008b00 <xQueueReceive>
 800a328:	4603      	mov	r3, r0
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	f47f af2a 	bne.w	800a184 <prvProcessReceivedCommands+0x8>
	}
}
 800a330:	bf00      	nop
 800a332:	bf00      	nop
 800a334:	3730      	adds	r7, #48	; 0x30
 800a336:	46bd      	mov	sp, r7
 800a338:	bd80      	pop	{r7, pc}
 800a33a:	bf00      	nop
 800a33c:	20000f38 	.word	0x20000f38

0800a340 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b088      	sub	sp, #32
 800a344:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a346:	e048      	b.n	800a3da <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a348:	4b2d      	ldr	r3, [pc, #180]	; (800a400 <prvSwitchTimerLists+0xc0>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	68db      	ldr	r3, [r3, #12]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a352:	4b2b      	ldr	r3, [pc, #172]	; (800a400 <prvSwitchTimerLists+0xc0>)
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	68db      	ldr	r3, [r3, #12]
 800a358:	68db      	ldr	r3, [r3, #12]
 800a35a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	3304      	adds	r3, #4
 800a360:	4618      	mov	r0, r3
 800a362:	f7fe f905 	bl	8008570 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	6a1b      	ldr	r3, [r3, #32]
 800a36a:	68f8      	ldr	r0, [r7, #12]
 800a36c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a374:	f003 0304 	and.w	r3, r3, #4
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d02e      	beq.n	800a3da <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	699b      	ldr	r3, [r3, #24]
 800a380:	693a      	ldr	r2, [r7, #16]
 800a382:	4413      	add	r3, r2
 800a384:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a386:	68ba      	ldr	r2, [r7, #8]
 800a388:	693b      	ldr	r3, [r7, #16]
 800a38a:	429a      	cmp	r2, r3
 800a38c:	d90e      	bls.n	800a3ac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	68ba      	ldr	r2, [r7, #8]
 800a392:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	68fa      	ldr	r2, [r7, #12]
 800a398:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a39a:	4b19      	ldr	r3, [pc, #100]	; (800a400 <prvSwitchTimerLists+0xc0>)
 800a39c:	681a      	ldr	r2, [r3, #0]
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	3304      	adds	r3, #4
 800a3a2:	4619      	mov	r1, r3
 800a3a4:	4610      	mov	r0, r2
 800a3a6:	f7fe f8aa 	bl	80084fe <vListInsert>
 800a3aa:	e016      	b.n	800a3da <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	9300      	str	r3, [sp, #0]
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	693a      	ldr	r2, [r7, #16]
 800a3b4:	2100      	movs	r1, #0
 800a3b6:	68f8      	ldr	r0, [r7, #12]
 800a3b8:	f7ff fd60 	bl	8009e7c <xTimerGenericCommand>
 800a3bc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d10a      	bne.n	800a3da <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a3c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3c8:	f383 8811 	msr	BASEPRI, r3
 800a3cc:	f3bf 8f6f 	isb	sy
 800a3d0:	f3bf 8f4f 	dsb	sy
 800a3d4:	603b      	str	r3, [r7, #0]
}
 800a3d6:	bf00      	nop
 800a3d8:	e7fe      	b.n	800a3d8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a3da:	4b09      	ldr	r3, [pc, #36]	; (800a400 <prvSwitchTimerLists+0xc0>)
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d1b1      	bne.n	800a348 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a3e4:	4b06      	ldr	r3, [pc, #24]	; (800a400 <prvSwitchTimerLists+0xc0>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a3ea:	4b06      	ldr	r3, [pc, #24]	; (800a404 <prvSwitchTimerLists+0xc4>)
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	4a04      	ldr	r2, [pc, #16]	; (800a400 <prvSwitchTimerLists+0xc0>)
 800a3f0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a3f2:	4a04      	ldr	r2, [pc, #16]	; (800a404 <prvSwitchTimerLists+0xc4>)
 800a3f4:	697b      	ldr	r3, [r7, #20]
 800a3f6:	6013      	str	r3, [r2, #0]
}
 800a3f8:	bf00      	nop
 800a3fa:	3718      	adds	r7, #24
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bd80      	pop	{r7, pc}
 800a400:	20000f30 	.word	0x20000f30
 800a404:	20000f34 	.word	0x20000f34

0800a408 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b082      	sub	sp, #8
 800a40c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a40e:	f000 f969 	bl	800a6e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a412:	4b15      	ldr	r3, [pc, #84]	; (800a468 <prvCheckForValidListAndQueue+0x60>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d120      	bne.n	800a45c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a41a:	4814      	ldr	r0, [pc, #80]	; (800a46c <prvCheckForValidListAndQueue+0x64>)
 800a41c:	f7fe f81e 	bl	800845c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a420:	4813      	ldr	r0, [pc, #76]	; (800a470 <prvCheckForValidListAndQueue+0x68>)
 800a422:	f7fe f81b 	bl	800845c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a426:	4b13      	ldr	r3, [pc, #76]	; (800a474 <prvCheckForValidListAndQueue+0x6c>)
 800a428:	4a10      	ldr	r2, [pc, #64]	; (800a46c <prvCheckForValidListAndQueue+0x64>)
 800a42a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a42c:	4b12      	ldr	r3, [pc, #72]	; (800a478 <prvCheckForValidListAndQueue+0x70>)
 800a42e:	4a10      	ldr	r2, [pc, #64]	; (800a470 <prvCheckForValidListAndQueue+0x68>)
 800a430:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a432:	2300      	movs	r3, #0
 800a434:	9300      	str	r3, [sp, #0]
 800a436:	4b11      	ldr	r3, [pc, #68]	; (800a47c <prvCheckForValidListAndQueue+0x74>)
 800a438:	4a11      	ldr	r2, [pc, #68]	; (800a480 <prvCheckForValidListAndQueue+0x78>)
 800a43a:	2110      	movs	r1, #16
 800a43c:	200a      	movs	r0, #10
 800a43e:	f7fe f929 	bl	8008694 <xQueueGenericCreateStatic>
 800a442:	4603      	mov	r3, r0
 800a444:	4a08      	ldr	r2, [pc, #32]	; (800a468 <prvCheckForValidListAndQueue+0x60>)
 800a446:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a448:	4b07      	ldr	r3, [pc, #28]	; (800a468 <prvCheckForValidListAndQueue+0x60>)
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d005      	beq.n	800a45c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a450:	4b05      	ldr	r3, [pc, #20]	; (800a468 <prvCheckForValidListAndQueue+0x60>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	490b      	ldr	r1, [pc, #44]	; (800a484 <prvCheckForValidListAndQueue+0x7c>)
 800a456:	4618      	mov	r0, r3
 800a458:	f7fe fd42 	bl	8008ee0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a45c:	f000 f972 	bl	800a744 <vPortExitCritical>
}
 800a460:	bf00      	nop
 800a462:	46bd      	mov	sp, r7
 800a464:	bd80      	pop	{r7, pc}
 800a466:	bf00      	nop
 800a468:	20000f38 	.word	0x20000f38
 800a46c:	20000f08 	.word	0x20000f08
 800a470:	20000f1c 	.word	0x20000f1c
 800a474:	20000f30 	.word	0x20000f30
 800a478:	20000f34 	.word	0x20000f34
 800a47c:	20000fe4 	.word	0x20000fe4
 800a480:	20000f44 	.word	0x20000f44
 800a484:	0800bec0 	.word	0x0800bec0

0800a488 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a488:	b480      	push	{r7}
 800a48a:	b085      	sub	sp, #20
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	60f8      	str	r0, [r7, #12]
 800a490:	60b9      	str	r1, [r7, #8]
 800a492:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	3b04      	subs	r3, #4
 800a498:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a4a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	3b04      	subs	r3, #4
 800a4a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a4a8:	68bb      	ldr	r3, [r7, #8]
 800a4aa:	f023 0201 	bic.w	r2, r3, #1
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	3b04      	subs	r3, #4
 800a4b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a4b8:	4a0c      	ldr	r2, [pc, #48]	; (800a4ec <pxPortInitialiseStack+0x64>)
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	3b14      	subs	r3, #20
 800a4c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a4c4:	687a      	ldr	r2, [r7, #4]
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	3b04      	subs	r3, #4
 800a4ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	f06f 0202 	mvn.w	r2, #2
 800a4d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	3b20      	subs	r3, #32
 800a4dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a4de:	68fb      	ldr	r3, [r7, #12]
}
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	3714      	adds	r7, #20
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ea:	4770      	bx	lr
 800a4ec:	0800a4f1 	.word	0x0800a4f1

0800a4f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a4f0:	b480      	push	{r7}
 800a4f2:	b085      	sub	sp, #20
 800a4f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a4fa:	4b12      	ldr	r3, [pc, #72]	; (800a544 <prvTaskExitError+0x54>)
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a502:	d00a      	beq.n	800a51a <prvTaskExitError+0x2a>
	__asm volatile
 800a504:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a508:	f383 8811 	msr	BASEPRI, r3
 800a50c:	f3bf 8f6f 	isb	sy
 800a510:	f3bf 8f4f 	dsb	sy
 800a514:	60fb      	str	r3, [r7, #12]
}
 800a516:	bf00      	nop
 800a518:	e7fe      	b.n	800a518 <prvTaskExitError+0x28>
	__asm volatile
 800a51a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a51e:	f383 8811 	msr	BASEPRI, r3
 800a522:	f3bf 8f6f 	isb	sy
 800a526:	f3bf 8f4f 	dsb	sy
 800a52a:	60bb      	str	r3, [r7, #8]
}
 800a52c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a52e:	bf00      	nop
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d0fc      	beq.n	800a530 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a536:	bf00      	nop
 800a538:	bf00      	nop
 800a53a:	3714      	adds	r7, #20
 800a53c:	46bd      	mov	sp, r7
 800a53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a542:	4770      	bx	lr
 800a544:	20000098 	.word	0x20000098
	...

0800a550 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a550:	4b07      	ldr	r3, [pc, #28]	; (800a570 <pxCurrentTCBConst2>)
 800a552:	6819      	ldr	r1, [r3, #0]
 800a554:	6808      	ldr	r0, [r1, #0]
 800a556:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a55a:	f380 8809 	msr	PSP, r0
 800a55e:	f3bf 8f6f 	isb	sy
 800a562:	f04f 0000 	mov.w	r0, #0
 800a566:	f380 8811 	msr	BASEPRI, r0
 800a56a:	4770      	bx	lr
 800a56c:	f3af 8000 	nop.w

0800a570 <pxCurrentTCBConst2>:
 800a570:	20000a08 	.word	0x20000a08
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a574:	bf00      	nop
 800a576:	bf00      	nop

0800a578 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a578:	4808      	ldr	r0, [pc, #32]	; (800a59c <prvPortStartFirstTask+0x24>)
 800a57a:	6800      	ldr	r0, [r0, #0]
 800a57c:	6800      	ldr	r0, [r0, #0]
 800a57e:	f380 8808 	msr	MSP, r0
 800a582:	f04f 0000 	mov.w	r0, #0
 800a586:	f380 8814 	msr	CONTROL, r0
 800a58a:	b662      	cpsie	i
 800a58c:	b661      	cpsie	f
 800a58e:	f3bf 8f4f 	dsb	sy
 800a592:	f3bf 8f6f 	isb	sy
 800a596:	df00      	svc	0
 800a598:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a59a:	bf00      	nop
 800a59c:	e000ed08 	.word	0xe000ed08

0800a5a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b086      	sub	sp, #24
 800a5a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a5a6:	4b46      	ldr	r3, [pc, #280]	; (800a6c0 <xPortStartScheduler+0x120>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	4a46      	ldr	r2, [pc, #280]	; (800a6c4 <xPortStartScheduler+0x124>)
 800a5ac:	4293      	cmp	r3, r2
 800a5ae:	d10a      	bne.n	800a5c6 <xPortStartScheduler+0x26>
	__asm volatile
 800a5b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5b4:	f383 8811 	msr	BASEPRI, r3
 800a5b8:	f3bf 8f6f 	isb	sy
 800a5bc:	f3bf 8f4f 	dsb	sy
 800a5c0:	613b      	str	r3, [r7, #16]
}
 800a5c2:	bf00      	nop
 800a5c4:	e7fe      	b.n	800a5c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a5c6:	4b3e      	ldr	r3, [pc, #248]	; (800a6c0 <xPortStartScheduler+0x120>)
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	4a3f      	ldr	r2, [pc, #252]	; (800a6c8 <xPortStartScheduler+0x128>)
 800a5cc:	4293      	cmp	r3, r2
 800a5ce:	d10a      	bne.n	800a5e6 <xPortStartScheduler+0x46>
	__asm volatile
 800a5d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5d4:	f383 8811 	msr	BASEPRI, r3
 800a5d8:	f3bf 8f6f 	isb	sy
 800a5dc:	f3bf 8f4f 	dsb	sy
 800a5e0:	60fb      	str	r3, [r7, #12]
}
 800a5e2:	bf00      	nop
 800a5e4:	e7fe      	b.n	800a5e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a5e6:	4b39      	ldr	r3, [pc, #228]	; (800a6cc <xPortStartScheduler+0x12c>)
 800a5e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	781b      	ldrb	r3, [r3, #0]
 800a5ee:	b2db      	uxtb	r3, r3
 800a5f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a5f2:	697b      	ldr	r3, [r7, #20]
 800a5f4:	22ff      	movs	r2, #255	; 0xff
 800a5f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a5f8:	697b      	ldr	r3, [r7, #20]
 800a5fa:	781b      	ldrb	r3, [r3, #0]
 800a5fc:	b2db      	uxtb	r3, r3
 800a5fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a600:	78fb      	ldrb	r3, [r7, #3]
 800a602:	b2db      	uxtb	r3, r3
 800a604:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a608:	b2da      	uxtb	r2, r3
 800a60a:	4b31      	ldr	r3, [pc, #196]	; (800a6d0 <xPortStartScheduler+0x130>)
 800a60c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a60e:	4b31      	ldr	r3, [pc, #196]	; (800a6d4 <xPortStartScheduler+0x134>)
 800a610:	2207      	movs	r2, #7
 800a612:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a614:	e009      	b.n	800a62a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a616:	4b2f      	ldr	r3, [pc, #188]	; (800a6d4 <xPortStartScheduler+0x134>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	3b01      	subs	r3, #1
 800a61c:	4a2d      	ldr	r2, [pc, #180]	; (800a6d4 <xPortStartScheduler+0x134>)
 800a61e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a620:	78fb      	ldrb	r3, [r7, #3]
 800a622:	b2db      	uxtb	r3, r3
 800a624:	005b      	lsls	r3, r3, #1
 800a626:	b2db      	uxtb	r3, r3
 800a628:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a62a:	78fb      	ldrb	r3, [r7, #3]
 800a62c:	b2db      	uxtb	r3, r3
 800a62e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a632:	2b80      	cmp	r3, #128	; 0x80
 800a634:	d0ef      	beq.n	800a616 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a636:	4b27      	ldr	r3, [pc, #156]	; (800a6d4 <xPortStartScheduler+0x134>)
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	f1c3 0307 	rsb	r3, r3, #7
 800a63e:	2b04      	cmp	r3, #4
 800a640:	d00a      	beq.n	800a658 <xPortStartScheduler+0xb8>
	__asm volatile
 800a642:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a646:	f383 8811 	msr	BASEPRI, r3
 800a64a:	f3bf 8f6f 	isb	sy
 800a64e:	f3bf 8f4f 	dsb	sy
 800a652:	60bb      	str	r3, [r7, #8]
}
 800a654:	bf00      	nop
 800a656:	e7fe      	b.n	800a656 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a658:	4b1e      	ldr	r3, [pc, #120]	; (800a6d4 <xPortStartScheduler+0x134>)
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	021b      	lsls	r3, r3, #8
 800a65e:	4a1d      	ldr	r2, [pc, #116]	; (800a6d4 <xPortStartScheduler+0x134>)
 800a660:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a662:	4b1c      	ldr	r3, [pc, #112]	; (800a6d4 <xPortStartScheduler+0x134>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a66a:	4a1a      	ldr	r2, [pc, #104]	; (800a6d4 <xPortStartScheduler+0x134>)
 800a66c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	b2da      	uxtb	r2, r3
 800a672:	697b      	ldr	r3, [r7, #20]
 800a674:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a676:	4b18      	ldr	r3, [pc, #96]	; (800a6d8 <xPortStartScheduler+0x138>)
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	4a17      	ldr	r2, [pc, #92]	; (800a6d8 <xPortStartScheduler+0x138>)
 800a67c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a680:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a682:	4b15      	ldr	r3, [pc, #84]	; (800a6d8 <xPortStartScheduler+0x138>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	4a14      	ldr	r2, [pc, #80]	; (800a6d8 <xPortStartScheduler+0x138>)
 800a688:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a68c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a68e:	f000 f8dd 	bl	800a84c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a692:	4b12      	ldr	r3, [pc, #72]	; (800a6dc <xPortStartScheduler+0x13c>)
 800a694:	2200      	movs	r2, #0
 800a696:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a698:	f000 f8fc 	bl	800a894 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a69c:	4b10      	ldr	r3, [pc, #64]	; (800a6e0 <xPortStartScheduler+0x140>)
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	4a0f      	ldr	r2, [pc, #60]	; (800a6e0 <xPortStartScheduler+0x140>)
 800a6a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a6a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a6a8:	f7ff ff66 	bl	800a578 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a6ac:	f7ff f848 	bl	8009740 <vTaskSwitchContext>
	prvTaskExitError();
 800a6b0:	f7ff ff1e 	bl	800a4f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a6b4:	2300      	movs	r3, #0
}
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	3718      	adds	r7, #24
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	bd80      	pop	{r7, pc}
 800a6be:	bf00      	nop
 800a6c0:	e000ed00 	.word	0xe000ed00
 800a6c4:	410fc271 	.word	0x410fc271
 800a6c8:	410fc270 	.word	0x410fc270
 800a6cc:	e000e400 	.word	0xe000e400
 800a6d0:	20001034 	.word	0x20001034
 800a6d4:	20001038 	.word	0x20001038
 800a6d8:	e000ed20 	.word	0xe000ed20
 800a6dc:	20000098 	.word	0x20000098
 800a6e0:	e000ef34 	.word	0xe000ef34

0800a6e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	b083      	sub	sp, #12
 800a6e8:	af00      	add	r7, sp, #0
	__asm volatile
 800a6ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ee:	f383 8811 	msr	BASEPRI, r3
 800a6f2:	f3bf 8f6f 	isb	sy
 800a6f6:	f3bf 8f4f 	dsb	sy
 800a6fa:	607b      	str	r3, [r7, #4]
}
 800a6fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a6fe:	4b0f      	ldr	r3, [pc, #60]	; (800a73c <vPortEnterCritical+0x58>)
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	3301      	adds	r3, #1
 800a704:	4a0d      	ldr	r2, [pc, #52]	; (800a73c <vPortEnterCritical+0x58>)
 800a706:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a708:	4b0c      	ldr	r3, [pc, #48]	; (800a73c <vPortEnterCritical+0x58>)
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	2b01      	cmp	r3, #1
 800a70e:	d10f      	bne.n	800a730 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a710:	4b0b      	ldr	r3, [pc, #44]	; (800a740 <vPortEnterCritical+0x5c>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	b2db      	uxtb	r3, r3
 800a716:	2b00      	cmp	r3, #0
 800a718:	d00a      	beq.n	800a730 <vPortEnterCritical+0x4c>
	__asm volatile
 800a71a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a71e:	f383 8811 	msr	BASEPRI, r3
 800a722:	f3bf 8f6f 	isb	sy
 800a726:	f3bf 8f4f 	dsb	sy
 800a72a:	603b      	str	r3, [r7, #0]
}
 800a72c:	bf00      	nop
 800a72e:	e7fe      	b.n	800a72e <vPortEnterCritical+0x4a>
	}
}
 800a730:	bf00      	nop
 800a732:	370c      	adds	r7, #12
 800a734:	46bd      	mov	sp, r7
 800a736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73a:	4770      	bx	lr
 800a73c:	20000098 	.word	0x20000098
 800a740:	e000ed04 	.word	0xe000ed04

0800a744 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a744:	b480      	push	{r7}
 800a746:	b083      	sub	sp, #12
 800a748:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a74a:	4b12      	ldr	r3, [pc, #72]	; (800a794 <vPortExitCritical+0x50>)
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d10a      	bne.n	800a768 <vPortExitCritical+0x24>
	__asm volatile
 800a752:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a756:	f383 8811 	msr	BASEPRI, r3
 800a75a:	f3bf 8f6f 	isb	sy
 800a75e:	f3bf 8f4f 	dsb	sy
 800a762:	607b      	str	r3, [r7, #4]
}
 800a764:	bf00      	nop
 800a766:	e7fe      	b.n	800a766 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a768:	4b0a      	ldr	r3, [pc, #40]	; (800a794 <vPortExitCritical+0x50>)
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	3b01      	subs	r3, #1
 800a76e:	4a09      	ldr	r2, [pc, #36]	; (800a794 <vPortExitCritical+0x50>)
 800a770:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a772:	4b08      	ldr	r3, [pc, #32]	; (800a794 <vPortExitCritical+0x50>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d105      	bne.n	800a786 <vPortExitCritical+0x42>
 800a77a:	2300      	movs	r3, #0
 800a77c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a77e:	683b      	ldr	r3, [r7, #0]
 800a780:	f383 8811 	msr	BASEPRI, r3
}
 800a784:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a786:	bf00      	nop
 800a788:	370c      	adds	r7, #12
 800a78a:	46bd      	mov	sp, r7
 800a78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a790:	4770      	bx	lr
 800a792:	bf00      	nop
 800a794:	20000098 	.word	0x20000098
	...

0800a7a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a7a0:	f3ef 8009 	mrs	r0, PSP
 800a7a4:	f3bf 8f6f 	isb	sy
 800a7a8:	4b15      	ldr	r3, [pc, #84]	; (800a800 <pxCurrentTCBConst>)
 800a7aa:	681a      	ldr	r2, [r3, #0]
 800a7ac:	f01e 0f10 	tst.w	lr, #16
 800a7b0:	bf08      	it	eq
 800a7b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a7b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7ba:	6010      	str	r0, [r2, #0]
 800a7bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a7c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a7c4:	f380 8811 	msr	BASEPRI, r0
 800a7c8:	f3bf 8f4f 	dsb	sy
 800a7cc:	f3bf 8f6f 	isb	sy
 800a7d0:	f7fe ffb6 	bl	8009740 <vTaskSwitchContext>
 800a7d4:	f04f 0000 	mov.w	r0, #0
 800a7d8:	f380 8811 	msr	BASEPRI, r0
 800a7dc:	bc09      	pop	{r0, r3}
 800a7de:	6819      	ldr	r1, [r3, #0]
 800a7e0:	6808      	ldr	r0, [r1, #0]
 800a7e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7e6:	f01e 0f10 	tst.w	lr, #16
 800a7ea:	bf08      	it	eq
 800a7ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a7f0:	f380 8809 	msr	PSP, r0
 800a7f4:	f3bf 8f6f 	isb	sy
 800a7f8:	4770      	bx	lr
 800a7fa:	bf00      	nop
 800a7fc:	f3af 8000 	nop.w

0800a800 <pxCurrentTCBConst>:
 800a800:	20000a08 	.word	0x20000a08
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a804:	bf00      	nop
 800a806:	bf00      	nop

0800a808 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b082      	sub	sp, #8
 800a80c:	af00      	add	r7, sp, #0
	__asm volatile
 800a80e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a812:	f383 8811 	msr	BASEPRI, r3
 800a816:	f3bf 8f6f 	isb	sy
 800a81a:	f3bf 8f4f 	dsb	sy
 800a81e:	607b      	str	r3, [r7, #4]
}
 800a820:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a822:	f7fe fed3 	bl	80095cc <xTaskIncrementTick>
 800a826:	4603      	mov	r3, r0
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d003      	beq.n	800a834 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a82c:	4b06      	ldr	r3, [pc, #24]	; (800a848 <xPortSysTickHandler+0x40>)
 800a82e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a832:	601a      	str	r2, [r3, #0]
 800a834:	2300      	movs	r3, #0
 800a836:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	f383 8811 	msr	BASEPRI, r3
}
 800a83e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a840:	bf00      	nop
 800a842:	3708      	adds	r7, #8
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}
 800a848:	e000ed04 	.word	0xe000ed04

0800a84c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a84c:	b480      	push	{r7}
 800a84e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a850:	4b0b      	ldr	r3, [pc, #44]	; (800a880 <vPortSetupTimerInterrupt+0x34>)
 800a852:	2200      	movs	r2, #0
 800a854:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a856:	4b0b      	ldr	r3, [pc, #44]	; (800a884 <vPortSetupTimerInterrupt+0x38>)
 800a858:	2200      	movs	r2, #0
 800a85a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a85c:	4b0a      	ldr	r3, [pc, #40]	; (800a888 <vPortSetupTimerInterrupt+0x3c>)
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	4a0a      	ldr	r2, [pc, #40]	; (800a88c <vPortSetupTimerInterrupt+0x40>)
 800a862:	fba2 2303 	umull	r2, r3, r2, r3
 800a866:	099b      	lsrs	r3, r3, #6
 800a868:	4a09      	ldr	r2, [pc, #36]	; (800a890 <vPortSetupTimerInterrupt+0x44>)
 800a86a:	3b01      	subs	r3, #1
 800a86c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a86e:	4b04      	ldr	r3, [pc, #16]	; (800a880 <vPortSetupTimerInterrupt+0x34>)
 800a870:	2207      	movs	r2, #7
 800a872:	601a      	str	r2, [r3, #0]
}
 800a874:	bf00      	nop
 800a876:	46bd      	mov	sp, r7
 800a878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87c:	4770      	bx	lr
 800a87e:	bf00      	nop
 800a880:	e000e010 	.word	0xe000e010
 800a884:	e000e018 	.word	0xe000e018
 800a888:	20000000 	.word	0x20000000
 800a88c:	10624dd3 	.word	0x10624dd3
 800a890:	e000e014 	.word	0xe000e014

0800a894 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a894:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a8a4 <vPortEnableVFP+0x10>
 800a898:	6801      	ldr	r1, [r0, #0]
 800a89a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a89e:	6001      	str	r1, [r0, #0]
 800a8a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a8a2:	bf00      	nop
 800a8a4:	e000ed88 	.word	0xe000ed88

0800a8a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a8a8:	b480      	push	{r7}
 800a8aa:	b085      	sub	sp, #20
 800a8ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a8ae:	f3ef 8305 	mrs	r3, IPSR
 800a8b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	2b0f      	cmp	r3, #15
 800a8b8:	d914      	bls.n	800a8e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a8ba:	4a17      	ldr	r2, [pc, #92]	; (800a918 <vPortValidateInterruptPriority+0x70>)
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	4413      	add	r3, r2
 800a8c0:	781b      	ldrb	r3, [r3, #0]
 800a8c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a8c4:	4b15      	ldr	r3, [pc, #84]	; (800a91c <vPortValidateInterruptPriority+0x74>)
 800a8c6:	781b      	ldrb	r3, [r3, #0]
 800a8c8:	7afa      	ldrb	r2, [r7, #11]
 800a8ca:	429a      	cmp	r2, r3
 800a8cc:	d20a      	bcs.n	800a8e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a8ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8d2:	f383 8811 	msr	BASEPRI, r3
 800a8d6:	f3bf 8f6f 	isb	sy
 800a8da:	f3bf 8f4f 	dsb	sy
 800a8de:	607b      	str	r3, [r7, #4]
}
 800a8e0:	bf00      	nop
 800a8e2:	e7fe      	b.n	800a8e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a8e4:	4b0e      	ldr	r3, [pc, #56]	; (800a920 <vPortValidateInterruptPriority+0x78>)
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a8ec:	4b0d      	ldr	r3, [pc, #52]	; (800a924 <vPortValidateInterruptPriority+0x7c>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	429a      	cmp	r2, r3
 800a8f2:	d90a      	bls.n	800a90a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a8f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8f8:	f383 8811 	msr	BASEPRI, r3
 800a8fc:	f3bf 8f6f 	isb	sy
 800a900:	f3bf 8f4f 	dsb	sy
 800a904:	603b      	str	r3, [r7, #0]
}
 800a906:	bf00      	nop
 800a908:	e7fe      	b.n	800a908 <vPortValidateInterruptPriority+0x60>
	}
 800a90a:	bf00      	nop
 800a90c:	3714      	adds	r7, #20
 800a90e:	46bd      	mov	sp, r7
 800a910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a914:	4770      	bx	lr
 800a916:	bf00      	nop
 800a918:	e000e3f0 	.word	0xe000e3f0
 800a91c:	20001034 	.word	0x20001034
 800a920:	e000ed0c 	.word	0xe000ed0c
 800a924:	20001038 	.word	0x20001038

0800a928 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b08a      	sub	sp, #40	; 0x28
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a930:	2300      	movs	r3, #0
 800a932:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a934:	f7fe fd8e 	bl	8009454 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a938:	4b5b      	ldr	r3, [pc, #364]	; (800aaa8 <pvPortMalloc+0x180>)
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d101      	bne.n	800a944 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a940:	f000 f920 	bl	800ab84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a944:	4b59      	ldr	r3, [pc, #356]	; (800aaac <pvPortMalloc+0x184>)
 800a946:	681a      	ldr	r2, [r3, #0]
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	4013      	ands	r3, r2
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	f040 8093 	bne.w	800aa78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d01d      	beq.n	800a994 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a958:	2208      	movs	r2, #8
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	4413      	add	r3, r2
 800a95e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	f003 0307 	and.w	r3, r3, #7
 800a966:	2b00      	cmp	r3, #0
 800a968:	d014      	beq.n	800a994 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	f023 0307 	bic.w	r3, r3, #7
 800a970:	3308      	adds	r3, #8
 800a972:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f003 0307 	and.w	r3, r3, #7
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d00a      	beq.n	800a994 <pvPortMalloc+0x6c>
	__asm volatile
 800a97e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a982:	f383 8811 	msr	BASEPRI, r3
 800a986:	f3bf 8f6f 	isb	sy
 800a98a:	f3bf 8f4f 	dsb	sy
 800a98e:	617b      	str	r3, [r7, #20]
}
 800a990:	bf00      	nop
 800a992:	e7fe      	b.n	800a992 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d06e      	beq.n	800aa78 <pvPortMalloc+0x150>
 800a99a:	4b45      	ldr	r3, [pc, #276]	; (800aab0 <pvPortMalloc+0x188>)
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	687a      	ldr	r2, [r7, #4]
 800a9a0:	429a      	cmp	r2, r3
 800a9a2:	d869      	bhi.n	800aa78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a9a4:	4b43      	ldr	r3, [pc, #268]	; (800aab4 <pvPortMalloc+0x18c>)
 800a9a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a9a8:	4b42      	ldr	r3, [pc, #264]	; (800aab4 <pvPortMalloc+0x18c>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a9ae:	e004      	b.n	800a9ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a9b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a9ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9bc:	685b      	ldr	r3, [r3, #4]
 800a9be:	687a      	ldr	r2, [r7, #4]
 800a9c0:	429a      	cmp	r2, r3
 800a9c2:	d903      	bls.n	800a9cc <pvPortMalloc+0xa4>
 800a9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d1f1      	bne.n	800a9b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a9cc:	4b36      	ldr	r3, [pc, #216]	; (800aaa8 <pvPortMalloc+0x180>)
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9d2:	429a      	cmp	r2, r3
 800a9d4:	d050      	beq.n	800aa78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a9d6:	6a3b      	ldr	r3, [r7, #32]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	2208      	movs	r2, #8
 800a9dc:	4413      	add	r3, r2
 800a9de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9e2:	681a      	ldr	r2, [r3, #0]
 800a9e4:	6a3b      	ldr	r3, [r7, #32]
 800a9e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a9e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ea:	685a      	ldr	r2, [r3, #4]
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	1ad2      	subs	r2, r2, r3
 800a9f0:	2308      	movs	r3, #8
 800a9f2:	005b      	lsls	r3, r3, #1
 800a9f4:	429a      	cmp	r2, r3
 800a9f6:	d91f      	bls.n	800aa38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a9f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	4413      	add	r3, r2
 800a9fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aa00:	69bb      	ldr	r3, [r7, #24]
 800aa02:	f003 0307 	and.w	r3, r3, #7
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d00a      	beq.n	800aa20 <pvPortMalloc+0xf8>
	__asm volatile
 800aa0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa0e:	f383 8811 	msr	BASEPRI, r3
 800aa12:	f3bf 8f6f 	isb	sy
 800aa16:	f3bf 8f4f 	dsb	sy
 800aa1a:	613b      	str	r3, [r7, #16]
}
 800aa1c:	bf00      	nop
 800aa1e:	e7fe      	b.n	800aa1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800aa20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa22:	685a      	ldr	r2, [r3, #4]
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	1ad2      	subs	r2, r2, r3
 800aa28:	69bb      	ldr	r3, [r7, #24]
 800aa2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800aa2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa2e:	687a      	ldr	r2, [r7, #4]
 800aa30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800aa32:	69b8      	ldr	r0, [r7, #24]
 800aa34:	f000 f908 	bl	800ac48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800aa38:	4b1d      	ldr	r3, [pc, #116]	; (800aab0 <pvPortMalloc+0x188>)
 800aa3a:	681a      	ldr	r2, [r3, #0]
 800aa3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa3e:	685b      	ldr	r3, [r3, #4]
 800aa40:	1ad3      	subs	r3, r2, r3
 800aa42:	4a1b      	ldr	r2, [pc, #108]	; (800aab0 <pvPortMalloc+0x188>)
 800aa44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800aa46:	4b1a      	ldr	r3, [pc, #104]	; (800aab0 <pvPortMalloc+0x188>)
 800aa48:	681a      	ldr	r2, [r3, #0]
 800aa4a:	4b1b      	ldr	r3, [pc, #108]	; (800aab8 <pvPortMalloc+0x190>)
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	429a      	cmp	r2, r3
 800aa50:	d203      	bcs.n	800aa5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800aa52:	4b17      	ldr	r3, [pc, #92]	; (800aab0 <pvPortMalloc+0x188>)
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	4a18      	ldr	r2, [pc, #96]	; (800aab8 <pvPortMalloc+0x190>)
 800aa58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800aa5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa5c:	685a      	ldr	r2, [r3, #4]
 800aa5e:	4b13      	ldr	r3, [pc, #76]	; (800aaac <pvPortMalloc+0x184>)
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	431a      	orrs	r2, r3
 800aa64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800aa68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800aa6e:	4b13      	ldr	r3, [pc, #76]	; (800aabc <pvPortMalloc+0x194>)
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	3301      	adds	r3, #1
 800aa74:	4a11      	ldr	r2, [pc, #68]	; (800aabc <pvPortMalloc+0x194>)
 800aa76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800aa78:	f7fe fcfa 	bl	8009470 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800aa7c:	69fb      	ldr	r3, [r7, #28]
 800aa7e:	f003 0307 	and.w	r3, r3, #7
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d00a      	beq.n	800aa9c <pvPortMalloc+0x174>
	__asm volatile
 800aa86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa8a:	f383 8811 	msr	BASEPRI, r3
 800aa8e:	f3bf 8f6f 	isb	sy
 800aa92:	f3bf 8f4f 	dsb	sy
 800aa96:	60fb      	str	r3, [r7, #12]
}
 800aa98:	bf00      	nop
 800aa9a:	e7fe      	b.n	800aa9a <pvPortMalloc+0x172>
	return pvReturn;
 800aa9c:	69fb      	ldr	r3, [r7, #28]
}
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	3728      	adds	r7, #40	; 0x28
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	bd80      	pop	{r7, pc}
 800aaa6:	bf00      	nop
 800aaa8:	20004c44 	.word	0x20004c44
 800aaac:	20004c58 	.word	0x20004c58
 800aab0:	20004c48 	.word	0x20004c48
 800aab4:	20004c3c 	.word	0x20004c3c
 800aab8:	20004c4c 	.word	0x20004c4c
 800aabc:	20004c50 	.word	0x20004c50

0800aac0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b086      	sub	sp, #24
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d04d      	beq.n	800ab6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800aad2:	2308      	movs	r3, #8
 800aad4:	425b      	negs	r3, r3
 800aad6:	697a      	ldr	r2, [r7, #20]
 800aad8:	4413      	add	r3, r2
 800aada:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800aadc:	697b      	ldr	r3, [r7, #20]
 800aade:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800aae0:	693b      	ldr	r3, [r7, #16]
 800aae2:	685a      	ldr	r2, [r3, #4]
 800aae4:	4b24      	ldr	r3, [pc, #144]	; (800ab78 <vPortFree+0xb8>)
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	4013      	ands	r3, r2
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d10a      	bne.n	800ab04 <vPortFree+0x44>
	__asm volatile
 800aaee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaf2:	f383 8811 	msr	BASEPRI, r3
 800aaf6:	f3bf 8f6f 	isb	sy
 800aafa:	f3bf 8f4f 	dsb	sy
 800aafe:	60fb      	str	r3, [r7, #12]
}
 800ab00:	bf00      	nop
 800ab02:	e7fe      	b.n	800ab02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ab04:	693b      	ldr	r3, [r7, #16]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d00a      	beq.n	800ab22 <vPortFree+0x62>
	__asm volatile
 800ab0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab10:	f383 8811 	msr	BASEPRI, r3
 800ab14:	f3bf 8f6f 	isb	sy
 800ab18:	f3bf 8f4f 	dsb	sy
 800ab1c:	60bb      	str	r3, [r7, #8]
}
 800ab1e:	bf00      	nop
 800ab20:	e7fe      	b.n	800ab20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ab22:	693b      	ldr	r3, [r7, #16]
 800ab24:	685a      	ldr	r2, [r3, #4]
 800ab26:	4b14      	ldr	r3, [pc, #80]	; (800ab78 <vPortFree+0xb8>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	4013      	ands	r3, r2
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d01e      	beq.n	800ab6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ab30:	693b      	ldr	r3, [r7, #16]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d11a      	bne.n	800ab6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ab38:	693b      	ldr	r3, [r7, #16]
 800ab3a:	685a      	ldr	r2, [r3, #4]
 800ab3c:	4b0e      	ldr	r3, [pc, #56]	; (800ab78 <vPortFree+0xb8>)
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	43db      	mvns	r3, r3
 800ab42:	401a      	ands	r2, r3
 800ab44:	693b      	ldr	r3, [r7, #16]
 800ab46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ab48:	f7fe fc84 	bl	8009454 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ab4c:	693b      	ldr	r3, [r7, #16]
 800ab4e:	685a      	ldr	r2, [r3, #4]
 800ab50:	4b0a      	ldr	r3, [pc, #40]	; (800ab7c <vPortFree+0xbc>)
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	4413      	add	r3, r2
 800ab56:	4a09      	ldr	r2, [pc, #36]	; (800ab7c <vPortFree+0xbc>)
 800ab58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ab5a:	6938      	ldr	r0, [r7, #16]
 800ab5c:	f000 f874 	bl	800ac48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ab60:	4b07      	ldr	r3, [pc, #28]	; (800ab80 <vPortFree+0xc0>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	3301      	adds	r3, #1
 800ab66:	4a06      	ldr	r2, [pc, #24]	; (800ab80 <vPortFree+0xc0>)
 800ab68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ab6a:	f7fe fc81 	bl	8009470 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ab6e:	bf00      	nop
 800ab70:	3718      	adds	r7, #24
 800ab72:	46bd      	mov	sp, r7
 800ab74:	bd80      	pop	{r7, pc}
 800ab76:	bf00      	nop
 800ab78:	20004c58 	.word	0x20004c58
 800ab7c:	20004c48 	.word	0x20004c48
 800ab80:	20004c54 	.word	0x20004c54

0800ab84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ab84:	b480      	push	{r7}
 800ab86:	b085      	sub	sp, #20
 800ab88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ab8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ab8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ab90:	4b27      	ldr	r3, [pc, #156]	; (800ac30 <prvHeapInit+0xac>)
 800ab92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	f003 0307 	and.w	r3, r3, #7
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d00c      	beq.n	800abb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	3307      	adds	r3, #7
 800aba2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	f023 0307 	bic.w	r3, r3, #7
 800abaa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800abac:	68ba      	ldr	r2, [r7, #8]
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	1ad3      	subs	r3, r2, r3
 800abb2:	4a1f      	ldr	r2, [pc, #124]	; (800ac30 <prvHeapInit+0xac>)
 800abb4:	4413      	add	r3, r2
 800abb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800abbc:	4a1d      	ldr	r2, [pc, #116]	; (800ac34 <prvHeapInit+0xb0>)
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800abc2:	4b1c      	ldr	r3, [pc, #112]	; (800ac34 <prvHeapInit+0xb0>)
 800abc4:	2200      	movs	r2, #0
 800abc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	68ba      	ldr	r2, [r7, #8]
 800abcc:	4413      	add	r3, r2
 800abce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800abd0:	2208      	movs	r2, #8
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	1a9b      	subs	r3, r3, r2
 800abd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	f023 0307 	bic.w	r3, r3, #7
 800abde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	4a15      	ldr	r2, [pc, #84]	; (800ac38 <prvHeapInit+0xb4>)
 800abe4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800abe6:	4b14      	ldr	r3, [pc, #80]	; (800ac38 <prvHeapInit+0xb4>)
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	2200      	movs	r2, #0
 800abec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800abee:	4b12      	ldr	r3, [pc, #72]	; (800ac38 <prvHeapInit+0xb4>)
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	2200      	movs	r2, #0
 800abf4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	68fa      	ldr	r2, [r7, #12]
 800abfe:	1ad2      	subs	r2, r2, r3
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ac04:	4b0c      	ldr	r3, [pc, #48]	; (800ac38 <prvHeapInit+0xb4>)
 800ac06:	681a      	ldr	r2, [r3, #0]
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	685b      	ldr	r3, [r3, #4]
 800ac10:	4a0a      	ldr	r2, [pc, #40]	; (800ac3c <prvHeapInit+0xb8>)
 800ac12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ac14:	683b      	ldr	r3, [r7, #0]
 800ac16:	685b      	ldr	r3, [r3, #4]
 800ac18:	4a09      	ldr	r2, [pc, #36]	; (800ac40 <prvHeapInit+0xbc>)
 800ac1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ac1c:	4b09      	ldr	r3, [pc, #36]	; (800ac44 <prvHeapInit+0xc0>)
 800ac1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ac22:	601a      	str	r2, [r3, #0]
}
 800ac24:	bf00      	nop
 800ac26:	3714      	adds	r7, #20
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2e:	4770      	bx	lr
 800ac30:	2000103c 	.word	0x2000103c
 800ac34:	20004c3c 	.word	0x20004c3c
 800ac38:	20004c44 	.word	0x20004c44
 800ac3c:	20004c4c 	.word	0x20004c4c
 800ac40:	20004c48 	.word	0x20004c48
 800ac44:	20004c58 	.word	0x20004c58

0800ac48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ac48:	b480      	push	{r7}
 800ac4a:	b085      	sub	sp, #20
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ac50:	4b28      	ldr	r3, [pc, #160]	; (800acf4 <prvInsertBlockIntoFreeList+0xac>)
 800ac52:	60fb      	str	r3, [r7, #12]
 800ac54:	e002      	b.n	800ac5c <prvInsertBlockIntoFreeList+0x14>
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	60fb      	str	r3, [r7, #12]
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	687a      	ldr	r2, [r7, #4]
 800ac62:	429a      	cmp	r2, r3
 800ac64:	d8f7      	bhi.n	800ac56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	685b      	ldr	r3, [r3, #4]
 800ac6e:	68ba      	ldr	r2, [r7, #8]
 800ac70:	4413      	add	r3, r2
 800ac72:	687a      	ldr	r2, [r7, #4]
 800ac74:	429a      	cmp	r2, r3
 800ac76:	d108      	bne.n	800ac8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	685a      	ldr	r2, [r3, #4]
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	685b      	ldr	r3, [r3, #4]
 800ac80:	441a      	add	r2, r3
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	685b      	ldr	r3, [r3, #4]
 800ac92:	68ba      	ldr	r2, [r7, #8]
 800ac94:	441a      	add	r2, r3
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	429a      	cmp	r2, r3
 800ac9c:	d118      	bne.n	800acd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	681a      	ldr	r2, [r3, #0]
 800aca2:	4b15      	ldr	r3, [pc, #84]	; (800acf8 <prvInsertBlockIntoFreeList+0xb0>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	429a      	cmp	r2, r3
 800aca8:	d00d      	beq.n	800acc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	685a      	ldr	r2, [r3, #4]
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	685b      	ldr	r3, [r3, #4]
 800acb4:	441a      	add	r2, r3
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	681a      	ldr	r2, [r3, #0]
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	601a      	str	r2, [r3, #0]
 800acc4:	e008      	b.n	800acd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800acc6:	4b0c      	ldr	r3, [pc, #48]	; (800acf8 <prvInsertBlockIntoFreeList+0xb0>)
 800acc8:	681a      	ldr	r2, [r3, #0]
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	601a      	str	r2, [r3, #0]
 800acce:	e003      	b.n	800acd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	681a      	ldr	r2, [r3, #0]
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800acd8:	68fa      	ldr	r2, [r7, #12]
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	429a      	cmp	r2, r3
 800acde:	d002      	beq.n	800ace6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	687a      	ldr	r2, [r7, #4]
 800ace4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ace6:	bf00      	nop
 800ace8:	3714      	adds	r7, #20
 800acea:	46bd      	mov	sp, r7
 800acec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf0:	4770      	bx	lr
 800acf2:	bf00      	nop
 800acf4:	20004c3c 	.word	0x20004c3c
 800acf8:	20004c44 	.word	0x20004c44

0800acfc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ad00:	2200      	movs	r2, #0
 800ad02:	4912      	ldr	r1, [pc, #72]	; (800ad4c <MX_USB_DEVICE_Init+0x50>)
 800ad04:	4812      	ldr	r0, [pc, #72]	; (800ad50 <MX_USB_DEVICE_Init+0x54>)
 800ad06:	f7fb ff47 	bl	8006b98 <USBD_Init>
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d001      	beq.n	800ad14 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ad10:	f7f5 fdf0 	bl	80008f4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ad14:	490f      	ldr	r1, [pc, #60]	; (800ad54 <MX_USB_DEVICE_Init+0x58>)
 800ad16:	480e      	ldr	r0, [pc, #56]	; (800ad50 <MX_USB_DEVICE_Init+0x54>)
 800ad18:	f7fb ff6e 	bl	8006bf8 <USBD_RegisterClass>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d001      	beq.n	800ad26 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ad22:	f7f5 fde7 	bl	80008f4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ad26:	490c      	ldr	r1, [pc, #48]	; (800ad58 <MX_USB_DEVICE_Init+0x5c>)
 800ad28:	4809      	ldr	r0, [pc, #36]	; (800ad50 <MX_USB_DEVICE_Init+0x54>)
 800ad2a:	f7fb fe5f 	bl	80069ec <USBD_CDC_RegisterInterface>
 800ad2e:	4603      	mov	r3, r0
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d001      	beq.n	800ad38 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ad34:	f7f5 fdde 	bl	80008f4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ad38:	4805      	ldr	r0, [pc, #20]	; (800ad50 <MX_USB_DEVICE_Init+0x54>)
 800ad3a:	f7fb ff93 	bl	8006c64 <USBD_Start>
 800ad3e:	4603      	mov	r3, r0
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d001      	beq.n	800ad48 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ad44:	f7f5 fdd6 	bl	80008f4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ad48:	bf00      	nop
 800ad4a:	bd80      	pop	{r7, pc}
 800ad4c:	200000b0 	.word	0x200000b0
 800ad50:	20004c5c 	.word	0x20004c5c
 800ad54:	20000018 	.word	0x20000018
 800ad58:	2000009c 	.word	0x2000009c

0800ad5c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ad60:	2200      	movs	r2, #0
 800ad62:	4905      	ldr	r1, [pc, #20]	; (800ad78 <CDC_Init_FS+0x1c>)
 800ad64:	4805      	ldr	r0, [pc, #20]	; (800ad7c <CDC_Init_FS+0x20>)
 800ad66:	f7fb fe5b 	bl	8006a20 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ad6a:	4905      	ldr	r1, [pc, #20]	; (800ad80 <CDC_Init_FS+0x24>)
 800ad6c:	4803      	ldr	r0, [pc, #12]	; (800ad7c <CDC_Init_FS+0x20>)
 800ad6e:	f7fb fe79 	bl	8006a64 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ad72:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ad74:	4618      	mov	r0, r3
 800ad76:	bd80      	pop	{r7, pc}
 800ad78:	20005738 	.word	0x20005738
 800ad7c:	20004c5c 	.word	0x20004c5c
 800ad80:	20004f38 	.word	0x20004f38

0800ad84 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ad84:	b480      	push	{r7}
 800ad86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ad88:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad92:	4770      	bx	lr

0800ad94 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ad94:	b480      	push	{r7}
 800ad96:	b083      	sub	sp, #12
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	6039      	str	r1, [r7, #0]
 800ad9e:	71fb      	strb	r3, [r7, #7]
 800ada0:	4613      	mov	r3, r2
 800ada2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ada4:	79fb      	ldrb	r3, [r7, #7]
 800ada6:	2b23      	cmp	r3, #35	; 0x23
 800ada8:	d84a      	bhi.n	800ae40 <CDC_Control_FS+0xac>
 800adaa:	a201      	add	r2, pc, #4	; (adr r2, 800adb0 <CDC_Control_FS+0x1c>)
 800adac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adb0:	0800ae41 	.word	0x0800ae41
 800adb4:	0800ae41 	.word	0x0800ae41
 800adb8:	0800ae41 	.word	0x0800ae41
 800adbc:	0800ae41 	.word	0x0800ae41
 800adc0:	0800ae41 	.word	0x0800ae41
 800adc4:	0800ae41 	.word	0x0800ae41
 800adc8:	0800ae41 	.word	0x0800ae41
 800adcc:	0800ae41 	.word	0x0800ae41
 800add0:	0800ae41 	.word	0x0800ae41
 800add4:	0800ae41 	.word	0x0800ae41
 800add8:	0800ae41 	.word	0x0800ae41
 800addc:	0800ae41 	.word	0x0800ae41
 800ade0:	0800ae41 	.word	0x0800ae41
 800ade4:	0800ae41 	.word	0x0800ae41
 800ade8:	0800ae41 	.word	0x0800ae41
 800adec:	0800ae41 	.word	0x0800ae41
 800adf0:	0800ae41 	.word	0x0800ae41
 800adf4:	0800ae41 	.word	0x0800ae41
 800adf8:	0800ae41 	.word	0x0800ae41
 800adfc:	0800ae41 	.word	0x0800ae41
 800ae00:	0800ae41 	.word	0x0800ae41
 800ae04:	0800ae41 	.word	0x0800ae41
 800ae08:	0800ae41 	.word	0x0800ae41
 800ae0c:	0800ae41 	.word	0x0800ae41
 800ae10:	0800ae41 	.word	0x0800ae41
 800ae14:	0800ae41 	.word	0x0800ae41
 800ae18:	0800ae41 	.word	0x0800ae41
 800ae1c:	0800ae41 	.word	0x0800ae41
 800ae20:	0800ae41 	.word	0x0800ae41
 800ae24:	0800ae41 	.word	0x0800ae41
 800ae28:	0800ae41 	.word	0x0800ae41
 800ae2c:	0800ae41 	.word	0x0800ae41
 800ae30:	0800ae41 	.word	0x0800ae41
 800ae34:	0800ae41 	.word	0x0800ae41
 800ae38:	0800ae41 	.word	0x0800ae41
 800ae3c:	0800ae41 	.word	0x0800ae41
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ae40:	bf00      	nop
  }

  return (USBD_OK);
 800ae42:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ae44:	4618      	mov	r0, r3
 800ae46:	370c      	adds	r7, #12
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4e:	4770      	bx	lr

0800ae50 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b082      	sub	sp, #8
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
 800ae58:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ae5a:	6879      	ldr	r1, [r7, #4]
 800ae5c:	4805      	ldr	r0, [pc, #20]	; (800ae74 <CDC_Receive_FS+0x24>)
 800ae5e:	f7fb fe01 	bl	8006a64 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ae62:	4804      	ldr	r0, [pc, #16]	; (800ae74 <CDC_Receive_FS+0x24>)
 800ae64:	f7fb fe62 	bl	8006b2c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ae68:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	3708      	adds	r7, #8
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	bd80      	pop	{r7, pc}
 800ae72:	bf00      	nop
 800ae74:	20004c5c 	.word	0x20004c5c

0800ae78 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b084      	sub	sp, #16
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
 800ae80:	460b      	mov	r3, r1
 800ae82:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ae84:	2300      	movs	r3, #0
 800ae86:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ae88:	4b0d      	ldr	r3, [pc, #52]	; (800aec0 <CDC_Transmit_FS+0x48>)
 800ae8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ae8e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ae90:	68bb      	ldr	r3, [r7, #8]
 800ae92:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d001      	beq.n	800ae9e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ae9a:	2301      	movs	r3, #1
 800ae9c:	e00b      	b.n	800aeb6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ae9e:	887b      	ldrh	r3, [r7, #2]
 800aea0:	461a      	mov	r2, r3
 800aea2:	6879      	ldr	r1, [r7, #4]
 800aea4:	4806      	ldr	r0, [pc, #24]	; (800aec0 <CDC_Transmit_FS+0x48>)
 800aea6:	f7fb fdbb 	bl	8006a20 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800aeaa:	4805      	ldr	r0, [pc, #20]	; (800aec0 <CDC_Transmit_FS+0x48>)
 800aeac:	f7fb fdf8 	bl	8006aa0 <USBD_CDC_TransmitPacket>
 800aeb0:	4603      	mov	r3, r0
 800aeb2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800aeb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	3710      	adds	r7, #16
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}
 800aebe:	bf00      	nop
 800aec0:	20004c5c 	.word	0x20004c5c

0800aec4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800aec4:	b480      	push	{r7}
 800aec6:	b087      	sub	sp, #28
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	60f8      	str	r0, [r7, #12]
 800aecc:	60b9      	str	r1, [r7, #8]
 800aece:	4613      	mov	r3, r2
 800aed0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800aed2:	2300      	movs	r3, #0
 800aed4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800aed6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aeda:	4618      	mov	r0, r3
 800aedc:	371c      	adds	r7, #28
 800aede:	46bd      	mov	sp, r7
 800aee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee4:	4770      	bx	lr
	...

0800aee8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aee8:	b480      	push	{r7}
 800aeea:	b083      	sub	sp, #12
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	4603      	mov	r3, r0
 800aef0:	6039      	str	r1, [r7, #0]
 800aef2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	2212      	movs	r2, #18
 800aef8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800aefa:	4b03      	ldr	r3, [pc, #12]	; (800af08 <USBD_FS_DeviceDescriptor+0x20>)
}
 800aefc:	4618      	mov	r0, r3
 800aefe:	370c      	adds	r7, #12
 800af00:	46bd      	mov	sp, r7
 800af02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af06:	4770      	bx	lr
 800af08:	200000cc 	.word	0x200000cc

0800af0c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af0c:	b480      	push	{r7}
 800af0e:	b083      	sub	sp, #12
 800af10:	af00      	add	r7, sp, #0
 800af12:	4603      	mov	r3, r0
 800af14:	6039      	str	r1, [r7, #0]
 800af16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	2204      	movs	r2, #4
 800af1c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800af1e:	4b03      	ldr	r3, [pc, #12]	; (800af2c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800af20:	4618      	mov	r0, r3
 800af22:	370c      	adds	r7, #12
 800af24:	46bd      	mov	sp, r7
 800af26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2a:	4770      	bx	lr
 800af2c:	200000e0 	.word	0x200000e0

0800af30 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b082      	sub	sp, #8
 800af34:	af00      	add	r7, sp, #0
 800af36:	4603      	mov	r3, r0
 800af38:	6039      	str	r1, [r7, #0]
 800af3a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800af3c:	79fb      	ldrb	r3, [r7, #7]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d105      	bne.n	800af4e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800af42:	683a      	ldr	r2, [r7, #0]
 800af44:	4907      	ldr	r1, [pc, #28]	; (800af64 <USBD_FS_ProductStrDescriptor+0x34>)
 800af46:	4808      	ldr	r0, [pc, #32]	; (800af68 <USBD_FS_ProductStrDescriptor+0x38>)
 800af48:	f7fd f838 	bl	8007fbc <USBD_GetString>
 800af4c:	e004      	b.n	800af58 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800af4e:	683a      	ldr	r2, [r7, #0]
 800af50:	4904      	ldr	r1, [pc, #16]	; (800af64 <USBD_FS_ProductStrDescriptor+0x34>)
 800af52:	4805      	ldr	r0, [pc, #20]	; (800af68 <USBD_FS_ProductStrDescriptor+0x38>)
 800af54:	f7fd f832 	bl	8007fbc <USBD_GetString>
  }
  return USBD_StrDesc;
 800af58:	4b02      	ldr	r3, [pc, #8]	; (800af64 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800af5a:	4618      	mov	r0, r3
 800af5c:	3708      	adds	r7, #8
 800af5e:	46bd      	mov	sp, r7
 800af60:	bd80      	pop	{r7, pc}
 800af62:	bf00      	nop
 800af64:	20005f38 	.word	0x20005f38
 800af68:	0800bec8 	.word	0x0800bec8

0800af6c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b082      	sub	sp, #8
 800af70:	af00      	add	r7, sp, #0
 800af72:	4603      	mov	r3, r0
 800af74:	6039      	str	r1, [r7, #0]
 800af76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800af78:	683a      	ldr	r2, [r7, #0]
 800af7a:	4904      	ldr	r1, [pc, #16]	; (800af8c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800af7c:	4804      	ldr	r0, [pc, #16]	; (800af90 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800af7e:	f7fd f81d 	bl	8007fbc <USBD_GetString>
  return USBD_StrDesc;
 800af82:	4b02      	ldr	r3, [pc, #8]	; (800af8c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800af84:	4618      	mov	r0, r3
 800af86:	3708      	adds	r7, #8
 800af88:	46bd      	mov	sp, r7
 800af8a:	bd80      	pop	{r7, pc}
 800af8c:	20005f38 	.word	0x20005f38
 800af90:	0800bed4 	.word	0x0800bed4

0800af94 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b082      	sub	sp, #8
 800af98:	af00      	add	r7, sp, #0
 800af9a:	4603      	mov	r3, r0
 800af9c:	6039      	str	r1, [r7, #0]
 800af9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	221a      	movs	r2, #26
 800afa4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800afa6:	f000 f843 	bl	800b030 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800afaa:	4b02      	ldr	r3, [pc, #8]	; (800afb4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800afac:	4618      	mov	r0, r3
 800afae:	3708      	adds	r7, #8
 800afb0:	46bd      	mov	sp, r7
 800afb2:	bd80      	pop	{r7, pc}
 800afb4:	200000e4 	.word	0x200000e4

0800afb8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b082      	sub	sp, #8
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	4603      	mov	r3, r0
 800afc0:	6039      	str	r1, [r7, #0]
 800afc2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800afc4:	79fb      	ldrb	r3, [r7, #7]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d105      	bne.n	800afd6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800afca:	683a      	ldr	r2, [r7, #0]
 800afcc:	4907      	ldr	r1, [pc, #28]	; (800afec <USBD_FS_ConfigStrDescriptor+0x34>)
 800afce:	4808      	ldr	r0, [pc, #32]	; (800aff0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800afd0:	f7fc fff4 	bl	8007fbc <USBD_GetString>
 800afd4:	e004      	b.n	800afe0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800afd6:	683a      	ldr	r2, [r7, #0]
 800afd8:	4904      	ldr	r1, [pc, #16]	; (800afec <USBD_FS_ConfigStrDescriptor+0x34>)
 800afda:	4805      	ldr	r0, [pc, #20]	; (800aff0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800afdc:	f7fc ffee 	bl	8007fbc <USBD_GetString>
  }
  return USBD_StrDesc;
 800afe0:	4b02      	ldr	r3, [pc, #8]	; (800afec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800afe2:	4618      	mov	r0, r3
 800afe4:	3708      	adds	r7, #8
 800afe6:	46bd      	mov	sp, r7
 800afe8:	bd80      	pop	{r7, pc}
 800afea:	bf00      	nop
 800afec:	20005f38 	.word	0x20005f38
 800aff0:	0800bee8 	.word	0x0800bee8

0800aff4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b082      	sub	sp, #8
 800aff8:	af00      	add	r7, sp, #0
 800affa:	4603      	mov	r3, r0
 800affc:	6039      	str	r1, [r7, #0]
 800affe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b000:	79fb      	ldrb	r3, [r7, #7]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d105      	bne.n	800b012 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b006:	683a      	ldr	r2, [r7, #0]
 800b008:	4907      	ldr	r1, [pc, #28]	; (800b028 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b00a:	4808      	ldr	r0, [pc, #32]	; (800b02c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b00c:	f7fc ffd6 	bl	8007fbc <USBD_GetString>
 800b010:	e004      	b.n	800b01c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b012:	683a      	ldr	r2, [r7, #0]
 800b014:	4904      	ldr	r1, [pc, #16]	; (800b028 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b016:	4805      	ldr	r0, [pc, #20]	; (800b02c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b018:	f7fc ffd0 	bl	8007fbc <USBD_GetString>
  }
  return USBD_StrDesc;
 800b01c:	4b02      	ldr	r3, [pc, #8]	; (800b028 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b01e:	4618      	mov	r0, r3
 800b020:	3708      	adds	r7, #8
 800b022:	46bd      	mov	sp, r7
 800b024:	bd80      	pop	{r7, pc}
 800b026:	bf00      	nop
 800b028:	20005f38 	.word	0x20005f38
 800b02c:	0800bef4 	.word	0x0800bef4

0800b030 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b084      	sub	sp, #16
 800b034:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b036:	4b0f      	ldr	r3, [pc, #60]	; (800b074 <Get_SerialNum+0x44>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b03c:	4b0e      	ldr	r3, [pc, #56]	; (800b078 <Get_SerialNum+0x48>)
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b042:	4b0e      	ldr	r3, [pc, #56]	; (800b07c <Get_SerialNum+0x4c>)
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b048:	68fa      	ldr	r2, [r7, #12]
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	4413      	add	r3, r2
 800b04e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d009      	beq.n	800b06a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b056:	2208      	movs	r2, #8
 800b058:	4909      	ldr	r1, [pc, #36]	; (800b080 <Get_SerialNum+0x50>)
 800b05a:	68f8      	ldr	r0, [r7, #12]
 800b05c:	f000 f814 	bl	800b088 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b060:	2204      	movs	r2, #4
 800b062:	4908      	ldr	r1, [pc, #32]	; (800b084 <Get_SerialNum+0x54>)
 800b064:	68b8      	ldr	r0, [r7, #8]
 800b066:	f000 f80f 	bl	800b088 <IntToUnicode>
  }
}
 800b06a:	bf00      	nop
 800b06c:	3710      	adds	r7, #16
 800b06e:	46bd      	mov	sp, r7
 800b070:	bd80      	pop	{r7, pc}
 800b072:	bf00      	nop
 800b074:	1fff7a10 	.word	0x1fff7a10
 800b078:	1fff7a14 	.word	0x1fff7a14
 800b07c:	1fff7a18 	.word	0x1fff7a18
 800b080:	200000e6 	.word	0x200000e6
 800b084:	200000f6 	.word	0x200000f6

0800b088 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b088:	b480      	push	{r7}
 800b08a:	b087      	sub	sp, #28
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	60f8      	str	r0, [r7, #12]
 800b090:	60b9      	str	r1, [r7, #8]
 800b092:	4613      	mov	r3, r2
 800b094:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b096:	2300      	movs	r3, #0
 800b098:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b09a:	2300      	movs	r3, #0
 800b09c:	75fb      	strb	r3, [r7, #23]
 800b09e:	e027      	b.n	800b0f0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	0f1b      	lsrs	r3, r3, #28
 800b0a4:	2b09      	cmp	r3, #9
 800b0a6:	d80b      	bhi.n	800b0c0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	0f1b      	lsrs	r3, r3, #28
 800b0ac:	b2da      	uxtb	r2, r3
 800b0ae:	7dfb      	ldrb	r3, [r7, #23]
 800b0b0:	005b      	lsls	r3, r3, #1
 800b0b2:	4619      	mov	r1, r3
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	440b      	add	r3, r1
 800b0b8:	3230      	adds	r2, #48	; 0x30
 800b0ba:	b2d2      	uxtb	r2, r2
 800b0bc:	701a      	strb	r2, [r3, #0]
 800b0be:	e00a      	b.n	800b0d6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	0f1b      	lsrs	r3, r3, #28
 800b0c4:	b2da      	uxtb	r2, r3
 800b0c6:	7dfb      	ldrb	r3, [r7, #23]
 800b0c8:	005b      	lsls	r3, r3, #1
 800b0ca:	4619      	mov	r1, r3
 800b0cc:	68bb      	ldr	r3, [r7, #8]
 800b0ce:	440b      	add	r3, r1
 800b0d0:	3237      	adds	r2, #55	; 0x37
 800b0d2:	b2d2      	uxtb	r2, r2
 800b0d4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	011b      	lsls	r3, r3, #4
 800b0da:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b0dc:	7dfb      	ldrb	r3, [r7, #23]
 800b0de:	005b      	lsls	r3, r3, #1
 800b0e0:	3301      	adds	r3, #1
 800b0e2:	68ba      	ldr	r2, [r7, #8]
 800b0e4:	4413      	add	r3, r2
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b0ea:	7dfb      	ldrb	r3, [r7, #23]
 800b0ec:	3301      	adds	r3, #1
 800b0ee:	75fb      	strb	r3, [r7, #23]
 800b0f0:	7dfa      	ldrb	r2, [r7, #23]
 800b0f2:	79fb      	ldrb	r3, [r7, #7]
 800b0f4:	429a      	cmp	r2, r3
 800b0f6:	d3d3      	bcc.n	800b0a0 <IntToUnicode+0x18>
  }
}
 800b0f8:	bf00      	nop
 800b0fa:	bf00      	nop
 800b0fc:	371c      	adds	r7, #28
 800b0fe:	46bd      	mov	sp, r7
 800b100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b104:	4770      	bx	lr
	...

0800b108 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b08a      	sub	sp, #40	; 0x28
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b110:	f107 0314 	add.w	r3, r7, #20
 800b114:	2200      	movs	r2, #0
 800b116:	601a      	str	r2, [r3, #0]
 800b118:	605a      	str	r2, [r3, #4]
 800b11a:	609a      	str	r2, [r3, #8]
 800b11c:	60da      	str	r2, [r3, #12]
 800b11e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b128:	d13a      	bne.n	800b1a0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b12a:	2300      	movs	r3, #0
 800b12c:	613b      	str	r3, [r7, #16]
 800b12e:	4b1e      	ldr	r3, [pc, #120]	; (800b1a8 <HAL_PCD_MspInit+0xa0>)
 800b130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b132:	4a1d      	ldr	r2, [pc, #116]	; (800b1a8 <HAL_PCD_MspInit+0xa0>)
 800b134:	f043 0301 	orr.w	r3, r3, #1
 800b138:	6313      	str	r3, [r2, #48]	; 0x30
 800b13a:	4b1b      	ldr	r3, [pc, #108]	; (800b1a8 <HAL_PCD_MspInit+0xa0>)
 800b13c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b13e:	f003 0301 	and.w	r3, r3, #1
 800b142:	613b      	str	r3, [r7, #16]
 800b144:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b146:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b14a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b14c:	2302      	movs	r3, #2
 800b14e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b150:	2300      	movs	r3, #0
 800b152:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b154:	2303      	movs	r3, #3
 800b156:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b158:	230a      	movs	r3, #10
 800b15a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b15c:	f107 0314 	add.w	r3, r7, #20
 800b160:	4619      	mov	r1, r3
 800b162:	4812      	ldr	r0, [pc, #72]	; (800b1ac <HAL_PCD_MspInit+0xa4>)
 800b164:	f7f6 fa9c 	bl	80016a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b168:	4b0f      	ldr	r3, [pc, #60]	; (800b1a8 <HAL_PCD_MspInit+0xa0>)
 800b16a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b16c:	4a0e      	ldr	r2, [pc, #56]	; (800b1a8 <HAL_PCD_MspInit+0xa0>)
 800b16e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b172:	6353      	str	r3, [r2, #52]	; 0x34
 800b174:	2300      	movs	r3, #0
 800b176:	60fb      	str	r3, [r7, #12]
 800b178:	4b0b      	ldr	r3, [pc, #44]	; (800b1a8 <HAL_PCD_MspInit+0xa0>)
 800b17a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b17c:	4a0a      	ldr	r2, [pc, #40]	; (800b1a8 <HAL_PCD_MspInit+0xa0>)
 800b17e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b182:	6453      	str	r3, [r2, #68]	; 0x44
 800b184:	4b08      	ldr	r3, [pc, #32]	; (800b1a8 <HAL_PCD_MspInit+0xa0>)
 800b186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b188:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b18c:	60fb      	str	r3, [r7, #12]
 800b18e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800b190:	2200      	movs	r2, #0
 800b192:	2105      	movs	r1, #5
 800b194:	2043      	movs	r0, #67	; 0x43
 800b196:	f7f6 fa59 	bl	800164c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b19a:	2043      	movs	r0, #67	; 0x43
 800b19c:	f7f6 fa72 	bl	8001684 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b1a0:	bf00      	nop
 800b1a2:	3728      	adds	r7, #40	; 0x28
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	bd80      	pop	{r7, pc}
 800b1a8:	40023800 	.word	0x40023800
 800b1ac:	40020000 	.word	0x40020000

0800b1b0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b082      	sub	sp, #8
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b1c4:	4619      	mov	r1, r3
 800b1c6:	4610      	mov	r0, r2
 800b1c8:	f7fb fd99 	bl	8006cfe <USBD_LL_SetupStage>
}
 800b1cc:	bf00      	nop
 800b1ce:	3708      	adds	r7, #8
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	bd80      	pop	{r7, pc}

0800b1d4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b082      	sub	sp, #8
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
 800b1dc:	460b      	mov	r3, r1
 800b1de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b1e6:	78fa      	ldrb	r2, [r7, #3]
 800b1e8:	6879      	ldr	r1, [r7, #4]
 800b1ea:	4613      	mov	r3, r2
 800b1ec:	00db      	lsls	r3, r3, #3
 800b1ee:	4413      	add	r3, r2
 800b1f0:	009b      	lsls	r3, r3, #2
 800b1f2:	440b      	add	r3, r1
 800b1f4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800b1f8:	681a      	ldr	r2, [r3, #0]
 800b1fa:	78fb      	ldrb	r3, [r7, #3]
 800b1fc:	4619      	mov	r1, r3
 800b1fe:	f7fb fdd3 	bl	8006da8 <USBD_LL_DataOutStage>
}
 800b202:	bf00      	nop
 800b204:	3708      	adds	r7, #8
 800b206:	46bd      	mov	sp, r7
 800b208:	bd80      	pop	{r7, pc}

0800b20a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b20a:	b580      	push	{r7, lr}
 800b20c:	b082      	sub	sp, #8
 800b20e:	af00      	add	r7, sp, #0
 800b210:	6078      	str	r0, [r7, #4]
 800b212:	460b      	mov	r3, r1
 800b214:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b21c:	78fa      	ldrb	r2, [r7, #3]
 800b21e:	6879      	ldr	r1, [r7, #4]
 800b220:	4613      	mov	r3, r2
 800b222:	00db      	lsls	r3, r3, #3
 800b224:	4413      	add	r3, r2
 800b226:	009b      	lsls	r3, r3, #2
 800b228:	440b      	add	r3, r1
 800b22a:	334c      	adds	r3, #76	; 0x4c
 800b22c:	681a      	ldr	r2, [r3, #0]
 800b22e:	78fb      	ldrb	r3, [r7, #3]
 800b230:	4619      	mov	r1, r3
 800b232:	f7fb fe6c 	bl	8006f0e <USBD_LL_DataInStage>
}
 800b236:	bf00      	nop
 800b238:	3708      	adds	r7, #8
 800b23a:	46bd      	mov	sp, r7
 800b23c:	bd80      	pop	{r7, pc}

0800b23e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b23e:	b580      	push	{r7, lr}
 800b240:	b082      	sub	sp, #8
 800b242:	af00      	add	r7, sp, #0
 800b244:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b24c:	4618      	mov	r0, r3
 800b24e:	f7fb ffa0 	bl	8007192 <USBD_LL_SOF>
}
 800b252:	bf00      	nop
 800b254:	3708      	adds	r7, #8
 800b256:	46bd      	mov	sp, r7
 800b258:	bd80      	pop	{r7, pc}

0800b25a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b25a:	b580      	push	{r7, lr}
 800b25c:	b084      	sub	sp, #16
 800b25e:	af00      	add	r7, sp, #0
 800b260:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b262:	2301      	movs	r3, #1
 800b264:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	68db      	ldr	r3, [r3, #12]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d102      	bne.n	800b274 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800b26e:	2300      	movs	r3, #0
 800b270:	73fb      	strb	r3, [r7, #15]
 800b272:	e008      	b.n	800b286 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	68db      	ldr	r3, [r3, #12]
 800b278:	2b02      	cmp	r3, #2
 800b27a:	d102      	bne.n	800b282 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800b27c:	2301      	movs	r3, #1
 800b27e:	73fb      	strb	r3, [r7, #15]
 800b280:	e001      	b.n	800b286 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800b282:	f7f5 fb37 	bl	80008f4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b28c:	7bfa      	ldrb	r2, [r7, #15]
 800b28e:	4611      	mov	r1, r2
 800b290:	4618      	mov	r0, r3
 800b292:	f7fb ff40 	bl	8007116 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b29c:	4618      	mov	r0, r3
 800b29e:	f7fb fee8 	bl	8007072 <USBD_LL_Reset>
}
 800b2a2:	bf00      	nop
 800b2a4:	3710      	adds	r7, #16
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	bd80      	pop	{r7, pc}
	...

0800b2ac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b082      	sub	sp, #8
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	f7fb ff3b 	bl	8007136 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	687a      	ldr	r2, [r7, #4]
 800b2cc:	6812      	ldr	r2, [r2, #0]
 800b2ce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b2d2:	f043 0301 	orr.w	r3, r3, #1
 800b2d6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	6a1b      	ldr	r3, [r3, #32]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d005      	beq.n	800b2ec <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b2e0:	4b04      	ldr	r3, [pc, #16]	; (800b2f4 <HAL_PCD_SuspendCallback+0x48>)
 800b2e2:	691b      	ldr	r3, [r3, #16]
 800b2e4:	4a03      	ldr	r2, [pc, #12]	; (800b2f4 <HAL_PCD_SuspendCallback+0x48>)
 800b2e6:	f043 0306 	orr.w	r3, r3, #6
 800b2ea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b2ec:	bf00      	nop
 800b2ee:	3708      	adds	r7, #8
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	bd80      	pop	{r7, pc}
 800b2f4:	e000ed00 	.word	0xe000ed00

0800b2f8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b082      	sub	sp, #8
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b306:	4618      	mov	r0, r3
 800b308:	f7fb ff2b 	bl	8007162 <USBD_LL_Resume>
}
 800b30c:	bf00      	nop
 800b30e:	3708      	adds	r7, #8
 800b310:	46bd      	mov	sp, r7
 800b312:	bd80      	pop	{r7, pc}

0800b314 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b082      	sub	sp, #8
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
 800b31c:	460b      	mov	r3, r1
 800b31e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b326:	78fa      	ldrb	r2, [r7, #3]
 800b328:	4611      	mov	r1, r2
 800b32a:	4618      	mov	r0, r3
 800b32c:	f7fb ff83 	bl	8007236 <USBD_LL_IsoOUTIncomplete>
}
 800b330:	bf00      	nop
 800b332:	3708      	adds	r7, #8
 800b334:	46bd      	mov	sp, r7
 800b336:	bd80      	pop	{r7, pc}

0800b338 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b082      	sub	sp, #8
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
 800b340:	460b      	mov	r3, r1
 800b342:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b34a:	78fa      	ldrb	r2, [r7, #3]
 800b34c:	4611      	mov	r1, r2
 800b34e:	4618      	mov	r0, r3
 800b350:	f7fb ff3f 	bl	80071d2 <USBD_LL_IsoINIncomplete>
}
 800b354:	bf00      	nop
 800b356:	3708      	adds	r7, #8
 800b358:	46bd      	mov	sp, r7
 800b35a:	bd80      	pop	{r7, pc}

0800b35c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b082      	sub	sp, #8
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b36a:	4618      	mov	r0, r3
 800b36c:	f7fb ff95 	bl	800729a <USBD_LL_DevConnected>
}
 800b370:	bf00      	nop
 800b372:	3708      	adds	r7, #8
 800b374:	46bd      	mov	sp, r7
 800b376:	bd80      	pop	{r7, pc}

0800b378 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b082      	sub	sp, #8
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b386:	4618      	mov	r0, r3
 800b388:	f7fb ff92 	bl	80072b0 <USBD_LL_DevDisconnected>
}
 800b38c:	bf00      	nop
 800b38e:	3708      	adds	r7, #8
 800b390:	46bd      	mov	sp, r7
 800b392:	bd80      	pop	{r7, pc}

0800b394 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b082      	sub	sp, #8
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	781b      	ldrb	r3, [r3, #0]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d13c      	bne.n	800b41e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b3a4:	4a20      	ldr	r2, [pc, #128]	; (800b428 <USBD_LL_Init+0x94>)
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	4a1e      	ldr	r2, [pc, #120]	; (800b428 <USBD_LL_Init+0x94>)
 800b3b0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b3b4:	4b1c      	ldr	r3, [pc, #112]	; (800b428 <USBD_LL_Init+0x94>)
 800b3b6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b3ba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800b3bc:	4b1a      	ldr	r3, [pc, #104]	; (800b428 <USBD_LL_Init+0x94>)
 800b3be:	2204      	movs	r2, #4
 800b3c0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b3c2:	4b19      	ldr	r3, [pc, #100]	; (800b428 <USBD_LL_Init+0x94>)
 800b3c4:	2202      	movs	r2, #2
 800b3c6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b3c8:	4b17      	ldr	r3, [pc, #92]	; (800b428 <USBD_LL_Init+0x94>)
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b3ce:	4b16      	ldr	r3, [pc, #88]	; (800b428 <USBD_LL_Init+0x94>)
 800b3d0:	2202      	movs	r2, #2
 800b3d2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b3d4:	4b14      	ldr	r3, [pc, #80]	; (800b428 <USBD_LL_Init+0x94>)
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b3da:	4b13      	ldr	r3, [pc, #76]	; (800b428 <USBD_LL_Init+0x94>)
 800b3dc:	2200      	movs	r2, #0
 800b3de:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b3e0:	4b11      	ldr	r3, [pc, #68]	; (800b428 <USBD_LL_Init+0x94>)
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b3e6:	4b10      	ldr	r3, [pc, #64]	; (800b428 <USBD_LL_Init+0x94>)
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b3ec:	4b0e      	ldr	r3, [pc, #56]	; (800b428 <USBD_LL_Init+0x94>)
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b3f2:	480d      	ldr	r0, [pc, #52]	; (800b428 <USBD_LL_Init+0x94>)
 800b3f4:	f7f6 fb23 	bl	8001a3e <HAL_PCD_Init>
 800b3f8:	4603      	mov	r3, r0
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d001      	beq.n	800b402 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b3fe:	f7f5 fa79 	bl	80008f4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b402:	2180      	movs	r1, #128	; 0x80
 800b404:	4808      	ldr	r0, [pc, #32]	; (800b428 <USBD_LL_Init+0x94>)
 800b406:	f7f7 fd7a 	bl	8002efe <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b40a:	2240      	movs	r2, #64	; 0x40
 800b40c:	2100      	movs	r1, #0
 800b40e:	4806      	ldr	r0, [pc, #24]	; (800b428 <USBD_LL_Init+0x94>)
 800b410:	f7f7 fd2e 	bl	8002e70 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b414:	2280      	movs	r2, #128	; 0x80
 800b416:	2101      	movs	r1, #1
 800b418:	4803      	ldr	r0, [pc, #12]	; (800b428 <USBD_LL_Init+0x94>)
 800b41a:	f7f7 fd29 	bl	8002e70 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b41e:	2300      	movs	r3, #0
}
 800b420:	4618      	mov	r0, r3
 800b422:	3708      	adds	r7, #8
 800b424:	46bd      	mov	sp, r7
 800b426:	bd80      	pop	{r7, pc}
 800b428:	20006138 	.word	0x20006138

0800b42c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b084      	sub	sp, #16
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b434:	2300      	movs	r3, #0
 800b436:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b438:	2300      	movs	r3, #0
 800b43a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b442:	4618      	mov	r0, r3
 800b444:	f7f6 fc18 	bl	8001c78 <HAL_PCD_Start>
 800b448:	4603      	mov	r3, r0
 800b44a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b44c:	7bfb      	ldrb	r3, [r7, #15]
 800b44e:	4618      	mov	r0, r3
 800b450:	f000 f942 	bl	800b6d8 <USBD_Get_USB_Status>
 800b454:	4603      	mov	r3, r0
 800b456:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b458:	7bbb      	ldrb	r3, [r7, #14]
}
 800b45a:	4618      	mov	r0, r3
 800b45c:	3710      	adds	r7, #16
 800b45e:	46bd      	mov	sp, r7
 800b460:	bd80      	pop	{r7, pc}

0800b462 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b462:	b580      	push	{r7, lr}
 800b464:	b084      	sub	sp, #16
 800b466:	af00      	add	r7, sp, #0
 800b468:	6078      	str	r0, [r7, #4]
 800b46a:	4608      	mov	r0, r1
 800b46c:	4611      	mov	r1, r2
 800b46e:	461a      	mov	r2, r3
 800b470:	4603      	mov	r3, r0
 800b472:	70fb      	strb	r3, [r7, #3]
 800b474:	460b      	mov	r3, r1
 800b476:	70bb      	strb	r3, [r7, #2]
 800b478:	4613      	mov	r3, r2
 800b47a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b47c:	2300      	movs	r3, #0
 800b47e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b480:	2300      	movs	r3, #0
 800b482:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b48a:	78bb      	ldrb	r3, [r7, #2]
 800b48c:	883a      	ldrh	r2, [r7, #0]
 800b48e:	78f9      	ldrb	r1, [r7, #3]
 800b490:	f7f7 f8e9 	bl	8002666 <HAL_PCD_EP_Open>
 800b494:	4603      	mov	r3, r0
 800b496:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b498:	7bfb      	ldrb	r3, [r7, #15]
 800b49a:	4618      	mov	r0, r3
 800b49c:	f000 f91c 	bl	800b6d8 <USBD_Get_USB_Status>
 800b4a0:	4603      	mov	r3, r0
 800b4a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b4a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	3710      	adds	r7, #16
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	bd80      	pop	{r7, pc}

0800b4ae <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b4ae:	b580      	push	{r7, lr}
 800b4b0:	b084      	sub	sp, #16
 800b4b2:	af00      	add	r7, sp, #0
 800b4b4:	6078      	str	r0, [r7, #4]
 800b4b6:	460b      	mov	r3, r1
 800b4b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b4be:	2300      	movs	r3, #0
 800b4c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b4c8:	78fa      	ldrb	r2, [r7, #3]
 800b4ca:	4611      	mov	r1, r2
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	f7f7 f932 	bl	8002736 <HAL_PCD_EP_Close>
 800b4d2:	4603      	mov	r3, r0
 800b4d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b4d6:	7bfb      	ldrb	r3, [r7, #15]
 800b4d8:	4618      	mov	r0, r3
 800b4da:	f000 f8fd 	bl	800b6d8 <USBD_Get_USB_Status>
 800b4de:	4603      	mov	r3, r0
 800b4e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b4e2:	7bbb      	ldrb	r3, [r7, #14]
}
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	3710      	adds	r7, #16
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	bd80      	pop	{r7, pc}

0800b4ec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b084      	sub	sp, #16
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
 800b4f4:	460b      	mov	r3, r1
 800b4f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b506:	78fa      	ldrb	r2, [r7, #3]
 800b508:	4611      	mov	r1, r2
 800b50a:	4618      	mov	r0, r3
 800b50c:	f7f7 fa0a 	bl	8002924 <HAL_PCD_EP_SetStall>
 800b510:	4603      	mov	r3, r0
 800b512:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b514:	7bfb      	ldrb	r3, [r7, #15]
 800b516:	4618      	mov	r0, r3
 800b518:	f000 f8de 	bl	800b6d8 <USBD_Get_USB_Status>
 800b51c:	4603      	mov	r3, r0
 800b51e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b520:	7bbb      	ldrb	r3, [r7, #14]
}
 800b522:	4618      	mov	r0, r3
 800b524:	3710      	adds	r7, #16
 800b526:	46bd      	mov	sp, r7
 800b528:	bd80      	pop	{r7, pc}

0800b52a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b52a:	b580      	push	{r7, lr}
 800b52c:	b084      	sub	sp, #16
 800b52e:	af00      	add	r7, sp, #0
 800b530:	6078      	str	r0, [r7, #4]
 800b532:	460b      	mov	r3, r1
 800b534:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b536:	2300      	movs	r3, #0
 800b538:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b53a:	2300      	movs	r3, #0
 800b53c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b544:	78fa      	ldrb	r2, [r7, #3]
 800b546:	4611      	mov	r1, r2
 800b548:	4618      	mov	r0, r3
 800b54a:	f7f7 fa4f 	bl	80029ec <HAL_PCD_EP_ClrStall>
 800b54e:	4603      	mov	r3, r0
 800b550:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b552:	7bfb      	ldrb	r3, [r7, #15]
 800b554:	4618      	mov	r0, r3
 800b556:	f000 f8bf 	bl	800b6d8 <USBD_Get_USB_Status>
 800b55a:	4603      	mov	r3, r0
 800b55c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b55e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b560:	4618      	mov	r0, r3
 800b562:	3710      	adds	r7, #16
 800b564:	46bd      	mov	sp, r7
 800b566:	bd80      	pop	{r7, pc}

0800b568 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b568:	b480      	push	{r7}
 800b56a:	b085      	sub	sp, #20
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
 800b570:	460b      	mov	r3, r1
 800b572:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b57a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b57c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b580:	2b00      	cmp	r3, #0
 800b582:	da0b      	bge.n	800b59c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b584:	78fb      	ldrb	r3, [r7, #3]
 800b586:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b58a:	68f9      	ldr	r1, [r7, #12]
 800b58c:	4613      	mov	r3, r2
 800b58e:	00db      	lsls	r3, r3, #3
 800b590:	4413      	add	r3, r2
 800b592:	009b      	lsls	r3, r3, #2
 800b594:	440b      	add	r3, r1
 800b596:	333e      	adds	r3, #62	; 0x3e
 800b598:	781b      	ldrb	r3, [r3, #0]
 800b59a:	e00b      	b.n	800b5b4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b59c:	78fb      	ldrb	r3, [r7, #3]
 800b59e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b5a2:	68f9      	ldr	r1, [r7, #12]
 800b5a4:	4613      	mov	r3, r2
 800b5a6:	00db      	lsls	r3, r3, #3
 800b5a8:	4413      	add	r3, r2
 800b5aa:	009b      	lsls	r3, r3, #2
 800b5ac:	440b      	add	r3, r1
 800b5ae:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800b5b2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	3714      	adds	r7, #20
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5be:	4770      	bx	lr

0800b5c0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b084      	sub	sp, #16
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
 800b5c8:	460b      	mov	r3, r1
 800b5ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b5da:	78fa      	ldrb	r2, [r7, #3]
 800b5dc:	4611      	mov	r1, r2
 800b5de:	4618      	mov	r0, r3
 800b5e0:	f7f7 f81c 	bl	800261c <HAL_PCD_SetAddress>
 800b5e4:	4603      	mov	r3, r0
 800b5e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b5e8:	7bfb      	ldrb	r3, [r7, #15]
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	f000 f874 	bl	800b6d8 <USBD_Get_USB_Status>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b5f4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	3710      	adds	r7, #16
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bd80      	pop	{r7, pc}

0800b5fe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b5fe:	b580      	push	{r7, lr}
 800b600:	b086      	sub	sp, #24
 800b602:	af00      	add	r7, sp, #0
 800b604:	60f8      	str	r0, [r7, #12]
 800b606:	607a      	str	r2, [r7, #4]
 800b608:	603b      	str	r3, [r7, #0]
 800b60a:	460b      	mov	r3, r1
 800b60c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b60e:	2300      	movs	r3, #0
 800b610:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b612:	2300      	movs	r3, #0
 800b614:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b61c:	7af9      	ldrb	r1, [r7, #11]
 800b61e:	683b      	ldr	r3, [r7, #0]
 800b620:	687a      	ldr	r2, [r7, #4]
 800b622:	f7f7 f935 	bl	8002890 <HAL_PCD_EP_Transmit>
 800b626:	4603      	mov	r3, r0
 800b628:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b62a:	7dfb      	ldrb	r3, [r7, #23]
 800b62c:	4618      	mov	r0, r3
 800b62e:	f000 f853 	bl	800b6d8 <USBD_Get_USB_Status>
 800b632:	4603      	mov	r3, r0
 800b634:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b636:	7dbb      	ldrb	r3, [r7, #22]
}
 800b638:	4618      	mov	r0, r3
 800b63a:	3718      	adds	r7, #24
 800b63c:	46bd      	mov	sp, r7
 800b63e:	bd80      	pop	{r7, pc}

0800b640 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b086      	sub	sp, #24
 800b644:	af00      	add	r7, sp, #0
 800b646:	60f8      	str	r0, [r7, #12]
 800b648:	607a      	str	r2, [r7, #4]
 800b64a:	603b      	str	r3, [r7, #0]
 800b64c:	460b      	mov	r3, r1
 800b64e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b650:	2300      	movs	r3, #0
 800b652:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b654:	2300      	movs	r3, #0
 800b656:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b65e:	7af9      	ldrb	r1, [r7, #11]
 800b660:	683b      	ldr	r3, [r7, #0]
 800b662:	687a      	ldr	r2, [r7, #4]
 800b664:	f7f7 f8b1 	bl	80027ca <HAL_PCD_EP_Receive>
 800b668:	4603      	mov	r3, r0
 800b66a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b66c:	7dfb      	ldrb	r3, [r7, #23]
 800b66e:	4618      	mov	r0, r3
 800b670:	f000 f832 	bl	800b6d8 <USBD_Get_USB_Status>
 800b674:	4603      	mov	r3, r0
 800b676:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b678:	7dbb      	ldrb	r3, [r7, #22]
}
 800b67a:	4618      	mov	r0, r3
 800b67c:	3718      	adds	r7, #24
 800b67e:	46bd      	mov	sp, r7
 800b680:	bd80      	pop	{r7, pc}

0800b682 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b682:	b580      	push	{r7, lr}
 800b684:	b082      	sub	sp, #8
 800b686:	af00      	add	r7, sp, #0
 800b688:	6078      	str	r0, [r7, #4]
 800b68a:	460b      	mov	r3, r1
 800b68c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b694:	78fa      	ldrb	r2, [r7, #3]
 800b696:	4611      	mov	r1, r2
 800b698:	4618      	mov	r0, r3
 800b69a:	f7f7 f8e1 	bl	8002860 <HAL_PCD_EP_GetRxCount>
 800b69e:	4603      	mov	r3, r0
}
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	3708      	adds	r7, #8
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	bd80      	pop	{r7, pc}

0800b6a8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b6a8:	b480      	push	{r7}
 800b6aa:	b083      	sub	sp, #12
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b6b0:	4b03      	ldr	r3, [pc, #12]	; (800b6c0 <USBD_static_malloc+0x18>)
}
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	370c      	adds	r7, #12
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6bc:	4770      	bx	lr
 800b6be:	bf00      	nop
 800b6c0:	20006644 	.word	0x20006644

0800b6c4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b6c4:	b480      	push	{r7}
 800b6c6:	b083      	sub	sp, #12
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]

}
 800b6cc:	bf00      	nop
 800b6ce:	370c      	adds	r7, #12
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d6:	4770      	bx	lr

0800b6d8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b6d8:	b480      	push	{r7}
 800b6da:	b085      	sub	sp, #20
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	4603      	mov	r3, r0
 800b6e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b6e6:	79fb      	ldrb	r3, [r7, #7]
 800b6e8:	2b03      	cmp	r3, #3
 800b6ea:	d817      	bhi.n	800b71c <USBD_Get_USB_Status+0x44>
 800b6ec:	a201      	add	r2, pc, #4	; (adr r2, 800b6f4 <USBD_Get_USB_Status+0x1c>)
 800b6ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6f2:	bf00      	nop
 800b6f4:	0800b705 	.word	0x0800b705
 800b6f8:	0800b70b 	.word	0x0800b70b
 800b6fc:	0800b711 	.word	0x0800b711
 800b700:	0800b717 	.word	0x0800b717
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b704:	2300      	movs	r3, #0
 800b706:	73fb      	strb	r3, [r7, #15]
    break;
 800b708:	e00b      	b.n	800b722 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b70a:	2303      	movs	r3, #3
 800b70c:	73fb      	strb	r3, [r7, #15]
    break;
 800b70e:	e008      	b.n	800b722 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b710:	2301      	movs	r3, #1
 800b712:	73fb      	strb	r3, [r7, #15]
    break;
 800b714:	e005      	b.n	800b722 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b716:	2303      	movs	r3, #3
 800b718:	73fb      	strb	r3, [r7, #15]
    break;
 800b71a:	e002      	b.n	800b722 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b71c:	2303      	movs	r3, #3
 800b71e:	73fb      	strb	r3, [r7, #15]
    break;
 800b720:	bf00      	nop
  }
  return usb_status;
 800b722:	7bfb      	ldrb	r3, [r7, #15]
}
 800b724:	4618      	mov	r0, r3
 800b726:	3714      	adds	r7, #20
 800b728:	46bd      	mov	sp, r7
 800b72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72e:	4770      	bx	lr

0800b730 <_ZdlPvj>:
 800b730:	f000 b957 	b.w	800b9e2 <_ZdlPv>

0800b734 <_ZNSaIcEC1Ev>:
 800b734:	4770      	bx	lr

0800b736 <_ZNSaIcED1Ev>:
 800b736:	4770      	bx	lr

0800b738 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 800b738:	b10a      	cbz	r2, 800b73e <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 800b73a:	f000 b9bb 	b.w	800bab4 <memcpy>
 800b73e:	4770      	bx	lr

0800b740 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 800b740:	b508      	push	{r3, lr}
 800b742:	680b      	ldr	r3, [r1, #0]
 800b744:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b748:	d302      	bcc.n	800b750 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 800b74a:	480d      	ldr	r0, [pc, #52]	; (800b780 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 800b74c:	f000 f962 	bl	800ba14 <_ZSt20__throw_length_errorPKc>
 800b750:	4293      	cmp	r3, r2
 800b752:	d90b      	bls.n	800b76c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800b754:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 800b758:	ea4f 0042 	mov.w	r0, r2, lsl #1
 800b75c:	d206      	bcs.n	800b76c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800b75e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800b762:	bf2a      	itet	cs
 800b764:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 800b768:	6008      	strcc	r0, [r1, #0]
 800b76a:	600b      	strcs	r3, [r1, #0]
 800b76c:	6808      	ldr	r0, [r1, #0]
 800b76e:	3001      	adds	r0, #1
 800b770:	d501      	bpl.n	800b776 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 800b772:	f000 f949 	bl	800ba08 <_ZSt17__throw_bad_allocv>
 800b776:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800b77a:	f000 b934 	b.w	800b9e6 <_Znwj>
 800b77e:	bf00      	nop
 800b780:	0800c154 	.word	0x0800c154

0800b784 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 800b784:	f850 3b08 	ldr.w	r3, [r0], #8
 800b788:	4283      	cmp	r3, r0
 800b78a:	d002      	beq.n	800b792 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 800b78c:	4618      	mov	r0, r3
 800b78e:	f000 b928 	b.w	800b9e2 <_ZdlPv>
 800b792:	4770      	bx	lr

0800b794 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 800b794:	6840      	ldr	r0, [r0, #4]
 800b796:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800b79a:	3901      	subs	r1, #1
 800b79c:	1a09      	subs	r1, r1, r0
 800b79e:	4291      	cmp	r1, r2
 800b7a0:	b508      	push	{r3, lr}
 800b7a2:	d202      	bcs.n	800b7aa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	f000 f935 	bl	800ba14 <_ZSt20__throw_length_errorPKc>
 800b7aa:	bd08      	pop	{r3, pc}

0800b7ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 800b7ac:	2a01      	cmp	r2, #1
 800b7ae:	b410      	push	{r4}
 800b7b0:	d104      	bne.n	800b7bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 800b7b2:	780a      	ldrb	r2, [r1, #0]
 800b7b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b7b8:	7002      	strb	r2, [r0, #0]
 800b7ba:	4770      	bx	lr
 800b7bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b7c0:	f7ff bfba 	b.w	800b738 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

0800b7c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>:
 800b7c4:	460b      	mov	r3, r1
 800b7c6:	2b01      	cmp	r3, #1
 800b7c8:	b410      	push	{r4}
 800b7ca:	4611      	mov	r1, r2
 800b7cc:	4604      	mov	r4, r0
 800b7ce:	d103      	bne.n	800b7d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0x14>
 800b7d0:	7022      	strb	r2, [r4, #0]
 800b7d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b7d6:	4770      	bx	lr
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d0fa      	beq.n	800b7d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0xe>
 800b7dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b7e0:	461a      	mov	r2, r3
 800b7e2:	f000 b975 	b.w	800bad0 <memset>

0800b7e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc>:
 800b7e6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b7e8:	290f      	cmp	r1, #15
 800b7ea:	4604      	mov	r4, r0
 800b7ec:	9101      	str	r1, [sp, #4]
 800b7ee:	4615      	mov	r5, r2
 800b7f0:	d906      	bls.n	800b800 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc+0x1a>
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	a901      	add	r1, sp, #4
 800b7f6:	f7ff ffa3 	bl	800b740 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800b7fa:	9b01      	ldr	r3, [sp, #4]
 800b7fc:	6020      	str	r0, [r4, #0]
 800b7fe:	60a3      	str	r3, [r4, #8]
 800b800:	9901      	ldr	r1, [sp, #4]
 800b802:	b119      	cbz	r1, 800b80c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc+0x26>
 800b804:	6820      	ldr	r0, [r4, #0]
 800b806:	462a      	mov	r2, r5
 800b808:	f7ff ffdc 	bl	800b7c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>
 800b80c:	9b01      	ldr	r3, [sp, #4]
 800b80e:	6822      	ldr	r2, [r4, #0]
 800b810:	6063      	str	r3, [r4, #4]
 800b812:	2100      	movs	r1, #0
 800b814:	54d1      	strb	r1, [r2, r3]
 800b816:	b003      	add	sp, #12
 800b818:	bd30      	pop	{r4, r5, pc}

0800b81a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 800b81a:	b508      	push	{r3, lr}
 800b81c:	1a52      	subs	r2, r2, r1
 800b81e:	f7ff ffc5 	bl	800b7ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800b822:	bd08      	pop	{r3, pc}

0800b824 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 800b824:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800b828:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800b82a:	461f      	mov	r7, r3
 800b82c:	6843      	ldr	r3, [r0, #4]
 800b82e:	eb01 0802 	add.w	r8, r1, r2
 800b832:	1ab2      	subs	r2, r6, r2
 800b834:	441a      	add	r2, r3
 800b836:	eba3 0908 	sub.w	r9, r3, r8
 800b83a:	4603      	mov	r3, r0
 800b83c:	9201      	str	r2, [sp, #4]
 800b83e:	f853 2b08 	ldr.w	r2, [r3], #8
 800b842:	429a      	cmp	r2, r3
 800b844:	bf18      	it	ne
 800b846:	6882      	ldrne	r2, [r0, #8]
 800b848:	460d      	mov	r5, r1
 800b84a:	bf08      	it	eq
 800b84c:	220f      	moveq	r2, #15
 800b84e:	a901      	add	r1, sp, #4
 800b850:	4604      	mov	r4, r0
 800b852:	f7ff ff75 	bl	800b740 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800b856:	4682      	mov	sl, r0
 800b858:	b11d      	cbz	r5, 800b862 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 800b85a:	6821      	ldr	r1, [r4, #0]
 800b85c:	462a      	mov	r2, r5
 800b85e:	f7ff ffa5 	bl	800b7ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800b862:	b137      	cbz	r7, 800b872 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 800b864:	b12e      	cbz	r6, 800b872 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 800b866:	4632      	mov	r2, r6
 800b868:	4639      	mov	r1, r7
 800b86a:	eb0a 0005 	add.w	r0, sl, r5
 800b86e:	f7ff ff9d 	bl	800b7ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800b872:	f1b9 0f00 	cmp.w	r9, #0
 800b876:	d007      	beq.n	800b888 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
 800b878:	6821      	ldr	r1, [r4, #0]
 800b87a:	4435      	add	r5, r6
 800b87c:	464a      	mov	r2, r9
 800b87e:	4441      	add	r1, r8
 800b880:	eb0a 0005 	add.w	r0, sl, r5
 800b884:	f7ff ff92 	bl	800b7ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800b888:	4620      	mov	r0, r4
 800b88a:	f7ff ff7b 	bl	800b784 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800b88e:	9b01      	ldr	r3, [sp, #4]
 800b890:	f8c4 a000 	str.w	sl, [r4]
 800b894:	60a3      	str	r3, [r4, #8]
 800b896:	b002      	add	sp, #8
 800b898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800b89c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EjcRKS3_>:
 800b89c:	b510      	push	{r4, lr}
 800b89e:	f100 0308 	add.w	r3, r0, #8
 800b8a2:	4604      	mov	r4, r0
 800b8a4:	6003      	str	r3, [r0, #0]
 800b8a6:	f7ff ff9e 	bl	800b7e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc>
 800b8aa:	4620      	mov	r0, r4
 800b8ac:	bd10      	pop	{r4, pc}

0800b8ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 800b8ae:	b570      	push	{r4, r5, r6, lr}
 800b8b0:	4604      	mov	r4, r0
 800b8b2:	460e      	mov	r6, r1
 800b8b4:	3008      	adds	r0, #8
 800b8b6:	6020      	str	r0, [r4, #0]
 800b8b8:	f856 3b08 	ldr.w	r3, [r6], #8
 800b8bc:	429e      	cmp	r6, r3
 800b8be:	460d      	mov	r5, r1
 800b8c0:	d10b      	bne.n	800b8da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x2c>
 800b8c2:	2210      	movs	r2, #16
 800b8c4:	4631      	mov	r1, r6
 800b8c6:	f7ff ff37 	bl	800b738 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>
 800b8ca:	686b      	ldr	r3, [r5, #4]
 800b8cc:	6063      	str	r3, [r4, #4]
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	602e      	str	r6, [r5, #0]
 800b8d2:	606b      	str	r3, [r5, #4]
 800b8d4:	722b      	strb	r3, [r5, #8]
 800b8d6:	4620      	mov	r0, r4
 800b8d8:	bd70      	pop	{r4, r5, r6, pc}
 800b8da:	6023      	str	r3, [r4, #0]
 800b8dc:	688b      	ldr	r3, [r1, #8]
 800b8de:	60a3      	str	r3, [r4, #8]
 800b8e0:	e7f3      	b.n	800b8ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x1c>

0800b8e2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 800b8e2:	b510      	push	{r4, lr}
 800b8e4:	4604      	mov	r4, r0
 800b8e6:	f7ff ff4d 	bl	800b784 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800b8ea:	4620      	mov	r0, r4
 800b8ec:	bd10      	pop	{r4, pc}

0800b8ee <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
 800b8ee:	6840      	ldr	r0, [r0, #4]
 800b8f0:	4770      	bx	lr

0800b8f2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
 800b8f2:	6840      	ldr	r0, [r0, #4]
 800b8f4:	4770      	bx	lr

0800b8f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 800b8f6:	6800      	ldr	r0, [r0, #0]
 800b8f8:	4408      	add	r0, r1
 800b8fa:	4770      	bx	lr

0800b8fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 800b8fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b8fe:	4604      	mov	r4, r0
 800b900:	4623      	mov	r3, r4
 800b902:	6840      	ldr	r0, [r0, #4]
 800b904:	f853 6b08 	ldr.w	r6, [r3], #8
 800b908:	429e      	cmp	r6, r3
 800b90a:	bf18      	it	ne
 800b90c:	68a3      	ldrne	r3, [r4, #8]
 800b90e:	eb00 0502 	add.w	r5, r0, r2
 800b912:	bf08      	it	eq
 800b914:	230f      	moveq	r3, #15
 800b916:	429d      	cmp	r5, r3
 800b918:	d80a      	bhi.n	800b930 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x34>
 800b91a:	b112      	cbz	r2, 800b922 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>
 800b91c:	4430      	add	r0, r6
 800b91e:	f7ff ff45 	bl	800b7ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800b922:	6823      	ldr	r3, [r4, #0]
 800b924:	6065      	str	r5, [r4, #4]
 800b926:	2200      	movs	r2, #0
 800b928:	4620      	mov	r0, r4
 800b92a:	555a      	strb	r2, [r3, r5]
 800b92c:	b002      	add	sp, #8
 800b92e:	bd70      	pop	{r4, r5, r6, pc}
 800b930:	9200      	str	r2, [sp, #0]
 800b932:	460b      	mov	r3, r1
 800b934:	2200      	movs	r2, #0
 800b936:	4601      	mov	r1, r0
 800b938:	4620      	mov	r0, r4
 800b93a:	f7ff ff73 	bl	800b824 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 800b93e:	e7f0      	b.n	800b922 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>

0800b940 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>:
 800b940:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b942:	4604      	mov	r4, r0
 800b944:	4608      	mov	r0, r1
 800b946:	460d      	mov	r5, r1
 800b948:	f7f4 fc42 	bl	80001d0 <strlen>
 800b94c:	4b06      	ldr	r3, [pc, #24]	; (800b968 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc+0x28>)
 800b94e:	9001      	str	r0, [sp, #4]
 800b950:	4602      	mov	r2, r0
 800b952:	2100      	movs	r1, #0
 800b954:	4620      	mov	r0, r4
 800b956:	f7ff ff1d 	bl	800b794 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 800b95a:	9a01      	ldr	r2, [sp, #4]
 800b95c:	4629      	mov	r1, r5
 800b95e:	4620      	mov	r0, r4
 800b960:	f7ff ffcc 	bl	800b8fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 800b964:	b003      	add	sp, #12
 800b966:	bd30      	pop	{r4, r5, pc}
 800b968:	0800c16c 	.word	0x0800c16c

0800b96c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 800b96c:	6800      	ldr	r0, [r0, #0]
 800b96e:	4770      	bx	lr

0800b970 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 800b970:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b972:	4604      	mov	r4, r0
 800b974:	4616      	mov	r6, r2
 800b976:	460d      	mov	r5, r1
 800b978:	b919      	cbnz	r1, 800b982 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800b97a:	b112      	cbz	r2, 800b982 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800b97c:	480d      	ldr	r0, [pc, #52]	; (800b9b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 800b97e:	f000 f846 	bl	800ba0e <_ZSt19__throw_logic_errorPKc>
 800b982:	1b73      	subs	r3, r6, r5
 800b984:	2b0f      	cmp	r3, #15
 800b986:	9301      	str	r3, [sp, #4]
 800b988:	d907      	bls.n	800b99a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 800b98a:	2200      	movs	r2, #0
 800b98c:	a901      	add	r1, sp, #4
 800b98e:	4620      	mov	r0, r4
 800b990:	f7ff fed6 	bl	800b740 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800b994:	9b01      	ldr	r3, [sp, #4]
 800b996:	6020      	str	r0, [r4, #0]
 800b998:	60a3      	str	r3, [r4, #8]
 800b99a:	4632      	mov	r2, r6
 800b99c:	4629      	mov	r1, r5
 800b99e:	6820      	ldr	r0, [r4, #0]
 800b9a0:	f7ff ff3b 	bl	800b81a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 800b9a4:	9b01      	ldr	r3, [sp, #4]
 800b9a6:	6822      	ldr	r2, [r4, #0]
 800b9a8:	6063      	str	r3, [r4, #4]
 800b9aa:	2100      	movs	r1, #0
 800b9ac:	54d1      	strb	r1, [r2, r3]
 800b9ae:	b002      	add	sp, #8
 800b9b0:	bd70      	pop	{r4, r5, r6, pc}
 800b9b2:	bf00      	nop
 800b9b4:	0800c181 	.word	0x0800c181

0800b9b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 800b9b8:	b538      	push	{r3, r4, r5, lr}
 800b9ba:	f100 0308 	add.w	r3, r0, #8
 800b9be:	4604      	mov	r4, r0
 800b9c0:	6003      	str	r3, [r0, #0]
 800b9c2:	460d      	mov	r5, r1
 800b9c4:	b159      	cbz	r1, 800b9de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 800b9c6:	4608      	mov	r0, r1
 800b9c8:	f7f4 fc02 	bl	80001d0 <strlen>
 800b9cc:	182a      	adds	r2, r5, r0
 800b9ce:	4620      	mov	r0, r4
 800b9d0:	f04f 0300 	mov.w	r3, #0
 800b9d4:	4629      	mov	r1, r5
 800b9d6:	f7ff ffcb 	bl	800b970 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 800b9da:	4620      	mov	r0, r4
 800b9dc:	bd38      	pop	{r3, r4, r5, pc}
 800b9de:	2201      	movs	r2, #1
 800b9e0:	e7f5      	b.n	800b9ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

0800b9e2 <_ZdlPv>:
 800b9e2:	f000 b85f 	b.w	800baa4 <free>

0800b9e6 <_Znwj>:
 800b9e6:	2801      	cmp	r0, #1
 800b9e8:	bf38      	it	cc
 800b9ea:	2001      	movcc	r0, #1
 800b9ec:	b510      	push	{r4, lr}
 800b9ee:	4604      	mov	r4, r0
 800b9f0:	4620      	mov	r0, r4
 800b9f2:	f000 f84f 	bl	800ba94 <malloc>
 800b9f6:	b930      	cbnz	r0, 800ba06 <_Znwj+0x20>
 800b9f8:	f000 f810 	bl	800ba1c <_ZSt15get_new_handlerv>
 800b9fc:	b908      	cbnz	r0, 800ba02 <_Znwj+0x1c>
 800b9fe:	f000 f815 	bl	800ba2c <abort>
 800ba02:	4780      	blx	r0
 800ba04:	e7f4      	b.n	800b9f0 <_Znwj+0xa>
 800ba06:	bd10      	pop	{r4, pc}

0800ba08 <_ZSt17__throw_bad_allocv>:
 800ba08:	b508      	push	{r3, lr}
 800ba0a:	f000 f80f 	bl	800ba2c <abort>

0800ba0e <_ZSt19__throw_logic_errorPKc>:
 800ba0e:	b508      	push	{r3, lr}
 800ba10:	f000 f80c 	bl	800ba2c <abort>

0800ba14 <_ZSt20__throw_length_errorPKc>:
 800ba14:	b508      	push	{r3, lr}
 800ba16:	f000 f809 	bl	800ba2c <abort>
	...

0800ba1c <_ZSt15get_new_handlerv>:
 800ba1c:	4b02      	ldr	r3, [pc, #8]	; (800ba28 <_ZSt15get_new_handlerv+0xc>)
 800ba1e:	6818      	ldr	r0, [r3, #0]
 800ba20:	f3bf 8f5b 	dmb	ish
 800ba24:	4770      	bx	lr
 800ba26:	bf00      	nop
 800ba28:	20006864 	.word	0x20006864

0800ba2c <abort>:
 800ba2c:	b508      	push	{r3, lr}
 800ba2e:	2006      	movs	r0, #6
 800ba30:	f000 f9d8 	bl	800bde4 <raise>
 800ba34:	2001      	movs	r0, #1
 800ba36:	f7f5 fc6f 	bl	8001318 <_exit>
	...

0800ba3c <__errno>:
 800ba3c:	4b01      	ldr	r3, [pc, #4]	; (800ba44 <__errno+0x8>)
 800ba3e:	6818      	ldr	r0, [r3, #0]
 800ba40:	4770      	bx	lr
 800ba42:	bf00      	nop
 800ba44:	20000100 	.word	0x20000100

0800ba48 <__libc_init_array>:
 800ba48:	b570      	push	{r4, r5, r6, lr}
 800ba4a:	4d0d      	ldr	r5, [pc, #52]	; (800ba80 <__libc_init_array+0x38>)
 800ba4c:	4c0d      	ldr	r4, [pc, #52]	; (800ba84 <__libc_init_array+0x3c>)
 800ba4e:	1b64      	subs	r4, r4, r5
 800ba50:	10a4      	asrs	r4, r4, #2
 800ba52:	2600      	movs	r6, #0
 800ba54:	42a6      	cmp	r6, r4
 800ba56:	d109      	bne.n	800ba6c <__libc_init_array+0x24>
 800ba58:	4d0b      	ldr	r5, [pc, #44]	; (800ba88 <__libc_init_array+0x40>)
 800ba5a:	4c0c      	ldr	r4, [pc, #48]	; (800ba8c <__libc_init_array+0x44>)
 800ba5c:	f000 f9ea 	bl	800be34 <_init>
 800ba60:	1b64      	subs	r4, r4, r5
 800ba62:	10a4      	asrs	r4, r4, #2
 800ba64:	2600      	movs	r6, #0
 800ba66:	42a6      	cmp	r6, r4
 800ba68:	d105      	bne.n	800ba76 <__libc_init_array+0x2e>
 800ba6a:	bd70      	pop	{r4, r5, r6, pc}
 800ba6c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba70:	4798      	blx	r3
 800ba72:	3601      	adds	r6, #1
 800ba74:	e7ee      	b.n	800ba54 <__libc_init_array+0xc>
 800ba76:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba7a:	4798      	blx	r3
 800ba7c:	3601      	adds	r6, #1
 800ba7e:	e7f2      	b.n	800ba66 <__libc_init_array+0x1e>
 800ba80:	0800c214 	.word	0x0800c214
 800ba84:	0800c214 	.word	0x0800c214
 800ba88:	0800c214 	.word	0x0800c214
 800ba8c:	0800c224 	.word	0x0800c224

0800ba90 <__retarget_lock_acquire_recursive>:
 800ba90:	4770      	bx	lr

0800ba92 <__retarget_lock_release_recursive>:
 800ba92:	4770      	bx	lr

0800ba94 <malloc>:
 800ba94:	4b02      	ldr	r3, [pc, #8]	; (800baa0 <malloc+0xc>)
 800ba96:	4601      	mov	r1, r0
 800ba98:	6818      	ldr	r0, [r3, #0]
 800ba9a:	f000 b88d 	b.w	800bbb8 <_malloc_r>
 800ba9e:	bf00      	nop
 800baa0:	20000100 	.word	0x20000100

0800baa4 <free>:
 800baa4:	4b02      	ldr	r3, [pc, #8]	; (800bab0 <free+0xc>)
 800baa6:	4601      	mov	r1, r0
 800baa8:	6818      	ldr	r0, [r3, #0]
 800baaa:	f000 b819 	b.w	800bae0 <_free_r>
 800baae:	bf00      	nop
 800bab0:	20000100 	.word	0x20000100

0800bab4 <memcpy>:
 800bab4:	440a      	add	r2, r1
 800bab6:	4291      	cmp	r1, r2
 800bab8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800babc:	d100      	bne.n	800bac0 <memcpy+0xc>
 800babe:	4770      	bx	lr
 800bac0:	b510      	push	{r4, lr}
 800bac2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bac6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800baca:	4291      	cmp	r1, r2
 800bacc:	d1f9      	bne.n	800bac2 <memcpy+0xe>
 800bace:	bd10      	pop	{r4, pc}

0800bad0 <memset>:
 800bad0:	4402      	add	r2, r0
 800bad2:	4603      	mov	r3, r0
 800bad4:	4293      	cmp	r3, r2
 800bad6:	d100      	bne.n	800bada <memset+0xa>
 800bad8:	4770      	bx	lr
 800bada:	f803 1b01 	strb.w	r1, [r3], #1
 800bade:	e7f9      	b.n	800bad4 <memset+0x4>

0800bae0 <_free_r>:
 800bae0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bae2:	2900      	cmp	r1, #0
 800bae4:	d044      	beq.n	800bb70 <_free_r+0x90>
 800bae6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800baea:	9001      	str	r0, [sp, #4]
 800baec:	2b00      	cmp	r3, #0
 800baee:	f1a1 0404 	sub.w	r4, r1, #4
 800baf2:	bfb8      	it	lt
 800baf4:	18e4      	addlt	r4, r4, r3
 800baf6:	f000 f991 	bl	800be1c <__malloc_lock>
 800bafa:	4a1e      	ldr	r2, [pc, #120]	; (800bb74 <_free_r+0x94>)
 800bafc:	9801      	ldr	r0, [sp, #4]
 800bafe:	6813      	ldr	r3, [r2, #0]
 800bb00:	b933      	cbnz	r3, 800bb10 <_free_r+0x30>
 800bb02:	6063      	str	r3, [r4, #4]
 800bb04:	6014      	str	r4, [r2, #0]
 800bb06:	b003      	add	sp, #12
 800bb08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bb0c:	f000 b98c 	b.w	800be28 <__malloc_unlock>
 800bb10:	42a3      	cmp	r3, r4
 800bb12:	d908      	bls.n	800bb26 <_free_r+0x46>
 800bb14:	6825      	ldr	r5, [r4, #0]
 800bb16:	1961      	adds	r1, r4, r5
 800bb18:	428b      	cmp	r3, r1
 800bb1a:	bf01      	itttt	eq
 800bb1c:	6819      	ldreq	r1, [r3, #0]
 800bb1e:	685b      	ldreq	r3, [r3, #4]
 800bb20:	1949      	addeq	r1, r1, r5
 800bb22:	6021      	streq	r1, [r4, #0]
 800bb24:	e7ed      	b.n	800bb02 <_free_r+0x22>
 800bb26:	461a      	mov	r2, r3
 800bb28:	685b      	ldr	r3, [r3, #4]
 800bb2a:	b10b      	cbz	r3, 800bb30 <_free_r+0x50>
 800bb2c:	42a3      	cmp	r3, r4
 800bb2e:	d9fa      	bls.n	800bb26 <_free_r+0x46>
 800bb30:	6811      	ldr	r1, [r2, #0]
 800bb32:	1855      	adds	r5, r2, r1
 800bb34:	42a5      	cmp	r5, r4
 800bb36:	d10b      	bne.n	800bb50 <_free_r+0x70>
 800bb38:	6824      	ldr	r4, [r4, #0]
 800bb3a:	4421      	add	r1, r4
 800bb3c:	1854      	adds	r4, r2, r1
 800bb3e:	42a3      	cmp	r3, r4
 800bb40:	6011      	str	r1, [r2, #0]
 800bb42:	d1e0      	bne.n	800bb06 <_free_r+0x26>
 800bb44:	681c      	ldr	r4, [r3, #0]
 800bb46:	685b      	ldr	r3, [r3, #4]
 800bb48:	6053      	str	r3, [r2, #4]
 800bb4a:	4421      	add	r1, r4
 800bb4c:	6011      	str	r1, [r2, #0]
 800bb4e:	e7da      	b.n	800bb06 <_free_r+0x26>
 800bb50:	d902      	bls.n	800bb58 <_free_r+0x78>
 800bb52:	230c      	movs	r3, #12
 800bb54:	6003      	str	r3, [r0, #0]
 800bb56:	e7d6      	b.n	800bb06 <_free_r+0x26>
 800bb58:	6825      	ldr	r5, [r4, #0]
 800bb5a:	1961      	adds	r1, r4, r5
 800bb5c:	428b      	cmp	r3, r1
 800bb5e:	bf04      	itt	eq
 800bb60:	6819      	ldreq	r1, [r3, #0]
 800bb62:	685b      	ldreq	r3, [r3, #4]
 800bb64:	6063      	str	r3, [r4, #4]
 800bb66:	bf04      	itt	eq
 800bb68:	1949      	addeq	r1, r1, r5
 800bb6a:	6021      	streq	r1, [r4, #0]
 800bb6c:	6054      	str	r4, [r2, #4]
 800bb6e:	e7ca      	b.n	800bb06 <_free_r+0x26>
 800bb70:	b003      	add	sp, #12
 800bb72:	bd30      	pop	{r4, r5, pc}
 800bb74:	2000686c 	.word	0x2000686c

0800bb78 <sbrk_aligned>:
 800bb78:	b570      	push	{r4, r5, r6, lr}
 800bb7a:	4e0e      	ldr	r6, [pc, #56]	; (800bbb4 <sbrk_aligned+0x3c>)
 800bb7c:	460c      	mov	r4, r1
 800bb7e:	6831      	ldr	r1, [r6, #0]
 800bb80:	4605      	mov	r5, r0
 800bb82:	b911      	cbnz	r1, 800bb8a <sbrk_aligned+0x12>
 800bb84:	f000 f8f6 	bl	800bd74 <_sbrk_r>
 800bb88:	6030      	str	r0, [r6, #0]
 800bb8a:	4621      	mov	r1, r4
 800bb8c:	4628      	mov	r0, r5
 800bb8e:	f000 f8f1 	bl	800bd74 <_sbrk_r>
 800bb92:	1c43      	adds	r3, r0, #1
 800bb94:	d00a      	beq.n	800bbac <sbrk_aligned+0x34>
 800bb96:	1cc4      	adds	r4, r0, #3
 800bb98:	f024 0403 	bic.w	r4, r4, #3
 800bb9c:	42a0      	cmp	r0, r4
 800bb9e:	d007      	beq.n	800bbb0 <sbrk_aligned+0x38>
 800bba0:	1a21      	subs	r1, r4, r0
 800bba2:	4628      	mov	r0, r5
 800bba4:	f000 f8e6 	bl	800bd74 <_sbrk_r>
 800bba8:	3001      	adds	r0, #1
 800bbaa:	d101      	bne.n	800bbb0 <sbrk_aligned+0x38>
 800bbac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800bbb0:	4620      	mov	r0, r4
 800bbb2:	bd70      	pop	{r4, r5, r6, pc}
 800bbb4:	20006870 	.word	0x20006870

0800bbb8 <_malloc_r>:
 800bbb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbbc:	1ccd      	adds	r5, r1, #3
 800bbbe:	f025 0503 	bic.w	r5, r5, #3
 800bbc2:	3508      	adds	r5, #8
 800bbc4:	2d0c      	cmp	r5, #12
 800bbc6:	bf38      	it	cc
 800bbc8:	250c      	movcc	r5, #12
 800bbca:	2d00      	cmp	r5, #0
 800bbcc:	4607      	mov	r7, r0
 800bbce:	db01      	blt.n	800bbd4 <_malloc_r+0x1c>
 800bbd0:	42a9      	cmp	r1, r5
 800bbd2:	d905      	bls.n	800bbe0 <_malloc_r+0x28>
 800bbd4:	230c      	movs	r3, #12
 800bbd6:	603b      	str	r3, [r7, #0]
 800bbd8:	2600      	movs	r6, #0
 800bbda:	4630      	mov	r0, r6
 800bbdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbe0:	4e2e      	ldr	r6, [pc, #184]	; (800bc9c <_malloc_r+0xe4>)
 800bbe2:	f000 f91b 	bl	800be1c <__malloc_lock>
 800bbe6:	6833      	ldr	r3, [r6, #0]
 800bbe8:	461c      	mov	r4, r3
 800bbea:	bb34      	cbnz	r4, 800bc3a <_malloc_r+0x82>
 800bbec:	4629      	mov	r1, r5
 800bbee:	4638      	mov	r0, r7
 800bbf0:	f7ff ffc2 	bl	800bb78 <sbrk_aligned>
 800bbf4:	1c43      	adds	r3, r0, #1
 800bbf6:	4604      	mov	r4, r0
 800bbf8:	d14d      	bne.n	800bc96 <_malloc_r+0xde>
 800bbfa:	6834      	ldr	r4, [r6, #0]
 800bbfc:	4626      	mov	r6, r4
 800bbfe:	2e00      	cmp	r6, #0
 800bc00:	d140      	bne.n	800bc84 <_malloc_r+0xcc>
 800bc02:	6823      	ldr	r3, [r4, #0]
 800bc04:	4631      	mov	r1, r6
 800bc06:	4638      	mov	r0, r7
 800bc08:	eb04 0803 	add.w	r8, r4, r3
 800bc0c:	f000 f8b2 	bl	800bd74 <_sbrk_r>
 800bc10:	4580      	cmp	r8, r0
 800bc12:	d13a      	bne.n	800bc8a <_malloc_r+0xd2>
 800bc14:	6821      	ldr	r1, [r4, #0]
 800bc16:	3503      	adds	r5, #3
 800bc18:	1a6d      	subs	r5, r5, r1
 800bc1a:	f025 0503 	bic.w	r5, r5, #3
 800bc1e:	3508      	adds	r5, #8
 800bc20:	2d0c      	cmp	r5, #12
 800bc22:	bf38      	it	cc
 800bc24:	250c      	movcc	r5, #12
 800bc26:	4629      	mov	r1, r5
 800bc28:	4638      	mov	r0, r7
 800bc2a:	f7ff ffa5 	bl	800bb78 <sbrk_aligned>
 800bc2e:	3001      	adds	r0, #1
 800bc30:	d02b      	beq.n	800bc8a <_malloc_r+0xd2>
 800bc32:	6823      	ldr	r3, [r4, #0]
 800bc34:	442b      	add	r3, r5
 800bc36:	6023      	str	r3, [r4, #0]
 800bc38:	e00e      	b.n	800bc58 <_malloc_r+0xa0>
 800bc3a:	6822      	ldr	r2, [r4, #0]
 800bc3c:	1b52      	subs	r2, r2, r5
 800bc3e:	d41e      	bmi.n	800bc7e <_malloc_r+0xc6>
 800bc40:	2a0b      	cmp	r2, #11
 800bc42:	d916      	bls.n	800bc72 <_malloc_r+0xba>
 800bc44:	1961      	adds	r1, r4, r5
 800bc46:	42a3      	cmp	r3, r4
 800bc48:	6025      	str	r5, [r4, #0]
 800bc4a:	bf18      	it	ne
 800bc4c:	6059      	strne	r1, [r3, #4]
 800bc4e:	6863      	ldr	r3, [r4, #4]
 800bc50:	bf08      	it	eq
 800bc52:	6031      	streq	r1, [r6, #0]
 800bc54:	5162      	str	r2, [r4, r5]
 800bc56:	604b      	str	r3, [r1, #4]
 800bc58:	4638      	mov	r0, r7
 800bc5a:	f104 060b 	add.w	r6, r4, #11
 800bc5e:	f000 f8e3 	bl	800be28 <__malloc_unlock>
 800bc62:	f026 0607 	bic.w	r6, r6, #7
 800bc66:	1d23      	adds	r3, r4, #4
 800bc68:	1af2      	subs	r2, r6, r3
 800bc6a:	d0b6      	beq.n	800bbda <_malloc_r+0x22>
 800bc6c:	1b9b      	subs	r3, r3, r6
 800bc6e:	50a3      	str	r3, [r4, r2]
 800bc70:	e7b3      	b.n	800bbda <_malloc_r+0x22>
 800bc72:	6862      	ldr	r2, [r4, #4]
 800bc74:	42a3      	cmp	r3, r4
 800bc76:	bf0c      	ite	eq
 800bc78:	6032      	streq	r2, [r6, #0]
 800bc7a:	605a      	strne	r2, [r3, #4]
 800bc7c:	e7ec      	b.n	800bc58 <_malloc_r+0xa0>
 800bc7e:	4623      	mov	r3, r4
 800bc80:	6864      	ldr	r4, [r4, #4]
 800bc82:	e7b2      	b.n	800bbea <_malloc_r+0x32>
 800bc84:	4634      	mov	r4, r6
 800bc86:	6876      	ldr	r6, [r6, #4]
 800bc88:	e7b9      	b.n	800bbfe <_malloc_r+0x46>
 800bc8a:	230c      	movs	r3, #12
 800bc8c:	603b      	str	r3, [r7, #0]
 800bc8e:	4638      	mov	r0, r7
 800bc90:	f000 f8ca 	bl	800be28 <__malloc_unlock>
 800bc94:	e7a1      	b.n	800bbda <_malloc_r+0x22>
 800bc96:	6025      	str	r5, [r4, #0]
 800bc98:	e7de      	b.n	800bc58 <_malloc_r+0xa0>
 800bc9a:	bf00      	nop
 800bc9c:	2000686c 	.word	0x2000686c

0800bca0 <cleanup_glue>:
 800bca0:	b538      	push	{r3, r4, r5, lr}
 800bca2:	460c      	mov	r4, r1
 800bca4:	6809      	ldr	r1, [r1, #0]
 800bca6:	4605      	mov	r5, r0
 800bca8:	b109      	cbz	r1, 800bcae <cleanup_glue+0xe>
 800bcaa:	f7ff fff9 	bl	800bca0 <cleanup_glue>
 800bcae:	4621      	mov	r1, r4
 800bcb0:	4628      	mov	r0, r5
 800bcb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bcb6:	f7ff bf13 	b.w	800bae0 <_free_r>
	...

0800bcbc <_reclaim_reent>:
 800bcbc:	4b2c      	ldr	r3, [pc, #176]	; (800bd70 <_reclaim_reent+0xb4>)
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	4283      	cmp	r3, r0
 800bcc2:	b570      	push	{r4, r5, r6, lr}
 800bcc4:	4604      	mov	r4, r0
 800bcc6:	d051      	beq.n	800bd6c <_reclaim_reent+0xb0>
 800bcc8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800bcca:	b143      	cbz	r3, 800bcde <_reclaim_reent+0x22>
 800bccc:	68db      	ldr	r3, [r3, #12]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d14a      	bne.n	800bd68 <_reclaim_reent+0xac>
 800bcd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bcd4:	6819      	ldr	r1, [r3, #0]
 800bcd6:	b111      	cbz	r1, 800bcde <_reclaim_reent+0x22>
 800bcd8:	4620      	mov	r0, r4
 800bcda:	f7ff ff01 	bl	800bae0 <_free_r>
 800bcde:	6961      	ldr	r1, [r4, #20]
 800bce0:	b111      	cbz	r1, 800bce8 <_reclaim_reent+0x2c>
 800bce2:	4620      	mov	r0, r4
 800bce4:	f7ff fefc 	bl	800bae0 <_free_r>
 800bce8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800bcea:	b111      	cbz	r1, 800bcf2 <_reclaim_reent+0x36>
 800bcec:	4620      	mov	r0, r4
 800bcee:	f7ff fef7 	bl	800bae0 <_free_r>
 800bcf2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800bcf4:	b111      	cbz	r1, 800bcfc <_reclaim_reent+0x40>
 800bcf6:	4620      	mov	r0, r4
 800bcf8:	f7ff fef2 	bl	800bae0 <_free_r>
 800bcfc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800bcfe:	b111      	cbz	r1, 800bd06 <_reclaim_reent+0x4a>
 800bd00:	4620      	mov	r0, r4
 800bd02:	f7ff feed 	bl	800bae0 <_free_r>
 800bd06:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800bd08:	b111      	cbz	r1, 800bd10 <_reclaim_reent+0x54>
 800bd0a:	4620      	mov	r0, r4
 800bd0c:	f7ff fee8 	bl	800bae0 <_free_r>
 800bd10:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800bd12:	b111      	cbz	r1, 800bd1a <_reclaim_reent+0x5e>
 800bd14:	4620      	mov	r0, r4
 800bd16:	f7ff fee3 	bl	800bae0 <_free_r>
 800bd1a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800bd1c:	b111      	cbz	r1, 800bd24 <_reclaim_reent+0x68>
 800bd1e:	4620      	mov	r0, r4
 800bd20:	f7ff fede 	bl	800bae0 <_free_r>
 800bd24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bd26:	b111      	cbz	r1, 800bd2e <_reclaim_reent+0x72>
 800bd28:	4620      	mov	r0, r4
 800bd2a:	f7ff fed9 	bl	800bae0 <_free_r>
 800bd2e:	69a3      	ldr	r3, [r4, #24]
 800bd30:	b1e3      	cbz	r3, 800bd6c <_reclaim_reent+0xb0>
 800bd32:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bd34:	4620      	mov	r0, r4
 800bd36:	4798      	blx	r3
 800bd38:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800bd3a:	b1b9      	cbz	r1, 800bd6c <_reclaim_reent+0xb0>
 800bd3c:	4620      	mov	r0, r4
 800bd3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bd42:	f7ff bfad 	b.w	800bca0 <cleanup_glue>
 800bd46:	5949      	ldr	r1, [r1, r5]
 800bd48:	b941      	cbnz	r1, 800bd5c <_reclaim_reent+0xa0>
 800bd4a:	3504      	adds	r5, #4
 800bd4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd4e:	2d80      	cmp	r5, #128	; 0x80
 800bd50:	68d9      	ldr	r1, [r3, #12]
 800bd52:	d1f8      	bne.n	800bd46 <_reclaim_reent+0x8a>
 800bd54:	4620      	mov	r0, r4
 800bd56:	f7ff fec3 	bl	800bae0 <_free_r>
 800bd5a:	e7ba      	b.n	800bcd2 <_reclaim_reent+0x16>
 800bd5c:	680e      	ldr	r6, [r1, #0]
 800bd5e:	4620      	mov	r0, r4
 800bd60:	f7ff febe 	bl	800bae0 <_free_r>
 800bd64:	4631      	mov	r1, r6
 800bd66:	e7ef      	b.n	800bd48 <_reclaim_reent+0x8c>
 800bd68:	2500      	movs	r5, #0
 800bd6a:	e7ef      	b.n	800bd4c <_reclaim_reent+0x90>
 800bd6c:	bd70      	pop	{r4, r5, r6, pc}
 800bd6e:	bf00      	nop
 800bd70:	20000100 	.word	0x20000100

0800bd74 <_sbrk_r>:
 800bd74:	b538      	push	{r3, r4, r5, lr}
 800bd76:	4d06      	ldr	r5, [pc, #24]	; (800bd90 <_sbrk_r+0x1c>)
 800bd78:	2300      	movs	r3, #0
 800bd7a:	4604      	mov	r4, r0
 800bd7c:	4608      	mov	r0, r1
 800bd7e:	602b      	str	r3, [r5, #0]
 800bd80:	f7f5 fad4 	bl	800132c <_sbrk>
 800bd84:	1c43      	adds	r3, r0, #1
 800bd86:	d102      	bne.n	800bd8e <_sbrk_r+0x1a>
 800bd88:	682b      	ldr	r3, [r5, #0]
 800bd8a:	b103      	cbz	r3, 800bd8e <_sbrk_r+0x1a>
 800bd8c:	6023      	str	r3, [r4, #0]
 800bd8e:	bd38      	pop	{r3, r4, r5, pc}
 800bd90:	20006874 	.word	0x20006874

0800bd94 <_raise_r>:
 800bd94:	291f      	cmp	r1, #31
 800bd96:	b538      	push	{r3, r4, r5, lr}
 800bd98:	4604      	mov	r4, r0
 800bd9a:	460d      	mov	r5, r1
 800bd9c:	d904      	bls.n	800bda8 <_raise_r+0x14>
 800bd9e:	2316      	movs	r3, #22
 800bda0:	6003      	str	r3, [r0, #0]
 800bda2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bda6:	bd38      	pop	{r3, r4, r5, pc}
 800bda8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bdaa:	b112      	cbz	r2, 800bdb2 <_raise_r+0x1e>
 800bdac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bdb0:	b94b      	cbnz	r3, 800bdc6 <_raise_r+0x32>
 800bdb2:	4620      	mov	r0, r4
 800bdb4:	f000 f830 	bl	800be18 <_getpid_r>
 800bdb8:	462a      	mov	r2, r5
 800bdba:	4601      	mov	r1, r0
 800bdbc:	4620      	mov	r0, r4
 800bdbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bdc2:	f000 b817 	b.w	800bdf4 <_kill_r>
 800bdc6:	2b01      	cmp	r3, #1
 800bdc8:	d00a      	beq.n	800bde0 <_raise_r+0x4c>
 800bdca:	1c59      	adds	r1, r3, #1
 800bdcc:	d103      	bne.n	800bdd6 <_raise_r+0x42>
 800bdce:	2316      	movs	r3, #22
 800bdd0:	6003      	str	r3, [r0, #0]
 800bdd2:	2001      	movs	r0, #1
 800bdd4:	e7e7      	b.n	800bda6 <_raise_r+0x12>
 800bdd6:	2400      	movs	r4, #0
 800bdd8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bddc:	4628      	mov	r0, r5
 800bdde:	4798      	blx	r3
 800bde0:	2000      	movs	r0, #0
 800bde2:	e7e0      	b.n	800bda6 <_raise_r+0x12>

0800bde4 <raise>:
 800bde4:	4b02      	ldr	r3, [pc, #8]	; (800bdf0 <raise+0xc>)
 800bde6:	4601      	mov	r1, r0
 800bde8:	6818      	ldr	r0, [r3, #0]
 800bdea:	f7ff bfd3 	b.w	800bd94 <_raise_r>
 800bdee:	bf00      	nop
 800bdf0:	20000100 	.word	0x20000100

0800bdf4 <_kill_r>:
 800bdf4:	b538      	push	{r3, r4, r5, lr}
 800bdf6:	4d07      	ldr	r5, [pc, #28]	; (800be14 <_kill_r+0x20>)
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	4604      	mov	r4, r0
 800bdfc:	4608      	mov	r0, r1
 800bdfe:	4611      	mov	r1, r2
 800be00:	602b      	str	r3, [r5, #0]
 800be02:	f7f5 fa79 	bl	80012f8 <_kill>
 800be06:	1c43      	adds	r3, r0, #1
 800be08:	d102      	bne.n	800be10 <_kill_r+0x1c>
 800be0a:	682b      	ldr	r3, [r5, #0]
 800be0c:	b103      	cbz	r3, 800be10 <_kill_r+0x1c>
 800be0e:	6023      	str	r3, [r4, #0]
 800be10:	bd38      	pop	{r3, r4, r5, pc}
 800be12:	bf00      	nop
 800be14:	20006874 	.word	0x20006874

0800be18 <_getpid_r>:
 800be18:	f7f5 ba66 	b.w	80012e8 <_getpid>

0800be1c <__malloc_lock>:
 800be1c:	4801      	ldr	r0, [pc, #4]	; (800be24 <__malloc_lock+0x8>)
 800be1e:	f7ff be37 	b.w	800ba90 <__retarget_lock_acquire_recursive>
 800be22:	bf00      	nop
 800be24:	20006868 	.word	0x20006868

0800be28 <__malloc_unlock>:
 800be28:	4801      	ldr	r0, [pc, #4]	; (800be30 <__malloc_unlock+0x8>)
 800be2a:	f7ff be32 	b.w	800ba92 <__retarget_lock_release_recursive>
 800be2e:	bf00      	nop
 800be30:	20006868 	.word	0x20006868

0800be34 <_init>:
 800be34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be36:	bf00      	nop
 800be38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be3a:	bc08      	pop	{r3}
 800be3c:	469e      	mov	lr, r3
 800be3e:	4770      	bx	lr

0800be40 <_fini>:
 800be40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be42:	bf00      	nop
 800be44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be46:	bc08      	pop	{r3}
 800be48:	469e      	mov	lr, r3
 800be4a:	4770      	bx	lr
