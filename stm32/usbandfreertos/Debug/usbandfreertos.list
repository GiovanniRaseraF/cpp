
usbandfreertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c87c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000358  0800ca0c  0800ca0c  0001ca0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cd64  0800cd64  00020164  2**0
                  CONTENTS
  4 .ARM          00000008  0800cd64  0800cd64  0001cd64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cd6c  0800cd6c  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  0800cd6c  0800cd6c  0001cd6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cd7c  0800cd7c  0001cd7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  0800cd80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020164  2**0
                  CONTENTS
 10 .bss          00006714  20000164  20000164  00020164  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20006878  20006878  00020164  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 13 .debug_info   00039723  00000000  00000000  00020192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006278  00000000  00000000  000598b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001cc8  00000000  00000000  0005fb30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001aa0  00000000  00000000  000617f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000bdbd  00000000  00000000  00063298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023147  00000000  00000000  0006f055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de18f  00000000  00000000  0009219c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0017032b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000093c4  00000000  00000000  0017037c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000164 	.word	0x20000164
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c9f4 	.word	0x0800c9f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000168 	.word	0x20000168
 80001cc:	0800c9f4 	.word	0x0800c9f4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_uldivmod>:
 80005f8:	b953      	cbnz	r3, 8000610 <__aeabi_uldivmod+0x18>
 80005fa:	b94a      	cbnz	r2, 8000610 <__aeabi_uldivmod+0x18>
 80005fc:	2900      	cmp	r1, #0
 80005fe:	bf08      	it	eq
 8000600:	2800      	cmpeq	r0, #0
 8000602:	bf1c      	itt	ne
 8000604:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000608:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800060c:	f000 b974 	b.w	80008f8 <__aeabi_idiv0>
 8000610:	f1ad 0c08 	sub.w	ip, sp, #8
 8000614:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000618:	f000 f806 	bl	8000628 <__udivmoddi4>
 800061c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000620:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000624:	b004      	add	sp, #16
 8000626:	4770      	bx	lr

08000628 <__udivmoddi4>:
 8000628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800062c:	9d08      	ldr	r5, [sp, #32]
 800062e:	4604      	mov	r4, r0
 8000630:	468e      	mov	lr, r1
 8000632:	2b00      	cmp	r3, #0
 8000634:	d14d      	bne.n	80006d2 <__udivmoddi4+0xaa>
 8000636:	428a      	cmp	r2, r1
 8000638:	4694      	mov	ip, r2
 800063a:	d969      	bls.n	8000710 <__udivmoddi4+0xe8>
 800063c:	fab2 f282 	clz	r2, r2
 8000640:	b152      	cbz	r2, 8000658 <__udivmoddi4+0x30>
 8000642:	fa01 f302 	lsl.w	r3, r1, r2
 8000646:	f1c2 0120 	rsb	r1, r2, #32
 800064a:	fa20 f101 	lsr.w	r1, r0, r1
 800064e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000652:	ea41 0e03 	orr.w	lr, r1, r3
 8000656:	4094      	lsls	r4, r2
 8000658:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800065c:	0c21      	lsrs	r1, r4, #16
 800065e:	fbbe f6f8 	udiv	r6, lr, r8
 8000662:	fa1f f78c 	uxth.w	r7, ip
 8000666:	fb08 e316 	mls	r3, r8, r6, lr
 800066a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800066e:	fb06 f107 	mul.w	r1, r6, r7
 8000672:	4299      	cmp	r1, r3
 8000674:	d90a      	bls.n	800068c <__udivmoddi4+0x64>
 8000676:	eb1c 0303 	adds.w	r3, ip, r3
 800067a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800067e:	f080 811f 	bcs.w	80008c0 <__udivmoddi4+0x298>
 8000682:	4299      	cmp	r1, r3
 8000684:	f240 811c 	bls.w	80008c0 <__udivmoddi4+0x298>
 8000688:	3e02      	subs	r6, #2
 800068a:	4463      	add	r3, ip
 800068c:	1a5b      	subs	r3, r3, r1
 800068e:	b2a4      	uxth	r4, r4
 8000690:	fbb3 f0f8 	udiv	r0, r3, r8
 8000694:	fb08 3310 	mls	r3, r8, r0, r3
 8000698:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800069c:	fb00 f707 	mul.w	r7, r0, r7
 80006a0:	42a7      	cmp	r7, r4
 80006a2:	d90a      	bls.n	80006ba <__udivmoddi4+0x92>
 80006a4:	eb1c 0404 	adds.w	r4, ip, r4
 80006a8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80006ac:	f080 810a 	bcs.w	80008c4 <__udivmoddi4+0x29c>
 80006b0:	42a7      	cmp	r7, r4
 80006b2:	f240 8107 	bls.w	80008c4 <__udivmoddi4+0x29c>
 80006b6:	4464      	add	r4, ip
 80006b8:	3802      	subs	r0, #2
 80006ba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80006be:	1be4      	subs	r4, r4, r7
 80006c0:	2600      	movs	r6, #0
 80006c2:	b11d      	cbz	r5, 80006cc <__udivmoddi4+0xa4>
 80006c4:	40d4      	lsrs	r4, r2
 80006c6:	2300      	movs	r3, #0
 80006c8:	e9c5 4300 	strd	r4, r3, [r5]
 80006cc:	4631      	mov	r1, r6
 80006ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006d2:	428b      	cmp	r3, r1
 80006d4:	d909      	bls.n	80006ea <__udivmoddi4+0xc2>
 80006d6:	2d00      	cmp	r5, #0
 80006d8:	f000 80ef 	beq.w	80008ba <__udivmoddi4+0x292>
 80006dc:	2600      	movs	r6, #0
 80006de:	e9c5 0100 	strd	r0, r1, [r5]
 80006e2:	4630      	mov	r0, r6
 80006e4:	4631      	mov	r1, r6
 80006e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006ea:	fab3 f683 	clz	r6, r3
 80006ee:	2e00      	cmp	r6, #0
 80006f0:	d14a      	bne.n	8000788 <__udivmoddi4+0x160>
 80006f2:	428b      	cmp	r3, r1
 80006f4:	d302      	bcc.n	80006fc <__udivmoddi4+0xd4>
 80006f6:	4282      	cmp	r2, r0
 80006f8:	f200 80f9 	bhi.w	80008ee <__udivmoddi4+0x2c6>
 80006fc:	1a84      	subs	r4, r0, r2
 80006fe:	eb61 0303 	sbc.w	r3, r1, r3
 8000702:	2001      	movs	r0, #1
 8000704:	469e      	mov	lr, r3
 8000706:	2d00      	cmp	r5, #0
 8000708:	d0e0      	beq.n	80006cc <__udivmoddi4+0xa4>
 800070a:	e9c5 4e00 	strd	r4, lr, [r5]
 800070e:	e7dd      	b.n	80006cc <__udivmoddi4+0xa4>
 8000710:	b902      	cbnz	r2, 8000714 <__udivmoddi4+0xec>
 8000712:	deff      	udf	#255	; 0xff
 8000714:	fab2 f282 	clz	r2, r2
 8000718:	2a00      	cmp	r2, #0
 800071a:	f040 8092 	bne.w	8000842 <__udivmoddi4+0x21a>
 800071e:	eba1 010c 	sub.w	r1, r1, ip
 8000722:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000726:	fa1f fe8c 	uxth.w	lr, ip
 800072a:	2601      	movs	r6, #1
 800072c:	0c20      	lsrs	r0, r4, #16
 800072e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000732:	fb07 1113 	mls	r1, r7, r3, r1
 8000736:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800073a:	fb0e f003 	mul.w	r0, lr, r3
 800073e:	4288      	cmp	r0, r1
 8000740:	d908      	bls.n	8000754 <__udivmoddi4+0x12c>
 8000742:	eb1c 0101 	adds.w	r1, ip, r1
 8000746:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800074a:	d202      	bcs.n	8000752 <__udivmoddi4+0x12a>
 800074c:	4288      	cmp	r0, r1
 800074e:	f200 80cb 	bhi.w	80008e8 <__udivmoddi4+0x2c0>
 8000752:	4643      	mov	r3, r8
 8000754:	1a09      	subs	r1, r1, r0
 8000756:	b2a4      	uxth	r4, r4
 8000758:	fbb1 f0f7 	udiv	r0, r1, r7
 800075c:	fb07 1110 	mls	r1, r7, r0, r1
 8000760:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000764:	fb0e fe00 	mul.w	lr, lr, r0
 8000768:	45a6      	cmp	lr, r4
 800076a:	d908      	bls.n	800077e <__udivmoddi4+0x156>
 800076c:	eb1c 0404 	adds.w	r4, ip, r4
 8000770:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000774:	d202      	bcs.n	800077c <__udivmoddi4+0x154>
 8000776:	45a6      	cmp	lr, r4
 8000778:	f200 80bb 	bhi.w	80008f2 <__udivmoddi4+0x2ca>
 800077c:	4608      	mov	r0, r1
 800077e:	eba4 040e 	sub.w	r4, r4, lr
 8000782:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000786:	e79c      	b.n	80006c2 <__udivmoddi4+0x9a>
 8000788:	f1c6 0720 	rsb	r7, r6, #32
 800078c:	40b3      	lsls	r3, r6
 800078e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000792:	ea4c 0c03 	orr.w	ip, ip, r3
 8000796:	fa20 f407 	lsr.w	r4, r0, r7
 800079a:	fa01 f306 	lsl.w	r3, r1, r6
 800079e:	431c      	orrs	r4, r3
 80007a0:	40f9      	lsrs	r1, r7
 80007a2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80007a6:	fa00 f306 	lsl.w	r3, r0, r6
 80007aa:	fbb1 f8f9 	udiv	r8, r1, r9
 80007ae:	0c20      	lsrs	r0, r4, #16
 80007b0:	fa1f fe8c 	uxth.w	lr, ip
 80007b4:	fb09 1118 	mls	r1, r9, r8, r1
 80007b8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007bc:	fb08 f00e 	mul.w	r0, r8, lr
 80007c0:	4288      	cmp	r0, r1
 80007c2:	fa02 f206 	lsl.w	r2, r2, r6
 80007c6:	d90b      	bls.n	80007e0 <__udivmoddi4+0x1b8>
 80007c8:	eb1c 0101 	adds.w	r1, ip, r1
 80007cc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80007d0:	f080 8088 	bcs.w	80008e4 <__udivmoddi4+0x2bc>
 80007d4:	4288      	cmp	r0, r1
 80007d6:	f240 8085 	bls.w	80008e4 <__udivmoddi4+0x2bc>
 80007da:	f1a8 0802 	sub.w	r8, r8, #2
 80007de:	4461      	add	r1, ip
 80007e0:	1a09      	subs	r1, r1, r0
 80007e2:	b2a4      	uxth	r4, r4
 80007e4:	fbb1 f0f9 	udiv	r0, r1, r9
 80007e8:	fb09 1110 	mls	r1, r9, r0, r1
 80007ec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80007f0:	fb00 fe0e 	mul.w	lr, r0, lr
 80007f4:	458e      	cmp	lr, r1
 80007f6:	d908      	bls.n	800080a <__udivmoddi4+0x1e2>
 80007f8:	eb1c 0101 	adds.w	r1, ip, r1
 80007fc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000800:	d26c      	bcs.n	80008dc <__udivmoddi4+0x2b4>
 8000802:	458e      	cmp	lr, r1
 8000804:	d96a      	bls.n	80008dc <__udivmoddi4+0x2b4>
 8000806:	3802      	subs	r0, #2
 8000808:	4461      	add	r1, ip
 800080a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800080e:	fba0 9402 	umull	r9, r4, r0, r2
 8000812:	eba1 010e 	sub.w	r1, r1, lr
 8000816:	42a1      	cmp	r1, r4
 8000818:	46c8      	mov	r8, r9
 800081a:	46a6      	mov	lr, r4
 800081c:	d356      	bcc.n	80008cc <__udivmoddi4+0x2a4>
 800081e:	d053      	beq.n	80008c8 <__udivmoddi4+0x2a0>
 8000820:	b15d      	cbz	r5, 800083a <__udivmoddi4+0x212>
 8000822:	ebb3 0208 	subs.w	r2, r3, r8
 8000826:	eb61 010e 	sbc.w	r1, r1, lr
 800082a:	fa01 f707 	lsl.w	r7, r1, r7
 800082e:	fa22 f306 	lsr.w	r3, r2, r6
 8000832:	40f1      	lsrs	r1, r6
 8000834:	431f      	orrs	r7, r3
 8000836:	e9c5 7100 	strd	r7, r1, [r5]
 800083a:	2600      	movs	r6, #0
 800083c:	4631      	mov	r1, r6
 800083e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000842:	f1c2 0320 	rsb	r3, r2, #32
 8000846:	40d8      	lsrs	r0, r3
 8000848:	fa0c fc02 	lsl.w	ip, ip, r2
 800084c:	fa21 f303 	lsr.w	r3, r1, r3
 8000850:	4091      	lsls	r1, r2
 8000852:	4301      	orrs	r1, r0
 8000854:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000858:	fa1f fe8c 	uxth.w	lr, ip
 800085c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000860:	fb07 3610 	mls	r6, r7, r0, r3
 8000864:	0c0b      	lsrs	r3, r1, #16
 8000866:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800086a:	fb00 f60e 	mul.w	r6, r0, lr
 800086e:	429e      	cmp	r6, r3
 8000870:	fa04 f402 	lsl.w	r4, r4, r2
 8000874:	d908      	bls.n	8000888 <__udivmoddi4+0x260>
 8000876:	eb1c 0303 	adds.w	r3, ip, r3
 800087a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800087e:	d22f      	bcs.n	80008e0 <__udivmoddi4+0x2b8>
 8000880:	429e      	cmp	r6, r3
 8000882:	d92d      	bls.n	80008e0 <__udivmoddi4+0x2b8>
 8000884:	3802      	subs	r0, #2
 8000886:	4463      	add	r3, ip
 8000888:	1b9b      	subs	r3, r3, r6
 800088a:	b289      	uxth	r1, r1
 800088c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000890:	fb07 3316 	mls	r3, r7, r6, r3
 8000894:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000898:	fb06 f30e 	mul.w	r3, r6, lr
 800089c:	428b      	cmp	r3, r1
 800089e:	d908      	bls.n	80008b2 <__udivmoddi4+0x28a>
 80008a0:	eb1c 0101 	adds.w	r1, ip, r1
 80008a4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80008a8:	d216      	bcs.n	80008d8 <__udivmoddi4+0x2b0>
 80008aa:	428b      	cmp	r3, r1
 80008ac:	d914      	bls.n	80008d8 <__udivmoddi4+0x2b0>
 80008ae:	3e02      	subs	r6, #2
 80008b0:	4461      	add	r1, ip
 80008b2:	1ac9      	subs	r1, r1, r3
 80008b4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80008b8:	e738      	b.n	800072c <__udivmoddi4+0x104>
 80008ba:	462e      	mov	r6, r5
 80008bc:	4628      	mov	r0, r5
 80008be:	e705      	b.n	80006cc <__udivmoddi4+0xa4>
 80008c0:	4606      	mov	r6, r0
 80008c2:	e6e3      	b.n	800068c <__udivmoddi4+0x64>
 80008c4:	4618      	mov	r0, r3
 80008c6:	e6f8      	b.n	80006ba <__udivmoddi4+0x92>
 80008c8:	454b      	cmp	r3, r9
 80008ca:	d2a9      	bcs.n	8000820 <__udivmoddi4+0x1f8>
 80008cc:	ebb9 0802 	subs.w	r8, r9, r2
 80008d0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80008d4:	3801      	subs	r0, #1
 80008d6:	e7a3      	b.n	8000820 <__udivmoddi4+0x1f8>
 80008d8:	4646      	mov	r6, r8
 80008da:	e7ea      	b.n	80008b2 <__udivmoddi4+0x28a>
 80008dc:	4620      	mov	r0, r4
 80008de:	e794      	b.n	800080a <__udivmoddi4+0x1e2>
 80008e0:	4640      	mov	r0, r8
 80008e2:	e7d1      	b.n	8000888 <__udivmoddi4+0x260>
 80008e4:	46d0      	mov	r8, sl
 80008e6:	e77b      	b.n	80007e0 <__udivmoddi4+0x1b8>
 80008e8:	3b02      	subs	r3, #2
 80008ea:	4461      	add	r1, ip
 80008ec:	e732      	b.n	8000754 <__udivmoddi4+0x12c>
 80008ee:	4630      	mov	r0, r6
 80008f0:	e709      	b.n	8000706 <__udivmoddi4+0xde>
 80008f2:	4464      	add	r4, ip
 80008f4:	3802      	subs	r0, #2
 80008f6:	e742      	b.n	800077e <__udivmoddi4+0x156>

080008f8 <__aeabi_idiv0>:
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop

080008fc <main>:
void usbcomunicationserial(void *argument);
static void MX_SPI1_Init(void);
void gyroreadings(void *argument);


int main(void){
 80008fc:	b590      	push	{r4, r7, lr}
 80008fe:	b089      	sub	sp, #36	; 0x24
 8000900:	af00      	add	r7, sp, #0
  HAL_Init();
 8000902:	f000 ffd3 	bl	80018ac <HAL_Init>
  SystemClock_Config();
 8000906:	f000 f863 	bl	80009d0 <_Z18SystemClock_Configv>
  MX_GPIO_Init();
 800090a:	f000 f8d7 	bl	8000abc <_ZL12MX_GPIO_Initv>
  MX_SPI1_Init();
 800090e:	f000 f93b 	bl	8000b88 <_ZL12MX_SPI1_Initv>
  MX_USB_DEVICE_Init();
 8000912:	f00a fc43 	bl	800b19c <MX_USB_DEVICE_Init>

  Vesp::console.log("\n\n\n-------Vesp-------\n");
 8000916:	4b20      	ldr	r3, [pc, #128]	; (8000998 <main+0x9c>)
 8000918:	681c      	ldr	r4, [r3, #0]
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	4618      	mov	r0, r3
 8000920:	f00b f958 	bl	800bbd4 <_ZNSaIcEC1Ev>
 8000924:	f107 021c 	add.w	r2, r7, #28
 8000928:	1d3b      	adds	r3, r7, #4
 800092a:	491c      	ldr	r1, [pc, #112]	; (800099c <main+0xa0>)
 800092c:	4618      	mov	r0, r3
 800092e:	f00b fab1 	bl	800be94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8000932:	1d3b      	adds	r3, r7, #4
 8000934:	4619      	mov	r1, r3
 8000936:	4620      	mov	r0, r4
 8000938:	f000 fdcc 	bl	80014d4 <_ZN7printer3logENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800093c:	1d3b      	adds	r3, r7, #4
 800093e:	4618      	mov	r0, r3
 8000940:	f00b fa3a 	bl	800bdb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000944:	f107 031c 	add.w	r3, r7, #28
 8000948:	4618      	mov	r0, r3
 800094a:	f00b f944 	bl	800bbd6 <_ZNSaIcED1Ev>
  osKernelInitialize();
 800094e:	f007 fea7 	bl	80086a0 <osKernelInitialize>

  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000952:	4a13      	ldr	r2, [pc, #76]	; (80009a0 <main+0xa4>)
 8000954:	2100      	movs	r1, #0
 8000956:	4813      	ldr	r0, [pc, #76]	; (80009a4 <main+0xa8>)
 8000958:	f007 feec 	bl	8008734 <osThreadNew>
 800095c:	4603      	mov	r3, r0
 800095e:	4a12      	ldr	r2, [pc, #72]	; (80009a8 <main+0xac>)
 8000960:	6013      	str	r3, [r2, #0]
  ledtoggleHandle = osThreadNew(ledstatustoggle, NULL, &ledtoggle_attributes);
 8000962:	4a12      	ldr	r2, [pc, #72]	; (80009ac <main+0xb0>)
 8000964:	2100      	movs	r1, #0
 8000966:	4812      	ldr	r0, [pc, #72]	; (80009b0 <main+0xb4>)
 8000968:	f007 fee4 	bl	8008734 <osThreadNew>
 800096c:	4603      	mov	r3, r0
 800096e:	4a11      	ldr	r2, [pc, #68]	; (80009b4 <main+0xb8>)
 8000970:	6013      	str	r3, [r2, #0]
  usbcomunicationHandle = osThreadNew(usbcomunicationserial, NULL, &usbcomunication_attributes);
 8000972:	4a11      	ldr	r2, [pc, #68]	; (80009b8 <main+0xbc>)
 8000974:	2100      	movs	r1, #0
 8000976:	4811      	ldr	r0, [pc, #68]	; (80009bc <main+0xc0>)
 8000978:	f007 fedc 	bl	8008734 <osThreadNew>
 800097c:	4603      	mov	r3, r0
 800097e:	4a10      	ldr	r2, [pc, #64]	; (80009c0 <main+0xc4>)
 8000980:	6013      	str	r3, [r2, #0]
  gyroreadingsHandle = osThreadNew(gyroreadings, NULL, &gyroreadings_attributes);
 8000982:	4a10      	ldr	r2, [pc, #64]	; (80009c4 <main+0xc8>)
 8000984:	2100      	movs	r1, #0
 8000986:	4810      	ldr	r0, [pc, #64]	; (80009c8 <main+0xcc>)
 8000988:	f007 fed4 	bl	8008734 <osThreadNew>
 800098c:	4603      	mov	r3, r0
 800098e:	4a0f      	ldr	r2, [pc, #60]	; (80009cc <main+0xd0>)
 8000990:	6013      	str	r3, [r2, #0]

  osKernelStart();
 8000992:	f007 fea9 	bl	80086e8 <osKernelStart>

  for(;;);
 8000996:	e7fe      	b.n	8000996 <main+0x9a>
 8000998:	20000180 	.word	0x20000180
 800099c:	0800ca44 	.word	0x0800ca44
 80009a0:	0800caf4 	.word	0x0800caf4
 80009a4:	08000ca1 	.word	0x08000ca1
 80009a8:	20000184 	.word	0x20000184
 80009ac:	0800cb18 	.word	0x0800cb18
 80009b0:	08000cb5 	.word	0x08000cb5
 80009b4:	20000188 	.word	0x20000188
 80009b8:	0800cb3c 	.word	0x0800cb3c
 80009bc:	08000cd5 	.word	0x08000cd5
 80009c0:	2000018c 	.word	0x2000018c
 80009c4:	0800cb60 	.word	0x0800cb60
 80009c8:	08000c01 	.word	0x08000c01
 80009cc:	200001e8 	.word	0x200001e8

080009d0 <_Z18SystemClock_Configv>:
}


void SystemClock_Config(void){
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b094      	sub	sp, #80	; 0x50
 80009d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009d6:	f107 0320 	add.w	r3, r7, #32
 80009da:	2230      	movs	r2, #48	; 0x30
 80009dc:	2100      	movs	r1, #0
 80009de:	4618      	mov	r0, r3
 80009e0:	f00b faf4 	bl	800bfcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e4:	f107 030c 	add.w	r3, r7, #12
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]
 80009f2:	611a      	str	r2, [r3, #16]

  __HAL_RCC_PWR_CLK_ENABLE();
 80009f4:	2300      	movs	r3, #0
 80009f6:	60bb      	str	r3, [r7, #8]
 80009f8:	4b2e      	ldr	r3, [pc, #184]	; (8000ab4 <_Z18SystemClock_Configv+0xe4>)
 80009fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fc:	4a2d      	ldr	r2, [pc, #180]	; (8000ab4 <_Z18SystemClock_Configv+0xe4>)
 80009fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a02:	6413      	str	r3, [r2, #64]	; 0x40
 8000a04:	4b2b      	ldr	r3, [pc, #172]	; (8000ab4 <_Z18SystemClock_Configv+0xe4>)
 8000a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a0c:	60bb      	str	r3, [r7, #8]
 8000a0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a10:	2300      	movs	r3, #0
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	4b28      	ldr	r3, [pc, #160]	; (8000ab8 <_Z18SystemClock_Configv+0xe8>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a27      	ldr	r2, [pc, #156]	; (8000ab8 <_Z18SystemClock_Configv+0xe8>)
 8000a1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a1e:	6013      	str	r3, [r2, #0]
 8000a20:	4b25      	ldr	r3, [pc, #148]	; (8000ab8 <_Z18SystemClock_Configv+0xe8>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a28:	607b      	str	r3, [r7, #4]
 8000a2a:	687b      	ldr	r3, [r7, #4]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000a2c:	2303      	movs	r3, #3
 8000a2e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a34:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a36:	2301      	movs	r3, #1
 8000a38:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a3a:	2310      	movs	r3, #16
 8000a3c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a42:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a46:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a48:	2304      	movs	r3, #4
 8000a4a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000a4c:	2348      	movs	r3, #72	; 0x48
 8000a4e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a50:	2302      	movs	r3, #2
 8000a52:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000a54:	2303      	movs	r3, #3
 8000a56:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a58:	f107 0320 	add.w	r3, r7, #32
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f002 fcb9 	bl	80033d4 <HAL_RCC_OscConfig>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	bf14      	ite	ne
 8000a68:	2301      	movne	r3, #1
 8000a6a:	2300      	moveq	r3, #0
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 8000a72:	f000 f94b 	bl	8000d0c <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a76:	230f      	movs	r3, #15
 8000a78:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a82:	2300      	movs	r3, #0
 8000a84:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a86:	2300      	movs	r3, #0
 8000a88:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a8a:	f107 030c 	add.w	r3, r7, #12
 8000a8e:	2100      	movs	r1, #0
 8000a90:	4618      	mov	r0, r3
 8000a92:	f002 ff17 	bl	80038c4 <HAL_RCC_ClockConfig>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	bf14      	ite	ne
 8000a9c:	2301      	movne	r3, #1
 8000a9e:	2300      	moveq	r3, #0
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 8000aa6:	f000 f931 	bl	8000d0c <Error_Handler>
  }
}
 8000aaa:	bf00      	nop
 8000aac:	3750      	adds	r7, #80	; 0x50
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	40007000 	.word	0x40007000

08000abc <_ZL12MX_GPIO_Initv>:


static void MX_GPIO_Init(void){
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b088      	sub	sp, #32
 8000ac0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac2:	f107 030c 	add.w	r3, r7, #12
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	605a      	str	r2, [r3, #4]
 8000acc:	609a      	str	r2, [r3, #8]
 8000ace:	60da      	str	r2, [r3, #12]
 8000ad0:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60bb      	str	r3, [r7, #8]
 8000ad6:	4b29      	ldr	r3, [pc, #164]	; (8000b7c <_ZL12MX_GPIO_Initv+0xc0>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a28      	ldr	r2, [pc, #160]	; (8000b7c <_ZL12MX_GPIO_Initv+0xc0>)
 8000adc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b26      	ldr	r3, [pc, #152]	; (8000b7c <_ZL12MX_GPIO_Initv+0xc0>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aea:	60bb      	str	r3, [r7, #8]
 8000aec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	607b      	str	r3, [r7, #4]
 8000af2:	4b22      	ldr	r3, [pc, #136]	; (8000b7c <_ZL12MX_GPIO_Initv+0xc0>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a21      	ldr	r2, [pc, #132]	; (8000b7c <_ZL12MX_GPIO_Initv+0xc0>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	4b1f      	ldr	r3, [pc, #124]	; (8000b7c <_ZL12MX_GPIO_Initv+0xc0>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	603b      	str	r3, [r7, #0]
 8000b0e:	4b1b      	ldr	r3, [pc, #108]	; (8000b7c <_ZL12MX_GPIO_Initv+0xc0>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	4a1a      	ldr	r2, [pc, #104]	; (8000b7c <_ZL12MX_GPIO_Initv+0xc0>)
 8000b14:	f043 0302 	orr.w	r3, r3, #2
 8000b18:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1a:	4b18      	ldr	r3, [pc, #96]	; (8000b7c <_ZL12MX_GPIO_Initv+0xc0>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	f003 0302 	and.w	r3, r3, #2
 8000b22:	603b      	str	r3, [r7, #0]
 8000b24:	683b      	ldr	r3, [r7, #0]

  HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2110      	movs	r1, #16
 8000b2a:	4815      	ldr	r0, [pc, #84]	; (8000b80 <_ZL12MX_GPIO_Initv+0xc4>)
 8000b2c:	f001 f9a2 	bl	8001e74 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 8000b30:	2200      	movs	r2, #0
 8000b32:	2120      	movs	r1, #32
 8000b34:	4813      	ldr	r0, [pc, #76]	; (8000b84 <_ZL12MX_GPIO_Initv+0xc8>)
 8000b36:	f001 f99d 	bl	8001e74 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = GYRO_CS_Pin;
 8000b3a:	2310      	movs	r3, #16
 8000b3c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b46:	2300      	movs	r3, #0
 8000b48:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GYRO_CS_GPIO_Port, &GPIO_InitStruct);
 8000b4a:	f107 030c 	add.w	r3, r7, #12
 8000b4e:	4619      	mov	r1, r3
 8000b50:	480b      	ldr	r0, [pc, #44]	; (8000b80 <_ZL12MX_GPIO_Initv+0xc4>)
 8000b52:	f000 fff3 	bl	8001b3c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = led_Pin;
 8000b56:	2320      	movs	r3, #32
 8000b58:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b62:	2300      	movs	r3, #0
 8000b64:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 8000b66:	f107 030c 	add.w	r3, r7, #12
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4805      	ldr	r0, [pc, #20]	; (8000b84 <_ZL12MX_GPIO_Initv+0xc8>)
 8000b6e:	f000 ffe5 	bl	8001b3c <HAL_GPIO_Init>
}
 8000b72:	bf00      	nop
 8000b74:	3720      	adds	r7, #32
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	40020000 	.word	0x40020000
 8000b84:	40020400 	.word	0x40020400

08000b88 <_ZL12MX_SPI1_Initv>:


static void MX_SPI1_Init(void){
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  hspi1.Instance = SPI1;
 8000b8c:	4b1a      	ldr	r3, [pc, #104]	; (8000bf8 <_ZL12MX_SPI1_Initv+0x70>)
 8000b8e:	4a1b      	ldr	r2, [pc, #108]	; (8000bfc <_ZL12MX_SPI1_Initv+0x74>)
 8000b90:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b92:	4b19      	ldr	r3, [pc, #100]	; (8000bf8 <_ZL12MX_SPI1_Initv+0x70>)
 8000b94:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b98:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b9a:	4b17      	ldr	r3, [pc, #92]	; (8000bf8 <_ZL12MX_SPI1_Initv+0x70>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ba0:	4b15      	ldr	r3, [pc, #84]	; (8000bf8 <_ZL12MX_SPI1_Initv+0x70>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ba6:	4b14      	ldr	r3, [pc, #80]	; (8000bf8 <_ZL12MX_SPI1_Initv+0x70>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bac:	4b12      	ldr	r3, [pc, #72]	; (8000bf8 <_ZL12MX_SPI1_Initv+0x70>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bb2:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <_ZL12MX_SPI1_Initv+0x70>)
 8000bb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bb8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000bba:	4b0f      	ldr	r3, [pc, #60]	; (8000bf8 <_ZL12MX_SPI1_Initv+0x70>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bc0:	4b0d      	ldr	r3, [pc, #52]	; (8000bf8 <_ZL12MX_SPI1_Initv+0x70>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bc6:	4b0c      	ldr	r3, [pc, #48]	; (8000bf8 <_ZL12MX_SPI1_Initv+0x70>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bcc:	4b0a      	ldr	r3, [pc, #40]	; (8000bf8 <_ZL12MX_SPI1_Initv+0x70>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000bd2:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <_ZL12MX_SPI1_Initv+0x70>)
 8000bd4:	220a      	movs	r2, #10
 8000bd6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000bd8:	4807      	ldr	r0, [pc, #28]	; (8000bf8 <_ZL12MX_SPI1_Initv+0x70>)
 8000bda:	f003 f8b1 	bl	8003d40 <HAL_SPI_Init>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	bf14      	ite	ne
 8000be4:	2301      	movne	r3, #1
 8000be6:	2300      	moveq	r3, #0
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 8000bee:	f000 f88d 	bl	8000d0c <Error_Handler>
  }
}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20000190 	.word	0x20000190
 8000bfc:	40013000 	.word	0x40013000

08000c00 <_Z12gyroreadingsPv>:

// Threads implementation
void gyroreadings(void *argument){
 8000c00:	b5b0      	push	{r4, r5, r7, lr}
 8000c02:	b0b8      	sub	sp, #224	; 0xe0
 8000c04:	af16      	add	r7, sp, #88	; 0x58
 8000c06:	6078      	str	r0, [r7, #4]
	osDelay(7000);
 8000c08:	f641 3058 	movw	r0, #7000	; 0x1b58
 8000c0c:	f007 fe24 	bl	8008858 <osDelay>

	// gyro setup
	mpu6000 mpu{hspi1, GYRO_CS_Pin, GYRO_CS_GPIO_Port};
 8000c10:	4c1f      	ldr	r4, [pc, #124]	; (8000c90 <_Z12gyroreadingsPv+0x90>)
 8000c12:	f107 0508 	add.w	r5, r7, #8
 8000c16:	4b1f      	ldr	r3, [pc, #124]	; (8000c94 <_Z12gyroreadingsPv+0x94>)
 8000c18:	9314      	str	r3, [sp, #80]	; 0x50
 8000c1a:	2310      	movs	r3, #16
 8000c1c:	9313      	str	r3, [sp, #76]	; 0x4c
 8000c1e:	4668      	mov	r0, sp
 8000c20:	f104 030c 	add.w	r3, r4, #12
 8000c24:	224c      	movs	r2, #76	; 0x4c
 8000c26:	4619      	mov	r1, r3
 8000c28:	f00b f9a8 	bl	800bf7c <memcpy>
 8000c2c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8000c30:	4628      	mov	r0, r5
 8000c32:	f000 f8dd 	bl	8000df0 <_ZN7mpu6000C1E19__SPI_HandleTypeDeftP12GPIO_TypeDef>
	mpu.init();
 8000c36:	f107 0308 	add.w	r3, r7, #8
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f000 f918 	bl	8000e70 <_ZN7mpu60004initEv>

	Vesp::console.log("mpu init done \n");
 8000c40:	4b15      	ldr	r3, [pc, #84]	; (8000c98 <_Z12gyroreadingsPv+0x98>)
 8000c42:	681c      	ldr	r4, [r3, #0]
 8000c44:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f00a ffc3 	bl	800bbd4 <_ZNSaIcEC1Ev>
 8000c4e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8000c52:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000c56:	4911      	ldr	r1, [pc, #68]	; (8000c9c <_Z12gyroreadingsPv+0x9c>)
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f00b f91b 	bl	800be94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8000c5e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000c62:	4619      	mov	r1, r3
 8000c64:	4620      	mov	r0, r4
 8000c66:	f000 fc35 	bl	80014d4 <_ZN7printer3logENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8000c6a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f00b f8a2 	bl	800bdb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000c74:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f00a ffac 	bl	800bbd6 <_ZNSaIcED1Ev>

	for(;;){
		mpu.read_acc();
 8000c7e:	f107 0308 	add.w	r3, r7, #8
 8000c82:	4618      	mov	r0, r3
 8000c84:	f000 f982 	bl	8000f8c <_ZN7mpu60008read_accEv>

		osDelay(200);
 8000c88:	20c8      	movs	r0, #200	; 0xc8
 8000c8a:	f007 fde5 	bl	8008858 <osDelay>
		mpu.read_acc();
 8000c8e:	e7f6      	b.n	8000c7e <_Z12gyroreadingsPv+0x7e>
 8000c90:	20000190 	.word	0x20000190
 8000c94:	40020000 	.word	0x40020000
 8000c98:	20000180 	.word	0x20000180
 8000c9c:	0800ca5c 	.word	0x0800ca5c

08000ca0 <_Z16StartDefaultTaskPv>:
	}
}

void StartDefaultTask(void *argument){
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  for(;;){
    osDelay(1000);
 8000ca8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cac:	f007 fdd4 	bl	8008858 <osDelay>
 8000cb0:	e7fa      	b.n	8000ca8 <_Z16StartDefaultTaskPv+0x8>
	...

08000cb4 <_Z15ledstatustogglePv>:
  }
}

void ledstatustoggle(void *argument){
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  for(;;){
	  HAL_GPIO_TogglePin(led_GPIO_Port, led_Pin);
 8000cbc:	2120      	movs	r1, #32
 8000cbe:	4804      	ldr	r0, [pc, #16]	; (8000cd0 <_Z15ledstatustogglePv+0x1c>)
 8000cc0:	f001 f8f1 	bl	8001ea6 <HAL_GPIO_TogglePin>
	  osDelay(1000);
 8000cc4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cc8:	f007 fdc6 	bl	8008858 <osDelay>
	  HAL_GPIO_TogglePin(led_GPIO_Port, led_Pin);
 8000ccc:	e7f6      	b.n	8000cbc <_Z15ledstatustogglePv+0x8>
 8000cce:	bf00      	nop
 8000cd0:	40020400 	.word	0x40020400

08000cd4 <_Z21usbcomunicationserialPv>:
  }
}

void usbcomunicationserial(void *argument){
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  for(;;){
	//Vesp::getprinter().log("Vespin2.0 Firmaware 1.0\n");

	osDelay(2000);
 8000cdc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ce0:	f007 fdba 	bl	8008858 <osDelay>
 8000ce4:	e7fa      	b.n	8000cdc <_Z21usbcomunicationserialPv+0x8>
	...

08000ce8 <HAL_TIM_PeriodElapsedCallback>:
  }
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM6) {
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a04      	ldr	r2, [pc, #16]	; (8000d08 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d101      	bne.n	8000cfe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cfa:	f000 fdf9 	bl	80018f0 <HAL_IncTick>
  }
}
 8000cfe:	bf00      	nop
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40001000 	.word	0x40001000

08000d0c <Error_Handler>:

void Error_Handler(void){
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d10:	b672      	cpsid	i
}
 8000d12:	bf00      	nop
  __disable_irq();
  while (1){}
 8000d14:	e7fe      	b.n	8000d14 <Error_Handler+0x8>
	...

08000d18 <_Z41__static_initialization_and_destruction_0ii>:
}
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	6039      	str	r1, [r7, #0]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d109      	bne.n	8000d3c <_Z41__static_initialization_and_destruction_0ii+0x24>
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d104      	bne.n	8000d3c <_Z41__static_initialization_and_destruction_0ii+0x24>

};

namespace Vesp{
	printer &getprinter();
	static printer& console = getprinter();
 8000d32:	f000 fbe5 	bl	8001500 <_ZN4Vesp10getprinterEv>
 8000d36:	4603      	mov	r3, r0
 8000d38:	4a02      	ldr	r2, [pc, #8]	; (8000d44 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8000d3a:	6013      	str	r3, [r2, #0]
 8000d3c:	bf00      	nop
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	20000180 	.word	0x20000180

08000d48 <_GLOBAL__sub_I_defaultTaskHandle>:
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000d50:	2001      	movs	r0, #1
 8000d52:	f7ff ffe1 	bl	8000d18 <_Z41__static_initialization_and_destruction_0ii>
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <_ZNSt7__cxx119to_stringEy>:
    return __str;
  }

  inline string
  to_string(unsigned long long __val)
  {
 8000d58:	b590      	push	{r4, r7, lr}
 8000d5a:	b087      	sub	sp, #28
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	60f8      	str	r0, [r7, #12]
 8000d60:	e9c7 2300 	strd	r2, r3, [r7]
    string __str(__detail::__to_chars_len(__val), '\0');
 8000d64:	220a      	movs	r2, #10
 8000d66:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000d6a:	f000 f997 	bl	800109c <_ZNSt8__detail14__to_chars_lenIyEEjT_i>
 8000d6e:	4604      	mov	r4, r0
 8000d70:	f107 0314 	add.w	r3, r7, #20
 8000d74:	4618      	mov	r0, r3
 8000d76:	f00a ff2d 	bl	800bbd4 <_ZNSaIcEC1Ev>
 8000d7a:	f107 0314 	add.w	r3, r7, #20
 8000d7e:	2200      	movs	r2, #0
 8000d80:	4621      	mov	r1, r4
 8000d82:	68f8      	ldr	r0, [r7, #12]
 8000d84:	f00a fff5 	bl	800bd72 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EjcRKS3_>
 8000d88:	f107 0314 	add.w	r3, r7, #20
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f00a ff22 	bl	800bbd6 <_ZNSaIcED1Ev>
    __detail::__to_chars_10_impl(&__str[0], __str.size(), __val);
 8000d92:	2100      	movs	r1, #0
 8000d94:	68f8      	ldr	r0, [r7, #12]
 8000d96:	f00b f819 	bl	800bdcc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	68f8      	ldr	r0, [r7, #12]
 8000d9e:	f00b f811 	bl	800bdc4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8000da2:	4601      	mov	r1, r0
 8000da4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000da8:	4620      	mov	r0, r4
 8000daa:	f000 f9d9 	bl	8001160 <_ZNSt8__detail18__to_chars_10_implIyEEvPcjT_>
    return __str;
 8000dae:	bf00      	nop
  }
 8000db0:	68f8      	ldr	r0, [r7, #12]
 8000db2:	371c      	adds	r7, #28
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd90      	pop	{r4, r7, pc}

08000db8 <_ZNSt7__cxx119to_stringEf>:
#if _GLIBCXX_USE_C99_STDIO
  // NB: (v)snprintf vs sprintf.

  inline string
  to_string(float __val)
  {
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b086      	sub	sp, #24
 8000dbc:	af02      	add	r7, sp, #8
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	6039      	str	r1, [r7, #0]
    const int __n = 
 8000dc2:	233a      	movs	r3, #58	; 0x3a
 8000dc4:	60fb      	str	r3, [r7, #12]
      __gnu_cxx::__numeric_traits<float>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n,
					   "%f", __val);
 8000dc6:	6838      	ldr	r0, [r7, #0]
 8000dc8:	f7ff fbbe 	bl	8000548 <__aeabi_f2d>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	460b      	mov	r3, r1
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	e9cd 2300 	strd	r2, r3, [sp]
 8000dd6:	4b04      	ldr	r3, [pc, #16]	; (8000de8 <_ZNSt7__cxx119to_stringEf+0x30>)
 8000dd8:	223a      	movs	r2, #58	; 0x3a
 8000dda:	4904      	ldr	r1, [pc, #16]	; (8000dec <_ZNSt7__cxx119to_stringEf+0x34>)
 8000ddc:	f000 fa34 	bl	8001248 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>
  }
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	3710      	adds	r7, #16
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	0800ca6c 	.word	0x0800ca6c
 8000dec:	0800c371 	.word	0x0800c371

08000df0 <_ZN7mpu6000C1E19__SPI_HandleTypeDeftP12GPIO_TypeDef>:
 */

#include "mpu6000.h"
#include "printer.h"

mpu6000::mpu6000(SPI_HandleTypeDef _spi, uint16_t _cs_pin, GPIO_TypeDef *_cs_port) : spi{_spi}, cs_pin{_cs_pin}, cs_port{_cs_port}{}
 8000df0:	b084      	sub	sp, #16
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b082      	sub	sp, #8
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
 8000dfa:	f107 0014 	add.w	r0, r7, #20
 8000dfe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000e02:	4a0d      	ldr	r2, [pc, #52]	; (8000e38 <_ZN7mpu6000C1E19__SPI_HandleTypeDeftP12GPIO_TypeDef+0x48>)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	3304      	adds	r3, #4
 8000e0c:	f107 0114 	add.w	r1, r7, #20
 8000e10:	2258      	movs	r2, #88	; 0x58
 8000e12:	4618      	mov	r0, r3
 8000e14:	f00b f8b2 	bl	800bf7c <memcpy>
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8000e1e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000e26:	661a      	str	r2, [r3, #96]	; 0x60
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e34:	b004      	add	sp, #16
 8000e36:	4770      	bx	lr
 8000e38:	0800cc58 	.word	0x0800cc58

08000e3c <_ZN7mpu60008transmitEh>:

HAL_StatusTypeDef mpu6000::transmit(uint8_t datavalue){
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	460b      	mov	r3, r1
 8000e46:	70fb      	strb	r3, [r7, #3]
	uint8_t data[1];
	data[0] = datavalue;
 8000e48:	78fb      	ldrb	r3, [r7, #3]
 8000e4a:	733b      	strb	r3, [r7, #12]

	HAL_StatusTypeDef ret = HAL_SPI_Transmit(&spi, data, 1, 10);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	1d18      	adds	r0, r3, #4
 8000e50:	f107 010c 	add.w	r1, r7, #12
 8000e54:	230a      	movs	r3, #10
 8000e56:	2201      	movs	r2, #1
 8000e58:	f002 fffb 	bl	8003e52 <HAL_SPI_Transmit>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(1);
 8000e60:	2001      	movs	r0, #1
 8000e62:	f000 fd65 	bl	8001930 <HAL_Delay>

	}else{

	}

	return ret;
 8000e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3710      	adds	r7, #16
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <_ZN7mpu60004initEv>:

int mpu6000::init(){
 8000e70:	b590      	push	{r4, r7, lr}
 8000e72:	b091      	sub	sp, #68	; 0x44
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
	// Deselect I2C comunication
	select();
 8000e78:	6878      	ldr	r0, [r7, #4]
 8000e7a:	f000 f8cd 	bl	8001018 <_ZN7mpu60006selectEv>
	transmit(MPUREG_USER_CTRL);
 8000e7e:	216a      	movs	r1, #106	; 0x6a
 8000e80:	6878      	ldr	r0, [r7, #4]
 8000e82:	f7ff ffdb 	bl	8000e3c <_ZN7mpu60008transmitEh>
	transmit(BIT_I2C_IF_DIS);
 8000e86:	2110      	movs	r1, #16
 8000e88:	6878      	ldr	r0, [r7, #4]
 8000e8a:	f7ff ffd7 	bl	8000e3c <_ZN7mpu60008transmitEh>
	unselect();
 8000e8e:	6878      	ldr	r0, [r7, #4]
 8000e90:	f000 f8d3 	bl	800103a <_ZN7mpu60008unselectEv>

	select();
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	f000 f8bf 	bl	8001018 <_ZN7mpu60006selectEv>
	transmit(MPUREG_PWR_MGMT_1);
 8000e9a:	216b      	movs	r1, #107	; 0x6b
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	f7ff ffcd 	bl	8000e3c <_ZN7mpu60008transmitEh>
	transmit(BIT_H_RESET);
 8000ea2:	2180      	movs	r1, #128	; 0x80
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f7ff ffc9 	bl	8000e3c <_ZN7mpu60008transmitEh>
	unselect();
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f000 f8c5 	bl	800103a <_ZN7mpu60008unselectEv>
	HAL_Delay(150);
 8000eb0:	2096      	movs	r0, #150	; 0x96
 8000eb2:	f000 fd3d 	bl	8001930 <HAL_Delay>

	select();
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	f000 f8ae 	bl	8001018 <_ZN7mpu60006selectEv>
	transmit(MPUREG_PWR_MGMT_1);
 8000ebc:	216b      	movs	r1, #107	; 0x6b
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f7ff ffbc 	bl	8000e3c <_ZN7mpu60008transmitEh>
	transmit(MPU_CLK_SEL_PLLGYROZ);
 8000ec4:	2103      	movs	r1, #3
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f7ff ffb8 	bl	8000e3c <_ZN7mpu60008transmitEh>
	unselect();
 8000ecc:	6878      	ldr	r0, [r7, #4]
 8000ece:	f000 f8b4 	bl	800103a <_ZN7mpu60008unselectEv>

	select();
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f000 f8a0 	bl	8001018 <_ZN7mpu60006selectEv>
	transmit(MPUREG_USER_CTRL);
 8000ed8:	216a      	movs	r1, #106	; 0x6a
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f7ff ffae 	bl	8000e3c <_ZN7mpu60008transmitEh>
	transmit(BIT_I2C_IF_DIS);
 8000ee0:	2110      	movs	r1, #16
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f7ff ffaa 	bl	8000e3c <_ZN7mpu60008transmitEh>
	unselect();
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	f000 f8a6 	bl	800103a <_ZN7mpu60008unselectEv>

	uint64_t data[1];
	select();
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f000 f892 	bl	8001018 <_ZN7mpu60006selectEv>
	transmit(MPUREG_WHOAMI|READ_FLAG);
 8000ef4:	21f5      	movs	r1, #245	; 0xf5
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f7ff ffa0 	bl	8000e3c <_ZN7mpu60008transmitEh>
	HAL_SPI_Receive(&spi, (uint8_t *)data, 8, 40);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	1d18      	adds	r0, r3, #4
 8000f00:	f107 0108 	add.w	r1, r7, #8
 8000f04:	2328      	movs	r3, #40	; 0x28
 8000f06:	2208      	movs	r2, #8
 8000f08:	f003 f8df 	bl	80040ca <HAL_SPI_Receive>
	unselect();
 8000f0c:	6878      	ldr	r0, [r7, #4]
 8000f0e:	f000 f894 	bl	800103a <_ZN7mpu60008unselectEv>

	select();
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f000 f880 	bl	8001018 <_ZN7mpu60006selectEv>
	transmit(MPUREG_ACCEL_XOUT_H | READ_FLAG);
 8000f18:	21bb      	movs	r1, #187	; 0xbb
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f7ff ff8e 	bl	8000e3c <_ZN7mpu60008transmitEh>
	HAL_SPI_Receive(&spi, (uint8_t *)data, 2, 40);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	1d18      	adds	r0, r3, #4
 8000f24:	f107 0108 	add.w	r1, r7, #8
 8000f28:	2328      	movs	r3, #40	; 0x28
 8000f2a:	2202      	movs	r2, #2
 8000f2c:	f003 f8cd 	bl	80040ca <HAL_SPI_Receive>
	unselect();
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f000 f882 	bl	800103a <_ZN7mpu60008unselectEv>

	Vesp::console.log(std::to_string(data[0])+"\n");
 8000f36:	4b13      	ldr	r3, [pc, #76]	; (8000f84 <_ZN7mpu60004initEv+0x114>)
 8000f38:	681c      	ldr	r4, [r3, #0]
 8000f3a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000f3e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000f42:	4608      	mov	r0, r1
 8000f44:	f7ff ff08 	bl	8000d58 <_ZNSt7__cxx119to_stringEy>
 8000f48:	f107 0310 	add.w	r3, r7, #16
 8000f4c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000f50:	4a0d      	ldr	r2, [pc, #52]	; (8000f88 <_ZN7mpu60004initEv+0x118>)
 8000f52:	4618      	mov	r0, r3
 8000f54:	f000 f9af 	bl	80012b6 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8000f58:	f107 0310 	add.w	r3, r7, #16
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4620      	mov	r0, r4
 8000f60:	f000 fab8 	bl	80014d4 <_ZN7printer3logENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8000f64:	f107 0310 	add.w	r3, r7, #16
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f00a ff25 	bl	800bdb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000f6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f72:	4618      	mov	r0, r3
 8000f74:	f00a ff20 	bl	800bdb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

	return 0;
 8000f78:	2300      	movs	r3, #0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3744      	adds	r7, #68	; 0x44
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd90      	pop	{r4, r7, pc}
 8000f82:	bf00      	nop
 8000f84:	200001ec 	.word	0x200001ec
 8000f88:	0800ca70 	.word	0x0800ca70

08000f8c <_ZN7mpu60008read_accEv>:
uint64_t mpu6000::read_acc(){
 8000f8c:	b590      	push	{r4, r7, lr}
 8000f8e:	b091      	sub	sp, #68	; 0x44
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
	uint16_t data[1];
	data[0] = 0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	81bb      	strh	r3, [r7, #12]

	select();
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f000 f83d 	bl	8001018 <_ZN7mpu60006selectEv>
	transmit(MPUREG_ACCEL_XOUT_H | READ_FLAG);
 8000f9e:	21bb      	movs	r1, #187	; 0xbb
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f7ff ff4b 	bl	8000e3c <_ZN7mpu60008transmitEh>
	HAL_SPI_Receive(&spi, (uint8_t *)data, 2, 40);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	1d18      	adds	r0, r3, #4
 8000faa:	f107 010c 	add.w	r1, r7, #12
 8000fae:	2328      	movs	r3, #40	; 0x28
 8000fb0:	2202      	movs	r2, #2
 8000fb2:	f003 f88a 	bl	80040ca <HAL_SPI_Receive>
	unselect();
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f000 f83f 	bl	800103a <_ZN7mpu60008unselectEv>

	Vesp::console.log(std::to_string((float)1)+"\n");
 8000fbc:	4b14      	ldr	r3, [pc, #80]	; (8001010 <_ZN7mpu60008read_accEv+0x84>)
 8000fbe:	681c      	ldr	r4, [r3, #0]
 8000fc0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fc4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff fef5 	bl	8000db8 <_ZNSt7__cxx119to_stringEf>
 8000fce:	f107 0310 	add.w	r3, r7, #16
 8000fd2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000fd6:	4a0f      	ldr	r2, [pc, #60]	; (8001014 <_ZN7mpu60008read_accEv+0x88>)
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f000 f96c 	bl	80012b6 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8000fde:	f107 0310 	add.w	r3, r7, #16
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4620      	mov	r0, r4
 8000fe6:	f000 fa75 	bl	80014d4 <_ZN7printer3logENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8000fea:	f107 0310 	add.w	r3, r7, #16
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f00a fee2 	bl	800bdb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000ff4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f00a fedd 	bl	800bdb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

	return 0;
 8000ffe:	f04f 0200 	mov.w	r2, #0
 8001002:	f04f 0300 	mov.w	r3, #0
}
 8001006:	4610      	mov	r0, r2
 8001008:	4619      	mov	r1, r3
 800100a:	3744      	adds	r7, #68	; 0x44
 800100c:	46bd      	mov	sp, r7
 800100e:	bd90      	pop	{r4, r7, pc}
 8001010:	200001ec 	.word	0x200001ec
 8001014:	0800ca70 	.word	0x0800ca70

08001018 <_ZN7mpu60006selectEv>:

void mpu6000::select(){
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(cs_port, cs_pin, GPIO_PIN_RESET);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800102a:	2200      	movs	r2, #0
 800102c:	4619      	mov	r1, r3
 800102e:	f000 ff21 	bl	8001e74 <HAL_GPIO_WritePin>
}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <_ZN7mpu60008unselectEv>:

void mpu6000::unselect(){
 800103a:	b580      	push	{r7, lr}
 800103c:	b082      	sub	sp, #8
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(cs_port, cs_pin, GPIO_PIN_SET);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800104c:	2201      	movs	r2, #1
 800104e:	4619      	mov	r1, r3
 8001050:	f000 ff10 	bl	8001e74 <HAL_GPIO_WritePin>
}
 8001054:	bf00      	nop
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <_ZN7mpu6000D1Ev>:

mpu6000::~mpu6000() {
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	4a04      	ldr	r2, [pc, #16]	; (8001078 <_ZN7mpu6000D1Ev+0x1c>)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4618      	mov	r0, r3
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	0800cc58 	.word	0x0800cc58

0800107c <_ZN7mpu6000D0Ev>:
mpu6000::~mpu6000() {
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
}
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f7ff ffe9 	bl	800105c <_ZN7mpu6000D1Ev>
 800108a:	2164      	movs	r1, #100	; 0x64
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f00a fd9f 	bl	800bbd0 <_ZdlPvj>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4618      	mov	r0, r3
 8001096:	3708      	adds	r7, #8
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}

0800109c <_ZNSt8__detail14__to_chars_lenIyEEjT_i>:
namespace __detail
{
  // Generic implementation for arbitrary bases.
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR unsigned
    __to_chars_len(_Tp __value, int __base = 10) noexcept
 800109c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80010a0:	b08c      	sub	sp, #48	; 0x30
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	e9c7 0106 	strd	r0, r1, [r7, #24]
 80010a8:	617a      	str	r2, [r7, #20]
    {
      static_assert(is_integral<_Tp>::value, "implementation bug");
      static_assert(is_unsigned<_Tp>::value, "implementation bug");

      unsigned __n = 1;
 80010aa:	2301      	movs	r3, #1
 80010ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      const unsigned __b2 = __base  * __base;
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	fb03 f303 	mul.w	r3, r3, r3
 80010b4:	62bb      	str	r3, [r7, #40]	; 0x28
      const unsigned __b3 = __b2 * __base;
 80010b6:	697a      	ldr	r2, [r7, #20]
 80010b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010ba:	fb02 f303 	mul.w	r3, r2, r3
 80010be:	627b      	str	r3, [r7, #36]	; 0x24
      const unsigned long __b4 = __b3 * __base;
 80010c0:	697a      	ldr	r2, [r7, #20]
 80010c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c4:	fb02 f303 	mul.w	r3, r2, r3
 80010c8:	623b      	str	r3, [r7, #32]
      for (;;)
	{
	  if (__value < (unsigned)__base) return __n;
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	2200      	movs	r2, #0
 80010ce:	461c      	mov	r4, r3
 80010d0:	4615      	mov	r5, r2
 80010d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80010d6:	42a2      	cmp	r2, r4
 80010d8:	41ab      	sbcs	r3, r5
 80010da:	d201      	bcs.n	80010e0 <_ZNSt8__detail14__to_chars_lenIyEEjT_i+0x44>
 80010dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010de:	e039      	b.n	8001154 <_ZNSt8__detail14__to_chars_lenIyEEjT_i+0xb8>
	  if (__value < __b2) return __n + 1;
 80010e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010e2:	2200      	movs	r2, #0
 80010e4:	4698      	mov	r8, r3
 80010e6:	4691      	mov	r9, r2
 80010e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80010ec:	4542      	cmp	r2, r8
 80010ee:	eb73 0309 	sbcs.w	r3, r3, r9
 80010f2:	d202      	bcs.n	80010fa <_ZNSt8__detail14__to_chars_lenIyEEjT_i+0x5e>
 80010f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010f6:	3301      	adds	r3, #1
 80010f8:	e02c      	b.n	8001154 <_ZNSt8__detail14__to_chars_lenIyEEjT_i+0xb8>
	  if (__value < __b3) return __n + 2;
 80010fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fc:	2200      	movs	r2, #0
 80010fe:	469a      	mov	sl, r3
 8001100:	4693      	mov	fp, r2
 8001102:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001106:	4552      	cmp	r2, sl
 8001108:	eb73 030b 	sbcs.w	r3, r3, fp
 800110c:	d202      	bcs.n	8001114 <_ZNSt8__detail14__to_chars_lenIyEEjT_i+0x78>
 800110e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001110:	3302      	adds	r3, #2
 8001112:	e01f      	b.n	8001154 <_ZNSt8__detail14__to_chars_lenIyEEjT_i+0xb8>
	  if (__value < __b4) return __n + 3;
 8001114:	6a3b      	ldr	r3, [r7, #32]
 8001116:	2200      	movs	r2, #0
 8001118:	60bb      	str	r3, [r7, #8]
 800111a:	60fa      	str	r2, [r7, #12]
 800111c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001120:	68b9      	ldr	r1, [r7, #8]
 8001122:	428a      	cmp	r2, r1
 8001124:	68f9      	ldr	r1, [r7, #12]
 8001126:	418b      	sbcs	r3, r1
 8001128:	d202      	bcs.n	8001130 <_ZNSt8__detail14__to_chars_lenIyEEjT_i+0x94>
 800112a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800112c:	3303      	adds	r3, #3
 800112e:	e011      	b.n	8001154 <_ZNSt8__detail14__to_chars_lenIyEEjT_i+0xb8>
	  __value /= __b4;
 8001130:	6a3b      	ldr	r3, [r7, #32]
 8001132:	2200      	movs	r2, #0
 8001134:	603b      	str	r3, [r7, #0]
 8001136:	607a      	str	r2, [r7, #4]
 8001138:	e9d7 2300 	ldrd	r2, r3, [r7]
 800113c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001140:	f7ff fa5a 	bl	80005f8 <__aeabi_uldivmod>
 8001144:	4602      	mov	r2, r0
 8001146:	460b      	mov	r3, r1
 8001148:	e9c7 2306 	strd	r2, r3, [r7, #24]
	  __n += 4;
 800114c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800114e:	3304      	adds	r3, #4
 8001150:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if (__value < (unsigned)__base) return __n;
 8001152:	e7ba      	b.n	80010ca <_ZNSt8__detail14__to_chars_lenIyEEjT_i+0x2e>
	}
    }
 8001154:	4618      	mov	r0, r3
 8001156:	3730      	adds	r7, #48	; 0x30
 8001158:	46bd      	mov	sp, r7
 800115a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001160 <_ZNSt8__detail18__to_chars_10_implIyEEvPcjT_>:
  // Write an unsigned integer value to the range [first,first+len).
  // The caller is required to provide a buffer of exactly the right size
  // (which can be determined by the __to_chars_len function).
  template<typename _Tp>
    void
    __to_chars_10_impl(char* __first, unsigned __len, _Tp __val) noexcept
 8001160:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001164:	b08c      	sub	sp, #48	; 0x30
 8001166:	af00      	add	r7, sp, #0
 8001168:	6178      	str	r0, [r7, #20]
 800116a:	6139      	str	r1, [r7, #16]
 800116c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	"0001020304050607080910111213141516171819"
	"2021222324252627282930313233343536373839"
	"4041424344454647484950515253545556575859"
	"6061626364656667686970717273747576777879"
	"8081828384858687888990919293949596979899";
      unsigned __pos = __len - 1;
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	3b01      	subs	r3, #1
 8001174:	62fb      	str	r3, [r7, #44]	; 0x2c
      while (__val >= 100)
 8001176:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800117a:	2a64      	cmp	r2, #100	; 0x64
 800117c:	f173 0300 	sbcs.w	r3, r3, #0
 8001180:	d335      	bcc.n	80011ee <_ZNSt8__detail18__to_chars_10_implIyEEvPcjT_+0x8e>
	{
	  auto const __num = (__val % 100) * 2;
 8001182:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001186:	f04f 0264 	mov.w	r2, #100	; 0x64
 800118a:	f04f 0300 	mov.w	r3, #0
 800118e:	f7ff fa33 	bl	80005f8 <__aeabi_uldivmod>
 8001192:	1891      	adds	r1, r2, r2
 8001194:	6039      	str	r1, [r7, #0]
 8001196:	415b      	adcs	r3, r3
 8001198:	607b      	str	r3, [r7, #4]
 800119a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800119e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	  __val /= 100;
 80011a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80011a6:	f04f 0264 	mov.w	r2, #100	; 0x64
 80011aa:	f04f 0300 	mov.w	r3, #0
 80011ae:	f7ff fa23 	bl	80005f8 <__aeabi_uldivmod>
 80011b2:	4602      	mov	r2, r0
 80011b4:	460b      	mov	r3, r1
 80011b6:	e9c7 2302 	strd	r2, r3, [r7, #8]
	  __first[__pos] = __digits[__num + 1];
 80011ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80011be:	f112 0a01 	adds.w	sl, r2, #1
 80011c2:	f143 0b00 	adc.w	fp, r3, #0
 80011c6:	697a      	ldr	r2, [r7, #20]
 80011c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011ca:	4413      	add	r3, r2
 80011cc:	4a1d      	ldr	r2, [pc, #116]	; (8001244 <_ZNSt8__detail18__to_chars_10_implIyEEvPcjT_+0xe4>)
 80011ce:	4452      	add	r2, sl
 80011d0:	7812      	ldrb	r2, [r2, #0]
 80011d2:	701a      	strb	r2, [r3, #0]
	  __first[__pos - 1] = __digits[__num];
 80011d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011d6:	3b01      	subs	r3, #1
 80011d8:	697a      	ldr	r2, [r7, #20]
 80011da:	4413      	add	r3, r2
 80011dc:	4919      	ldr	r1, [pc, #100]	; (8001244 <_ZNSt8__detail18__to_chars_10_implIyEEvPcjT_+0xe4>)
 80011de:	6a3a      	ldr	r2, [r7, #32]
 80011e0:	440a      	add	r2, r1
 80011e2:	7812      	ldrb	r2, [r2, #0]
 80011e4:	701a      	strb	r2, [r3, #0]
	  __pos -= 2;
 80011e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011e8:	3b02      	subs	r3, #2
 80011ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      while (__val >= 100)
 80011ec:	e7c3      	b.n	8001176 <_ZNSt8__detail18__to_chars_10_implIyEEvPcjT_+0x16>
	}
      if (__val >= 10)
 80011ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80011f2:	2a0a      	cmp	r2, #10
 80011f4:	f173 0300 	sbcs.w	r3, r3, #0
 80011f8:	d319      	bcc.n	800122e <_ZNSt8__detail18__to_chars_10_implIyEEvPcjT_+0xce>
	{
	  auto const __num = __val * 2;
 80011fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80011fe:	eb12 0802 	adds.w	r8, r2, r2
 8001202:	eb43 0903 	adc.w	r9, r3, r3
 8001206:	e9c7 8906 	strd	r8, r9, [r7, #24]
	  __first[1] = __digits[__num + 1];
 800120a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800120e:	1c54      	adds	r4, r2, #1
 8001210:	f143 0500 	adc.w	r5, r3, #0
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	3301      	adds	r3, #1
 8001218:	4a0a      	ldr	r2, [pc, #40]	; (8001244 <_ZNSt8__detail18__to_chars_10_implIyEEvPcjT_+0xe4>)
 800121a:	4422      	add	r2, r4
 800121c:	7812      	ldrb	r2, [r2, #0]
 800121e:	701a      	strb	r2, [r3, #0]
	  __first[0] = __digits[__num];
 8001220:	4a08      	ldr	r2, [pc, #32]	; (8001244 <_ZNSt8__detail18__to_chars_10_implIyEEvPcjT_+0xe4>)
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	4413      	add	r3, r2
 8001226:	781a      	ldrb	r2, [r3, #0]
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	701a      	strb	r2, [r3, #0]
	}
      else
	__first[0] = '0' + __val;
    }
 800122c:	e004      	b.n	8001238 <_ZNSt8__detail18__to_chars_10_implIyEEvPcjT_+0xd8>
	__first[0] = '0' + __val;
 800122e:	7a3b      	ldrb	r3, [r7, #8]
 8001230:	3330      	adds	r3, #48	; 0x30
 8001232:	b2da      	uxtb	r2, r3
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	701a      	strb	r2, [r3, #0]
    }
 8001238:	bf00      	nop
 800123a:	3730      	adds	r7, #48	; 0x30
 800123c:	46bd      	mov	sp, r7
 800123e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001242:	bf00      	nop
 8001244:	0800cb84 	.word	0x0800cb84

08001248 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>:
    }

  // Helper for the to_string / to_wstring functions.
  template<typename _String, typename _CharT = typename _String::value_type>
    _String
    __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,
 8001248:	b408      	push	{r3}
 800124a:	b590      	push	{r4, r7, lr}
 800124c:	b088      	sub	sp, #32
 800124e:	af00      	add	r7, sp, #0
 8001250:	60f8      	str	r0, [r7, #12]
 8001252:	60b9      	str	r1, [r7, #8]
 8001254:	607a      	str	r2, [r7, #4]
				 __builtin_va_list), std::size_t __n,
		 const _CharT* __fmt, ...)
    {
      // XXX Eventually the result should be constructed in-place in
      // the __cxx11 string, likely with the help of internal hooks.
      _CharT* __s = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	3307      	adds	r3, #7
 800125a:	08db      	lsrs	r3, r3, #3
 800125c:	00db      	lsls	r3, r3, #3
 800125e:	ebad 0d03 	sub.w	sp, sp, r3
 8001262:	466b      	mov	r3, sp
 8001264:	3307      	adds	r3, #7
 8001266:	08db      	lsrs	r3, r3, #3
 8001268:	00db      	lsls	r3, r3, #3
 800126a:	61fb      	str	r3, [r7, #28]
							  * __n));

      __builtin_va_list __args;
      __builtin_va_start(__args, __fmt);
 800126c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001270:	613b      	str	r3, [r7, #16]

      const int __len = __convf(__s, __n, __fmt, __args);
 8001272:	68bc      	ldr	r4, [r7, #8]
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001278:	6879      	ldr	r1, [r7, #4]
 800127a:	69f8      	ldr	r0, [r7, #28]
 800127c:	47a0      	blx	r4
 800127e:	61b8      	str	r0, [r7, #24]

      __builtin_va_end(__args);

      return _String(__s, __s + __len);
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	69fa      	ldr	r2, [r7, #28]
 8001284:	18d4      	adds	r4, r2, r3
 8001286:	f107 0314 	add.w	r3, r7, #20
 800128a:	4618      	mov	r0, r3
 800128c:	f00a fca2 	bl	800bbd4 <_ZNSaIcEC1Ev>
 8001290:	f107 0314 	add.w	r3, r7, #20
 8001294:	4622      	mov	r2, r4
 8001296:	69f9      	ldr	r1, [r7, #28]
 8001298:	68f8      	ldr	r0, [r7, #12]
 800129a:	f000 f823 	bl	80012e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>
 800129e:	f107 0314 	add.w	r3, r7, #20
 80012a2:	4618      	mov	r0, r3
 80012a4:	f00a fc97 	bl	800bbd6 <_ZNSaIcED1Ev>
    }
 80012a8:	68f8      	ldr	r0, [r7, #12]
 80012aa:	3720      	adds	r7, #32
 80012ac:	46bd      	mov	sp, r7
 80012ae:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80012b2:	b001      	add	sp, #4
 80012b4:	4770      	bx	lr

080012b6 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>:
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b084      	sub	sp, #16
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	60f8      	str	r0, [r7, #12]
 80012be:	60b9      	str	r1, [r7, #8]
 80012c0:	607a      	str	r2, [r7, #4]
    { return std::move(__lhs.append(__rhs)); }
 80012c2:	6879      	ldr	r1, [r7, #4]
 80012c4:	68b8      	ldr	r0, [r7, #8]
 80012c6:	f00a fda7 	bl	800be18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
 80012ca:	4603      	mov	r3, r0
 80012cc:	4618      	mov	r0, r3
 80012ce:	f000 f824 	bl	800131a <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 80012d2:	4603      	mov	r3, r0
 80012d4:	4619      	mov	r1, r3
 80012d6:	68f8      	ldr	r0, [r7, #12]
 80012d8:	f00a fd54 	bl	800bd84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 80012dc:	68f8      	ldr	r0, [r7, #12]
 80012de:	3710      	adds	r7, #16
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>:
        basic_string(_InputIterator __beg, _InputIterator __end,
 80012e4:	b590      	push	{r4, r7, lr}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	60b9      	str	r1, [r7, #8]
 80012ee:	607a      	str	r2, [r7, #4]
 80012f0:	603b      	str	r3, [r7, #0]
	: _M_dataplus(_M_local_data(), __a)
 80012f2:	68fc      	ldr	r4, [r7, #12]
 80012f4:	68f8      	ldr	r0, [r7, #12]
 80012f6:	f00a fc80 	bl	800bbfa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 80012fa:	4603      	mov	r3, r0
 80012fc:	683a      	ldr	r2, [r7, #0]
 80012fe:	4619      	mov	r1, r3
 8001300:	4620      	mov	r0, r4
 8001302:	f00a fda1 	bl	800be48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
	{ _M_construct(__beg, __end); }
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	68b9      	ldr	r1, [r7, #8]
 800130a:	68f8      	ldr	r0, [r7, #12]
 800130c:	f000 f810 	bl	8001330 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	4618      	mov	r0, r3
 8001314:	3714      	adds	r7, #20
 8001316:	46bd      	mov	sp, r7
 8001318:	bd90      	pop	{r4, r7, pc}

0800131a <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 800131a:	b480      	push	{r7}
 800131c:	b083      	sub	sp, #12
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4618      	mov	r0, r3
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>:
        _M_construct(_InIterator __beg, _InIterator __end)
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
	  _M_construct_aux(__beg, __end, _Integral());
 800133c:	687a      	ldr	r2, [r7, #4]
 800133e:	68b9      	ldr	r1, [r7, #8]
 8001340:	68f8      	ldr	r0, [r7, #12]
 8001342:	f000 f804 	bl	800134e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>
        }
 8001346:	bf00      	nop
 8001348:	3710      	adds	r7, #16
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>:
        _M_construct_aux(_InIterator __beg, _InIterator __end,
 800134e:	b590      	push	{r4, r7, lr}
 8001350:	b087      	sub	sp, #28
 8001352:	af00      	add	r7, sp, #0
 8001354:	60f8      	str	r0, [r7, #12]
 8001356:	60b9      	str	r1, [r7, #8]
 8001358:	607a      	str	r2, [r7, #4]
 800135a:	703b      	strb	r3, [r7, #0]
          _M_construct(__beg, __end, _Tag());
 800135c:	4623      	mov	r3, r4
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	68b9      	ldr	r1, [r7, #8]
 8001362:	68f8      	ldr	r0, [r7, #12]
 8001364:	f000 f804 	bl	8001370 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
	}
 8001368:	bf00      	nop
 800136a:	371c      	adds	r7, #28
 800136c:	46bd      	mov	sp, r7
 800136e:	bd90      	pop	{r4, r7, pc}

08001370 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
 800137c:	703b      	strb	r3, [r7, #0]
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 800137e:	68b8      	ldr	r0, [r7, #8]
 8001380:	f000 f83e 	bl	8001400 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d005      	beq.n	8001396 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 800138a:	68ba      	ldr	r2, [r7, #8]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	429a      	cmp	r2, r3
 8001390:	d001      	beq.n	8001396 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 8001392:	2301      	movs	r3, #1
 8001394:	e000      	b.n	8001398 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x28>
 8001396:	2300      	movs	r3, #0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d002      	beq.n	80013a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x32>
	  std::__throw_logic_error(__N("basic_string::"
 800139c:	4817      	ldr	r0, [pc, #92]	; (80013fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x8c>)
 800139e:	f00a fc1e 	bl	800bbde <_ZSt19__throw_logic_errorPKc>
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 80013a2:	6879      	ldr	r1, [r7, #4]
 80013a4:	68b8      	ldr	r0, [r7, #8]
 80013a6:	f000 f83b 	bl	8001420 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 80013aa:	4603      	mov	r3, r0
 80013ac:	617b      	str	r3, [r7, #20]

	if (__dnew > size_type(_S_local_capacity))
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	2b0f      	cmp	r3, #15
 80013b2:	d910      	bls.n	80013d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x66>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
 80013b4:	f107 0314 	add.w	r3, r7, #20
 80013b8:	2200      	movs	r2, #0
 80013ba:	4619      	mov	r1, r3
 80013bc:	68f8      	ldr	r0, [r7, #12]
 80013be:	f00a fc25 	bl	800bc0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80013c2:	4603      	mov	r3, r0
 80013c4:	4619      	mov	r1, r3
 80013c6:	68f8      	ldr	r0, [r7, #12]
 80013c8:	f00a fc13 	bl	800bbf2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	4619      	mov	r1, r3
 80013d0:	68f8      	ldr	r0, [r7, #12]
 80013d2:	f00a fc14 	bl	800bbfe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 80013d6:	68f8      	ldr	r0, [r7, #12]
 80013d8:	f00a fc0d 	bl	800bbf6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 80013dc:	4603      	mov	r3, r0
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	68b9      	ldr	r1, [r7, #8]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f00a fc7f 	bl	800bce6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	4619      	mov	r1, r3
 80013ec:	68f8      	ldr	r0, [r7, #12]
 80013ee:	f00a fc08 	bl	800bc02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 80013f2:	bf00      	nop
 80013f4:	3718      	adds	r7, #24
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	0800ca74 	.word	0x0800ca74

08001400 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>:


  // For use in string and vstring.
  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
    { return __ptr == 0; }
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2b00      	cmp	r3, #0
 800140c:	bf0c      	ite	eq
 800140e:	2301      	moveq	r3, #1
 8001410:	2300      	movne	r3, #0
 8001412:	b2db      	uxtb	r3, r3
 8001414:	4618      	mov	r0, r3
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8001420:	b5b0      	push	{r4, r5, r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 800142a:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 800142c:	1d3b      	adds	r3, r7, #4
 800142e:	4618      	mov	r0, r3
 8001430:	f000 f80a 	bl	8001448 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__distance(__first, __last,
 8001434:	462a      	mov	r2, r5
 8001436:	6839      	ldr	r1, [r7, #0]
 8001438:	4620      	mov	r0, r4
 800143a:	f000 f810 	bl	800145e <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 800143e:	4603      	mov	r3, r0
    }
 8001440:	4618      	mov	r0, r3
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bdb0      	pop	{r4, r5, r7, pc}

08001448 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8001450:	bf00      	nop
 8001452:	4618      	mov	r0, r3
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr

0800145e <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800145e:	b480      	push	{r7}
 8001460:	b085      	sub	sp, #20
 8001462:	af00      	add	r7, sp, #0
 8001464:	60f8      	str	r0, [r7, #12]
 8001466:	60b9      	str	r1, [r7, #8]
 8001468:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 800146a:	68ba      	ldr	r2, [r7, #8]
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	1ad3      	subs	r3, r2, r3
    }
 8001470:	4618      	mov	r0, r3
 8001472:	3714      	adds	r7, #20
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <_Z41__static_initialization_and_destruction_0ii>:
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2b01      	cmp	r3, #1
 800148a:	d109      	bne.n	80014a0 <_Z41__static_initialization_and_destruction_0ii+0x24>
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001492:	4293      	cmp	r3, r2
 8001494:	d104      	bne.n	80014a0 <_Z41__static_initialization_and_destruction_0ii+0x24>
 8001496:	f000 f833 	bl	8001500 <_ZN4Vesp10getprinterEv>
 800149a:	4603      	mov	r3, r0
 800149c:	4a02      	ldr	r2, [pc, #8]	; (80014a8 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 800149e:	6013      	str	r3, [r2, #0]
 80014a0:	bf00      	nop
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	200001ec 	.word	0x200001ec

080014ac <_GLOBAL__sub_I__ZN7mpu6000C2E19__SPI_HandleTypeDeftP12GPIO_TypeDef>:
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80014b4:	2001      	movs	r0, #1
 80014b6:	f7ff ffe1 	bl	800147c <_Z41__static_initialization_and_destruction_0ii>
 80014ba:	bd80      	pop	{r7, pc}

080014bc <_ZN7printer13get_singletonEv>:
	static printer *get_singleton(void){
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
		return singleton;
 80014c0:	4b03      	ldr	r3, [pc, #12]	; (80014d0 <_ZN7printer13get_singletonEv+0x14>)
 80014c2:	681b      	ldr	r3, [r3, #0]
	}
 80014c4:	4618      	mov	r0, r3
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	200001f0 	.word	0x200001f0

080014d4 <_ZN7printer3logENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
 *      Author: giovannirasera
 */

#include "printer.h"

void printer::log(std::string toprint){
 80014d4:	b590      	push	{r4, r7, lr}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
	CDC_Transmit_FS((uint8_t *)toprint.c_str(), toprint.length());
 80014de:	6838      	ldr	r0, [r7, #0]
 80014e0:	f00a fcb0 	bl	800be44 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80014e4:	4604      	mov	r4, r0
 80014e6:	6838      	ldr	r0, [r7, #0]
 80014e8:	f00a fc6e 	bl	800bdc8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 80014ec:	4603      	mov	r3, r0
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	4619      	mov	r1, r3
 80014f2:	4620      	mov	r0, r4
 80014f4:	f009 ff10 	bl	800b318 <CDC_Transmit_FS>
}
 80014f8:	bf00      	nop
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd90      	pop	{r4, r7, pc}

08001500 <_ZN4Vesp10getprinterEv>:

namespace Vesp{
	printer &getprinter(){
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
		return *printer::get_singleton();
 8001504:	f7ff ffda 	bl	80014bc <_ZN7printer13get_singletonEv>
 8001508:	4603      	mov	r3, r0
	}
 800150a:	4618      	mov	r0, r3
 800150c:	bd80      	pop	{r7, pc}
	...

08001510 <_Z41__static_initialization_and_destruction_0ii>:

};
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2b01      	cmp	r3, #1
 800151e:	d109      	bne.n	8001534 <_Z41__static_initialization_and_destruction_0ii+0x24>
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001526:	4293      	cmp	r3, r2
 8001528:	d104      	bne.n	8001534 <_Z41__static_initialization_and_destruction_0ii+0x24>
	static printer& console = getprinter();
 800152a:	f7ff ffe9 	bl	8001500 <_ZN4Vesp10getprinterEv>
 800152e:	4603      	mov	r3, r0
 8001530:	4a02      	ldr	r2, [pc, #8]	; (800153c <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8001532:	6013      	str	r3, [r2, #0]
 8001534:	bf00      	nop
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	200001f4 	.word	0x200001f4

08001540 <_GLOBAL__sub_I__ZN7printer3logENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
 8001544:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001548:	2001      	movs	r0, #1
 800154a:	f7ff ffe1 	bl	8001510 <_Z41__static_initialization_and_destruction_0ii>
 800154e:	bd80      	pop	{r7, pc}

08001550 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	607b      	str	r3, [r7, #4]
 800155a:	4b12      	ldr	r3, [pc, #72]	; (80015a4 <HAL_MspInit+0x54>)
 800155c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155e:	4a11      	ldr	r2, [pc, #68]	; (80015a4 <HAL_MspInit+0x54>)
 8001560:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001564:	6453      	str	r3, [r2, #68]	; 0x44
 8001566:	4b0f      	ldr	r3, [pc, #60]	; (80015a4 <HAL_MspInit+0x54>)
 8001568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800156e:	607b      	str	r3, [r7, #4]
 8001570:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	603b      	str	r3, [r7, #0]
 8001576:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <HAL_MspInit+0x54>)
 8001578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157a:	4a0a      	ldr	r2, [pc, #40]	; (80015a4 <HAL_MspInit+0x54>)
 800157c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001580:	6413      	str	r3, [r2, #64]	; 0x40
 8001582:	4b08      	ldr	r3, [pc, #32]	; (80015a4 <HAL_MspInit+0x54>)
 8001584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800158a:	603b      	str	r3, [r7, #0]
 800158c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800158e:	2200      	movs	r2, #0
 8001590:	210f      	movs	r1, #15
 8001592:	f06f 0001 	mvn.w	r0, #1
 8001596:	f000 faa7 	bl	8001ae8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800159a:	bf00      	nop
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40023800 	.word	0x40023800

080015a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b08a      	sub	sp, #40	; 0x28
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b0:	f107 0314 	add.w	r3, r7, #20
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a19      	ldr	r2, [pc, #100]	; (800162c <HAL_SPI_MspInit+0x84>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d12b      	bne.n	8001622 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	613b      	str	r3, [r7, #16]
 80015ce:	4b18      	ldr	r3, [pc, #96]	; (8001630 <HAL_SPI_MspInit+0x88>)
 80015d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d2:	4a17      	ldr	r2, [pc, #92]	; (8001630 <HAL_SPI_MspInit+0x88>)
 80015d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015d8:	6453      	str	r3, [r2, #68]	; 0x44
 80015da:	4b15      	ldr	r3, [pc, #84]	; (8001630 <HAL_SPI_MspInit+0x88>)
 80015dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015e2:	613b      	str	r3, [r7, #16]
 80015e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	4b11      	ldr	r3, [pc, #68]	; (8001630 <HAL_SPI_MspInit+0x88>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	4a10      	ldr	r2, [pc, #64]	; (8001630 <HAL_SPI_MspInit+0x88>)
 80015f0:	f043 0301 	orr.w	r3, r3, #1
 80015f4:	6313      	str	r3, [r2, #48]	; 0x30
 80015f6:	4b0e      	ldr	r3, [pc, #56]	; (8001630 <HAL_SPI_MspInit+0x88>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001602:	23e0      	movs	r3, #224	; 0xe0
 8001604:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001606:	2302      	movs	r3, #2
 8001608:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800160e:	2303      	movs	r3, #3
 8001610:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001612:	2305      	movs	r3, #5
 8001614:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001616:	f107 0314 	add.w	r3, r7, #20
 800161a:	4619      	mov	r1, r3
 800161c:	4805      	ldr	r0, [pc, #20]	; (8001634 <HAL_SPI_MspInit+0x8c>)
 800161e:	f000 fa8d 	bl	8001b3c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001622:	bf00      	nop
 8001624:	3728      	adds	r7, #40	; 0x28
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40013000 	.word	0x40013000
 8001630:	40023800 	.word	0x40023800
 8001634:	40020000 	.word	0x40020000

08001638 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b08e      	sub	sp, #56	; 0x38
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001640:	2300      	movs	r3, #0
 8001642:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001644:	2300      	movs	r3, #0
 8001646:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001648:	2300      	movs	r3, #0
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	4b33      	ldr	r3, [pc, #204]	; (800171c <HAL_InitTick+0xe4>)
 800164e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001650:	4a32      	ldr	r2, [pc, #200]	; (800171c <HAL_InitTick+0xe4>)
 8001652:	f043 0310 	orr.w	r3, r3, #16
 8001656:	6413      	str	r3, [r2, #64]	; 0x40
 8001658:	4b30      	ldr	r3, [pc, #192]	; (800171c <HAL_InitTick+0xe4>)
 800165a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165c:	f003 0310 	and.w	r3, r3, #16
 8001660:	60fb      	str	r3, [r7, #12]
 8001662:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001664:	f107 0210 	add.w	r2, r7, #16
 8001668:	f107 0314 	add.w	r3, r7, #20
 800166c:	4611      	mov	r1, r2
 800166e:	4618      	mov	r0, r3
 8001670:	f002 fb34 	bl	8003cdc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001674:	6a3b      	ldr	r3, [r7, #32]
 8001676:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800167a:	2b00      	cmp	r3, #0
 800167c:	d103      	bne.n	8001686 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800167e:	f002 fb19 	bl	8003cb4 <HAL_RCC_GetPCLK1Freq>
 8001682:	6378      	str	r0, [r7, #52]	; 0x34
 8001684:	e004      	b.n	8001690 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001686:	f002 fb15 	bl	8003cb4 <HAL_RCC_GetPCLK1Freq>
 800168a:	4603      	mov	r3, r0
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001692:	4a23      	ldr	r2, [pc, #140]	; (8001720 <HAL_InitTick+0xe8>)
 8001694:	fba2 2303 	umull	r2, r3, r2, r3
 8001698:	0c9b      	lsrs	r3, r3, #18
 800169a:	3b01      	subs	r3, #1
 800169c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800169e:	4b21      	ldr	r3, [pc, #132]	; (8001724 <HAL_InitTick+0xec>)
 80016a0:	4a21      	ldr	r2, [pc, #132]	; (8001728 <HAL_InitTick+0xf0>)
 80016a2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80016a4:	4b1f      	ldr	r3, [pc, #124]	; (8001724 <HAL_InitTick+0xec>)
 80016a6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016aa:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80016ac:	4a1d      	ldr	r2, [pc, #116]	; (8001724 <HAL_InitTick+0xec>)
 80016ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016b0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80016b2:	4b1c      	ldr	r3, [pc, #112]	; (8001724 <HAL_InitTick+0xec>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b8:	4b1a      	ldr	r3, [pc, #104]	; (8001724 <HAL_InitTick+0xec>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016be:	4b19      	ldr	r3, [pc, #100]	; (8001724 <HAL_InitTick+0xec>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80016c4:	4817      	ldr	r0, [pc, #92]	; (8001724 <HAL_InitTick+0xec>)
 80016c6:	f003 f8e3 	bl	8004890 <HAL_TIM_Base_Init>
 80016ca:	4603      	mov	r3, r0
 80016cc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80016d0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d11b      	bne.n	8001710 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80016d8:	4812      	ldr	r0, [pc, #72]	; (8001724 <HAL_InitTick+0xec>)
 80016da:	f003 f933 	bl	8004944 <HAL_TIM_Base_Start_IT>
 80016de:	4603      	mov	r3, r0
 80016e0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80016e4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d111      	bne.n	8001710 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80016ec:	2036      	movs	r0, #54	; 0x36
 80016ee:	f000 fa17 	bl	8001b20 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2b0f      	cmp	r3, #15
 80016f6:	d808      	bhi.n	800170a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80016f8:	2200      	movs	r2, #0
 80016fa:	6879      	ldr	r1, [r7, #4]
 80016fc:	2036      	movs	r0, #54	; 0x36
 80016fe:	f000 f9f3 	bl	8001ae8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001702:	4a0a      	ldr	r2, [pc, #40]	; (800172c <HAL_InitTick+0xf4>)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6013      	str	r3, [r2, #0]
 8001708:	e002      	b.n	8001710 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001710:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001714:	4618      	mov	r0, r3
 8001716:	3738      	adds	r7, #56	; 0x38
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	40023800 	.word	0x40023800
 8001720:	431bde83 	.word	0x431bde83
 8001724:	200001f8 	.word	0x200001f8
 8001728:	40001000 	.word	0x40001000
 800172c:	20000004 	.word	0x20000004

08001730 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001734:	e7fe      	b.n	8001734 <NMI_Handler+0x4>

08001736 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001736:	b480      	push	{r7}
 8001738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800173a:	e7fe      	b.n	800173a <HardFault_Handler+0x4>

0800173c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001740:	e7fe      	b.n	8001740 <MemManage_Handler+0x4>

08001742 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001742:	b480      	push	{r7}
 8001744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001746:	e7fe      	b.n	8001746 <BusFault_Handler+0x4>

08001748 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800174c:	e7fe      	b.n	800174c <UsageFault_Handler+0x4>

0800174e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800174e:	b480      	push	{r7}
 8001750:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001760:	4802      	ldr	r0, [pc, #8]	; (800176c <TIM6_DAC_IRQHandler+0x10>)
 8001762:	f003 f95f 	bl	8004a24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	200001f8 	.word	0x200001f8

08001770 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001774:	4802      	ldr	r0, [pc, #8]	; (8001780 <OTG_FS_IRQHandler+0x10>)
 8001776:	f000 fd00 	bl	800217a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	20006138 	.word	0x20006138

08001784 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
	return 1;
 8001788:	2301      	movs	r3, #1
}
 800178a:	4618      	mov	r0, r3
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <_kill>:

int _kill(int pid, int sig)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800179e:	f00a fbb1 	bl	800bf04 <__errno>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2216      	movs	r2, #22
 80017a6:	601a      	str	r2, [r3, #0]
	return -1;
 80017a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <_exit>:

void _exit (int status)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80017bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f7ff ffe7 	bl	8001794 <_kill>
	while (1) {}		/* Make sure we hang here */
 80017c6:	e7fe      	b.n	80017c6 <_exit+0x12>

080017c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b086      	sub	sp, #24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017d0:	4a14      	ldr	r2, [pc, #80]	; (8001824 <_sbrk+0x5c>)
 80017d2:	4b15      	ldr	r3, [pc, #84]	; (8001828 <_sbrk+0x60>)
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017dc:	4b13      	ldr	r3, [pc, #76]	; (800182c <_sbrk+0x64>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d102      	bne.n	80017ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017e4:	4b11      	ldr	r3, [pc, #68]	; (800182c <_sbrk+0x64>)
 80017e6:	4a12      	ldr	r2, [pc, #72]	; (8001830 <_sbrk+0x68>)
 80017e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017ea:	4b10      	ldr	r3, [pc, #64]	; (800182c <_sbrk+0x64>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4413      	add	r3, r2
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d207      	bcs.n	8001808 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017f8:	f00a fb84 	bl	800bf04 <__errno>
 80017fc:	4603      	mov	r3, r0
 80017fe:	220c      	movs	r2, #12
 8001800:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001802:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001806:	e009      	b.n	800181c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001808:	4b08      	ldr	r3, [pc, #32]	; (800182c <_sbrk+0x64>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800180e:	4b07      	ldr	r3, [pc, #28]	; (800182c <_sbrk+0x64>)
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4413      	add	r3, r2
 8001816:	4a05      	ldr	r2, [pc, #20]	; (800182c <_sbrk+0x64>)
 8001818:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800181a:	68fb      	ldr	r3, [r7, #12]
}
 800181c:	4618      	mov	r0, r3
 800181e:	3718      	adds	r7, #24
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	20020000 	.word	0x20020000
 8001828:	00000400 	.word	0x00000400
 800182c:	20000240 	.word	0x20000240
 8001830:	20006878 	.word	0x20006878

08001834 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001838:	4b06      	ldr	r3, [pc, #24]	; (8001854 <SystemInit+0x20>)
 800183a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800183e:	4a05      	ldr	r2, [pc, #20]	; (8001854 <SystemInit+0x20>)
 8001840:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001844:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001848:	bf00      	nop
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	e000ed00 	.word	0xe000ed00

08001858 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001858:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001890 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800185c:	480d      	ldr	r0, [pc, #52]	; (8001894 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800185e:	490e      	ldr	r1, [pc, #56]	; (8001898 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001860:	4a0e      	ldr	r2, [pc, #56]	; (800189c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001862:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001864:	e002      	b.n	800186c <LoopCopyDataInit>

08001866 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001866:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001868:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800186a:	3304      	adds	r3, #4

0800186c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800186c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800186e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001870:	d3f9      	bcc.n	8001866 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001872:	4a0b      	ldr	r2, [pc, #44]	; (80018a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001874:	4c0b      	ldr	r4, [pc, #44]	; (80018a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001876:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001878:	e001      	b.n	800187e <LoopFillZerobss>

0800187a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800187a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800187c:	3204      	adds	r2, #4

0800187e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800187e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001880:	d3fb      	bcc.n	800187a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001882:	f7ff ffd7 	bl	8001834 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001886:	f00a fb43 	bl	800bf10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800188a:	f7ff f837 	bl	80008fc <main>
  bx  lr    
 800188e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001890:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001894:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001898:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 800189c:	0800cd80 	.word	0x0800cd80
  ldr r2, =_sbss
 80018a0:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 80018a4:	20006878 	.word	0x20006878

080018a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018a8:	e7fe      	b.n	80018a8 <ADC_IRQHandler>
	...

080018ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018b0:	4b0e      	ldr	r3, [pc, #56]	; (80018ec <HAL_Init+0x40>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a0d      	ldr	r2, [pc, #52]	; (80018ec <HAL_Init+0x40>)
 80018b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018bc:	4b0b      	ldr	r3, [pc, #44]	; (80018ec <HAL_Init+0x40>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a0a      	ldr	r2, [pc, #40]	; (80018ec <HAL_Init+0x40>)
 80018c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018c8:	4b08      	ldr	r3, [pc, #32]	; (80018ec <HAL_Init+0x40>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a07      	ldr	r2, [pc, #28]	; (80018ec <HAL_Init+0x40>)
 80018ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018d4:	2003      	movs	r0, #3
 80018d6:	f000 f8fc 	bl	8001ad2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018da:	200f      	movs	r0, #15
 80018dc:	f7ff feac 	bl	8001638 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018e0:	f7ff fe36 	bl	8001550 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40023c00 	.word	0x40023c00

080018f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018f4:	4b06      	ldr	r3, [pc, #24]	; (8001910 <HAL_IncTick+0x20>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	461a      	mov	r2, r3
 80018fa:	4b06      	ldr	r3, [pc, #24]	; (8001914 <HAL_IncTick+0x24>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4413      	add	r3, r2
 8001900:	4a04      	ldr	r2, [pc, #16]	; (8001914 <HAL_IncTick+0x24>)
 8001902:	6013      	str	r3, [r2, #0]
}
 8001904:	bf00      	nop
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	20000008 	.word	0x20000008
 8001914:	20000244 	.word	0x20000244

08001918 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  return uwTick;
 800191c:	4b03      	ldr	r3, [pc, #12]	; (800192c <HAL_GetTick+0x14>)
 800191e:	681b      	ldr	r3, [r3, #0]
}
 8001920:	4618      	mov	r0, r3
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	20000244 	.word	0x20000244

08001930 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001938:	f7ff ffee 	bl	8001918 <HAL_GetTick>
 800193c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001948:	d005      	beq.n	8001956 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800194a:	4b0a      	ldr	r3, [pc, #40]	; (8001974 <HAL_Delay+0x44>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	461a      	mov	r2, r3
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	4413      	add	r3, r2
 8001954:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001956:	bf00      	nop
 8001958:	f7ff ffde 	bl	8001918 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	68fa      	ldr	r2, [r7, #12]
 8001964:	429a      	cmp	r2, r3
 8001966:	d8f7      	bhi.n	8001958 <HAL_Delay+0x28>
  {
  }
}
 8001968:	bf00      	nop
 800196a:	bf00      	nop
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	20000008 	.word	0x20000008

08001978 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f003 0307 	and.w	r3, r3, #7
 8001986:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001988:	4b0c      	ldr	r3, [pc, #48]	; (80019bc <__NVIC_SetPriorityGrouping+0x44>)
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800198e:	68ba      	ldr	r2, [r7, #8]
 8001990:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001994:	4013      	ands	r3, r2
 8001996:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019aa:	4a04      	ldr	r2, [pc, #16]	; (80019bc <__NVIC_SetPriorityGrouping+0x44>)
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	60d3      	str	r3, [r2, #12]
}
 80019b0:	bf00      	nop
 80019b2:	3714      	adds	r7, #20
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr
 80019bc:	e000ed00 	.word	0xe000ed00

080019c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019c4:	4b04      	ldr	r3, [pc, #16]	; (80019d8 <__NVIC_GetPriorityGrouping+0x18>)
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	0a1b      	lsrs	r3, r3, #8
 80019ca:	f003 0307 	and.w	r3, r3, #7
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	e000ed00 	.word	0xe000ed00

080019dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	db0b      	blt.n	8001a06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ee:	79fb      	ldrb	r3, [r7, #7]
 80019f0:	f003 021f 	and.w	r2, r3, #31
 80019f4:	4907      	ldr	r1, [pc, #28]	; (8001a14 <__NVIC_EnableIRQ+0x38>)
 80019f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fa:	095b      	lsrs	r3, r3, #5
 80019fc:	2001      	movs	r0, #1
 80019fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a06:	bf00      	nop
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	e000e100 	.word	0xe000e100

08001a18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	4603      	mov	r3, r0
 8001a20:	6039      	str	r1, [r7, #0]
 8001a22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	db0a      	blt.n	8001a42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	b2da      	uxtb	r2, r3
 8001a30:	490c      	ldr	r1, [pc, #48]	; (8001a64 <__NVIC_SetPriority+0x4c>)
 8001a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a36:	0112      	lsls	r2, r2, #4
 8001a38:	b2d2      	uxtb	r2, r2
 8001a3a:	440b      	add	r3, r1
 8001a3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a40:	e00a      	b.n	8001a58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	b2da      	uxtb	r2, r3
 8001a46:	4908      	ldr	r1, [pc, #32]	; (8001a68 <__NVIC_SetPriority+0x50>)
 8001a48:	79fb      	ldrb	r3, [r7, #7]
 8001a4a:	f003 030f 	and.w	r3, r3, #15
 8001a4e:	3b04      	subs	r3, #4
 8001a50:	0112      	lsls	r2, r2, #4
 8001a52:	b2d2      	uxtb	r2, r2
 8001a54:	440b      	add	r3, r1
 8001a56:	761a      	strb	r2, [r3, #24]
}
 8001a58:	bf00      	nop
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	e000e100 	.word	0xe000e100
 8001a68:	e000ed00 	.word	0xe000ed00

08001a6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b089      	sub	sp, #36	; 0x24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f003 0307 	and.w	r3, r3, #7
 8001a7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	f1c3 0307 	rsb	r3, r3, #7
 8001a86:	2b04      	cmp	r3, #4
 8001a88:	bf28      	it	cs
 8001a8a:	2304      	movcs	r3, #4
 8001a8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	3304      	adds	r3, #4
 8001a92:	2b06      	cmp	r3, #6
 8001a94:	d902      	bls.n	8001a9c <NVIC_EncodePriority+0x30>
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	3b03      	subs	r3, #3
 8001a9a:	e000      	b.n	8001a9e <NVIC_EncodePriority+0x32>
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aaa:	43da      	mvns	r2, r3
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	401a      	ands	r2, r3
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ab4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	fa01 f303 	lsl.w	r3, r1, r3
 8001abe:	43d9      	mvns	r1, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac4:	4313      	orrs	r3, r2
         );
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3724      	adds	r7, #36	; 0x24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr

08001ad2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b082      	sub	sp, #8
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7ff ff4c 	bl	8001978 <__NVIC_SetPriorityGrouping>
}
 8001ae0:	bf00      	nop
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
 8001af4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001af6:	2300      	movs	r3, #0
 8001af8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001afa:	f7ff ff61 	bl	80019c0 <__NVIC_GetPriorityGrouping>
 8001afe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	68b9      	ldr	r1, [r7, #8]
 8001b04:	6978      	ldr	r0, [r7, #20]
 8001b06:	f7ff ffb1 	bl	8001a6c <NVIC_EncodePriority>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b10:	4611      	mov	r1, r2
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff ff80 	bl	8001a18 <__NVIC_SetPriority>
}
 8001b18:	bf00      	nop
 8001b1a:	3718      	adds	r7, #24
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	4603      	mov	r3, r0
 8001b28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff ff54 	bl	80019dc <__NVIC_EnableIRQ>
}
 8001b34:	bf00      	nop
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b089      	sub	sp, #36	; 0x24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b46:	2300      	movs	r3, #0
 8001b48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b52:	2300      	movs	r3, #0
 8001b54:	61fb      	str	r3, [r7, #28]
 8001b56:	e16b      	b.n	8001e30 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b58:	2201      	movs	r2, #1
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	697a      	ldr	r2, [r7, #20]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b6c:	693a      	ldr	r2, [r7, #16]
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	f040 815a 	bne.w	8001e2a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f003 0303 	and.w	r3, r3, #3
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d005      	beq.n	8001b8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d130      	bne.n	8001bf0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	2203      	movs	r2, #3
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	43db      	mvns	r3, r3
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	68da      	ldr	r2, [r3, #12]
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	091b      	lsrs	r3, r3, #4
 8001bda:	f003 0201 	and.w	r2, r3, #1
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f003 0303 	and.w	r3, r3, #3
 8001bf8:	2b03      	cmp	r3, #3
 8001bfa:	d017      	beq.n	8001c2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	2203      	movs	r2, #3
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	43db      	mvns	r3, r3
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	4013      	ands	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	689a      	ldr	r2, [r3, #8]
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f003 0303 	and.w	r3, r3, #3
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d123      	bne.n	8001c80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	08da      	lsrs	r2, r3, #3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	3208      	adds	r2, #8
 8001c40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	f003 0307 	and.w	r3, r3, #7
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	220f      	movs	r2, #15
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	43db      	mvns	r3, r3
 8001c56:	69ba      	ldr	r2, [r7, #24]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	691a      	ldr	r2, [r3, #16]
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	f003 0307 	and.w	r3, r3, #7
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	08da      	lsrs	r2, r3, #3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	3208      	adds	r2, #8
 8001c7a:	69b9      	ldr	r1, [r7, #24]
 8001c7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	2203      	movs	r2, #3
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	43db      	mvns	r3, r3
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	4013      	ands	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f003 0203 	and.w	r2, r3, #3
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	f000 80b4 	beq.w	8001e2a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60fb      	str	r3, [r7, #12]
 8001cc6:	4b60      	ldr	r3, [pc, #384]	; (8001e48 <HAL_GPIO_Init+0x30c>)
 8001cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cca:	4a5f      	ldr	r2, [pc, #380]	; (8001e48 <HAL_GPIO_Init+0x30c>)
 8001ccc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cd0:	6453      	str	r3, [r2, #68]	; 0x44
 8001cd2:	4b5d      	ldr	r3, [pc, #372]	; (8001e48 <HAL_GPIO_Init+0x30c>)
 8001cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cde:	4a5b      	ldr	r2, [pc, #364]	; (8001e4c <HAL_GPIO_Init+0x310>)
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	089b      	lsrs	r3, r3, #2
 8001ce4:	3302      	adds	r3, #2
 8001ce6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	f003 0303 	and.w	r3, r3, #3
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	220f      	movs	r2, #15
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	43db      	mvns	r3, r3
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a52      	ldr	r2, [pc, #328]	; (8001e50 <HAL_GPIO_Init+0x314>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d02b      	beq.n	8001d62 <HAL_GPIO_Init+0x226>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a51      	ldr	r2, [pc, #324]	; (8001e54 <HAL_GPIO_Init+0x318>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d025      	beq.n	8001d5e <HAL_GPIO_Init+0x222>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a50      	ldr	r2, [pc, #320]	; (8001e58 <HAL_GPIO_Init+0x31c>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d01f      	beq.n	8001d5a <HAL_GPIO_Init+0x21e>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a4f      	ldr	r2, [pc, #316]	; (8001e5c <HAL_GPIO_Init+0x320>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d019      	beq.n	8001d56 <HAL_GPIO_Init+0x21a>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a4e      	ldr	r2, [pc, #312]	; (8001e60 <HAL_GPIO_Init+0x324>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d013      	beq.n	8001d52 <HAL_GPIO_Init+0x216>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a4d      	ldr	r2, [pc, #308]	; (8001e64 <HAL_GPIO_Init+0x328>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d00d      	beq.n	8001d4e <HAL_GPIO_Init+0x212>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a4c      	ldr	r2, [pc, #304]	; (8001e68 <HAL_GPIO_Init+0x32c>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d007      	beq.n	8001d4a <HAL_GPIO_Init+0x20e>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a4b      	ldr	r2, [pc, #300]	; (8001e6c <HAL_GPIO_Init+0x330>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d101      	bne.n	8001d46 <HAL_GPIO_Init+0x20a>
 8001d42:	2307      	movs	r3, #7
 8001d44:	e00e      	b.n	8001d64 <HAL_GPIO_Init+0x228>
 8001d46:	2308      	movs	r3, #8
 8001d48:	e00c      	b.n	8001d64 <HAL_GPIO_Init+0x228>
 8001d4a:	2306      	movs	r3, #6
 8001d4c:	e00a      	b.n	8001d64 <HAL_GPIO_Init+0x228>
 8001d4e:	2305      	movs	r3, #5
 8001d50:	e008      	b.n	8001d64 <HAL_GPIO_Init+0x228>
 8001d52:	2304      	movs	r3, #4
 8001d54:	e006      	b.n	8001d64 <HAL_GPIO_Init+0x228>
 8001d56:	2303      	movs	r3, #3
 8001d58:	e004      	b.n	8001d64 <HAL_GPIO_Init+0x228>
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	e002      	b.n	8001d64 <HAL_GPIO_Init+0x228>
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e000      	b.n	8001d64 <HAL_GPIO_Init+0x228>
 8001d62:	2300      	movs	r3, #0
 8001d64:	69fa      	ldr	r2, [r7, #28]
 8001d66:	f002 0203 	and.w	r2, r2, #3
 8001d6a:	0092      	lsls	r2, r2, #2
 8001d6c:	4093      	lsls	r3, r2
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d74:	4935      	ldr	r1, [pc, #212]	; (8001e4c <HAL_GPIO_Init+0x310>)
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	089b      	lsrs	r3, r3, #2
 8001d7a:	3302      	adds	r3, #2
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d82:	4b3b      	ldr	r3, [pc, #236]	; (8001e70 <HAL_GPIO_Init+0x334>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	43db      	mvns	r3, r3
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	4013      	ands	r3, r2
 8001d90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d003      	beq.n	8001da6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001da6:	4a32      	ldr	r2, [pc, #200]	; (8001e70 <HAL_GPIO_Init+0x334>)
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dac:	4b30      	ldr	r3, [pc, #192]	; (8001e70 <HAL_GPIO_Init+0x334>)
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	43db      	mvns	r3, r3
 8001db6:	69ba      	ldr	r2, [r7, #24]
 8001db8:	4013      	ands	r3, r2
 8001dba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d003      	beq.n	8001dd0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dd0:	4a27      	ldr	r2, [pc, #156]	; (8001e70 <HAL_GPIO_Init+0x334>)
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001dd6:	4b26      	ldr	r3, [pc, #152]	; (8001e70 <HAL_GPIO_Init+0x334>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	43db      	mvns	r3, r3
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	4013      	ands	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d003      	beq.n	8001dfa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dfa:	4a1d      	ldr	r2, [pc, #116]	; (8001e70 <HAL_GPIO_Init+0x334>)
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e00:	4b1b      	ldr	r3, [pc, #108]	; (8001e70 <HAL_GPIO_Init+0x334>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d003      	beq.n	8001e24 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e24:	4a12      	ldr	r2, [pc, #72]	; (8001e70 <HAL_GPIO_Init+0x334>)
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	61fb      	str	r3, [r7, #28]
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	2b0f      	cmp	r3, #15
 8001e34:	f67f ae90 	bls.w	8001b58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e38:	bf00      	nop
 8001e3a:	bf00      	nop
 8001e3c:	3724      	adds	r7, #36	; 0x24
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	40023800 	.word	0x40023800
 8001e4c:	40013800 	.word	0x40013800
 8001e50:	40020000 	.word	0x40020000
 8001e54:	40020400 	.word	0x40020400
 8001e58:	40020800 	.word	0x40020800
 8001e5c:	40020c00 	.word	0x40020c00
 8001e60:	40021000 	.word	0x40021000
 8001e64:	40021400 	.word	0x40021400
 8001e68:	40021800 	.word	0x40021800
 8001e6c:	40021c00 	.word	0x40021c00
 8001e70:	40013c00 	.word	0x40013c00

08001e74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	807b      	strh	r3, [r7, #2]
 8001e80:	4613      	mov	r3, r2
 8001e82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e84:	787b      	ldrb	r3, [r7, #1]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d003      	beq.n	8001e92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e8a:	887a      	ldrh	r2, [r7, #2]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e90:	e003      	b.n	8001e9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e92:	887b      	ldrh	r3, [r7, #2]
 8001e94:	041a      	lsls	r2, r3, #16
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	619a      	str	r2, [r3, #24]
}
 8001e9a:	bf00      	nop
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr

08001ea6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	b085      	sub	sp, #20
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
 8001eae:	460b      	mov	r3, r1
 8001eb0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	695b      	ldr	r3, [r3, #20]
 8001eb6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001eb8:	887a      	ldrh	r2, [r7, #2]
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	041a      	lsls	r2, r3, #16
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	43d9      	mvns	r1, r3
 8001ec4:	887b      	ldrh	r3, [r7, #2]
 8001ec6:	400b      	ands	r3, r1
 8001ec8:	431a      	orrs	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	619a      	str	r2, [r3, #24]
}
 8001ece:	bf00      	nop
 8001ed0:	3714      	adds	r7, #20
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr

08001eda <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001eda:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001edc:	b08f      	sub	sp, #60	; 0x3c
 8001ede:	af0a      	add	r7, sp, #40	; 0x28
 8001ee0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d101      	bne.n	8001eec <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e10f      	b.n	800210c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d106      	bne.n	8001f0c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f009 fb4e 	bl	800b5a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2203      	movs	r2, #3
 8001f10:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d102      	bne.n	8001f26 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f003 f873 	bl	8005016 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	603b      	str	r3, [r7, #0]
 8001f36:	687e      	ldr	r6, [r7, #4]
 8001f38:	466d      	mov	r5, sp
 8001f3a:	f106 0410 	add.w	r4, r6, #16
 8001f3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f46:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f4a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f4e:	1d33      	adds	r3, r6, #4
 8001f50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f52:	6838      	ldr	r0, [r7, #0]
 8001f54:	f002 ff4a 	bl	8004dec <USB_CoreInit>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d005      	beq.n	8001f6a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2202      	movs	r2, #2
 8001f62:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e0d0      	b.n	800210c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2100      	movs	r1, #0
 8001f70:	4618      	mov	r0, r3
 8001f72:	f003 f861 	bl	8005038 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f76:	2300      	movs	r3, #0
 8001f78:	73fb      	strb	r3, [r7, #15]
 8001f7a:	e04a      	b.n	8002012 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f7c:	7bfa      	ldrb	r2, [r7, #15]
 8001f7e:	6879      	ldr	r1, [r7, #4]
 8001f80:	4613      	mov	r3, r2
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	4413      	add	r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	440b      	add	r3, r1
 8001f8a:	333d      	adds	r3, #61	; 0x3d
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f90:	7bfa      	ldrb	r2, [r7, #15]
 8001f92:	6879      	ldr	r1, [r7, #4]
 8001f94:	4613      	mov	r3, r2
 8001f96:	00db      	lsls	r3, r3, #3
 8001f98:	4413      	add	r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	440b      	add	r3, r1
 8001f9e:	333c      	adds	r3, #60	; 0x3c
 8001fa0:	7bfa      	ldrb	r2, [r7, #15]
 8001fa2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001fa4:	7bfa      	ldrb	r2, [r7, #15]
 8001fa6:	7bfb      	ldrb	r3, [r7, #15]
 8001fa8:	b298      	uxth	r0, r3
 8001faa:	6879      	ldr	r1, [r7, #4]
 8001fac:	4613      	mov	r3, r2
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	4413      	add	r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	440b      	add	r3, r1
 8001fb6:	3344      	adds	r3, #68	; 0x44
 8001fb8:	4602      	mov	r2, r0
 8001fba:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001fbc:	7bfa      	ldrb	r2, [r7, #15]
 8001fbe:	6879      	ldr	r1, [r7, #4]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	00db      	lsls	r3, r3, #3
 8001fc4:	4413      	add	r3, r2
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	440b      	add	r3, r1
 8001fca:	3340      	adds	r3, #64	; 0x40
 8001fcc:	2200      	movs	r2, #0
 8001fce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001fd0:	7bfa      	ldrb	r2, [r7, #15]
 8001fd2:	6879      	ldr	r1, [r7, #4]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	4413      	add	r3, r2
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	440b      	add	r3, r1
 8001fde:	3348      	adds	r3, #72	; 0x48
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001fe4:	7bfa      	ldrb	r2, [r7, #15]
 8001fe6:	6879      	ldr	r1, [r7, #4]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	4413      	add	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	440b      	add	r3, r1
 8001ff2:	334c      	adds	r3, #76	; 0x4c
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ff8:	7bfa      	ldrb	r2, [r7, #15]
 8001ffa:	6879      	ldr	r1, [r7, #4]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	00db      	lsls	r3, r3, #3
 8002000:	4413      	add	r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	440b      	add	r3, r1
 8002006:	3354      	adds	r3, #84	; 0x54
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800200c:	7bfb      	ldrb	r3, [r7, #15]
 800200e:	3301      	adds	r3, #1
 8002010:	73fb      	strb	r3, [r7, #15]
 8002012:	7bfa      	ldrb	r2, [r7, #15]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	429a      	cmp	r2, r3
 800201a:	d3af      	bcc.n	8001f7c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800201c:	2300      	movs	r3, #0
 800201e:	73fb      	strb	r3, [r7, #15]
 8002020:	e044      	b.n	80020ac <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002022:	7bfa      	ldrb	r2, [r7, #15]
 8002024:	6879      	ldr	r1, [r7, #4]
 8002026:	4613      	mov	r3, r2
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	4413      	add	r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	440b      	add	r3, r1
 8002030:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002034:	2200      	movs	r2, #0
 8002036:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002038:	7bfa      	ldrb	r2, [r7, #15]
 800203a:	6879      	ldr	r1, [r7, #4]
 800203c:	4613      	mov	r3, r2
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	4413      	add	r3, r2
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	440b      	add	r3, r1
 8002046:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800204a:	7bfa      	ldrb	r2, [r7, #15]
 800204c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800204e:	7bfa      	ldrb	r2, [r7, #15]
 8002050:	6879      	ldr	r1, [r7, #4]
 8002052:	4613      	mov	r3, r2
 8002054:	00db      	lsls	r3, r3, #3
 8002056:	4413      	add	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	440b      	add	r3, r1
 800205c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002060:	2200      	movs	r2, #0
 8002062:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002064:	7bfa      	ldrb	r2, [r7, #15]
 8002066:	6879      	ldr	r1, [r7, #4]
 8002068:	4613      	mov	r3, r2
 800206a:	00db      	lsls	r3, r3, #3
 800206c:	4413      	add	r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	440b      	add	r3, r1
 8002072:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002076:	2200      	movs	r2, #0
 8002078:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800207a:	7bfa      	ldrb	r2, [r7, #15]
 800207c:	6879      	ldr	r1, [r7, #4]
 800207e:	4613      	mov	r3, r2
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	4413      	add	r3, r2
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	440b      	add	r3, r1
 8002088:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002090:	7bfa      	ldrb	r2, [r7, #15]
 8002092:	6879      	ldr	r1, [r7, #4]
 8002094:	4613      	mov	r3, r2
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	4413      	add	r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	440b      	add	r3, r1
 800209e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80020a2:	2200      	movs	r2, #0
 80020a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020a6:	7bfb      	ldrb	r3, [r7, #15]
 80020a8:	3301      	adds	r3, #1
 80020aa:	73fb      	strb	r3, [r7, #15]
 80020ac:	7bfa      	ldrb	r2, [r7, #15]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d3b5      	bcc.n	8002022 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	603b      	str	r3, [r7, #0]
 80020bc:	687e      	ldr	r6, [r7, #4]
 80020be:	466d      	mov	r5, sp
 80020c0:	f106 0410 	add.w	r4, r6, #16
 80020c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020cc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020d0:	e885 0003 	stmia.w	r5, {r0, r1}
 80020d4:	1d33      	adds	r3, r6, #4
 80020d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020d8:	6838      	ldr	r0, [r7, #0]
 80020da:	f002 fff9 	bl	80050d0 <USB_DevInit>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d005      	beq.n	80020f0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2202      	movs	r2, #2
 80020e8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e00d      	b.n	800210c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4618      	mov	r0, r3
 8002106:	f004 f948 	bl	800639a <USB_DevDisconnect>

  return HAL_OK;
 800210a:	2300      	movs	r3, #0
}
 800210c:	4618      	mov	r0, r3
 800210e:	3714      	adds	r7, #20
 8002110:	46bd      	mov	sp, r7
 8002112:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002114 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002128:	2b01      	cmp	r3, #1
 800212a:	d101      	bne.n	8002130 <HAL_PCD_Start+0x1c>
 800212c:	2302      	movs	r3, #2
 800212e:	e020      	b.n	8002172 <HAL_PCD_Start+0x5e>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800213c:	2b01      	cmp	r3, #1
 800213e:	d109      	bne.n	8002154 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002144:	2b01      	cmp	r3, #1
 8002146:	d005      	beq.n	8002154 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800214c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4618      	mov	r0, r3
 800215a:	f002 ff4b 	bl	8004ff4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4618      	mov	r0, r3
 8002164:	f004 f8f8 	bl	8006358 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3710      	adds	r7, #16
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800217a:	b590      	push	{r4, r7, lr}
 800217c:	b08d      	sub	sp, #52	; 0x34
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002188:	6a3b      	ldr	r3, [r7, #32]
 800218a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4618      	mov	r0, r3
 8002192:	f004 f9b6 	bl	8006502 <USB_GetMode>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	f040 848a 	bne.w	8002ab2 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f004 f91a 	bl	80063dc <USB_ReadInterrupts>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	f000 8480 	beq.w	8002ab0 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	0a1b      	lsrs	r3, r3, #8
 80021ba:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f004 f907 	bl	80063dc <USB_ReadInterrupts>
 80021ce:	4603      	mov	r3, r0
 80021d0:	f003 0302 	and.w	r3, r3, #2
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d107      	bne.n	80021e8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	695a      	ldr	r2, [r3, #20]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f002 0202 	and.w	r2, r2, #2
 80021e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f004 f8f5 	bl	80063dc <USB_ReadInterrupts>
 80021f2:	4603      	mov	r3, r0
 80021f4:	f003 0310 	and.w	r3, r3, #16
 80021f8:	2b10      	cmp	r3, #16
 80021fa:	d161      	bne.n	80022c0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	699a      	ldr	r2, [r3, #24]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f022 0210 	bic.w	r2, r2, #16
 800220a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800220c:	6a3b      	ldr	r3, [r7, #32]
 800220e:	6a1b      	ldr	r3, [r3, #32]
 8002210:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	f003 020f 	and.w	r2, r3, #15
 8002218:	4613      	mov	r3, r2
 800221a:	00db      	lsls	r3, r3, #3
 800221c:	4413      	add	r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	4413      	add	r3, r2
 8002228:	3304      	adds	r3, #4
 800222a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	0c5b      	lsrs	r3, r3, #17
 8002230:	f003 030f 	and.w	r3, r3, #15
 8002234:	2b02      	cmp	r3, #2
 8002236:	d124      	bne.n	8002282 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800223e:	4013      	ands	r3, r2
 8002240:	2b00      	cmp	r3, #0
 8002242:	d035      	beq.n	80022b0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	091b      	lsrs	r3, r3, #4
 800224c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800224e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002252:	b29b      	uxth	r3, r3
 8002254:	461a      	mov	r2, r3
 8002256:	6a38      	ldr	r0, [r7, #32]
 8002258:	f003 ff2c 	bl	80060b4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	691a      	ldr	r2, [r3, #16]
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	091b      	lsrs	r3, r3, #4
 8002264:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002268:	441a      	add	r2, r3
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	6a1a      	ldr	r2, [r3, #32]
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	091b      	lsrs	r3, r3, #4
 8002276:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800227a:	441a      	add	r2, r3
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	621a      	str	r2, [r3, #32]
 8002280:	e016      	b.n	80022b0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	0c5b      	lsrs	r3, r3, #17
 8002286:	f003 030f 	and.w	r3, r3, #15
 800228a:	2b06      	cmp	r3, #6
 800228c:	d110      	bne.n	80022b0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002294:	2208      	movs	r2, #8
 8002296:	4619      	mov	r1, r3
 8002298:	6a38      	ldr	r0, [r7, #32]
 800229a:	f003 ff0b 	bl	80060b4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	6a1a      	ldr	r2, [r3, #32]
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	091b      	lsrs	r3, r3, #4
 80022a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022aa:	441a      	add	r2, r3
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	699a      	ldr	r2, [r3, #24]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f042 0210 	orr.w	r2, r2, #16
 80022be:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f004 f889 	bl	80063dc <USB_ReadInterrupts>
 80022ca:	4603      	mov	r3, r0
 80022cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022d0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80022d4:	f040 80a7 	bne.w	8002426 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80022d8:	2300      	movs	r3, #0
 80022da:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f004 f88e 	bl	8006402 <USB_ReadDevAllOutEpInterrupt>
 80022e6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80022e8:	e099      	b.n	800241e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80022ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ec:	f003 0301 	and.w	r3, r3, #1
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	f000 808e 	beq.w	8002412 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022fc:	b2d2      	uxtb	r2, r2
 80022fe:	4611      	mov	r1, r2
 8002300:	4618      	mov	r0, r3
 8002302:	f004 f8b2 	bl	800646a <USB_ReadDevOutEPInterrupt>
 8002306:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	2b00      	cmp	r3, #0
 8002310:	d00c      	beq.n	800232c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002314:	015a      	lsls	r2, r3, #5
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	4413      	add	r3, r2
 800231a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800231e:	461a      	mov	r2, r3
 8002320:	2301      	movs	r3, #1
 8002322:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002324:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f000 fec2 	bl	80030b0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	f003 0308 	and.w	r3, r3, #8
 8002332:	2b00      	cmp	r3, #0
 8002334:	d00c      	beq.n	8002350 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002338:	015a      	lsls	r2, r3, #5
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	4413      	add	r3, r2
 800233e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002342:	461a      	mov	r2, r3
 8002344:	2308      	movs	r3, #8
 8002346:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002348:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f000 ff98 	bl	8003280 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	f003 0310 	and.w	r3, r3, #16
 8002356:	2b00      	cmp	r3, #0
 8002358:	d008      	beq.n	800236c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235c:	015a      	lsls	r2, r3, #5
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	4413      	add	r3, r2
 8002362:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002366:	461a      	mov	r2, r3
 8002368:	2310      	movs	r3, #16
 800236a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d030      	beq.n	80023d8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002376:	6a3b      	ldr	r3, [r7, #32]
 8002378:	695b      	ldr	r3, [r3, #20]
 800237a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800237e:	2b80      	cmp	r3, #128	; 0x80
 8002380:	d109      	bne.n	8002396 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	69fa      	ldr	r2, [r7, #28]
 800238c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002390:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002394:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002396:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002398:	4613      	mov	r3, r2
 800239a:	00db      	lsls	r3, r3, #3
 800239c:	4413      	add	r3, r2
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	4413      	add	r3, r2
 80023a8:	3304      	adds	r3, #4
 80023aa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	78db      	ldrb	r3, [r3, #3]
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d108      	bne.n	80023c6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	2200      	movs	r2, #0
 80023b8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80023ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	4619      	mov	r1, r3
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f009 f9f7 	bl	800b7b4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80023c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c8:	015a      	lsls	r2, r3, #5
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	4413      	add	r3, r2
 80023ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023d2:	461a      	mov	r2, r3
 80023d4:	2302      	movs	r3, #2
 80023d6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	f003 0320 	and.w	r3, r3, #32
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d008      	beq.n	80023f4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80023e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e4:	015a      	lsls	r2, r3, #5
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	4413      	add	r3, r2
 80023ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023ee:	461a      	mov	r2, r3
 80023f0:	2320      	movs	r3, #32
 80023f2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d009      	beq.n	8002412 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80023fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002400:	015a      	lsls	r2, r3, #5
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	4413      	add	r3, r2
 8002406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800240a:	461a      	mov	r2, r3
 800240c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002410:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002414:	3301      	adds	r3, #1
 8002416:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800241a:	085b      	lsrs	r3, r3, #1
 800241c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800241e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002420:	2b00      	cmp	r3, #0
 8002422:	f47f af62 	bne.w	80022ea <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4618      	mov	r0, r3
 800242c:	f003 ffd6 	bl	80063dc <USB_ReadInterrupts>
 8002430:	4603      	mov	r3, r0
 8002432:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002436:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800243a:	f040 80db 	bne.w	80025f4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4618      	mov	r0, r3
 8002444:	f003 fff7 	bl	8006436 <USB_ReadDevAllInEpInterrupt>
 8002448:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800244a:	2300      	movs	r3, #0
 800244c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800244e:	e0cd      	b.n	80025ec <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	2b00      	cmp	r3, #0
 8002458:	f000 80c2 	beq.w	80025e0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002462:	b2d2      	uxtb	r2, r2
 8002464:	4611      	mov	r1, r2
 8002466:	4618      	mov	r0, r3
 8002468:	f004 f81d 	bl	80064a6 <USB_ReadDevInEPInterrupt>
 800246c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	f003 0301 	and.w	r3, r3, #1
 8002474:	2b00      	cmp	r3, #0
 8002476:	d057      	beq.n	8002528 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247a:	f003 030f 	and.w	r3, r3, #15
 800247e:	2201      	movs	r2, #1
 8002480:	fa02 f303 	lsl.w	r3, r2, r3
 8002484:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800248c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	43db      	mvns	r3, r3
 8002492:	69f9      	ldr	r1, [r7, #28]
 8002494:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002498:	4013      	ands	r3, r2
 800249a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800249c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249e:	015a      	lsls	r2, r3, #5
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	4413      	add	r3, r2
 80024a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024a8:	461a      	mov	r2, r3
 80024aa:	2301      	movs	r3, #1
 80024ac:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d132      	bne.n	800251c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80024b6:	6879      	ldr	r1, [r7, #4]
 80024b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024ba:	4613      	mov	r3, r2
 80024bc:	00db      	lsls	r3, r3, #3
 80024be:	4413      	add	r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	440b      	add	r3, r1
 80024c4:	334c      	adds	r3, #76	; 0x4c
 80024c6:	6819      	ldr	r1, [r3, #0]
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024cc:	4613      	mov	r3, r2
 80024ce:	00db      	lsls	r3, r3, #3
 80024d0:	4413      	add	r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	4403      	add	r3, r0
 80024d6:	3348      	adds	r3, #72	; 0x48
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4419      	add	r1, r3
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024e0:	4613      	mov	r3, r2
 80024e2:	00db      	lsls	r3, r3, #3
 80024e4:	4413      	add	r3, r2
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	4403      	add	r3, r0
 80024ea:	334c      	adds	r3, #76	; 0x4c
 80024ec:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80024ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d113      	bne.n	800251c <HAL_PCD_IRQHandler+0x3a2>
 80024f4:	6879      	ldr	r1, [r7, #4]
 80024f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024f8:	4613      	mov	r3, r2
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	4413      	add	r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	440b      	add	r3, r1
 8002502:	3354      	adds	r3, #84	; 0x54
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d108      	bne.n	800251c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6818      	ldr	r0, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002514:	461a      	mov	r2, r3
 8002516:	2101      	movs	r1, #1
 8002518:	f004 f824 	bl	8006564 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800251c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251e:	b2db      	uxtb	r3, r3
 8002520:	4619      	mov	r1, r3
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f009 f8c1 	bl	800b6aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	f003 0308 	and.w	r3, r3, #8
 800252e:	2b00      	cmp	r3, #0
 8002530:	d008      	beq.n	8002544 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002534:	015a      	lsls	r2, r3, #5
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	4413      	add	r3, r2
 800253a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800253e:	461a      	mov	r2, r3
 8002540:	2308      	movs	r3, #8
 8002542:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	f003 0310 	and.w	r3, r3, #16
 800254a:	2b00      	cmp	r3, #0
 800254c:	d008      	beq.n	8002560 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800254e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002550:	015a      	lsls	r2, r3, #5
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	4413      	add	r3, r2
 8002556:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800255a:	461a      	mov	r2, r3
 800255c:	2310      	movs	r3, #16
 800255e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002566:	2b00      	cmp	r3, #0
 8002568:	d008      	beq.n	800257c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800256a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256c:	015a      	lsls	r2, r3, #5
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	4413      	add	r3, r2
 8002572:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002576:	461a      	mov	r2, r3
 8002578:	2340      	movs	r3, #64	; 0x40
 800257a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d023      	beq.n	80025ce <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002586:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002588:	6a38      	ldr	r0, [r7, #32]
 800258a:	f002 ff05 	bl	8005398 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800258e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002590:	4613      	mov	r3, r2
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	4413      	add	r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	3338      	adds	r3, #56	; 0x38
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	4413      	add	r3, r2
 800259e:	3304      	adds	r3, #4
 80025a0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	78db      	ldrb	r3, [r3, #3]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d108      	bne.n	80025bc <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	2200      	movs	r2, #0
 80025ae:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80025b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	4619      	mov	r1, r3
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f009 f90e 	bl	800b7d8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80025bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025be:	015a      	lsls	r2, r3, #5
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	4413      	add	r3, r2
 80025c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025c8:	461a      	mov	r2, r3
 80025ca:	2302      	movs	r3, #2
 80025cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d003      	beq.n	80025e0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80025d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f000 fcdb 	bl	8002f96 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80025e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e2:	3301      	adds	r3, #1
 80025e4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80025e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025e8:	085b      	lsrs	r3, r3, #1
 80025ea:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80025ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	f47f af2e 	bne.w	8002450 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f003 feef 	bl	80063dc <USB_ReadInterrupts>
 80025fe:	4603      	mov	r3, r0
 8002600:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002604:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002608:	d122      	bne.n	8002650 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	69fa      	ldr	r2, [r7, #28]
 8002614:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002618:	f023 0301 	bic.w	r3, r3, #1
 800261c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002624:	2b01      	cmp	r3, #1
 8002626:	d108      	bne.n	800263a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002630:	2100      	movs	r1, #0
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 fec2 	bl	80033bc <HAL_PCDEx_LPM_Callback>
 8002638:	e002      	b.n	8002640 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f009 f8ac 	bl	800b798 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	695a      	ldr	r2, [r3, #20]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800264e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4618      	mov	r0, r3
 8002656:	f003 fec1 	bl	80063dc <USB_ReadInterrupts>
 800265a:	4603      	mov	r3, r0
 800265c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002660:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002664:	d112      	bne.n	800268c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	2b01      	cmp	r3, #1
 8002674:	d102      	bne.n	800267c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f009 f868 	bl	800b74c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	695a      	ldr	r2, [r3, #20]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800268a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4618      	mov	r0, r3
 8002692:	f003 fea3 	bl	80063dc <USB_ReadInterrupts>
 8002696:	4603      	mov	r3, r0
 8002698:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800269c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026a0:	f040 80b7 	bne.w	8002812 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	69fa      	ldr	r2, [r7, #28]
 80026ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026b2:	f023 0301 	bic.w	r3, r3, #1
 80026b6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2110      	movs	r1, #16
 80026be:	4618      	mov	r0, r3
 80026c0:	f002 fe6a 	bl	8005398 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026c4:	2300      	movs	r3, #0
 80026c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026c8:	e046      	b.n	8002758 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80026ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026cc:	015a      	lsls	r2, r3, #5
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	4413      	add	r3, r2
 80026d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026d6:	461a      	mov	r2, r3
 80026d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80026dc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80026de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e0:	015a      	lsls	r2, r3, #5
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	4413      	add	r3, r2
 80026e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026ee:	0151      	lsls	r1, r2, #5
 80026f0:	69fa      	ldr	r2, [r7, #28]
 80026f2:	440a      	add	r2, r1
 80026f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80026f8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80026fc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80026fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002700:	015a      	lsls	r2, r3, #5
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	4413      	add	r3, r2
 8002706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800270a:	461a      	mov	r2, r3
 800270c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002710:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002714:	015a      	lsls	r2, r3, #5
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	4413      	add	r3, r2
 800271a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002722:	0151      	lsls	r1, r2, #5
 8002724:	69fa      	ldr	r2, [r7, #28]
 8002726:	440a      	add	r2, r1
 8002728:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800272c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002730:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002734:	015a      	lsls	r2, r3, #5
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	4413      	add	r3, r2
 800273a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002742:	0151      	lsls	r1, r2, #5
 8002744:	69fa      	ldr	r2, [r7, #28]
 8002746:	440a      	add	r2, r1
 8002748:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800274c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002750:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002754:	3301      	adds	r3, #1
 8002756:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800275e:	429a      	cmp	r2, r3
 8002760:	d3b3      	bcc.n	80026ca <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002768:	69db      	ldr	r3, [r3, #28]
 800276a:	69fa      	ldr	r2, [r7, #28]
 800276c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002770:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002774:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277a:	2b00      	cmp	r3, #0
 800277c:	d016      	beq.n	80027ac <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002784:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002788:	69fa      	ldr	r2, [r7, #28]
 800278a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800278e:	f043 030b 	orr.w	r3, r3, #11
 8002792:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800279c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279e:	69fa      	ldr	r2, [r7, #28]
 80027a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027a4:	f043 030b 	orr.w	r3, r3, #11
 80027a8:	6453      	str	r3, [r2, #68]	; 0x44
 80027aa:	e015      	b.n	80027d8 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027b2:	695b      	ldr	r3, [r3, #20]
 80027b4:	69fa      	ldr	r2, [r7, #28]
 80027b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027ba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80027be:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80027c2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027ca:	691b      	ldr	r3, [r3, #16]
 80027cc:	69fa      	ldr	r2, [r7, #28]
 80027ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027d2:	f043 030b 	orr.w	r3, r3, #11
 80027d6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	69fa      	ldr	r2, [r7, #28]
 80027e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027e6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80027ea:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6818      	ldr	r0, [r3, #0]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	691b      	ldr	r3, [r3, #16]
 80027f4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80027fc:	461a      	mov	r2, r3
 80027fe:	f003 feb1 	bl	8006564 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	695a      	ldr	r2, [r3, #20]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002810:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4618      	mov	r0, r3
 8002818:	f003 fde0 	bl	80063dc <USB_ReadInterrupts>
 800281c:	4603      	mov	r3, r0
 800281e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002822:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002826:	d124      	bne.n	8002872 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4618      	mov	r0, r3
 800282e:	f003 fe76 	bl	800651e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4618      	mov	r0, r3
 8002838:	f002 fe2b 	bl	8005492 <USB_GetDevSpeed>
 800283c:	4603      	mov	r3, r0
 800283e:	461a      	mov	r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681c      	ldr	r4, [r3, #0]
 8002848:	f001 fa28 	bl	8003c9c <HAL_RCC_GetHCLKFreq>
 800284c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002852:	b2db      	uxtb	r3, r3
 8002854:	461a      	mov	r2, r3
 8002856:	4620      	mov	r0, r4
 8002858:	f002 fb2a 	bl	8004eb0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f008 ff4c 	bl	800b6fa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	695a      	ldr	r2, [r3, #20]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002870:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4618      	mov	r0, r3
 8002878:	f003 fdb0 	bl	80063dc <USB_ReadInterrupts>
 800287c:	4603      	mov	r3, r0
 800287e:	f003 0308 	and.w	r3, r3, #8
 8002882:	2b08      	cmp	r3, #8
 8002884:	d10a      	bne.n	800289c <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f008 ff29 	bl	800b6de <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	695a      	ldr	r2, [r3, #20]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f002 0208 	and.w	r2, r2, #8
 800289a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f003 fd9b 	bl	80063dc <USB_ReadInterrupts>
 80028a6:	4603      	mov	r3, r0
 80028a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ac:	2b80      	cmp	r3, #128	; 0x80
 80028ae:	d122      	bne.n	80028f6 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80028b0:	6a3b      	ldr	r3, [r7, #32]
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028b8:	6a3b      	ldr	r3, [r7, #32]
 80028ba:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028bc:	2301      	movs	r3, #1
 80028be:	627b      	str	r3, [r7, #36]	; 0x24
 80028c0:	e014      	b.n	80028ec <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80028c2:	6879      	ldr	r1, [r7, #4]
 80028c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028c6:	4613      	mov	r3, r2
 80028c8:	00db      	lsls	r3, r3, #3
 80028ca:	4413      	add	r3, r2
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	440b      	add	r3, r1
 80028d0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d105      	bne.n	80028e6 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80028da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	4619      	mov	r1, r3
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f000 fb27 	bl	8002f34 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e8:	3301      	adds	r3, #1
 80028ea:	627b      	str	r3, [r7, #36]	; 0x24
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d3e5      	bcc.n	80028c2 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f003 fd6e 	bl	80063dc <USB_ReadInterrupts>
 8002900:	4603      	mov	r3, r0
 8002902:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002906:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800290a:	d13b      	bne.n	8002984 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800290c:	2301      	movs	r3, #1
 800290e:	627b      	str	r3, [r7, #36]	; 0x24
 8002910:	e02b      	b.n	800296a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002914:	015a      	lsls	r2, r3, #5
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	4413      	add	r3, r2
 800291a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002922:	6879      	ldr	r1, [r7, #4]
 8002924:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002926:	4613      	mov	r3, r2
 8002928:	00db      	lsls	r3, r3, #3
 800292a:	4413      	add	r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	440b      	add	r3, r1
 8002930:	3340      	adds	r3, #64	; 0x40
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	2b01      	cmp	r3, #1
 8002936:	d115      	bne.n	8002964 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002938:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800293a:	2b00      	cmp	r3, #0
 800293c:	da12      	bge.n	8002964 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800293e:	6879      	ldr	r1, [r7, #4]
 8002940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002942:	4613      	mov	r3, r2
 8002944:	00db      	lsls	r3, r3, #3
 8002946:	4413      	add	r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	440b      	add	r3, r1
 800294c:	333f      	adds	r3, #63	; 0x3f
 800294e:	2201      	movs	r2, #1
 8002950:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002954:	b2db      	uxtb	r3, r3
 8002956:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800295a:	b2db      	uxtb	r3, r3
 800295c:	4619      	mov	r1, r3
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 fae8 	bl	8002f34 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002966:	3301      	adds	r3, #1
 8002968:	627b      	str	r3, [r7, #36]	; 0x24
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002970:	429a      	cmp	r2, r3
 8002972:	d3ce      	bcc.n	8002912 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	695a      	ldr	r2, [r3, #20]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002982:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4618      	mov	r0, r3
 800298a:	f003 fd27 	bl	80063dc <USB_ReadInterrupts>
 800298e:	4603      	mov	r3, r0
 8002990:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002994:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002998:	d155      	bne.n	8002a46 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800299a:	2301      	movs	r3, #1
 800299c:	627b      	str	r3, [r7, #36]	; 0x24
 800299e:	e045      	b.n	8002a2c <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80029a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a2:	015a      	lsls	r2, r3, #5
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	4413      	add	r3, r2
 80029a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80029b0:	6879      	ldr	r1, [r7, #4]
 80029b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029b4:	4613      	mov	r3, r2
 80029b6:	00db      	lsls	r3, r3, #3
 80029b8:	4413      	add	r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	440b      	add	r3, r1
 80029be:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d12e      	bne.n	8002a26 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80029c8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	da2b      	bge.n	8002a26 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80029da:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80029de:	429a      	cmp	r2, r3
 80029e0:	d121      	bne.n	8002a26 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80029e2:	6879      	ldr	r1, [r7, #4]
 80029e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029e6:	4613      	mov	r3, r2
 80029e8:	00db      	lsls	r3, r3, #3
 80029ea:	4413      	add	r3, r2
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	440b      	add	r3, r1
 80029f0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80029f4:	2201      	movs	r2, #1
 80029f6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80029f8:	6a3b      	ldr	r3, [r7, #32]
 80029fa:	699b      	ldr	r3, [r3, #24]
 80029fc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002a00:	6a3b      	ldr	r3, [r7, #32]
 8002a02:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002a04:	6a3b      	ldr	r3, [r7, #32]
 8002a06:	695b      	ldr	r3, [r3, #20]
 8002a08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d10a      	bne.n	8002a26 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	69fa      	ldr	r2, [r7, #28]
 8002a1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a22:	6053      	str	r3, [r2, #4]
            break;
 8002a24:	e007      	b.n	8002a36 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a28:	3301      	adds	r3, #1
 8002a2a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d3b4      	bcc.n	80029a0 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	695a      	ldr	r2, [r3, #20]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002a44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f003 fcc6 	bl	80063dc <USB_ReadInterrupts>
 8002a50:	4603      	mov	r3, r0
 8002a52:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002a56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a5a:	d10a      	bne.n	8002a72 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f008 fecd 	bl	800b7fc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	695a      	ldr	r2, [r3, #20]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002a70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f003 fcb0 	bl	80063dc <USB_ReadInterrupts>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	f003 0304 	and.w	r3, r3, #4
 8002a82:	2b04      	cmp	r3, #4
 8002a84:	d115      	bne.n	8002ab2 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	f003 0304 	and.w	r3, r3, #4
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d002      	beq.n	8002a9e <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f008 febd 	bl	800b818 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	6859      	ldr	r1, [r3, #4]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	605a      	str	r2, [r3, #4]
 8002aae:	e000      	b.n	8002ab2 <HAL_PCD_IRQHandler+0x938>
      return;
 8002ab0:	bf00      	nop
    }
  }
}
 8002ab2:	3734      	adds	r7, #52	; 0x34
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd90      	pop	{r4, r7, pc}

08002ab8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d101      	bne.n	8002ad2 <HAL_PCD_SetAddress+0x1a>
 8002ace:	2302      	movs	r3, #2
 8002ad0:	e013      	b.n	8002afa <HAL_PCD_SetAddress+0x42>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	78fa      	ldrb	r2, [r7, #3]
 8002ade:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	78fa      	ldrb	r2, [r7, #3]
 8002ae8:	4611      	mov	r1, r2
 8002aea:	4618      	mov	r0, r3
 8002aec:	f003 fc0e 	bl	800630c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3708      	adds	r7, #8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b084      	sub	sp, #16
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
 8002b0a:	4608      	mov	r0, r1
 8002b0c:	4611      	mov	r1, r2
 8002b0e:	461a      	mov	r2, r3
 8002b10:	4603      	mov	r3, r0
 8002b12:	70fb      	strb	r3, [r7, #3]
 8002b14:	460b      	mov	r3, r1
 8002b16:	803b      	strh	r3, [r7, #0]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	da0f      	bge.n	8002b48 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b28:	78fb      	ldrb	r3, [r7, #3]
 8002b2a:	f003 020f 	and.w	r2, r3, #15
 8002b2e:	4613      	mov	r3, r2
 8002b30:	00db      	lsls	r3, r3, #3
 8002b32:	4413      	add	r3, r2
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	3338      	adds	r3, #56	; 0x38
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	3304      	adds	r3, #4
 8002b3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2201      	movs	r2, #1
 8002b44:	705a      	strb	r2, [r3, #1]
 8002b46:	e00f      	b.n	8002b68 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b48:	78fb      	ldrb	r3, [r7, #3]
 8002b4a:	f003 020f 	and.w	r2, r3, #15
 8002b4e:	4613      	mov	r3, r2
 8002b50:	00db      	lsls	r3, r3, #3
 8002b52:	4413      	add	r3, r2
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	3304      	adds	r3, #4
 8002b60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002b68:	78fb      	ldrb	r3, [r7, #3]
 8002b6a:	f003 030f 	and.w	r3, r3, #15
 8002b6e:	b2da      	uxtb	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002b74:	883a      	ldrh	r2, [r7, #0]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	78ba      	ldrb	r2, [r7, #2]
 8002b7e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	785b      	ldrb	r3, [r3, #1]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d004      	beq.n	8002b92 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	b29a      	uxth	r2, r3
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002b92:	78bb      	ldrb	r3, [r7, #2]
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d102      	bne.n	8002b9e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d101      	bne.n	8002bac <HAL_PCD_EP_Open+0xaa>
 8002ba8:	2302      	movs	r3, #2
 8002baa:	e00e      	b.n	8002bca <HAL_PCD_EP_Open+0xc8>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	68f9      	ldr	r1, [r7, #12]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f002 fc8e 	bl	80054dc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002bc8:	7afb      	ldrb	r3, [r7, #11]
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3710      	adds	r7, #16
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	b084      	sub	sp, #16
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
 8002bda:	460b      	mov	r3, r1
 8002bdc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002bde:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	da0f      	bge.n	8002c06 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002be6:	78fb      	ldrb	r3, [r7, #3]
 8002be8:	f003 020f 	and.w	r2, r3, #15
 8002bec:	4613      	mov	r3, r2
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	4413      	add	r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	3338      	adds	r3, #56	; 0x38
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	3304      	adds	r3, #4
 8002bfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2201      	movs	r2, #1
 8002c02:	705a      	strb	r2, [r3, #1]
 8002c04:	e00f      	b.n	8002c26 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c06:	78fb      	ldrb	r3, [r7, #3]
 8002c08:	f003 020f 	and.w	r2, r3, #15
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	4413      	add	r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	4413      	add	r3, r2
 8002c1c:	3304      	adds	r3, #4
 8002c1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2200      	movs	r2, #0
 8002c24:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002c26:	78fb      	ldrb	r3, [r7, #3]
 8002c28:	f003 030f 	and.w	r3, r3, #15
 8002c2c:	b2da      	uxtb	r2, r3
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d101      	bne.n	8002c40 <HAL_PCD_EP_Close+0x6e>
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	e00e      	b.n	8002c5e <HAL_PCD_EP_Close+0x8c>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68f9      	ldr	r1, [r7, #12]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f002 fccc 	bl	80055ec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3710      	adds	r7, #16
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}

08002c66 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c66:	b580      	push	{r7, lr}
 8002c68:	b086      	sub	sp, #24
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	60f8      	str	r0, [r7, #12]
 8002c6e:	607a      	str	r2, [r7, #4]
 8002c70:	603b      	str	r3, [r7, #0]
 8002c72:	460b      	mov	r3, r1
 8002c74:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c76:	7afb      	ldrb	r3, [r7, #11]
 8002c78:	f003 020f 	and.w	r2, r3, #15
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	4413      	add	r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c88:	68fa      	ldr	r2, [r7, #12]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	3304      	adds	r3, #4
 8002c8e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	683a      	ldr	r2, [r7, #0]
 8002c9a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ca8:	7afb      	ldrb	r3, [r7, #11]
 8002caa:	f003 030f 	and.w	r3, r3, #15
 8002cae:	b2da      	uxtb	r2, r3
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	691b      	ldr	r3, [r3, #16]
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d102      	bne.n	8002cc2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002cc2:	7afb      	ldrb	r3, [r7, #11]
 8002cc4:	f003 030f 	and.w	r3, r3, #15
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d109      	bne.n	8002ce0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6818      	ldr	r0, [r3, #0]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	691b      	ldr	r3, [r3, #16]
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	6979      	ldr	r1, [r7, #20]
 8002cda:	f002 ffab 	bl	8005c34 <USB_EP0StartXfer>
 8002cde:	e008      	b.n	8002cf2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6818      	ldr	r0, [r3, #0]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	691b      	ldr	r3, [r3, #16]
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	461a      	mov	r2, r3
 8002cec:	6979      	ldr	r1, [r7, #20]
 8002cee:	f002 fd59 	bl	80057a4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002cf2:	2300      	movs	r3, #0
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3718      	adds	r7, #24
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	460b      	mov	r3, r1
 8002d06:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002d08:	78fb      	ldrb	r3, [r7, #3]
 8002d0a:	f003 020f 	and.w	r2, r3, #15
 8002d0e:	6879      	ldr	r1, [r7, #4]
 8002d10:	4613      	mov	r3, r2
 8002d12:	00db      	lsls	r3, r3, #3
 8002d14:	4413      	add	r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	440b      	add	r3, r1
 8002d1a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002d1e:	681b      	ldr	r3, [r3, #0]
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b086      	sub	sp, #24
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	607a      	str	r2, [r7, #4]
 8002d36:	603b      	str	r3, [r7, #0]
 8002d38:	460b      	mov	r3, r1
 8002d3a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d3c:	7afb      	ldrb	r3, [r7, #11]
 8002d3e:	f003 020f 	and.w	r2, r3, #15
 8002d42:	4613      	mov	r3, r2
 8002d44:	00db      	lsls	r3, r3, #3
 8002d46:	4413      	add	r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	3338      	adds	r3, #56	; 0x38
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	4413      	add	r3, r2
 8002d50:	3304      	adds	r3, #4
 8002d52:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	683a      	ldr	r2, [r7, #0]
 8002d5e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	2200      	movs	r2, #0
 8002d64:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d6c:	7afb      	ldrb	r3, [r7, #11]
 8002d6e:	f003 030f 	and.w	r3, r3, #15
 8002d72:	b2da      	uxtb	r2, r3
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	691b      	ldr	r3, [r3, #16]
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d102      	bne.n	8002d86 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d86:	7afb      	ldrb	r3, [r7, #11]
 8002d88:	f003 030f 	and.w	r3, r3, #15
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d109      	bne.n	8002da4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6818      	ldr	r0, [r3, #0]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	691b      	ldr	r3, [r3, #16]
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	6979      	ldr	r1, [r7, #20]
 8002d9e:	f002 ff49 	bl	8005c34 <USB_EP0StartXfer>
 8002da2:	e008      	b.n	8002db6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6818      	ldr	r0, [r3, #0]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	691b      	ldr	r3, [r3, #16]
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	461a      	mov	r2, r3
 8002db0:	6979      	ldr	r1, [r7, #20]
 8002db2:	f002 fcf7 	bl	80057a4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3718      	adds	r7, #24
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	460b      	mov	r3, r1
 8002dca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002dcc:	78fb      	ldrb	r3, [r7, #3]
 8002dce:	f003 020f 	and.w	r2, r3, #15
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d901      	bls.n	8002dde <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e050      	b.n	8002e80 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002dde:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	da0f      	bge.n	8002e06 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002de6:	78fb      	ldrb	r3, [r7, #3]
 8002de8:	f003 020f 	and.w	r2, r3, #15
 8002dec:	4613      	mov	r3, r2
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	4413      	add	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	3338      	adds	r3, #56	; 0x38
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	4413      	add	r3, r2
 8002dfa:	3304      	adds	r3, #4
 8002dfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2201      	movs	r2, #1
 8002e02:	705a      	strb	r2, [r3, #1]
 8002e04:	e00d      	b.n	8002e22 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e06:	78fa      	ldrb	r2, [r7, #3]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	00db      	lsls	r3, r3, #3
 8002e0c:	4413      	add	r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	4413      	add	r3, r2
 8002e18:	3304      	adds	r3, #4
 8002e1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2201      	movs	r2, #1
 8002e26:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e28:	78fb      	ldrb	r3, [r7, #3]
 8002e2a:	f003 030f 	and.w	r3, r3, #15
 8002e2e:	b2da      	uxtb	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d101      	bne.n	8002e42 <HAL_PCD_EP_SetStall+0x82>
 8002e3e:	2302      	movs	r3, #2
 8002e40:	e01e      	b.n	8002e80 <HAL_PCD_EP_SetStall+0xc0>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2201      	movs	r2, #1
 8002e46:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	68f9      	ldr	r1, [r7, #12]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f003 f987 	bl	8006164 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e56:	78fb      	ldrb	r3, [r7, #3]
 8002e58:	f003 030f 	and.w	r3, r3, #15
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d10a      	bne.n	8002e76 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6818      	ldr	r0, [r3, #0]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	b2d9      	uxtb	r1, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002e70:	461a      	mov	r2, r3
 8002e72:	f003 fb77 	bl	8006564 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002e7e:	2300      	movs	r3, #0
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3710      	adds	r7, #16
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	460b      	mov	r3, r1
 8002e92:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002e94:	78fb      	ldrb	r3, [r7, #3]
 8002e96:	f003 020f 	and.w	r2, r3, #15
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d901      	bls.n	8002ea6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e042      	b.n	8002f2c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ea6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	da0f      	bge.n	8002ece <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002eae:	78fb      	ldrb	r3, [r7, #3]
 8002eb0:	f003 020f 	and.w	r2, r3, #15
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	00db      	lsls	r3, r3, #3
 8002eb8:	4413      	add	r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	3338      	adds	r3, #56	; 0x38
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	3304      	adds	r3, #4
 8002ec4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	705a      	strb	r2, [r3, #1]
 8002ecc:	e00f      	b.n	8002eee <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ece:	78fb      	ldrb	r3, [r7, #3]
 8002ed0:	f003 020f 	and.w	r2, r3, #15
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	00db      	lsls	r3, r3, #3
 8002ed8:	4413      	add	r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	3304      	adds	r3, #4
 8002ee6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2200      	movs	r2, #0
 8002eec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ef4:	78fb      	ldrb	r3, [r7, #3]
 8002ef6:	f003 030f 	and.w	r3, r3, #15
 8002efa:	b2da      	uxtb	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d101      	bne.n	8002f0e <HAL_PCD_EP_ClrStall+0x86>
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	e00e      	b.n	8002f2c <HAL_PCD_EP_ClrStall+0xa4>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2201      	movs	r2, #1
 8002f12:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68f9      	ldr	r1, [r7, #12]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f003 f98f 	bl	8006240 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3710      	adds	r7, #16
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002f40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	da0c      	bge.n	8002f62 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f48:	78fb      	ldrb	r3, [r7, #3]
 8002f4a:	f003 020f 	and.w	r2, r3, #15
 8002f4e:	4613      	mov	r3, r2
 8002f50:	00db      	lsls	r3, r3, #3
 8002f52:	4413      	add	r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	3338      	adds	r3, #56	; 0x38
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	3304      	adds	r3, #4
 8002f5e:	60fb      	str	r3, [r7, #12]
 8002f60:	e00c      	b.n	8002f7c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f62:	78fb      	ldrb	r3, [r7, #3]
 8002f64:	f003 020f 	and.w	r2, r3, #15
 8002f68:	4613      	mov	r3, r2
 8002f6a:	00db      	lsls	r3, r3, #3
 8002f6c:	4413      	add	r3, r2
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	4413      	add	r3, r2
 8002f78:	3304      	adds	r3, #4
 8002f7a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	68f9      	ldr	r1, [r7, #12]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f002 ffae 	bl	8005ee4 <USB_EPStopXfer>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002f8c:	7afb      	ldrb	r3, [r7, #11]
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b08a      	sub	sp, #40	; 0x28
 8002f9a:	af02      	add	r7, sp, #8
 8002f9c:	6078      	str	r0, [r7, #4]
 8002f9e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002faa:	683a      	ldr	r2, [r7, #0]
 8002fac:	4613      	mov	r3, r2
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	4413      	add	r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	3338      	adds	r3, #56	; 0x38
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	4413      	add	r3, r2
 8002fba:	3304      	adds	r3, #4
 8002fbc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6a1a      	ldr	r2, [r3, #32]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d901      	bls.n	8002fce <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e06c      	b.n	80030a8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	699a      	ldr	r2, [r3, #24]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	6a1b      	ldr	r3, [r3, #32]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	69fa      	ldr	r2, [r7, #28]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d902      	bls.n	8002fea <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	3303      	adds	r3, #3
 8002fee:	089b      	lsrs	r3, r3, #2
 8002ff0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002ff2:	e02b      	b.n	800304c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	699a      	ldr	r2, [r3, #24]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6a1b      	ldr	r3, [r3, #32]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	69fa      	ldr	r2, [r7, #28]
 8003006:	429a      	cmp	r2, r3
 8003008:	d902      	bls.n	8003010 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	3303      	adds	r3, #3
 8003014:	089b      	lsrs	r3, r3, #2
 8003016:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6919      	ldr	r1, [r3, #16]
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	b2da      	uxtb	r2, r3
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003028:	b2db      	uxtb	r3, r3
 800302a:	9300      	str	r3, [sp, #0]
 800302c:	4603      	mov	r3, r0
 800302e:	6978      	ldr	r0, [r7, #20]
 8003030:	f003 f802 	bl	8006038 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	691a      	ldr	r2, [r3, #16]
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	441a      	add	r2, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6a1a      	ldr	r2, [r3, #32]
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	441a      	add	r2, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	015a      	lsls	r2, r3, #5
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	4413      	add	r3, r2
 8003054:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	b29b      	uxth	r3, r3
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	429a      	cmp	r2, r3
 8003060:	d809      	bhi.n	8003076 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6a1a      	ldr	r2, [r3, #32]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800306a:	429a      	cmp	r2, r3
 800306c:	d203      	bcs.n	8003076 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d1be      	bne.n	8002ff4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	699a      	ldr	r2, [r3, #24]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6a1b      	ldr	r3, [r3, #32]
 800307e:	429a      	cmp	r2, r3
 8003080:	d811      	bhi.n	80030a6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	f003 030f 	and.w	r3, r3, #15
 8003088:	2201      	movs	r2, #1
 800308a:	fa02 f303 	lsl.w	r3, r2, r3
 800308e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003096:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	43db      	mvns	r3, r3
 800309c:	6939      	ldr	r1, [r7, #16]
 800309e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80030a2:	4013      	ands	r3, r2
 80030a4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80030a6:	2300      	movs	r3, #0
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3720      	adds	r7, #32
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b088      	sub	sp, #32
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	333c      	adds	r3, #60	; 0x3c
 80030c8:	3304      	adds	r3, #4
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	015a      	lsls	r2, r3, #5
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	4413      	add	r3, r2
 80030d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d17b      	bne.n	80031de <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	f003 0308 	and.w	r3, r3, #8
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d015      	beq.n	800311c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	4a61      	ldr	r2, [pc, #388]	; (8003278 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	f240 80b9 	bls.w	800326c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003100:	2b00      	cmp	r3, #0
 8003102:	f000 80b3 	beq.w	800326c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	015a      	lsls	r2, r3, #5
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	4413      	add	r3, r2
 800310e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003112:	461a      	mov	r2, r3
 8003114:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003118:	6093      	str	r3, [r2, #8]
 800311a:	e0a7      	b.n	800326c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	f003 0320 	and.w	r3, r3, #32
 8003122:	2b00      	cmp	r3, #0
 8003124:	d009      	beq.n	800313a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	015a      	lsls	r2, r3, #5
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	4413      	add	r3, r2
 800312e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003132:	461a      	mov	r2, r3
 8003134:	2320      	movs	r3, #32
 8003136:	6093      	str	r3, [r2, #8]
 8003138:	e098      	b.n	800326c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003140:	2b00      	cmp	r3, #0
 8003142:	f040 8093 	bne.w	800326c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	4a4b      	ldr	r2, [pc, #300]	; (8003278 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d90f      	bls.n	800316e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003154:	2b00      	cmp	r3, #0
 8003156:	d00a      	beq.n	800316e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	015a      	lsls	r2, r3, #5
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	4413      	add	r3, r2
 8003160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003164:	461a      	mov	r2, r3
 8003166:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800316a:	6093      	str	r3, [r2, #8]
 800316c:	e07e      	b.n	800326c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800316e:	683a      	ldr	r2, [r7, #0]
 8003170:	4613      	mov	r3, r2
 8003172:	00db      	lsls	r3, r3, #3
 8003174:	4413      	add	r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	4413      	add	r3, r2
 8003180:	3304      	adds	r3, #4
 8003182:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	69da      	ldr	r2, [r3, #28]
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	0159      	lsls	r1, r3, #5
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	440b      	add	r3, r1
 8003190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800319a:	1ad2      	subs	r2, r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d114      	bne.n	80031d0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d109      	bne.n	80031c2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6818      	ldr	r0, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80031b8:	461a      	mov	r2, r3
 80031ba:	2101      	movs	r1, #1
 80031bc:	f003 f9d2 	bl	8006564 <USB_EP0_OutStart>
 80031c0:	e006      	b.n	80031d0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	691a      	ldr	r2, [r3, #16]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6a1b      	ldr	r3, [r3, #32]
 80031ca:	441a      	add	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	4619      	mov	r1, r3
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f008 fa4c 	bl	800b674 <HAL_PCD_DataOutStageCallback>
 80031dc:	e046      	b.n	800326c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	4a26      	ldr	r2, [pc, #152]	; (800327c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d124      	bne.n	8003230 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d00a      	beq.n	8003206 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	015a      	lsls	r2, r3, #5
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	4413      	add	r3, r2
 80031f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031fc:	461a      	mov	r2, r3
 80031fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003202:	6093      	str	r3, [r2, #8]
 8003204:	e032      	b.n	800326c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	f003 0320 	and.w	r3, r3, #32
 800320c:	2b00      	cmp	r3, #0
 800320e:	d008      	beq.n	8003222 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	015a      	lsls	r2, r3, #5
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	4413      	add	r3, r2
 8003218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800321c:	461a      	mov	r2, r3
 800321e:	2320      	movs	r3, #32
 8003220:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	b2db      	uxtb	r3, r3
 8003226:	4619      	mov	r1, r3
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f008 fa23 	bl	800b674 <HAL_PCD_DataOutStageCallback>
 800322e:	e01d      	b.n	800326c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d114      	bne.n	8003260 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003236:	6879      	ldr	r1, [r7, #4]
 8003238:	683a      	ldr	r2, [r7, #0]
 800323a:	4613      	mov	r3, r2
 800323c:	00db      	lsls	r3, r3, #3
 800323e:	4413      	add	r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	440b      	add	r3, r1
 8003244:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d108      	bne.n	8003260 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6818      	ldr	r0, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003258:	461a      	mov	r2, r3
 800325a:	2100      	movs	r1, #0
 800325c:	f003 f982 	bl	8006564 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	b2db      	uxtb	r3, r3
 8003264:	4619      	mov	r1, r3
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f008 fa04 	bl	800b674 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3720      	adds	r7, #32
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	4f54300a 	.word	0x4f54300a
 800327c:	4f54310a 	.word	0x4f54310a

08003280 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b086      	sub	sp, #24
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	333c      	adds	r3, #60	; 0x3c
 8003298:	3304      	adds	r3, #4
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	015a      	lsls	r2, r3, #5
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	4413      	add	r3, r2
 80032a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	4a15      	ldr	r2, [pc, #84]	; (8003308 <PCD_EP_OutSetupPacket_int+0x88>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d90e      	bls.n	80032d4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d009      	beq.n	80032d4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	015a      	lsls	r2, r3, #5
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	4413      	add	r3, r2
 80032c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032cc:	461a      	mov	r2, r3
 80032ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032d2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f008 f9bb 	bl	800b650 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	4a0a      	ldr	r2, [pc, #40]	; (8003308 <PCD_EP_OutSetupPacket_int+0x88>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d90c      	bls.n	80032fc <PCD_EP_OutSetupPacket_int+0x7c>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d108      	bne.n	80032fc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6818      	ldr	r0, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80032f4:	461a      	mov	r2, r3
 80032f6:	2101      	movs	r1, #1
 80032f8:	f003 f934 	bl	8006564 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3718      	adds	r7, #24
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	4f54300a 	.word	0x4f54300a

0800330c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800330c:	b480      	push	{r7}
 800330e:	b085      	sub	sp, #20
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	460b      	mov	r3, r1
 8003316:	70fb      	strb	r3, [r7, #3]
 8003318:	4613      	mov	r3, r2
 800331a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003322:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003324:	78fb      	ldrb	r3, [r7, #3]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d107      	bne.n	800333a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800332a:	883b      	ldrh	r3, [r7, #0]
 800332c:	0419      	lsls	r1, r3, #16
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68ba      	ldr	r2, [r7, #8]
 8003334:	430a      	orrs	r2, r1
 8003336:	629a      	str	r2, [r3, #40]	; 0x28
 8003338:	e028      	b.n	800338c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003340:	0c1b      	lsrs	r3, r3, #16
 8003342:	68ba      	ldr	r2, [r7, #8]
 8003344:	4413      	add	r3, r2
 8003346:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003348:	2300      	movs	r3, #0
 800334a:	73fb      	strb	r3, [r7, #15]
 800334c:	e00d      	b.n	800336a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	7bfb      	ldrb	r3, [r7, #15]
 8003354:	3340      	adds	r3, #64	; 0x40
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	4413      	add	r3, r2
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	0c1b      	lsrs	r3, r3, #16
 800335e:	68ba      	ldr	r2, [r7, #8]
 8003360:	4413      	add	r3, r2
 8003362:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003364:	7bfb      	ldrb	r3, [r7, #15]
 8003366:	3301      	adds	r3, #1
 8003368:	73fb      	strb	r3, [r7, #15]
 800336a:	7bfa      	ldrb	r2, [r7, #15]
 800336c:	78fb      	ldrb	r3, [r7, #3]
 800336e:	3b01      	subs	r3, #1
 8003370:	429a      	cmp	r2, r3
 8003372:	d3ec      	bcc.n	800334e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003374:	883b      	ldrh	r3, [r7, #0]
 8003376:	0418      	lsls	r0, r3, #16
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6819      	ldr	r1, [r3, #0]
 800337c:	78fb      	ldrb	r3, [r7, #3]
 800337e:	3b01      	subs	r3, #1
 8003380:	68ba      	ldr	r2, [r7, #8]
 8003382:	4302      	orrs	r2, r0
 8003384:	3340      	adds	r3, #64	; 0x40
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	440b      	add	r3, r1
 800338a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3714      	adds	r7, #20
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr

0800339a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800339a:	b480      	push	{r7}
 800339c:	b083      	sub	sp, #12
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
 80033a2:	460b      	mov	r3, r1
 80033a4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	887a      	ldrh	r2, [r7, #2]
 80033ac:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	460b      	mov	r3, r1
 80033c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80033c8:	bf00      	nop
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b086      	sub	sp, #24
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d101      	bne.n	80033e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e267      	b.n	80038b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d075      	beq.n	80034de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033f2:	4b88      	ldr	r3, [pc, #544]	; (8003614 <HAL_RCC_OscConfig+0x240>)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f003 030c 	and.w	r3, r3, #12
 80033fa:	2b04      	cmp	r3, #4
 80033fc:	d00c      	beq.n	8003418 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033fe:	4b85      	ldr	r3, [pc, #532]	; (8003614 <HAL_RCC_OscConfig+0x240>)
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003406:	2b08      	cmp	r3, #8
 8003408:	d112      	bne.n	8003430 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800340a:	4b82      	ldr	r3, [pc, #520]	; (8003614 <HAL_RCC_OscConfig+0x240>)
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003412:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003416:	d10b      	bne.n	8003430 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003418:	4b7e      	ldr	r3, [pc, #504]	; (8003614 <HAL_RCC_OscConfig+0x240>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d05b      	beq.n	80034dc <HAL_RCC_OscConfig+0x108>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d157      	bne.n	80034dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e242      	b.n	80038b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003438:	d106      	bne.n	8003448 <HAL_RCC_OscConfig+0x74>
 800343a:	4b76      	ldr	r3, [pc, #472]	; (8003614 <HAL_RCC_OscConfig+0x240>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a75      	ldr	r2, [pc, #468]	; (8003614 <HAL_RCC_OscConfig+0x240>)
 8003440:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003444:	6013      	str	r3, [r2, #0]
 8003446:	e01d      	b.n	8003484 <HAL_RCC_OscConfig+0xb0>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003450:	d10c      	bne.n	800346c <HAL_RCC_OscConfig+0x98>
 8003452:	4b70      	ldr	r3, [pc, #448]	; (8003614 <HAL_RCC_OscConfig+0x240>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a6f      	ldr	r2, [pc, #444]	; (8003614 <HAL_RCC_OscConfig+0x240>)
 8003458:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800345c:	6013      	str	r3, [r2, #0]
 800345e:	4b6d      	ldr	r3, [pc, #436]	; (8003614 <HAL_RCC_OscConfig+0x240>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a6c      	ldr	r2, [pc, #432]	; (8003614 <HAL_RCC_OscConfig+0x240>)
 8003464:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003468:	6013      	str	r3, [r2, #0]
 800346a:	e00b      	b.n	8003484 <HAL_RCC_OscConfig+0xb0>
 800346c:	4b69      	ldr	r3, [pc, #420]	; (8003614 <HAL_RCC_OscConfig+0x240>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a68      	ldr	r2, [pc, #416]	; (8003614 <HAL_RCC_OscConfig+0x240>)
 8003472:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003476:	6013      	str	r3, [r2, #0]
 8003478:	4b66      	ldr	r3, [pc, #408]	; (8003614 <HAL_RCC_OscConfig+0x240>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a65      	ldr	r2, [pc, #404]	; (8003614 <HAL_RCC_OscConfig+0x240>)
 800347e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003482:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d013      	beq.n	80034b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800348c:	f7fe fa44 	bl	8001918 <HAL_GetTick>
 8003490:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003492:	e008      	b.n	80034a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003494:	f7fe fa40 	bl	8001918 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b64      	cmp	r3, #100	; 0x64
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e207      	b.n	80038b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034a6:	4b5b      	ldr	r3, [pc, #364]	; (8003614 <HAL_RCC_OscConfig+0x240>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d0f0      	beq.n	8003494 <HAL_RCC_OscConfig+0xc0>
 80034b2:	e014      	b.n	80034de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b4:	f7fe fa30 	bl	8001918 <HAL_GetTick>
 80034b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ba:	e008      	b.n	80034ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034bc:	f7fe fa2c 	bl	8001918 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2b64      	cmp	r3, #100	; 0x64
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e1f3      	b.n	80038b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ce:	4b51      	ldr	r3, [pc, #324]	; (8003614 <HAL_RCC_OscConfig+0x240>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1f0      	bne.n	80034bc <HAL_RCC_OscConfig+0xe8>
 80034da:	e000      	b.n	80034de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0302 	and.w	r3, r3, #2
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d063      	beq.n	80035b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034ea:	4b4a      	ldr	r3, [pc, #296]	; (8003614 <HAL_RCC_OscConfig+0x240>)
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f003 030c 	and.w	r3, r3, #12
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00b      	beq.n	800350e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034f6:	4b47      	ldr	r3, [pc, #284]	; (8003614 <HAL_RCC_OscConfig+0x240>)
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034fe:	2b08      	cmp	r3, #8
 8003500:	d11c      	bne.n	800353c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003502:	4b44      	ldr	r3, [pc, #272]	; (8003614 <HAL_RCC_OscConfig+0x240>)
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d116      	bne.n	800353c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800350e:	4b41      	ldr	r3, [pc, #260]	; (8003614 <HAL_RCC_OscConfig+0x240>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d005      	beq.n	8003526 <HAL_RCC_OscConfig+0x152>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	2b01      	cmp	r3, #1
 8003520:	d001      	beq.n	8003526 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e1c7      	b.n	80038b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003526:	4b3b      	ldr	r3, [pc, #236]	; (8003614 <HAL_RCC_OscConfig+0x240>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	4937      	ldr	r1, [pc, #220]	; (8003614 <HAL_RCC_OscConfig+0x240>)
 8003536:	4313      	orrs	r3, r2
 8003538:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800353a:	e03a      	b.n	80035b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d020      	beq.n	8003586 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003544:	4b34      	ldr	r3, [pc, #208]	; (8003618 <HAL_RCC_OscConfig+0x244>)
 8003546:	2201      	movs	r2, #1
 8003548:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800354a:	f7fe f9e5 	bl	8001918 <HAL_GetTick>
 800354e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003550:	e008      	b.n	8003564 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003552:	f7fe f9e1 	bl	8001918 <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	2b02      	cmp	r3, #2
 800355e:	d901      	bls.n	8003564 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e1a8      	b.n	80038b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003564:	4b2b      	ldr	r3, [pc, #172]	; (8003614 <HAL_RCC_OscConfig+0x240>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0302 	and.w	r3, r3, #2
 800356c:	2b00      	cmp	r3, #0
 800356e:	d0f0      	beq.n	8003552 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003570:	4b28      	ldr	r3, [pc, #160]	; (8003614 <HAL_RCC_OscConfig+0x240>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	691b      	ldr	r3, [r3, #16]
 800357c:	00db      	lsls	r3, r3, #3
 800357e:	4925      	ldr	r1, [pc, #148]	; (8003614 <HAL_RCC_OscConfig+0x240>)
 8003580:	4313      	orrs	r3, r2
 8003582:	600b      	str	r3, [r1, #0]
 8003584:	e015      	b.n	80035b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003586:	4b24      	ldr	r3, [pc, #144]	; (8003618 <HAL_RCC_OscConfig+0x244>)
 8003588:	2200      	movs	r2, #0
 800358a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800358c:	f7fe f9c4 	bl	8001918 <HAL_GetTick>
 8003590:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003592:	e008      	b.n	80035a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003594:	f7fe f9c0 	bl	8001918 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d901      	bls.n	80035a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e187      	b.n	80038b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035a6:	4b1b      	ldr	r3, [pc, #108]	; (8003614 <HAL_RCC_OscConfig+0x240>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1f0      	bne.n	8003594 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0308 	and.w	r3, r3, #8
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d036      	beq.n	800362c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	695b      	ldr	r3, [r3, #20]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d016      	beq.n	80035f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035c6:	4b15      	ldr	r3, [pc, #84]	; (800361c <HAL_RCC_OscConfig+0x248>)
 80035c8:	2201      	movs	r2, #1
 80035ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035cc:	f7fe f9a4 	bl	8001918 <HAL_GetTick>
 80035d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035d2:	e008      	b.n	80035e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035d4:	f7fe f9a0 	bl	8001918 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d901      	bls.n	80035e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e167      	b.n	80038b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035e6:	4b0b      	ldr	r3, [pc, #44]	; (8003614 <HAL_RCC_OscConfig+0x240>)
 80035e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035ea:	f003 0302 	and.w	r3, r3, #2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d0f0      	beq.n	80035d4 <HAL_RCC_OscConfig+0x200>
 80035f2:	e01b      	b.n	800362c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035f4:	4b09      	ldr	r3, [pc, #36]	; (800361c <HAL_RCC_OscConfig+0x248>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035fa:	f7fe f98d 	bl	8001918 <HAL_GetTick>
 80035fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003600:	e00e      	b.n	8003620 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003602:	f7fe f989 	bl	8001918 <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	2b02      	cmp	r3, #2
 800360e:	d907      	bls.n	8003620 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	e150      	b.n	80038b6 <HAL_RCC_OscConfig+0x4e2>
 8003614:	40023800 	.word	0x40023800
 8003618:	42470000 	.word	0x42470000
 800361c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003620:	4b88      	ldr	r3, [pc, #544]	; (8003844 <HAL_RCC_OscConfig+0x470>)
 8003622:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003624:	f003 0302 	and.w	r3, r3, #2
 8003628:	2b00      	cmp	r3, #0
 800362a:	d1ea      	bne.n	8003602 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0304 	and.w	r3, r3, #4
 8003634:	2b00      	cmp	r3, #0
 8003636:	f000 8097 	beq.w	8003768 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800363a:	2300      	movs	r3, #0
 800363c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800363e:	4b81      	ldr	r3, [pc, #516]	; (8003844 <HAL_RCC_OscConfig+0x470>)
 8003640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d10f      	bne.n	800366a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800364a:	2300      	movs	r3, #0
 800364c:	60bb      	str	r3, [r7, #8]
 800364e:	4b7d      	ldr	r3, [pc, #500]	; (8003844 <HAL_RCC_OscConfig+0x470>)
 8003650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003652:	4a7c      	ldr	r2, [pc, #496]	; (8003844 <HAL_RCC_OscConfig+0x470>)
 8003654:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003658:	6413      	str	r3, [r2, #64]	; 0x40
 800365a:	4b7a      	ldr	r3, [pc, #488]	; (8003844 <HAL_RCC_OscConfig+0x470>)
 800365c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003662:	60bb      	str	r3, [r7, #8]
 8003664:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003666:	2301      	movs	r3, #1
 8003668:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800366a:	4b77      	ldr	r3, [pc, #476]	; (8003848 <HAL_RCC_OscConfig+0x474>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003672:	2b00      	cmp	r3, #0
 8003674:	d118      	bne.n	80036a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003676:	4b74      	ldr	r3, [pc, #464]	; (8003848 <HAL_RCC_OscConfig+0x474>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a73      	ldr	r2, [pc, #460]	; (8003848 <HAL_RCC_OscConfig+0x474>)
 800367c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003680:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003682:	f7fe f949 	bl	8001918 <HAL_GetTick>
 8003686:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003688:	e008      	b.n	800369c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800368a:	f7fe f945 	bl	8001918 <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	2b02      	cmp	r3, #2
 8003696:	d901      	bls.n	800369c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e10c      	b.n	80038b6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800369c:	4b6a      	ldr	r3, [pc, #424]	; (8003848 <HAL_RCC_OscConfig+0x474>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d0f0      	beq.n	800368a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d106      	bne.n	80036be <HAL_RCC_OscConfig+0x2ea>
 80036b0:	4b64      	ldr	r3, [pc, #400]	; (8003844 <HAL_RCC_OscConfig+0x470>)
 80036b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b4:	4a63      	ldr	r2, [pc, #396]	; (8003844 <HAL_RCC_OscConfig+0x470>)
 80036b6:	f043 0301 	orr.w	r3, r3, #1
 80036ba:	6713      	str	r3, [r2, #112]	; 0x70
 80036bc:	e01c      	b.n	80036f8 <HAL_RCC_OscConfig+0x324>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	2b05      	cmp	r3, #5
 80036c4:	d10c      	bne.n	80036e0 <HAL_RCC_OscConfig+0x30c>
 80036c6:	4b5f      	ldr	r3, [pc, #380]	; (8003844 <HAL_RCC_OscConfig+0x470>)
 80036c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ca:	4a5e      	ldr	r2, [pc, #376]	; (8003844 <HAL_RCC_OscConfig+0x470>)
 80036cc:	f043 0304 	orr.w	r3, r3, #4
 80036d0:	6713      	str	r3, [r2, #112]	; 0x70
 80036d2:	4b5c      	ldr	r3, [pc, #368]	; (8003844 <HAL_RCC_OscConfig+0x470>)
 80036d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d6:	4a5b      	ldr	r2, [pc, #364]	; (8003844 <HAL_RCC_OscConfig+0x470>)
 80036d8:	f043 0301 	orr.w	r3, r3, #1
 80036dc:	6713      	str	r3, [r2, #112]	; 0x70
 80036de:	e00b      	b.n	80036f8 <HAL_RCC_OscConfig+0x324>
 80036e0:	4b58      	ldr	r3, [pc, #352]	; (8003844 <HAL_RCC_OscConfig+0x470>)
 80036e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e4:	4a57      	ldr	r2, [pc, #348]	; (8003844 <HAL_RCC_OscConfig+0x470>)
 80036e6:	f023 0301 	bic.w	r3, r3, #1
 80036ea:	6713      	str	r3, [r2, #112]	; 0x70
 80036ec:	4b55      	ldr	r3, [pc, #340]	; (8003844 <HAL_RCC_OscConfig+0x470>)
 80036ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f0:	4a54      	ldr	r2, [pc, #336]	; (8003844 <HAL_RCC_OscConfig+0x470>)
 80036f2:	f023 0304 	bic.w	r3, r3, #4
 80036f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d015      	beq.n	800372c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003700:	f7fe f90a 	bl	8001918 <HAL_GetTick>
 8003704:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003706:	e00a      	b.n	800371e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003708:	f7fe f906 	bl	8001918 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	f241 3288 	movw	r2, #5000	; 0x1388
 8003716:	4293      	cmp	r3, r2
 8003718:	d901      	bls.n	800371e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e0cb      	b.n	80038b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800371e:	4b49      	ldr	r3, [pc, #292]	; (8003844 <HAL_RCC_OscConfig+0x470>)
 8003720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d0ee      	beq.n	8003708 <HAL_RCC_OscConfig+0x334>
 800372a:	e014      	b.n	8003756 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800372c:	f7fe f8f4 	bl	8001918 <HAL_GetTick>
 8003730:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003732:	e00a      	b.n	800374a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003734:	f7fe f8f0 	bl	8001918 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003742:	4293      	cmp	r3, r2
 8003744:	d901      	bls.n	800374a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e0b5      	b.n	80038b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800374a:	4b3e      	ldr	r3, [pc, #248]	; (8003844 <HAL_RCC_OscConfig+0x470>)
 800374c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800374e:	f003 0302 	and.w	r3, r3, #2
 8003752:	2b00      	cmp	r3, #0
 8003754:	d1ee      	bne.n	8003734 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003756:	7dfb      	ldrb	r3, [r7, #23]
 8003758:	2b01      	cmp	r3, #1
 800375a:	d105      	bne.n	8003768 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800375c:	4b39      	ldr	r3, [pc, #228]	; (8003844 <HAL_RCC_OscConfig+0x470>)
 800375e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003760:	4a38      	ldr	r2, [pc, #224]	; (8003844 <HAL_RCC_OscConfig+0x470>)
 8003762:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003766:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	699b      	ldr	r3, [r3, #24]
 800376c:	2b00      	cmp	r3, #0
 800376e:	f000 80a1 	beq.w	80038b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003772:	4b34      	ldr	r3, [pc, #208]	; (8003844 <HAL_RCC_OscConfig+0x470>)
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f003 030c 	and.w	r3, r3, #12
 800377a:	2b08      	cmp	r3, #8
 800377c:	d05c      	beq.n	8003838 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	699b      	ldr	r3, [r3, #24]
 8003782:	2b02      	cmp	r3, #2
 8003784:	d141      	bne.n	800380a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003786:	4b31      	ldr	r3, [pc, #196]	; (800384c <HAL_RCC_OscConfig+0x478>)
 8003788:	2200      	movs	r2, #0
 800378a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800378c:	f7fe f8c4 	bl	8001918 <HAL_GetTick>
 8003790:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003792:	e008      	b.n	80037a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003794:	f7fe f8c0 	bl	8001918 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e087      	b.n	80038b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037a6:	4b27      	ldr	r3, [pc, #156]	; (8003844 <HAL_RCC_OscConfig+0x470>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1f0      	bne.n	8003794 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	69da      	ldr	r2, [r3, #28]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a1b      	ldr	r3, [r3, #32]
 80037ba:	431a      	orrs	r2, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c0:	019b      	lsls	r3, r3, #6
 80037c2:	431a      	orrs	r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c8:	085b      	lsrs	r3, r3, #1
 80037ca:	3b01      	subs	r3, #1
 80037cc:	041b      	lsls	r3, r3, #16
 80037ce:	431a      	orrs	r2, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d4:	061b      	lsls	r3, r3, #24
 80037d6:	491b      	ldr	r1, [pc, #108]	; (8003844 <HAL_RCC_OscConfig+0x470>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037dc:	4b1b      	ldr	r3, [pc, #108]	; (800384c <HAL_RCC_OscConfig+0x478>)
 80037de:	2201      	movs	r2, #1
 80037e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e2:	f7fe f899 	bl	8001918 <HAL_GetTick>
 80037e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037e8:	e008      	b.n	80037fc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037ea:	f7fe f895 	bl	8001918 <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d901      	bls.n	80037fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e05c      	b.n	80038b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037fc:	4b11      	ldr	r3, [pc, #68]	; (8003844 <HAL_RCC_OscConfig+0x470>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d0f0      	beq.n	80037ea <HAL_RCC_OscConfig+0x416>
 8003808:	e054      	b.n	80038b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800380a:	4b10      	ldr	r3, [pc, #64]	; (800384c <HAL_RCC_OscConfig+0x478>)
 800380c:	2200      	movs	r2, #0
 800380e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003810:	f7fe f882 	bl	8001918 <HAL_GetTick>
 8003814:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003816:	e008      	b.n	800382a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003818:	f7fe f87e 	bl	8001918 <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	2b02      	cmp	r3, #2
 8003824:	d901      	bls.n	800382a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e045      	b.n	80038b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800382a:	4b06      	ldr	r3, [pc, #24]	; (8003844 <HAL_RCC_OscConfig+0x470>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d1f0      	bne.n	8003818 <HAL_RCC_OscConfig+0x444>
 8003836:	e03d      	b.n	80038b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	699b      	ldr	r3, [r3, #24]
 800383c:	2b01      	cmp	r3, #1
 800383e:	d107      	bne.n	8003850 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e038      	b.n	80038b6 <HAL_RCC_OscConfig+0x4e2>
 8003844:	40023800 	.word	0x40023800
 8003848:	40007000 	.word	0x40007000
 800384c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003850:	4b1b      	ldr	r3, [pc, #108]	; (80038c0 <HAL_RCC_OscConfig+0x4ec>)
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	2b01      	cmp	r3, #1
 800385c:	d028      	beq.n	80038b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003868:	429a      	cmp	r2, r3
 800386a:	d121      	bne.n	80038b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003876:	429a      	cmp	r2, r3
 8003878:	d11a      	bne.n	80038b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800387a:	68fa      	ldr	r2, [r7, #12]
 800387c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003880:	4013      	ands	r3, r2
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003886:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003888:	4293      	cmp	r3, r2
 800388a:	d111      	bne.n	80038b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003896:	085b      	lsrs	r3, r3, #1
 8003898:	3b01      	subs	r3, #1
 800389a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800389c:	429a      	cmp	r2, r3
 800389e:	d107      	bne.n	80038b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d001      	beq.n	80038b4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e000      	b.n	80038b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3718      	adds	r7, #24
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	40023800 	.word	0x40023800

080038c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d101      	bne.n	80038d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e0cc      	b.n	8003a72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038d8:	4b68      	ldr	r3, [pc, #416]	; (8003a7c <HAL_RCC_ClockConfig+0x1b8>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0307 	and.w	r3, r3, #7
 80038e0:	683a      	ldr	r2, [r7, #0]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d90c      	bls.n	8003900 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038e6:	4b65      	ldr	r3, [pc, #404]	; (8003a7c <HAL_RCC_ClockConfig+0x1b8>)
 80038e8:	683a      	ldr	r2, [r7, #0]
 80038ea:	b2d2      	uxtb	r2, r2
 80038ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ee:	4b63      	ldr	r3, [pc, #396]	; (8003a7c <HAL_RCC_ClockConfig+0x1b8>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0307 	and.w	r3, r3, #7
 80038f6:	683a      	ldr	r2, [r7, #0]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d001      	beq.n	8003900 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e0b8      	b.n	8003a72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0302 	and.w	r3, r3, #2
 8003908:	2b00      	cmp	r3, #0
 800390a:	d020      	beq.n	800394e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0304 	and.w	r3, r3, #4
 8003914:	2b00      	cmp	r3, #0
 8003916:	d005      	beq.n	8003924 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003918:	4b59      	ldr	r3, [pc, #356]	; (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	4a58      	ldr	r2, [pc, #352]	; (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 800391e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003922:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0308 	and.w	r3, r3, #8
 800392c:	2b00      	cmp	r3, #0
 800392e:	d005      	beq.n	800393c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003930:	4b53      	ldr	r3, [pc, #332]	; (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	4a52      	ldr	r2, [pc, #328]	; (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 8003936:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800393a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800393c:	4b50      	ldr	r3, [pc, #320]	; (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	494d      	ldr	r1, [pc, #308]	; (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 800394a:	4313      	orrs	r3, r2
 800394c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	2b00      	cmp	r3, #0
 8003958:	d044      	beq.n	80039e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	2b01      	cmp	r3, #1
 8003960:	d107      	bne.n	8003972 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003962:	4b47      	ldr	r3, [pc, #284]	; (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d119      	bne.n	80039a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e07f      	b.n	8003a72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	2b02      	cmp	r3, #2
 8003978:	d003      	beq.n	8003982 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800397e:	2b03      	cmp	r3, #3
 8003980:	d107      	bne.n	8003992 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003982:	4b3f      	ldr	r3, [pc, #252]	; (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d109      	bne.n	80039a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e06f      	b.n	8003a72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003992:	4b3b      	ldr	r3, [pc, #236]	; (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d101      	bne.n	80039a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e067      	b.n	8003a72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039a2:	4b37      	ldr	r3, [pc, #220]	; (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f023 0203 	bic.w	r2, r3, #3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	4934      	ldr	r1, [pc, #208]	; (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039b4:	f7fd ffb0 	bl	8001918 <HAL_GetTick>
 80039b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ba:	e00a      	b.n	80039d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039bc:	f7fd ffac 	bl	8001918 <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d901      	bls.n	80039d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e04f      	b.n	8003a72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039d2:	4b2b      	ldr	r3, [pc, #172]	; (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f003 020c 	and.w	r2, r3, #12
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d1eb      	bne.n	80039bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039e4:	4b25      	ldr	r3, [pc, #148]	; (8003a7c <HAL_RCC_ClockConfig+0x1b8>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0307 	and.w	r3, r3, #7
 80039ec:	683a      	ldr	r2, [r7, #0]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d20c      	bcs.n	8003a0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039f2:	4b22      	ldr	r3, [pc, #136]	; (8003a7c <HAL_RCC_ClockConfig+0x1b8>)
 80039f4:	683a      	ldr	r2, [r7, #0]
 80039f6:	b2d2      	uxtb	r2, r2
 80039f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039fa:	4b20      	ldr	r3, [pc, #128]	; (8003a7c <HAL_RCC_ClockConfig+0x1b8>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0307 	and.w	r3, r3, #7
 8003a02:	683a      	ldr	r2, [r7, #0]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d001      	beq.n	8003a0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e032      	b.n	8003a72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0304 	and.w	r3, r3, #4
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d008      	beq.n	8003a2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a18:	4b19      	ldr	r3, [pc, #100]	; (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	4916      	ldr	r1, [pc, #88]	; (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0308 	and.w	r3, r3, #8
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d009      	beq.n	8003a4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a36:	4b12      	ldr	r3, [pc, #72]	; (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	00db      	lsls	r3, r3, #3
 8003a44:	490e      	ldr	r1, [pc, #56]	; (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a4a:	f000 f821 	bl	8003a90 <HAL_RCC_GetSysClockFreq>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	4b0b      	ldr	r3, [pc, #44]	; (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	091b      	lsrs	r3, r3, #4
 8003a56:	f003 030f 	and.w	r3, r3, #15
 8003a5a:	490a      	ldr	r1, [pc, #40]	; (8003a84 <HAL_RCC_ClockConfig+0x1c0>)
 8003a5c:	5ccb      	ldrb	r3, [r1, r3]
 8003a5e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a62:	4a09      	ldr	r2, [pc, #36]	; (8003a88 <HAL_RCC_ClockConfig+0x1c4>)
 8003a64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a66:	4b09      	ldr	r3, [pc, #36]	; (8003a8c <HAL_RCC_ClockConfig+0x1c8>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7fd fde4 	bl	8001638 <HAL_InitTick>

  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3710      	adds	r7, #16
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	40023c00 	.word	0x40023c00
 8003a80:	40023800 	.word	0x40023800
 8003a84:	0800cc60 	.word	0x0800cc60
 8003a88:	20000000 	.word	0x20000000
 8003a8c:	20000004 	.word	0x20000004

08003a90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a94:	b094      	sub	sp, #80	; 0x50
 8003a96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	647b      	str	r3, [r7, #68]	; 0x44
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003aa8:	4b79      	ldr	r3, [pc, #484]	; (8003c90 <HAL_RCC_GetSysClockFreq+0x200>)
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	f003 030c 	and.w	r3, r3, #12
 8003ab0:	2b08      	cmp	r3, #8
 8003ab2:	d00d      	beq.n	8003ad0 <HAL_RCC_GetSysClockFreq+0x40>
 8003ab4:	2b08      	cmp	r3, #8
 8003ab6:	f200 80e1 	bhi.w	8003c7c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d002      	beq.n	8003ac4 <HAL_RCC_GetSysClockFreq+0x34>
 8003abe:	2b04      	cmp	r3, #4
 8003ac0:	d003      	beq.n	8003aca <HAL_RCC_GetSysClockFreq+0x3a>
 8003ac2:	e0db      	b.n	8003c7c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ac4:	4b73      	ldr	r3, [pc, #460]	; (8003c94 <HAL_RCC_GetSysClockFreq+0x204>)
 8003ac6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003ac8:	e0db      	b.n	8003c82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003aca:	4b73      	ldr	r3, [pc, #460]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x208>)
 8003acc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ace:	e0d8      	b.n	8003c82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ad0:	4b6f      	ldr	r3, [pc, #444]	; (8003c90 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ad8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ada:	4b6d      	ldr	r3, [pc, #436]	; (8003c90 <HAL_RCC_GetSysClockFreq+0x200>)
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d063      	beq.n	8003bae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ae6:	4b6a      	ldr	r3, [pc, #424]	; (8003c90 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	099b      	lsrs	r3, r3, #6
 8003aec:	2200      	movs	r2, #0
 8003aee:	63bb      	str	r3, [r7, #56]	; 0x38
 8003af0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003af4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003af8:	633b      	str	r3, [r7, #48]	; 0x30
 8003afa:	2300      	movs	r3, #0
 8003afc:	637b      	str	r3, [r7, #52]	; 0x34
 8003afe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003b02:	4622      	mov	r2, r4
 8003b04:	462b      	mov	r3, r5
 8003b06:	f04f 0000 	mov.w	r0, #0
 8003b0a:	f04f 0100 	mov.w	r1, #0
 8003b0e:	0159      	lsls	r1, r3, #5
 8003b10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b14:	0150      	lsls	r0, r2, #5
 8003b16:	4602      	mov	r2, r0
 8003b18:	460b      	mov	r3, r1
 8003b1a:	4621      	mov	r1, r4
 8003b1c:	1a51      	subs	r1, r2, r1
 8003b1e:	6139      	str	r1, [r7, #16]
 8003b20:	4629      	mov	r1, r5
 8003b22:	eb63 0301 	sbc.w	r3, r3, r1
 8003b26:	617b      	str	r3, [r7, #20]
 8003b28:	f04f 0200 	mov.w	r2, #0
 8003b2c:	f04f 0300 	mov.w	r3, #0
 8003b30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b34:	4659      	mov	r1, fp
 8003b36:	018b      	lsls	r3, r1, #6
 8003b38:	4651      	mov	r1, sl
 8003b3a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b3e:	4651      	mov	r1, sl
 8003b40:	018a      	lsls	r2, r1, #6
 8003b42:	4651      	mov	r1, sl
 8003b44:	ebb2 0801 	subs.w	r8, r2, r1
 8003b48:	4659      	mov	r1, fp
 8003b4a:	eb63 0901 	sbc.w	r9, r3, r1
 8003b4e:	f04f 0200 	mov.w	r2, #0
 8003b52:	f04f 0300 	mov.w	r3, #0
 8003b56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b62:	4690      	mov	r8, r2
 8003b64:	4699      	mov	r9, r3
 8003b66:	4623      	mov	r3, r4
 8003b68:	eb18 0303 	adds.w	r3, r8, r3
 8003b6c:	60bb      	str	r3, [r7, #8]
 8003b6e:	462b      	mov	r3, r5
 8003b70:	eb49 0303 	adc.w	r3, r9, r3
 8003b74:	60fb      	str	r3, [r7, #12]
 8003b76:	f04f 0200 	mov.w	r2, #0
 8003b7a:	f04f 0300 	mov.w	r3, #0
 8003b7e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003b82:	4629      	mov	r1, r5
 8003b84:	024b      	lsls	r3, r1, #9
 8003b86:	4621      	mov	r1, r4
 8003b88:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b8c:	4621      	mov	r1, r4
 8003b8e:	024a      	lsls	r2, r1, #9
 8003b90:	4610      	mov	r0, r2
 8003b92:	4619      	mov	r1, r3
 8003b94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b96:	2200      	movs	r2, #0
 8003b98:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b9c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ba0:	f7fc fd2a 	bl	80005f8 <__aeabi_uldivmod>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	4613      	mov	r3, r2
 8003baa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bac:	e058      	b.n	8003c60 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bae:	4b38      	ldr	r3, [pc, #224]	; (8003c90 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	099b      	lsrs	r3, r3, #6
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	4611      	mov	r1, r2
 8003bba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003bbe:	623b      	str	r3, [r7, #32]
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	627b      	str	r3, [r7, #36]	; 0x24
 8003bc4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003bc8:	4642      	mov	r2, r8
 8003bca:	464b      	mov	r3, r9
 8003bcc:	f04f 0000 	mov.w	r0, #0
 8003bd0:	f04f 0100 	mov.w	r1, #0
 8003bd4:	0159      	lsls	r1, r3, #5
 8003bd6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bda:	0150      	lsls	r0, r2, #5
 8003bdc:	4602      	mov	r2, r0
 8003bde:	460b      	mov	r3, r1
 8003be0:	4641      	mov	r1, r8
 8003be2:	ebb2 0a01 	subs.w	sl, r2, r1
 8003be6:	4649      	mov	r1, r9
 8003be8:	eb63 0b01 	sbc.w	fp, r3, r1
 8003bec:	f04f 0200 	mov.w	r2, #0
 8003bf0:	f04f 0300 	mov.w	r3, #0
 8003bf4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003bf8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003bfc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003c00:	ebb2 040a 	subs.w	r4, r2, sl
 8003c04:	eb63 050b 	sbc.w	r5, r3, fp
 8003c08:	f04f 0200 	mov.w	r2, #0
 8003c0c:	f04f 0300 	mov.w	r3, #0
 8003c10:	00eb      	lsls	r3, r5, #3
 8003c12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c16:	00e2      	lsls	r2, r4, #3
 8003c18:	4614      	mov	r4, r2
 8003c1a:	461d      	mov	r5, r3
 8003c1c:	4643      	mov	r3, r8
 8003c1e:	18e3      	adds	r3, r4, r3
 8003c20:	603b      	str	r3, [r7, #0]
 8003c22:	464b      	mov	r3, r9
 8003c24:	eb45 0303 	adc.w	r3, r5, r3
 8003c28:	607b      	str	r3, [r7, #4]
 8003c2a:	f04f 0200 	mov.w	r2, #0
 8003c2e:	f04f 0300 	mov.w	r3, #0
 8003c32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c36:	4629      	mov	r1, r5
 8003c38:	028b      	lsls	r3, r1, #10
 8003c3a:	4621      	mov	r1, r4
 8003c3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c40:	4621      	mov	r1, r4
 8003c42:	028a      	lsls	r2, r1, #10
 8003c44:	4610      	mov	r0, r2
 8003c46:	4619      	mov	r1, r3
 8003c48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	61bb      	str	r3, [r7, #24]
 8003c4e:	61fa      	str	r2, [r7, #28]
 8003c50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c54:	f7fc fcd0 	bl	80005f8 <__aeabi_uldivmod>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	460b      	mov	r3, r1
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c60:	4b0b      	ldr	r3, [pc, #44]	; (8003c90 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	0c1b      	lsrs	r3, r3, #16
 8003c66:	f003 0303 	and.w	r3, r3, #3
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	005b      	lsls	r3, r3, #1
 8003c6e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003c70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c78:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c7a:	e002      	b.n	8003c82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c7c:	4b05      	ldr	r3, [pc, #20]	; (8003c94 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c7e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3750      	adds	r7, #80	; 0x50
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c8e:	bf00      	nop
 8003c90:	40023800 	.word	0x40023800
 8003c94:	00f42400 	.word	0x00f42400
 8003c98:	007a1200 	.word	0x007a1200

08003c9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ca0:	4b03      	ldr	r3, [pc, #12]	; (8003cb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	20000000 	.word	0x20000000

08003cb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003cb8:	f7ff fff0 	bl	8003c9c <HAL_RCC_GetHCLKFreq>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	4b05      	ldr	r3, [pc, #20]	; (8003cd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	0a9b      	lsrs	r3, r3, #10
 8003cc4:	f003 0307 	and.w	r3, r3, #7
 8003cc8:	4903      	ldr	r1, [pc, #12]	; (8003cd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cca:	5ccb      	ldrb	r3, [r1, r3]
 8003ccc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	40023800 	.word	0x40023800
 8003cd8:	0800cc70 	.word	0x0800cc70

08003cdc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	220f      	movs	r2, #15
 8003cea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003cec:	4b12      	ldr	r3, [pc, #72]	; (8003d38 <HAL_RCC_GetClockConfig+0x5c>)
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f003 0203 	and.w	r2, r3, #3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003cf8:	4b0f      	ldr	r3, [pc, #60]	; (8003d38 <HAL_RCC_GetClockConfig+0x5c>)
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003d04:	4b0c      	ldr	r3, [pc, #48]	; (8003d38 <HAL_RCC_GetClockConfig+0x5c>)
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003d10:	4b09      	ldr	r3, [pc, #36]	; (8003d38 <HAL_RCC_GetClockConfig+0x5c>)
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	08db      	lsrs	r3, r3, #3
 8003d16:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003d1e:	4b07      	ldr	r3, [pc, #28]	; (8003d3c <HAL_RCC_GetClockConfig+0x60>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0207 	and.w	r2, r3, #7
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	601a      	str	r2, [r3, #0]
}
 8003d2a:	bf00      	nop
 8003d2c:	370c      	adds	r7, #12
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	40023800 	.word	0x40023800
 8003d3c:	40023c00 	.word	0x40023c00

08003d40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d101      	bne.n	8003d52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e07b      	b.n	8003e4a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d108      	bne.n	8003d6c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d62:	d009      	beq.n	8003d78 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	61da      	str	r2, [r3, #28]
 8003d6a:	e005      	b.n	8003d78 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d106      	bne.n	8003d98 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f7fd fc08 	bl	80015a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2202      	movs	r2, #2
 8003d9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003dc0:	431a      	orrs	r2, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dca:	431a      	orrs	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	691b      	ldr	r3, [r3, #16]
 8003dd0:	f003 0302 	and.w	r3, r3, #2
 8003dd4:	431a      	orrs	r2, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	695b      	ldr	r3, [r3, #20]
 8003dda:	f003 0301 	and.w	r3, r3, #1
 8003dde:	431a      	orrs	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	699b      	ldr	r3, [r3, #24]
 8003de4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003de8:	431a      	orrs	r2, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	69db      	ldr	r3, [r3, #28]
 8003dee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003df2:	431a      	orrs	r2, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a1b      	ldr	r3, [r3, #32]
 8003df8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dfc:	ea42 0103 	orr.w	r1, r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e04:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	430a      	orrs	r2, r1
 8003e0e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	699b      	ldr	r3, [r3, #24]
 8003e14:	0c1b      	lsrs	r3, r3, #16
 8003e16:	f003 0104 	and.w	r1, r3, #4
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1e:	f003 0210 	and.w	r2, r3, #16
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	430a      	orrs	r2, r1
 8003e28:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	69da      	ldr	r2, [r3, #28]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e38:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3708      	adds	r7, #8
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e52:	b580      	push	{r7, lr}
 8003e54:	b088      	sub	sp, #32
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	60f8      	str	r0, [r7, #12]
 8003e5a:	60b9      	str	r1, [r7, #8]
 8003e5c:	603b      	str	r3, [r7, #0]
 8003e5e:	4613      	mov	r3, r2
 8003e60:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e62:	2300      	movs	r3, #0
 8003e64:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d101      	bne.n	8003e74 <HAL_SPI_Transmit+0x22>
 8003e70:	2302      	movs	r3, #2
 8003e72:	e126      	b.n	80040c2 <HAL_SPI_Transmit+0x270>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e7c:	f7fd fd4c 	bl	8001918 <HAL_GetTick>
 8003e80:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003e82:	88fb      	ldrh	r3, [r7, #6]
 8003e84:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d002      	beq.n	8003e98 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003e92:	2302      	movs	r3, #2
 8003e94:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e96:	e10b      	b.n	80040b0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d002      	beq.n	8003ea4 <HAL_SPI_Transmit+0x52>
 8003e9e:	88fb      	ldrh	r3, [r7, #6]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d102      	bne.n	8003eaa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003ea8:	e102      	b.n	80040b0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2203      	movs	r2, #3
 8003eae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	68ba      	ldr	r2, [r7, #8]
 8003ebc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	88fa      	ldrh	r2, [r7, #6]
 8003ec2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	88fa      	ldrh	r2, [r7, #6]
 8003ec8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ef0:	d10f      	bne.n	8003f12 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f00:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f10:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f1c:	2b40      	cmp	r3, #64	; 0x40
 8003f1e:	d007      	beq.n	8003f30 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f2e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f38:	d14b      	bne.n	8003fd2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d002      	beq.n	8003f48 <HAL_SPI_Transmit+0xf6>
 8003f42:	8afb      	ldrh	r3, [r7, #22]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d13e      	bne.n	8003fc6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f4c:	881a      	ldrh	r2, [r3, #0]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f58:	1c9a      	adds	r2, r3, #2
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	3b01      	subs	r3, #1
 8003f66:	b29a      	uxth	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003f6c:	e02b      	b.n	8003fc6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f003 0302 	and.w	r3, r3, #2
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d112      	bne.n	8003fa2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f80:	881a      	ldrh	r2, [r3, #0]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8c:	1c9a      	adds	r2, r3, #2
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	3b01      	subs	r3, #1
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003fa0:	e011      	b.n	8003fc6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fa2:	f7fd fcb9 	bl	8001918 <HAL_GetTick>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	683a      	ldr	r2, [r7, #0]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d803      	bhi.n	8003fba <HAL_SPI_Transmit+0x168>
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fb8:	d102      	bne.n	8003fc0 <HAL_SPI_Transmit+0x16e>
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d102      	bne.n	8003fc6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003fc4:	e074      	b.n	80040b0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d1ce      	bne.n	8003f6e <HAL_SPI_Transmit+0x11c>
 8003fd0:	e04c      	b.n	800406c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d002      	beq.n	8003fe0 <HAL_SPI_Transmit+0x18e>
 8003fda:	8afb      	ldrh	r3, [r7, #22]
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d140      	bne.n	8004062 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	330c      	adds	r3, #12
 8003fea:	7812      	ldrb	r2, [r2, #0]
 8003fec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff2:	1c5a      	adds	r2, r3, #1
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	3b01      	subs	r3, #1
 8004000:	b29a      	uxth	r2, r3
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004006:	e02c      	b.n	8004062 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	f003 0302 	and.w	r3, r3, #2
 8004012:	2b02      	cmp	r3, #2
 8004014:	d113      	bne.n	800403e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	330c      	adds	r3, #12
 8004020:	7812      	ldrb	r2, [r2, #0]
 8004022:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004028:	1c5a      	adds	r2, r3, #1
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004032:	b29b      	uxth	r3, r3
 8004034:	3b01      	subs	r3, #1
 8004036:	b29a      	uxth	r2, r3
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	86da      	strh	r2, [r3, #54]	; 0x36
 800403c:	e011      	b.n	8004062 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800403e:	f7fd fc6b 	bl	8001918 <HAL_GetTick>
 8004042:	4602      	mov	r2, r0
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	683a      	ldr	r2, [r7, #0]
 800404a:	429a      	cmp	r2, r3
 800404c:	d803      	bhi.n	8004056 <HAL_SPI_Transmit+0x204>
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004054:	d102      	bne.n	800405c <HAL_SPI_Transmit+0x20a>
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d102      	bne.n	8004062 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004060:	e026      	b.n	80040b0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004066:	b29b      	uxth	r3, r3
 8004068:	2b00      	cmp	r3, #0
 800406a:	d1cd      	bne.n	8004008 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800406c:	69ba      	ldr	r2, [r7, #24]
 800406e:	6839      	ldr	r1, [r7, #0]
 8004070:	68f8      	ldr	r0, [r7, #12]
 8004072:	f000 fbcb 	bl	800480c <SPI_EndRxTxTransaction>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d002      	beq.n	8004082 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2220      	movs	r2, #32
 8004080:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d10a      	bne.n	80040a0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800408a:	2300      	movs	r3, #0
 800408c:	613b      	str	r3, [r7, #16]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	613b      	str	r3, [r7, #16]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	613b      	str	r3, [r7, #16]
 800409e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d002      	beq.n	80040ae <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	77fb      	strb	r3, [r7, #31]
 80040ac:	e000      	b.n	80040b0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80040ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80040c0:	7ffb      	ldrb	r3, [r7, #31]
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3720      	adds	r7, #32
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}

080040ca <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040ca:	b580      	push	{r7, lr}
 80040cc:	b088      	sub	sp, #32
 80040ce:	af02      	add	r7, sp, #8
 80040d0:	60f8      	str	r0, [r7, #12]
 80040d2:	60b9      	str	r1, [r7, #8]
 80040d4:	603b      	str	r3, [r7, #0]
 80040d6:	4613      	mov	r3, r2
 80040d8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80040da:	2300      	movs	r3, #0
 80040dc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040e6:	d112      	bne.n	800410e <HAL_SPI_Receive+0x44>
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d10e      	bne.n	800410e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2204      	movs	r2, #4
 80040f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80040f8:	88fa      	ldrh	r2, [r7, #6]
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	9300      	str	r3, [sp, #0]
 80040fe:	4613      	mov	r3, r2
 8004100:	68ba      	ldr	r2, [r7, #8]
 8004102:	68b9      	ldr	r1, [r7, #8]
 8004104:	68f8      	ldr	r0, [r7, #12]
 8004106:	f000 f8f1 	bl	80042ec <HAL_SPI_TransmitReceive>
 800410a:	4603      	mov	r3, r0
 800410c:	e0ea      	b.n	80042e4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004114:	2b01      	cmp	r3, #1
 8004116:	d101      	bne.n	800411c <HAL_SPI_Receive+0x52>
 8004118:	2302      	movs	r3, #2
 800411a:	e0e3      	b.n	80042e4 <HAL_SPI_Receive+0x21a>
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004124:	f7fd fbf8 	bl	8001918 <HAL_GetTick>
 8004128:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004130:	b2db      	uxtb	r3, r3
 8004132:	2b01      	cmp	r3, #1
 8004134:	d002      	beq.n	800413c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004136:	2302      	movs	r3, #2
 8004138:	75fb      	strb	r3, [r7, #23]
    goto error;
 800413a:	e0ca      	b.n	80042d2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d002      	beq.n	8004148 <HAL_SPI_Receive+0x7e>
 8004142:	88fb      	ldrh	r3, [r7, #6]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d102      	bne.n	800414e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800414c:	e0c1      	b.n	80042d2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2204      	movs	r2, #4
 8004152:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2200      	movs	r2, #0
 800415a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	68ba      	ldr	r2, [r7, #8]
 8004160:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	88fa      	ldrh	r2, [r7, #6]
 8004166:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	88fa      	ldrh	r2, [r7, #6]
 800416c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2200      	movs	r2, #0
 8004172:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2200      	movs	r2, #0
 8004178:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2200      	movs	r2, #0
 800417e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2200      	movs	r2, #0
 8004184:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2200      	movs	r2, #0
 800418a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004194:	d10f      	bne.n	80041b6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80041b4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c0:	2b40      	cmp	r3, #64	; 0x40
 80041c2:	d007      	beq.n	80041d4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041d2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d162      	bne.n	80042a2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80041dc:	e02e      	b.n	800423c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	f003 0301 	and.w	r3, r3, #1
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d115      	bne.n	8004218 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f103 020c 	add.w	r2, r3, #12
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f8:	7812      	ldrb	r2, [r2, #0]
 80041fa:	b2d2      	uxtb	r2, r2
 80041fc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004202:	1c5a      	adds	r2, r3, #1
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800420c:	b29b      	uxth	r3, r3
 800420e:	3b01      	subs	r3, #1
 8004210:	b29a      	uxth	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004216:	e011      	b.n	800423c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004218:	f7fd fb7e 	bl	8001918 <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	683a      	ldr	r2, [r7, #0]
 8004224:	429a      	cmp	r2, r3
 8004226:	d803      	bhi.n	8004230 <HAL_SPI_Receive+0x166>
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800422e:	d102      	bne.n	8004236 <HAL_SPI_Receive+0x16c>
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d102      	bne.n	800423c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	75fb      	strb	r3, [r7, #23]
          goto error;
 800423a:	e04a      	b.n	80042d2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004240:	b29b      	uxth	r3, r3
 8004242:	2b00      	cmp	r3, #0
 8004244:	d1cb      	bne.n	80041de <HAL_SPI_Receive+0x114>
 8004246:	e031      	b.n	80042ac <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	f003 0301 	and.w	r3, r3, #1
 8004252:	2b01      	cmp	r3, #1
 8004254:	d113      	bne.n	800427e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	68da      	ldr	r2, [r3, #12]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004260:	b292      	uxth	r2, r2
 8004262:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004268:	1c9a      	adds	r2, r3, #2
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004272:	b29b      	uxth	r3, r3
 8004274:	3b01      	subs	r3, #1
 8004276:	b29a      	uxth	r2, r3
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800427c:	e011      	b.n	80042a2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800427e:	f7fd fb4b 	bl	8001918 <HAL_GetTick>
 8004282:	4602      	mov	r2, r0
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	683a      	ldr	r2, [r7, #0]
 800428a:	429a      	cmp	r2, r3
 800428c:	d803      	bhi.n	8004296 <HAL_SPI_Receive+0x1cc>
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004294:	d102      	bne.n	800429c <HAL_SPI_Receive+0x1d2>
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d102      	bne.n	80042a2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	75fb      	strb	r3, [r7, #23]
          goto error;
 80042a0:	e017      	b.n	80042d2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d1cd      	bne.n	8004248 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80042ac:	693a      	ldr	r2, [r7, #16]
 80042ae:	6839      	ldr	r1, [r7, #0]
 80042b0:	68f8      	ldr	r0, [r7, #12]
 80042b2:	f000 fa45 	bl	8004740 <SPI_EndRxTransaction>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d002      	beq.n	80042c2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2220      	movs	r2, #32
 80042c0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d002      	beq.n	80042d0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	75fb      	strb	r3, [r7, #23]
 80042ce:	e000      	b.n	80042d2 <HAL_SPI_Receive+0x208>
  }

error :
 80042d0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80042e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3718      	adds	r7, #24
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b08c      	sub	sp, #48	; 0x30
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	607a      	str	r2, [r7, #4]
 80042f8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80042fa:	2301      	movs	r3, #1
 80042fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80042fe:	2300      	movs	r3, #0
 8004300:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800430a:	2b01      	cmp	r3, #1
 800430c:	d101      	bne.n	8004312 <HAL_SPI_TransmitReceive+0x26>
 800430e:	2302      	movs	r3, #2
 8004310:	e18a      	b.n	8004628 <HAL_SPI_TransmitReceive+0x33c>
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2201      	movs	r2, #1
 8004316:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800431a:	f7fd fafd 	bl	8001918 <HAL_GetTick>
 800431e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004326:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004330:	887b      	ldrh	r3, [r7, #2]
 8004332:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004334:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004338:	2b01      	cmp	r3, #1
 800433a:	d00f      	beq.n	800435c <HAL_SPI_TransmitReceive+0x70>
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004342:	d107      	bne.n	8004354 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d103      	bne.n	8004354 <HAL_SPI_TransmitReceive+0x68>
 800434c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004350:	2b04      	cmp	r3, #4
 8004352:	d003      	beq.n	800435c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004354:	2302      	movs	r3, #2
 8004356:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800435a:	e15b      	b.n	8004614 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d005      	beq.n	800436e <HAL_SPI_TransmitReceive+0x82>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d002      	beq.n	800436e <HAL_SPI_TransmitReceive+0x82>
 8004368:	887b      	ldrh	r3, [r7, #2]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d103      	bne.n	8004376 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004374:	e14e      	b.n	8004614 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800437c:	b2db      	uxtb	r3, r3
 800437e:	2b04      	cmp	r3, #4
 8004380:	d003      	beq.n	800438a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2205      	movs	r2, #5
 8004386:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	887a      	ldrh	r2, [r7, #2]
 800439a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	887a      	ldrh	r2, [r7, #2]
 80043a0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	68ba      	ldr	r2, [r7, #8]
 80043a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	887a      	ldrh	r2, [r7, #2]
 80043ac:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	887a      	ldrh	r2, [r7, #2]
 80043b2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2200      	movs	r2, #0
 80043b8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2200      	movs	r2, #0
 80043be:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ca:	2b40      	cmp	r3, #64	; 0x40
 80043cc:	d007      	beq.n	80043de <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043dc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043e6:	d178      	bne.n	80044da <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d002      	beq.n	80043f6 <HAL_SPI_TransmitReceive+0x10a>
 80043f0:	8b7b      	ldrh	r3, [r7, #26]
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d166      	bne.n	80044c4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043fa:	881a      	ldrh	r2, [r3, #0]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004406:	1c9a      	adds	r2, r3, #2
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004410:	b29b      	uxth	r3, r3
 8004412:	3b01      	subs	r3, #1
 8004414:	b29a      	uxth	r2, r3
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800441a:	e053      	b.n	80044c4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f003 0302 	and.w	r3, r3, #2
 8004426:	2b02      	cmp	r3, #2
 8004428:	d11b      	bne.n	8004462 <HAL_SPI_TransmitReceive+0x176>
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800442e:	b29b      	uxth	r3, r3
 8004430:	2b00      	cmp	r3, #0
 8004432:	d016      	beq.n	8004462 <HAL_SPI_TransmitReceive+0x176>
 8004434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004436:	2b01      	cmp	r3, #1
 8004438:	d113      	bne.n	8004462 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800443e:	881a      	ldrh	r2, [r3, #0]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444a:	1c9a      	adds	r2, r3, #2
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004454:	b29b      	uxth	r3, r3
 8004456:	3b01      	subs	r3, #1
 8004458:	b29a      	uxth	r2, r3
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800445e:	2300      	movs	r3, #0
 8004460:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	f003 0301 	and.w	r3, r3, #1
 800446c:	2b01      	cmp	r3, #1
 800446e:	d119      	bne.n	80044a4 <HAL_SPI_TransmitReceive+0x1b8>
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004474:	b29b      	uxth	r3, r3
 8004476:	2b00      	cmp	r3, #0
 8004478:	d014      	beq.n	80044a4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	68da      	ldr	r2, [r3, #12]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004484:	b292      	uxth	r2, r2
 8004486:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800448c:	1c9a      	adds	r2, r3, #2
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004496:	b29b      	uxth	r3, r3
 8004498:	3b01      	subs	r3, #1
 800449a:	b29a      	uxth	r2, r3
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80044a0:	2301      	movs	r3, #1
 80044a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80044a4:	f7fd fa38 	bl	8001918 <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d807      	bhi.n	80044c4 <HAL_SPI_TransmitReceive+0x1d8>
 80044b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044ba:	d003      	beq.n	80044c4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80044bc:	2303      	movs	r3, #3
 80044be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80044c2:	e0a7      	b.n	8004614 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d1a6      	bne.n	800441c <HAL_SPI_TransmitReceive+0x130>
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d1a1      	bne.n	800441c <HAL_SPI_TransmitReceive+0x130>
 80044d8:	e07c      	b.n	80045d4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d002      	beq.n	80044e8 <HAL_SPI_TransmitReceive+0x1fc>
 80044e2:	8b7b      	ldrh	r3, [r7, #26]
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d16b      	bne.n	80045c0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	330c      	adds	r3, #12
 80044f2:	7812      	ldrb	r2, [r2, #0]
 80044f4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044fa:	1c5a      	adds	r2, r3, #1
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004504:	b29b      	uxth	r3, r3
 8004506:	3b01      	subs	r3, #1
 8004508:	b29a      	uxth	r2, r3
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800450e:	e057      	b.n	80045c0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f003 0302 	and.w	r3, r3, #2
 800451a:	2b02      	cmp	r3, #2
 800451c:	d11c      	bne.n	8004558 <HAL_SPI_TransmitReceive+0x26c>
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004522:	b29b      	uxth	r3, r3
 8004524:	2b00      	cmp	r3, #0
 8004526:	d017      	beq.n	8004558 <HAL_SPI_TransmitReceive+0x26c>
 8004528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800452a:	2b01      	cmp	r3, #1
 800452c:	d114      	bne.n	8004558 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	330c      	adds	r3, #12
 8004538:	7812      	ldrb	r2, [r2, #0]
 800453a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004540:	1c5a      	adds	r2, r3, #1
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800454a:	b29b      	uxth	r3, r3
 800454c:	3b01      	subs	r3, #1
 800454e:	b29a      	uxth	r2, r3
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004554:	2300      	movs	r3, #0
 8004556:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	f003 0301 	and.w	r3, r3, #1
 8004562:	2b01      	cmp	r3, #1
 8004564:	d119      	bne.n	800459a <HAL_SPI_TransmitReceive+0x2ae>
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800456a:	b29b      	uxth	r3, r3
 800456c:	2b00      	cmp	r3, #0
 800456e:	d014      	beq.n	800459a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68da      	ldr	r2, [r3, #12]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800457a:	b2d2      	uxtb	r2, r2
 800457c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004582:	1c5a      	adds	r2, r3, #1
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800458c:	b29b      	uxth	r3, r3
 800458e:	3b01      	subs	r3, #1
 8004590:	b29a      	uxth	r2, r3
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004596:	2301      	movs	r3, #1
 8004598:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800459a:	f7fd f9bd 	bl	8001918 <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d803      	bhi.n	80045b2 <HAL_SPI_TransmitReceive+0x2c6>
 80045aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045b0:	d102      	bne.n	80045b8 <HAL_SPI_TransmitReceive+0x2cc>
 80045b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d103      	bne.n	80045c0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80045be:	e029      	b.n	8004614 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d1a2      	bne.n	8004510 <HAL_SPI_TransmitReceive+0x224>
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d19d      	bne.n	8004510 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80045d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80045d8:	68f8      	ldr	r0, [r7, #12]
 80045da:	f000 f917 	bl	800480c <SPI_EndRxTxTransaction>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d006      	beq.n	80045f2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2220      	movs	r2, #32
 80045ee:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80045f0:	e010      	b.n	8004614 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d10b      	bne.n	8004612 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80045fa:	2300      	movs	r3, #0
 80045fc:	617b      	str	r3, [r7, #20]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	617b      	str	r3, [r7, #20]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	617b      	str	r3, [r7, #20]
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	e000      	b.n	8004614 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004612:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2200      	movs	r2, #0
 8004620:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004624:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004628:	4618      	mov	r0, r3
 800462a:	3730      	adds	r7, #48	; 0x30
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b088      	sub	sp, #32
 8004634:	af00      	add	r7, sp, #0
 8004636:	60f8      	str	r0, [r7, #12]
 8004638:	60b9      	str	r1, [r7, #8]
 800463a:	603b      	str	r3, [r7, #0]
 800463c:	4613      	mov	r3, r2
 800463e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004640:	f7fd f96a 	bl	8001918 <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004648:	1a9b      	subs	r3, r3, r2
 800464a:	683a      	ldr	r2, [r7, #0]
 800464c:	4413      	add	r3, r2
 800464e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004650:	f7fd f962 	bl	8001918 <HAL_GetTick>
 8004654:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004656:	4b39      	ldr	r3, [pc, #228]	; (800473c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	015b      	lsls	r3, r3, #5
 800465c:	0d1b      	lsrs	r3, r3, #20
 800465e:	69fa      	ldr	r2, [r7, #28]
 8004660:	fb02 f303 	mul.w	r3, r2, r3
 8004664:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004666:	e054      	b.n	8004712 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800466e:	d050      	beq.n	8004712 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004670:	f7fd f952 	bl	8001918 <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	69fa      	ldr	r2, [r7, #28]
 800467c:	429a      	cmp	r2, r3
 800467e:	d902      	bls.n	8004686 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d13d      	bne.n	8004702 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	685a      	ldr	r2, [r3, #4]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004694:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800469e:	d111      	bne.n	80046c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046a8:	d004      	beq.n	80046b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046b2:	d107      	bne.n	80046c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046cc:	d10f      	bne.n	80046ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046dc:	601a      	str	r2, [r3, #0]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2201      	movs	r2, #1
 80046f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e017      	b.n	8004732 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d101      	bne.n	800470c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004708:	2300      	movs	r3, #0
 800470a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	3b01      	subs	r3, #1
 8004710:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	689a      	ldr	r2, [r3, #8]
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	4013      	ands	r3, r2
 800471c:	68ba      	ldr	r2, [r7, #8]
 800471e:	429a      	cmp	r2, r3
 8004720:	bf0c      	ite	eq
 8004722:	2301      	moveq	r3, #1
 8004724:	2300      	movne	r3, #0
 8004726:	b2db      	uxtb	r3, r3
 8004728:	461a      	mov	r2, r3
 800472a:	79fb      	ldrb	r3, [r7, #7]
 800472c:	429a      	cmp	r2, r3
 800472e:	d19b      	bne.n	8004668 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3720      	adds	r7, #32
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	20000000 	.word	0x20000000

08004740 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b086      	sub	sp, #24
 8004744:	af02      	add	r7, sp, #8
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004754:	d111      	bne.n	800477a <SPI_EndRxTransaction+0x3a>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800475e:	d004      	beq.n	800476a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004768:	d107      	bne.n	800477a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004778:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004782:	d12a      	bne.n	80047da <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800478c:	d012      	beq.n	80047b4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	9300      	str	r3, [sp, #0]
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	2200      	movs	r2, #0
 8004796:	2180      	movs	r1, #128	; 0x80
 8004798:	68f8      	ldr	r0, [r7, #12]
 800479a:	f7ff ff49 	bl	8004630 <SPI_WaitFlagStateUntilTimeout>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d02d      	beq.n	8004800 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047a8:	f043 0220 	orr.w	r2, r3, #32
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	e026      	b.n	8004802 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	9300      	str	r3, [sp, #0]
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	2200      	movs	r2, #0
 80047bc:	2101      	movs	r1, #1
 80047be:	68f8      	ldr	r0, [r7, #12]
 80047c0:	f7ff ff36 	bl	8004630 <SPI_WaitFlagStateUntilTimeout>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d01a      	beq.n	8004800 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ce:	f043 0220 	orr.w	r2, r3, #32
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	e013      	b.n	8004802 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	9300      	str	r3, [sp, #0]
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	2200      	movs	r2, #0
 80047e2:	2101      	movs	r1, #1
 80047e4:	68f8      	ldr	r0, [r7, #12]
 80047e6:	f7ff ff23 	bl	8004630 <SPI_WaitFlagStateUntilTimeout>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d007      	beq.n	8004800 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047f4:	f043 0220 	orr.w	r2, r3, #32
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80047fc:	2303      	movs	r3, #3
 80047fe:	e000      	b.n	8004802 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	3710      	adds	r7, #16
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
	...

0800480c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b088      	sub	sp, #32
 8004810:	af02      	add	r7, sp, #8
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004818:	4b1b      	ldr	r3, [pc, #108]	; (8004888 <SPI_EndRxTxTransaction+0x7c>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a1b      	ldr	r2, [pc, #108]	; (800488c <SPI_EndRxTxTransaction+0x80>)
 800481e:	fba2 2303 	umull	r2, r3, r2, r3
 8004822:	0d5b      	lsrs	r3, r3, #21
 8004824:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004828:	fb02 f303 	mul.w	r3, r2, r3
 800482c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004836:	d112      	bne.n	800485e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	9300      	str	r3, [sp, #0]
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	2200      	movs	r2, #0
 8004840:	2180      	movs	r1, #128	; 0x80
 8004842:	68f8      	ldr	r0, [r7, #12]
 8004844:	f7ff fef4 	bl	8004630 <SPI_WaitFlagStateUntilTimeout>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d016      	beq.n	800487c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004852:	f043 0220 	orr.w	r2, r3, #32
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e00f      	b.n	800487e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d00a      	beq.n	800487a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	3b01      	subs	r3, #1
 8004868:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004874:	2b80      	cmp	r3, #128	; 0x80
 8004876:	d0f2      	beq.n	800485e <SPI_EndRxTxTransaction+0x52>
 8004878:	e000      	b.n	800487c <SPI_EndRxTxTransaction+0x70>
        break;
 800487a:	bf00      	nop
  }

  return HAL_OK;
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	3718      	adds	r7, #24
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	20000000 	.word	0x20000000
 800488c:	165e9f81 	.word	0x165e9f81

08004890 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d101      	bne.n	80048a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e041      	b.n	8004926 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d106      	bne.n	80048bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 f839 	bl	800492e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2202      	movs	r2, #2
 80048c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	3304      	adds	r3, #4
 80048cc:	4619      	mov	r1, r3
 80048ce:	4610      	mov	r0, r2
 80048d0:	f000 f9d8 	bl	8004c84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004924:	2300      	movs	r3, #0
}
 8004926:	4618      	mov	r0, r3
 8004928:	3708      	adds	r7, #8
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}

0800492e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800492e:	b480      	push	{r7}
 8004930:	b083      	sub	sp, #12
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004936:	bf00      	nop
 8004938:	370c      	adds	r7, #12
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
	...

08004944 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004944:	b480      	push	{r7}
 8004946:	b085      	sub	sp, #20
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004952:	b2db      	uxtb	r3, r3
 8004954:	2b01      	cmp	r3, #1
 8004956:	d001      	beq.n	800495c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	e04e      	b.n	80049fa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2202      	movs	r2, #2
 8004960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	68da      	ldr	r2, [r3, #12]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f042 0201 	orr.w	r2, r2, #1
 8004972:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a23      	ldr	r2, [pc, #140]	; (8004a08 <HAL_TIM_Base_Start_IT+0xc4>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d022      	beq.n	80049c4 <HAL_TIM_Base_Start_IT+0x80>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004986:	d01d      	beq.n	80049c4 <HAL_TIM_Base_Start_IT+0x80>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a1f      	ldr	r2, [pc, #124]	; (8004a0c <HAL_TIM_Base_Start_IT+0xc8>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d018      	beq.n	80049c4 <HAL_TIM_Base_Start_IT+0x80>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a1e      	ldr	r2, [pc, #120]	; (8004a10 <HAL_TIM_Base_Start_IT+0xcc>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d013      	beq.n	80049c4 <HAL_TIM_Base_Start_IT+0x80>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a1c      	ldr	r2, [pc, #112]	; (8004a14 <HAL_TIM_Base_Start_IT+0xd0>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d00e      	beq.n	80049c4 <HAL_TIM_Base_Start_IT+0x80>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a1b      	ldr	r2, [pc, #108]	; (8004a18 <HAL_TIM_Base_Start_IT+0xd4>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d009      	beq.n	80049c4 <HAL_TIM_Base_Start_IT+0x80>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a19      	ldr	r2, [pc, #100]	; (8004a1c <HAL_TIM_Base_Start_IT+0xd8>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d004      	beq.n	80049c4 <HAL_TIM_Base_Start_IT+0x80>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a18      	ldr	r2, [pc, #96]	; (8004a20 <HAL_TIM_Base_Start_IT+0xdc>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d111      	bne.n	80049e8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	f003 0307 	and.w	r3, r3, #7
 80049ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2b06      	cmp	r3, #6
 80049d4:	d010      	beq.n	80049f8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f042 0201 	orr.w	r2, r2, #1
 80049e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049e6:	e007      	b.n	80049f8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f042 0201 	orr.w	r2, r2, #1
 80049f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3714      	adds	r7, #20
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr
 8004a06:	bf00      	nop
 8004a08:	40010000 	.word	0x40010000
 8004a0c:	40000400 	.word	0x40000400
 8004a10:	40000800 	.word	0x40000800
 8004a14:	40000c00 	.word	0x40000c00
 8004a18:	40010400 	.word	0x40010400
 8004a1c:	40014000 	.word	0x40014000
 8004a20:	40001800 	.word	0x40001800

08004a24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b082      	sub	sp, #8
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	f003 0302 	and.w	r3, r3, #2
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d122      	bne.n	8004a80 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	f003 0302 	and.w	r3, r3, #2
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d11b      	bne.n	8004a80 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f06f 0202 	mvn.w	r2, #2
 8004a50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2201      	movs	r2, #1
 8004a56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	699b      	ldr	r3, [r3, #24]
 8004a5e:	f003 0303 	and.w	r3, r3, #3
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d003      	beq.n	8004a6e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 f8ee 	bl	8004c48 <HAL_TIM_IC_CaptureCallback>
 8004a6c:	e005      	b.n	8004a7a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 f8e0 	bl	8004c34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f000 f8f1 	bl	8004c5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	f003 0304 	and.w	r3, r3, #4
 8004a8a:	2b04      	cmp	r3, #4
 8004a8c:	d122      	bne.n	8004ad4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	f003 0304 	and.w	r3, r3, #4
 8004a98:	2b04      	cmp	r3, #4
 8004a9a:	d11b      	bne.n	8004ad4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f06f 0204 	mvn.w	r2, #4
 8004aa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2202      	movs	r2, #2
 8004aaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d003      	beq.n	8004ac2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 f8c4 	bl	8004c48 <HAL_TIM_IC_CaptureCallback>
 8004ac0:	e005      	b.n	8004ace <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 f8b6 	bl	8004c34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f000 f8c7 	bl	8004c5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	691b      	ldr	r3, [r3, #16]
 8004ada:	f003 0308 	and.w	r3, r3, #8
 8004ade:	2b08      	cmp	r3, #8
 8004ae0:	d122      	bne.n	8004b28 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	f003 0308 	and.w	r3, r3, #8
 8004aec:	2b08      	cmp	r3, #8
 8004aee:	d11b      	bne.n	8004b28 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f06f 0208 	mvn.w	r2, #8
 8004af8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2204      	movs	r2, #4
 8004afe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	69db      	ldr	r3, [r3, #28]
 8004b06:	f003 0303 	and.w	r3, r3, #3
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d003      	beq.n	8004b16 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 f89a 	bl	8004c48 <HAL_TIM_IC_CaptureCallback>
 8004b14:	e005      	b.n	8004b22 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f000 f88c 	bl	8004c34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f000 f89d 	bl	8004c5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	f003 0310 	and.w	r3, r3, #16
 8004b32:	2b10      	cmp	r3, #16
 8004b34:	d122      	bne.n	8004b7c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	f003 0310 	and.w	r3, r3, #16
 8004b40:	2b10      	cmp	r3, #16
 8004b42:	d11b      	bne.n	8004b7c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f06f 0210 	mvn.w	r2, #16
 8004b4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2208      	movs	r2, #8
 8004b52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	69db      	ldr	r3, [r3, #28]
 8004b5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d003      	beq.n	8004b6a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 f870 	bl	8004c48 <HAL_TIM_IC_CaptureCallback>
 8004b68:	e005      	b.n	8004b76 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 f862 	bl	8004c34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f000 f873 	bl	8004c5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	f003 0301 	and.w	r3, r3, #1
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d10e      	bne.n	8004ba8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	f003 0301 	and.w	r3, r3, #1
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d107      	bne.n	8004ba8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f06f 0201 	mvn.w	r2, #1
 8004ba0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f7fc f8a0 	bl	8000ce8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bb2:	2b80      	cmp	r3, #128	; 0x80
 8004bb4:	d10e      	bne.n	8004bd4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bc0:	2b80      	cmp	r3, #128	; 0x80
 8004bc2:	d107      	bne.n	8004bd4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004bcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 f902 	bl	8004dd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bde:	2b40      	cmp	r3, #64	; 0x40
 8004be0:	d10e      	bne.n	8004c00 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bec:	2b40      	cmp	r3, #64	; 0x40
 8004bee:	d107      	bne.n	8004c00 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004bf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f000 f838 	bl	8004c70 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	f003 0320 	and.w	r3, r3, #32
 8004c0a:	2b20      	cmp	r3, #32
 8004c0c:	d10e      	bne.n	8004c2c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	f003 0320 	and.w	r3, r3, #32
 8004c18:	2b20      	cmp	r3, #32
 8004c1a:	d107      	bne.n	8004c2c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f06f 0220 	mvn.w	r2, #32
 8004c24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 f8cc 	bl	8004dc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c2c:	bf00      	nop
 8004c2e:	3708      	adds	r7, #8
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c3c:	bf00      	nop
 8004c3e:	370c      	adds	r7, #12
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c50:	bf00      	nop
 8004c52:	370c      	adds	r7, #12
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr

08004c5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c64:	bf00      	nop
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c78:	bf00      	nop
 8004c7a:	370c      	adds	r7, #12
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr

08004c84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b085      	sub	sp, #20
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4a40      	ldr	r2, [pc, #256]	; (8004d98 <TIM_Base_SetConfig+0x114>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d013      	beq.n	8004cc4 <TIM_Base_SetConfig+0x40>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ca2:	d00f      	beq.n	8004cc4 <TIM_Base_SetConfig+0x40>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	4a3d      	ldr	r2, [pc, #244]	; (8004d9c <TIM_Base_SetConfig+0x118>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d00b      	beq.n	8004cc4 <TIM_Base_SetConfig+0x40>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4a3c      	ldr	r2, [pc, #240]	; (8004da0 <TIM_Base_SetConfig+0x11c>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d007      	beq.n	8004cc4 <TIM_Base_SetConfig+0x40>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4a3b      	ldr	r2, [pc, #236]	; (8004da4 <TIM_Base_SetConfig+0x120>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d003      	beq.n	8004cc4 <TIM_Base_SetConfig+0x40>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a3a      	ldr	r2, [pc, #232]	; (8004da8 <TIM_Base_SetConfig+0x124>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d108      	bne.n	8004cd6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	68fa      	ldr	r2, [r7, #12]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4a2f      	ldr	r2, [pc, #188]	; (8004d98 <TIM_Base_SetConfig+0x114>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d02b      	beq.n	8004d36 <TIM_Base_SetConfig+0xb2>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ce4:	d027      	beq.n	8004d36 <TIM_Base_SetConfig+0xb2>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a2c      	ldr	r2, [pc, #176]	; (8004d9c <TIM_Base_SetConfig+0x118>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d023      	beq.n	8004d36 <TIM_Base_SetConfig+0xb2>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a2b      	ldr	r2, [pc, #172]	; (8004da0 <TIM_Base_SetConfig+0x11c>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d01f      	beq.n	8004d36 <TIM_Base_SetConfig+0xb2>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a2a      	ldr	r2, [pc, #168]	; (8004da4 <TIM_Base_SetConfig+0x120>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d01b      	beq.n	8004d36 <TIM_Base_SetConfig+0xb2>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a29      	ldr	r2, [pc, #164]	; (8004da8 <TIM_Base_SetConfig+0x124>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d017      	beq.n	8004d36 <TIM_Base_SetConfig+0xb2>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a28      	ldr	r2, [pc, #160]	; (8004dac <TIM_Base_SetConfig+0x128>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d013      	beq.n	8004d36 <TIM_Base_SetConfig+0xb2>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a27      	ldr	r2, [pc, #156]	; (8004db0 <TIM_Base_SetConfig+0x12c>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d00f      	beq.n	8004d36 <TIM_Base_SetConfig+0xb2>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a26      	ldr	r2, [pc, #152]	; (8004db4 <TIM_Base_SetConfig+0x130>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d00b      	beq.n	8004d36 <TIM_Base_SetConfig+0xb2>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a25      	ldr	r2, [pc, #148]	; (8004db8 <TIM_Base_SetConfig+0x134>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d007      	beq.n	8004d36 <TIM_Base_SetConfig+0xb2>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a24      	ldr	r2, [pc, #144]	; (8004dbc <TIM_Base_SetConfig+0x138>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d003      	beq.n	8004d36 <TIM_Base_SetConfig+0xb2>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a23      	ldr	r2, [pc, #140]	; (8004dc0 <TIM_Base_SetConfig+0x13c>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d108      	bne.n	8004d48 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	695b      	ldr	r3, [r3, #20]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	68fa      	ldr	r2, [r7, #12]
 8004d5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	689a      	ldr	r2, [r3, #8]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	4a0a      	ldr	r2, [pc, #40]	; (8004d98 <TIM_Base_SetConfig+0x114>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d003      	beq.n	8004d7c <TIM_Base_SetConfig+0xf8>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	4a0c      	ldr	r2, [pc, #48]	; (8004da8 <TIM_Base_SetConfig+0x124>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d103      	bne.n	8004d84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	691a      	ldr	r2, [r3, #16]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2201      	movs	r2, #1
 8004d88:	615a      	str	r2, [r3, #20]
}
 8004d8a:	bf00      	nop
 8004d8c:	3714      	adds	r7, #20
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr
 8004d96:	bf00      	nop
 8004d98:	40010000 	.word	0x40010000
 8004d9c:	40000400 	.word	0x40000400
 8004da0:	40000800 	.word	0x40000800
 8004da4:	40000c00 	.word	0x40000c00
 8004da8:	40010400 	.word	0x40010400
 8004dac:	40014000 	.word	0x40014000
 8004db0:	40014400 	.word	0x40014400
 8004db4:	40014800 	.word	0x40014800
 8004db8:	40001800 	.word	0x40001800
 8004dbc:	40001c00 	.word	0x40001c00
 8004dc0:	40002000 	.word	0x40002000

08004dc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004dcc:	bf00      	nop
 8004dce:	370c      	adds	r7, #12
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004de0:	bf00      	nop
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004dec:	b084      	sub	sp, #16
 8004dee:	b580      	push	{r7, lr}
 8004df0:	b084      	sub	sp, #16
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	6078      	str	r0, [r7, #4]
 8004df6:	f107 001c 	add.w	r0, r7, #28
 8004dfa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d122      	bne.n	8004e4a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e08:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004e18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004e2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d105      	bne.n	8004e3e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f001 fbee 	bl	8006620 <USB_CoreReset>
 8004e44:	4603      	mov	r3, r0
 8004e46:	73fb      	strb	r3, [r7, #15]
 8004e48:	e01a      	b.n	8004e80 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f001 fbe2 	bl	8006620 <USB_CoreReset>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004e60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d106      	bne.n	8004e74 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e6a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	639a      	str	r2, [r3, #56]	; 0x38
 8004e72:	e005      	b.n	8004e80 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e78:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d10b      	bne.n	8004e9e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	f043 0206 	orr.w	r2, r3, #6
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f043 0220 	orr.w	r2, r3, #32
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3710      	adds	r7, #16
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004eaa:	b004      	add	sp, #16
 8004eac:	4770      	bx	lr
	...

08004eb0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b087      	sub	sp, #28
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	4613      	mov	r3, r2
 8004ebc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004ebe:	79fb      	ldrb	r3, [r7, #7]
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	d165      	bne.n	8004f90 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	4a41      	ldr	r2, [pc, #260]	; (8004fcc <USB_SetTurnaroundTime+0x11c>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d906      	bls.n	8004eda <USB_SetTurnaroundTime+0x2a>
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	4a40      	ldr	r2, [pc, #256]	; (8004fd0 <USB_SetTurnaroundTime+0x120>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d202      	bcs.n	8004eda <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004ed4:	230f      	movs	r3, #15
 8004ed6:	617b      	str	r3, [r7, #20]
 8004ed8:	e062      	b.n	8004fa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	4a3c      	ldr	r2, [pc, #240]	; (8004fd0 <USB_SetTurnaroundTime+0x120>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d306      	bcc.n	8004ef0 <USB_SetTurnaroundTime+0x40>
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	4a3b      	ldr	r2, [pc, #236]	; (8004fd4 <USB_SetTurnaroundTime+0x124>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d202      	bcs.n	8004ef0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004eea:	230e      	movs	r3, #14
 8004eec:	617b      	str	r3, [r7, #20]
 8004eee:	e057      	b.n	8004fa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	4a38      	ldr	r2, [pc, #224]	; (8004fd4 <USB_SetTurnaroundTime+0x124>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d306      	bcc.n	8004f06 <USB_SetTurnaroundTime+0x56>
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	4a37      	ldr	r2, [pc, #220]	; (8004fd8 <USB_SetTurnaroundTime+0x128>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d202      	bcs.n	8004f06 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004f00:	230d      	movs	r3, #13
 8004f02:	617b      	str	r3, [r7, #20]
 8004f04:	e04c      	b.n	8004fa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	4a33      	ldr	r2, [pc, #204]	; (8004fd8 <USB_SetTurnaroundTime+0x128>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d306      	bcc.n	8004f1c <USB_SetTurnaroundTime+0x6c>
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	4a32      	ldr	r2, [pc, #200]	; (8004fdc <USB_SetTurnaroundTime+0x12c>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d802      	bhi.n	8004f1c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004f16:	230c      	movs	r3, #12
 8004f18:	617b      	str	r3, [r7, #20]
 8004f1a:	e041      	b.n	8004fa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	4a2f      	ldr	r2, [pc, #188]	; (8004fdc <USB_SetTurnaroundTime+0x12c>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d906      	bls.n	8004f32 <USB_SetTurnaroundTime+0x82>
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	4a2e      	ldr	r2, [pc, #184]	; (8004fe0 <USB_SetTurnaroundTime+0x130>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d802      	bhi.n	8004f32 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004f2c:	230b      	movs	r3, #11
 8004f2e:	617b      	str	r3, [r7, #20]
 8004f30:	e036      	b.n	8004fa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	4a2a      	ldr	r2, [pc, #168]	; (8004fe0 <USB_SetTurnaroundTime+0x130>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d906      	bls.n	8004f48 <USB_SetTurnaroundTime+0x98>
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	4a29      	ldr	r2, [pc, #164]	; (8004fe4 <USB_SetTurnaroundTime+0x134>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d802      	bhi.n	8004f48 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004f42:	230a      	movs	r3, #10
 8004f44:	617b      	str	r3, [r7, #20]
 8004f46:	e02b      	b.n	8004fa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	4a26      	ldr	r2, [pc, #152]	; (8004fe4 <USB_SetTurnaroundTime+0x134>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d906      	bls.n	8004f5e <USB_SetTurnaroundTime+0xae>
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	4a25      	ldr	r2, [pc, #148]	; (8004fe8 <USB_SetTurnaroundTime+0x138>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d202      	bcs.n	8004f5e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004f58:	2309      	movs	r3, #9
 8004f5a:	617b      	str	r3, [r7, #20]
 8004f5c:	e020      	b.n	8004fa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	4a21      	ldr	r2, [pc, #132]	; (8004fe8 <USB_SetTurnaroundTime+0x138>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d306      	bcc.n	8004f74 <USB_SetTurnaroundTime+0xc4>
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	4a20      	ldr	r2, [pc, #128]	; (8004fec <USB_SetTurnaroundTime+0x13c>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d802      	bhi.n	8004f74 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004f6e:	2308      	movs	r3, #8
 8004f70:	617b      	str	r3, [r7, #20]
 8004f72:	e015      	b.n	8004fa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	4a1d      	ldr	r2, [pc, #116]	; (8004fec <USB_SetTurnaroundTime+0x13c>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d906      	bls.n	8004f8a <USB_SetTurnaroundTime+0xda>
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	4a1c      	ldr	r2, [pc, #112]	; (8004ff0 <USB_SetTurnaroundTime+0x140>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d202      	bcs.n	8004f8a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004f84:	2307      	movs	r3, #7
 8004f86:	617b      	str	r3, [r7, #20]
 8004f88:	e00a      	b.n	8004fa0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004f8a:	2306      	movs	r3, #6
 8004f8c:	617b      	str	r3, [r7, #20]
 8004f8e:	e007      	b.n	8004fa0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004f90:	79fb      	ldrb	r3, [r7, #7]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d102      	bne.n	8004f9c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004f96:	2309      	movs	r3, #9
 8004f98:	617b      	str	r3, [r7, #20]
 8004f9a:	e001      	b.n	8004fa0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004f9c:	2309      	movs	r3, #9
 8004f9e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	68da      	ldr	r2, [r3, #12]
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	029b      	lsls	r3, r3, #10
 8004fb4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004fb8:	431a      	orrs	r2, r3
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	371c      	adds	r7, #28
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr
 8004fcc:	00d8acbf 	.word	0x00d8acbf
 8004fd0:	00e4e1c0 	.word	0x00e4e1c0
 8004fd4:	00f42400 	.word	0x00f42400
 8004fd8:	01067380 	.word	0x01067380
 8004fdc:	011a499f 	.word	0x011a499f
 8004fe0:	01312cff 	.word	0x01312cff
 8004fe4:	014ca43f 	.word	0x014ca43f
 8004fe8:	016e3600 	.word	0x016e3600
 8004fec:	01a6ab1f 	.word	0x01a6ab1f
 8004ff0:	01e84800 	.word	0x01e84800

08004ff4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	f043 0201 	orr.w	r2, r3, #1
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005008:	2300      	movs	r3, #0
}
 800500a:	4618      	mov	r0, r3
 800500c:	370c      	adds	r7, #12
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr

08005016 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005016:	b480      	push	{r7}
 8005018:	b083      	sub	sp, #12
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	f023 0201 	bic.w	r2, r3, #1
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800502a:	2300      	movs	r3, #0
}
 800502c:	4618      	mov	r0, r3
 800502e:	370c      	adds	r7, #12
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	460b      	mov	r3, r1
 8005042:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005044:	2300      	movs	r3, #0
 8005046:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005054:	78fb      	ldrb	r3, [r7, #3]
 8005056:	2b01      	cmp	r3, #1
 8005058:	d115      	bne.n	8005086 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005066:	2001      	movs	r0, #1
 8005068:	f7fc fc62 	bl	8001930 <HAL_Delay>
      ms++;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	3301      	adds	r3, #1
 8005070:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f001 fa45 	bl	8006502 <USB_GetMode>
 8005078:	4603      	mov	r3, r0
 800507a:	2b01      	cmp	r3, #1
 800507c:	d01e      	beq.n	80050bc <USB_SetCurrentMode+0x84>
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2b31      	cmp	r3, #49	; 0x31
 8005082:	d9f0      	bls.n	8005066 <USB_SetCurrentMode+0x2e>
 8005084:	e01a      	b.n	80050bc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005086:	78fb      	ldrb	r3, [r7, #3]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d115      	bne.n	80050b8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005098:	2001      	movs	r0, #1
 800509a:	f7fc fc49 	bl	8001930 <HAL_Delay>
      ms++;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	3301      	adds	r3, #1
 80050a2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f001 fa2c 	bl	8006502 <USB_GetMode>
 80050aa:	4603      	mov	r3, r0
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d005      	beq.n	80050bc <USB_SetCurrentMode+0x84>
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2b31      	cmp	r3, #49	; 0x31
 80050b4:	d9f0      	bls.n	8005098 <USB_SetCurrentMode+0x60>
 80050b6:	e001      	b.n	80050bc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e005      	b.n	80050c8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2b32      	cmp	r3, #50	; 0x32
 80050c0:	d101      	bne.n	80050c6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e000      	b.n	80050c8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80050c6:	2300      	movs	r3, #0
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3710      	adds	r7, #16
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80050d0:	b084      	sub	sp, #16
 80050d2:	b580      	push	{r7, lr}
 80050d4:	b086      	sub	sp, #24
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
 80050da:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80050de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80050e2:	2300      	movs	r3, #0
 80050e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80050ea:	2300      	movs	r3, #0
 80050ec:	613b      	str	r3, [r7, #16]
 80050ee:	e009      	b.n	8005104 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	3340      	adds	r3, #64	; 0x40
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	4413      	add	r3, r2
 80050fa:	2200      	movs	r2, #0
 80050fc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	3301      	adds	r3, #1
 8005102:	613b      	str	r3, [r7, #16]
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	2b0e      	cmp	r3, #14
 8005108:	d9f2      	bls.n	80050f0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800510a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800510c:	2b00      	cmp	r3, #0
 800510e:	d11c      	bne.n	800514a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	68fa      	ldr	r2, [r7, #12]
 800511a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800511e:	f043 0302 	orr.w	r3, r3, #2
 8005122:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005128:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005134:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005140:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	639a      	str	r2, [r3, #56]	; 0x38
 8005148:	e00b      	b.n	8005162 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800514e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800515a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005168:	461a      	mov	r2, r3
 800516a:	2300      	movs	r3, #0
 800516c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005174:	4619      	mov	r1, r3
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800517c:	461a      	mov	r2, r3
 800517e:	680b      	ldr	r3, [r1, #0]
 8005180:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005184:	2b01      	cmp	r3, #1
 8005186:	d10c      	bne.n	80051a2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800518a:	2b00      	cmp	r3, #0
 800518c:	d104      	bne.n	8005198 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800518e:	2100      	movs	r1, #0
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f000 f965 	bl	8005460 <USB_SetDevSpeed>
 8005196:	e008      	b.n	80051aa <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005198:	2101      	movs	r1, #1
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 f960 	bl	8005460 <USB_SetDevSpeed>
 80051a0:	e003      	b.n	80051aa <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80051a2:	2103      	movs	r1, #3
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 f95b 	bl	8005460 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80051aa:	2110      	movs	r1, #16
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f000 f8f3 	bl	8005398 <USB_FlushTxFifo>
 80051b2:	4603      	mov	r3, r0
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d001      	beq.n	80051bc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f000 f91f 	bl	8005400 <USB_FlushRxFifo>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d001      	beq.n	80051cc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051d2:	461a      	mov	r2, r3
 80051d4:	2300      	movs	r3, #0
 80051d6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051de:	461a      	mov	r2, r3
 80051e0:	2300      	movs	r3, #0
 80051e2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ea:	461a      	mov	r2, r3
 80051ec:	2300      	movs	r3, #0
 80051ee:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051f0:	2300      	movs	r3, #0
 80051f2:	613b      	str	r3, [r7, #16]
 80051f4:	e043      	b.n	800527e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	015a      	lsls	r2, r3, #5
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	4413      	add	r3, r2
 80051fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005208:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800520c:	d118      	bne.n	8005240 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d10a      	bne.n	800522a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	015a      	lsls	r2, r3, #5
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	4413      	add	r3, r2
 800521c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005220:	461a      	mov	r2, r3
 8005222:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005226:	6013      	str	r3, [r2, #0]
 8005228:	e013      	b.n	8005252 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	015a      	lsls	r2, r3, #5
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	4413      	add	r3, r2
 8005232:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005236:	461a      	mov	r2, r3
 8005238:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800523c:	6013      	str	r3, [r2, #0]
 800523e:	e008      	b.n	8005252 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	015a      	lsls	r2, r3, #5
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	4413      	add	r3, r2
 8005248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800524c:	461a      	mov	r2, r3
 800524e:	2300      	movs	r3, #0
 8005250:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	015a      	lsls	r2, r3, #5
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	4413      	add	r3, r2
 800525a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800525e:	461a      	mov	r2, r3
 8005260:	2300      	movs	r3, #0
 8005262:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	015a      	lsls	r2, r3, #5
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	4413      	add	r3, r2
 800526c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005270:	461a      	mov	r2, r3
 8005272:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005276:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	3301      	adds	r3, #1
 800527c:	613b      	str	r3, [r7, #16]
 800527e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005280:	693a      	ldr	r2, [r7, #16]
 8005282:	429a      	cmp	r2, r3
 8005284:	d3b7      	bcc.n	80051f6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005286:	2300      	movs	r3, #0
 8005288:	613b      	str	r3, [r7, #16]
 800528a:	e043      	b.n	8005314 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	015a      	lsls	r2, r3, #5
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	4413      	add	r3, r2
 8005294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800529e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052a2:	d118      	bne.n	80052d6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d10a      	bne.n	80052c0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	015a      	lsls	r2, r3, #5
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	4413      	add	r3, r2
 80052b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052b6:	461a      	mov	r2, r3
 80052b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80052bc:	6013      	str	r3, [r2, #0]
 80052be:	e013      	b.n	80052e8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	015a      	lsls	r2, r3, #5
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	4413      	add	r3, r2
 80052c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052cc:	461a      	mov	r2, r3
 80052ce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80052d2:	6013      	str	r3, [r2, #0]
 80052d4:	e008      	b.n	80052e8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	015a      	lsls	r2, r3, #5
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	4413      	add	r3, r2
 80052de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052e2:	461a      	mov	r2, r3
 80052e4:	2300      	movs	r3, #0
 80052e6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	015a      	lsls	r2, r3, #5
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	4413      	add	r3, r2
 80052f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052f4:	461a      	mov	r2, r3
 80052f6:	2300      	movs	r3, #0
 80052f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	015a      	lsls	r2, r3, #5
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	4413      	add	r3, r2
 8005302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005306:	461a      	mov	r2, r3
 8005308:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800530c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	3301      	adds	r3, #1
 8005312:	613b      	str	r3, [r7, #16]
 8005314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005316:	693a      	ldr	r2, [r7, #16]
 8005318:	429a      	cmp	r2, r3
 800531a:	d3b7      	bcc.n	800528c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005322:	691b      	ldr	r3, [r3, #16]
 8005324:	68fa      	ldr	r2, [r7, #12]
 8005326:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800532a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800532e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800533c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800533e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005340:	2b00      	cmp	r3, #0
 8005342:	d105      	bne.n	8005350 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	699b      	ldr	r3, [r3, #24]
 8005348:	f043 0210 	orr.w	r2, r3, #16
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	699a      	ldr	r2, [r3, #24]
 8005354:	4b0f      	ldr	r3, [pc, #60]	; (8005394 <USB_DevInit+0x2c4>)
 8005356:	4313      	orrs	r3, r2
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800535c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800535e:	2b00      	cmp	r3, #0
 8005360:	d005      	beq.n	800536e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	699b      	ldr	r3, [r3, #24]
 8005366:	f043 0208 	orr.w	r2, r3, #8
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800536e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005370:	2b01      	cmp	r3, #1
 8005372:	d107      	bne.n	8005384 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	699b      	ldr	r3, [r3, #24]
 8005378:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800537c:	f043 0304 	orr.w	r3, r3, #4
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005384:	7dfb      	ldrb	r3, [r7, #23]
}
 8005386:	4618      	mov	r0, r3
 8005388:	3718      	adds	r7, #24
 800538a:	46bd      	mov	sp, r7
 800538c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005390:	b004      	add	sp, #16
 8005392:	4770      	bx	lr
 8005394:	803c3800 	.word	0x803c3800

08005398 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005398:	b480      	push	{r7}
 800539a:	b085      	sub	sp, #20
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80053a2:	2300      	movs	r3, #0
 80053a4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	3301      	adds	r3, #1
 80053aa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	4a13      	ldr	r2, [pc, #76]	; (80053fc <USB_FlushTxFifo+0x64>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d901      	bls.n	80053b8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80053b4:	2303      	movs	r3, #3
 80053b6:	e01b      	b.n	80053f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	691b      	ldr	r3, [r3, #16]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	daf2      	bge.n	80053a6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80053c0:	2300      	movs	r3, #0
 80053c2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	019b      	lsls	r3, r3, #6
 80053c8:	f043 0220 	orr.w	r2, r3, #32
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	3301      	adds	r3, #1
 80053d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	4a08      	ldr	r2, [pc, #32]	; (80053fc <USB_FlushTxFifo+0x64>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d901      	bls.n	80053e2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80053de:	2303      	movs	r3, #3
 80053e0:	e006      	b.n	80053f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	f003 0320 	and.w	r3, r3, #32
 80053ea:	2b20      	cmp	r3, #32
 80053ec:	d0f0      	beq.n	80053d0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80053ee:	2300      	movs	r3, #0
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3714      	adds	r7, #20
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr
 80053fc:	00030d40 	.word	0x00030d40

08005400 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005400:	b480      	push	{r7}
 8005402:	b085      	sub	sp, #20
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005408:	2300      	movs	r3, #0
 800540a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	3301      	adds	r3, #1
 8005410:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	4a11      	ldr	r2, [pc, #68]	; (800545c <USB_FlushRxFifo+0x5c>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d901      	bls.n	800541e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	e018      	b.n	8005450 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	2b00      	cmp	r3, #0
 8005424:	daf2      	bge.n	800540c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005426:	2300      	movs	r3, #0
 8005428:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2210      	movs	r2, #16
 800542e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	3301      	adds	r3, #1
 8005434:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	4a08      	ldr	r2, [pc, #32]	; (800545c <USB_FlushRxFifo+0x5c>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d901      	bls.n	8005442 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	e006      	b.n	8005450 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	f003 0310 	and.w	r3, r3, #16
 800544a:	2b10      	cmp	r3, #16
 800544c:	d0f0      	beq.n	8005430 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800544e:	2300      	movs	r3, #0
}
 8005450:	4618      	mov	r0, r3
 8005452:	3714      	adds	r7, #20
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr
 800545c:	00030d40 	.word	0x00030d40

08005460 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005460:	b480      	push	{r7}
 8005462:	b085      	sub	sp, #20
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	460b      	mov	r3, r1
 800546a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	78fb      	ldrb	r3, [r7, #3]
 800547a:	68f9      	ldr	r1, [r7, #12]
 800547c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005480:	4313      	orrs	r3, r2
 8005482:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	3714      	adds	r7, #20
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr

08005492 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005492:	b480      	push	{r7}
 8005494:	b087      	sub	sp, #28
 8005496:	af00      	add	r7, sp, #0
 8005498:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	f003 0306 	and.w	r3, r3, #6
 80054aa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d102      	bne.n	80054b8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80054b2:	2300      	movs	r3, #0
 80054b4:	75fb      	strb	r3, [r7, #23]
 80054b6:	e00a      	b.n	80054ce <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2b02      	cmp	r3, #2
 80054bc:	d002      	beq.n	80054c4 <USB_GetDevSpeed+0x32>
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2b06      	cmp	r3, #6
 80054c2:	d102      	bne.n	80054ca <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80054c4:	2302      	movs	r3, #2
 80054c6:	75fb      	strb	r3, [r7, #23]
 80054c8:	e001      	b.n	80054ce <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80054ca:	230f      	movs	r3, #15
 80054cc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80054ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	371c      	adds	r7, #28
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80054dc:	b480      	push	{r7}
 80054de:	b085      	sub	sp, #20
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	785b      	ldrb	r3, [r3, #1]
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d13a      	bne.n	800556e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054fe:	69da      	ldr	r2, [r3, #28]
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	f003 030f 	and.w	r3, r3, #15
 8005508:	2101      	movs	r1, #1
 800550a:	fa01 f303 	lsl.w	r3, r1, r3
 800550e:	b29b      	uxth	r3, r3
 8005510:	68f9      	ldr	r1, [r7, #12]
 8005512:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005516:	4313      	orrs	r3, r2
 8005518:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	015a      	lsls	r2, r3, #5
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	4413      	add	r3, r2
 8005522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800552c:	2b00      	cmp	r3, #0
 800552e:	d155      	bne.n	80055dc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	015a      	lsls	r2, r3, #5
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	4413      	add	r3, r2
 8005538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	791b      	ldrb	r3, [r3, #4]
 800554a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800554c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	059b      	lsls	r3, r3, #22
 8005552:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005554:	4313      	orrs	r3, r2
 8005556:	68ba      	ldr	r2, [r7, #8]
 8005558:	0151      	lsls	r1, r2, #5
 800555a:	68fa      	ldr	r2, [r7, #12]
 800555c:	440a      	add	r2, r1
 800555e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005566:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800556a:	6013      	str	r3, [r2, #0]
 800556c:	e036      	b.n	80055dc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005574:	69da      	ldr	r2, [r3, #28]
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	f003 030f 	and.w	r3, r3, #15
 800557e:	2101      	movs	r1, #1
 8005580:	fa01 f303 	lsl.w	r3, r1, r3
 8005584:	041b      	lsls	r3, r3, #16
 8005586:	68f9      	ldr	r1, [r7, #12]
 8005588:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800558c:	4313      	orrs	r3, r2
 800558e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	015a      	lsls	r2, r3, #5
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	4413      	add	r3, r2
 8005598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d11a      	bne.n	80055dc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	015a      	lsls	r2, r3, #5
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	4413      	add	r3, r2
 80055ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	791b      	ldrb	r3, [r3, #4]
 80055c0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80055c2:	430b      	orrs	r3, r1
 80055c4:	4313      	orrs	r3, r2
 80055c6:	68ba      	ldr	r2, [r7, #8]
 80055c8:	0151      	lsls	r1, r2, #5
 80055ca:	68fa      	ldr	r2, [r7, #12]
 80055cc:	440a      	add	r2, r1
 80055ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055da:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80055dc:	2300      	movs	r3, #0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3714      	adds	r7, #20
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr
	...

080055ec <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b085      	sub	sp, #20
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	781b      	ldrb	r3, [r3, #0]
 80055fe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	785b      	ldrb	r3, [r3, #1]
 8005604:	2b01      	cmp	r3, #1
 8005606:	d161      	bne.n	80056cc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	015a      	lsls	r2, r3, #5
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	4413      	add	r3, r2
 8005610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800561a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800561e:	d11f      	bne.n	8005660 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	015a      	lsls	r2, r3, #5
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	4413      	add	r3, r2
 8005628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68ba      	ldr	r2, [r7, #8]
 8005630:	0151      	lsls	r1, r2, #5
 8005632:	68fa      	ldr	r2, [r7, #12]
 8005634:	440a      	add	r2, r1
 8005636:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800563a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800563e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	015a      	lsls	r2, r3, #5
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	4413      	add	r3, r2
 8005648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	68ba      	ldr	r2, [r7, #8]
 8005650:	0151      	lsls	r1, r2, #5
 8005652:	68fa      	ldr	r2, [r7, #12]
 8005654:	440a      	add	r2, r1
 8005656:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800565a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800565e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005666:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	f003 030f 	and.w	r3, r3, #15
 8005670:	2101      	movs	r1, #1
 8005672:	fa01 f303 	lsl.w	r3, r1, r3
 8005676:	b29b      	uxth	r3, r3
 8005678:	43db      	mvns	r3, r3
 800567a:	68f9      	ldr	r1, [r7, #12]
 800567c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005680:	4013      	ands	r3, r2
 8005682:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800568a:	69da      	ldr	r2, [r3, #28]
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	f003 030f 	and.w	r3, r3, #15
 8005694:	2101      	movs	r1, #1
 8005696:	fa01 f303 	lsl.w	r3, r1, r3
 800569a:	b29b      	uxth	r3, r3
 800569c:	43db      	mvns	r3, r3
 800569e:	68f9      	ldr	r1, [r7, #12]
 80056a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056a4:	4013      	ands	r3, r2
 80056a6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	015a      	lsls	r2, r3, #5
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	4413      	add	r3, r2
 80056b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	0159      	lsls	r1, r3, #5
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	440b      	add	r3, r1
 80056be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056c2:	4619      	mov	r1, r3
 80056c4:	4b35      	ldr	r3, [pc, #212]	; (800579c <USB_DeactivateEndpoint+0x1b0>)
 80056c6:	4013      	ands	r3, r2
 80056c8:	600b      	str	r3, [r1, #0]
 80056ca:	e060      	b.n	800578e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	015a      	lsls	r2, r3, #5
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	4413      	add	r3, r2
 80056d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056e2:	d11f      	bne.n	8005724 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	015a      	lsls	r2, r3, #5
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	4413      	add	r3, r2
 80056ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	68ba      	ldr	r2, [r7, #8]
 80056f4:	0151      	lsls	r1, r2, #5
 80056f6:	68fa      	ldr	r2, [r7, #12]
 80056f8:	440a      	add	r2, r1
 80056fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005702:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	015a      	lsls	r2, r3, #5
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	4413      	add	r3, r2
 800570c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	68ba      	ldr	r2, [r7, #8]
 8005714:	0151      	lsls	r1, r2, #5
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	440a      	add	r2, r1
 800571a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800571e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005722:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800572a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	f003 030f 	and.w	r3, r3, #15
 8005734:	2101      	movs	r1, #1
 8005736:	fa01 f303 	lsl.w	r3, r1, r3
 800573a:	041b      	lsls	r3, r3, #16
 800573c:	43db      	mvns	r3, r3
 800573e:	68f9      	ldr	r1, [r7, #12]
 8005740:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005744:	4013      	ands	r3, r2
 8005746:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800574e:	69da      	ldr	r2, [r3, #28]
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	f003 030f 	and.w	r3, r3, #15
 8005758:	2101      	movs	r1, #1
 800575a:	fa01 f303 	lsl.w	r3, r1, r3
 800575e:	041b      	lsls	r3, r3, #16
 8005760:	43db      	mvns	r3, r3
 8005762:	68f9      	ldr	r1, [r7, #12]
 8005764:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005768:	4013      	ands	r3, r2
 800576a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	015a      	lsls	r2, r3, #5
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	4413      	add	r3, r2
 8005774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	0159      	lsls	r1, r3, #5
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	440b      	add	r3, r1
 8005782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005786:	4619      	mov	r1, r3
 8005788:	4b05      	ldr	r3, [pc, #20]	; (80057a0 <USB_DeactivateEndpoint+0x1b4>)
 800578a:	4013      	ands	r3, r2
 800578c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800578e:	2300      	movs	r3, #0
}
 8005790:	4618      	mov	r0, r3
 8005792:	3714      	adds	r7, #20
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr
 800579c:	ec337800 	.word	0xec337800
 80057a0:	eff37800 	.word	0xeff37800

080057a4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b08a      	sub	sp, #40	; 0x28
 80057a8:	af02      	add	r7, sp, #8
 80057aa:	60f8      	str	r0, [r7, #12]
 80057ac:	60b9      	str	r1, [r7, #8]
 80057ae:	4613      	mov	r3, r2
 80057b0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	781b      	ldrb	r3, [r3, #0]
 80057ba:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	785b      	ldrb	r3, [r3, #1]
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	f040 815c 	bne.w	8005a7e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	699b      	ldr	r3, [r3, #24]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d132      	bne.n	8005834 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80057ce:	69bb      	ldr	r3, [r7, #24]
 80057d0:	015a      	lsls	r2, r3, #5
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	4413      	add	r3, r2
 80057d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057da:	691b      	ldr	r3, [r3, #16]
 80057dc:	69ba      	ldr	r2, [r7, #24]
 80057de:	0151      	lsls	r1, r2, #5
 80057e0:	69fa      	ldr	r2, [r7, #28]
 80057e2:	440a      	add	r2, r1
 80057e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057e8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80057ec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80057f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	015a      	lsls	r2, r3, #5
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	4413      	add	r3, r2
 80057fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057fe:	691b      	ldr	r3, [r3, #16]
 8005800:	69ba      	ldr	r2, [r7, #24]
 8005802:	0151      	lsls	r1, r2, #5
 8005804:	69fa      	ldr	r2, [r7, #28]
 8005806:	440a      	add	r2, r1
 8005808:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800580c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005810:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005812:	69bb      	ldr	r3, [r7, #24]
 8005814:	015a      	lsls	r2, r3, #5
 8005816:	69fb      	ldr	r3, [r7, #28]
 8005818:	4413      	add	r3, r2
 800581a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800581e:	691b      	ldr	r3, [r3, #16]
 8005820:	69ba      	ldr	r2, [r7, #24]
 8005822:	0151      	lsls	r1, r2, #5
 8005824:	69fa      	ldr	r2, [r7, #28]
 8005826:	440a      	add	r2, r1
 8005828:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800582c:	0cdb      	lsrs	r3, r3, #19
 800582e:	04db      	lsls	r3, r3, #19
 8005830:	6113      	str	r3, [r2, #16]
 8005832:	e074      	b.n	800591e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	015a      	lsls	r2, r3, #5
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	4413      	add	r3, r2
 800583c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005840:	691b      	ldr	r3, [r3, #16]
 8005842:	69ba      	ldr	r2, [r7, #24]
 8005844:	0151      	lsls	r1, r2, #5
 8005846:	69fa      	ldr	r2, [r7, #28]
 8005848:	440a      	add	r2, r1
 800584a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800584e:	0cdb      	lsrs	r3, r3, #19
 8005850:	04db      	lsls	r3, r3, #19
 8005852:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005854:	69bb      	ldr	r3, [r7, #24]
 8005856:	015a      	lsls	r2, r3, #5
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	4413      	add	r3, r2
 800585c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005860:	691b      	ldr	r3, [r3, #16]
 8005862:	69ba      	ldr	r2, [r7, #24]
 8005864:	0151      	lsls	r1, r2, #5
 8005866:	69fa      	ldr	r2, [r7, #28]
 8005868:	440a      	add	r2, r1
 800586a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800586e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005872:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005876:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005878:	69bb      	ldr	r3, [r7, #24]
 800587a:	015a      	lsls	r2, r3, #5
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	4413      	add	r3, r2
 8005880:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005884:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	6999      	ldr	r1, [r3, #24]
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	440b      	add	r3, r1
 8005890:	1e59      	subs	r1, r3, #1
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	fbb1 f3f3 	udiv	r3, r1, r3
 800589a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800589c:	4b9d      	ldr	r3, [pc, #628]	; (8005b14 <USB_EPStartXfer+0x370>)
 800589e:	400b      	ands	r3, r1
 80058a0:	69b9      	ldr	r1, [r7, #24]
 80058a2:	0148      	lsls	r0, r1, #5
 80058a4:	69f9      	ldr	r1, [r7, #28]
 80058a6:	4401      	add	r1, r0
 80058a8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80058ac:	4313      	orrs	r3, r2
 80058ae:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80058b0:	69bb      	ldr	r3, [r7, #24]
 80058b2:	015a      	lsls	r2, r3, #5
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	4413      	add	r3, r2
 80058b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058bc:	691a      	ldr	r2, [r3, #16]
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	699b      	ldr	r3, [r3, #24]
 80058c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058c6:	69b9      	ldr	r1, [r7, #24]
 80058c8:	0148      	lsls	r0, r1, #5
 80058ca:	69f9      	ldr	r1, [r7, #28]
 80058cc:	4401      	add	r1, r0
 80058ce:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80058d2:	4313      	orrs	r3, r2
 80058d4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	791b      	ldrb	r3, [r3, #4]
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d11f      	bne.n	800591e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80058de:	69bb      	ldr	r3, [r7, #24]
 80058e0:	015a      	lsls	r2, r3, #5
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	4413      	add	r3, r2
 80058e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058ea:	691b      	ldr	r3, [r3, #16]
 80058ec:	69ba      	ldr	r2, [r7, #24]
 80058ee:	0151      	lsls	r1, r2, #5
 80058f0:	69fa      	ldr	r2, [r7, #28]
 80058f2:	440a      	add	r2, r1
 80058f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058f8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80058fc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80058fe:	69bb      	ldr	r3, [r7, #24]
 8005900:	015a      	lsls	r2, r3, #5
 8005902:	69fb      	ldr	r3, [r7, #28]
 8005904:	4413      	add	r3, r2
 8005906:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800590a:	691b      	ldr	r3, [r3, #16]
 800590c:	69ba      	ldr	r2, [r7, #24]
 800590e:	0151      	lsls	r1, r2, #5
 8005910:	69fa      	ldr	r2, [r7, #28]
 8005912:	440a      	add	r2, r1
 8005914:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005918:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800591c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800591e:	79fb      	ldrb	r3, [r7, #7]
 8005920:	2b01      	cmp	r3, #1
 8005922:	d14b      	bne.n	80059bc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	695b      	ldr	r3, [r3, #20]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d009      	beq.n	8005940 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800592c:	69bb      	ldr	r3, [r7, #24]
 800592e:	015a      	lsls	r2, r3, #5
 8005930:	69fb      	ldr	r3, [r7, #28]
 8005932:	4413      	add	r3, r2
 8005934:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005938:	461a      	mov	r2, r3
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	695b      	ldr	r3, [r3, #20]
 800593e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	791b      	ldrb	r3, [r3, #4]
 8005944:	2b01      	cmp	r3, #1
 8005946:	d128      	bne.n	800599a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005954:	2b00      	cmp	r3, #0
 8005956:	d110      	bne.n	800597a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005958:	69bb      	ldr	r3, [r7, #24]
 800595a:	015a      	lsls	r2, r3, #5
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	4413      	add	r3, r2
 8005960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	69ba      	ldr	r2, [r7, #24]
 8005968:	0151      	lsls	r1, r2, #5
 800596a:	69fa      	ldr	r2, [r7, #28]
 800596c:	440a      	add	r2, r1
 800596e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005972:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005976:	6013      	str	r3, [r2, #0]
 8005978:	e00f      	b.n	800599a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800597a:	69bb      	ldr	r3, [r7, #24]
 800597c:	015a      	lsls	r2, r3, #5
 800597e:	69fb      	ldr	r3, [r7, #28]
 8005980:	4413      	add	r3, r2
 8005982:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	69ba      	ldr	r2, [r7, #24]
 800598a:	0151      	lsls	r1, r2, #5
 800598c:	69fa      	ldr	r2, [r7, #28]
 800598e:	440a      	add	r2, r1
 8005990:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005998:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800599a:	69bb      	ldr	r3, [r7, #24]
 800599c:	015a      	lsls	r2, r3, #5
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	4413      	add	r3, r2
 80059a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	69ba      	ldr	r2, [r7, #24]
 80059aa:	0151      	lsls	r1, r2, #5
 80059ac:	69fa      	ldr	r2, [r7, #28]
 80059ae:	440a      	add	r2, r1
 80059b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059b4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80059b8:	6013      	str	r3, [r2, #0]
 80059ba:	e133      	b.n	8005c24 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80059bc:	69bb      	ldr	r3, [r7, #24]
 80059be:	015a      	lsls	r2, r3, #5
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	4413      	add	r3, r2
 80059c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	69ba      	ldr	r2, [r7, #24]
 80059cc:	0151      	lsls	r1, r2, #5
 80059ce:	69fa      	ldr	r2, [r7, #28]
 80059d0:	440a      	add	r2, r1
 80059d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80059da:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	791b      	ldrb	r3, [r3, #4]
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d015      	beq.n	8005a10 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	699b      	ldr	r3, [r3, #24]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	f000 811b 	beq.w	8005c24 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	f003 030f 	and.w	r3, r3, #15
 80059fe:	2101      	movs	r1, #1
 8005a00:	fa01 f303 	lsl.w	r3, r1, r3
 8005a04:	69f9      	ldr	r1, [r7, #28]
 8005a06:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	634b      	str	r3, [r1, #52]	; 0x34
 8005a0e:	e109      	b.n	8005c24 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d110      	bne.n	8005a42 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	015a      	lsls	r2, r3, #5
 8005a24:	69fb      	ldr	r3, [r7, #28]
 8005a26:	4413      	add	r3, r2
 8005a28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	69ba      	ldr	r2, [r7, #24]
 8005a30:	0151      	lsls	r1, r2, #5
 8005a32:	69fa      	ldr	r2, [r7, #28]
 8005a34:	440a      	add	r2, r1
 8005a36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a3a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005a3e:	6013      	str	r3, [r2, #0]
 8005a40:	e00f      	b.n	8005a62 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005a42:	69bb      	ldr	r3, [r7, #24]
 8005a44:	015a      	lsls	r2, r3, #5
 8005a46:	69fb      	ldr	r3, [r7, #28]
 8005a48:	4413      	add	r3, r2
 8005a4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	69ba      	ldr	r2, [r7, #24]
 8005a52:	0151      	lsls	r1, r2, #5
 8005a54:	69fa      	ldr	r2, [r7, #28]
 8005a56:	440a      	add	r2, r1
 8005a58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a60:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	6919      	ldr	r1, [r3, #16]
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	781a      	ldrb	r2, [r3, #0]
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	699b      	ldr	r3, [r3, #24]
 8005a6e:	b298      	uxth	r0, r3
 8005a70:	79fb      	ldrb	r3, [r7, #7]
 8005a72:	9300      	str	r3, [sp, #0]
 8005a74:	4603      	mov	r3, r0
 8005a76:	68f8      	ldr	r0, [r7, #12]
 8005a78:	f000 fade 	bl	8006038 <USB_WritePacket>
 8005a7c:	e0d2      	b.n	8005c24 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005a7e:	69bb      	ldr	r3, [r7, #24]
 8005a80:	015a      	lsls	r2, r3, #5
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	4413      	add	r3, r2
 8005a86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a8a:	691b      	ldr	r3, [r3, #16]
 8005a8c:	69ba      	ldr	r2, [r7, #24]
 8005a8e:	0151      	lsls	r1, r2, #5
 8005a90:	69fa      	ldr	r2, [r7, #28]
 8005a92:	440a      	add	r2, r1
 8005a94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a98:	0cdb      	lsrs	r3, r3, #19
 8005a9a:	04db      	lsls	r3, r3, #19
 8005a9c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005a9e:	69bb      	ldr	r3, [r7, #24]
 8005aa0:	015a      	lsls	r2, r3, #5
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	4413      	add	r3, r2
 8005aa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aaa:	691b      	ldr	r3, [r3, #16]
 8005aac:	69ba      	ldr	r2, [r7, #24]
 8005aae:	0151      	lsls	r1, r2, #5
 8005ab0:	69fa      	ldr	r2, [r7, #28]
 8005ab2:	440a      	add	r2, r1
 8005ab4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ab8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005abc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ac0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	699b      	ldr	r3, [r3, #24]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d126      	bne.n	8005b18 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005aca:	69bb      	ldr	r3, [r7, #24]
 8005acc:	015a      	lsls	r2, r3, #5
 8005ace:	69fb      	ldr	r3, [r7, #28]
 8005ad0:	4413      	add	r3, r2
 8005ad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ad6:	691a      	ldr	r2, [r3, #16]
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ae0:	69b9      	ldr	r1, [r7, #24]
 8005ae2:	0148      	lsls	r0, r1, #5
 8005ae4:	69f9      	ldr	r1, [r7, #28]
 8005ae6:	4401      	add	r1, r0
 8005ae8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005aec:	4313      	orrs	r3, r2
 8005aee:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	015a      	lsls	r2, r3, #5
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	4413      	add	r3, r2
 8005af8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	69ba      	ldr	r2, [r7, #24]
 8005b00:	0151      	lsls	r1, r2, #5
 8005b02:	69fa      	ldr	r2, [r7, #28]
 8005b04:	440a      	add	r2, r1
 8005b06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b0e:	6113      	str	r3, [r2, #16]
 8005b10:	e03a      	b.n	8005b88 <USB_EPStartXfer+0x3e4>
 8005b12:	bf00      	nop
 8005b14:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	699a      	ldr	r2, [r3, #24]
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	4413      	add	r3, r2
 8005b22:	1e5a      	subs	r2, r3, #1
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b2c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	68db      	ldr	r3, [r3, #12]
 8005b32:	8afa      	ldrh	r2, [r7, #22]
 8005b34:	fb03 f202 	mul.w	r2, r3, r2
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005b3c:	69bb      	ldr	r3, [r7, #24]
 8005b3e:	015a      	lsls	r2, r3, #5
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	4413      	add	r3, r2
 8005b44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b48:	691a      	ldr	r2, [r3, #16]
 8005b4a:	8afb      	ldrh	r3, [r7, #22]
 8005b4c:	04d9      	lsls	r1, r3, #19
 8005b4e:	4b38      	ldr	r3, [pc, #224]	; (8005c30 <USB_EPStartXfer+0x48c>)
 8005b50:	400b      	ands	r3, r1
 8005b52:	69b9      	ldr	r1, [r7, #24]
 8005b54:	0148      	lsls	r0, r1, #5
 8005b56:	69f9      	ldr	r1, [r7, #28]
 8005b58:	4401      	add	r1, r0
 8005b5a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005b62:	69bb      	ldr	r3, [r7, #24]
 8005b64:	015a      	lsls	r2, r3, #5
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	4413      	add	r3, r2
 8005b6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b6e:	691a      	ldr	r2, [r3, #16]
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	69db      	ldr	r3, [r3, #28]
 8005b74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b78:	69b9      	ldr	r1, [r7, #24]
 8005b7a:	0148      	lsls	r0, r1, #5
 8005b7c:	69f9      	ldr	r1, [r7, #28]
 8005b7e:	4401      	add	r1, r0
 8005b80:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005b84:	4313      	orrs	r3, r2
 8005b86:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005b88:	79fb      	ldrb	r3, [r7, #7]
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d10d      	bne.n	8005baa <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	691b      	ldr	r3, [r3, #16]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d009      	beq.n	8005baa <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	6919      	ldr	r1, [r3, #16]
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	015a      	lsls	r2, r3, #5
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	4413      	add	r3, r2
 8005ba2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ba6:	460a      	mov	r2, r1
 8005ba8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	791b      	ldrb	r3, [r3, #4]
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d128      	bne.n	8005c04 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005bb2:	69fb      	ldr	r3, [r7, #28]
 8005bb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d110      	bne.n	8005be4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	015a      	lsls	r2, r3, #5
 8005bc6:	69fb      	ldr	r3, [r7, #28]
 8005bc8:	4413      	add	r3, r2
 8005bca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	69ba      	ldr	r2, [r7, #24]
 8005bd2:	0151      	lsls	r1, r2, #5
 8005bd4:	69fa      	ldr	r2, [r7, #28]
 8005bd6:	440a      	add	r2, r1
 8005bd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bdc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005be0:	6013      	str	r3, [r2, #0]
 8005be2:	e00f      	b.n	8005c04 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005be4:	69bb      	ldr	r3, [r7, #24]
 8005be6:	015a      	lsls	r2, r3, #5
 8005be8:	69fb      	ldr	r3, [r7, #28]
 8005bea:	4413      	add	r3, r2
 8005bec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	69ba      	ldr	r2, [r7, #24]
 8005bf4:	0151      	lsls	r1, r2, #5
 8005bf6:	69fa      	ldr	r2, [r7, #28]
 8005bf8:	440a      	add	r2, r1
 8005bfa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c02:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	015a      	lsls	r2, r3, #5
 8005c08:	69fb      	ldr	r3, [r7, #28]
 8005c0a:	4413      	add	r3, r2
 8005c0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	69ba      	ldr	r2, [r7, #24]
 8005c14:	0151      	lsls	r1, r2, #5
 8005c16:	69fa      	ldr	r2, [r7, #28]
 8005c18:	440a      	add	r2, r1
 8005c1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c1e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c22:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005c24:	2300      	movs	r3, #0
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3720      	adds	r7, #32
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	1ff80000 	.word	0x1ff80000

08005c34 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b087      	sub	sp, #28
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	4613      	mov	r3, r2
 8005c40:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	785b      	ldrb	r3, [r3, #1]
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	f040 80ce 	bne.w	8005df2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	699b      	ldr	r3, [r3, #24]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d132      	bne.n	8005cc4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	015a      	lsls	r2, r3, #5
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	4413      	add	r3, r2
 8005c66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c6a:	691b      	ldr	r3, [r3, #16]
 8005c6c:	693a      	ldr	r2, [r7, #16]
 8005c6e:	0151      	lsls	r1, r2, #5
 8005c70:	697a      	ldr	r2, [r7, #20]
 8005c72:	440a      	add	r2, r1
 8005c74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c78:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c7c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c80:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	015a      	lsls	r2, r3, #5
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	4413      	add	r3, r2
 8005c8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c8e:	691b      	ldr	r3, [r3, #16]
 8005c90:	693a      	ldr	r2, [r7, #16]
 8005c92:	0151      	lsls	r1, r2, #5
 8005c94:	697a      	ldr	r2, [r7, #20]
 8005c96:	440a      	add	r2, r1
 8005c98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ca0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	015a      	lsls	r2, r3, #5
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	4413      	add	r3, r2
 8005caa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cae:	691b      	ldr	r3, [r3, #16]
 8005cb0:	693a      	ldr	r2, [r7, #16]
 8005cb2:	0151      	lsls	r1, r2, #5
 8005cb4:	697a      	ldr	r2, [r7, #20]
 8005cb6:	440a      	add	r2, r1
 8005cb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cbc:	0cdb      	lsrs	r3, r3, #19
 8005cbe:	04db      	lsls	r3, r3, #19
 8005cc0:	6113      	str	r3, [r2, #16]
 8005cc2:	e04e      	b.n	8005d62 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	015a      	lsls	r2, r3, #5
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	4413      	add	r3, r2
 8005ccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cd0:	691b      	ldr	r3, [r3, #16]
 8005cd2:	693a      	ldr	r2, [r7, #16]
 8005cd4:	0151      	lsls	r1, r2, #5
 8005cd6:	697a      	ldr	r2, [r7, #20]
 8005cd8:	440a      	add	r2, r1
 8005cda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cde:	0cdb      	lsrs	r3, r3, #19
 8005ce0:	04db      	lsls	r3, r3, #19
 8005ce2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	015a      	lsls	r2, r3, #5
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	4413      	add	r3, r2
 8005cec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cf0:	691b      	ldr	r3, [r3, #16]
 8005cf2:	693a      	ldr	r2, [r7, #16]
 8005cf4:	0151      	lsls	r1, r2, #5
 8005cf6:	697a      	ldr	r2, [r7, #20]
 8005cf8:	440a      	add	r2, r1
 8005cfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cfe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d02:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d06:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	699a      	ldr	r2, [r3, #24]
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d903      	bls.n	8005d1c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	68da      	ldr	r2, [r3, #12]
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	015a      	lsls	r2, r3, #5
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	4413      	add	r3, r2
 8005d24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	693a      	ldr	r2, [r7, #16]
 8005d2c:	0151      	lsls	r1, r2, #5
 8005d2e:	697a      	ldr	r2, [r7, #20]
 8005d30:	440a      	add	r2, r1
 8005d32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d36:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d3a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	015a      	lsls	r2, r3, #5
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	4413      	add	r3, r2
 8005d44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d48:	691a      	ldr	r2, [r3, #16]
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	699b      	ldr	r3, [r3, #24]
 8005d4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d52:	6939      	ldr	r1, [r7, #16]
 8005d54:	0148      	lsls	r0, r1, #5
 8005d56:	6979      	ldr	r1, [r7, #20]
 8005d58:	4401      	add	r1, r0
 8005d5a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005d62:	79fb      	ldrb	r3, [r7, #7]
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d11e      	bne.n	8005da6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	695b      	ldr	r3, [r3, #20]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d009      	beq.n	8005d84 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	015a      	lsls	r2, r3, #5
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	4413      	add	r3, r2
 8005d78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	695b      	ldr	r3, [r3, #20]
 8005d82:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	015a      	lsls	r2, r3, #5
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	4413      	add	r3, r2
 8005d8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	693a      	ldr	r2, [r7, #16]
 8005d94:	0151      	lsls	r1, r2, #5
 8005d96:	697a      	ldr	r2, [r7, #20]
 8005d98:	440a      	add	r2, r1
 8005d9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d9e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005da2:	6013      	str	r3, [r2, #0]
 8005da4:	e097      	b.n	8005ed6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	015a      	lsls	r2, r3, #5
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	4413      	add	r3, r2
 8005dae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	693a      	ldr	r2, [r7, #16]
 8005db6:	0151      	lsls	r1, r2, #5
 8005db8:	697a      	ldr	r2, [r7, #20]
 8005dba:	440a      	add	r2, r1
 8005dbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dc0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005dc4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	699b      	ldr	r3, [r3, #24]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	f000 8083 	beq.w	8005ed6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	781b      	ldrb	r3, [r3, #0]
 8005ddc:	f003 030f 	and.w	r3, r3, #15
 8005de0:	2101      	movs	r1, #1
 8005de2:	fa01 f303 	lsl.w	r3, r1, r3
 8005de6:	6979      	ldr	r1, [r7, #20]
 8005de8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005dec:	4313      	orrs	r3, r2
 8005dee:	634b      	str	r3, [r1, #52]	; 0x34
 8005df0:	e071      	b.n	8005ed6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	015a      	lsls	r2, r3, #5
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	4413      	add	r3, r2
 8005dfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dfe:	691b      	ldr	r3, [r3, #16]
 8005e00:	693a      	ldr	r2, [r7, #16]
 8005e02:	0151      	lsls	r1, r2, #5
 8005e04:	697a      	ldr	r2, [r7, #20]
 8005e06:	440a      	add	r2, r1
 8005e08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e0c:	0cdb      	lsrs	r3, r3, #19
 8005e0e:	04db      	lsls	r3, r3, #19
 8005e10:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	015a      	lsls	r2, r3, #5
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	4413      	add	r3, r2
 8005e1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e1e:	691b      	ldr	r3, [r3, #16]
 8005e20:	693a      	ldr	r2, [r7, #16]
 8005e22:	0151      	lsls	r1, r2, #5
 8005e24:	697a      	ldr	r2, [r7, #20]
 8005e26:	440a      	add	r2, r1
 8005e28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e2c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e30:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e34:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	699b      	ldr	r3, [r3, #24]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d003      	beq.n	8005e46 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	68da      	ldr	r2, [r3, #12]
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	68da      	ldr	r2, [r3, #12]
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	015a      	lsls	r2, r3, #5
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	4413      	add	r3, r2
 8005e56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e5a:	691b      	ldr	r3, [r3, #16]
 8005e5c:	693a      	ldr	r2, [r7, #16]
 8005e5e:	0151      	lsls	r1, r2, #5
 8005e60:	697a      	ldr	r2, [r7, #20]
 8005e62:	440a      	add	r2, r1
 8005e64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e68:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e6c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	015a      	lsls	r2, r3, #5
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	4413      	add	r3, r2
 8005e76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e7a:	691a      	ldr	r2, [r3, #16]
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	69db      	ldr	r3, [r3, #28]
 8005e80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e84:	6939      	ldr	r1, [r7, #16]
 8005e86:	0148      	lsls	r0, r1, #5
 8005e88:	6979      	ldr	r1, [r7, #20]
 8005e8a:	4401      	add	r1, r0
 8005e8c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005e90:	4313      	orrs	r3, r2
 8005e92:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005e94:	79fb      	ldrb	r3, [r7, #7]
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d10d      	bne.n	8005eb6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	691b      	ldr	r3, [r3, #16]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d009      	beq.n	8005eb6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	6919      	ldr	r1, [r3, #16]
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	015a      	lsls	r2, r3, #5
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	4413      	add	r3, r2
 8005eae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eb2:	460a      	mov	r2, r1
 8005eb4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	015a      	lsls	r2, r3, #5
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	4413      	add	r3, r2
 8005ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	693a      	ldr	r2, [r7, #16]
 8005ec6:	0151      	lsls	r1, r2, #5
 8005ec8:	697a      	ldr	r2, [r7, #20]
 8005eca:	440a      	add	r2, r1
 8005ecc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ed0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ed4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005ed6:	2300      	movs	r3, #0
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	371c      	adds	r7, #28
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr

08005ee4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b087      	sub	sp, #28
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	785b      	ldrb	r3, [r3, #1]
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d14a      	bne.n	8005f98 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	015a      	lsls	r2, r3, #5
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	4413      	add	r3, r2
 8005f0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f1a:	f040 8086 	bne.w	800602a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	015a      	lsls	r2, r3, #5
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	4413      	add	r3, r2
 8005f28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	683a      	ldr	r2, [r7, #0]
 8005f30:	7812      	ldrb	r2, [r2, #0]
 8005f32:	0151      	lsls	r1, r2, #5
 8005f34:	693a      	ldr	r2, [r7, #16]
 8005f36:	440a      	add	r2, r1
 8005f38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f3c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005f40:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	015a      	lsls	r2, r3, #5
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	4413      	add	r3, r2
 8005f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	683a      	ldr	r2, [r7, #0]
 8005f54:	7812      	ldrb	r2, [r2, #0]
 8005f56:	0151      	lsls	r1, r2, #5
 8005f58:	693a      	ldr	r2, [r7, #16]
 8005f5a:	440a      	add	r2, r1
 8005f5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f64:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	3301      	adds	r3, #1
 8005f6a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f242 7210 	movw	r2, #10000	; 0x2710
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d902      	bls.n	8005f7c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	75fb      	strb	r3, [r7, #23]
          break;
 8005f7a:	e056      	b.n	800602a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	015a      	lsls	r2, r3, #5
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	4413      	add	r3, r2
 8005f86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f94:	d0e7      	beq.n	8005f66 <USB_EPStopXfer+0x82>
 8005f96:	e048      	b.n	800602a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	015a      	lsls	r2, r3, #5
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	4413      	add	r3, r2
 8005fa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fb0:	d13b      	bne.n	800602a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	015a      	lsls	r2, r3, #5
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	4413      	add	r3, r2
 8005fbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	683a      	ldr	r2, [r7, #0]
 8005fc4:	7812      	ldrb	r2, [r2, #0]
 8005fc6:	0151      	lsls	r1, r2, #5
 8005fc8:	693a      	ldr	r2, [r7, #16]
 8005fca:	440a      	add	r2, r1
 8005fcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fd0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005fd4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	015a      	lsls	r2, r3, #5
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	4413      	add	r3, r2
 8005fe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	683a      	ldr	r2, [r7, #0]
 8005fe8:	7812      	ldrb	r2, [r2, #0]
 8005fea:	0151      	lsls	r1, r2, #5
 8005fec:	693a      	ldr	r2, [r7, #16]
 8005fee:	440a      	add	r2, r1
 8005ff0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ff4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ff8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f242 7210 	movw	r2, #10000	; 0x2710
 8006006:	4293      	cmp	r3, r2
 8006008:	d902      	bls.n	8006010 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	75fb      	strb	r3, [r7, #23]
          break;
 800600e:	e00c      	b.n	800602a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	015a      	lsls	r2, r3, #5
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	4413      	add	r3, r2
 800601a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006024:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006028:	d0e7      	beq.n	8005ffa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800602a:	7dfb      	ldrb	r3, [r7, #23]
}
 800602c:	4618      	mov	r0, r3
 800602e:	371c      	adds	r7, #28
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006038:	b480      	push	{r7}
 800603a:	b089      	sub	sp, #36	; 0x24
 800603c:	af00      	add	r7, sp, #0
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	4611      	mov	r1, r2
 8006044:	461a      	mov	r2, r3
 8006046:	460b      	mov	r3, r1
 8006048:	71fb      	strb	r3, [r7, #7]
 800604a:	4613      	mov	r3, r2
 800604c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006056:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800605a:	2b00      	cmp	r3, #0
 800605c:	d123      	bne.n	80060a6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800605e:	88bb      	ldrh	r3, [r7, #4]
 8006060:	3303      	adds	r3, #3
 8006062:	089b      	lsrs	r3, r3, #2
 8006064:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006066:	2300      	movs	r3, #0
 8006068:	61bb      	str	r3, [r7, #24]
 800606a:	e018      	b.n	800609e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800606c:	79fb      	ldrb	r3, [r7, #7]
 800606e:	031a      	lsls	r2, r3, #12
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	4413      	add	r3, r2
 8006074:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006078:	461a      	mov	r2, r3
 800607a:	69fb      	ldr	r3, [r7, #28]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006080:	69fb      	ldr	r3, [r7, #28]
 8006082:	3301      	adds	r3, #1
 8006084:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	3301      	adds	r3, #1
 800608a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800608c:	69fb      	ldr	r3, [r7, #28]
 800608e:	3301      	adds	r3, #1
 8006090:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006092:	69fb      	ldr	r3, [r7, #28]
 8006094:	3301      	adds	r3, #1
 8006096:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	3301      	adds	r3, #1
 800609c:	61bb      	str	r3, [r7, #24]
 800609e:	69ba      	ldr	r2, [r7, #24]
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d3e2      	bcc.n	800606c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80060a6:	2300      	movs	r3, #0
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3724      	adds	r7, #36	; 0x24
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr

080060b4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b08b      	sub	sp, #44	; 0x2c
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	60b9      	str	r1, [r7, #8]
 80060be:	4613      	mov	r3, r2
 80060c0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80060ca:	88fb      	ldrh	r3, [r7, #6]
 80060cc:	089b      	lsrs	r3, r3, #2
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80060d2:	88fb      	ldrh	r3, [r7, #6]
 80060d4:	f003 0303 	and.w	r3, r3, #3
 80060d8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80060da:	2300      	movs	r3, #0
 80060dc:	623b      	str	r3, [r7, #32]
 80060de:	e014      	b.n	800610a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80060e0:	69bb      	ldr	r3, [r7, #24]
 80060e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ea:	601a      	str	r2, [r3, #0]
    pDest++;
 80060ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ee:	3301      	adds	r3, #1
 80060f0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80060f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f4:	3301      	adds	r3, #1
 80060f6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80060f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fa:	3301      	adds	r3, #1
 80060fc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80060fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006100:	3301      	adds	r3, #1
 8006102:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006104:	6a3b      	ldr	r3, [r7, #32]
 8006106:	3301      	adds	r3, #1
 8006108:	623b      	str	r3, [r7, #32]
 800610a:	6a3a      	ldr	r2, [r7, #32]
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	429a      	cmp	r2, r3
 8006110:	d3e6      	bcc.n	80060e0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006112:	8bfb      	ldrh	r3, [r7, #30]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d01e      	beq.n	8006156 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006118:	2300      	movs	r3, #0
 800611a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800611c:	69bb      	ldr	r3, [r7, #24]
 800611e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006122:	461a      	mov	r2, r3
 8006124:	f107 0310 	add.w	r3, r7, #16
 8006128:	6812      	ldr	r2, [r2, #0]
 800612a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800612c:	693a      	ldr	r2, [r7, #16]
 800612e:	6a3b      	ldr	r3, [r7, #32]
 8006130:	b2db      	uxtb	r3, r3
 8006132:	00db      	lsls	r3, r3, #3
 8006134:	fa22 f303 	lsr.w	r3, r2, r3
 8006138:	b2da      	uxtb	r2, r3
 800613a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613c:	701a      	strb	r2, [r3, #0]
      i++;
 800613e:	6a3b      	ldr	r3, [r7, #32]
 8006140:	3301      	adds	r3, #1
 8006142:	623b      	str	r3, [r7, #32]
      pDest++;
 8006144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006146:	3301      	adds	r3, #1
 8006148:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800614a:	8bfb      	ldrh	r3, [r7, #30]
 800614c:	3b01      	subs	r3, #1
 800614e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006150:	8bfb      	ldrh	r3, [r7, #30]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d1ea      	bne.n	800612c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006158:	4618      	mov	r0, r3
 800615a:	372c      	adds	r7, #44	; 0x2c
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr

08006164 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006164:	b480      	push	{r7}
 8006166:	b085      	sub	sp, #20
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	785b      	ldrb	r3, [r3, #1]
 800617c:	2b01      	cmp	r3, #1
 800617e:	d12c      	bne.n	80061da <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	015a      	lsls	r2, r3, #5
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	4413      	add	r3, r2
 8006188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	2b00      	cmp	r3, #0
 8006190:	db12      	blt.n	80061b8 <USB_EPSetStall+0x54>
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d00f      	beq.n	80061b8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	015a      	lsls	r2, r3, #5
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	4413      	add	r3, r2
 80061a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	68ba      	ldr	r2, [r7, #8]
 80061a8:	0151      	lsls	r1, r2, #5
 80061aa:	68fa      	ldr	r2, [r7, #12]
 80061ac:	440a      	add	r2, r1
 80061ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80061b6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	015a      	lsls	r2, r3, #5
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	4413      	add	r3, r2
 80061c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	68ba      	ldr	r2, [r7, #8]
 80061c8:	0151      	lsls	r1, r2, #5
 80061ca:	68fa      	ldr	r2, [r7, #12]
 80061cc:	440a      	add	r2, r1
 80061ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80061d6:	6013      	str	r3, [r2, #0]
 80061d8:	e02b      	b.n	8006232 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	015a      	lsls	r2, r3, #5
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	4413      	add	r3, r2
 80061e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	db12      	blt.n	8006212 <USB_EPSetStall+0xae>
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d00f      	beq.n	8006212 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	015a      	lsls	r2, r3, #5
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	4413      	add	r3, r2
 80061fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	68ba      	ldr	r2, [r7, #8]
 8006202:	0151      	lsls	r1, r2, #5
 8006204:	68fa      	ldr	r2, [r7, #12]
 8006206:	440a      	add	r2, r1
 8006208:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800620c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006210:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	015a      	lsls	r2, r3, #5
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	4413      	add	r3, r2
 800621a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	68ba      	ldr	r2, [r7, #8]
 8006222:	0151      	lsls	r1, r2, #5
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	440a      	add	r2, r1
 8006228:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800622c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006230:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006232:	2300      	movs	r3, #0
}
 8006234:	4618      	mov	r0, r3
 8006236:	3714      	adds	r7, #20
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr

08006240 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006240:	b480      	push	{r7}
 8006242:	b085      	sub	sp, #20
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	781b      	ldrb	r3, [r3, #0]
 8006252:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	785b      	ldrb	r3, [r3, #1]
 8006258:	2b01      	cmp	r3, #1
 800625a:	d128      	bne.n	80062ae <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	015a      	lsls	r2, r3, #5
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	4413      	add	r3, r2
 8006264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	68ba      	ldr	r2, [r7, #8]
 800626c:	0151      	lsls	r1, r2, #5
 800626e:	68fa      	ldr	r2, [r7, #12]
 8006270:	440a      	add	r2, r1
 8006272:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006276:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800627a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	791b      	ldrb	r3, [r3, #4]
 8006280:	2b03      	cmp	r3, #3
 8006282:	d003      	beq.n	800628c <USB_EPClearStall+0x4c>
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	791b      	ldrb	r3, [r3, #4]
 8006288:	2b02      	cmp	r3, #2
 800628a:	d138      	bne.n	80062fe <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	015a      	lsls	r2, r3, #5
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	4413      	add	r3, r2
 8006294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	68ba      	ldr	r2, [r7, #8]
 800629c:	0151      	lsls	r1, r2, #5
 800629e:	68fa      	ldr	r2, [r7, #12]
 80062a0:	440a      	add	r2, r1
 80062a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062aa:	6013      	str	r3, [r2, #0]
 80062ac:	e027      	b.n	80062fe <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	015a      	lsls	r2, r3, #5
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	4413      	add	r3, r2
 80062b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68ba      	ldr	r2, [r7, #8]
 80062be:	0151      	lsls	r1, r2, #5
 80062c0:	68fa      	ldr	r2, [r7, #12]
 80062c2:	440a      	add	r2, r1
 80062c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80062cc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	791b      	ldrb	r3, [r3, #4]
 80062d2:	2b03      	cmp	r3, #3
 80062d4:	d003      	beq.n	80062de <USB_EPClearStall+0x9e>
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	791b      	ldrb	r3, [r3, #4]
 80062da:	2b02      	cmp	r3, #2
 80062dc:	d10f      	bne.n	80062fe <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	015a      	lsls	r2, r3, #5
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	4413      	add	r3, r2
 80062e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	68ba      	ldr	r2, [r7, #8]
 80062ee:	0151      	lsls	r1, r2, #5
 80062f0:	68fa      	ldr	r2, [r7, #12]
 80062f2:	440a      	add	r2, r1
 80062f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062fc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80062fe:	2300      	movs	r3, #0
}
 8006300:	4618      	mov	r0, r3
 8006302:	3714      	adds	r7, #20
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr

0800630c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800630c:	b480      	push	{r7}
 800630e:	b085      	sub	sp, #20
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	460b      	mov	r3, r1
 8006316:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	68fa      	ldr	r2, [r7, #12]
 8006326:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800632a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800632e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	78fb      	ldrb	r3, [r7, #3]
 800633a:	011b      	lsls	r3, r3, #4
 800633c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006340:	68f9      	ldr	r1, [r7, #12]
 8006342:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006346:	4313      	orrs	r3, r2
 8006348:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800634a:	2300      	movs	r3, #0
}
 800634c:	4618      	mov	r0, r3
 800634e:	3714      	adds	r7, #20
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006358:	b480      	push	{r7}
 800635a:	b085      	sub	sp, #20
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	68fa      	ldr	r2, [r7, #12]
 800636e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006372:	f023 0303 	bic.w	r3, r3, #3
 8006376:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	68fa      	ldr	r2, [r7, #12]
 8006382:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006386:	f023 0302 	bic.w	r3, r3, #2
 800638a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800638c:	2300      	movs	r3, #0
}
 800638e:	4618      	mov	r0, r3
 8006390:	3714      	adds	r7, #20
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr

0800639a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800639a:	b480      	push	{r7}
 800639c:	b085      	sub	sp, #20
 800639e:	af00      	add	r7, sp, #0
 80063a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	68fa      	ldr	r2, [r7, #12]
 80063b0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80063b4:	f023 0303 	bic.w	r3, r3, #3
 80063b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	68fa      	ldr	r2, [r7, #12]
 80063c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063c8:	f043 0302 	orr.w	r3, r3, #2
 80063cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80063ce:	2300      	movs	r3, #0
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3714      	adds	r7, #20
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80063dc:	b480      	push	{r7}
 80063de:	b085      	sub	sp, #20
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	695b      	ldr	r3, [r3, #20]
 80063e8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	699b      	ldr	r3, [r3, #24]
 80063ee:	68fa      	ldr	r2, [r7, #12]
 80063f0:	4013      	ands	r3, r2
 80063f2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80063f4:	68fb      	ldr	r3, [r7, #12]
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3714      	adds	r7, #20
 80063fa:	46bd      	mov	sp, r7
 80063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006400:	4770      	bx	lr

08006402 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006402:	b480      	push	{r7}
 8006404:	b085      	sub	sp, #20
 8006406:	af00      	add	r7, sp, #0
 8006408:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006414:	699b      	ldr	r3, [r3, #24]
 8006416:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800641e:	69db      	ldr	r3, [r3, #28]
 8006420:	68ba      	ldr	r2, [r7, #8]
 8006422:	4013      	ands	r3, r2
 8006424:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	0c1b      	lsrs	r3, r3, #16
}
 800642a:	4618      	mov	r0, r3
 800642c:	3714      	adds	r7, #20
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr

08006436 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006436:	b480      	push	{r7}
 8006438:	b085      	sub	sp, #20
 800643a:	af00      	add	r7, sp, #0
 800643c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006448:	699b      	ldr	r3, [r3, #24]
 800644a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006452:	69db      	ldr	r3, [r3, #28]
 8006454:	68ba      	ldr	r2, [r7, #8]
 8006456:	4013      	ands	r3, r2
 8006458:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	b29b      	uxth	r3, r3
}
 800645e:	4618      	mov	r0, r3
 8006460:	3714      	adds	r7, #20
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr

0800646a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800646a:	b480      	push	{r7}
 800646c:	b085      	sub	sp, #20
 800646e:	af00      	add	r7, sp, #0
 8006470:	6078      	str	r0, [r7, #4]
 8006472:	460b      	mov	r3, r1
 8006474:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800647a:	78fb      	ldrb	r3, [r7, #3]
 800647c:	015a      	lsls	r2, r3, #5
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	4413      	add	r3, r2
 8006482:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006490:	695b      	ldr	r3, [r3, #20]
 8006492:	68ba      	ldr	r2, [r7, #8]
 8006494:	4013      	ands	r3, r2
 8006496:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006498:	68bb      	ldr	r3, [r7, #8]
}
 800649a:	4618      	mov	r0, r3
 800649c:	3714      	adds	r7, #20
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr

080064a6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80064a6:	b480      	push	{r7}
 80064a8:	b087      	sub	sp, #28
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	6078      	str	r0, [r7, #4]
 80064ae:	460b      	mov	r3, r1
 80064b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064c8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80064ca:	78fb      	ldrb	r3, [r7, #3]
 80064cc:	f003 030f 	and.w	r3, r3, #15
 80064d0:	68fa      	ldr	r2, [r7, #12]
 80064d2:	fa22 f303 	lsr.w	r3, r2, r3
 80064d6:	01db      	lsls	r3, r3, #7
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	693a      	ldr	r2, [r7, #16]
 80064dc:	4313      	orrs	r3, r2
 80064de:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80064e0:	78fb      	ldrb	r3, [r7, #3]
 80064e2:	015a      	lsls	r2, r3, #5
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	4413      	add	r3, r2
 80064e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	693a      	ldr	r2, [r7, #16]
 80064f0:	4013      	ands	r3, r2
 80064f2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80064f4:	68bb      	ldr	r3, [r7, #8]
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	371c      	adds	r7, #28
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr

08006502 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006502:	b480      	push	{r7}
 8006504:	b083      	sub	sp, #12
 8006506:	af00      	add	r7, sp, #0
 8006508:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	695b      	ldr	r3, [r3, #20]
 800650e:	f003 0301 	and.w	r3, r3, #1
}
 8006512:	4618      	mov	r0, r3
 8006514:	370c      	adds	r7, #12
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr

0800651e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800651e:	b480      	push	{r7}
 8006520:	b085      	sub	sp, #20
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	68fa      	ldr	r2, [r7, #12]
 8006534:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006538:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800653c:	f023 0307 	bic.w	r3, r3, #7
 8006540:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	68fa      	ldr	r2, [r7, #12]
 800654c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006550:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006554:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006556:	2300      	movs	r3, #0
}
 8006558:	4618      	mov	r0, r3
 800655a:	3714      	adds	r7, #20
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006564:	b480      	push	{r7}
 8006566:	b087      	sub	sp, #28
 8006568:	af00      	add	r7, sp, #0
 800656a:	60f8      	str	r0, [r7, #12]
 800656c:	460b      	mov	r3, r1
 800656e:	607a      	str	r2, [r7, #4]
 8006570:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	333c      	adds	r3, #60	; 0x3c
 800657a:	3304      	adds	r3, #4
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	4a26      	ldr	r2, [pc, #152]	; (800661c <USB_EP0_OutStart+0xb8>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d90a      	bls.n	800659e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006594:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006598:	d101      	bne.n	800659e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800659a:	2300      	movs	r3, #0
 800659c:	e037      	b.n	800660e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065a4:	461a      	mov	r2, r3
 80065a6:	2300      	movs	r3, #0
 80065a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065b0:	691b      	ldr	r3, [r3, #16]
 80065b2:	697a      	ldr	r2, [r7, #20]
 80065b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80065bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065c4:	691b      	ldr	r3, [r3, #16]
 80065c6:	697a      	ldr	r2, [r7, #20]
 80065c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065cc:	f043 0318 	orr.w	r3, r3, #24
 80065d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065d8:	691b      	ldr	r3, [r3, #16]
 80065da:	697a      	ldr	r2, [r7, #20]
 80065dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065e0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80065e4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80065e6:	7afb      	ldrb	r3, [r7, #11]
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d10f      	bne.n	800660c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065f2:	461a      	mov	r2, r3
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	697a      	ldr	r2, [r7, #20]
 8006602:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006606:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800660a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800660c:	2300      	movs	r3, #0
}
 800660e:	4618      	mov	r0, r3
 8006610:	371c      	adds	r7, #28
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr
 800661a:	bf00      	nop
 800661c:	4f54300a 	.word	0x4f54300a

08006620 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006620:	b480      	push	{r7}
 8006622:	b085      	sub	sp, #20
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006628:	2300      	movs	r3, #0
 800662a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	3301      	adds	r3, #1
 8006630:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	4a13      	ldr	r2, [pc, #76]	; (8006684 <USB_CoreReset+0x64>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d901      	bls.n	800663e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800663a:	2303      	movs	r3, #3
 800663c:	e01b      	b.n	8006676 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	691b      	ldr	r3, [r3, #16]
 8006642:	2b00      	cmp	r3, #0
 8006644:	daf2      	bge.n	800662c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006646:	2300      	movs	r3, #0
 8006648:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	691b      	ldr	r3, [r3, #16]
 800664e:	f043 0201 	orr.w	r2, r3, #1
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	3301      	adds	r3, #1
 800665a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	4a09      	ldr	r2, [pc, #36]	; (8006684 <USB_CoreReset+0x64>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d901      	bls.n	8006668 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006664:	2303      	movs	r3, #3
 8006666:	e006      	b.n	8006676 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	691b      	ldr	r3, [r3, #16]
 800666c:	f003 0301 	and.w	r3, r3, #1
 8006670:	2b01      	cmp	r3, #1
 8006672:	d0f0      	beq.n	8006656 <USB_CoreReset+0x36>

  return HAL_OK;
 8006674:	2300      	movs	r3, #0
}
 8006676:	4618      	mov	r0, r3
 8006678:	3714      	adds	r7, #20
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr
 8006682:	bf00      	nop
 8006684:	00030d40 	.word	0x00030d40

08006688 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	460b      	mov	r3, r1
 8006692:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006694:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006698:	f005 fa56 	bl	800bb48 <USBD_static_malloc>
 800669c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d109      	bne.n	80066b8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	32b0      	adds	r2, #176	; 0xb0
 80066ae:	2100      	movs	r1, #0
 80066b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80066b4:	2302      	movs	r3, #2
 80066b6:	e0d4      	b.n	8006862 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80066b8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80066bc:	2100      	movs	r1, #0
 80066be:	68f8      	ldr	r0, [r7, #12]
 80066c0:	f005 fc84 	bl	800bfcc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	32b0      	adds	r2, #176	; 0xb0
 80066ce:	68f9      	ldr	r1, [r7, #12]
 80066d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	32b0      	adds	r2, #176	; 0xb0
 80066de:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	7c1b      	ldrb	r3, [r3, #16]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d138      	bne.n	8006762 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80066f0:	4b5e      	ldr	r3, [pc, #376]	; (800686c <USBD_CDC_Init+0x1e4>)
 80066f2:	7819      	ldrb	r1, [r3, #0]
 80066f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066f8:	2202      	movs	r2, #2
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f005 f901 	bl	800b902 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006700:	4b5a      	ldr	r3, [pc, #360]	; (800686c <USBD_CDC_Init+0x1e4>)
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	f003 020f 	and.w	r2, r3, #15
 8006708:	6879      	ldr	r1, [r7, #4]
 800670a:	4613      	mov	r3, r2
 800670c:	009b      	lsls	r3, r3, #2
 800670e:	4413      	add	r3, r2
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	440b      	add	r3, r1
 8006714:	3324      	adds	r3, #36	; 0x24
 8006716:	2201      	movs	r2, #1
 8006718:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800671a:	4b55      	ldr	r3, [pc, #340]	; (8006870 <USBD_CDC_Init+0x1e8>)
 800671c:	7819      	ldrb	r1, [r3, #0]
 800671e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006722:	2202      	movs	r2, #2
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f005 f8ec 	bl	800b902 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800672a:	4b51      	ldr	r3, [pc, #324]	; (8006870 <USBD_CDC_Init+0x1e8>)
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	f003 020f 	and.w	r2, r3, #15
 8006732:	6879      	ldr	r1, [r7, #4]
 8006734:	4613      	mov	r3, r2
 8006736:	009b      	lsls	r3, r3, #2
 8006738:	4413      	add	r3, r2
 800673a:	009b      	lsls	r3, r3, #2
 800673c:	440b      	add	r3, r1
 800673e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006742:	2201      	movs	r2, #1
 8006744:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006746:	4b4b      	ldr	r3, [pc, #300]	; (8006874 <USBD_CDC_Init+0x1ec>)
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	f003 020f 	and.w	r2, r3, #15
 800674e:	6879      	ldr	r1, [r7, #4]
 8006750:	4613      	mov	r3, r2
 8006752:	009b      	lsls	r3, r3, #2
 8006754:	4413      	add	r3, r2
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	440b      	add	r3, r1
 800675a:	3326      	adds	r3, #38	; 0x26
 800675c:	2210      	movs	r2, #16
 800675e:	801a      	strh	r2, [r3, #0]
 8006760:	e035      	b.n	80067ce <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006762:	4b42      	ldr	r3, [pc, #264]	; (800686c <USBD_CDC_Init+0x1e4>)
 8006764:	7819      	ldrb	r1, [r3, #0]
 8006766:	2340      	movs	r3, #64	; 0x40
 8006768:	2202      	movs	r2, #2
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f005 f8c9 	bl	800b902 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006770:	4b3e      	ldr	r3, [pc, #248]	; (800686c <USBD_CDC_Init+0x1e4>)
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	f003 020f 	and.w	r2, r3, #15
 8006778:	6879      	ldr	r1, [r7, #4]
 800677a:	4613      	mov	r3, r2
 800677c:	009b      	lsls	r3, r3, #2
 800677e:	4413      	add	r3, r2
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	440b      	add	r3, r1
 8006784:	3324      	adds	r3, #36	; 0x24
 8006786:	2201      	movs	r2, #1
 8006788:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800678a:	4b39      	ldr	r3, [pc, #228]	; (8006870 <USBD_CDC_Init+0x1e8>)
 800678c:	7819      	ldrb	r1, [r3, #0]
 800678e:	2340      	movs	r3, #64	; 0x40
 8006790:	2202      	movs	r2, #2
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f005 f8b5 	bl	800b902 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006798:	4b35      	ldr	r3, [pc, #212]	; (8006870 <USBD_CDC_Init+0x1e8>)
 800679a:	781b      	ldrb	r3, [r3, #0]
 800679c:	f003 020f 	and.w	r2, r3, #15
 80067a0:	6879      	ldr	r1, [r7, #4]
 80067a2:	4613      	mov	r3, r2
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	4413      	add	r3, r2
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	440b      	add	r3, r1
 80067ac:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80067b0:	2201      	movs	r2, #1
 80067b2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80067b4:	4b2f      	ldr	r3, [pc, #188]	; (8006874 <USBD_CDC_Init+0x1ec>)
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	f003 020f 	and.w	r2, r3, #15
 80067bc:	6879      	ldr	r1, [r7, #4]
 80067be:	4613      	mov	r3, r2
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	4413      	add	r3, r2
 80067c4:	009b      	lsls	r3, r3, #2
 80067c6:	440b      	add	r3, r1
 80067c8:	3326      	adds	r3, #38	; 0x26
 80067ca:	2210      	movs	r2, #16
 80067cc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80067ce:	4b29      	ldr	r3, [pc, #164]	; (8006874 <USBD_CDC_Init+0x1ec>)
 80067d0:	7819      	ldrb	r1, [r3, #0]
 80067d2:	2308      	movs	r3, #8
 80067d4:	2203      	movs	r2, #3
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f005 f893 	bl	800b902 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80067dc:	4b25      	ldr	r3, [pc, #148]	; (8006874 <USBD_CDC_Init+0x1ec>)
 80067de:	781b      	ldrb	r3, [r3, #0]
 80067e0:	f003 020f 	and.w	r2, r3, #15
 80067e4:	6879      	ldr	r1, [r7, #4]
 80067e6:	4613      	mov	r3, r2
 80067e8:	009b      	lsls	r3, r3, #2
 80067ea:	4413      	add	r3, r2
 80067ec:	009b      	lsls	r3, r3, #2
 80067ee:	440b      	add	r3, r1
 80067f0:	3324      	adds	r3, #36	; 0x24
 80067f2:	2201      	movs	r2, #1
 80067f4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2200      	movs	r2, #0
 80067fa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006804:	687a      	ldr	r2, [r7, #4]
 8006806:	33b0      	adds	r3, #176	; 0xb0
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	4413      	add	r3, r2
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2200      	movs	r2, #0
 8006816:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2200      	movs	r2, #0
 800681e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006828:	2b00      	cmp	r3, #0
 800682a:	d101      	bne.n	8006830 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800682c:	2302      	movs	r3, #2
 800682e:	e018      	b.n	8006862 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	7c1b      	ldrb	r3, [r3, #16]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d10a      	bne.n	800684e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006838:	4b0d      	ldr	r3, [pc, #52]	; (8006870 <USBD_CDC_Init+0x1e8>)
 800683a:	7819      	ldrb	r1, [r3, #0]
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006842:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f005 f94a 	bl	800bae0 <USBD_LL_PrepareReceive>
 800684c:	e008      	b.n	8006860 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800684e:	4b08      	ldr	r3, [pc, #32]	; (8006870 <USBD_CDC_Init+0x1e8>)
 8006850:	7819      	ldrb	r1, [r3, #0]
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006858:	2340      	movs	r3, #64	; 0x40
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f005 f940 	bl	800bae0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006860:	2300      	movs	r3, #0
}
 8006862:	4618      	mov	r0, r3
 8006864:	3710      	adds	r7, #16
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
 800686a:	bf00      	nop
 800686c:	20000093 	.word	0x20000093
 8006870:	20000094 	.word	0x20000094
 8006874:	20000095 	.word	0x20000095

08006878 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b082      	sub	sp, #8
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	460b      	mov	r3, r1
 8006882:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006884:	4b3a      	ldr	r3, [pc, #232]	; (8006970 <USBD_CDC_DeInit+0xf8>)
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	4619      	mov	r1, r3
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f005 f85f 	bl	800b94e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006890:	4b37      	ldr	r3, [pc, #220]	; (8006970 <USBD_CDC_DeInit+0xf8>)
 8006892:	781b      	ldrb	r3, [r3, #0]
 8006894:	f003 020f 	and.w	r2, r3, #15
 8006898:	6879      	ldr	r1, [r7, #4]
 800689a:	4613      	mov	r3, r2
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	4413      	add	r3, r2
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	440b      	add	r3, r1
 80068a4:	3324      	adds	r3, #36	; 0x24
 80068a6:	2200      	movs	r2, #0
 80068a8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80068aa:	4b32      	ldr	r3, [pc, #200]	; (8006974 <USBD_CDC_DeInit+0xfc>)
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	4619      	mov	r1, r3
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f005 f84c 	bl	800b94e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80068b6:	4b2f      	ldr	r3, [pc, #188]	; (8006974 <USBD_CDC_DeInit+0xfc>)
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	f003 020f 	and.w	r2, r3, #15
 80068be:	6879      	ldr	r1, [r7, #4]
 80068c0:	4613      	mov	r3, r2
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	4413      	add	r3, r2
 80068c6:	009b      	lsls	r3, r3, #2
 80068c8:	440b      	add	r3, r1
 80068ca:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80068ce:	2200      	movs	r2, #0
 80068d0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80068d2:	4b29      	ldr	r3, [pc, #164]	; (8006978 <USBD_CDC_DeInit+0x100>)
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	4619      	mov	r1, r3
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f005 f838 	bl	800b94e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80068de:	4b26      	ldr	r3, [pc, #152]	; (8006978 <USBD_CDC_DeInit+0x100>)
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	f003 020f 	and.w	r2, r3, #15
 80068e6:	6879      	ldr	r1, [r7, #4]
 80068e8:	4613      	mov	r3, r2
 80068ea:	009b      	lsls	r3, r3, #2
 80068ec:	4413      	add	r3, r2
 80068ee:	009b      	lsls	r3, r3, #2
 80068f0:	440b      	add	r3, r1
 80068f2:	3324      	adds	r3, #36	; 0x24
 80068f4:	2200      	movs	r2, #0
 80068f6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80068f8:	4b1f      	ldr	r3, [pc, #124]	; (8006978 <USBD_CDC_DeInit+0x100>)
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	f003 020f 	and.w	r2, r3, #15
 8006900:	6879      	ldr	r1, [r7, #4]
 8006902:	4613      	mov	r3, r2
 8006904:	009b      	lsls	r3, r3, #2
 8006906:	4413      	add	r3, r2
 8006908:	009b      	lsls	r3, r3, #2
 800690a:	440b      	add	r3, r1
 800690c:	3326      	adds	r3, #38	; 0x26
 800690e:	2200      	movs	r2, #0
 8006910:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	32b0      	adds	r2, #176	; 0xb0
 800691c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d01f      	beq.n	8006964 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	33b0      	adds	r3, #176	; 0xb0
 800692e:	009b      	lsls	r3, r3, #2
 8006930:	4413      	add	r3, r2
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	32b0      	adds	r2, #176	; 0xb0
 8006942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006946:	4618      	mov	r0, r3
 8006948:	f005 f90c 	bl	800bb64 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	32b0      	adds	r2, #176	; 0xb0
 8006956:	2100      	movs	r1, #0
 8006958:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2200      	movs	r2, #0
 8006960:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006964:	2300      	movs	r3, #0
}
 8006966:	4618      	mov	r0, r3
 8006968:	3708      	adds	r7, #8
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
 800696e:	bf00      	nop
 8006970:	20000093 	.word	0x20000093
 8006974:	20000094 	.word	0x20000094
 8006978:	20000095 	.word	0x20000095

0800697c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b086      	sub	sp, #24
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	32b0      	adds	r2, #176	; 0xb0
 8006990:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006994:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006996:	2300      	movs	r3, #0
 8006998:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800699a:	2300      	movs	r3, #0
 800699c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800699e:	2300      	movs	r3, #0
 80069a0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d101      	bne.n	80069ac <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80069a8:	2303      	movs	r3, #3
 80069aa:	e0bf      	b.n	8006b2c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d050      	beq.n	8006a5a <USBD_CDC_Setup+0xde>
 80069b8:	2b20      	cmp	r3, #32
 80069ba:	f040 80af 	bne.w	8006b1c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	88db      	ldrh	r3, [r3, #6]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d03a      	beq.n	8006a3c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	b25b      	sxtb	r3, r3
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	da1b      	bge.n	8006a08 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	33b0      	adds	r3, #176	; 0xb0
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	4413      	add	r3, r2
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	683a      	ldr	r2, [r7, #0]
 80069e4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80069e6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80069e8:	683a      	ldr	r2, [r7, #0]
 80069ea:	88d2      	ldrh	r2, [r2, #6]
 80069ec:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	88db      	ldrh	r3, [r3, #6]
 80069f2:	2b07      	cmp	r3, #7
 80069f4:	bf28      	it	cs
 80069f6:	2307      	movcs	r3, #7
 80069f8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	89fa      	ldrh	r2, [r7, #14]
 80069fe:	4619      	mov	r1, r3
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f001 fd89 	bl	8008518 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006a06:	e090      	b.n	8006b2a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	785a      	ldrb	r2, [r3, #1]
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	88db      	ldrh	r3, [r3, #6]
 8006a16:	2b3f      	cmp	r3, #63	; 0x3f
 8006a18:	d803      	bhi.n	8006a22 <USBD_CDC_Setup+0xa6>
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	88db      	ldrh	r3, [r3, #6]
 8006a1e:	b2da      	uxtb	r2, r3
 8006a20:	e000      	b.n	8006a24 <USBD_CDC_Setup+0xa8>
 8006a22:	2240      	movs	r2, #64	; 0x40
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006a2a:	6939      	ldr	r1, [r7, #16]
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006a32:	461a      	mov	r2, r3
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f001 fd9b 	bl	8008570 <USBD_CtlPrepareRx>
      break;
 8006a3a:	e076      	b.n	8006b2a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	33b0      	adds	r3, #176	; 0xb0
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	4413      	add	r3, r2
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	689b      	ldr	r3, [r3, #8]
 8006a4e:	683a      	ldr	r2, [r7, #0]
 8006a50:	7850      	ldrb	r0, [r2, #1]
 8006a52:	2200      	movs	r2, #0
 8006a54:	6839      	ldr	r1, [r7, #0]
 8006a56:	4798      	blx	r3
      break;
 8006a58:	e067      	b.n	8006b2a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	785b      	ldrb	r3, [r3, #1]
 8006a5e:	2b0b      	cmp	r3, #11
 8006a60:	d851      	bhi.n	8006b06 <USBD_CDC_Setup+0x18a>
 8006a62:	a201      	add	r2, pc, #4	; (adr r2, 8006a68 <USBD_CDC_Setup+0xec>)
 8006a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a68:	08006a99 	.word	0x08006a99
 8006a6c:	08006b15 	.word	0x08006b15
 8006a70:	08006b07 	.word	0x08006b07
 8006a74:	08006b07 	.word	0x08006b07
 8006a78:	08006b07 	.word	0x08006b07
 8006a7c:	08006b07 	.word	0x08006b07
 8006a80:	08006b07 	.word	0x08006b07
 8006a84:	08006b07 	.word	0x08006b07
 8006a88:	08006b07 	.word	0x08006b07
 8006a8c:	08006b07 	.word	0x08006b07
 8006a90:	08006ac3 	.word	0x08006ac3
 8006a94:	08006aed 	.word	0x08006aed
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a9e:	b2db      	uxtb	r3, r3
 8006aa0:	2b03      	cmp	r3, #3
 8006aa2:	d107      	bne.n	8006ab4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006aa4:	f107 030a 	add.w	r3, r7, #10
 8006aa8:	2202      	movs	r2, #2
 8006aaa:	4619      	mov	r1, r3
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f001 fd33 	bl	8008518 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006ab2:	e032      	b.n	8006b1a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006ab4:	6839      	ldr	r1, [r7, #0]
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f001 fcbd 	bl	8008436 <USBD_CtlError>
            ret = USBD_FAIL;
 8006abc:	2303      	movs	r3, #3
 8006abe:	75fb      	strb	r3, [r7, #23]
          break;
 8006ac0:	e02b      	b.n	8006b1a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ac8:	b2db      	uxtb	r3, r3
 8006aca:	2b03      	cmp	r3, #3
 8006acc:	d107      	bne.n	8006ade <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006ace:	f107 030d 	add.w	r3, r7, #13
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f001 fd1e 	bl	8008518 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006adc:	e01d      	b.n	8006b1a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006ade:	6839      	ldr	r1, [r7, #0]
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f001 fca8 	bl	8008436 <USBD_CtlError>
            ret = USBD_FAIL;
 8006ae6:	2303      	movs	r3, #3
 8006ae8:	75fb      	strb	r3, [r7, #23]
          break;
 8006aea:	e016      	b.n	8006b1a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	2b03      	cmp	r3, #3
 8006af6:	d00f      	beq.n	8006b18 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006af8:	6839      	ldr	r1, [r7, #0]
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f001 fc9b 	bl	8008436 <USBD_CtlError>
            ret = USBD_FAIL;
 8006b00:	2303      	movs	r3, #3
 8006b02:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006b04:	e008      	b.n	8006b18 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006b06:	6839      	ldr	r1, [r7, #0]
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f001 fc94 	bl	8008436 <USBD_CtlError>
          ret = USBD_FAIL;
 8006b0e:	2303      	movs	r3, #3
 8006b10:	75fb      	strb	r3, [r7, #23]
          break;
 8006b12:	e002      	b.n	8006b1a <USBD_CDC_Setup+0x19e>
          break;
 8006b14:	bf00      	nop
 8006b16:	e008      	b.n	8006b2a <USBD_CDC_Setup+0x1ae>
          break;
 8006b18:	bf00      	nop
      }
      break;
 8006b1a:	e006      	b.n	8006b2a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006b1c:	6839      	ldr	r1, [r7, #0]
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f001 fc89 	bl	8008436 <USBD_CtlError>
      ret = USBD_FAIL;
 8006b24:	2303      	movs	r3, #3
 8006b26:	75fb      	strb	r3, [r7, #23]
      break;
 8006b28:	bf00      	nop
  }

  return (uint8_t)ret;
 8006b2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3718      	adds	r7, #24
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b084      	sub	sp, #16
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	460b      	mov	r3, r1
 8006b3e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006b46:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	32b0      	adds	r2, #176	; 0xb0
 8006b52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d101      	bne.n	8006b5e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006b5a:	2303      	movs	r3, #3
 8006b5c:	e065      	b.n	8006c2a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	32b0      	adds	r2, #176	; 0xb0
 8006b68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b6c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006b6e:	78fb      	ldrb	r3, [r7, #3]
 8006b70:	f003 020f 	and.w	r2, r3, #15
 8006b74:	6879      	ldr	r1, [r7, #4]
 8006b76:	4613      	mov	r3, r2
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	4413      	add	r3, r2
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	440b      	add	r3, r1
 8006b80:	3318      	adds	r3, #24
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d02f      	beq.n	8006be8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006b88:	78fb      	ldrb	r3, [r7, #3]
 8006b8a:	f003 020f 	and.w	r2, r3, #15
 8006b8e:	6879      	ldr	r1, [r7, #4]
 8006b90:	4613      	mov	r3, r2
 8006b92:	009b      	lsls	r3, r3, #2
 8006b94:	4413      	add	r3, r2
 8006b96:	009b      	lsls	r3, r3, #2
 8006b98:	440b      	add	r3, r1
 8006b9a:	3318      	adds	r3, #24
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	78fb      	ldrb	r3, [r7, #3]
 8006ba0:	f003 010f 	and.w	r1, r3, #15
 8006ba4:	68f8      	ldr	r0, [r7, #12]
 8006ba6:	460b      	mov	r3, r1
 8006ba8:	00db      	lsls	r3, r3, #3
 8006baa:	440b      	add	r3, r1
 8006bac:	009b      	lsls	r3, r3, #2
 8006bae:	4403      	add	r3, r0
 8006bb0:	3348      	adds	r3, #72	; 0x48
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	fbb2 f1f3 	udiv	r1, r2, r3
 8006bb8:	fb01 f303 	mul.w	r3, r1, r3
 8006bbc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d112      	bne.n	8006be8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006bc2:	78fb      	ldrb	r3, [r7, #3]
 8006bc4:	f003 020f 	and.w	r2, r3, #15
 8006bc8:	6879      	ldr	r1, [r7, #4]
 8006bca:	4613      	mov	r3, r2
 8006bcc:	009b      	lsls	r3, r3, #2
 8006bce:	4413      	add	r3, r2
 8006bd0:	009b      	lsls	r3, r3, #2
 8006bd2:	440b      	add	r3, r1
 8006bd4:	3318      	adds	r3, #24
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006bda:	78f9      	ldrb	r1, [r7, #3]
 8006bdc:	2300      	movs	r3, #0
 8006bde:	2200      	movs	r2, #0
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f004 ff5c 	bl	800ba9e <USBD_LL_Transmit>
 8006be6:	e01f      	b.n	8006c28 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	2200      	movs	r2, #0
 8006bec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006bf6:	687a      	ldr	r2, [r7, #4]
 8006bf8:	33b0      	adds	r3, #176	; 0xb0
 8006bfa:	009b      	lsls	r3, r3, #2
 8006bfc:	4413      	add	r3, r2
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	691b      	ldr	r3, [r3, #16]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d010      	beq.n	8006c28 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c0c:	687a      	ldr	r2, [r7, #4]
 8006c0e:	33b0      	adds	r3, #176	; 0xb0
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	4413      	add	r3, r2
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	691b      	ldr	r3, [r3, #16]
 8006c18:	68ba      	ldr	r2, [r7, #8]
 8006c1a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006c1e:	68ba      	ldr	r2, [r7, #8]
 8006c20:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006c24:	78fa      	ldrb	r2, [r7, #3]
 8006c26:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006c28:	2300      	movs	r3, #0
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3710      	adds	r7, #16
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}

08006c32 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006c32:	b580      	push	{r7, lr}
 8006c34:	b084      	sub	sp, #16
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	6078      	str	r0, [r7, #4]
 8006c3a:	460b      	mov	r3, r1
 8006c3c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	32b0      	adds	r2, #176	; 0xb0
 8006c48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c4c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	32b0      	adds	r2, #176	; 0xb0
 8006c58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d101      	bne.n	8006c64 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006c60:	2303      	movs	r3, #3
 8006c62:	e01a      	b.n	8006c9a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006c64:	78fb      	ldrb	r3, [r7, #3]
 8006c66:	4619      	mov	r1, r3
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f004 ff5a 	bl	800bb22 <USBD_LL_GetRxDataSize>
 8006c6e:	4602      	mov	r2, r0
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c7c:	687a      	ldr	r2, [r7, #4]
 8006c7e:	33b0      	adds	r3, #176	; 0xb0
 8006c80:	009b      	lsls	r3, r3, #2
 8006c82:	4413      	add	r3, r2
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	68db      	ldr	r3, [r3, #12]
 8006c88:	68fa      	ldr	r2, [r7, #12]
 8006c8a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006c8e:	68fa      	ldr	r2, [r7, #12]
 8006c90:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006c94:	4611      	mov	r1, r2
 8006c96:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006c98:	2300      	movs	r3, #0
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3710      	adds	r7, #16
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}

08006ca2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006ca2:	b580      	push	{r7, lr}
 8006ca4:	b084      	sub	sp, #16
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	32b0      	adds	r2, #176	; 0xb0
 8006cb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cb8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d101      	bne.n	8006cc4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006cc0:	2303      	movs	r3, #3
 8006cc2:	e025      	b.n	8006d10 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006cca:	687a      	ldr	r2, [r7, #4]
 8006ccc:	33b0      	adds	r3, #176	; 0xb0
 8006cce:	009b      	lsls	r3, r3, #2
 8006cd0:	4413      	add	r3, r2
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d01a      	beq.n	8006d0e <USBD_CDC_EP0_RxReady+0x6c>
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006cde:	2bff      	cmp	r3, #255	; 0xff
 8006ce0:	d015      	beq.n	8006d0e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ce8:	687a      	ldr	r2, [r7, #4]
 8006cea:	33b0      	adds	r3, #176	; 0xb0
 8006cec:	009b      	lsls	r3, r3, #2
 8006cee:	4413      	add	r3, r2
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	68fa      	ldr	r2, [r7, #12]
 8006cf6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006cfa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006cfc:	68fa      	ldr	r2, [r7, #12]
 8006cfe:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006d02:	b292      	uxth	r2, r2
 8006d04:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	22ff      	movs	r2, #255	; 0xff
 8006d0a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006d0e:	2300      	movs	r3, #0
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3710      	adds	r7, #16
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}

08006d18 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b086      	sub	sp, #24
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006d20:	2182      	movs	r1, #130	; 0x82
 8006d22:	4818      	ldr	r0, [pc, #96]	; (8006d84 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006d24:	f000 fd4f 	bl	80077c6 <USBD_GetEpDesc>
 8006d28:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006d2a:	2101      	movs	r1, #1
 8006d2c:	4815      	ldr	r0, [pc, #84]	; (8006d84 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006d2e:	f000 fd4a 	bl	80077c6 <USBD_GetEpDesc>
 8006d32:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006d34:	2181      	movs	r1, #129	; 0x81
 8006d36:	4813      	ldr	r0, [pc, #76]	; (8006d84 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006d38:	f000 fd45 	bl	80077c6 <USBD_GetEpDesc>
 8006d3c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d002      	beq.n	8006d4a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	2210      	movs	r2, #16
 8006d48:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d006      	beq.n	8006d5e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	2200      	movs	r2, #0
 8006d54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d58:	711a      	strb	r2, [r3, #4]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d006      	beq.n	8006d72 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2200      	movs	r2, #0
 8006d68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d6c:	711a      	strb	r2, [r3, #4]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2243      	movs	r2, #67	; 0x43
 8006d76:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006d78:	4b02      	ldr	r3, [pc, #8]	; (8006d84 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3718      	adds	r7, #24
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
 8006d82:	bf00      	nop
 8006d84:	20000050 	.word	0x20000050

08006d88 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b086      	sub	sp, #24
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006d90:	2182      	movs	r1, #130	; 0x82
 8006d92:	4818      	ldr	r0, [pc, #96]	; (8006df4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006d94:	f000 fd17 	bl	80077c6 <USBD_GetEpDesc>
 8006d98:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006d9a:	2101      	movs	r1, #1
 8006d9c:	4815      	ldr	r0, [pc, #84]	; (8006df4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006d9e:	f000 fd12 	bl	80077c6 <USBD_GetEpDesc>
 8006da2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006da4:	2181      	movs	r1, #129	; 0x81
 8006da6:	4813      	ldr	r0, [pc, #76]	; (8006df4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006da8:	f000 fd0d 	bl	80077c6 <USBD_GetEpDesc>
 8006dac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d002      	beq.n	8006dba <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	2210      	movs	r2, #16
 8006db8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d006      	beq.n	8006dce <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	711a      	strb	r2, [r3, #4]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f042 0202 	orr.w	r2, r2, #2
 8006dcc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d006      	beq.n	8006de2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	711a      	strb	r2, [r3, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f042 0202 	orr.w	r2, r2, #2
 8006de0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2243      	movs	r2, #67	; 0x43
 8006de6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006de8:	4b02      	ldr	r3, [pc, #8]	; (8006df4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3718      	adds	r7, #24
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}
 8006df2:	bf00      	nop
 8006df4:	20000050 	.word	0x20000050

08006df8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b086      	sub	sp, #24
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006e00:	2182      	movs	r1, #130	; 0x82
 8006e02:	4818      	ldr	r0, [pc, #96]	; (8006e64 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006e04:	f000 fcdf 	bl	80077c6 <USBD_GetEpDesc>
 8006e08:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006e0a:	2101      	movs	r1, #1
 8006e0c:	4815      	ldr	r0, [pc, #84]	; (8006e64 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006e0e:	f000 fcda 	bl	80077c6 <USBD_GetEpDesc>
 8006e12:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006e14:	2181      	movs	r1, #129	; 0x81
 8006e16:	4813      	ldr	r0, [pc, #76]	; (8006e64 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006e18:	f000 fcd5 	bl	80077c6 <USBD_GetEpDesc>
 8006e1c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d002      	beq.n	8006e2a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	2210      	movs	r2, #16
 8006e28:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d006      	beq.n	8006e3e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	2200      	movs	r2, #0
 8006e34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e38:	711a      	strb	r2, [r3, #4]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d006      	beq.n	8006e52 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2200      	movs	r2, #0
 8006e48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e4c:	711a      	strb	r2, [r3, #4]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2243      	movs	r2, #67	; 0x43
 8006e56:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006e58:	4b02      	ldr	r3, [pc, #8]	; (8006e64 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3718      	adds	r7, #24
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	bf00      	nop
 8006e64:	20000050 	.word	0x20000050

08006e68 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b083      	sub	sp, #12
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	220a      	movs	r2, #10
 8006e74:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006e76:	4b03      	ldr	r3, [pc, #12]	; (8006e84 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	370c      	adds	r7, #12
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr
 8006e84:	2000000c 	.word	0x2000000c

08006e88 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b083      	sub	sp, #12
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d101      	bne.n	8006e9c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006e98:	2303      	movs	r3, #3
 8006e9a:	e009      	b.n	8006eb0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	33b0      	adds	r3, #176	; 0xb0
 8006ea6:	009b      	lsls	r3, r3, #2
 8006ea8:	4413      	add	r3, r2
 8006eaa:	683a      	ldr	r2, [r7, #0]
 8006eac:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006eae:	2300      	movs	r3, #0
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	370c      	adds	r7, #12
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr

08006ebc <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b087      	sub	sp, #28
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	60f8      	str	r0, [r7, #12]
 8006ec4:	60b9      	str	r1, [r7, #8]
 8006ec6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	32b0      	adds	r2, #176	; 0xb0
 8006ed2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ed6:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d101      	bne.n	8006ee2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006ede:	2303      	movs	r3, #3
 8006ee0:	e008      	b.n	8006ef4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	68ba      	ldr	r2, [r7, #8]
 8006ee6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006ef2:	2300      	movs	r3, #0
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	371c      	adds	r7, #28
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr

08006f00 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b085      	sub	sp, #20
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	32b0      	adds	r2, #176	; 0xb0
 8006f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f18:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d101      	bne.n	8006f24 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006f20:	2303      	movs	r3, #3
 8006f22:	e004      	b.n	8006f2e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	683a      	ldr	r2, [r7, #0]
 8006f28:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006f2c:	2300      	movs	r3, #0
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	3714      	adds	r7, #20
 8006f32:	46bd      	mov	sp, r7
 8006f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f38:	4770      	bx	lr
	...

08006f3c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b084      	sub	sp, #16
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	32b0      	adds	r2, #176	; 0xb0
 8006f4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f52:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006f54:	2301      	movs	r3, #1
 8006f56:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	32b0      	adds	r2, #176	; 0xb0
 8006f62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d101      	bne.n	8006f6e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006f6a:	2303      	movs	r3, #3
 8006f6c:	e025      	b.n	8006fba <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d11f      	bne.n	8006fb8 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006f80:	4b10      	ldr	r3, [pc, #64]	; (8006fc4 <USBD_CDC_TransmitPacket+0x88>)
 8006f82:	781b      	ldrb	r3, [r3, #0]
 8006f84:	f003 020f 	and.w	r2, r3, #15
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	4613      	mov	r3, r2
 8006f92:	009b      	lsls	r3, r3, #2
 8006f94:	4413      	add	r3, r2
 8006f96:	009b      	lsls	r3, r3, #2
 8006f98:	4403      	add	r3, r0
 8006f9a:	3318      	adds	r3, #24
 8006f9c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006f9e:	4b09      	ldr	r3, [pc, #36]	; (8006fc4 <USBD_CDC_TransmitPacket+0x88>)
 8006fa0:	7819      	ldrb	r1, [r3, #0]
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f004 fd75 	bl	800ba9e <USBD_LL_Transmit>

    ret = USBD_OK;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3710      	adds	r7, #16
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}
 8006fc2:	bf00      	nop
 8006fc4:	20000093 	.word	0x20000093

08006fc8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	32b0      	adds	r2, #176	; 0xb0
 8006fda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fde:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	32b0      	adds	r2, #176	; 0xb0
 8006fea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d101      	bne.n	8006ff6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006ff2:	2303      	movs	r3, #3
 8006ff4:	e018      	b.n	8007028 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	7c1b      	ldrb	r3, [r3, #16]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d10a      	bne.n	8007014 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006ffe:	4b0c      	ldr	r3, [pc, #48]	; (8007030 <USBD_CDC_ReceivePacket+0x68>)
 8007000:	7819      	ldrb	r1, [r3, #0]
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007008:	f44f 7300 	mov.w	r3, #512	; 0x200
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f004 fd67 	bl	800bae0 <USBD_LL_PrepareReceive>
 8007012:	e008      	b.n	8007026 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007014:	4b06      	ldr	r3, [pc, #24]	; (8007030 <USBD_CDC_ReceivePacket+0x68>)
 8007016:	7819      	ldrb	r1, [r3, #0]
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800701e:	2340      	movs	r3, #64	; 0x40
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f004 fd5d 	bl	800bae0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007026:	2300      	movs	r3, #0
}
 8007028:	4618      	mov	r0, r3
 800702a:	3710      	adds	r7, #16
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}
 8007030:	20000094 	.word	0x20000094

08007034 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b086      	sub	sp, #24
 8007038:	af00      	add	r7, sp, #0
 800703a:	60f8      	str	r0, [r7, #12]
 800703c:	60b9      	str	r1, [r7, #8]
 800703e:	4613      	mov	r3, r2
 8007040:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d101      	bne.n	800704c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007048:	2303      	movs	r3, #3
 800704a:	e01f      	b.n	800708c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2200      	movs	r2, #0
 8007050:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2200      	movs	r2, #0
 8007058:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2200      	movs	r2, #0
 8007060:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d003      	beq.n	8007072 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	68ba      	ldr	r2, [r7, #8]
 800706e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2201      	movs	r2, #1
 8007076:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	79fa      	ldrb	r2, [r7, #7]
 800707e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007080:	68f8      	ldr	r0, [r7, #12]
 8007082:	f004 fbd7 	bl	800b834 <USBD_LL_Init>
 8007086:	4603      	mov	r3, r0
 8007088:	75fb      	strb	r3, [r7, #23]

  return ret;
 800708a:	7dfb      	ldrb	r3, [r7, #23]
}
 800708c:	4618      	mov	r0, r3
 800708e:	3718      	adds	r7, #24
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}

08007094 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b084      	sub	sp, #16
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800709e:	2300      	movs	r3, #0
 80070a0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d101      	bne.n	80070ac <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80070a8:	2303      	movs	r3, #3
 80070aa:	e025      	b.n	80070f8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	683a      	ldr	r2, [r7, #0]
 80070b0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	32ae      	adds	r2, #174	; 0xae
 80070be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d00f      	beq.n	80070e8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	32ae      	adds	r2, #174	; 0xae
 80070d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070d8:	f107 020e 	add.w	r2, r7, #14
 80070dc:	4610      	mov	r0, r2
 80070de:	4798      	blx	r3
 80070e0:	4602      	mov	r2, r0
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80070ee:	1c5a      	adds	r2, r3, #1
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80070f6:	2300      	movs	r3, #0
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3710      	adds	r7, #16
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}

08007100 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b082      	sub	sp, #8
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f004 fbdf 	bl	800b8cc <USBD_LL_Start>
 800710e:	4603      	mov	r3, r0
}
 8007110:	4618      	mov	r0, r3
 8007112:	3708      	adds	r7, #8
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}

08007118 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007118:	b480      	push	{r7}
 800711a:	b083      	sub	sp, #12
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007120:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007122:	4618      	mov	r0, r3
 8007124:	370c      	adds	r7, #12
 8007126:	46bd      	mov	sp, r7
 8007128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712c:	4770      	bx	lr

0800712e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800712e:	b580      	push	{r7, lr}
 8007130:	b084      	sub	sp, #16
 8007132:	af00      	add	r7, sp, #0
 8007134:	6078      	str	r0, [r7, #4]
 8007136:	460b      	mov	r3, r1
 8007138:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800713a:	2300      	movs	r3, #0
 800713c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007144:	2b00      	cmp	r3, #0
 8007146:	d009      	beq.n	800715c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	78fa      	ldrb	r2, [r7, #3]
 8007152:	4611      	mov	r1, r2
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	4798      	blx	r3
 8007158:	4603      	mov	r3, r0
 800715a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800715c:	7bfb      	ldrb	r3, [r7, #15]
}
 800715e:	4618      	mov	r0, r3
 8007160:	3710      	adds	r7, #16
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}

08007166 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007166:	b580      	push	{r7, lr}
 8007168:	b084      	sub	sp, #16
 800716a:	af00      	add	r7, sp, #0
 800716c:	6078      	str	r0, [r7, #4]
 800716e:	460b      	mov	r3, r1
 8007170:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007172:	2300      	movs	r3, #0
 8007174:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	78fa      	ldrb	r2, [r7, #3]
 8007180:	4611      	mov	r1, r2
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	4798      	blx	r3
 8007186:	4603      	mov	r3, r0
 8007188:	2b00      	cmp	r3, #0
 800718a:	d001      	beq.n	8007190 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800718c:	2303      	movs	r3, #3
 800718e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007190:	7bfb      	ldrb	r3, [r7, #15]
}
 8007192:	4618      	mov	r0, r3
 8007194:	3710      	adds	r7, #16
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}

0800719a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800719a:	b580      	push	{r7, lr}
 800719c:	b084      	sub	sp, #16
 800719e:	af00      	add	r7, sp, #0
 80071a0:	6078      	str	r0, [r7, #4]
 80071a2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80071aa:	6839      	ldr	r1, [r7, #0]
 80071ac:	4618      	mov	r0, r3
 80071ae:	f001 f908 	bl	80083c2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2201      	movs	r2, #1
 80071b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80071c0:	461a      	mov	r2, r3
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80071ce:	f003 031f 	and.w	r3, r3, #31
 80071d2:	2b02      	cmp	r3, #2
 80071d4:	d01a      	beq.n	800720c <USBD_LL_SetupStage+0x72>
 80071d6:	2b02      	cmp	r3, #2
 80071d8:	d822      	bhi.n	8007220 <USBD_LL_SetupStage+0x86>
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d002      	beq.n	80071e4 <USBD_LL_SetupStage+0x4a>
 80071de:	2b01      	cmp	r3, #1
 80071e0:	d00a      	beq.n	80071f8 <USBD_LL_SetupStage+0x5e>
 80071e2:	e01d      	b.n	8007220 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80071ea:	4619      	mov	r1, r3
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f000 fb5f 	bl	80078b0 <USBD_StdDevReq>
 80071f2:	4603      	mov	r3, r0
 80071f4:	73fb      	strb	r3, [r7, #15]
      break;
 80071f6:	e020      	b.n	800723a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80071fe:	4619      	mov	r1, r3
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f000 fbc7 	bl	8007994 <USBD_StdItfReq>
 8007206:	4603      	mov	r3, r0
 8007208:	73fb      	strb	r3, [r7, #15]
      break;
 800720a:	e016      	b.n	800723a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007212:	4619      	mov	r1, r3
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f000 fc29 	bl	8007a6c <USBD_StdEPReq>
 800721a:	4603      	mov	r3, r0
 800721c:	73fb      	strb	r3, [r7, #15]
      break;
 800721e:	e00c      	b.n	800723a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007226:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800722a:	b2db      	uxtb	r3, r3
 800722c:	4619      	mov	r1, r3
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f004 fbac 	bl	800b98c <USBD_LL_StallEP>
 8007234:	4603      	mov	r3, r0
 8007236:	73fb      	strb	r3, [r7, #15]
      break;
 8007238:	bf00      	nop
  }

  return ret;
 800723a:	7bfb      	ldrb	r3, [r7, #15]
}
 800723c:	4618      	mov	r0, r3
 800723e:	3710      	adds	r7, #16
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}

08007244 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b086      	sub	sp, #24
 8007248:	af00      	add	r7, sp, #0
 800724a:	60f8      	str	r0, [r7, #12]
 800724c:	460b      	mov	r3, r1
 800724e:	607a      	str	r2, [r7, #4]
 8007250:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007252:	2300      	movs	r3, #0
 8007254:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007256:	7afb      	ldrb	r3, [r7, #11]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d16e      	bne.n	800733a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007262:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800726a:	2b03      	cmp	r3, #3
 800726c:	f040 8098 	bne.w	80073a0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	689a      	ldr	r2, [r3, #8]
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	68db      	ldr	r3, [r3, #12]
 8007278:	429a      	cmp	r2, r3
 800727a:	d913      	bls.n	80072a4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	689a      	ldr	r2, [r3, #8]
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	68db      	ldr	r3, [r3, #12]
 8007284:	1ad2      	subs	r2, r2, r3
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	68da      	ldr	r2, [r3, #12]
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	689b      	ldr	r3, [r3, #8]
 8007292:	4293      	cmp	r3, r2
 8007294:	bf28      	it	cs
 8007296:	4613      	movcs	r3, r2
 8007298:	461a      	mov	r2, r3
 800729a:	6879      	ldr	r1, [r7, #4]
 800729c:	68f8      	ldr	r0, [r7, #12]
 800729e:	f001 f984 	bl	80085aa <USBD_CtlContinueRx>
 80072a2:	e07d      	b.n	80073a0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80072aa:	f003 031f 	and.w	r3, r3, #31
 80072ae:	2b02      	cmp	r3, #2
 80072b0:	d014      	beq.n	80072dc <USBD_LL_DataOutStage+0x98>
 80072b2:	2b02      	cmp	r3, #2
 80072b4:	d81d      	bhi.n	80072f2 <USBD_LL_DataOutStage+0xae>
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d002      	beq.n	80072c0 <USBD_LL_DataOutStage+0x7c>
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d003      	beq.n	80072c6 <USBD_LL_DataOutStage+0x82>
 80072be:	e018      	b.n	80072f2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80072c0:	2300      	movs	r3, #0
 80072c2:	75bb      	strb	r3, [r7, #22]
            break;
 80072c4:	e018      	b.n	80072f8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	4619      	mov	r1, r3
 80072d0:	68f8      	ldr	r0, [r7, #12]
 80072d2:	f000 fa5e 	bl	8007792 <USBD_CoreFindIF>
 80072d6:	4603      	mov	r3, r0
 80072d8:	75bb      	strb	r3, [r7, #22]
            break;
 80072da:	e00d      	b.n	80072f8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80072e2:	b2db      	uxtb	r3, r3
 80072e4:	4619      	mov	r1, r3
 80072e6:	68f8      	ldr	r0, [r7, #12]
 80072e8:	f000 fa60 	bl	80077ac <USBD_CoreFindEP>
 80072ec:	4603      	mov	r3, r0
 80072ee:	75bb      	strb	r3, [r7, #22]
            break;
 80072f0:	e002      	b.n	80072f8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80072f2:	2300      	movs	r3, #0
 80072f4:	75bb      	strb	r3, [r7, #22]
            break;
 80072f6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80072f8:	7dbb      	ldrb	r3, [r7, #22]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d119      	bne.n	8007332 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007304:	b2db      	uxtb	r3, r3
 8007306:	2b03      	cmp	r3, #3
 8007308:	d113      	bne.n	8007332 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800730a:	7dba      	ldrb	r2, [r7, #22]
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	32ae      	adds	r2, #174	; 0xae
 8007310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007314:	691b      	ldr	r3, [r3, #16]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d00b      	beq.n	8007332 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800731a:	7dba      	ldrb	r2, [r7, #22]
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007322:	7dba      	ldrb	r2, [r7, #22]
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	32ae      	adds	r2, #174	; 0xae
 8007328:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800732c:	691b      	ldr	r3, [r3, #16]
 800732e:	68f8      	ldr	r0, [r7, #12]
 8007330:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007332:	68f8      	ldr	r0, [r7, #12]
 8007334:	f001 f94a 	bl	80085cc <USBD_CtlSendStatus>
 8007338:	e032      	b.n	80073a0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800733a:	7afb      	ldrb	r3, [r7, #11]
 800733c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007340:	b2db      	uxtb	r3, r3
 8007342:	4619      	mov	r1, r3
 8007344:	68f8      	ldr	r0, [r7, #12]
 8007346:	f000 fa31 	bl	80077ac <USBD_CoreFindEP>
 800734a:	4603      	mov	r3, r0
 800734c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800734e:	7dbb      	ldrb	r3, [r7, #22]
 8007350:	2bff      	cmp	r3, #255	; 0xff
 8007352:	d025      	beq.n	80073a0 <USBD_LL_DataOutStage+0x15c>
 8007354:	7dbb      	ldrb	r3, [r7, #22]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d122      	bne.n	80073a0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007360:	b2db      	uxtb	r3, r3
 8007362:	2b03      	cmp	r3, #3
 8007364:	d117      	bne.n	8007396 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007366:	7dba      	ldrb	r2, [r7, #22]
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	32ae      	adds	r2, #174	; 0xae
 800736c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007370:	699b      	ldr	r3, [r3, #24]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d00f      	beq.n	8007396 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007376:	7dba      	ldrb	r2, [r7, #22]
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800737e:	7dba      	ldrb	r2, [r7, #22]
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	32ae      	adds	r2, #174	; 0xae
 8007384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007388:	699b      	ldr	r3, [r3, #24]
 800738a:	7afa      	ldrb	r2, [r7, #11]
 800738c:	4611      	mov	r1, r2
 800738e:	68f8      	ldr	r0, [r7, #12]
 8007390:	4798      	blx	r3
 8007392:	4603      	mov	r3, r0
 8007394:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007396:	7dfb      	ldrb	r3, [r7, #23]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d001      	beq.n	80073a0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800739c:	7dfb      	ldrb	r3, [r7, #23]
 800739e:	e000      	b.n	80073a2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80073a0:	2300      	movs	r3, #0
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3718      	adds	r7, #24
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}

080073aa <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80073aa:	b580      	push	{r7, lr}
 80073ac:	b086      	sub	sp, #24
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	60f8      	str	r0, [r7, #12]
 80073b2:	460b      	mov	r3, r1
 80073b4:	607a      	str	r2, [r7, #4]
 80073b6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80073b8:	7afb      	ldrb	r3, [r7, #11]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d16f      	bne.n	800749e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	3314      	adds	r3, #20
 80073c2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80073ca:	2b02      	cmp	r3, #2
 80073cc:	d15a      	bne.n	8007484 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	689a      	ldr	r2, [r3, #8]
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	68db      	ldr	r3, [r3, #12]
 80073d6:	429a      	cmp	r2, r3
 80073d8:	d914      	bls.n	8007404 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	689a      	ldr	r2, [r3, #8]
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	68db      	ldr	r3, [r3, #12]
 80073e2:	1ad2      	subs	r2, r2, r3
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	461a      	mov	r2, r3
 80073ee:	6879      	ldr	r1, [r7, #4]
 80073f0:	68f8      	ldr	r0, [r7, #12]
 80073f2:	f001 f8ac 	bl	800854e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80073f6:	2300      	movs	r3, #0
 80073f8:	2200      	movs	r2, #0
 80073fa:	2100      	movs	r1, #0
 80073fc:	68f8      	ldr	r0, [r7, #12]
 80073fe:	f004 fb6f 	bl	800bae0 <USBD_LL_PrepareReceive>
 8007402:	e03f      	b.n	8007484 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	68da      	ldr	r2, [r3, #12]
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	689b      	ldr	r3, [r3, #8]
 800740c:	429a      	cmp	r2, r3
 800740e:	d11c      	bne.n	800744a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	685a      	ldr	r2, [r3, #4]
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007418:	429a      	cmp	r2, r3
 800741a:	d316      	bcc.n	800744a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	685a      	ldr	r2, [r3, #4]
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007426:	429a      	cmp	r2, r3
 8007428:	d20f      	bcs.n	800744a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800742a:	2200      	movs	r2, #0
 800742c:	2100      	movs	r1, #0
 800742e:	68f8      	ldr	r0, [r7, #12]
 8007430:	f001 f88d 	bl	800854e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2200      	movs	r2, #0
 8007438:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800743c:	2300      	movs	r3, #0
 800743e:	2200      	movs	r2, #0
 8007440:	2100      	movs	r1, #0
 8007442:	68f8      	ldr	r0, [r7, #12]
 8007444:	f004 fb4c 	bl	800bae0 <USBD_LL_PrepareReceive>
 8007448:	e01c      	b.n	8007484 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007450:	b2db      	uxtb	r3, r3
 8007452:	2b03      	cmp	r3, #3
 8007454:	d10f      	bne.n	8007476 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800745c:	68db      	ldr	r3, [r3, #12]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d009      	beq.n	8007476 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2200      	movs	r2, #0
 8007466:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007470:	68db      	ldr	r3, [r3, #12]
 8007472:	68f8      	ldr	r0, [r7, #12]
 8007474:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007476:	2180      	movs	r1, #128	; 0x80
 8007478:	68f8      	ldr	r0, [r7, #12]
 800747a:	f004 fa87 	bl	800b98c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800747e:	68f8      	ldr	r0, [r7, #12]
 8007480:	f001 f8b7 	bl	80085f2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800748a:	2b00      	cmp	r3, #0
 800748c:	d03a      	beq.n	8007504 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800748e:	68f8      	ldr	r0, [r7, #12]
 8007490:	f7ff fe42 	bl	8007118 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2200      	movs	r2, #0
 8007498:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800749c:	e032      	b.n	8007504 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800749e:	7afb      	ldrb	r3, [r7, #11]
 80074a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80074a4:	b2db      	uxtb	r3, r3
 80074a6:	4619      	mov	r1, r3
 80074a8:	68f8      	ldr	r0, [r7, #12]
 80074aa:	f000 f97f 	bl	80077ac <USBD_CoreFindEP>
 80074ae:	4603      	mov	r3, r0
 80074b0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80074b2:	7dfb      	ldrb	r3, [r7, #23]
 80074b4:	2bff      	cmp	r3, #255	; 0xff
 80074b6:	d025      	beq.n	8007504 <USBD_LL_DataInStage+0x15a>
 80074b8:	7dfb      	ldrb	r3, [r7, #23]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d122      	bne.n	8007504 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074c4:	b2db      	uxtb	r3, r3
 80074c6:	2b03      	cmp	r3, #3
 80074c8:	d11c      	bne.n	8007504 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80074ca:	7dfa      	ldrb	r2, [r7, #23]
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	32ae      	adds	r2, #174	; 0xae
 80074d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074d4:	695b      	ldr	r3, [r3, #20]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d014      	beq.n	8007504 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80074da:	7dfa      	ldrb	r2, [r7, #23]
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80074e2:	7dfa      	ldrb	r2, [r7, #23]
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	32ae      	adds	r2, #174	; 0xae
 80074e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074ec:	695b      	ldr	r3, [r3, #20]
 80074ee:	7afa      	ldrb	r2, [r7, #11]
 80074f0:	4611      	mov	r1, r2
 80074f2:	68f8      	ldr	r0, [r7, #12]
 80074f4:	4798      	blx	r3
 80074f6:	4603      	mov	r3, r0
 80074f8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80074fa:	7dbb      	ldrb	r3, [r7, #22]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d001      	beq.n	8007504 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007500:	7dbb      	ldrb	r3, [r7, #22]
 8007502:	e000      	b.n	8007506 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007504:	2300      	movs	r3, #0
}
 8007506:	4618      	mov	r0, r3
 8007508:	3718      	adds	r7, #24
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}

0800750e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800750e:	b580      	push	{r7, lr}
 8007510:	b084      	sub	sp, #16
 8007512:	af00      	add	r7, sp, #0
 8007514:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007516:	2300      	movs	r3, #0
 8007518:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2201      	movs	r2, #1
 800751e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2200      	movs	r2, #0
 8007526:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2200      	movs	r2, #0
 800752e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2200      	movs	r2, #0
 800753c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007546:	2b00      	cmp	r3, #0
 8007548:	d014      	beq.n	8007574 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d00e      	beq.n	8007574 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	687a      	ldr	r2, [r7, #4]
 8007560:	6852      	ldr	r2, [r2, #4]
 8007562:	b2d2      	uxtb	r2, r2
 8007564:	4611      	mov	r1, r2
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	4798      	blx	r3
 800756a:	4603      	mov	r3, r0
 800756c:	2b00      	cmp	r3, #0
 800756e:	d001      	beq.n	8007574 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007570:	2303      	movs	r3, #3
 8007572:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007574:	2340      	movs	r3, #64	; 0x40
 8007576:	2200      	movs	r2, #0
 8007578:	2100      	movs	r1, #0
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f004 f9c1 	bl	800b902 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2201      	movs	r2, #1
 8007584:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2240      	movs	r2, #64	; 0x40
 800758c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007590:	2340      	movs	r3, #64	; 0x40
 8007592:	2200      	movs	r2, #0
 8007594:	2180      	movs	r1, #128	; 0x80
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f004 f9b3 	bl	800b902 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2201      	movs	r2, #1
 80075a0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2240      	movs	r2, #64	; 0x40
 80075a6:	621a      	str	r2, [r3, #32]

  return ret;
 80075a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3710      	adds	r7, #16
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}

080075b2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80075b2:	b480      	push	{r7}
 80075b4:	b083      	sub	sp, #12
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	6078      	str	r0, [r7, #4]
 80075ba:	460b      	mov	r3, r1
 80075bc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	78fa      	ldrb	r2, [r7, #3]
 80075c2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80075c4:	2300      	movs	r3, #0
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	370c      	adds	r7, #12
 80075ca:	46bd      	mov	sp, r7
 80075cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d0:	4770      	bx	lr

080075d2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80075d2:	b480      	push	{r7}
 80075d4:	b083      	sub	sp, #12
 80075d6:	af00      	add	r7, sp, #0
 80075d8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075e0:	b2da      	uxtb	r2, r3
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2204      	movs	r2, #4
 80075ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80075f0:	2300      	movs	r3, #0
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	370c      	adds	r7, #12
 80075f6:	46bd      	mov	sp, r7
 80075f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fc:	4770      	bx	lr

080075fe <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80075fe:	b480      	push	{r7}
 8007600:	b083      	sub	sp, #12
 8007602:	af00      	add	r7, sp, #0
 8007604:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800760c:	b2db      	uxtb	r3, r3
 800760e:	2b04      	cmp	r3, #4
 8007610:	d106      	bne.n	8007620 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007618:	b2da      	uxtb	r2, r3
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007620:	2300      	movs	r3, #0
}
 8007622:	4618      	mov	r0, r3
 8007624:	370c      	adds	r7, #12
 8007626:	46bd      	mov	sp, r7
 8007628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762c:	4770      	bx	lr

0800762e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800762e:	b580      	push	{r7, lr}
 8007630:	b082      	sub	sp, #8
 8007632:	af00      	add	r7, sp, #0
 8007634:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800763c:	b2db      	uxtb	r3, r3
 800763e:	2b03      	cmp	r3, #3
 8007640:	d110      	bne.n	8007664 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007648:	2b00      	cmp	r3, #0
 800764a:	d00b      	beq.n	8007664 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007652:	69db      	ldr	r3, [r3, #28]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d005      	beq.n	8007664 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800765e:	69db      	ldr	r3, [r3, #28]
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007664:	2300      	movs	r3, #0
}
 8007666:	4618      	mov	r0, r3
 8007668:	3708      	adds	r7, #8
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}

0800766e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800766e:	b580      	push	{r7, lr}
 8007670:	b082      	sub	sp, #8
 8007672:	af00      	add	r7, sp, #0
 8007674:	6078      	str	r0, [r7, #4]
 8007676:	460b      	mov	r3, r1
 8007678:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	32ae      	adds	r2, #174	; 0xae
 8007684:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d101      	bne.n	8007690 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800768c:	2303      	movs	r3, #3
 800768e:	e01c      	b.n	80076ca <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007696:	b2db      	uxtb	r3, r3
 8007698:	2b03      	cmp	r3, #3
 800769a:	d115      	bne.n	80076c8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	32ae      	adds	r2, #174	; 0xae
 80076a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076aa:	6a1b      	ldr	r3, [r3, #32]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d00b      	beq.n	80076c8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	32ae      	adds	r2, #174	; 0xae
 80076ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076be:	6a1b      	ldr	r3, [r3, #32]
 80076c0:	78fa      	ldrb	r2, [r7, #3]
 80076c2:	4611      	mov	r1, r2
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80076c8:	2300      	movs	r3, #0
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3708      	adds	r7, #8
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}

080076d2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80076d2:	b580      	push	{r7, lr}
 80076d4:	b082      	sub	sp, #8
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	6078      	str	r0, [r7, #4]
 80076da:	460b      	mov	r3, r1
 80076dc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	32ae      	adds	r2, #174	; 0xae
 80076e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d101      	bne.n	80076f4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80076f0:	2303      	movs	r3, #3
 80076f2:	e01c      	b.n	800772e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076fa:	b2db      	uxtb	r3, r3
 80076fc:	2b03      	cmp	r3, #3
 80076fe:	d115      	bne.n	800772c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	32ae      	adds	r2, #174	; 0xae
 800770a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800770e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007710:	2b00      	cmp	r3, #0
 8007712:	d00b      	beq.n	800772c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	32ae      	adds	r2, #174	; 0xae
 800771e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007724:	78fa      	ldrb	r2, [r7, #3]
 8007726:	4611      	mov	r1, r2
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800772c:	2300      	movs	r3, #0
}
 800772e:	4618      	mov	r0, r3
 8007730:	3708      	adds	r7, #8
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}

08007736 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007736:	b480      	push	{r7}
 8007738:	b083      	sub	sp, #12
 800773a:	af00      	add	r7, sp, #0
 800773c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800773e:	2300      	movs	r3, #0
}
 8007740:	4618      	mov	r0, r3
 8007742:	370c      	adds	r7, #12
 8007744:	46bd      	mov	sp, r7
 8007746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774a:	4770      	bx	lr

0800774c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b084      	sub	sp, #16
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007754:	2300      	movs	r3, #0
 8007756:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2201      	movs	r2, #1
 800775c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007766:	2b00      	cmp	r3, #0
 8007768:	d00e      	beq.n	8007788 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	687a      	ldr	r2, [r7, #4]
 8007774:	6852      	ldr	r2, [r2, #4]
 8007776:	b2d2      	uxtb	r2, r2
 8007778:	4611      	mov	r1, r2
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	4798      	blx	r3
 800777e:	4603      	mov	r3, r0
 8007780:	2b00      	cmp	r3, #0
 8007782:	d001      	beq.n	8007788 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007784:	2303      	movs	r3, #3
 8007786:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007788:	7bfb      	ldrb	r3, [r7, #15]
}
 800778a:	4618      	mov	r0, r3
 800778c:	3710      	adds	r7, #16
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}

08007792 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007792:	b480      	push	{r7}
 8007794:	b083      	sub	sp, #12
 8007796:	af00      	add	r7, sp, #0
 8007798:	6078      	str	r0, [r7, #4]
 800779a:	460b      	mov	r3, r1
 800779c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800779e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	370c      	adds	r7, #12
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr

080077ac <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b083      	sub	sp, #12
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	460b      	mov	r3, r1
 80077b6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80077b8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	370c      	adds	r7, #12
 80077be:	46bd      	mov	sp, r7
 80077c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c4:	4770      	bx	lr

080077c6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80077c6:	b580      	push	{r7, lr}
 80077c8:	b086      	sub	sp, #24
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
 80077ce:	460b      	mov	r3, r1
 80077d0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80077da:	2300      	movs	r3, #0
 80077dc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	885b      	ldrh	r3, [r3, #2]
 80077e2:	b29a      	uxth	r2, r3
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	781b      	ldrb	r3, [r3, #0]
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d920      	bls.n	8007830 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	781b      	ldrb	r3, [r3, #0]
 80077f2:	b29b      	uxth	r3, r3
 80077f4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80077f6:	e013      	b.n	8007820 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80077f8:	f107 030a 	add.w	r3, r7, #10
 80077fc:	4619      	mov	r1, r3
 80077fe:	6978      	ldr	r0, [r7, #20]
 8007800:	f000 f81b 	bl	800783a <USBD_GetNextDesc>
 8007804:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	785b      	ldrb	r3, [r3, #1]
 800780a:	2b05      	cmp	r3, #5
 800780c:	d108      	bne.n	8007820 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	789b      	ldrb	r3, [r3, #2]
 8007816:	78fa      	ldrb	r2, [r7, #3]
 8007818:	429a      	cmp	r2, r3
 800781a:	d008      	beq.n	800782e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800781c:	2300      	movs	r3, #0
 800781e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	885b      	ldrh	r3, [r3, #2]
 8007824:	b29a      	uxth	r2, r3
 8007826:	897b      	ldrh	r3, [r7, #10]
 8007828:	429a      	cmp	r2, r3
 800782a:	d8e5      	bhi.n	80077f8 <USBD_GetEpDesc+0x32>
 800782c:	e000      	b.n	8007830 <USBD_GetEpDesc+0x6a>
          break;
 800782e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007830:	693b      	ldr	r3, [r7, #16]
}
 8007832:	4618      	mov	r0, r3
 8007834:	3718      	adds	r7, #24
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}

0800783a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800783a:	b480      	push	{r7}
 800783c:	b085      	sub	sp, #20
 800783e:	af00      	add	r7, sp, #0
 8007840:	6078      	str	r0, [r7, #4]
 8007842:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	881a      	ldrh	r2, [r3, #0]
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	781b      	ldrb	r3, [r3, #0]
 8007850:	b29b      	uxth	r3, r3
 8007852:	4413      	add	r3, r2
 8007854:	b29a      	uxth	r2, r3
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	781b      	ldrb	r3, [r3, #0]
 800785e:	461a      	mov	r2, r3
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	4413      	add	r3, r2
 8007864:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007866:	68fb      	ldr	r3, [r7, #12]
}
 8007868:	4618      	mov	r0, r3
 800786a:	3714      	adds	r7, #20
 800786c:	46bd      	mov	sp, r7
 800786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007872:	4770      	bx	lr

08007874 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007874:	b480      	push	{r7}
 8007876:	b087      	sub	sp, #28
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	781b      	ldrb	r3, [r3, #0]
 8007884:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	3301      	adds	r3, #1
 800788a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007892:	8a3b      	ldrh	r3, [r7, #16]
 8007894:	021b      	lsls	r3, r3, #8
 8007896:	b21a      	sxth	r2, r3
 8007898:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800789c:	4313      	orrs	r3, r2
 800789e:	b21b      	sxth	r3, r3
 80078a0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80078a2:	89fb      	ldrh	r3, [r7, #14]
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	371c      	adds	r7, #28
 80078a8:	46bd      	mov	sp, r7
 80078aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ae:	4770      	bx	lr

080078b0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b084      	sub	sp, #16
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80078ba:	2300      	movs	r3, #0
 80078bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	781b      	ldrb	r3, [r3, #0]
 80078c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80078c6:	2b40      	cmp	r3, #64	; 0x40
 80078c8:	d005      	beq.n	80078d6 <USBD_StdDevReq+0x26>
 80078ca:	2b40      	cmp	r3, #64	; 0x40
 80078cc:	d857      	bhi.n	800797e <USBD_StdDevReq+0xce>
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d00f      	beq.n	80078f2 <USBD_StdDevReq+0x42>
 80078d2:	2b20      	cmp	r3, #32
 80078d4:	d153      	bne.n	800797e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	32ae      	adds	r2, #174	; 0xae
 80078e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078e4:	689b      	ldr	r3, [r3, #8]
 80078e6:	6839      	ldr	r1, [r7, #0]
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	4798      	blx	r3
 80078ec:	4603      	mov	r3, r0
 80078ee:	73fb      	strb	r3, [r7, #15]
      break;
 80078f0:	e04a      	b.n	8007988 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	785b      	ldrb	r3, [r3, #1]
 80078f6:	2b09      	cmp	r3, #9
 80078f8:	d83b      	bhi.n	8007972 <USBD_StdDevReq+0xc2>
 80078fa:	a201      	add	r2, pc, #4	; (adr r2, 8007900 <USBD_StdDevReq+0x50>)
 80078fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007900:	08007955 	.word	0x08007955
 8007904:	08007969 	.word	0x08007969
 8007908:	08007973 	.word	0x08007973
 800790c:	0800795f 	.word	0x0800795f
 8007910:	08007973 	.word	0x08007973
 8007914:	08007933 	.word	0x08007933
 8007918:	08007929 	.word	0x08007929
 800791c:	08007973 	.word	0x08007973
 8007920:	0800794b 	.word	0x0800794b
 8007924:	0800793d 	.word	0x0800793d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007928:	6839      	ldr	r1, [r7, #0]
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f000 fa3c 	bl	8007da8 <USBD_GetDescriptor>
          break;
 8007930:	e024      	b.n	800797c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007932:	6839      	ldr	r1, [r7, #0]
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f000 fba1 	bl	800807c <USBD_SetAddress>
          break;
 800793a:	e01f      	b.n	800797c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800793c:	6839      	ldr	r1, [r7, #0]
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 fbe0 	bl	8008104 <USBD_SetConfig>
 8007944:	4603      	mov	r3, r0
 8007946:	73fb      	strb	r3, [r7, #15]
          break;
 8007948:	e018      	b.n	800797c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800794a:	6839      	ldr	r1, [r7, #0]
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f000 fc83 	bl	8008258 <USBD_GetConfig>
          break;
 8007952:	e013      	b.n	800797c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007954:	6839      	ldr	r1, [r7, #0]
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f000 fcb4 	bl	80082c4 <USBD_GetStatus>
          break;
 800795c:	e00e      	b.n	800797c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800795e:	6839      	ldr	r1, [r7, #0]
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f000 fce3 	bl	800832c <USBD_SetFeature>
          break;
 8007966:	e009      	b.n	800797c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007968:	6839      	ldr	r1, [r7, #0]
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 fd07 	bl	800837e <USBD_ClrFeature>
          break;
 8007970:	e004      	b.n	800797c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007972:	6839      	ldr	r1, [r7, #0]
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f000 fd5e 	bl	8008436 <USBD_CtlError>
          break;
 800797a:	bf00      	nop
      }
      break;
 800797c:	e004      	b.n	8007988 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800797e:	6839      	ldr	r1, [r7, #0]
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f000 fd58 	bl	8008436 <USBD_CtlError>
      break;
 8007986:	bf00      	nop
  }

  return ret;
 8007988:	7bfb      	ldrb	r3, [r7, #15]
}
 800798a:	4618      	mov	r0, r3
 800798c:	3710      	adds	r7, #16
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}
 8007992:	bf00      	nop

08007994 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b084      	sub	sp, #16
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800799e:	2300      	movs	r3, #0
 80079a0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	781b      	ldrb	r3, [r3, #0]
 80079a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80079aa:	2b40      	cmp	r3, #64	; 0x40
 80079ac:	d005      	beq.n	80079ba <USBD_StdItfReq+0x26>
 80079ae:	2b40      	cmp	r3, #64	; 0x40
 80079b0:	d852      	bhi.n	8007a58 <USBD_StdItfReq+0xc4>
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d001      	beq.n	80079ba <USBD_StdItfReq+0x26>
 80079b6:	2b20      	cmp	r3, #32
 80079b8:	d14e      	bne.n	8007a58 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079c0:	b2db      	uxtb	r3, r3
 80079c2:	3b01      	subs	r3, #1
 80079c4:	2b02      	cmp	r3, #2
 80079c6:	d840      	bhi.n	8007a4a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	889b      	ldrh	r3, [r3, #4]
 80079cc:	b2db      	uxtb	r3, r3
 80079ce:	2b01      	cmp	r3, #1
 80079d0:	d836      	bhi.n	8007a40 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	889b      	ldrh	r3, [r3, #4]
 80079d6:	b2db      	uxtb	r3, r3
 80079d8:	4619      	mov	r1, r3
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f7ff fed9 	bl	8007792 <USBD_CoreFindIF>
 80079e0:	4603      	mov	r3, r0
 80079e2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80079e4:	7bbb      	ldrb	r3, [r7, #14]
 80079e6:	2bff      	cmp	r3, #255	; 0xff
 80079e8:	d01d      	beq.n	8007a26 <USBD_StdItfReq+0x92>
 80079ea:	7bbb      	ldrb	r3, [r7, #14]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d11a      	bne.n	8007a26 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80079f0:	7bba      	ldrb	r2, [r7, #14]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	32ae      	adds	r2, #174	; 0xae
 80079f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079fa:	689b      	ldr	r3, [r3, #8]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d00f      	beq.n	8007a20 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007a00:	7bba      	ldrb	r2, [r7, #14]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007a08:	7bba      	ldrb	r2, [r7, #14]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	32ae      	adds	r2, #174	; 0xae
 8007a0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a12:	689b      	ldr	r3, [r3, #8]
 8007a14:	6839      	ldr	r1, [r7, #0]
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	4798      	blx	r3
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007a1e:	e004      	b.n	8007a2a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007a20:	2303      	movs	r3, #3
 8007a22:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007a24:	e001      	b.n	8007a2a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007a26:	2303      	movs	r3, #3
 8007a28:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	88db      	ldrh	r3, [r3, #6]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d110      	bne.n	8007a54 <USBD_StdItfReq+0xc0>
 8007a32:	7bfb      	ldrb	r3, [r7, #15]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d10d      	bne.n	8007a54 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f000 fdc7 	bl	80085cc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007a3e:	e009      	b.n	8007a54 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007a40:	6839      	ldr	r1, [r7, #0]
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f000 fcf7 	bl	8008436 <USBD_CtlError>
          break;
 8007a48:	e004      	b.n	8007a54 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007a4a:	6839      	ldr	r1, [r7, #0]
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f000 fcf2 	bl	8008436 <USBD_CtlError>
          break;
 8007a52:	e000      	b.n	8007a56 <USBD_StdItfReq+0xc2>
          break;
 8007a54:	bf00      	nop
      }
      break;
 8007a56:	e004      	b.n	8007a62 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007a58:	6839      	ldr	r1, [r7, #0]
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f000 fceb 	bl	8008436 <USBD_CtlError>
      break;
 8007a60:	bf00      	nop
  }

  return ret;
 8007a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	3710      	adds	r7, #16
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}

08007a6c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b084      	sub	sp, #16
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
 8007a74:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007a76:	2300      	movs	r3, #0
 8007a78:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	889b      	ldrh	r3, [r3, #4]
 8007a7e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	781b      	ldrb	r3, [r3, #0]
 8007a84:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a88:	2b40      	cmp	r3, #64	; 0x40
 8007a8a:	d007      	beq.n	8007a9c <USBD_StdEPReq+0x30>
 8007a8c:	2b40      	cmp	r3, #64	; 0x40
 8007a8e:	f200 817f 	bhi.w	8007d90 <USBD_StdEPReq+0x324>
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d02a      	beq.n	8007aec <USBD_StdEPReq+0x80>
 8007a96:	2b20      	cmp	r3, #32
 8007a98:	f040 817a 	bne.w	8007d90 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007a9c:	7bbb      	ldrb	r3, [r7, #14]
 8007a9e:	4619      	mov	r1, r3
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f7ff fe83 	bl	80077ac <USBD_CoreFindEP>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007aaa:	7b7b      	ldrb	r3, [r7, #13]
 8007aac:	2bff      	cmp	r3, #255	; 0xff
 8007aae:	f000 8174 	beq.w	8007d9a <USBD_StdEPReq+0x32e>
 8007ab2:	7b7b      	ldrb	r3, [r7, #13]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	f040 8170 	bne.w	8007d9a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007aba:	7b7a      	ldrb	r2, [r7, #13]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007ac2:	7b7a      	ldrb	r2, [r7, #13]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	32ae      	adds	r2, #174	; 0xae
 8007ac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007acc:	689b      	ldr	r3, [r3, #8]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	f000 8163 	beq.w	8007d9a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007ad4:	7b7a      	ldrb	r2, [r7, #13]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	32ae      	adds	r2, #174	; 0xae
 8007ada:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ade:	689b      	ldr	r3, [r3, #8]
 8007ae0:	6839      	ldr	r1, [r7, #0]
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	4798      	blx	r3
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007aea:	e156      	b.n	8007d9a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	785b      	ldrb	r3, [r3, #1]
 8007af0:	2b03      	cmp	r3, #3
 8007af2:	d008      	beq.n	8007b06 <USBD_StdEPReq+0x9a>
 8007af4:	2b03      	cmp	r3, #3
 8007af6:	f300 8145 	bgt.w	8007d84 <USBD_StdEPReq+0x318>
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	f000 809b 	beq.w	8007c36 <USBD_StdEPReq+0x1ca>
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d03c      	beq.n	8007b7e <USBD_StdEPReq+0x112>
 8007b04:	e13e      	b.n	8007d84 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	2b02      	cmp	r3, #2
 8007b10:	d002      	beq.n	8007b18 <USBD_StdEPReq+0xac>
 8007b12:	2b03      	cmp	r3, #3
 8007b14:	d016      	beq.n	8007b44 <USBD_StdEPReq+0xd8>
 8007b16:	e02c      	b.n	8007b72 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b18:	7bbb      	ldrb	r3, [r7, #14]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d00d      	beq.n	8007b3a <USBD_StdEPReq+0xce>
 8007b1e:	7bbb      	ldrb	r3, [r7, #14]
 8007b20:	2b80      	cmp	r3, #128	; 0x80
 8007b22:	d00a      	beq.n	8007b3a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007b24:	7bbb      	ldrb	r3, [r7, #14]
 8007b26:	4619      	mov	r1, r3
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f003 ff2f 	bl	800b98c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b2e:	2180      	movs	r1, #128	; 0x80
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f003 ff2b 	bl	800b98c <USBD_LL_StallEP>
 8007b36:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007b38:	e020      	b.n	8007b7c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007b3a:	6839      	ldr	r1, [r7, #0]
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f000 fc7a 	bl	8008436 <USBD_CtlError>
              break;
 8007b42:	e01b      	b.n	8007b7c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	885b      	ldrh	r3, [r3, #2]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d10e      	bne.n	8007b6a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007b4c:	7bbb      	ldrb	r3, [r7, #14]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d00b      	beq.n	8007b6a <USBD_StdEPReq+0xfe>
 8007b52:	7bbb      	ldrb	r3, [r7, #14]
 8007b54:	2b80      	cmp	r3, #128	; 0x80
 8007b56:	d008      	beq.n	8007b6a <USBD_StdEPReq+0xfe>
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	88db      	ldrh	r3, [r3, #6]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d104      	bne.n	8007b6a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007b60:	7bbb      	ldrb	r3, [r7, #14]
 8007b62:	4619      	mov	r1, r3
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f003 ff11 	bl	800b98c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f000 fd2e 	bl	80085cc <USBD_CtlSendStatus>

              break;
 8007b70:	e004      	b.n	8007b7c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007b72:	6839      	ldr	r1, [r7, #0]
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f000 fc5e 	bl	8008436 <USBD_CtlError>
              break;
 8007b7a:	bf00      	nop
          }
          break;
 8007b7c:	e107      	b.n	8007d8e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b84:	b2db      	uxtb	r3, r3
 8007b86:	2b02      	cmp	r3, #2
 8007b88:	d002      	beq.n	8007b90 <USBD_StdEPReq+0x124>
 8007b8a:	2b03      	cmp	r3, #3
 8007b8c:	d016      	beq.n	8007bbc <USBD_StdEPReq+0x150>
 8007b8e:	e04b      	b.n	8007c28 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b90:	7bbb      	ldrb	r3, [r7, #14]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d00d      	beq.n	8007bb2 <USBD_StdEPReq+0x146>
 8007b96:	7bbb      	ldrb	r3, [r7, #14]
 8007b98:	2b80      	cmp	r3, #128	; 0x80
 8007b9a:	d00a      	beq.n	8007bb2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007b9c:	7bbb      	ldrb	r3, [r7, #14]
 8007b9e:	4619      	mov	r1, r3
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f003 fef3 	bl	800b98c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007ba6:	2180      	movs	r1, #128	; 0x80
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f003 feef 	bl	800b98c <USBD_LL_StallEP>
 8007bae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007bb0:	e040      	b.n	8007c34 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007bb2:	6839      	ldr	r1, [r7, #0]
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f000 fc3e 	bl	8008436 <USBD_CtlError>
              break;
 8007bba:	e03b      	b.n	8007c34 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	885b      	ldrh	r3, [r3, #2]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d136      	bne.n	8007c32 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007bc4:	7bbb      	ldrb	r3, [r7, #14]
 8007bc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d004      	beq.n	8007bd8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007bce:	7bbb      	ldrb	r3, [r7, #14]
 8007bd0:	4619      	mov	r1, r3
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f003 fef9 	bl	800b9ca <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f000 fcf7 	bl	80085cc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007bde:	7bbb      	ldrb	r3, [r7, #14]
 8007be0:	4619      	mov	r1, r3
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f7ff fde2 	bl	80077ac <USBD_CoreFindEP>
 8007be8:	4603      	mov	r3, r0
 8007bea:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007bec:	7b7b      	ldrb	r3, [r7, #13]
 8007bee:	2bff      	cmp	r3, #255	; 0xff
 8007bf0:	d01f      	beq.n	8007c32 <USBD_StdEPReq+0x1c6>
 8007bf2:	7b7b      	ldrb	r3, [r7, #13]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d11c      	bne.n	8007c32 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007bf8:	7b7a      	ldrb	r2, [r7, #13]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007c00:	7b7a      	ldrb	r2, [r7, #13]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	32ae      	adds	r2, #174	; 0xae
 8007c06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c0a:	689b      	ldr	r3, [r3, #8]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d010      	beq.n	8007c32 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007c10:	7b7a      	ldrb	r2, [r7, #13]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	32ae      	adds	r2, #174	; 0xae
 8007c16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c1a:	689b      	ldr	r3, [r3, #8]
 8007c1c:	6839      	ldr	r1, [r7, #0]
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	4798      	blx	r3
 8007c22:	4603      	mov	r3, r0
 8007c24:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007c26:	e004      	b.n	8007c32 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007c28:	6839      	ldr	r1, [r7, #0]
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 fc03 	bl	8008436 <USBD_CtlError>
              break;
 8007c30:	e000      	b.n	8007c34 <USBD_StdEPReq+0x1c8>
              break;
 8007c32:	bf00      	nop
          }
          break;
 8007c34:	e0ab      	b.n	8007d8e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c3c:	b2db      	uxtb	r3, r3
 8007c3e:	2b02      	cmp	r3, #2
 8007c40:	d002      	beq.n	8007c48 <USBD_StdEPReq+0x1dc>
 8007c42:	2b03      	cmp	r3, #3
 8007c44:	d032      	beq.n	8007cac <USBD_StdEPReq+0x240>
 8007c46:	e097      	b.n	8007d78 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007c48:	7bbb      	ldrb	r3, [r7, #14]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d007      	beq.n	8007c5e <USBD_StdEPReq+0x1f2>
 8007c4e:	7bbb      	ldrb	r3, [r7, #14]
 8007c50:	2b80      	cmp	r3, #128	; 0x80
 8007c52:	d004      	beq.n	8007c5e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007c54:	6839      	ldr	r1, [r7, #0]
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f000 fbed 	bl	8008436 <USBD_CtlError>
                break;
 8007c5c:	e091      	b.n	8007d82 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c5e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	da0b      	bge.n	8007c7e <USBD_StdEPReq+0x212>
 8007c66:	7bbb      	ldrb	r3, [r7, #14]
 8007c68:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c6c:	4613      	mov	r3, r2
 8007c6e:	009b      	lsls	r3, r3, #2
 8007c70:	4413      	add	r3, r2
 8007c72:	009b      	lsls	r3, r3, #2
 8007c74:	3310      	adds	r3, #16
 8007c76:	687a      	ldr	r2, [r7, #4]
 8007c78:	4413      	add	r3, r2
 8007c7a:	3304      	adds	r3, #4
 8007c7c:	e00b      	b.n	8007c96 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007c7e:	7bbb      	ldrb	r3, [r7, #14]
 8007c80:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c84:	4613      	mov	r3, r2
 8007c86:	009b      	lsls	r3, r3, #2
 8007c88:	4413      	add	r3, r2
 8007c8a:	009b      	lsls	r3, r3, #2
 8007c8c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007c90:	687a      	ldr	r2, [r7, #4]
 8007c92:	4413      	add	r3, r2
 8007c94:	3304      	adds	r3, #4
 8007c96:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	2202      	movs	r2, #2
 8007ca2:	4619      	mov	r1, r3
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f000 fc37 	bl	8008518 <USBD_CtlSendData>
              break;
 8007caa:	e06a      	b.n	8007d82 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007cac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	da11      	bge.n	8007cd8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007cb4:	7bbb      	ldrb	r3, [r7, #14]
 8007cb6:	f003 020f 	and.w	r2, r3, #15
 8007cba:	6879      	ldr	r1, [r7, #4]
 8007cbc:	4613      	mov	r3, r2
 8007cbe:	009b      	lsls	r3, r3, #2
 8007cc0:	4413      	add	r3, r2
 8007cc2:	009b      	lsls	r3, r3, #2
 8007cc4:	440b      	add	r3, r1
 8007cc6:	3324      	adds	r3, #36	; 0x24
 8007cc8:	881b      	ldrh	r3, [r3, #0]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d117      	bne.n	8007cfe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007cce:	6839      	ldr	r1, [r7, #0]
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f000 fbb0 	bl	8008436 <USBD_CtlError>
                  break;
 8007cd6:	e054      	b.n	8007d82 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007cd8:	7bbb      	ldrb	r3, [r7, #14]
 8007cda:	f003 020f 	and.w	r2, r3, #15
 8007cde:	6879      	ldr	r1, [r7, #4]
 8007ce0:	4613      	mov	r3, r2
 8007ce2:	009b      	lsls	r3, r3, #2
 8007ce4:	4413      	add	r3, r2
 8007ce6:	009b      	lsls	r3, r3, #2
 8007ce8:	440b      	add	r3, r1
 8007cea:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007cee:	881b      	ldrh	r3, [r3, #0]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d104      	bne.n	8007cfe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007cf4:	6839      	ldr	r1, [r7, #0]
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 fb9d 	bl	8008436 <USBD_CtlError>
                  break;
 8007cfc:	e041      	b.n	8007d82 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007cfe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	da0b      	bge.n	8007d1e <USBD_StdEPReq+0x2b2>
 8007d06:	7bbb      	ldrb	r3, [r7, #14]
 8007d08:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d0c:	4613      	mov	r3, r2
 8007d0e:	009b      	lsls	r3, r3, #2
 8007d10:	4413      	add	r3, r2
 8007d12:	009b      	lsls	r3, r3, #2
 8007d14:	3310      	adds	r3, #16
 8007d16:	687a      	ldr	r2, [r7, #4]
 8007d18:	4413      	add	r3, r2
 8007d1a:	3304      	adds	r3, #4
 8007d1c:	e00b      	b.n	8007d36 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007d1e:	7bbb      	ldrb	r3, [r7, #14]
 8007d20:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007d24:	4613      	mov	r3, r2
 8007d26:	009b      	lsls	r3, r3, #2
 8007d28:	4413      	add	r3, r2
 8007d2a:	009b      	lsls	r3, r3, #2
 8007d2c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007d30:	687a      	ldr	r2, [r7, #4]
 8007d32:	4413      	add	r3, r2
 8007d34:	3304      	adds	r3, #4
 8007d36:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007d38:	7bbb      	ldrb	r3, [r7, #14]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d002      	beq.n	8007d44 <USBD_StdEPReq+0x2d8>
 8007d3e:	7bbb      	ldrb	r3, [r7, #14]
 8007d40:	2b80      	cmp	r3, #128	; 0x80
 8007d42:	d103      	bne.n	8007d4c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	2200      	movs	r2, #0
 8007d48:	601a      	str	r2, [r3, #0]
 8007d4a:	e00e      	b.n	8007d6a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007d4c:	7bbb      	ldrb	r3, [r7, #14]
 8007d4e:	4619      	mov	r1, r3
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f003 fe59 	bl	800ba08 <USBD_LL_IsStallEP>
 8007d56:	4603      	mov	r3, r0
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d003      	beq.n	8007d64 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	2201      	movs	r2, #1
 8007d60:	601a      	str	r2, [r3, #0]
 8007d62:	e002      	b.n	8007d6a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	2200      	movs	r2, #0
 8007d68:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	2202      	movs	r2, #2
 8007d6e:	4619      	mov	r1, r3
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f000 fbd1 	bl	8008518 <USBD_CtlSendData>
              break;
 8007d76:	e004      	b.n	8007d82 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007d78:	6839      	ldr	r1, [r7, #0]
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f000 fb5b 	bl	8008436 <USBD_CtlError>
              break;
 8007d80:	bf00      	nop
          }
          break;
 8007d82:	e004      	b.n	8007d8e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007d84:	6839      	ldr	r1, [r7, #0]
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f000 fb55 	bl	8008436 <USBD_CtlError>
          break;
 8007d8c:	bf00      	nop
      }
      break;
 8007d8e:	e005      	b.n	8007d9c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007d90:	6839      	ldr	r1, [r7, #0]
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f000 fb4f 	bl	8008436 <USBD_CtlError>
      break;
 8007d98:	e000      	b.n	8007d9c <USBD_StdEPReq+0x330>
      break;
 8007d9a:	bf00      	nop
  }

  return ret;
 8007d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3710      	adds	r7, #16
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}
	...

08007da8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b084      	sub	sp, #16
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
 8007db0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007db2:	2300      	movs	r3, #0
 8007db4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007db6:	2300      	movs	r3, #0
 8007db8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	885b      	ldrh	r3, [r3, #2]
 8007dc2:	0a1b      	lsrs	r3, r3, #8
 8007dc4:	b29b      	uxth	r3, r3
 8007dc6:	3b01      	subs	r3, #1
 8007dc8:	2b06      	cmp	r3, #6
 8007dca:	f200 8128 	bhi.w	800801e <USBD_GetDescriptor+0x276>
 8007dce:	a201      	add	r2, pc, #4	; (adr r2, 8007dd4 <USBD_GetDescriptor+0x2c>)
 8007dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dd4:	08007df1 	.word	0x08007df1
 8007dd8:	08007e09 	.word	0x08007e09
 8007ddc:	08007e49 	.word	0x08007e49
 8007de0:	0800801f 	.word	0x0800801f
 8007de4:	0800801f 	.word	0x0800801f
 8007de8:	08007fbf 	.word	0x08007fbf
 8007dec:	08007feb 	.word	0x08007feb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	687a      	ldr	r2, [r7, #4]
 8007dfa:	7c12      	ldrb	r2, [r2, #16]
 8007dfc:	f107 0108 	add.w	r1, r7, #8
 8007e00:	4610      	mov	r0, r2
 8007e02:	4798      	blx	r3
 8007e04:	60f8      	str	r0, [r7, #12]
      break;
 8007e06:	e112      	b.n	800802e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	7c1b      	ldrb	r3, [r3, #16]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d10d      	bne.n	8007e2c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e18:	f107 0208 	add.w	r2, r7, #8
 8007e1c:	4610      	mov	r0, r2
 8007e1e:	4798      	blx	r3
 8007e20:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	3301      	adds	r3, #1
 8007e26:	2202      	movs	r2, #2
 8007e28:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007e2a:	e100      	b.n	800802e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e34:	f107 0208 	add.w	r2, r7, #8
 8007e38:	4610      	mov	r0, r2
 8007e3a:	4798      	blx	r3
 8007e3c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	3301      	adds	r3, #1
 8007e42:	2202      	movs	r2, #2
 8007e44:	701a      	strb	r2, [r3, #0]
      break;
 8007e46:	e0f2      	b.n	800802e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	885b      	ldrh	r3, [r3, #2]
 8007e4c:	b2db      	uxtb	r3, r3
 8007e4e:	2b05      	cmp	r3, #5
 8007e50:	f200 80ac 	bhi.w	8007fac <USBD_GetDescriptor+0x204>
 8007e54:	a201      	add	r2, pc, #4	; (adr r2, 8007e5c <USBD_GetDescriptor+0xb4>)
 8007e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e5a:	bf00      	nop
 8007e5c:	08007e75 	.word	0x08007e75
 8007e60:	08007ea9 	.word	0x08007ea9
 8007e64:	08007edd 	.word	0x08007edd
 8007e68:	08007f11 	.word	0x08007f11
 8007e6c:	08007f45 	.word	0x08007f45
 8007e70:	08007f79 	.word	0x08007f79
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d00b      	beq.n	8007e98 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	687a      	ldr	r2, [r7, #4]
 8007e8a:	7c12      	ldrb	r2, [r2, #16]
 8007e8c:	f107 0108 	add.w	r1, r7, #8
 8007e90:	4610      	mov	r0, r2
 8007e92:	4798      	blx	r3
 8007e94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e96:	e091      	b.n	8007fbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e98:	6839      	ldr	r1, [r7, #0]
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f000 facb 	bl	8008436 <USBD_CtlError>
            err++;
 8007ea0:	7afb      	ldrb	r3, [r7, #11]
 8007ea2:	3301      	adds	r3, #1
 8007ea4:	72fb      	strb	r3, [r7, #11]
          break;
 8007ea6:	e089      	b.n	8007fbc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007eae:	689b      	ldr	r3, [r3, #8]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d00b      	beq.n	8007ecc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007eba:	689b      	ldr	r3, [r3, #8]
 8007ebc:	687a      	ldr	r2, [r7, #4]
 8007ebe:	7c12      	ldrb	r2, [r2, #16]
 8007ec0:	f107 0108 	add.w	r1, r7, #8
 8007ec4:	4610      	mov	r0, r2
 8007ec6:	4798      	blx	r3
 8007ec8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007eca:	e077      	b.n	8007fbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ecc:	6839      	ldr	r1, [r7, #0]
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f000 fab1 	bl	8008436 <USBD_CtlError>
            err++;
 8007ed4:	7afb      	ldrb	r3, [r7, #11]
 8007ed6:	3301      	adds	r3, #1
 8007ed8:	72fb      	strb	r3, [r7, #11]
          break;
 8007eda:	e06f      	b.n	8007fbc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ee2:	68db      	ldr	r3, [r3, #12]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d00b      	beq.n	8007f00 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007eee:	68db      	ldr	r3, [r3, #12]
 8007ef0:	687a      	ldr	r2, [r7, #4]
 8007ef2:	7c12      	ldrb	r2, [r2, #16]
 8007ef4:	f107 0108 	add.w	r1, r7, #8
 8007ef8:	4610      	mov	r0, r2
 8007efa:	4798      	blx	r3
 8007efc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007efe:	e05d      	b.n	8007fbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f00:	6839      	ldr	r1, [r7, #0]
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 fa97 	bl	8008436 <USBD_CtlError>
            err++;
 8007f08:	7afb      	ldrb	r3, [r7, #11]
 8007f0a:	3301      	adds	r3, #1
 8007f0c:	72fb      	strb	r3, [r7, #11]
          break;
 8007f0e:	e055      	b.n	8007fbc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f16:	691b      	ldr	r3, [r3, #16]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d00b      	beq.n	8007f34 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f22:	691b      	ldr	r3, [r3, #16]
 8007f24:	687a      	ldr	r2, [r7, #4]
 8007f26:	7c12      	ldrb	r2, [r2, #16]
 8007f28:	f107 0108 	add.w	r1, r7, #8
 8007f2c:	4610      	mov	r0, r2
 8007f2e:	4798      	blx	r3
 8007f30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f32:	e043      	b.n	8007fbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f34:	6839      	ldr	r1, [r7, #0]
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 fa7d 	bl	8008436 <USBD_CtlError>
            err++;
 8007f3c:	7afb      	ldrb	r3, [r7, #11]
 8007f3e:	3301      	adds	r3, #1
 8007f40:	72fb      	strb	r3, [r7, #11]
          break;
 8007f42:	e03b      	b.n	8007fbc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f4a:	695b      	ldr	r3, [r3, #20]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d00b      	beq.n	8007f68 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f56:	695b      	ldr	r3, [r3, #20]
 8007f58:	687a      	ldr	r2, [r7, #4]
 8007f5a:	7c12      	ldrb	r2, [r2, #16]
 8007f5c:	f107 0108 	add.w	r1, r7, #8
 8007f60:	4610      	mov	r0, r2
 8007f62:	4798      	blx	r3
 8007f64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f66:	e029      	b.n	8007fbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f68:	6839      	ldr	r1, [r7, #0]
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f000 fa63 	bl	8008436 <USBD_CtlError>
            err++;
 8007f70:	7afb      	ldrb	r3, [r7, #11]
 8007f72:	3301      	adds	r3, #1
 8007f74:	72fb      	strb	r3, [r7, #11]
          break;
 8007f76:	e021      	b.n	8007fbc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f7e:	699b      	ldr	r3, [r3, #24]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d00b      	beq.n	8007f9c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f8a:	699b      	ldr	r3, [r3, #24]
 8007f8c:	687a      	ldr	r2, [r7, #4]
 8007f8e:	7c12      	ldrb	r2, [r2, #16]
 8007f90:	f107 0108 	add.w	r1, r7, #8
 8007f94:	4610      	mov	r0, r2
 8007f96:	4798      	blx	r3
 8007f98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f9a:	e00f      	b.n	8007fbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f9c:	6839      	ldr	r1, [r7, #0]
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 fa49 	bl	8008436 <USBD_CtlError>
            err++;
 8007fa4:	7afb      	ldrb	r3, [r7, #11]
 8007fa6:	3301      	adds	r3, #1
 8007fa8:	72fb      	strb	r3, [r7, #11]
          break;
 8007faa:	e007      	b.n	8007fbc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007fac:	6839      	ldr	r1, [r7, #0]
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f000 fa41 	bl	8008436 <USBD_CtlError>
          err++;
 8007fb4:	7afb      	ldrb	r3, [r7, #11]
 8007fb6:	3301      	adds	r3, #1
 8007fb8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007fba:	bf00      	nop
      }
      break;
 8007fbc:	e037      	b.n	800802e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	7c1b      	ldrb	r3, [r3, #16]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d109      	bne.n	8007fda <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fce:	f107 0208 	add.w	r2, r7, #8
 8007fd2:	4610      	mov	r0, r2
 8007fd4:	4798      	blx	r3
 8007fd6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007fd8:	e029      	b.n	800802e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007fda:	6839      	ldr	r1, [r7, #0]
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f000 fa2a 	bl	8008436 <USBD_CtlError>
        err++;
 8007fe2:	7afb      	ldrb	r3, [r7, #11]
 8007fe4:	3301      	adds	r3, #1
 8007fe6:	72fb      	strb	r3, [r7, #11]
      break;
 8007fe8:	e021      	b.n	800802e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	7c1b      	ldrb	r3, [r3, #16]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d10d      	bne.n	800800e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ffa:	f107 0208 	add.w	r2, r7, #8
 8007ffe:	4610      	mov	r0, r2
 8008000:	4798      	blx	r3
 8008002:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	3301      	adds	r3, #1
 8008008:	2207      	movs	r2, #7
 800800a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800800c:	e00f      	b.n	800802e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800800e:	6839      	ldr	r1, [r7, #0]
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f000 fa10 	bl	8008436 <USBD_CtlError>
        err++;
 8008016:	7afb      	ldrb	r3, [r7, #11]
 8008018:	3301      	adds	r3, #1
 800801a:	72fb      	strb	r3, [r7, #11]
      break;
 800801c:	e007      	b.n	800802e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800801e:	6839      	ldr	r1, [r7, #0]
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f000 fa08 	bl	8008436 <USBD_CtlError>
      err++;
 8008026:	7afb      	ldrb	r3, [r7, #11]
 8008028:	3301      	adds	r3, #1
 800802a:	72fb      	strb	r3, [r7, #11]
      break;
 800802c:	bf00      	nop
  }

  if (err != 0U)
 800802e:	7afb      	ldrb	r3, [r7, #11]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d11e      	bne.n	8008072 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	88db      	ldrh	r3, [r3, #6]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d016      	beq.n	800806a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800803c:	893b      	ldrh	r3, [r7, #8]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d00e      	beq.n	8008060 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	88da      	ldrh	r2, [r3, #6]
 8008046:	893b      	ldrh	r3, [r7, #8]
 8008048:	4293      	cmp	r3, r2
 800804a:	bf28      	it	cs
 800804c:	4613      	movcs	r3, r2
 800804e:	b29b      	uxth	r3, r3
 8008050:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008052:	893b      	ldrh	r3, [r7, #8]
 8008054:	461a      	mov	r2, r3
 8008056:	68f9      	ldr	r1, [r7, #12]
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f000 fa5d 	bl	8008518 <USBD_CtlSendData>
 800805e:	e009      	b.n	8008074 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008060:	6839      	ldr	r1, [r7, #0]
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f000 f9e7 	bl	8008436 <USBD_CtlError>
 8008068:	e004      	b.n	8008074 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f000 faae 	bl	80085cc <USBD_CtlSendStatus>
 8008070:	e000      	b.n	8008074 <USBD_GetDescriptor+0x2cc>
    return;
 8008072:	bf00      	nop
  }
}
 8008074:	3710      	adds	r7, #16
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}
 800807a:	bf00      	nop

0800807c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b084      	sub	sp, #16
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
 8008084:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	889b      	ldrh	r3, [r3, #4]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d131      	bne.n	80080f2 <USBD_SetAddress+0x76>
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	88db      	ldrh	r3, [r3, #6]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d12d      	bne.n	80080f2 <USBD_SetAddress+0x76>
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	885b      	ldrh	r3, [r3, #2]
 800809a:	2b7f      	cmp	r3, #127	; 0x7f
 800809c:	d829      	bhi.n	80080f2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	885b      	ldrh	r3, [r3, #2]
 80080a2:	b2db      	uxtb	r3, r3
 80080a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080a8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080b0:	b2db      	uxtb	r3, r3
 80080b2:	2b03      	cmp	r3, #3
 80080b4:	d104      	bne.n	80080c0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80080b6:	6839      	ldr	r1, [r7, #0]
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f000 f9bc 	bl	8008436 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080be:	e01d      	b.n	80080fc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	7bfa      	ldrb	r2, [r7, #15]
 80080c4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80080c8:	7bfb      	ldrb	r3, [r7, #15]
 80080ca:	4619      	mov	r1, r3
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f003 fcc7 	bl	800ba60 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f000 fa7a 	bl	80085cc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80080d8:	7bfb      	ldrb	r3, [r7, #15]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d004      	beq.n	80080e8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2202      	movs	r2, #2
 80080e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080e6:	e009      	b.n	80080fc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2201      	movs	r2, #1
 80080ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080f0:	e004      	b.n	80080fc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80080f2:	6839      	ldr	r1, [r7, #0]
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f000 f99e 	bl	8008436 <USBD_CtlError>
  }
}
 80080fa:	bf00      	nop
 80080fc:	bf00      	nop
 80080fe:	3710      	adds	r7, #16
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}

08008104 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b084      	sub	sp, #16
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800810e:	2300      	movs	r3, #0
 8008110:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	885b      	ldrh	r3, [r3, #2]
 8008116:	b2da      	uxtb	r2, r3
 8008118:	4b4e      	ldr	r3, [pc, #312]	; (8008254 <USBD_SetConfig+0x150>)
 800811a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800811c:	4b4d      	ldr	r3, [pc, #308]	; (8008254 <USBD_SetConfig+0x150>)
 800811e:	781b      	ldrb	r3, [r3, #0]
 8008120:	2b01      	cmp	r3, #1
 8008122:	d905      	bls.n	8008130 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008124:	6839      	ldr	r1, [r7, #0]
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f000 f985 	bl	8008436 <USBD_CtlError>
    return USBD_FAIL;
 800812c:	2303      	movs	r3, #3
 800812e:	e08c      	b.n	800824a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008136:	b2db      	uxtb	r3, r3
 8008138:	2b02      	cmp	r3, #2
 800813a:	d002      	beq.n	8008142 <USBD_SetConfig+0x3e>
 800813c:	2b03      	cmp	r3, #3
 800813e:	d029      	beq.n	8008194 <USBD_SetConfig+0x90>
 8008140:	e075      	b.n	800822e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008142:	4b44      	ldr	r3, [pc, #272]	; (8008254 <USBD_SetConfig+0x150>)
 8008144:	781b      	ldrb	r3, [r3, #0]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d020      	beq.n	800818c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800814a:	4b42      	ldr	r3, [pc, #264]	; (8008254 <USBD_SetConfig+0x150>)
 800814c:	781b      	ldrb	r3, [r3, #0]
 800814e:	461a      	mov	r2, r3
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008154:	4b3f      	ldr	r3, [pc, #252]	; (8008254 <USBD_SetConfig+0x150>)
 8008156:	781b      	ldrb	r3, [r3, #0]
 8008158:	4619      	mov	r1, r3
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f7fe ffe7 	bl	800712e <USBD_SetClassConfig>
 8008160:	4603      	mov	r3, r0
 8008162:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008164:	7bfb      	ldrb	r3, [r7, #15]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d008      	beq.n	800817c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800816a:	6839      	ldr	r1, [r7, #0]
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f000 f962 	bl	8008436 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2202      	movs	r2, #2
 8008176:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800817a:	e065      	b.n	8008248 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f000 fa25 	bl	80085cc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2203      	movs	r2, #3
 8008186:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800818a:	e05d      	b.n	8008248 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f000 fa1d 	bl	80085cc <USBD_CtlSendStatus>
      break;
 8008192:	e059      	b.n	8008248 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008194:	4b2f      	ldr	r3, [pc, #188]	; (8008254 <USBD_SetConfig+0x150>)
 8008196:	781b      	ldrb	r3, [r3, #0]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d112      	bne.n	80081c2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2202      	movs	r2, #2
 80081a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80081a4:	4b2b      	ldr	r3, [pc, #172]	; (8008254 <USBD_SetConfig+0x150>)
 80081a6:	781b      	ldrb	r3, [r3, #0]
 80081a8:	461a      	mov	r2, r3
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80081ae:	4b29      	ldr	r3, [pc, #164]	; (8008254 <USBD_SetConfig+0x150>)
 80081b0:	781b      	ldrb	r3, [r3, #0]
 80081b2:	4619      	mov	r1, r3
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f7fe ffd6 	bl	8007166 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f000 fa06 	bl	80085cc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80081c0:	e042      	b.n	8008248 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80081c2:	4b24      	ldr	r3, [pc, #144]	; (8008254 <USBD_SetConfig+0x150>)
 80081c4:	781b      	ldrb	r3, [r3, #0]
 80081c6:	461a      	mov	r2, r3
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	685b      	ldr	r3, [r3, #4]
 80081cc:	429a      	cmp	r2, r3
 80081ce:	d02a      	beq.n	8008226 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	685b      	ldr	r3, [r3, #4]
 80081d4:	b2db      	uxtb	r3, r3
 80081d6:	4619      	mov	r1, r3
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f7fe ffc4 	bl	8007166 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80081de:	4b1d      	ldr	r3, [pc, #116]	; (8008254 <USBD_SetConfig+0x150>)
 80081e0:	781b      	ldrb	r3, [r3, #0]
 80081e2:	461a      	mov	r2, r3
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80081e8:	4b1a      	ldr	r3, [pc, #104]	; (8008254 <USBD_SetConfig+0x150>)
 80081ea:	781b      	ldrb	r3, [r3, #0]
 80081ec:	4619      	mov	r1, r3
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f7fe ff9d 	bl	800712e <USBD_SetClassConfig>
 80081f4:	4603      	mov	r3, r0
 80081f6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80081f8:	7bfb      	ldrb	r3, [r7, #15]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d00f      	beq.n	800821e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80081fe:	6839      	ldr	r1, [r7, #0]
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f000 f918 	bl	8008436 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	685b      	ldr	r3, [r3, #4]
 800820a:	b2db      	uxtb	r3, r3
 800820c:	4619      	mov	r1, r3
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f7fe ffa9 	bl	8007166 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2202      	movs	r2, #2
 8008218:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800821c:	e014      	b.n	8008248 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f000 f9d4 	bl	80085cc <USBD_CtlSendStatus>
      break;
 8008224:	e010      	b.n	8008248 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f000 f9d0 	bl	80085cc <USBD_CtlSendStatus>
      break;
 800822c:	e00c      	b.n	8008248 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800822e:	6839      	ldr	r1, [r7, #0]
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f000 f900 	bl	8008436 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008236:	4b07      	ldr	r3, [pc, #28]	; (8008254 <USBD_SetConfig+0x150>)
 8008238:	781b      	ldrb	r3, [r3, #0]
 800823a:	4619      	mov	r1, r3
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f7fe ff92 	bl	8007166 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008242:	2303      	movs	r3, #3
 8008244:	73fb      	strb	r3, [r7, #15]
      break;
 8008246:	bf00      	nop
  }

  return ret;
 8008248:	7bfb      	ldrb	r3, [r7, #15]
}
 800824a:	4618      	mov	r0, r3
 800824c:	3710      	adds	r7, #16
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}
 8008252:	bf00      	nop
 8008254:	20000248 	.word	0x20000248

08008258 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b082      	sub	sp, #8
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
 8008260:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	88db      	ldrh	r3, [r3, #6]
 8008266:	2b01      	cmp	r3, #1
 8008268:	d004      	beq.n	8008274 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800826a:	6839      	ldr	r1, [r7, #0]
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f000 f8e2 	bl	8008436 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008272:	e023      	b.n	80082bc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800827a:	b2db      	uxtb	r3, r3
 800827c:	2b02      	cmp	r3, #2
 800827e:	dc02      	bgt.n	8008286 <USBD_GetConfig+0x2e>
 8008280:	2b00      	cmp	r3, #0
 8008282:	dc03      	bgt.n	800828c <USBD_GetConfig+0x34>
 8008284:	e015      	b.n	80082b2 <USBD_GetConfig+0x5a>
 8008286:	2b03      	cmp	r3, #3
 8008288:	d00b      	beq.n	80082a2 <USBD_GetConfig+0x4a>
 800828a:	e012      	b.n	80082b2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2200      	movs	r2, #0
 8008290:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	3308      	adds	r3, #8
 8008296:	2201      	movs	r2, #1
 8008298:	4619      	mov	r1, r3
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f000 f93c 	bl	8008518 <USBD_CtlSendData>
        break;
 80082a0:	e00c      	b.n	80082bc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	3304      	adds	r3, #4
 80082a6:	2201      	movs	r2, #1
 80082a8:	4619      	mov	r1, r3
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f000 f934 	bl	8008518 <USBD_CtlSendData>
        break;
 80082b0:	e004      	b.n	80082bc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80082b2:	6839      	ldr	r1, [r7, #0]
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f000 f8be 	bl	8008436 <USBD_CtlError>
        break;
 80082ba:	bf00      	nop
}
 80082bc:	bf00      	nop
 80082be:	3708      	adds	r7, #8
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}

080082c4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b082      	sub	sp, #8
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082d4:	b2db      	uxtb	r3, r3
 80082d6:	3b01      	subs	r3, #1
 80082d8:	2b02      	cmp	r3, #2
 80082da:	d81e      	bhi.n	800831a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	88db      	ldrh	r3, [r3, #6]
 80082e0:	2b02      	cmp	r3, #2
 80082e2:	d004      	beq.n	80082ee <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80082e4:	6839      	ldr	r1, [r7, #0]
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f000 f8a5 	bl	8008436 <USBD_CtlError>
        break;
 80082ec:	e01a      	b.n	8008324 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2201      	movs	r2, #1
 80082f2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d005      	beq.n	800830a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	68db      	ldr	r3, [r3, #12]
 8008302:	f043 0202 	orr.w	r2, r3, #2
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	330c      	adds	r3, #12
 800830e:	2202      	movs	r2, #2
 8008310:	4619      	mov	r1, r3
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f000 f900 	bl	8008518 <USBD_CtlSendData>
      break;
 8008318:	e004      	b.n	8008324 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800831a:	6839      	ldr	r1, [r7, #0]
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f000 f88a 	bl	8008436 <USBD_CtlError>
      break;
 8008322:	bf00      	nop
  }
}
 8008324:	bf00      	nop
 8008326:	3708      	adds	r7, #8
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}

0800832c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b082      	sub	sp, #8
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
 8008334:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	885b      	ldrh	r3, [r3, #2]
 800833a:	2b01      	cmp	r3, #1
 800833c:	d107      	bne.n	800834e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2201      	movs	r2, #1
 8008342:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f000 f940 	bl	80085cc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800834c:	e013      	b.n	8008376 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	885b      	ldrh	r3, [r3, #2]
 8008352:	2b02      	cmp	r3, #2
 8008354:	d10b      	bne.n	800836e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	889b      	ldrh	r3, [r3, #4]
 800835a:	0a1b      	lsrs	r3, r3, #8
 800835c:	b29b      	uxth	r3, r3
 800835e:	b2da      	uxtb	r2, r3
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f000 f930 	bl	80085cc <USBD_CtlSendStatus>
}
 800836c:	e003      	b.n	8008376 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800836e:	6839      	ldr	r1, [r7, #0]
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f000 f860 	bl	8008436 <USBD_CtlError>
}
 8008376:	bf00      	nop
 8008378:	3708      	adds	r7, #8
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}

0800837e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800837e:	b580      	push	{r7, lr}
 8008380:	b082      	sub	sp, #8
 8008382:	af00      	add	r7, sp, #0
 8008384:	6078      	str	r0, [r7, #4]
 8008386:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800838e:	b2db      	uxtb	r3, r3
 8008390:	3b01      	subs	r3, #1
 8008392:	2b02      	cmp	r3, #2
 8008394:	d80b      	bhi.n	80083ae <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	885b      	ldrh	r3, [r3, #2]
 800839a:	2b01      	cmp	r3, #1
 800839c:	d10c      	bne.n	80083b8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2200      	movs	r2, #0
 80083a2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f000 f910 	bl	80085cc <USBD_CtlSendStatus>
      }
      break;
 80083ac:	e004      	b.n	80083b8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80083ae:	6839      	ldr	r1, [r7, #0]
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f000 f840 	bl	8008436 <USBD_CtlError>
      break;
 80083b6:	e000      	b.n	80083ba <USBD_ClrFeature+0x3c>
      break;
 80083b8:	bf00      	nop
  }
}
 80083ba:	bf00      	nop
 80083bc:	3708      	adds	r7, #8
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}

080083c2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80083c2:	b580      	push	{r7, lr}
 80083c4:	b084      	sub	sp, #16
 80083c6:	af00      	add	r7, sp, #0
 80083c8:	6078      	str	r0, [r7, #4]
 80083ca:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	781a      	ldrb	r2, [r3, #0]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	3301      	adds	r3, #1
 80083dc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	781a      	ldrb	r2, [r3, #0]
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	3301      	adds	r3, #1
 80083ea:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80083ec:	68f8      	ldr	r0, [r7, #12]
 80083ee:	f7ff fa41 	bl	8007874 <SWAPBYTE>
 80083f2:	4603      	mov	r3, r0
 80083f4:	461a      	mov	r2, r3
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	3301      	adds	r3, #1
 80083fe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	3301      	adds	r3, #1
 8008404:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008406:	68f8      	ldr	r0, [r7, #12]
 8008408:	f7ff fa34 	bl	8007874 <SWAPBYTE>
 800840c:	4603      	mov	r3, r0
 800840e:	461a      	mov	r2, r3
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	3301      	adds	r3, #1
 8008418:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	3301      	adds	r3, #1
 800841e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008420:	68f8      	ldr	r0, [r7, #12]
 8008422:	f7ff fa27 	bl	8007874 <SWAPBYTE>
 8008426:	4603      	mov	r3, r0
 8008428:	461a      	mov	r2, r3
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	80da      	strh	r2, [r3, #6]
}
 800842e:	bf00      	nop
 8008430:	3710      	adds	r7, #16
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}

08008436 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008436:	b580      	push	{r7, lr}
 8008438:	b082      	sub	sp, #8
 800843a:	af00      	add	r7, sp, #0
 800843c:	6078      	str	r0, [r7, #4]
 800843e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008440:	2180      	movs	r1, #128	; 0x80
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f003 faa2 	bl	800b98c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008448:	2100      	movs	r1, #0
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f003 fa9e 	bl	800b98c <USBD_LL_StallEP>
}
 8008450:	bf00      	nop
 8008452:	3708      	adds	r7, #8
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}

08008458 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b086      	sub	sp, #24
 800845c:	af00      	add	r7, sp, #0
 800845e:	60f8      	str	r0, [r7, #12]
 8008460:	60b9      	str	r1, [r7, #8]
 8008462:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008464:	2300      	movs	r3, #0
 8008466:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d036      	beq.n	80084dc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008472:	6938      	ldr	r0, [r7, #16]
 8008474:	f000 f836 	bl	80084e4 <USBD_GetLen>
 8008478:	4603      	mov	r3, r0
 800847a:	3301      	adds	r3, #1
 800847c:	b29b      	uxth	r3, r3
 800847e:	005b      	lsls	r3, r3, #1
 8008480:	b29a      	uxth	r2, r3
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008486:	7dfb      	ldrb	r3, [r7, #23]
 8008488:	68ba      	ldr	r2, [r7, #8]
 800848a:	4413      	add	r3, r2
 800848c:	687a      	ldr	r2, [r7, #4]
 800848e:	7812      	ldrb	r2, [r2, #0]
 8008490:	701a      	strb	r2, [r3, #0]
  idx++;
 8008492:	7dfb      	ldrb	r3, [r7, #23]
 8008494:	3301      	adds	r3, #1
 8008496:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008498:	7dfb      	ldrb	r3, [r7, #23]
 800849a:	68ba      	ldr	r2, [r7, #8]
 800849c:	4413      	add	r3, r2
 800849e:	2203      	movs	r2, #3
 80084a0:	701a      	strb	r2, [r3, #0]
  idx++;
 80084a2:	7dfb      	ldrb	r3, [r7, #23]
 80084a4:	3301      	adds	r3, #1
 80084a6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80084a8:	e013      	b.n	80084d2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80084aa:	7dfb      	ldrb	r3, [r7, #23]
 80084ac:	68ba      	ldr	r2, [r7, #8]
 80084ae:	4413      	add	r3, r2
 80084b0:	693a      	ldr	r2, [r7, #16]
 80084b2:	7812      	ldrb	r2, [r2, #0]
 80084b4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	3301      	adds	r3, #1
 80084ba:	613b      	str	r3, [r7, #16]
    idx++;
 80084bc:	7dfb      	ldrb	r3, [r7, #23]
 80084be:	3301      	adds	r3, #1
 80084c0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80084c2:	7dfb      	ldrb	r3, [r7, #23]
 80084c4:	68ba      	ldr	r2, [r7, #8]
 80084c6:	4413      	add	r3, r2
 80084c8:	2200      	movs	r2, #0
 80084ca:	701a      	strb	r2, [r3, #0]
    idx++;
 80084cc:	7dfb      	ldrb	r3, [r7, #23]
 80084ce:	3301      	adds	r3, #1
 80084d0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	781b      	ldrb	r3, [r3, #0]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d1e7      	bne.n	80084aa <USBD_GetString+0x52>
 80084da:	e000      	b.n	80084de <USBD_GetString+0x86>
    return;
 80084dc:	bf00      	nop
  }
}
 80084de:	3718      	adds	r7, #24
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}

080084e4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b085      	sub	sp, #20
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80084ec:	2300      	movs	r3, #0
 80084ee:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80084f4:	e005      	b.n	8008502 <USBD_GetLen+0x1e>
  {
    len++;
 80084f6:	7bfb      	ldrb	r3, [r7, #15]
 80084f8:	3301      	adds	r3, #1
 80084fa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	3301      	adds	r3, #1
 8008500:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	781b      	ldrb	r3, [r3, #0]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d1f5      	bne.n	80084f6 <USBD_GetLen+0x12>
  }

  return len;
 800850a:	7bfb      	ldrb	r3, [r7, #15]
}
 800850c:	4618      	mov	r0, r3
 800850e:	3714      	adds	r7, #20
 8008510:	46bd      	mov	sp, r7
 8008512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008516:	4770      	bx	lr

08008518 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b084      	sub	sp, #16
 800851c:	af00      	add	r7, sp, #0
 800851e:	60f8      	str	r0, [r7, #12]
 8008520:	60b9      	str	r1, [r7, #8]
 8008522:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	2202      	movs	r2, #2
 8008528:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	687a      	ldr	r2, [r7, #4]
 8008530:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	687a      	ldr	r2, [r7, #4]
 8008536:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	68ba      	ldr	r2, [r7, #8]
 800853c:	2100      	movs	r1, #0
 800853e:	68f8      	ldr	r0, [r7, #12]
 8008540:	f003 faad 	bl	800ba9e <USBD_LL_Transmit>

  return USBD_OK;
 8008544:	2300      	movs	r3, #0
}
 8008546:	4618      	mov	r0, r3
 8008548:	3710      	adds	r7, #16
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}

0800854e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800854e:	b580      	push	{r7, lr}
 8008550:	b084      	sub	sp, #16
 8008552:	af00      	add	r7, sp, #0
 8008554:	60f8      	str	r0, [r7, #12]
 8008556:	60b9      	str	r1, [r7, #8]
 8008558:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	68ba      	ldr	r2, [r7, #8]
 800855e:	2100      	movs	r1, #0
 8008560:	68f8      	ldr	r0, [r7, #12]
 8008562:	f003 fa9c 	bl	800ba9e <USBD_LL_Transmit>

  return USBD_OK;
 8008566:	2300      	movs	r3, #0
}
 8008568:	4618      	mov	r0, r3
 800856a:	3710      	adds	r7, #16
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}

08008570 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b084      	sub	sp, #16
 8008574:	af00      	add	r7, sp, #0
 8008576:	60f8      	str	r0, [r7, #12]
 8008578:	60b9      	str	r1, [r7, #8]
 800857a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2203      	movs	r2, #3
 8008580:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	687a      	ldr	r2, [r7, #4]
 8008588:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	687a      	ldr	r2, [r7, #4]
 8008590:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	68ba      	ldr	r2, [r7, #8]
 8008598:	2100      	movs	r1, #0
 800859a:	68f8      	ldr	r0, [r7, #12]
 800859c:	f003 faa0 	bl	800bae0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80085a0:	2300      	movs	r3, #0
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3710      	adds	r7, #16
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}

080085aa <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80085aa:	b580      	push	{r7, lr}
 80085ac:	b084      	sub	sp, #16
 80085ae:	af00      	add	r7, sp, #0
 80085b0:	60f8      	str	r0, [r7, #12]
 80085b2:	60b9      	str	r1, [r7, #8]
 80085b4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	68ba      	ldr	r2, [r7, #8]
 80085ba:	2100      	movs	r1, #0
 80085bc:	68f8      	ldr	r0, [r7, #12]
 80085be:	f003 fa8f 	bl	800bae0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80085c2:	2300      	movs	r3, #0
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3710      	adds	r7, #16
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}

080085cc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b082      	sub	sp, #8
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2204      	movs	r2, #4
 80085d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80085dc:	2300      	movs	r3, #0
 80085de:	2200      	movs	r2, #0
 80085e0:	2100      	movs	r1, #0
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f003 fa5b 	bl	800ba9e <USBD_LL_Transmit>

  return USBD_OK;
 80085e8:	2300      	movs	r3, #0
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3708      	adds	r7, #8
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}

080085f2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80085f2:	b580      	push	{r7, lr}
 80085f4:	b082      	sub	sp, #8
 80085f6:	af00      	add	r7, sp, #0
 80085f8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2205      	movs	r2, #5
 80085fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008602:	2300      	movs	r3, #0
 8008604:	2200      	movs	r2, #0
 8008606:	2100      	movs	r1, #0
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f003 fa69 	bl	800bae0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800860e:	2300      	movs	r3, #0
}
 8008610:	4618      	mov	r0, r3
 8008612:	3708      	adds	r7, #8
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}

08008618 <__NVIC_SetPriority>:
{
 8008618:	b480      	push	{r7}
 800861a:	b083      	sub	sp, #12
 800861c:	af00      	add	r7, sp, #0
 800861e:	4603      	mov	r3, r0
 8008620:	6039      	str	r1, [r7, #0]
 8008622:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008628:	2b00      	cmp	r3, #0
 800862a:	db0a      	blt.n	8008642 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	b2da      	uxtb	r2, r3
 8008630:	490c      	ldr	r1, [pc, #48]	; (8008664 <__NVIC_SetPriority+0x4c>)
 8008632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008636:	0112      	lsls	r2, r2, #4
 8008638:	b2d2      	uxtb	r2, r2
 800863a:	440b      	add	r3, r1
 800863c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008640:	e00a      	b.n	8008658 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	b2da      	uxtb	r2, r3
 8008646:	4908      	ldr	r1, [pc, #32]	; (8008668 <__NVIC_SetPriority+0x50>)
 8008648:	79fb      	ldrb	r3, [r7, #7]
 800864a:	f003 030f 	and.w	r3, r3, #15
 800864e:	3b04      	subs	r3, #4
 8008650:	0112      	lsls	r2, r2, #4
 8008652:	b2d2      	uxtb	r2, r2
 8008654:	440b      	add	r3, r1
 8008656:	761a      	strb	r2, [r3, #24]
}
 8008658:	bf00      	nop
 800865a:	370c      	adds	r7, #12
 800865c:	46bd      	mov	sp, r7
 800865e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008662:	4770      	bx	lr
 8008664:	e000e100 	.word	0xe000e100
 8008668:	e000ed00 	.word	0xe000ed00

0800866c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800866c:	b580      	push	{r7, lr}
 800866e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008670:	4b05      	ldr	r3, [pc, #20]	; (8008688 <SysTick_Handler+0x1c>)
 8008672:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008674:	f001 fd28 	bl	800a0c8 <xTaskGetSchedulerState>
 8008678:	4603      	mov	r3, r0
 800867a:	2b01      	cmp	r3, #1
 800867c:	d001      	beq.n	8008682 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800867e:	f002 fb13 	bl	800aca8 <xPortSysTickHandler>
  }
}
 8008682:	bf00      	nop
 8008684:	bd80      	pop	{r7, pc}
 8008686:	bf00      	nop
 8008688:	e000e010 	.word	0xe000e010

0800868c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800868c:	b580      	push	{r7, lr}
 800868e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008690:	2100      	movs	r1, #0
 8008692:	f06f 0004 	mvn.w	r0, #4
 8008696:	f7ff ffbf 	bl	8008618 <__NVIC_SetPriority>
#endif
}
 800869a:	bf00      	nop
 800869c:	bd80      	pop	{r7, pc}
	...

080086a0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80086a0:	b480      	push	{r7}
 80086a2:	b083      	sub	sp, #12
 80086a4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80086a6:	f3ef 8305 	mrs	r3, IPSR
 80086aa:	603b      	str	r3, [r7, #0]
  return(result);
 80086ac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d003      	beq.n	80086ba <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80086b2:	f06f 0305 	mvn.w	r3, #5
 80086b6:	607b      	str	r3, [r7, #4]
 80086b8:	e00c      	b.n	80086d4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80086ba:	4b0a      	ldr	r3, [pc, #40]	; (80086e4 <osKernelInitialize+0x44>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d105      	bne.n	80086ce <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80086c2:	4b08      	ldr	r3, [pc, #32]	; (80086e4 <osKernelInitialize+0x44>)
 80086c4:	2201      	movs	r2, #1
 80086c6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80086c8:	2300      	movs	r3, #0
 80086ca:	607b      	str	r3, [r7, #4]
 80086cc:	e002      	b.n	80086d4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80086ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80086d2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80086d4:	687b      	ldr	r3, [r7, #4]
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	370c      	adds	r7, #12
 80086da:	46bd      	mov	sp, r7
 80086dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e0:	4770      	bx	lr
 80086e2:	bf00      	nop
 80086e4:	2000024c 	.word	0x2000024c

080086e8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b082      	sub	sp, #8
 80086ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80086ee:	f3ef 8305 	mrs	r3, IPSR
 80086f2:	603b      	str	r3, [r7, #0]
  return(result);
 80086f4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d003      	beq.n	8008702 <osKernelStart+0x1a>
    stat = osErrorISR;
 80086fa:	f06f 0305 	mvn.w	r3, #5
 80086fe:	607b      	str	r3, [r7, #4]
 8008700:	e010      	b.n	8008724 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008702:	4b0b      	ldr	r3, [pc, #44]	; (8008730 <osKernelStart+0x48>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	2b01      	cmp	r3, #1
 8008708:	d109      	bne.n	800871e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800870a:	f7ff ffbf 	bl	800868c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800870e:	4b08      	ldr	r3, [pc, #32]	; (8008730 <osKernelStart+0x48>)
 8008710:	2202      	movs	r2, #2
 8008712:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008714:	f001 f87c 	bl	8009810 <vTaskStartScheduler>
      stat = osOK;
 8008718:	2300      	movs	r3, #0
 800871a:	607b      	str	r3, [r7, #4]
 800871c:	e002      	b.n	8008724 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800871e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008722:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008724:	687b      	ldr	r3, [r7, #4]
}
 8008726:	4618      	mov	r0, r3
 8008728:	3708      	adds	r7, #8
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}
 800872e:	bf00      	nop
 8008730:	2000024c 	.word	0x2000024c

08008734 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008734:	b580      	push	{r7, lr}
 8008736:	b08e      	sub	sp, #56	; 0x38
 8008738:	af04      	add	r7, sp, #16
 800873a:	60f8      	str	r0, [r7, #12]
 800873c:	60b9      	str	r1, [r7, #8]
 800873e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008740:	2300      	movs	r3, #0
 8008742:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008744:	f3ef 8305 	mrs	r3, IPSR
 8008748:	617b      	str	r3, [r7, #20]
  return(result);
 800874a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800874c:	2b00      	cmp	r3, #0
 800874e:	d17e      	bne.n	800884e <osThreadNew+0x11a>
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d07b      	beq.n	800884e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008756:	2380      	movs	r3, #128	; 0x80
 8008758:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800875a:	2318      	movs	r3, #24
 800875c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800875e:	2300      	movs	r3, #0
 8008760:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008762:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008766:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d045      	beq.n	80087fa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d002      	beq.n	800877c <osThreadNew+0x48>
        name = attr->name;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	699b      	ldr	r3, [r3, #24]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d002      	beq.n	800878a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	699b      	ldr	r3, [r3, #24]
 8008788:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800878a:	69fb      	ldr	r3, [r7, #28]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d008      	beq.n	80087a2 <osThreadNew+0x6e>
 8008790:	69fb      	ldr	r3, [r7, #28]
 8008792:	2b38      	cmp	r3, #56	; 0x38
 8008794:	d805      	bhi.n	80087a2 <osThreadNew+0x6e>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	685b      	ldr	r3, [r3, #4]
 800879a:	f003 0301 	and.w	r3, r3, #1
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d001      	beq.n	80087a6 <osThreadNew+0x72>
        return (NULL);
 80087a2:	2300      	movs	r3, #0
 80087a4:	e054      	b.n	8008850 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	695b      	ldr	r3, [r3, #20]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d003      	beq.n	80087b6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	695b      	ldr	r3, [r3, #20]
 80087b2:	089b      	lsrs	r3, r3, #2
 80087b4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	689b      	ldr	r3, [r3, #8]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d00e      	beq.n	80087dc <osThreadNew+0xa8>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	68db      	ldr	r3, [r3, #12]
 80087c2:	2bbb      	cmp	r3, #187	; 0xbb
 80087c4:	d90a      	bls.n	80087dc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d006      	beq.n	80087dc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	695b      	ldr	r3, [r3, #20]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d002      	beq.n	80087dc <osThreadNew+0xa8>
        mem = 1;
 80087d6:	2301      	movs	r3, #1
 80087d8:	61bb      	str	r3, [r7, #24]
 80087da:	e010      	b.n	80087fe <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	689b      	ldr	r3, [r3, #8]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d10c      	bne.n	80087fe <osThreadNew+0xca>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	68db      	ldr	r3, [r3, #12]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d108      	bne.n	80087fe <osThreadNew+0xca>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	691b      	ldr	r3, [r3, #16]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d104      	bne.n	80087fe <osThreadNew+0xca>
          mem = 0;
 80087f4:	2300      	movs	r3, #0
 80087f6:	61bb      	str	r3, [r7, #24]
 80087f8:	e001      	b.n	80087fe <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80087fa:	2300      	movs	r3, #0
 80087fc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80087fe:	69bb      	ldr	r3, [r7, #24]
 8008800:	2b01      	cmp	r3, #1
 8008802:	d110      	bne.n	8008826 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008808:	687a      	ldr	r2, [r7, #4]
 800880a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800880c:	9202      	str	r2, [sp, #8]
 800880e:	9301      	str	r3, [sp, #4]
 8008810:	69fb      	ldr	r3, [r7, #28]
 8008812:	9300      	str	r3, [sp, #0]
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	6a3a      	ldr	r2, [r7, #32]
 8008818:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800881a:	68f8      	ldr	r0, [r7, #12]
 800881c:	f000 fe0c 	bl	8009438 <xTaskCreateStatic>
 8008820:	4603      	mov	r3, r0
 8008822:	613b      	str	r3, [r7, #16]
 8008824:	e013      	b.n	800884e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008826:	69bb      	ldr	r3, [r7, #24]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d110      	bne.n	800884e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800882c:	6a3b      	ldr	r3, [r7, #32]
 800882e:	b29a      	uxth	r2, r3
 8008830:	f107 0310 	add.w	r3, r7, #16
 8008834:	9301      	str	r3, [sp, #4]
 8008836:	69fb      	ldr	r3, [r7, #28]
 8008838:	9300      	str	r3, [sp, #0]
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800883e:	68f8      	ldr	r0, [r7, #12]
 8008840:	f000 fe57 	bl	80094f2 <xTaskCreate>
 8008844:	4603      	mov	r3, r0
 8008846:	2b01      	cmp	r3, #1
 8008848:	d001      	beq.n	800884e <osThreadNew+0x11a>
            hTask = NULL;
 800884a:	2300      	movs	r3, #0
 800884c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800884e:	693b      	ldr	r3, [r7, #16]
}
 8008850:	4618      	mov	r0, r3
 8008852:	3728      	adds	r7, #40	; 0x28
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}

08008858 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008858:	b580      	push	{r7, lr}
 800885a:	b084      	sub	sp, #16
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008860:	f3ef 8305 	mrs	r3, IPSR
 8008864:	60bb      	str	r3, [r7, #8]
  return(result);
 8008866:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008868:	2b00      	cmp	r3, #0
 800886a:	d003      	beq.n	8008874 <osDelay+0x1c>
    stat = osErrorISR;
 800886c:	f06f 0305 	mvn.w	r3, #5
 8008870:	60fb      	str	r3, [r7, #12]
 8008872:	e007      	b.n	8008884 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008874:	2300      	movs	r3, #0
 8008876:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d002      	beq.n	8008884 <osDelay+0x2c>
      vTaskDelay(ticks);
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f000 ff92 	bl	80097a8 <vTaskDelay>
    }
  }

  return (stat);
 8008884:	68fb      	ldr	r3, [r7, #12]
}
 8008886:	4618      	mov	r0, r3
 8008888:	3710      	adds	r7, #16
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}
	...

08008890 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008890:	b480      	push	{r7}
 8008892:	b085      	sub	sp, #20
 8008894:	af00      	add	r7, sp, #0
 8008896:	60f8      	str	r0, [r7, #12]
 8008898:	60b9      	str	r1, [r7, #8]
 800889a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	4a07      	ldr	r2, [pc, #28]	; (80088bc <vApplicationGetIdleTaskMemory+0x2c>)
 80088a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	4a06      	ldr	r2, [pc, #24]	; (80088c0 <vApplicationGetIdleTaskMemory+0x30>)
 80088a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2280      	movs	r2, #128	; 0x80
 80088ac:	601a      	str	r2, [r3, #0]
}
 80088ae:	bf00      	nop
 80088b0:	3714      	adds	r7, #20
 80088b2:	46bd      	mov	sp, r7
 80088b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b8:	4770      	bx	lr
 80088ba:	bf00      	nop
 80088bc:	20000250 	.word	0x20000250
 80088c0:	2000030c 	.word	0x2000030c

080088c4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80088c4:	b480      	push	{r7}
 80088c6:	b085      	sub	sp, #20
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	60f8      	str	r0, [r7, #12]
 80088cc:	60b9      	str	r1, [r7, #8]
 80088ce:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	4a07      	ldr	r2, [pc, #28]	; (80088f0 <vApplicationGetTimerTaskMemory+0x2c>)
 80088d4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	4a06      	ldr	r2, [pc, #24]	; (80088f4 <vApplicationGetTimerTaskMemory+0x30>)
 80088da:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80088e2:	601a      	str	r2, [r3, #0]
}
 80088e4:	bf00      	nop
 80088e6:	3714      	adds	r7, #20
 80088e8:	46bd      	mov	sp, r7
 80088ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ee:	4770      	bx	lr
 80088f0:	2000050c 	.word	0x2000050c
 80088f4:	200005c8 	.word	0x200005c8

080088f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80088f8:	b480      	push	{r7}
 80088fa:	b083      	sub	sp, #12
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f103 0208 	add.w	r2, r3, #8
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008910:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f103 0208 	add.w	r2, r3, #8
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f103 0208 	add.w	r2, r3, #8
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2200      	movs	r2, #0
 800892a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800892c:	bf00      	nop
 800892e:	370c      	adds	r7, #12
 8008930:	46bd      	mov	sp, r7
 8008932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008936:	4770      	bx	lr

08008938 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008938:	b480      	push	{r7}
 800893a:	b083      	sub	sp, #12
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2200      	movs	r2, #0
 8008944:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008946:	bf00      	nop
 8008948:	370c      	adds	r7, #12
 800894a:	46bd      	mov	sp, r7
 800894c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008950:	4770      	bx	lr

08008952 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008952:	b480      	push	{r7}
 8008954:	b085      	sub	sp, #20
 8008956:	af00      	add	r7, sp, #0
 8008958:	6078      	str	r0, [r7, #4]
 800895a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	68fa      	ldr	r2, [r7, #12]
 8008966:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	689a      	ldr	r2, [r3, #8]
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	689b      	ldr	r3, [r3, #8]
 8008974:	683a      	ldr	r2, [r7, #0]
 8008976:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	683a      	ldr	r2, [r7, #0]
 800897c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	687a      	ldr	r2, [r7, #4]
 8008982:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	1c5a      	adds	r2, r3, #1
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	601a      	str	r2, [r3, #0]
}
 800898e:	bf00      	nop
 8008990:	3714      	adds	r7, #20
 8008992:	46bd      	mov	sp, r7
 8008994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008998:	4770      	bx	lr

0800899a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800899a:	b480      	push	{r7}
 800899c:	b085      	sub	sp, #20
 800899e:	af00      	add	r7, sp, #0
 80089a0:	6078      	str	r0, [r7, #4]
 80089a2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80089b0:	d103      	bne.n	80089ba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	691b      	ldr	r3, [r3, #16]
 80089b6:	60fb      	str	r3, [r7, #12]
 80089b8:	e00c      	b.n	80089d4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	3308      	adds	r3, #8
 80089be:	60fb      	str	r3, [r7, #12]
 80089c0:	e002      	b.n	80089c8 <vListInsert+0x2e>
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	685b      	ldr	r3, [r3, #4]
 80089c6:	60fb      	str	r3, [r7, #12]
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	68ba      	ldr	r2, [r7, #8]
 80089d0:	429a      	cmp	r2, r3
 80089d2:	d2f6      	bcs.n	80089c2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	685a      	ldr	r2, [r3, #4]
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	683a      	ldr	r2, [r7, #0]
 80089e2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	68fa      	ldr	r2, [r7, #12]
 80089e8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	683a      	ldr	r2, [r7, #0]
 80089ee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	687a      	ldr	r2, [r7, #4]
 80089f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	1c5a      	adds	r2, r3, #1
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	601a      	str	r2, [r3, #0]
}
 8008a00:	bf00      	nop
 8008a02:	3714      	adds	r7, #20
 8008a04:	46bd      	mov	sp, r7
 8008a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0a:	4770      	bx	lr

08008a0c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b085      	sub	sp, #20
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	691b      	ldr	r3, [r3, #16]
 8008a18:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	685b      	ldr	r3, [r3, #4]
 8008a1e:	687a      	ldr	r2, [r7, #4]
 8008a20:	6892      	ldr	r2, [r2, #8]
 8008a22:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	689b      	ldr	r3, [r3, #8]
 8008a28:	687a      	ldr	r2, [r7, #4]
 8008a2a:	6852      	ldr	r2, [r2, #4]
 8008a2c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	687a      	ldr	r2, [r7, #4]
 8008a34:	429a      	cmp	r2, r3
 8008a36:	d103      	bne.n	8008a40 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	689a      	ldr	r2, [r3, #8]
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2200      	movs	r2, #0
 8008a44:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	1e5a      	subs	r2, r3, #1
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	3714      	adds	r7, #20
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5e:	4770      	bx	lr

08008a60 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b084      	sub	sp, #16
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
 8008a68:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d10a      	bne.n	8008a8a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a78:	f383 8811 	msr	BASEPRI, r3
 8008a7c:	f3bf 8f6f 	isb	sy
 8008a80:	f3bf 8f4f 	dsb	sy
 8008a84:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008a86:	bf00      	nop
 8008a88:	e7fe      	b.n	8008a88 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008a8a:	f002 f87b 	bl	800ab84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681a      	ldr	r2, [r3, #0]
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a96:	68f9      	ldr	r1, [r7, #12]
 8008a98:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008a9a:	fb01 f303 	mul.w	r3, r1, r3
 8008a9e:	441a      	add	r2, r3
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681a      	ldr	r2, [r3, #0]
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681a      	ldr	r2, [r3, #0]
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008aba:	3b01      	subs	r3, #1
 8008abc:	68f9      	ldr	r1, [r7, #12]
 8008abe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008ac0:	fb01 f303 	mul.w	r3, r1, r3
 8008ac4:	441a      	add	r2, r3
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	22ff      	movs	r2, #255	; 0xff
 8008ace:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	22ff      	movs	r2, #255	; 0xff
 8008ad6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d114      	bne.n	8008b0a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	691b      	ldr	r3, [r3, #16]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d01a      	beq.n	8008b1e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	3310      	adds	r3, #16
 8008aec:	4618      	mov	r0, r3
 8008aee:	f001 f929 	bl	8009d44 <xTaskRemoveFromEventList>
 8008af2:	4603      	mov	r3, r0
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d012      	beq.n	8008b1e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008af8:	4b0c      	ldr	r3, [pc, #48]	; (8008b2c <xQueueGenericReset+0xcc>)
 8008afa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008afe:	601a      	str	r2, [r3, #0]
 8008b00:	f3bf 8f4f 	dsb	sy
 8008b04:	f3bf 8f6f 	isb	sy
 8008b08:	e009      	b.n	8008b1e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	3310      	adds	r3, #16
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f7ff fef2 	bl	80088f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	3324      	adds	r3, #36	; 0x24
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f7ff feed 	bl	80088f8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008b1e:	f002 f861 	bl	800abe4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008b22:	2301      	movs	r3, #1
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3710      	adds	r7, #16
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}
 8008b2c:	e000ed04 	.word	0xe000ed04

08008b30 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b08e      	sub	sp, #56	; 0x38
 8008b34:	af02      	add	r7, sp, #8
 8008b36:	60f8      	str	r0, [r7, #12]
 8008b38:	60b9      	str	r1, [r7, #8]
 8008b3a:	607a      	str	r2, [r7, #4]
 8008b3c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d10a      	bne.n	8008b5a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b48:	f383 8811 	msr	BASEPRI, r3
 8008b4c:	f3bf 8f6f 	isb	sy
 8008b50:	f3bf 8f4f 	dsb	sy
 8008b54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008b56:	bf00      	nop
 8008b58:	e7fe      	b.n	8008b58 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d10a      	bne.n	8008b76 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b64:	f383 8811 	msr	BASEPRI, r3
 8008b68:	f3bf 8f6f 	isb	sy
 8008b6c:	f3bf 8f4f 	dsb	sy
 8008b70:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008b72:	bf00      	nop
 8008b74:	e7fe      	b.n	8008b74 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d002      	beq.n	8008b82 <xQueueGenericCreateStatic+0x52>
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d001      	beq.n	8008b86 <xQueueGenericCreateStatic+0x56>
 8008b82:	2301      	movs	r3, #1
 8008b84:	e000      	b.n	8008b88 <xQueueGenericCreateStatic+0x58>
 8008b86:	2300      	movs	r3, #0
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d10a      	bne.n	8008ba2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b90:	f383 8811 	msr	BASEPRI, r3
 8008b94:	f3bf 8f6f 	isb	sy
 8008b98:	f3bf 8f4f 	dsb	sy
 8008b9c:	623b      	str	r3, [r7, #32]
}
 8008b9e:	bf00      	nop
 8008ba0:	e7fe      	b.n	8008ba0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d102      	bne.n	8008bae <xQueueGenericCreateStatic+0x7e>
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d101      	bne.n	8008bb2 <xQueueGenericCreateStatic+0x82>
 8008bae:	2301      	movs	r3, #1
 8008bb0:	e000      	b.n	8008bb4 <xQueueGenericCreateStatic+0x84>
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d10a      	bne.n	8008bce <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bbc:	f383 8811 	msr	BASEPRI, r3
 8008bc0:	f3bf 8f6f 	isb	sy
 8008bc4:	f3bf 8f4f 	dsb	sy
 8008bc8:	61fb      	str	r3, [r7, #28]
}
 8008bca:	bf00      	nop
 8008bcc:	e7fe      	b.n	8008bcc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008bce:	2350      	movs	r3, #80	; 0x50
 8008bd0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008bd2:	697b      	ldr	r3, [r7, #20]
 8008bd4:	2b50      	cmp	r3, #80	; 0x50
 8008bd6:	d00a      	beq.n	8008bee <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bdc:	f383 8811 	msr	BASEPRI, r3
 8008be0:	f3bf 8f6f 	isb	sy
 8008be4:	f3bf 8f4f 	dsb	sy
 8008be8:	61bb      	str	r3, [r7, #24]
}
 8008bea:	bf00      	nop
 8008bec:	e7fe      	b.n	8008bec <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008bee:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d00d      	beq.n	8008c16 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008c02:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c08:	9300      	str	r3, [sp, #0]
 8008c0a:	4613      	mov	r3, r2
 8008c0c:	687a      	ldr	r2, [r7, #4]
 8008c0e:	68b9      	ldr	r1, [r7, #8]
 8008c10:	68f8      	ldr	r0, [r7, #12]
 8008c12:	f000 f805 	bl	8008c20 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3730      	adds	r7, #48	; 0x30
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}

08008c20 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b084      	sub	sp, #16
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	60f8      	str	r0, [r7, #12]
 8008c28:	60b9      	str	r1, [r7, #8]
 8008c2a:	607a      	str	r2, [r7, #4]
 8008c2c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d103      	bne.n	8008c3c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008c34:	69bb      	ldr	r3, [r7, #24]
 8008c36:	69ba      	ldr	r2, [r7, #24]
 8008c38:	601a      	str	r2, [r3, #0]
 8008c3a:	e002      	b.n	8008c42 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008c3c:	69bb      	ldr	r3, [r7, #24]
 8008c3e:	687a      	ldr	r2, [r7, #4]
 8008c40:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008c42:	69bb      	ldr	r3, [r7, #24]
 8008c44:	68fa      	ldr	r2, [r7, #12]
 8008c46:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008c48:	69bb      	ldr	r3, [r7, #24]
 8008c4a:	68ba      	ldr	r2, [r7, #8]
 8008c4c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008c4e:	2101      	movs	r1, #1
 8008c50:	69b8      	ldr	r0, [r7, #24]
 8008c52:	f7ff ff05 	bl	8008a60 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008c56:	69bb      	ldr	r3, [r7, #24]
 8008c58:	78fa      	ldrb	r2, [r7, #3]
 8008c5a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008c5e:	bf00      	nop
 8008c60:	3710      	adds	r7, #16
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}
	...

08008c68 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b08e      	sub	sp, #56	; 0x38
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	60f8      	str	r0, [r7, #12]
 8008c70:	60b9      	str	r1, [r7, #8]
 8008c72:	607a      	str	r2, [r7, #4]
 8008c74:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008c76:	2300      	movs	r3, #0
 8008c78:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d10a      	bne.n	8008c9a <xQueueGenericSend+0x32>
	__asm volatile
 8008c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c88:	f383 8811 	msr	BASEPRI, r3
 8008c8c:	f3bf 8f6f 	isb	sy
 8008c90:	f3bf 8f4f 	dsb	sy
 8008c94:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008c96:	bf00      	nop
 8008c98:	e7fe      	b.n	8008c98 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d103      	bne.n	8008ca8 <xQueueGenericSend+0x40>
 8008ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d101      	bne.n	8008cac <xQueueGenericSend+0x44>
 8008ca8:	2301      	movs	r3, #1
 8008caa:	e000      	b.n	8008cae <xQueueGenericSend+0x46>
 8008cac:	2300      	movs	r3, #0
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d10a      	bne.n	8008cc8 <xQueueGenericSend+0x60>
	__asm volatile
 8008cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb6:	f383 8811 	msr	BASEPRI, r3
 8008cba:	f3bf 8f6f 	isb	sy
 8008cbe:	f3bf 8f4f 	dsb	sy
 8008cc2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008cc4:	bf00      	nop
 8008cc6:	e7fe      	b.n	8008cc6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	2b02      	cmp	r3, #2
 8008ccc:	d103      	bne.n	8008cd6 <xQueueGenericSend+0x6e>
 8008cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cd2:	2b01      	cmp	r3, #1
 8008cd4:	d101      	bne.n	8008cda <xQueueGenericSend+0x72>
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	e000      	b.n	8008cdc <xQueueGenericSend+0x74>
 8008cda:	2300      	movs	r3, #0
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d10a      	bne.n	8008cf6 <xQueueGenericSend+0x8e>
	__asm volatile
 8008ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce4:	f383 8811 	msr	BASEPRI, r3
 8008ce8:	f3bf 8f6f 	isb	sy
 8008cec:	f3bf 8f4f 	dsb	sy
 8008cf0:	623b      	str	r3, [r7, #32]
}
 8008cf2:	bf00      	nop
 8008cf4:	e7fe      	b.n	8008cf4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008cf6:	f001 f9e7 	bl	800a0c8 <xTaskGetSchedulerState>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d102      	bne.n	8008d06 <xQueueGenericSend+0x9e>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d101      	bne.n	8008d0a <xQueueGenericSend+0xa2>
 8008d06:	2301      	movs	r3, #1
 8008d08:	e000      	b.n	8008d0c <xQueueGenericSend+0xa4>
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d10a      	bne.n	8008d26 <xQueueGenericSend+0xbe>
	__asm volatile
 8008d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d14:	f383 8811 	msr	BASEPRI, r3
 8008d18:	f3bf 8f6f 	isb	sy
 8008d1c:	f3bf 8f4f 	dsb	sy
 8008d20:	61fb      	str	r3, [r7, #28]
}
 8008d22:	bf00      	nop
 8008d24:	e7fe      	b.n	8008d24 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008d26:	f001 ff2d 	bl	800ab84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d32:	429a      	cmp	r2, r3
 8008d34:	d302      	bcc.n	8008d3c <xQueueGenericSend+0xd4>
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	2b02      	cmp	r3, #2
 8008d3a:	d129      	bne.n	8008d90 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008d3c:	683a      	ldr	r2, [r7, #0]
 8008d3e:	68b9      	ldr	r1, [r7, #8]
 8008d40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d42:	f000 fa0b 	bl	800915c <prvCopyDataToQueue>
 8008d46:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d010      	beq.n	8008d72 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d52:	3324      	adds	r3, #36	; 0x24
 8008d54:	4618      	mov	r0, r3
 8008d56:	f000 fff5 	bl	8009d44 <xTaskRemoveFromEventList>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d013      	beq.n	8008d88 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008d60:	4b3f      	ldr	r3, [pc, #252]	; (8008e60 <xQueueGenericSend+0x1f8>)
 8008d62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d66:	601a      	str	r2, [r3, #0]
 8008d68:	f3bf 8f4f 	dsb	sy
 8008d6c:	f3bf 8f6f 	isb	sy
 8008d70:	e00a      	b.n	8008d88 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d007      	beq.n	8008d88 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008d78:	4b39      	ldr	r3, [pc, #228]	; (8008e60 <xQueueGenericSend+0x1f8>)
 8008d7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d7e:	601a      	str	r2, [r3, #0]
 8008d80:	f3bf 8f4f 	dsb	sy
 8008d84:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008d88:	f001 ff2c 	bl	800abe4 <vPortExitCritical>
				return pdPASS;
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	e063      	b.n	8008e58 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d103      	bne.n	8008d9e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008d96:	f001 ff25 	bl	800abe4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	e05c      	b.n	8008e58 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d106      	bne.n	8008db2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008da4:	f107 0314 	add.w	r3, r7, #20
 8008da8:	4618      	mov	r0, r3
 8008daa:	f001 f82f 	bl	8009e0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008dae:	2301      	movs	r3, #1
 8008db0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008db2:	f001 ff17 	bl	800abe4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008db6:	f000 fd9b 	bl	80098f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008dba:	f001 fee3 	bl	800ab84 <vPortEnterCritical>
 8008dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dc0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008dc4:	b25b      	sxtb	r3, r3
 8008dc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008dca:	d103      	bne.n	8008dd4 <xQueueGenericSend+0x16c>
 8008dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dce:	2200      	movs	r2, #0
 8008dd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dd6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008dda:	b25b      	sxtb	r3, r3
 8008ddc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008de0:	d103      	bne.n	8008dea <xQueueGenericSend+0x182>
 8008de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008de4:	2200      	movs	r2, #0
 8008de6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008dea:	f001 fefb 	bl	800abe4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008dee:	1d3a      	adds	r2, r7, #4
 8008df0:	f107 0314 	add.w	r3, r7, #20
 8008df4:	4611      	mov	r1, r2
 8008df6:	4618      	mov	r0, r3
 8008df8:	f001 f81e 	bl	8009e38 <xTaskCheckForTimeOut>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d124      	bne.n	8008e4c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008e02:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e04:	f000 faa2 	bl	800934c <prvIsQueueFull>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d018      	beq.n	8008e40 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e10:	3310      	adds	r3, #16
 8008e12:	687a      	ldr	r2, [r7, #4]
 8008e14:	4611      	mov	r1, r2
 8008e16:	4618      	mov	r0, r3
 8008e18:	f000 ff44 	bl	8009ca4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008e1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e1e:	f000 fa2d 	bl	800927c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008e22:	f000 fd73 	bl	800990c <xTaskResumeAll>
 8008e26:	4603      	mov	r3, r0
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	f47f af7c 	bne.w	8008d26 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008e2e:	4b0c      	ldr	r3, [pc, #48]	; (8008e60 <xQueueGenericSend+0x1f8>)
 8008e30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e34:	601a      	str	r2, [r3, #0]
 8008e36:	f3bf 8f4f 	dsb	sy
 8008e3a:	f3bf 8f6f 	isb	sy
 8008e3e:	e772      	b.n	8008d26 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008e40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e42:	f000 fa1b 	bl	800927c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008e46:	f000 fd61 	bl	800990c <xTaskResumeAll>
 8008e4a:	e76c      	b.n	8008d26 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008e4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e4e:	f000 fa15 	bl	800927c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008e52:	f000 fd5b 	bl	800990c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008e56:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	3738      	adds	r7, #56	; 0x38
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}
 8008e60:	e000ed04 	.word	0xe000ed04

08008e64 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b090      	sub	sp, #64	; 0x40
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	60f8      	str	r0, [r7, #12]
 8008e6c:	60b9      	str	r1, [r7, #8]
 8008e6e:	607a      	str	r2, [r7, #4]
 8008e70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d10a      	bne.n	8008e92 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e80:	f383 8811 	msr	BASEPRI, r3
 8008e84:	f3bf 8f6f 	isb	sy
 8008e88:	f3bf 8f4f 	dsb	sy
 8008e8c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008e8e:	bf00      	nop
 8008e90:	e7fe      	b.n	8008e90 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d103      	bne.n	8008ea0 <xQueueGenericSendFromISR+0x3c>
 8008e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d101      	bne.n	8008ea4 <xQueueGenericSendFromISR+0x40>
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	e000      	b.n	8008ea6 <xQueueGenericSendFromISR+0x42>
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d10a      	bne.n	8008ec0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eae:	f383 8811 	msr	BASEPRI, r3
 8008eb2:	f3bf 8f6f 	isb	sy
 8008eb6:	f3bf 8f4f 	dsb	sy
 8008eba:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008ebc:	bf00      	nop
 8008ebe:	e7fe      	b.n	8008ebe <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	2b02      	cmp	r3, #2
 8008ec4:	d103      	bne.n	8008ece <xQueueGenericSendFromISR+0x6a>
 8008ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008eca:	2b01      	cmp	r3, #1
 8008ecc:	d101      	bne.n	8008ed2 <xQueueGenericSendFromISR+0x6e>
 8008ece:	2301      	movs	r3, #1
 8008ed0:	e000      	b.n	8008ed4 <xQueueGenericSendFromISR+0x70>
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d10a      	bne.n	8008eee <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008edc:	f383 8811 	msr	BASEPRI, r3
 8008ee0:	f3bf 8f6f 	isb	sy
 8008ee4:	f3bf 8f4f 	dsb	sy
 8008ee8:	623b      	str	r3, [r7, #32]
}
 8008eea:	bf00      	nop
 8008eec:	e7fe      	b.n	8008eec <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008eee:	f001 ff2b 	bl	800ad48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008ef2:	f3ef 8211 	mrs	r2, BASEPRI
 8008ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008efa:	f383 8811 	msr	BASEPRI, r3
 8008efe:	f3bf 8f6f 	isb	sy
 8008f02:	f3bf 8f4f 	dsb	sy
 8008f06:	61fa      	str	r2, [r7, #28]
 8008f08:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008f0a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008f0c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f16:	429a      	cmp	r2, r3
 8008f18:	d302      	bcc.n	8008f20 <xQueueGenericSendFromISR+0xbc>
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	2b02      	cmp	r3, #2
 8008f1e:	d12f      	bne.n	8008f80 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008f30:	683a      	ldr	r2, [r7, #0]
 8008f32:	68b9      	ldr	r1, [r7, #8]
 8008f34:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008f36:	f000 f911 	bl	800915c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008f3a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008f3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f42:	d112      	bne.n	8008f6a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d016      	beq.n	8008f7a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f4e:	3324      	adds	r3, #36	; 0x24
 8008f50:	4618      	mov	r0, r3
 8008f52:	f000 fef7 	bl	8009d44 <xTaskRemoveFromEventList>
 8008f56:	4603      	mov	r3, r0
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d00e      	beq.n	8008f7a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d00b      	beq.n	8008f7a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2201      	movs	r2, #1
 8008f66:	601a      	str	r2, [r3, #0]
 8008f68:	e007      	b.n	8008f7a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008f6a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008f6e:	3301      	adds	r3, #1
 8008f70:	b2db      	uxtb	r3, r3
 8008f72:	b25a      	sxtb	r2, r3
 8008f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008f7e:	e001      	b.n	8008f84 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008f80:	2300      	movs	r3, #0
 8008f82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f86:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008f8e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008f90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3740      	adds	r7, #64	; 0x40
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}
	...

08008f9c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b08c      	sub	sp, #48	; 0x30
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	60f8      	str	r0, [r7, #12]
 8008fa4:	60b9      	str	r1, [r7, #8]
 8008fa6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008fa8:	2300      	movs	r3, #0
 8008faa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d10a      	bne.n	8008fcc <xQueueReceive+0x30>
	__asm volatile
 8008fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fba:	f383 8811 	msr	BASEPRI, r3
 8008fbe:	f3bf 8f6f 	isb	sy
 8008fc2:	f3bf 8f4f 	dsb	sy
 8008fc6:	623b      	str	r3, [r7, #32]
}
 8008fc8:	bf00      	nop
 8008fca:	e7fe      	b.n	8008fca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d103      	bne.n	8008fda <xQueueReceive+0x3e>
 8008fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d101      	bne.n	8008fde <xQueueReceive+0x42>
 8008fda:	2301      	movs	r3, #1
 8008fdc:	e000      	b.n	8008fe0 <xQueueReceive+0x44>
 8008fde:	2300      	movs	r3, #0
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d10a      	bne.n	8008ffa <xQueueReceive+0x5e>
	__asm volatile
 8008fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fe8:	f383 8811 	msr	BASEPRI, r3
 8008fec:	f3bf 8f6f 	isb	sy
 8008ff0:	f3bf 8f4f 	dsb	sy
 8008ff4:	61fb      	str	r3, [r7, #28]
}
 8008ff6:	bf00      	nop
 8008ff8:	e7fe      	b.n	8008ff8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008ffa:	f001 f865 	bl	800a0c8 <xTaskGetSchedulerState>
 8008ffe:	4603      	mov	r3, r0
 8009000:	2b00      	cmp	r3, #0
 8009002:	d102      	bne.n	800900a <xQueueReceive+0x6e>
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d101      	bne.n	800900e <xQueueReceive+0x72>
 800900a:	2301      	movs	r3, #1
 800900c:	e000      	b.n	8009010 <xQueueReceive+0x74>
 800900e:	2300      	movs	r3, #0
 8009010:	2b00      	cmp	r3, #0
 8009012:	d10a      	bne.n	800902a <xQueueReceive+0x8e>
	__asm volatile
 8009014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009018:	f383 8811 	msr	BASEPRI, r3
 800901c:	f3bf 8f6f 	isb	sy
 8009020:	f3bf 8f4f 	dsb	sy
 8009024:	61bb      	str	r3, [r7, #24]
}
 8009026:	bf00      	nop
 8009028:	e7fe      	b.n	8009028 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800902a:	f001 fdab 	bl	800ab84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800902e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009032:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009036:	2b00      	cmp	r3, #0
 8009038:	d01f      	beq.n	800907a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800903a:	68b9      	ldr	r1, [r7, #8]
 800903c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800903e:	f000 f8f7 	bl	8009230 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009044:	1e5a      	subs	r2, r3, #1
 8009046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009048:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800904a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800904c:	691b      	ldr	r3, [r3, #16]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d00f      	beq.n	8009072 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009054:	3310      	adds	r3, #16
 8009056:	4618      	mov	r0, r3
 8009058:	f000 fe74 	bl	8009d44 <xTaskRemoveFromEventList>
 800905c:	4603      	mov	r3, r0
 800905e:	2b00      	cmp	r3, #0
 8009060:	d007      	beq.n	8009072 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009062:	4b3d      	ldr	r3, [pc, #244]	; (8009158 <xQueueReceive+0x1bc>)
 8009064:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009068:	601a      	str	r2, [r3, #0]
 800906a:	f3bf 8f4f 	dsb	sy
 800906e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009072:	f001 fdb7 	bl	800abe4 <vPortExitCritical>
				return pdPASS;
 8009076:	2301      	movs	r3, #1
 8009078:	e069      	b.n	800914e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d103      	bne.n	8009088 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009080:	f001 fdb0 	bl	800abe4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009084:	2300      	movs	r3, #0
 8009086:	e062      	b.n	800914e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800908a:	2b00      	cmp	r3, #0
 800908c:	d106      	bne.n	800909c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800908e:	f107 0310 	add.w	r3, r7, #16
 8009092:	4618      	mov	r0, r3
 8009094:	f000 feba 	bl	8009e0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009098:	2301      	movs	r3, #1
 800909a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800909c:	f001 fda2 	bl	800abe4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80090a0:	f000 fc26 	bl	80098f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80090a4:	f001 fd6e 	bl	800ab84 <vPortEnterCritical>
 80090a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80090ae:	b25b      	sxtb	r3, r3
 80090b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80090b4:	d103      	bne.n	80090be <xQueueReceive+0x122>
 80090b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090b8:	2200      	movs	r2, #0
 80090ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80090be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80090c4:	b25b      	sxtb	r3, r3
 80090c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80090ca:	d103      	bne.n	80090d4 <xQueueReceive+0x138>
 80090cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ce:	2200      	movs	r2, #0
 80090d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80090d4:	f001 fd86 	bl	800abe4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80090d8:	1d3a      	adds	r2, r7, #4
 80090da:	f107 0310 	add.w	r3, r7, #16
 80090de:	4611      	mov	r1, r2
 80090e0:	4618      	mov	r0, r3
 80090e2:	f000 fea9 	bl	8009e38 <xTaskCheckForTimeOut>
 80090e6:	4603      	mov	r3, r0
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d123      	bne.n	8009134 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80090ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090ee:	f000 f917 	bl	8009320 <prvIsQueueEmpty>
 80090f2:	4603      	mov	r3, r0
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d017      	beq.n	8009128 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80090f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090fa:	3324      	adds	r3, #36	; 0x24
 80090fc:	687a      	ldr	r2, [r7, #4]
 80090fe:	4611      	mov	r1, r2
 8009100:	4618      	mov	r0, r3
 8009102:	f000 fdcf 	bl	8009ca4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009106:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009108:	f000 f8b8 	bl	800927c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800910c:	f000 fbfe 	bl	800990c <xTaskResumeAll>
 8009110:	4603      	mov	r3, r0
 8009112:	2b00      	cmp	r3, #0
 8009114:	d189      	bne.n	800902a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009116:	4b10      	ldr	r3, [pc, #64]	; (8009158 <xQueueReceive+0x1bc>)
 8009118:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800911c:	601a      	str	r2, [r3, #0]
 800911e:	f3bf 8f4f 	dsb	sy
 8009122:	f3bf 8f6f 	isb	sy
 8009126:	e780      	b.n	800902a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009128:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800912a:	f000 f8a7 	bl	800927c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800912e:	f000 fbed 	bl	800990c <xTaskResumeAll>
 8009132:	e77a      	b.n	800902a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009134:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009136:	f000 f8a1 	bl	800927c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800913a:	f000 fbe7 	bl	800990c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800913e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009140:	f000 f8ee 	bl	8009320 <prvIsQueueEmpty>
 8009144:	4603      	mov	r3, r0
 8009146:	2b00      	cmp	r3, #0
 8009148:	f43f af6f 	beq.w	800902a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800914c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800914e:	4618      	mov	r0, r3
 8009150:	3730      	adds	r7, #48	; 0x30
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}
 8009156:	bf00      	nop
 8009158:	e000ed04 	.word	0xe000ed04

0800915c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b086      	sub	sp, #24
 8009160:	af00      	add	r7, sp, #0
 8009162:	60f8      	str	r0, [r7, #12]
 8009164:	60b9      	str	r1, [r7, #8]
 8009166:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009168:	2300      	movs	r3, #0
 800916a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009170:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009176:	2b00      	cmp	r3, #0
 8009178:	d10d      	bne.n	8009196 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d14d      	bne.n	800921e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	689b      	ldr	r3, [r3, #8]
 8009186:	4618      	mov	r0, r3
 8009188:	f000 ffbc 	bl	800a104 <xTaskPriorityDisinherit>
 800918c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	2200      	movs	r2, #0
 8009192:	609a      	str	r2, [r3, #8]
 8009194:	e043      	b.n	800921e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d119      	bne.n	80091d0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	6858      	ldr	r0, [r3, #4]
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091a4:	461a      	mov	r2, r3
 80091a6:	68b9      	ldr	r1, [r7, #8]
 80091a8:	f002 fee8 	bl	800bf7c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	685a      	ldr	r2, [r3, #4]
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091b4:	441a      	add	r2, r3
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	685a      	ldr	r2, [r3, #4]
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	689b      	ldr	r3, [r3, #8]
 80091c2:	429a      	cmp	r2, r3
 80091c4:	d32b      	bcc.n	800921e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	681a      	ldr	r2, [r3, #0]
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	605a      	str	r2, [r3, #4]
 80091ce:	e026      	b.n	800921e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	68d8      	ldr	r0, [r3, #12]
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091d8:	461a      	mov	r2, r3
 80091da:	68b9      	ldr	r1, [r7, #8]
 80091dc:	f002 fece 	bl	800bf7c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	68da      	ldr	r2, [r3, #12]
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091e8:	425b      	negs	r3, r3
 80091ea:	441a      	add	r2, r3
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	68da      	ldr	r2, [r3, #12]
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	429a      	cmp	r2, r3
 80091fa:	d207      	bcs.n	800920c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	689a      	ldr	r2, [r3, #8]
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009204:	425b      	negs	r3, r3
 8009206:	441a      	add	r2, r3
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2b02      	cmp	r3, #2
 8009210:	d105      	bne.n	800921e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009212:	693b      	ldr	r3, [r7, #16]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d002      	beq.n	800921e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009218:	693b      	ldr	r3, [r7, #16]
 800921a:	3b01      	subs	r3, #1
 800921c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	1c5a      	adds	r2, r3, #1
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009226:	697b      	ldr	r3, [r7, #20]
}
 8009228:	4618      	mov	r0, r3
 800922a:	3718      	adds	r7, #24
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}

08009230 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b082      	sub	sp, #8
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
 8009238:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800923e:	2b00      	cmp	r3, #0
 8009240:	d018      	beq.n	8009274 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	68da      	ldr	r2, [r3, #12]
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800924a:	441a      	add	r2, r3
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	68da      	ldr	r2, [r3, #12]
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	689b      	ldr	r3, [r3, #8]
 8009258:	429a      	cmp	r2, r3
 800925a:	d303      	bcc.n	8009264 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681a      	ldr	r2, [r3, #0]
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	68d9      	ldr	r1, [r3, #12]
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800926c:	461a      	mov	r2, r3
 800926e:	6838      	ldr	r0, [r7, #0]
 8009270:	f002 fe84 	bl	800bf7c <memcpy>
	}
}
 8009274:	bf00      	nop
 8009276:	3708      	adds	r7, #8
 8009278:	46bd      	mov	sp, r7
 800927a:	bd80      	pop	{r7, pc}

0800927c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b084      	sub	sp, #16
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009284:	f001 fc7e 	bl	800ab84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800928e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009290:	e011      	b.n	80092b6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009296:	2b00      	cmp	r3, #0
 8009298:	d012      	beq.n	80092c0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	3324      	adds	r3, #36	; 0x24
 800929e:	4618      	mov	r0, r3
 80092a0:	f000 fd50 	bl	8009d44 <xTaskRemoveFromEventList>
 80092a4:	4603      	mov	r3, r0
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d001      	beq.n	80092ae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80092aa:	f000 fe27 	bl	8009efc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80092ae:	7bfb      	ldrb	r3, [r7, #15]
 80092b0:	3b01      	subs	r3, #1
 80092b2:	b2db      	uxtb	r3, r3
 80092b4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80092b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	dce9      	bgt.n	8009292 <prvUnlockQueue+0x16>
 80092be:	e000      	b.n	80092c2 <prvUnlockQueue+0x46>
					break;
 80092c0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	22ff      	movs	r2, #255	; 0xff
 80092c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80092ca:	f001 fc8b 	bl	800abe4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80092ce:	f001 fc59 	bl	800ab84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80092d8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80092da:	e011      	b.n	8009300 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	691b      	ldr	r3, [r3, #16]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d012      	beq.n	800930a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	3310      	adds	r3, #16
 80092e8:	4618      	mov	r0, r3
 80092ea:	f000 fd2b 	bl	8009d44 <xTaskRemoveFromEventList>
 80092ee:	4603      	mov	r3, r0
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d001      	beq.n	80092f8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80092f4:	f000 fe02 	bl	8009efc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80092f8:	7bbb      	ldrb	r3, [r7, #14]
 80092fa:	3b01      	subs	r3, #1
 80092fc:	b2db      	uxtb	r3, r3
 80092fe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009300:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009304:	2b00      	cmp	r3, #0
 8009306:	dce9      	bgt.n	80092dc <prvUnlockQueue+0x60>
 8009308:	e000      	b.n	800930c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800930a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	22ff      	movs	r2, #255	; 0xff
 8009310:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009314:	f001 fc66 	bl	800abe4 <vPortExitCritical>
}
 8009318:	bf00      	nop
 800931a:	3710      	adds	r7, #16
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}

08009320 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b084      	sub	sp, #16
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009328:	f001 fc2c 	bl	800ab84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009330:	2b00      	cmp	r3, #0
 8009332:	d102      	bne.n	800933a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009334:	2301      	movs	r3, #1
 8009336:	60fb      	str	r3, [r7, #12]
 8009338:	e001      	b.n	800933e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800933a:	2300      	movs	r3, #0
 800933c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800933e:	f001 fc51 	bl	800abe4 <vPortExitCritical>

	return xReturn;
 8009342:	68fb      	ldr	r3, [r7, #12]
}
 8009344:	4618      	mov	r0, r3
 8009346:	3710      	adds	r7, #16
 8009348:	46bd      	mov	sp, r7
 800934a:	bd80      	pop	{r7, pc}

0800934c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b084      	sub	sp, #16
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009354:	f001 fc16 	bl	800ab84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009360:	429a      	cmp	r2, r3
 8009362:	d102      	bne.n	800936a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009364:	2301      	movs	r3, #1
 8009366:	60fb      	str	r3, [r7, #12]
 8009368:	e001      	b.n	800936e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800936a:	2300      	movs	r3, #0
 800936c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800936e:	f001 fc39 	bl	800abe4 <vPortExitCritical>

	return xReturn;
 8009372:	68fb      	ldr	r3, [r7, #12]
}
 8009374:	4618      	mov	r0, r3
 8009376:	3710      	adds	r7, #16
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}

0800937c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800937c:	b480      	push	{r7}
 800937e:	b085      	sub	sp, #20
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
 8009384:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009386:	2300      	movs	r3, #0
 8009388:	60fb      	str	r3, [r7, #12]
 800938a:	e014      	b.n	80093b6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800938c:	4a0f      	ldr	r2, [pc, #60]	; (80093cc <vQueueAddToRegistry+0x50>)
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d10b      	bne.n	80093b0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009398:	490c      	ldr	r1, [pc, #48]	; (80093cc <vQueueAddToRegistry+0x50>)
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	683a      	ldr	r2, [r7, #0]
 800939e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80093a2:	4a0a      	ldr	r2, [pc, #40]	; (80093cc <vQueueAddToRegistry+0x50>)
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	00db      	lsls	r3, r3, #3
 80093a8:	4413      	add	r3, r2
 80093aa:	687a      	ldr	r2, [r7, #4]
 80093ac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80093ae:	e006      	b.n	80093be <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	3301      	adds	r3, #1
 80093b4:	60fb      	str	r3, [r7, #12]
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	2b07      	cmp	r3, #7
 80093ba:	d9e7      	bls.n	800938c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80093bc:	bf00      	nop
 80093be:	bf00      	nop
 80093c0:	3714      	adds	r7, #20
 80093c2:	46bd      	mov	sp, r7
 80093c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c8:	4770      	bx	lr
 80093ca:	bf00      	nop
 80093cc:	200009c8 	.word	0x200009c8

080093d0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b086      	sub	sp, #24
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	60f8      	str	r0, [r7, #12]
 80093d8:	60b9      	str	r1, [r7, #8]
 80093da:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80093e0:	f001 fbd0 	bl	800ab84 <vPortEnterCritical>
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80093ea:	b25b      	sxtb	r3, r3
 80093ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80093f0:	d103      	bne.n	80093fa <vQueueWaitForMessageRestricted+0x2a>
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	2200      	movs	r2, #0
 80093f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009400:	b25b      	sxtb	r3, r3
 8009402:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009406:	d103      	bne.n	8009410 <vQueueWaitForMessageRestricted+0x40>
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	2200      	movs	r2, #0
 800940c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009410:	f001 fbe8 	bl	800abe4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009414:	697b      	ldr	r3, [r7, #20]
 8009416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009418:	2b00      	cmp	r3, #0
 800941a:	d106      	bne.n	800942a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800941c:	697b      	ldr	r3, [r7, #20]
 800941e:	3324      	adds	r3, #36	; 0x24
 8009420:	687a      	ldr	r2, [r7, #4]
 8009422:	68b9      	ldr	r1, [r7, #8]
 8009424:	4618      	mov	r0, r3
 8009426:	f000 fc61 	bl	8009cec <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800942a:	6978      	ldr	r0, [r7, #20]
 800942c:	f7ff ff26 	bl	800927c <prvUnlockQueue>
	}
 8009430:	bf00      	nop
 8009432:	3718      	adds	r7, #24
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}

08009438 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009438:	b580      	push	{r7, lr}
 800943a:	b08e      	sub	sp, #56	; 0x38
 800943c:	af04      	add	r7, sp, #16
 800943e:	60f8      	str	r0, [r7, #12]
 8009440:	60b9      	str	r1, [r7, #8]
 8009442:	607a      	str	r2, [r7, #4]
 8009444:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009448:	2b00      	cmp	r3, #0
 800944a:	d10a      	bne.n	8009462 <xTaskCreateStatic+0x2a>
	__asm volatile
 800944c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009450:	f383 8811 	msr	BASEPRI, r3
 8009454:	f3bf 8f6f 	isb	sy
 8009458:	f3bf 8f4f 	dsb	sy
 800945c:	623b      	str	r3, [r7, #32]
}
 800945e:	bf00      	nop
 8009460:	e7fe      	b.n	8009460 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009464:	2b00      	cmp	r3, #0
 8009466:	d10a      	bne.n	800947e <xTaskCreateStatic+0x46>
	__asm volatile
 8009468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800946c:	f383 8811 	msr	BASEPRI, r3
 8009470:	f3bf 8f6f 	isb	sy
 8009474:	f3bf 8f4f 	dsb	sy
 8009478:	61fb      	str	r3, [r7, #28]
}
 800947a:	bf00      	nop
 800947c:	e7fe      	b.n	800947c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800947e:	23bc      	movs	r3, #188	; 0xbc
 8009480:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	2bbc      	cmp	r3, #188	; 0xbc
 8009486:	d00a      	beq.n	800949e <xTaskCreateStatic+0x66>
	__asm volatile
 8009488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800948c:	f383 8811 	msr	BASEPRI, r3
 8009490:	f3bf 8f6f 	isb	sy
 8009494:	f3bf 8f4f 	dsb	sy
 8009498:	61bb      	str	r3, [r7, #24]
}
 800949a:	bf00      	nop
 800949c:	e7fe      	b.n	800949c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800949e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80094a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d01e      	beq.n	80094e4 <xTaskCreateStatic+0xac>
 80094a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d01b      	beq.n	80094e4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80094ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ae:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80094b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80094b4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80094b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094b8:	2202      	movs	r2, #2
 80094ba:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80094be:	2300      	movs	r3, #0
 80094c0:	9303      	str	r3, [sp, #12]
 80094c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094c4:	9302      	str	r3, [sp, #8]
 80094c6:	f107 0314 	add.w	r3, r7, #20
 80094ca:	9301      	str	r3, [sp, #4]
 80094cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ce:	9300      	str	r3, [sp, #0]
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	687a      	ldr	r2, [r7, #4]
 80094d4:	68b9      	ldr	r1, [r7, #8]
 80094d6:	68f8      	ldr	r0, [r7, #12]
 80094d8:	f000 f850 	bl	800957c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80094dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80094de:	f000 f8f3 	bl	80096c8 <prvAddNewTaskToReadyList>
 80094e2:	e001      	b.n	80094e8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80094e4:	2300      	movs	r3, #0
 80094e6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80094e8:	697b      	ldr	r3, [r7, #20]
	}
 80094ea:	4618      	mov	r0, r3
 80094ec:	3728      	adds	r7, #40	; 0x28
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}

080094f2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80094f2:	b580      	push	{r7, lr}
 80094f4:	b08c      	sub	sp, #48	; 0x30
 80094f6:	af04      	add	r7, sp, #16
 80094f8:	60f8      	str	r0, [r7, #12]
 80094fa:	60b9      	str	r1, [r7, #8]
 80094fc:	603b      	str	r3, [r7, #0]
 80094fe:	4613      	mov	r3, r2
 8009500:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009502:	88fb      	ldrh	r3, [r7, #6]
 8009504:	009b      	lsls	r3, r3, #2
 8009506:	4618      	mov	r0, r3
 8009508:	f001 fc5e 	bl	800adc8 <pvPortMalloc>
 800950c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800950e:	697b      	ldr	r3, [r7, #20]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d00e      	beq.n	8009532 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009514:	20bc      	movs	r0, #188	; 0xbc
 8009516:	f001 fc57 	bl	800adc8 <pvPortMalloc>
 800951a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800951c:	69fb      	ldr	r3, [r7, #28]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d003      	beq.n	800952a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009522:	69fb      	ldr	r3, [r7, #28]
 8009524:	697a      	ldr	r2, [r7, #20]
 8009526:	631a      	str	r2, [r3, #48]	; 0x30
 8009528:	e005      	b.n	8009536 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800952a:	6978      	ldr	r0, [r7, #20]
 800952c:	f001 fd18 	bl	800af60 <vPortFree>
 8009530:	e001      	b.n	8009536 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009532:	2300      	movs	r3, #0
 8009534:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009536:	69fb      	ldr	r3, [r7, #28]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d017      	beq.n	800956c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800953c:	69fb      	ldr	r3, [r7, #28]
 800953e:	2200      	movs	r2, #0
 8009540:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009544:	88fa      	ldrh	r2, [r7, #6]
 8009546:	2300      	movs	r3, #0
 8009548:	9303      	str	r3, [sp, #12]
 800954a:	69fb      	ldr	r3, [r7, #28]
 800954c:	9302      	str	r3, [sp, #8]
 800954e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009550:	9301      	str	r3, [sp, #4]
 8009552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009554:	9300      	str	r3, [sp, #0]
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	68b9      	ldr	r1, [r7, #8]
 800955a:	68f8      	ldr	r0, [r7, #12]
 800955c:	f000 f80e 	bl	800957c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009560:	69f8      	ldr	r0, [r7, #28]
 8009562:	f000 f8b1 	bl	80096c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009566:	2301      	movs	r3, #1
 8009568:	61bb      	str	r3, [r7, #24]
 800956a:	e002      	b.n	8009572 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800956c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009570:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009572:	69bb      	ldr	r3, [r7, #24]
	}
 8009574:	4618      	mov	r0, r3
 8009576:	3720      	adds	r7, #32
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}

0800957c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b088      	sub	sp, #32
 8009580:	af00      	add	r7, sp, #0
 8009582:	60f8      	str	r0, [r7, #12]
 8009584:	60b9      	str	r1, [r7, #8]
 8009586:	607a      	str	r2, [r7, #4]
 8009588:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800958a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800958c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	009b      	lsls	r3, r3, #2
 8009592:	461a      	mov	r2, r3
 8009594:	21a5      	movs	r1, #165	; 0xa5
 8009596:	f002 fd19 	bl	800bfcc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800959a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800959c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80095a4:	3b01      	subs	r3, #1
 80095a6:	009b      	lsls	r3, r3, #2
 80095a8:	4413      	add	r3, r2
 80095aa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80095ac:	69bb      	ldr	r3, [r7, #24]
 80095ae:	f023 0307 	bic.w	r3, r3, #7
 80095b2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80095b4:	69bb      	ldr	r3, [r7, #24]
 80095b6:	f003 0307 	and.w	r3, r3, #7
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d00a      	beq.n	80095d4 <prvInitialiseNewTask+0x58>
	__asm volatile
 80095be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095c2:	f383 8811 	msr	BASEPRI, r3
 80095c6:	f3bf 8f6f 	isb	sy
 80095ca:	f3bf 8f4f 	dsb	sy
 80095ce:	617b      	str	r3, [r7, #20]
}
 80095d0:	bf00      	nop
 80095d2:	e7fe      	b.n	80095d2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d01f      	beq.n	800961a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80095da:	2300      	movs	r3, #0
 80095dc:	61fb      	str	r3, [r7, #28]
 80095de:	e012      	b.n	8009606 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80095e0:	68ba      	ldr	r2, [r7, #8]
 80095e2:	69fb      	ldr	r3, [r7, #28]
 80095e4:	4413      	add	r3, r2
 80095e6:	7819      	ldrb	r1, [r3, #0]
 80095e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095ea:	69fb      	ldr	r3, [r7, #28]
 80095ec:	4413      	add	r3, r2
 80095ee:	3334      	adds	r3, #52	; 0x34
 80095f0:	460a      	mov	r2, r1
 80095f2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80095f4:	68ba      	ldr	r2, [r7, #8]
 80095f6:	69fb      	ldr	r3, [r7, #28]
 80095f8:	4413      	add	r3, r2
 80095fa:	781b      	ldrb	r3, [r3, #0]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d006      	beq.n	800960e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009600:	69fb      	ldr	r3, [r7, #28]
 8009602:	3301      	adds	r3, #1
 8009604:	61fb      	str	r3, [r7, #28]
 8009606:	69fb      	ldr	r3, [r7, #28]
 8009608:	2b0f      	cmp	r3, #15
 800960a:	d9e9      	bls.n	80095e0 <prvInitialiseNewTask+0x64>
 800960c:	e000      	b.n	8009610 <prvInitialiseNewTask+0x94>
			{
				break;
 800960e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009612:	2200      	movs	r2, #0
 8009614:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009618:	e003      	b.n	8009622 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800961a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800961c:	2200      	movs	r2, #0
 800961e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009624:	2b37      	cmp	r3, #55	; 0x37
 8009626:	d901      	bls.n	800962c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009628:	2337      	movs	r3, #55	; 0x37
 800962a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800962c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800962e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009630:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009634:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009636:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800963a:	2200      	movs	r2, #0
 800963c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800963e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009640:	3304      	adds	r3, #4
 8009642:	4618      	mov	r0, r3
 8009644:	f7ff f978 	bl	8008938 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800964a:	3318      	adds	r3, #24
 800964c:	4618      	mov	r0, r3
 800964e:	f7ff f973 	bl	8008938 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009654:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009656:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800965a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800965e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009660:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009664:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009666:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800966a:	2200      	movs	r2, #0
 800966c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009672:	2200      	movs	r2, #0
 8009674:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800967a:	3354      	adds	r3, #84	; 0x54
 800967c:	2260      	movs	r2, #96	; 0x60
 800967e:	2100      	movs	r1, #0
 8009680:	4618      	mov	r0, r3
 8009682:	f002 fca3 	bl	800bfcc <memset>
 8009686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009688:	4a0c      	ldr	r2, [pc, #48]	; (80096bc <prvInitialiseNewTask+0x140>)
 800968a:	659a      	str	r2, [r3, #88]	; 0x58
 800968c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800968e:	4a0c      	ldr	r2, [pc, #48]	; (80096c0 <prvInitialiseNewTask+0x144>)
 8009690:	65da      	str	r2, [r3, #92]	; 0x5c
 8009692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009694:	4a0b      	ldr	r2, [pc, #44]	; (80096c4 <prvInitialiseNewTask+0x148>)
 8009696:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009698:	683a      	ldr	r2, [r7, #0]
 800969a:	68f9      	ldr	r1, [r7, #12]
 800969c:	69b8      	ldr	r0, [r7, #24]
 800969e:	f001 f941 	bl	800a924 <pxPortInitialiseStack>
 80096a2:	4602      	mov	r2, r0
 80096a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096a6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80096a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d002      	beq.n	80096b4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80096ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096b2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80096b4:	bf00      	nop
 80096b6:	3720      	adds	r7, #32
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}
 80096bc:	0800ccf0 	.word	0x0800ccf0
 80096c0:	0800cd10 	.word	0x0800cd10
 80096c4:	0800ccd0 	.word	0x0800ccd0

080096c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b082      	sub	sp, #8
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80096d0:	f001 fa58 	bl	800ab84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80096d4:	4b2d      	ldr	r3, [pc, #180]	; (800978c <prvAddNewTaskToReadyList+0xc4>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	3301      	adds	r3, #1
 80096da:	4a2c      	ldr	r2, [pc, #176]	; (800978c <prvAddNewTaskToReadyList+0xc4>)
 80096dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80096de:	4b2c      	ldr	r3, [pc, #176]	; (8009790 <prvAddNewTaskToReadyList+0xc8>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d109      	bne.n	80096fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80096e6:	4a2a      	ldr	r2, [pc, #168]	; (8009790 <prvAddNewTaskToReadyList+0xc8>)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80096ec:	4b27      	ldr	r3, [pc, #156]	; (800978c <prvAddNewTaskToReadyList+0xc4>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	2b01      	cmp	r3, #1
 80096f2:	d110      	bne.n	8009716 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80096f4:	f000 fc26 	bl	8009f44 <prvInitialiseTaskLists>
 80096f8:	e00d      	b.n	8009716 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80096fa:	4b26      	ldr	r3, [pc, #152]	; (8009794 <prvAddNewTaskToReadyList+0xcc>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d109      	bne.n	8009716 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009702:	4b23      	ldr	r3, [pc, #140]	; (8009790 <prvAddNewTaskToReadyList+0xc8>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800970c:	429a      	cmp	r2, r3
 800970e:	d802      	bhi.n	8009716 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009710:	4a1f      	ldr	r2, [pc, #124]	; (8009790 <prvAddNewTaskToReadyList+0xc8>)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009716:	4b20      	ldr	r3, [pc, #128]	; (8009798 <prvAddNewTaskToReadyList+0xd0>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	3301      	adds	r3, #1
 800971c:	4a1e      	ldr	r2, [pc, #120]	; (8009798 <prvAddNewTaskToReadyList+0xd0>)
 800971e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009720:	4b1d      	ldr	r3, [pc, #116]	; (8009798 <prvAddNewTaskToReadyList+0xd0>)
 8009722:	681a      	ldr	r2, [r3, #0]
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800972c:	4b1b      	ldr	r3, [pc, #108]	; (800979c <prvAddNewTaskToReadyList+0xd4>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	429a      	cmp	r2, r3
 8009732:	d903      	bls.n	800973c <prvAddNewTaskToReadyList+0x74>
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009738:	4a18      	ldr	r2, [pc, #96]	; (800979c <prvAddNewTaskToReadyList+0xd4>)
 800973a:	6013      	str	r3, [r2, #0]
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009740:	4613      	mov	r3, r2
 8009742:	009b      	lsls	r3, r3, #2
 8009744:	4413      	add	r3, r2
 8009746:	009b      	lsls	r3, r3, #2
 8009748:	4a15      	ldr	r2, [pc, #84]	; (80097a0 <prvAddNewTaskToReadyList+0xd8>)
 800974a:	441a      	add	r2, r3
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	3304      	adds	r3, #4
 8009750:	4619      	mov	r1, r3
 8009752:	4610      	mov	r0, r2
 8009754:	f7ff f8fd 	bl	8008952 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009758:	f001 fa44 	bl	800abe4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800975c:	4b0d      	ldr	r3, [pc, #52]	; (8009794 <prvAddNewTaskToReadyList+0xcc>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d00e      	beq.n	8009782 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009764:	4b0a      	ldr	r3, [pc, #40]	; (8009790 <prvAddNewTaskToReadyList+0xc8>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800976e:	429a      	cmp	r2, r3
 8009770:	d207      	bcs.n	8009782 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009772:	4b0c      	ldr	r3, [pc, #48]	; (80097a4 <prvAddNewTaskToReadyList+0xdc>)
 8009774:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009778:	601a      	str	r2, [r3, #0]
 800977a:	f3bf 8f4f 	dsb	sy
 800977e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009782:	bf00      	nop
 8009784:	3708      	adds	r7, #8
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}
 800978a:	bf00      	nop
 800978c:	20000edc 	.word	0x20000edc
 8009790:	20000a08 	.word	0x20000a08
 8009794:	20000ee8 	.word	0x20000ee8
 8009798:	20000ef8 	.word	0x20000ef8
 800979c:	20000ee4 	.word	0x20000ee4
 80097a0:	20000a0c 	.word	0x20000a0c
 80097a4:	e000ed04 	.word	0xe000ed04

080097a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b084      	sub	sp, #16
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80097b0:	2300      	movs	r3, #0
 80097b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d017      	beq.n	80097ea <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80097ba:	4b13      	ldr	r3, [pc, #76]	; (8009808 <vTaskDelay+0x60>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d00a      	beq.n	80097d8 <vTaskDelay+0x30>
	__asm volatile
 80097c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097c6:	f383 8811 	msr	BASEPRI, r3
 80097ca:	f3bf 8f6f 	isb	sy
 80097ce:	f3bf 8f4f 	dsb	sy
 80097d2:	60bb      	str	r3, [r7, #8]
}
 80097d4:	bf00      	nop
 80097d6:	e7fe      	b.n	80097d6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80097d8:	f000 f88a 	bl	80098f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80097dc:	2100      	movs	r1, #0
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f000 fcfe 	bl	800a1e0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80097e4:	f000 f892 	bl	800990c <xTaskResumeAll>
 80097e8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d107      	bne.n	8009800 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80097f0:	4b06      	ldr	r3, [pc, #24]	; (800980c <vTaskDelay+0x64>)
 80097f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097f6:	601a      	str	r2, [r3, #0]
 80097f8:	f3bf 8f4f 	dsb	sy
 80097fc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009800:	bf00      	nop
 8009802:	3710      	adds	r7, #16
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}
 8009808:	20000f04 	.word	0x20000f04
 800980c:	e000ed04 	.word	0xe000ed04

08009810 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b08a      	sub	sp, #40	; 0x28
 8009814:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009816:	2300      	movs	r3, #0
 8009818:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800981a:	2300      	movs	r3, #0
 800981c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800981e:	463a      	mov	r2, r7
 8009820:	1d39      	adds	r1, r7, #4
 8009822:	f107 0308 	add.w	r3, r7, #8
 8009826:	4618      	mov	r0, r3
 8009828:	f7ff f832 	bl	8008890 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800982c:	6839      	ldr	r1, [r7, #0]
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	68ba      	ldr	r2, [r7, #8]
 8009832:	9202      	str	r2, [sp, #8]
 8009834:	9301      	str	r3, [sp, #4]
 8009836:	2300      	movs	r3, #0
 8009838:	9300      	str	r3, [sp, #0]
 800983a:	2300      	movs	r3, #0
 800983c:	460a      	mov	r2, r1
 800983e:	4924      	ldr	r1, [pc, #144]	; (80098d0 <vTaskStartScheduler+0xc0>)
 8009840:	4824      	ldr	r0, [pc, #144]	; (80098d4 <vTaskStartScheduler+0xc4>)
 8009842:	f7ff fdf9 	bl	8009438 <xTaskCreateStatic>
 8009846:	4603      	mov	r3, r0
 8009848:	4a23      	ldr	r2, [pc, #140]	; (80098d8 <vTaskStartScheduler+0xc8>)
 800984a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800984c:	4b22      	ldr	r3, [pc, #136]	; (80098d8 <vTaskStartScheduler+0xc8>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d002      	beq.n	800985a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009854:	2301      	movs	r3, #1
 8009856:	617b      	str	r3, [r7, #20]
 8009858:	e001      	b.n	800985e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800985a:	2300      	movs	r3, #0
 800985c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	2b01      	cmp	r3, #1
 8009862:	d102      	bne.n	800986a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009864:	f000 fd10 	bl	800a288 <xTimerCreateTimerTask>
 8009868:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	2b01      	cmp	r3, #1
 800986e:	d11b      	bne.n	80098a8 <vTaskStartScheduler+0x98>
	__asm volatile
 8009870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009874:	f383 8811 	msr	BASEPRI, r3
 8009878:	f3bf 8f6f 	isb	sy
 800987c:	f3bf 8f4f 	dsb	sy
 8009880:	613b      	str	r3, [r7, #16]
}
 8009882:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009884:	4b15      	ldr	r3, [pc, #84]	; (80098dc <vTaskStartScheduler+0xcc>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	3354      	adds	r3, #84	; 0x54
 800988a:	4a15      	ldr	r2, [pc, #84]	; (80098e0 <vTaskStartScheduler+0xd0>)
 800988c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800988e:	4b15      	ldr	r3, [pc, #84]	; (80098e4 <vTaskStartScheduler+0xd4>)
 8009890:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009894:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009896:	4b14      	ldr	r3, [pc, #80]	; (80098e8 <vTaskStartScheduler+0xd8>)
 8009898:	2201      	movs	r2, #1
 800989a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800989c:	4b13      	ldr	r3, [pc, #76]	; (80098ec <vTaskStartScheduler+0xdc>)
 800989e:	2200      	movs	r2, #0
 80098a0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80098a2:	f001 f8cd 	bl	800aa40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80098a6:	e00e      	b.n	80098c6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80098a8:	697b      	ldr	r3, [r7, #20]
 80098aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80098ae:	d10a      	bne.n	80098c6 <vTaskStartScheduler+0xb6>
	__asm volatile
 80098b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098b4:	f383 8811 	msr	BASEPRI, r3
 80098b8:	f3bf 8f6f 	isb	sy
 80098bc:	f3bf 8f4f 	dsb	sy
 80098c0:	60fb      	str	r3, [r7, #12]
}
 80098c2:	bf00      	nop
 80098c4:	e7fe      	b.n	80098c4 <vTaskStartScheduler+0xb4>
}
 80098c6:	bf00      	nop
 80098c8:	3718      	adds	r7, #24
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}
 80098ce:	bf00      	nop
 80098d0:	0800caa0 	.word	0x0800caa0
 80098d4:	08009f15 	.word	0x08009f15
 80098d8:	20000f00 	.word	0x20000f00
 80098dc:	20000a08 	.word	0x20000a08
 80098e0:	20000100 	.word	0x20000100
 80098e4:	20000efc 	.word	0x20000efc
 80098e8:	20000ee8 	.word	0x20000ee8
 80098ec:	20000ee0 	.word	0x20000ee0

080098f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80098f0:	b480      	push	{r7}
 80098f2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80098f4:	4b04      	ldr	r3, [pc, #16]	; (8009908 <vTaskSuspendAll+0x18>)
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	3301      	adds	r3, #1
 80098fa:	4a03      	ldr	r2, [pc, #12]	; (8009908 <vTaskSuspendAll+0x18>)
 80098fc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80098fe:	bf00      	nop
 8009900:	46bd      	mov	sp, r7
 8009902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009906:	4770      	bx	lr
 8009908:	20000f04 	.word	0x20000f04

0800990c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b084      	sub	sp, #16
 8009910:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009912:	2300      	movs	r3, #0
 8009914:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009916:	2300      	movs	r3, #0
 8009918:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800991a:	4b42      	ldr	r3, [pc, #264]	; (8009a24 <xTaskResumeAll+0x118>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d10a      	bne.n	8009938 <xTaskResumeAll+0x2c>
	__asm volatile
 8009922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009926:	f383 8811 	msr	BASEPRI, r3
 800992a:	f3bf 8f6f 	isb	sy
 800992e:	f3bf 8f4f 	dsb	sy
 8009932:	603b      	str	r3, [r7, #0]
}
 8009934:	bf00      	nop
 8009936:	e7fe      	b.n	8009936 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009938:	f001 f924 	bl	800ab84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800993c:	4b39      	ldr	r3, [pc, #228]	; (8009a24 <xTaskResumeAll+0x118>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	3b01      	subs	r3, #1
 8009942:	4a38      	ldr	r2, [pc, #224]	; (8009a24 <xTaskResumeAll+0x118>)
 8009944:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009946:	4b37      	ldr	r3, [pc, #220]	; (8009a24 <xTaskResumeAll+0x118>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d162      	bne.n	8009a14 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800994e:	4b36      	ldr	r3, [pc, #216]	; (8009a28 <xTaskResumeAll+0x11c>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d05e      	beq.n	8009a14 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009956:	e02f      	b.n	80099b8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009958:	4b34      	ldr	r3, [pc, #208]	; (8009a2c <xTaskResumeAll+0x120>)
 800995a:	68db      	ldr	r3, [r3, #12]
 800995c:	68db      	ldr	r3, [r3, #12]
 800995e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	3318      	adds	r3, #24
 8009964:	4618      	mov	r0, r3
 8009966:	f7ff f851 	bl	8008a0c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	3304      	adds	r3, #4
 800996e:	4618      	mov	r0, r3
 8009970:	f7ff f84c 	bl	8008a0c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009978:	4b2d      	ldr	r3, [pc, #180]	; (8009a30 <xTaskResumeAll+0x124>)
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	429a      	cmp	r2, r3
 800997e:	d903      	bls.n	8009988 <xTaskResumeAll+0x7c>
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009984:	4a2a      	ldr	r2, [pc, #168]	; (8009a30 <xTaskResumeAll+0x124>)
 8009986:	6013      	str	r3, [r2, #0]
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800998c:	4613      	mov	r3, r2
 800998e:	009b      	lsls	r3, r3, #2
 8009990:	4413      	add	r3, r2
 8009992:	009b      	lsls	r3, r3, #2
 8009994:	4a27      	ldr	r2, [pc, #156]	; (8009a34 <xTaskResumeAll+0x128>)
 8009996:	441a      	add	r2, r3
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	3304      	adds	r3, #4
 800999c:	4619      	mov	r1, r3
 800999e:	4610      	mov	r0, r2
 80099a0:	f7fe ffd7 	bl	8008952 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099a8:	4b23      	ldr	r3, [pc, #140]	; (8009a38 <xTaskResumeAll+0x12c>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099ae:	429a      	cmp	r2, r3
 80099b0:	d302      	bcc.n	80099b8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80099b2:	4b22      	ldr	r3, [pc, #136]	; (8009a3c <xTaskResumeAll+0x130>)
 80099b4:	2201      	movs	r2, #1
 80099b6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80099b8:	4b1c      	ldr	r3, [pc, #112]	; (8009a2c <xTaskResumeAll+0x120>)
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d1cb      	bne.n	8009958 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d001      	beq.n	80099ca <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80099c6:	f000 fb5f 	bl	800a088 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80099ca:	4b1d      	ldr	r3, [pc, #116]	; (8009a40 <xTaskResumeAll+0x134>)
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d010      	beq.n	80099f8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80099d6:	f000 f847 	bl	8009a68 <xTaskIncrementTick>
 80099da:	4603      	mov	r3, r0
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d002      	beq.n	80099e6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80099e0:	4b16      	ldr	r3, [pc, #88]	; (8009a3c <xTaskResumeAll+0x130>)
 80099e2:	2201      	movs	r2, #1
 80099e4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	3b01      	subs	r3, #1
 80099ea:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d1f1      	bne.n	80099d6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80099f2:	4b13      	ldr	r3, [pc, #76]	; (8009a40 <xTaskResumeAll+0x134>)
 80099f4:	2200      	movs	r2, #0
 80099f6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80099f8:	4b10      	ldr	r3, [pc, #64]	; (8009a3c <xTaskResumeAll+0x130>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d009      	beq.n	8009a14 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009a00:	2301      	movs	r3, #1
 8009a02:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009a04:	4b0f      	ldr	r3, [pc, #60]	; (8009a44 <xTaskResumeAll+0x138>)
 8009a06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a0a:	601a      	str	r2, [r3, #0]
 8009a0c:	f3bf 8f4f 	dsb	sy
 8009a10:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009a14:	f001 f8e6 	bl	800abe4 <vPortExitCritical>

	return xAlreadyYielded;
 8009a18:	68bb      	ldr	r3, [r7, #8]
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	3710      	adds	r7, #16
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}
 8009a22:	bf00      	nop
 8009a24:	20000f04 	.word	0x20000f04
 8009a28:	20000edc 	.word	0x20000edc
 8009a2c:	20000e9c 	.word	0x20000e9c
 8009a30:	20000ee4 	.word	0x20000ee4
 8009a34:	20000a0c 	.word	0x20000a0c
 8009a38:	20000a08 	.word	0x20000a08
 8009a3c:	20000ef0 	.word	0x20000ef0
 8009a40:	20000eec 	.word	0x20000eec
 8009a44:	e000ed04 	.word	0xe000ed04

08009a48 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b083      	sub	sp, #12
 8009a4c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009a4e:	4b05      	ldr	r3, [pc, #20]	; (8009a64 <xTaskGetTickCount+0x1c>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009a54:	687b      	ldr	r3, [r7, #4]
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	370c      	adds	r7, #12
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a60:	4770      	bx	lr
 8009a62:	bf00      	nop
 8009a64:	20000ee0 	.word	0x20000ee0

08009a68 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b086      	sub	sp, #24
 8009a6c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a72:	4b4f      	ldr	r3, [pc, #316]	; (8009bb0 <xTaskIncrementTick+0x148>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	f040 808f 	bne.w	8009b9a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009a7c:	4b4d      	ldr	r3, [pc, #308]	; (8009bb4 <xTaskIncrementTick+0x14c>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	3301      	adds	r3, #1
 8009a82:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009a84:	4a4b      	ldr	r2, [pc, #300]	; (8009bb4 <xTaskIncrementTick+0x14c>)
 8009a86:	693b      	ldr	r3, [r7, #16]
 8009a88:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009a8a:	693b      	ldr	r3, [r7, #16]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d120      	bne.n	8009ad2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009a90:	4b49      	ldr	r3, [pc, #292]	; (8009bb8 <xTaskIncrementTick+0x150>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d00a      	beq.n	8009ab0 <xTaskIncrementTick+0x48>
	__asm volatile
 8009a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a9e:	f383 8811 	msr	BASEPRI, r3
 8009aa2:	f3bf 8f6f 	isb	sy
 8009aa6:	f3bf 8f4f 	dsb	sy
 8009aaa:	603b      	str	r3, [r7, #0]
}
 8009aac:	bf00      	nop
 8009aae:	e7fe      	b.n	8009aae <xTaskIncrementTick+0x46>
 8009ab0:	4b41      	ldr	r3, [pc, #260]	; (8009bb8 <xTaskIncrementTick+0x150>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	60fb      	str	r3, [r7, #12]
 8009ab6:	4b41      	ldr	r3, [pc, #260]	; (8009bbc <xTaskIncrementTick+0x154>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	4a3f      	ldr	r2, [pc, #252]	; (8009bb8 <xTaskIncrementTick+0x150>)
 8009abc:	6013      	str	r3, [r2, #0]
 8009abe:	4a3f      	ldr	r2, [pc, #252]	; (8009bbc <xTaskIncrementTick+0x154>)
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	6013      	str	r3, [r2, #0]
 8009ac4:	4b3e      	ldr	r3, [pc, #248]	; (8009bc0 <xTaskIncrementTick+0x158>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	3301      	adds	r3, #1
 8009aca:	4a3d      	ldr	r2, [pc, #244]	; (8009bc0 <xTaskIncrementTick+0x158>)
 8009acc:	6013      	str	r3, [r2, #0]
 8009ace:	f000 fadb 	bl	800a088 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009ad2:	4b3c      	ldr	r3, [pc, #240]	; (8009bc4 <xTaskIncrementTick+0x15c>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	693a      	ldr	r2, [r7, #16]
 8009ad8:	429a      	cmp	r2, r3
 8009ada:	d349      	bcc.n	8009b70 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009adc:	4b36      	ldr	r3, [pc, #216]	; (8009bb8 <xTaskIncrementTick+0x150>)
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d104      	bne.n	8009af0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ae6:	4b37      	ldr	r3, [pc, #220]	; (8009bc4 <xTaskIncrementTick+0x15c>)
 8009ae8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009aec:	601a      	str	r2, [r3, #0]
					break;
 8009aee:	e03f      	b.n	8009b70 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009af0:	4b31      	ldr	r3, [pc, #196]	; (8009bb8 <xTaskIncrementTick+0x150>)
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	68db      	ldr	r3, [r3, #12]
 8009af6:	68db      	ldr	r3, [r3, #12]
 8009af8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	685b      	ldr	r3, [r3, #4]
 8009afe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009b00:	693a      	ldr	r2, [r7, #16]
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	429a      	cmp	r2, r3
 8009b06:	d203      	bcs.n	8009b10 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009b08:	4a2e      	ldr	r2, [pc, #184]	; (8009bc4 <xTaskIncrementTick+0x15c>)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009b0e:	e02f      	b.n	8009b70 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	3304      	adds	r3, #4
 8009b14:	4618      	mov	r0, r3
 8009b16:	f7fe ff79 	bl	8008a0c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009b1a:	68bb      	ldr	r3, [r7, #8]
 8009b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d004      	beq.n	8009b2c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	3318      	adds	r3, #24
 8009b26:	4618      	mov	r0, r3
 8009b28:	f7fe ff70 	bl	8008a0c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b30:	4b25      	ldr	r3, [pc, #148]	; (8009bc8 <xTaskIncrementTick+0x160>)
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	429a      	cmp	r2, r3
 8009b36:	d903      	bls.n	8009b40 <xTaskIncrementTick+0xd8>
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b3c:	4a22      	ldr	r2, [pc, #136]	; (8009bc8 <xTaskIncrementTick+0x160>)
 8009b3e:	6013      	str	r3, [r2, #0]
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b44:	4613      	mov	r3, r2
 8009b46:	009b      	lsls	r3, r3, #2
 8009b48:	4413      	add	r3, r2
 8009b4a:	009b      	lsls	r3, r3, #2
 8009b4c:	4a1f      	ldr	r2, [pc, #124]	; (8009bcc <xTaskIncrementTick+0x164>)
 8009b4e:	441a      	add	r2, r3
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	3304      	adds	r3, #4
 8009b54:	4619      	mov	r1, r3
 8009b56:	4610      	mov	r0, r2
 8009b58:	f7fe fefb 	bl	8008952 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b60:	4b1b      	ldr	r3, [pc, #108]	; (8009bd0 <xTaskIncrementTick+0x168>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b66:	429a      	cmp	r2, r3
 8009b68:	d3b8      	bcc.n	8009adc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009b6e:	e7b5      	b.n	8009adc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009b70:	4b17      	ldr	r3, [pc, #92]	; (8009bd0 <xTaskIncrementTick+0x168>)
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b76:	4915      	ldr	r1, [pc, #84]	; (8009bcc <xTaskIncrementTick+0x164>)
 8009b78:	4613      	mov	r3, r2
 8009b7a:	009b      	lsls	r3, r3, #2
 8009b7c:	4413      	add	r3, r2
 8009b7e:	009b      	lsls	r3, r3, #2
 8009b80:	440b      	add	r3, r1
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	2b01      	cmp	r3, #1
 8009b86:	d901      	bls.n	8009b8c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009b88:	2301      	movs	r3, #1
 8009b8a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009b8c:	4b11      	ldr	r3, [pc, #68]	; (8009bd4 <xTaskIncrementTick+0x16c>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d007      	beq.n	8009ba4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009b94:	2301      	movs	r3, #1
 8009b96:	617b      	str	r3, [r7, #20]
 8009b98:	e004      	b.n	8009ba4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009b9a:	4b0f      	ldr	r3, [pc, #60]	; (8009bd8 <xTaskIncrementTick+0x170>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	3301      	adds	r3, #1
 8009ba0:	4a0d      	ldr	r2, [pc, #52]	; (8009bd8 <xTaskIncrementTick+0x170>)
 8009ba2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009ba4:	697b      	ldr	r3, [r7, #20]
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	3718      	adds	r7, #24
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}
 8009bae:	bf00      	nop
 8009bb0:	20000f04 	.word	0x20000f04
 8009bb4:	20000ee0 	.word	0x20000ee0
 8009bb8:	20000e94 	.word	0x20000e94
 8009bbc:	20000e98 	.word	0x20000e98
 8009bc0:	20000ef4 	.word	0x20000ef4
 8009bc4:	20000efc 	.word	0x20000efc
 8009bc8:	20000ee4 	.word	0x20000ee4
 8009bcc:	20000a0c 	.word	0x20000a0c
 8009bd0:	20000a08 	.word	0x20000a08
 8009bd4:	20000ef0 	.word	0x20000ef0
 8009bd8:	20000eec 	.word	0x20000eec

08009bdc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009bdc:	b480      	push	{r7}
 8009bde:	b085      	sub	sp, #20
 8009be0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009be2:	4b2a      	ldr	r3, [pc, #168]	; (8009c8c <vTaskSwitchContext+0xb0>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d003      	beq.n	8009bf2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009bea:	4b29      	ldr	r3, [pc, #164]	; (8009c90 <vTaskSwitchContext+0xb4>)
 8009bec:	2201      	movs	r2, #1
 8009bee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009bf0:	e046      	b.n	8009c80 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8009bf2:	4b27      	ldr	r3, [pc, #156]	; (8009c90 <vTaskSwitchContext+0xb4>)
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bf8:	4b26      	ldr	r3, [pc, #152]	; (8009c94 <vTaskSwitchContext+0xb8>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	60fb      	str	r3, [r7, #12]
 8009bfe:	e010      	b.n	8009c22 <vTaskSwitchContext+0x46>
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d10a      	bne.n	8009c1c <vTaskSwitchContext+0x40>
	__asm volatile
 8009c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c0a:	f383 8811 	msr	BASEPRI, r3
 8009c0e:	f3bf 8f6f 	isb	sy
 8009c12:	f3bf 8f4f 	dsb	sy
 8009c16:	607b      	str	r3, [r7, #4]
}
 8009c18:	bf00      	nop
 8009c1a:	e7fe      	b.n	8009c1a <vTaskSwitchContext+0x3e>
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	3b01      	subs	r3, #1
 8009c20:	60fb      	str	r3, [r7, #12]
 8009c22:	491d      	ldr	r1, [pc, #116]	; (8009c98 <vTaskSwitchContext+0xbc>)
 8009c24:	68fa      	ldr	r2, [r7, #12]
 8009c26:	4613      	mov	r3, r2
 8009c28:	009b      	lsls	r3, r3, #2
 8009c2a:	4413      	add	r3, r2
 8009c2c:	009b      	lsls	r3, r3, #2
 8009c2e:	440b      	add	r3, r1
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d0e4      	beq.n	8009c00 <vTaskSwitchContext+0x24>
 8009c36:	68fa      	ldr	r2, [r7, #12]
 8009c38:	4613      	mov	r3, r2
 8009c3a:	009b      	lsls	r3, r3, #2
 8009c3c:	4413      	add	r3, r2
 8009c3e:	009b      	lsls	r3, r3, #2
 8009c40:	4a15      	ldr	r2, [pc, #84]	; (8009c98 <vTaskSwitchContext+0xbc>)
 8009c42:	4413      	add	r3, r2
 8009c44:	60bb      	str	r3, [r7, #8]
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	685b      	ldr	r3, [r3, #4]
 8009c4a:	685a      	ldr	r2, [r3, #4]
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	605a      	str	r2, [r3, #4]
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	685a      	ldr	r2, [r3, #4]
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	3308      	adds	r3, #8
 8009c58:	429a      	cmp	r2, r3
 8009c5a:	d104      	bne.n	8009c66 <vTaskSwitchContext+0x8a>
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	685b      	ldr	r3, [r3, #4]
 8009c60:	685a      	ldr	r2, [r3, #4]
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	605a      	str	r2, [r3, #4]
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	685b      	ldr	r3, [r3, #4]
 8009c6a:	68db      	ldr	r3, [r3, #12]
 8009c6c:	4a0b      	ldr	r2, [pc, #44]	; (8009c9c <vTaskSwitchContext+0xc0>)
 8009c6e:	6013      	str	r3, [r2, #0]
 8009c70:	4a08      	ldr	r2, [pc, #32]	; (8009c94 <vTaskSwitchContext+0xb8>)
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009c76:	4b09      	ldr	r3, [pc, #36]	; (8009c9c <vTaskSwitchContext+0xc0>)
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	3354      	adds	r3, #84	; 0x54
 8009c7c:	4a08      	ldr	r2, [pc, #32]	; (8009ca0 <vTaskSwitchContext+0xc4>)
 8009c7e:	6013      	str	r3, [r2, #0]
}
 8009c80:	bf00      	nop
 8009c82:	3714      	adds	r7, #20
 8009c84:	46bd      	mov	sp, r7
 8009c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8a:	4770      	bx	lr
 8009c8c:	20000f04 	.word	0x20000f04
 8009c90:	20000ef0 	.word	0x20000ef0
 8009c94:	20000ee4 	.word	0x20000ee4
 8009c98:	20000a0c 	.word	0x20000a0c
 8009c9c:	20000a08 	.word	0x20000a08
 8009ca0:	20000100 	.word	0x20000100

08009ca4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b084      	sub	sp, #16
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
 8009cac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d10a      	bne.n	8009cca <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cb8:	f383 8811 	msr	BASEPRI, r3
 8009cbc:	f3bf 8f6f 	isb	sy
 8009cc0:	f3bf 8f4f 	dsb	sy
 8009cc4:	60fb      	str	r3, [r7, #12]
}
 8009cc6:	bf00      	nop
 8009cc8:	e7fe      	b.n	8009cc8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009cca:	4b07      	ldr	r3, [pc, #28]	; (8009ce8 <vTaskPlaceOnEventList+0x44>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	3318      	adds	r3, #24
 8009cd0:	4619      	mov	r1, r3
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f7fe fe61 	bl	800899a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009cd8:	2101      	movs	r1, #1
 8009cda:	6838      	ldr	r0, [r7, #0]
 8009cdc:	f000 fa80 	bl	800a1e0 <prvAddCurrentTaskToDelayedList>
}
 8009ce0:	bf00      	nop
 8009ce2:	3710      	adds	r7, #16
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bd80      	pop	{r7, pc}
 8009ce8:	20000a08 	.word	0x20000a08

08009cec <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b086      	sub	sp, #24
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	60f8      	str	r0, [r7, #12]
 8009cf4:	60b9      	str	r1, [r7, #8]
 8009cf6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d10a      	bne.n	8009d14 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d02:	f383 8811 	msr	BASEPRI, r3
 8009d06:	f3bf 8f6f 	isb	sy
 8009d0a:	f3bf 8f4f 	dsb	sy
 8009d0e:	617b      	str	r3, [r7, #20]
}
 8009d10:	bf00      	nop
 8009d12:	e7fe      	b.n	8009d12 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009d14:	4b0a      	ldr	r3, [pc, #40]	; (8009d40 <vTaskPlaceOnEventListRestricted+0x54>)
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	3318      	adds	r3, #24
 8009d1a:	4619      	mov	r1, r3
 8009d1c:	68f8      	ldr	r0, [r7, #12]
 8009d1e:	f7fe fe18 	bl	8008952 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d002      	beq.n	8009d2e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009d28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009d2c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009d2e:	6879      	ldr	r1, [r7, #4]
 8009d30:	68b8      	ldr	r0, [r7, #8]
 8009d32:	f000 fa55 	bl	800a1e0 <prvAddCurrentTaskToDelayedList>
	}
 8009d36:	bf00      	nop
 8009d38:	3718      	adds	r7, #24
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}
 8009d3e:	bf00      	nop
 8009d40:	20000a08 	.word	0x20000a08

08009d44 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b086      	sub	sp, #24
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	68db      	ldr	r3, [r3, #12]
 8009d50:	68db      	ldr	r3, [r3, #12]
 8009d52:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009d54:	693b      	ldr	r3, [r7, #16]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d10a      	bne.n	8009d70 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d5e:	f383 8811 	msr	BASEPRI, r3
 8009d62:	f3bf 8f6f 	isb	sy
 8009d66:	f3bf 8f4f 	dsb	sy
 8009d6a:	60fb      	str	r3, [r7, #12]
}
 8009d6c:	bf00      	nop
 8009d6e:	e7fe      	b.n	8009d6e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009d70:	693b      	ldr	r3, [r7, #16]
 8009d72:	3318      	adds	r3, #24
 8009d74:	4618      	mov	r0, r3
 8009d76:	f7fe fe49 	bl	8008a0c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d7a:	4b1e      	ldr	r3, [pc, #120]	; (8009df4 <xTaskRemoveFromEventList+0xb0>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d11d      	bne.n	8009dbe <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009d82:	693b      	ldr	r3, [r7, #16]
 8009d84:	3304      	adds	r3, #4
 8009d86:	4618      	mov	r0, r3
 8009d88:	f7fe fe40 	bl	8008a0c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009d8c:	693b      	ldr	r3, [r7, #16]
 8009d8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d90:	4b19      	ldr	r3, [pc, #100]	; (8009df8 <xTaskRemoveFromEventList+0xb4>)
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	429a      	cmp	r2, r3
 8009d96:	d903      	bls.n	8009da0 <xTaskRemoveFromEventList+0x5c>
 8009d98:	693b      	ldr	r3, [r7, #16]
 8009d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d9c:	4a16      	ldr	r2, [pc, #88]	; (8009df8 <xTaskRemoveFromEventList+0xb4>)
 8009d9e:	6013      	str	r3, [r2, #0]
 8009da0:	693b      	ldr	r3, [r7, #16]
 8009da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009da4:	4613      	mov	r3, r2
 8009da6:	009b      	lsls	r3, r3, #2
 8009da8:	4413      	add	r3, r2
 8009daa:	009b      	lsls	r3, r3, #2
 8009dac:	4a13      	ldr	r2, [pc, #76]	; (8009dfc <xTaskRemoveFromEventList+0xb8>)
 8009dae:	441a      	add	r2, r3
 8009db0:	693b      	ldr	r3, [r7, #16]
 8009db2:	3304      	adds	r3, #4
 8009db4:	4619      	mov	r1, r3
 8009db6:	4610      	mov	r0, r2
 8009db8:	f7fe fdcb 	bl	8008952 <vListInsertEnd>
 8009dbc:	e005      	b.n	8009dca <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009dbe:	693b      	ldr	r3, [r7, #16]
 8009dc0:	3318      	adds	r3, #24
 8009dc2:	4619      	mov	r1, r3
 8009dc4:	480e      	ldr	r0, [pc, #56]	; (8009e00 <xTaskRemoveFromEventList+0xbc>)
 8009dc6:	f7fe fdc4 	bl	8008952 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009dca:	693b      	ldr	r3, [r7, #16]
 8009dcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dce:	4b0d      	ldr	r3, [pc, #52]	; (8009e04 <xTaskRemoveFromEventList+0xc0>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dd4:	429a      	cmp	r2, r3
 8009dd6:	d905      	bls.n	8009de4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009dd8:	2301      	movs	r3, #1
 8009dda:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009ddc:	4b0a      	ldr	r3, [pc, #40]	; (8009e08 <xTaskRemoveFromEventList+0xc4>)
 8009dde:	2201      	movs	r2, #1
 8009de0:	601a      	str	r2, [r3, #0]
 8009de2:	e001      	b.n	8009de8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009de4:	2300      	movs	r3, #0
 8009de6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009de8:	697b      	ldr	r3, [r7, #20]
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	3718      	adds	r7, #24
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}
 8009df2:	bf00      	nop
 8009df4:	20000f04 	.word	0x20000f04
 8009df8:	20000ee4 	.word	0x20000ee4
 8009dfc:	20000a0c 	.word	0x20000a0c
 8009e00:	20000e9c 	.word	0x20000e9c
 8009e04:	20000a08 	.word	0x20000a08
 8009e08:	20000ef0 	.word	0x20000ef0

08009e0c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	b083      	sub	sp, #12
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009e14:	4b06      	ldr	r3, [pc, #24]	; (8009e30 <vTaskInternalSetTimeOutState+0x24>)
 8009e16:	681a      	ldr	r2, [r3, #0]
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009e1c:	4b05      	ldr	r3, [pc, #20]	; (8009e34 <vTaskInternalSetTimeOutState+0x28>)
 8009e1e:	681a      	ldr	r2, [r3, #0]
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	605a      	str	r2, [r3, #4]
}
 8009e24:	bf00      	nop
 8009e26:	370c      	adds	r7, #12
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2e:	4770      	bx	lr
 8009e30:	20000ef4 	.word	0x20000ef4
 8009e34:	20000ee0 	.word	0x20000ee0

08009e38 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b088      	sub	sp, #32
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
 8009e40:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d10a      	bne.n	8009e5e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e4c:	f383 8811 	msr	BASEPRI, r3
 8009e50:	f3bf 8f6f 	isb	sy
 8009e54:	f3bf 8f4f 	dsb	sy
 8009e58:	613b      	str	r3, [r7, #16]
}
 8009e5a:	bf00      	nop
 8009e5c:	e7fe      	b.n	8009e5c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d10a      	bne.n	8009e7a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e68:	f383 8811 	msr	BASEPRI, r3
 8009e6c:	f3bf 8f6f 	isb	sy
 8009e70:	f3bf 8f4f 	dsb	sy
 8009e74:	60fb      	str	r3, [r7, #12]
}
 8009e76:	bf00      	nop
 8009e78:	e7fe      	b.n	8009e78 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009e7a:	f000 fe83 	bl	800ab84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009e7e:	4b1d      	ldr	r3, [pc, #116]	; (8009ef4 <xTaskCheckForTimeOut+0xbc>)
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	685b      	ldr	r3, [r3, #4]
 8009e88:	69ba      	ldr	r2, [r7, #24]
 8009e8a:	1ad3      	subs	r3, r2, r3
 8009e8c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e96:	d102      	bne.n	8009e9e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009e98:	2300      	movs	r3, #0
 8009e9a:	61fb      	str	r3, [r7, #28]
 8009e9c:	e023      	b.n	8009ee6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681a      	ldr	r2, [r3, #0]
 8009ea2:	4b15      	ldr	r3, [pc, #84]	; (8009ef8 <xTaskCheckForTimeOut+0xc0>)
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	429a      	cmp	r2, r3
 8009ea8:	d007      	beq.n	8009eba <xTaskCheckForTimeOut+0x82>
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	685b      	ldr	r3, [r3, #4]
 8009eae:	69ba      	ldr	r2, [r7, #24]
 8009eb0:	429a      	cmp	r2, r3
 8009eb2:	d302      	bcc.n	8009eba <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009eb4:	2301      	movs	r3, #1
 8009eb6:	61fb      	str	r3, [r7, #28]
 8009eb8:	e015      	b.n	8009ee6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009eba:	683b      	ldr	r3, [r7, #0]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	697a      	ldr	r2, [r7, #20]
 8009ec0:	429a      	cmp	r2, r3
 8009ec2:	d20b      	bcs.n	8009edc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	681a      	ldr	r2, [r3, #0]
 8009ec8:	697b      	ldr	r3, [r7, #20]
 8009eca:	1ad2      	subs	r2, r2, r3
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	f7ff ff9b 	bl	8009e0c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	61fb      	str	r3, [r7, #28]
 8009eda:	e004      	b.n	8009ee6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	2200      	movs	r2, #0
 8009ee0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009ee6:	f000 fe7d 	bl	800abe4 <vPortExitCritical>

	return xReturn;
 8009eea:	69fb      	ldr	r3, [r7, #28]
}
 8009eec:	4618      	mov	r0, r3
 8009eee:	3720      	adds	r7, #32
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd80      	pop	{r7, pc}
 8009ef4:	20000ee0 	.word	0x20000ee0
 8009ef8:	20000ef4 	.word	0x20000ef4

08009efc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009efc:	b480      	push	{r7}
 8009efe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009f00:	4b03      	ldr	r3, [pc, #12]	; (8009f10 <vTaskMissedYield+0x14>)
 8009f02:	2201      	movs	r2, #1
 8009f04:	601a      	str	r2, [r3, #0]
}
 8009f06:	bf00      	nop
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0e:	4770      	bx	lr
 8009f10:	20000ef0 	.word	0x20000ef0

08009f14 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b082      	sub	sp, #8
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009f1c:	f000 f852 	bl	8009fc4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009f20:	4b06      	ldr	r3, [pc, #24]	; (8009f3c <prvIdleTask+0x28>)
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	2b01      	cmp	r3, #1
 8009f26:	d9f9      	bls.n	8009f1c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009f28:	4b05      	ldr	r3, [pc, #20]	; (8009f40 <prvIdleTask+0x2c>)
 8009f2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f2e:	601a      	str	r2, [r3, #0]
 8009f30:	f3bf 8f4f 	dsb	sy
 8009f34:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009f38:	e7f0      	b.n	8009f1c <prvIdleTask+0x8>
 8009f3a:	bf00      	nop
 8009f3c:	20000a0c 	.word	0x20000a0c
 8009f40:	e000ed04 	.word	0xe000ed04

08009f44 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b082      	sub	sp, #8
 8009f48:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	607b      	str	r3, [r7, #4]
 8009f4e:	e00c      	b.n	8009f6a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009f50:	687a      	ldr	r2, [r7, #4]
 8009f52:	4613      	mov	r3, r2
 8009f54:	009b      	lsls	r3, r3, #2
 8009f56:	4413      	add	r3, r2
 8009f58:	009b      	lsls	r3, r3, #2
 8009f5a:	4a12      	ldr	r2, [pc, #72]	; (8009fa4 <prvInitialiseTaskLists+0x60>)
 8009f5c:	4413      	add	r3, r2
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f7fe fcca 	bl	80088f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	3301      	adds	r3, #1
 8009f68:	607b      	str	r3, [r7, #4]
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2b37      	cmp	r3, #55	; 0x37
 8009f6e:	d9ef      	bls.n	8009f50 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009f70:	480d      	ldr	r0, [pc, #52]	; (8009fa8 <prvInitialiseTaskLists+0x64>)
 8009f72:	f7fe fcc1 	bl	80088f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009f76:	480d      	ldr	r0, [pc, #52]	; (8009fac <prvInitialiseTaskLists+0x68>)
 8009f78:	f7fe fcbe 	bl	80088f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009f7c:	480c      	ldr	r0, [pc, #48]	; (8009fb0 <prvInitialiseTaskLists+0x6c>)
 8009f7e:	f7fe fcbb 	bl	80088f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009f82:	480c      	ldr	r0, [pc, #48]	; (8009fb4 <prvInitialiseTaskLists+0x70>)
 8009f84:	f7fe fcb8 	bl	80088f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009f88:	480b      	ldr	r0, [pc, #44]	; (8009fb8 <prvInitialiseTaskLists+0x74>)
 8009f8a:	f7fe fcb5 	bl	80088f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009f8e:	4b0b      	ldr	r3, [pc, #44]	; (8009fbc <prvInitialiseTaskLists+0x78>)
 8009f90:	4a05      	ldr	r2, [pc, #20]	; (8009fa8 <prvInitialiseTaskLists+0x64>)
 8009f92:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009f94:	4b0a      	ldr	r3, [pc, #40]	; (8009fc0 <prvInitialiseTaskLists+0x7c>)
 8009f96:	4a05      	ldr	r2, [pc, #20]	; (8009fac <prvInitialiseTaskLists+0x68>)
 8009f98:	601a      	str	r2, [r3, #0]
}
 8009f9a:	bf00      	nop
 8009f9c:	3708      	adds	r7, #8
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}
 8009fa2:	bf00      	nop
 8009fa4:	20000a0c 	.word	0x20000a0c
 8009fa8:	20000e6c 	.word	0x20000e6c
 8009fac:	20000e80 	.word	0x20000e80
 8009fb0:	20000e9c 	.word	0x20000e9c
 8009fb4:	20000eb0 	.word	0x20000eb0
 8009fb8:	20000ec8 	.word	0x20000ec8
 8009fbc:	20000e94 	.word	0x20000e94
 8009fc0:	20000e98 	.word	0x20000e98

08009fc4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b082      	sub	sp, #8
 8009fc8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009fca:	e019      	b.n	800a000 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009fcc:	f000 fdda 	bl	800ab84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009fd0:	4b10      	ldr	r3, [pc, #64]	; (800a014 <prvCheckTasksWaitingTermination+0x50>)
 8009fd2:	68db      	ldr	r3, [r3, #12]
 8009fd4:	68db      	ldr	r3, [r3, #12]
 8009fd6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	3304      	adds	r3, #4
 8009fdc:	4618      	mov	r0, r3
 8009fde:	f7fe fd15 	bl	8008a0c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009fe2:	4b0d      	ldr	r3, [pc, #52]	; (800a018 <prvCheckTasksWaitingTermination+0x54>)
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	3b01      	subs	r3, #1
 8009fe8:	4a0b      	ldr	r2, [pc, #44]	; (800a018 <prvCheckTasksWaitingTermination+0x54>)
 8009fea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009fec:	4b0b      	ldr	r3, [pc, #44]	; (800a01c <prvCheckTasksWaitingTermination+0x58>)
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	3b01      	subs	r3, #1
 8009ff2:	4a0a      	ldr	r2, [pc, #40]	; (800a01c <prvCheckTasksWaitingTermination+0x58>)
 8009ff4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009ff6:	f000 fdf5 	bl	800abe4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f000 f810 	bl	800a020 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a000:	4b06      	ldr	r3, [pc, #24]	; (800a01c <prvCheckTasksWaitingTermination+0x58>)
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d1e1      	bne.n	8009fcc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a008:	bf00      	nop
 800a00a:	bf00      	nop
 800a00c:	3708      	adds	r7, #8
 800a00e:	46bd      	mov	sp, r7
 800a010:	bd80      	pop	{r7, pc}
 800a012:	bf00      	nop
 800a014:	20000eb0 	.word	0x20000eb0
 800a018:	20000edc 	.word	0x20000edc
 800a01c:	20000ec4 	.word	0x20000ec4

0800a020 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a020:	b580      	push	{r7, lr}
 800a022:	b084      	sub	sp, #16
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	3354      	adds	r3, #84	; 0x54
 800a02c:	4618      	mov	r0, r3
 800a02e:	f002 f8c3 	bl	800c1b8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d108      	bne.n	800a04e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a040:	4618      	mov	r0, r3
 800a042:	f000 ff8d 	bl	800af60 <vPortFree>
				vPortFree( pxTCB );
 800a046:	6878      	ldr	r0, [r7, #4]
 800a048:	f000 ff8a 	bl	800af60 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a04c:	e018      	b.n	800a080 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a054:	2b01      	cmp	r3, #1
 800a056:	d103      	bne.n	800a060 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a058:	6878      	ldr	r0, [r7, #4]
 800a05a:	f000 ff81 	bl	800af60 <vPortFree>
	}
 800a05e:	e00f      	b.n	800a080 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a066:	2b02      	cmp	r3, #2
 800a068:	d00a      	beq.n	800a080 <prvDeleteTCB+0x60>
	__asm volatile
 800a06a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a06e:	f383 8811 	msr	BASEPRI, r3
 800a072:	f3bf 8f6f 	isb	sy
 800a076:	f3bf 8f4f 	dsb	sy
 800a07a:	60fb      	str	r3, [r7, #12]
}
 800a07c:	bf00      	nop
 800a07e:	e7fe      	b.n	800a07e <prvDeleteTCB+0x5e>
	}
 800a080:	bf00      	nop
 800a082:	3710      	adds	r7, #16
 800a084:	46bd      	mov	sp, r7
 800a086:	bd80      	pop	{r7, pc}

0800a088 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a088:	b480      	push	{r7}
 800a08a:	b083      	sub	sp, #12
 800a08c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a08e:	4b0c      	ldr	r3, [pc, #48]	; (800a0c0 <prvResetNextTaskUnblockTime+0x38>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d104      	bne.n	800a0a2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a098:	4b0a      	ldr	r3, [pc, #40]	; (800a0c4 <prvResetNextTaskUnblockTime+0x3c>)
 800a09a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a09e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a0a0:	e008      	b.n	800a0b4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0a2:	4b07      	ldr	r3, [pc, #28]	; (800a0c0 <prvResetNextTaskUnblockTime+0x38>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	68db      	ldr	r3, [r3, #12]
 800a0a8:	68db      	ldr	r3, [r3, #12]
 800a0aa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	685b      	ldr	r3, [r3, #4]
 800a0b0:	4a04      	ldr	r2, [pc, #16]	; (800a0c4 <prvResetNextTaskUnblockTime+0x3c>)
 800a0b2:	6013      	str	r3, [r2, #0]
}
 800a0b4:	bf00      	nop
 800a0b6:	370c      	adds	r7, #12
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0be:	4770      	bx	lr
 800a0c0:	20000e94 	.word	0x20000e94
 800a0c4:	20000efc 	.word	0x20000efc

0800a0c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a0c8:	b480      	push	{r7}
 800a0ca:	b083      	sub	sp, #12
 800a0cc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a0ce:	4b0b      	ldr	r3, [pc, #44]	; (800a0fc <xTaskGetSchedulerState+0x34>)
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d102      	bne.n	800a0dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	607b      	str	r3, [r7, #4]
 800a0da:	e008      	b.n	800a0ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a0dc:	4b08      	ldr	r3, [pc, #32]	; (800a100 <xTaskGetSchedulerState+0x38>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d102      	bne.n	800a0ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a0e4:	2302      	movs	r3, #2
 800a0e6:	607b      	str	r3, [r7, #4]
 800a0e8:	e001      	b.n	800a0ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a0ee:	687b      	ldr	r3, [r7, #4]
	}
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	370c      	adds	r7, #12
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fa:	4770      	bx	lr
 800a0fc:	20000ee8 	.word	0x20000ee8
 800a100:	20000f04 	.word	0x20000f04

0800a104 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a104:	b580      	push	{r7, lr}
 800a106:	b086      	sub	sp, #24
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a110:	2300      	movs	r3, #0
 800a112:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d056      	beq.n	800a1c8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a11a:	4b2e      	ldr	r3, [pc, #184]	; (800a1d4 <xTaskPriorityDisinherit+0xd0>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	693a      	ldr	r2, [r7, #16]
 800a120:	429a      	cmp	r2, r3
 800a122:	d00a      	beq.n	800a13a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a124:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a128:	f383 8811 	msr	BASEPRI, r3
 800a12c:	f3bf 8f6f 	isb	sy
 800a130:	f3bf 8f4f 	dsb	sy
 800a134:	60fb      	str	r3, [r7, #12]
}
 800a136:	bf00      	nop
 800a138:	e7fe      	b.n	800a138 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a13a:	693b      	ldr	r3, [r7, #16]
 800a13c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d10a      	bne.n	800a158 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a142:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a146:	f383 8811 	msr	BASEPRI, r3
 800a14a:	f3bf 8f6f 	isb	sy
 800a14e:	f3bf 8f4f 	dsb	sy
 800a152:	60bb      	str	r3, [r7, #8]
}
 800a154:	bf00      	nop
 800a156:	e7fe      	b.n	800a156 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a158:	693b      	ldr	r3, [r7, #16]
 800a15a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a15c:	1e5a      	subs	r2, r3, #1
 800a15e:	693b      	ldr	r3, [r7, #16]
 800a160:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a162:	693b      	ldr	r3, [r7, #16]
 800a164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a166:	693b      	ldr	r3, [r7, #16]
 800a168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a16a:	429a      	cmp	r2, r3
 800a16c:	d02c      	beq.n	800a1c8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a16e:	693b      	ldr	r3, [r7, #16]
 800a170:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a172:	2b00      	cmp	r3, #0
 800a174:	d128      	bne.n	800a1c8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a176:	693b      	ldr	r3, [r7, #16]
 800a178:	3304      	adds	r3, #4
 800a17a:	4618      	mov	r0, r3
 800a17c:	f7fe fc46 	bl	8008a0c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a180:	693b      	ldr	r3, [r7, #16]
 800a182:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a184:	693b      	ldr	r3, [r7, #16]
 800a186:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a188:	693b      	ldr	r3, [r7, #16]
 800a18a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a18c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a190:	693b      	ldr	r3, [r7, #16]
 800a192:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a194:	693b      	ldr	r3, [r7, #16]
 800a196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a198:	4b0f      	ldr	r3, [pc, #60]	; (800a1d8 <xTaskPriorityDisinherit+0xd4>)
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	429a      	cmp	r2, r3
 800a19e:	d903      	bls.n	800a1a8 <xTaskPriorityDisinherit+0xa4>
 800a1a0:	693b      	ldr	r3, [r7, #16]
 800a1a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1a4:	4a0c      	ldr	r2, [pc, #48]	; (800a1d8 <xTaskPriorityDisinherit+0xd4>)
 800a1a6:	6013      	str	r3, [r2, #0]
 800a1a8:	693b      	ldr	r3, [r7, #16]
 800a1aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1ac:	4613      	mov	r3, r2
 800a1ae:	009b      	lsls	r3, r3, #2
 800a1b0:	4413      	add	r3, r2
 800a1b2:	009b      	lsls	r3, r3, #2
 800a1b4:	4a09      	ldr	r2, [pc, #36]	; (800a1dc <xTaskPriorityDisinherit+0xd8>)
 800a1b6:	441a      	add	r2, r3
 800a1b8:	693b      	ldr	r3, [r7, #16]
 800a1ba:	3304      	adds	r3, #4
 800a1bc:	4619      	mov	r1, r3
 800a1be:	4610      	mov	r0, r2
 800a1c0:	f7fe fbc7 	bl	8008952 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a1c4:	2301      	movs	r3, #1
 800a1c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a1c8:	697b      	ldr	r3, [r7, #20]
	}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	3718      	adds	r7, #24
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd80      	pop	{r7, pc}
 800a1d2:	bf00      	nop
 800a1d4:	20000a08 	.word	0x20000a08
 800a1d8:	20000ee4 	.word	0x20000ee4
 800a1dc:	20000a0c 	.word	0x20000a0c

0800a1e0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b084      	sub	sp, #16
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
 800a1e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a1ea:	4b21      	ldr	r3, [pc, #132]	; (800a270 <prvAddCurrentTaskToDelayedList+0x90>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a1f0:	4b20      	ldr	r3, [pc, #128]	; (800a274 <prvAddCurrentTaskToDelayedList+0x94>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	3304      	adds	r3, #4
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f7fe fc08 	bl	8008a0c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a202:	d10a      	bne.n	800a21a <prvAddCurrentTaskToDelayedList+0x3a>
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d007      	beq.n	800a21a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a20a:	4b1a      	ldr	r3, [pc, #104]	; (800a274 <prvAddCurrentTaskToDelayedList+0x94>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	3304      	adds	r3, #4
 800a210:	4619      	mov	r1, r3
 800a212:	4819      	ldr	r0, [pc, #100]	; (800a278 <prvAddCurrentTaskToDelayedList+0x98>)
 800a214:	f7fe fb9d 	bl	8008952 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a218:	e026      	b.n	800a268 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a21a:	68fa      	ldr	r2, [r7, #12]
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	4413      	add	r3, r2
 800a220:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a222:	4b14      	ldr	r3, [pc, #80]	; (800a274 <prvAddCurrentTaskToDelayedList+0x94>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	68ba      	ldr	r2, [r7, #8]
 800a228:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a22a:	68ba      	ldr	r2, [r7, #8]
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	429a      	cmp	r2, r3
 800a230:	d209      	bcs.n	800a246 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a232:	4b12      	ldr	r3, [pc, #72]	; (800a27c <prvAddCurrentTaskToDelayedList+0x9c>)
 800a234:	681a      	ldr	r2, [r3, #0]
 800a236:	4b0f      	ldr	r3, [pc, #60]	; (800a274 <prvAddCurrentTaskToDelayedList+0x94>)
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	3304      	adds	r3, #4
 800a23c:	4619      	mov	r1, r3
 800a23e:	4610      	mov	r0, r2
 800a240:	f7fe fbab 	bl	800899a <vListInsert>
}
 800a244:	e010      	b.n	800a268 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a246:	4b0e      	ldr	r3, [pc, #56]	; (800a280 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a248:	681a      	ldr	r2, [r3, #0]
 800a24a:	4b0a      	ldr	r3, [pc, #40]	; (800a274 <prvAddCurrentTaskToDelayedList+0x94>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	3304      	adds	r3, #4
 800a250:	4619      	mov	r1, r3
 800a252:	4610      	mov	r0, r2
 800a254:	f7fe fba1 	bl	800899a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a258:	4b0a      	ldr	r3, [pc, #40]	; (800a284 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	68ba      	ldr	r2, [r7, #8]
 800a25e:	429a      	cmp	r2, r3
 800a260:	d202      	bcs.n	800a268 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a262:	4a08      	ldr	r2, [pc, #32]	; (800a284 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	6013      	str	r3, [r2, #0]
}
 800a268:	bf00      	nop
 800a26a:	3710      	adds	r7, #16
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}
 800a270:	20000ee0 	.word	0x20000ee0
 800a274:	20000a08 	.word	0x20000a08
 800a278:	20000ec8 	.word	0x20000ec8
 800a27c:	20000e98 	.word	0x20000e98
 800a280:	20000e94 	.word	0x20000e94
 800a284:	20000efc 	.word	0x20000efc

0800a288 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b08a      	sub	sp, #40	; 0x28
 800a28c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a28e:	2300      	movs	r3, #0
 800a290:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a292:	f000 fb07 	bl	800a8a4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a296:	4b1c      	ldr	r3, [pc, #112]	; (800a308 <xTimerCreateTimerTask+0x80>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d021      	beq.n	800a2e2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a2a6:	1d3a      	adds	r2, r7, #4
 800a2a8:	f107 0108 	add.w	r1, r7, #8
 800a2ac:	f107 030c 	add.w	r3, r7, #12
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	f7fe fb07 	bl	80088c4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a2b6:	6879      	ldr	r1, [r7, #4]
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	68fa      	ldr	r2, [r7, #12]
 800a2bc:	9202      	str	r2, [sp, #8]
 800a2be:	9301      	str	r3, [sp, #4]
 800a2c0:	2302      	movs	r3, #2
 800a2c2:	9300      	str	r3, [sp, #0]
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	460a      	mov	r2, r1
 800a2c8:	4910      	ldr	r1, [pc, #64]	; (800a30c <xTimerCreateTimerTask+0x84>)
 800a2ca:	4811      	ldr	r0, [pc, #68]	; (800a310 <xTimerCreateTimerTask+0x88>)
 800a2cc:	f7ff f8b4 	bl	8009438 <xTaskCreateStatic>
 800a2d0:	4603      	mov	r3, r0
 800a2d2:	4a10      	ldr	r2, [pc, #64]	; (800a314 <xTimerCreateTimerTask+0x8c>)
 800a2d4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a2d6:	4b0f      	ldr	r3, [pc, #60]	; (800a314 <xTimerCreateTimerTask+0x8c>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d001      	beq.n	800a2e2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a2de:	2301      	movs	r3, #1
 800a2e0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a2e2:	697b      	ldr	r3, [r7, #20]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d10a      	bne.n	800a2fe <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a2e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ec:	f383 8811 	msr	BASEPRI, r3
 800a2f0:	f3bf 8f6f 	isb	sy
 800a2f4:	f3bf 8f4f 	dsb	sy
 800a2f8:	613b      	str	r3, [r7, #16]
}
 800a2fa:	bf00      	nop
 800a2fc:	e7fe      	b.n	800a2fc <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a2fe:	697b      	ldr	r3, [r7, #20]
}
 800a300:	4618      	mov	r0, r3
 800a302:	3718      	adds	r7, #24
 800a304:	46bd      	mov	sp, r7
 800a306:	bd80      	pop	{r7, pc}
 800a308:	20000f38 	.word	0x20000f38
 800a30c:	0800caa8 	.word	0x0800caa8
 800a310:	0800a44d 	.word	0x0800a44d
 800a314:	20000f3c 	.word	0x20000f3c

0800a318 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b08a      	sub	sp, #40	; 0x28
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	60f8      	str	r0, [r7, #12]
 800a320:	60b9      	str	r1, [r7, #8]
 800a322:	607a      	str	r2, [r7, #4]
 800a324:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a326:	2300      	movs	r3, #0
 800a328:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d10a      	bne.n	800a346 <xTimerGenericCommand+0x2e>
	__asm volatile
 800a330:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a334:	f383 8811 	msr	BASEPRI, r3
 800a338:	f3bf 8f6f 	isb	sy
 800a33c:	f3bf 8f4f 	dsb	sy
 800a340:	623b      	str	r3, [r7, #32]
}
 800a342:	bf00      	nop
 800a344:	e7fe      	b.n	800a344 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a346:	4b1a      	ldr	r3, [pc, #104]	; (800a3b0 <xTimerGenericCommand+0x98>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d02a      	beq.n	800a3a4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a34e:	68bb      	ldr	r3, [r7, #8]
 800a350:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a35a:	68bb      	ldr	r3, [r7, #8]
 800a35c:	2b05      	cmp	r3, #5
 800a35e:	dc18      	bgt.n	800a392 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a360:	f7ff feb2 	bl	800a0c8 <xTaskGetSchedulerState>
 800a364:	4603      	mov	r3, r0
 800a366:	2b02      	cmp	r3, #2
 800a368:	d109      	bne.n	800a37e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a36a:	4b11      	ldr	r3, [pc, #68]	; (800a3b0 <xTimerGenericCommand+0x98>)
 800a36c:	6818      	ldr	r0, [r3, #0]
 800a36e:	f107 0110 	add.w	r1, r7, #16
 800a372:	2300      	movs	r3, #0
 800a374:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a376:	f7fe fc77 	bl	8008c68 <xQueueGenericSend>
 800a37a:	6278      	str	r0, [r7, #36]	; 0x24
 800a37c:	e012      	b.n	800a3a4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a37e:	4b0c      	ldr	r3, [pc, #48]	; (800a3b0 <xTimerGenericCommand+0x98>)
 800a380:	6818      	ldr	r0, [r3, #0]
 800a382:	f107 0110 	add.w	r1, r7, #16
 800a386:	2300      	movs	r3, #0
 800a388:	2200      	movs	r2, #0
 800a38a:	f7fe fc6d 	bl	8008c68 <xQueueGenericSend>
 800a38e:	6278      	str	r0, [r7, #36]	; 0x24
 800a390:	e008      	b.n	800a3a4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a392:	4b07      	ldr	r3, [pc, #28]	; (800a3b0 <xTimerGenericCommand+0x98>)
 800a394:	6818      	ldr	r0, [r3, #0]
 800a396:	f107 0110 	add.w	r1, r7, #16
 800a39a:	2300      	movs	r3, #0
 800a39c:	683a      	ldr	r2, [r7, #0]
 800a39e:	f7fe fd61 	bl	8008e64 <xQueueGenericSendFromISR>
 800a3a2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	3728      	adds	r7, #40	; 0x28
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bd80      	pop	{r7, pc}
 800a3ae:	bf00      	nop
 800a3b0:	20000f38 	.word	0x20000f38

0800a3b4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b088      	sub	sp, #32
 800a3b8:	af02      	add	r7, sp, #8
 800a3ba:	6078      	str	r0, [r7, #4]
 800a3bc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3be:	4b22      	ldr	r3, [pc, #136]	; (800a448 <prvProcessExpiredTimer+0x94>)
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	68db      	ldr	r3, [r3, #12]
 800a3c4:	68db      	ldr	r3, [r3, #12]
 800a3c6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a3c8:	697b      	ldr	r3, [r7, #20]
 800a3ca:	3304      	adds	r3, #4
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	f7fe fb1d 	bl	8008a0c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a3d2:	697b      	ldr	r3, [r7, #20]
 800a3d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a3d8:	f003 0304 	and.w	r3, r3, #4
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d022      	beq.n	800a426 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a3e0:	697b      	ldr	r3, [r7, #20]
 800a3e2:	699a      	ldr	r2, [r3, #24]
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	18d1      	adds	r1, r2, r3
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	683a      	ldr	r2, [r7, #0]
 800a3ec:	6978      	ldr	r0, [r7, #20]
 800a3ee:	f000 f8d1 	bl	800a594 <prvInsertTimerInActiveList>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d01f      	beq.n	800a438 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	9300      	str	r3, [sp, #0]
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	687a      	ldr	r2, [r7, #4]
 800a400:	2100      	movs	r1, #0
 800a402:	6978      	ldr	r0, [r7, #20]
 800a404:	f7ff ff88 	bl	800a318 <xTimerGenericCommand>
 800a408:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a40a:	693b      	ldr	r3, [r7, #16]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d113      	bne.n	800a438 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a410:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a414:	f383 8811 	msr	BASEPRI, r3
 800a418:	f3bf 8f6f 	isb	sy
 800a41c:	f3bf 8f4f 	dsb	sy
 800a420:	60fb      	str	r3, [r7, #12]
}
 800a422:	bf00      	nop
 800a424:	e7fe      	b.n	800a424 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a426:	697b      	ldr	r3, [r7, #20]
 800a428:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a42c:	f023 0301 	bic.w	r3, r3, #1
 800a430:	b2da      	uxtb	r2, r3
 800a432:	697b      	ldr	r3, [r7, #20]
 800a434:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a438:	697b      	ldr	r3, [r7, #20]
 800a43a:	6a1b      	ldr	r3, [r3, #32]
 800a43c:	6978      	ldr	r0, [r7, #20]
 800a43e:	4798      	blx	r3
}
 800a440:	bf00      	nop
 800a442:	3718      	adds	r7, #24
 800a444:	46bd      	mov	sp, r7
 800a446:	bd80      	pop	{r7, pc}
 800a448:	20000f30 	.word	0x20000f30

0800a44c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b084      	sub	sp, #16
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a454:	f107 0308 	add.w	r3, r7, #8
 800a458:	4618      	mov	r0, r3
 800a45a:	f000 f857 	bl	800a50c <prvGetNextExpireTime>
 800a45e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	4619      	mov	r1, r3
 800a464:	68f8      	ldr	r0, [r7, #12]
 800a466:	f000 f803 	bl	800a470 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a46a:	f000 f8d5 	bl	800a618 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a46e:	e7f1      	b.n	800a454 <prvTimerTask+0x8>

0800a470 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b084      	sub	sp, #16
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
 800a478:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a47a:	f7ff fa39 	bl	80098f0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a47e:	f107 0308 	add.w	r3, r7, #8
 800a482:	4618      	mov	r0, r3
 800a484:	f000 f866 	bl	800a554 <prvSampleTimeNow>
 800a488:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a48a:	68bb      	ldr	r3, [r7, #8]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d130      	bne.n	800a4f2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d10a      	bne.n	800a4ac <prvProcessTimerOrBlockTask+0x3c>
 800a496:	687a      	ldr	r2, [r7, #4]
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	429a      	cmp	r2, r3
 800a49c:	d806      	bhi.n	800a4ac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a49e:	f7ff fa35 	bl	800990c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a4a2:	68f9      	ldr	r1, [r7, #12]
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	f7ff ff85 	bl	800a3b4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a4aa:	e024      	b.n	800a4f6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d008      	beq.n	800a4c4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a4b2:	4b13      	ldr	r3, [pc, #76]	; (800a500 <prvProcessTimerOrBlockTask+0x90>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d101      	bne.n	800a4c0 <prvProcessTimerOrBlockTask+0x50>
 800a4bc:	2301      	movs	r3, #1
 800a4be:	e000      	b.n	800a4c2 <prvProcessTimerOrBlockTask+0x52>
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a4c4:	4b0f      	ldr	r3, [pc, #60]	; (800a504 <prvProcessTimerOrBlockTask+0x94>)
 800a4c6:	6818      	ldr	r0, [r3, #0]
 800a4c8:	687a      	ldr	r2, [r7, #4]
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	1ad3      	subs	r3, r2, r3
 800a4ce:	683a      	ldr	r2, [r7, #0]
 800a4d0:	4619      	mov	r1, r3
 800a4d2:	f7fe ff7d 	bl	80093d0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a4d6:	f7ff fa19 	bl	800990c <xTaskResumeAll>
 800a4da:	4603      	mov	r3, r0
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d10a      	bne.n	800a4f6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a4e0:	4b09      	ldr	r3, [pc, #36]	; (800a508 <prvProcessTimerOrBlockTask+0x98>)
 800a4e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4e6:	601a      	str	r2, [r3, #0]
 800a4e8:	f3bf 8f4f 	dsb	sy
 800a4ec:	f3bf 8f6f 	isb	sy
}
 800a4f0:	e001      	b.n	800a4f6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a4f2:	f7ff fa0b 	bl	800990c <xTaskResumeAll>
}
 800a4f6:	bf00      	nop
 800a4f8:	3710      	adds	r7, #16
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}
 800a4fe:	bf00      	nop
 800a500:	20000f34 	.word	0x20000f34
 800a504:	20000f38 	.word	0x20000f38
 800a508:	e000ed04 	.word	0xe000ed04

0800a50c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a50c:	b480      	push	{r7}
 800a50e:	b085      	sub	sp, #20
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a514:	4b0e      	ldr	r3, [pc, #56]	; (800a550 <prvGetNextExpireTime+0x44>)
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d101      	bne.n	800a522 <prvGetNextExpireTime+0x16>
 800a51e:	2201      	movs	r2, #1
 800a520:	e000      	b.n	800a524 <prvGetNextExpireTime+0x18>
 800a522:	2200      	movs	r2, #0
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d105      	bne.n	800a53c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a530:	4b07      	ldr	r3, [pc, #28]	; (800a550 <prvGetNextExpireTime+0x44>)
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	68db      	ldr	r3, [r3, #12]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	60fb      	str	r3, [r7, #12]
 800a53a:	e001      	b.n	800a540 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a53c:	2300      	movs	r3, #0
 800a53e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a540:	68fb      	ldr	r3, [r7, #12]
}
 800a542:	4618      	mov	r0, r3
 800a544:	3714      	adds	r7, #20
 800a546:	46bd      	mov	sp, r7
 800a548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54c:	4770      	bx	lr
 800a54e:	bf00      	nop
 800a550:	20000f30 	.word	0x20000f30

0800a554 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b084      	sub	sp, #16
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a55c:	f7ff fa74 	bl	8009a48 <xTaskGetTickCount>
 800a560:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a562:	4b0b      	ldr	r3, [pc, #44]	; (800a590 <prvSampleTimeNow+0x3c>)
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	68fa      	ldr	r2, [r7, #12]
 800a568:	429a      	cmp	r2, r3
 800a56a:	d205      	bcs.n	800a578 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a56c:	f000 f936 	bl	800a7dc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2201      	movs	r2, #1
 800a574:	601a      	str	r2, [r3, #0]
 800a576:	e002      	b.n	800a57e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2200      	movs	r2, #0
 800a57c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a57e:	4a04      	ldr	r2, [pc, #16]	; (800a590 <prvSampleTimeNow+0x3c>)
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a584:	68fb      	ldr	r3, [r7, #12]
}
 800a586:	4618      	mov	r0, r3
 800a588:	3710      	adds	r7, #16
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bd80      	pop	{r7, pc}
 800a58e:	bf00      	nop
 800a590:	20000f40 	.word	0x20000f40

0800a594 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b086      	sub	sp, #24
 800a598:	af00      	add	r7, sp, #0
 800a59a:	60f8      	str	r0, [r7, #12]
 800a59c:	60b9      	str	r1, [r7, #8]
 800a59e:	607a      	str	r2, [r7, #4]
 800a5a0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	68ba      	ldr	r2, [r7, #8]
 800a5aa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	68fa      	ldr	r2, [r7, #12]
 800a5b0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a5b2:	68ba      	ldr	r2, [r7, #8]
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	429a      	cmp	r2, r3
 800a5b8:	d812      	bhi.n	800a5e0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5ba:	687a      	ldr	r2, [r7, #4]
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	1ad2      	subs	r2, r2, r3
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	699b      	ldr	r3, [r3, #24]
 800a5c4:	429a      	cmp	r2, r3
 800a5c6:	d302      	bcc.n	800a5ce <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a5c8:	2301      	movs	r3, #1
 800a5ca:	617b      	str	r3, [r7, #20]
 800a5cc:	e01b      	b.n	800a606 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a5ce:	4b10      	ldr	r3, [pc, #64]	; (800a610 <prvInsertTimerInActiveList+0x7c>)
 800a5d0:	681a      	ldr	r2, [r3, #0]
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	3304      	adds	r3, #4
 800a5d6:	4619      	mov	r1, r3
 800a5d8:	4610      	mov	r0, r2
 800a5da:	f7fe f9de 	bl	800899a <vListInsert>
 800a5de:	e012      	b.n	800a606 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a5e0:	687a      	ldr	r2, [r7, #4]
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	429a      	cmp	r2, r3
 800a5e6:	d206      	bcs.n	800a5f6 <prvInsertTimerInActiveList+0x62>
 800a5e8:	68ba      	ldr	r2, [r7, #8]
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	429a      	cmp	r2, r3
 800a5ee:	d302      	bcc.n	800a5f6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	617b      	str	r3, [r7, #20]
 800a5f4:	e007      	b.n	800a606 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a5f6:	4b07      	ldr	r3, [pc, #28]	; (800a614 <prvInsertTimerInActiveList+0x80>)
 800a5f8:	681a      	ldr	r2, [r3, #0]
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	3304      	adds	r3, #4
 800a5fe:	4619      	mov	r1, r3
 800a600:	4610      	mov	r0, r2
 800a602:	f7fe f9ca 	bl	800899a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a606:	697b      	ldr	r3, [r7, #20]
}
 800a608:	4618      	mov	r0, r3
 800a60a:	3718      	adds	r7, #24
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bd80      	pop	{r7, pc}
 800a610:	20000f34 	.word	0x20000f34
 800a614:	20000f30 	.word	0x20000f30

0800a618 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b08e      	sub	sp, #56	; 0x38
 800a61c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a61e:	e0ca      	b.n	800a7b6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2b00      	cmp	r3, #0
 800a624:	da18      	bge.n	800a658 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a626:	1d3b      	adds	r3, r7, #4
 800a628:	3304      	adds	r3, #4
 800a62a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a62c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d10a      	bne.n	800a648 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a632:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a636:	f383 8811 	msr	BASEPRI, r3
 800a63a:	f3bf 8f6f 	isb	sy
 800a63e:	f3bf 8f4f 	dsb	sy
 800a642:	61fb      	str	r3, [r7, #28]
}
 800a644:	bf00      	nop
 800a646:	e7fe      	b.n	800a646 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a64e:	6850      	ldr	r0, [r2, #4]
 800a650:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a652:	6892      	ldr	r2, [r2, #8]
 800a654:	4611      	mov	r1, r2
 800a656:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	f2c0 80aa 	blt.w	800a7b4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a666:	695b      	ldr	r3, [r3, #20]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d004      	beq.n	800a676 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a66c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a66e:	3304      	adds	r3, #4
 800a670:	4618      	mov	r0, r3
 800a672:	f7fe f9cb 	bl	8008a0c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a676:	463b      	mov	r3, r7
 800a678:	4618      	mov	r0, r3
 800a67a:	f7ff ff6b 	bl	800a554 <prvSampleTimeNow>
 800a67e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2b09      	cmp	r3, #9
 800a684:	f200 8097 	bhi.w	800a7b6 <prvProcessReceivedCommands+0x19e>
 800a688:	a201      	add	r2, pc, #4	; (adr r2, 800a690 <prvProcessReceivedCommands+0x78>)
 800a68a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a68e:	bf00      	nop
 800a690:	0800a6b9 	.word	0x0800a6b9
 800a694:	0800a6b9 	.word	0x0800a6b9
 800a698:	0800a6b9 	.word	0x0800a6b9
 800a69c:	0800a72d 	.word	0x0800a72d
 800a6a0:	0800a741 	.word	0x0800a741
 800a6a4:	0800a78b 	.word	0x0800a78b
 800a6a8:	0800a6b9 	.word	0x0800a6b9
 800a6ac:	0800a6b9 	.word	0x0800a6b9
 800a6b0:	0800a72d 	.word	0x0800a72d
 800a6b4:	0800a741 	.word	0x0800a741
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a6b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a6be:	f043 0301 	orr.w	r3, r3, #1
 800a6c2:	b2da      	uxtb	r2, r3
 800a6c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a6ca:	68ba      	ldr	r2, [r7, #8]
 800a6cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ce:	699b      	ldr	r3, [r3, #24]
 800a6d0:	18d1      	adds	r1, r2, r3
 800a6d2:	68bb      	ldr	r3, [r7, #8]
 800a6d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6d8:	f7ff ff5c 	bl	800a594 <prvInsertTimerInActiveList>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d069      	beq.n	800a7b6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a6e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6e4:	6a1b      	ldr	r3, [r3, #32]
 800a6e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6e8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a6ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a6f0:	f003 0304 	and.w	r3, r3, #4
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d05e      	beq.n	800a7b6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a6f8:	68ba      	ldr	r2, [r7, #8]
 800a6fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6fc:	699b      	ldr	r3, [r3, #24]
 800a6fe:	441a      	add	r2, r3
 800a700:	2300      	movs	r3, #0
 800a702:	9300      	str	r3, [sp, #0]
 800a704:	2300      	movs	r3, #0
 800a706:	2100      	movs	r1, #0
 800a708:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a70a:	f7ff fe05 	bl	800a318 <xTimerGenericCommand>
 800a70e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a710:	6a3b      	ldr	r3, [r7, #32]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d14f      	bne.n	800a7b6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a71a:	f383 8811 	msr	BASEPRI, r3
 800a71e:	f3bf 8f6f 	isb	sy
 800a722:	f3bf 8f4f 	dsb	sy
 800a726:	61bb      	str	r3, [r7, #24]
}
 800a728:	bf00      	nop
 800a72a:	e7fe      	b.n	800a72a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a72c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a72e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a732:	f023 0301 	bic.w	r3, r3, #1
 800a736:	b2da      	uxtb	r2, r3
 800a738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a73a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a73e:	e03a      	b.n	800a7b6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a742:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a746:	f043 0301 	orr.w	r3, r3, #1
 800a74a:	b2da      	uxtb	r2, r3
 800a74c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a74e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a752:	68ba      	ldr	r2, [r7, #8]
 800a754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a756:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a75a:	699b      	ldr	r3, [r3, #24]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d10a      	bne.n	800a776 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a760:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a764:	f383 8811 	msr	BASEPRI, r3
 800a768:	f3bf 8f6f 	isb	sy
 800a76c:	f3bf 8f4f 	dsb	sy
 800a770:	617b      	str	r3, [r7, #20]
}
 800a772:	bf00      	nop
 800a774:	e7fe      	b.n	800a774 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a778:	699a      	ldr	r2, [r3, #24]
 800a77a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a77c:	18d1      	adds	r1, r2, r3
 800a77e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a782:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a784:	f7ff ff06 	bl	800a594 <prvInsertTimerInActiveList>
					break;
 800a788:	e015      	b.n	800a7b6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a78a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a78c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a790:	f003 0302 	and.w	r3, r3, #2
 800a794:	2b00      	cmp	r3, #0
 800a796:	d103      	bne.n	800a7a0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a798:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a79a:	f000 fbe1 	bl	800af60 <vPortFree>
 800a79e:	e00a      	b.n	800a7b6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a7a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a7a6:	f023 0301 	bic.w	r3, r3, #1
 800a7aa:	b2da      	uxtb	r2, r3
 800a7ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a7b2:	e000      	b.n	800a7b6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a7b4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a7b6:	4b08      	ldr	r3, [pc, #32]	; (800a7d8 <prvProcessReceivedCommands+0x1c0>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	1d39      	adds	r1, r7, #4
 800a7bc:	2200      	movs	r2, #0
 800a7be:	4618      	mov	r0, r3
 800a7c0:	f7fe fbec 	bl	8008f9c <xQueueReceive>
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	f47f af2a 	bne.w	800a620 <prvProcessReceivedCommands+0x8>
	}
}
 800a7cc:	bf00      	nop
 800a7ce:	bf00      	nop
 800a7d0:	3730      	adds	r7, #48	; 0x30
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}
 800a7d6:	bf00      	nop
 800a7d8:	20000f38 	.word	0x20000f38

0800a7dc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b088      	sub	sp, #32
 800a7e0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a7e2:	e048      	b.n	800a876 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a7e4:	4b2d      	ldr	r3, [pc, #180]	; (800a89c <prvSwitchTimerLists+0xc0>)
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	68db      	ldr	r3, [r3, #12]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7ee:	4b2b      	ldr	r3, [pc, #172]	; (800a89c <prvSwitchTimerLists+0xc0>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	68db      	ldr	r3, [r3, #12]
 800a7f4:	68db      	ldr	r3, [r3, #12]
 800a7f6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	3304      	adds	r3, #4
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	f7fe f905 	bl	8008a0c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	6a1b      	ldr	r3, [r3, #32]
 800a806:	68f8      	ldr	r0, [r7, #12]
 800a808:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a810:	f003 0304 	and.w	r3, r3, #4
 800a814:	2b00      	cmp	r3, #0
 800a816:	d02e      	beq.n	800a876 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	699b      	ldr	r3, [r3, #24]
 800a81c:	693a      	ldr	r2, [r7, #16]
 800a81e:	4413      	add	r3, r2
 800a820:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a822:	68ba      	ldr	r2, [r7, #8]
 800a824:	693b      	ldr	r3, [r7, #16]
 800a826:	429a      	cmp	r2, r3
 800a828:	d90e      	bls.n	800a848 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	68ba      	ldr	r2, [r7, #8]
 800a82e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	68fa      	ldr	r2, [r7, #12]
 800a834:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a836:	4b19      	ldr	r3, [pc, #100]	; (800a89c <prvSwitchTimerLists+0xc0>)
 800a838:	681a      	ldr	r2, [r3, #0]
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	3304      	adds	r3, #4
 800a83e:	4619      	mov	r1, r3
 800a840:	4610      	mov	r0, r2
 800a842:	f7fe f8aa 	bl	800899a <vListInsert>
 800a846:	e016      	b.n	800a876 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a848:	2300      	movs	r3, #0
 800a84a:	9300      	str	r3, [sp, #0]
 800a84c:	2300      	movs	r3, #0
 800a84e:	693a      	ldr	r2, [r7, #16]
 800a850:	2100      	movs	r1, #0
 800a852:	68f8      	ldr	r0, [r7, #12]
 800a854:	f7ff fd60 	bl	800a318 <xTimerGenericCommand>
 800a858:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d10a      	bne.n	800a876 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a860:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a864:	f383 8811 	msr	BASEPRI, r3
 800a868:	f3bf 8f6f 	isb	sy
 800a86c:	f3bf 8f4f 	dsb	sy
 800a870:	603b      	str	r3, [r7, #0]
}
 800a872:	bf00      	nop
 800a874:	e7fe      	b.n	800a874 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a876:	4b09      	ldr	r3, [pc, #36]	; (800a89c <prvSwitchTimerLists+0xc0>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d1b1      	bne.n	800a7e4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a880:	4b06      	ldr	r3, [pc, #24]	; (800a89c <prvSwitchTimerLists+0xc0>)
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a886:	4b06      	ldr	r3, [pc, #24]	; (800a8a0 <prvSwitchTimerLists+0xc4>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	4a04      	ldr	r2, [pc, #16]	; (800a89c <prvSwitchTimerLists+0xc0>)
 800a88c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a88e:	4a04      	ldr	r2, [pc, #16]	; (800a8a0 <prvSwitchTimerLists+0xc4>)
 800a890:	697b      	ldr	r3, [r7, #20]
 800a892:	6013      	str	r3, [r2, #0]
}
 800a894:	bf00      	nop
 800a896:	3718      	adds	r7, #24
 800a898:	46bd      	mov	sp, r7
 800a89a:	bd80      	pop	{r7, pc}
 800a89c:	20000f30 	.word	0x20000f30
 800a8a0:	20000f34 	.word	0x20000f34

0800a8a4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b082      	sub	sp, #8
 800a8a8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a8aa:	f000 f96b 	bl	800ab84 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a8ae:	4b15      	ldr	r3, [pc, #84]	; (800a904 <prvCheckForValidListAndQueue+0x60>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d120      	bne.n	800a8f8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a8b6:	4814      	ldr	r0, [pc, #80]	; (800a908 <prvCheckForValidListAndQueue+0x64>)
 800a8b8:	f7fe f81e 	bl	80088f8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a8bc:	4813      	ldr	r0, [pc, #76]	; (800a90c <prvCheckForValidListAndQueue+0x68>)
 800a8be:	f7fe f81b 	bl	80088f8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a8c2:	4b13      	ldr	r3, [pc, #76]	; (800a910 <prvCheckForValidListAndQueue+0x6c>)
 800a8c4:	4a10      	ldr	r2, [pc, #64]	; (800a908 <prvCheckForValidListAndQueue+0x64>)
 800a8c6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a8c8:	4b12      	ldr	r3, [pc, #72]	; (800a914 <prvCheckForValidListAndQueue+0x70>)
 800a8ca:	4a10      	ldr	r2, [pc, #64]	; (800a90c <prvCheckForValidListAndQueue+0x68>)
 800a8cc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	9300      	str	r3, [sp, #0]
 800a8d2:	4b11      	ldr	r3, [pc, #68]	; (800a918 <prvCheckForValidListAndQueue+0x74>)
 800a8d4:	4a11      	ldr	r2, [pc, #68]	; (800a91c <prvCheckForValidListAndQueue+0x78>)
 800a8d6:	2110      	movs	r1, #16
 800a8d8:	200a      	movs	r0, #10
 800a8da:	f7fe f929 	bl	8008b30 <xQueueGenericCreateStatic>
 800a8de:	4603      	mov	r3, r0
 800a8e0:	4a08      	ldr	r2, [pc, #32]	; (800a904 <prvCheckForValidListAndQueue+0x60>)
 800a8e2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a8e4:	4b07      	ldr	r3, [pc, #28]	; (800a904 <prvCheckForValidListAndQueue+0x60>)
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d005      	beq.n	800a8f8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a8ec:	4b05      	ldr	r3, [pc, #20]	; (800a904 <prvCheckForValidListAndQueue+0x60>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	490b      	ldr	r1, [pc, #44]	; (800a920 <prvCheckForValidListAndQueue+0x7c>)
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	f7fe fd42 	bl	800937c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a8f8:	f000 f974 	bl	800abe4 <vPortExitCritical>
}
 800a8fc:	bf00      	nop
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}
 800a902:	bf00      	nop
 800a904:	20000f38 	.word	0x20000f38
 800a908:	20000f08 	.word	0x20000f08
 800a90c:	20000f1c 	.word	0x20000f1c
 800a910:	20000f30 	.word	0x20000f30
 800a914:	20000f34 	.word	0x20000f34
 800a918:	20000fe4 	.word	0x20000fe4
 800a91c:	20000f44 	.word	0x20000f44
 800a920:	0800cab0 	.word	0x0800cab0

0800a924 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a924:	b480      	push	{r7}
 800a926:	b085      	sub	sp, #20
 800a928:	af00      	add	r7, sp, #0
 800a92a:	60f8      	str	r0, [r7, #12]
 800a92c:	60b9      	str	r1, [r7, #8]
 800a92e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	3b04      	subs	r3, #4
 800a934:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a93c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	3b04      	subs	r3, #4
 800a942:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a944:	68bb      	ldr	r3, [r7, #8]
 800a946:	f023 0201 	bic.w	r2, r3, #1
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	3b04      	subs	r3, #4
 800a952:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a954:	4a0c      	ldr	r2, [pc, #48]	; (800a988 <pxPortInitialiseStack+0x64>)
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	3b14      	subs	r3, #20
 800a95e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a960:	687a      	ldr	r2, [r7, #4]
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	3b04      	subs	r3, #4
 800a96a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	f06f 0202 	mvn.w	r2, #2
 800a972:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	3b20      	subs	r3, #32
 800a978:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a97a:	68fb      	ldr	r3, [r7, #12]
}
 800a97c:	4618      	mov	r0, r3
 800a97e:	3714      	adds	r7, #20
 800a980:	46bd      	mov	sp, r7
 800a982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a986:	4770      	bx	lr
 800a988:	0800a98d 	.word	0x0800a98d

0800a98c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a98c:	b480      	push	{r7}
 800a98e:	b085      	sub	sp, #20
 800a990:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a992:	2300      	movs	r3, #0
 800a994:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a996:	4b12      	ldr	r3, [pc, #72]	; (800a9e0 <prvTaskExitError+0x54>)
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a99e:	d00a      	beq.n	800a9b6 <prvTaskExitError+0x2a>
	__asm volatile
 800a9a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9a4:	f383 8811 	msr	BASEPRI, r3
 800a9a8:	f3bf 8f6f 	isb	sy
 800a9ac:	f3bf 8f4f 	dsb	sy
 800a9b0:	60fb      	str	r3, [r7, #12]
}
 800a9b2:	bf00      	nop
 800a9b4:	e7fe      	b.n	800a9b4 <prvTaskExitError+0x28>
	__asm volatile
 800a9b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ba:	f383 8811 	msr	BASEPRI, r3
 800a9be:	f3bf 8f6f 	isb	sy
 800a9c2:	f3bf 8f4f 	dsb	sy
 800a9c6:	60bb      	str	r3, [r7, #8]
}
 800a9c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a9ca:	bf00      	nop
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d0fc      	beq.n	800a9cc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a9d2:	bf00      	nop
 800a9d4:	bf00      	nop
 800a9d6:	3714      	adds	r7, #20
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9de:	4770      	bx	lr
 800a9e0:	20000098 	.word	0x20000098
	...

0800a9f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a9f0:	4b07      	ldr	r3, [pc, #28]	; (800aa10 <pxCurrentTCBConst2>)
 800a9f2:	6819      	ldr	r1, [r3, #0]
 800a9f4:	6808      	ldr	r0, [r1, #0]
 800a9f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9fa:	f380 8809 	msr	PSP, r0
 800a9fe:	f3bf 8f6f 	isb	sy
 800aa02:	f04f 0000 	mov.w	r0, #0
 800aa06:	f380 8811 	msr	BASEPRI, r0
 800aa0a:	4770      	bx	lr
 800aa0c:	f3af 8000 	nop.w

0800aa10 <pxCurrentTCBConst2>:
 800aa10:	20000a08 	.word	0x20000a08
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800aa14:	bf00      	nop
 800aa16:	bf00      	nop

0800aa18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800aa18:	4808      	ldr	r0, [pc, #32]	; (800aa3c <prvPortStartFirstTask+0x24>)
 800aa1a:	6800      	ldr	r0, [r0, #0]
 800aa1c:	6800      	ldr	r0, [r0, #0]
 800aa1e:	f380 8808 	msr	MSP, r0
 800aa22:	f04f 0000 	mov.w	r0, #0
 800aa26:	f380 8814 	msr	CONTROL, r0
 800aa2a:	b662      	cpsie	i
 800aa2c:	b661      	cpsie	f
 800aa2e:	f3bf 8f4f 	dsb	sy
 800aa32:	f3bf 8f6f 	isb	sy
 800aa36:	df00      	svc	0
 800aa38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800aa3a:	bf00      	nop
 800aa3c:	e000ed08 	.word	0xe000ed08

0800aa40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b086      	sub	sp, #24
 800aa44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800aa46:	4b46      	ldr	r3, [pc, #280]	; (800ab60 <xPortStartScheduler+0x120>)
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	4a46      	ldr	r2, [pc, #280]	; (800ab64 <xPortStartScheduler+0x124>)
 800aa4c:	4293      	cmp	r3, r2
 800aa4e:	d10a      	bne.n	800aa66 <xPortStartScheduler+0x26>
	__asm volatile
 800aa50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa54:	f383 8811 	msr	BASEPRI, r3
 800aa58:	f3bf 8f6f 	isb	sy
 800aa5c:	f3bf 8f4f 	dsb	sy
 800aa60:	613b      	str	r3, [r7, #16]
}
 800aa62:	bf00      	nop
 800aa64:	e7fe      	b.n	800aa64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800aa66:	4b3e      	ldr	r3, [pc, #248]	; (800ab60 <xPortStartScheduler+0x120>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	4a3f      	ldr	r2, [pc, #252]	; (800ab68 <xPortStartScheduler+0x128>)
 800aa6c:	4293      	cmp	r3, r2
 800aa6e:	d10a      	bne.n	800aa86 <xPortStartScheduler+0x46>
	__asm volatile
 800aa70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa74:	f383 8811 	msr	BASEPRI, r3
 800aa78:	f3bf 8f6f 	isb	sy
 800aa7c:	f3bf 8f4f 	dsb	sy
 800aa80:	60fb      	str	r3, [r7, #12]
}
 800aa82:	bf00      	nop
 800aa84:	e7fe      	b.n	800aa84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800aa86:	4b39      	ldr	r3, [pc, #228]	; (800ab6c <xPortStartScheduler+0x12c>)
 800aa88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800aa8a:	697b      	ldr	r3, [r7, #20]
 800aa8c:	781b      	ldrb	r3, [r3, #0]
 800aa8e:	b2db      	uxtb	r3, r3
 800aa90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800aa92:	697b      	ldr	r3, [r7, #20]
 800aa94:	22ff      	movs	r2, #255	; 0xff
 800aa96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800aa98:	697b      	ldr	r3, [r7, #20]
 800aa9a:	781b      	ldrb	r3, [r3, #0]
 800aa9c:	b2db      	uxtb	r3, r3
 800aa9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800aaa0:	78fb      	ldrb	r3, [r7, #3]
 800aaa2:	b2db      	uxtb	r3, r3
 800aaa4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800aaa8:	b2da      	uxtb	r2, r3
 800aaaa:	4b31      	ldr	r3, [pc, #196]	; (800ab70 <xPortStartScheduler+0x130>)
 800aaac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800aaae:	4b31      	ldr	r3, [pc, #196]	; (800ab74 <xPortStartScheduler+0x134>)
 800aab0:	2207      	movs	r2, #7
 800aab2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aab4:	e009      	b.n	800aaca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800aab6:	4b2f      	ldr	r3, [pc, #188]	; (800ab74 <xPortStartScheduler+0x134>)
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	3b01      	subs	r3, #1
 800aabc:	4a2d      	ldr	r2, [pc, #180]	; (800ab74 <xPortStartScheduler+0x134>)
 800aabe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800aac0:	78fb      	ldrb	r3, [r7, #3]
 800aac2:	b2db      	uxtb	r3, r3
 800aac4:	005b      	lsls	r3, r3, #1
 800aac6:	b2db      	uxtb	r3, r3
 800aac8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aaca:	78fb      	ldrb	r3, [r7, #3]
 800aacc:	b2db      	uxtb	r3, r3
 800aace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aad2:	2b80      	cmp	r3, #128	; 0x80
 800aad4:	d0ef      	beq.n	800aab6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800aad6:	4b27      	ldr	r3, [pc, #156]	; (800ab74 <xPortStartScheduler+0x134>)
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	f1c3 0307 	rsb	r3, r3, #7
 800aade:	2b04      	cmp	r3, #4
 800aae0:	d00a      	beq.n	800aaf8 <xPortStartScheduler+0xb8>
	__asm volatile
 800aae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aae6:	f383 8811 	msr	BASEPRI, r3
 800aaea:	f3bf 8f6f 	isb	sy
 800aaee:	f3bf 8f4f 	dsb	sy
 800aaf2:	60bb      	str	r3, [r7, #8]
}
 800aaf4:	bf00      	nop
 800aaf6:	e7fe      	b.n	800aaf6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800aaf8:	4b1e      	ldr	r3, [pc, #120]	; (800ab74 <xPortStartScheduler+0x134>)
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	021b      	lsls	r3, r3, #8
 800aafe:	4a1d      	ldr	r2, [pc, #116]	; (800ab74 <xPortStartScheduler+0x134>)
 800ab00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ab02:	4b1c      	ldr	r3, [pc, #112]	; (800ab74 <xPortStartScheduler+0x134>)
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ab0a:	4a1a      	ldr	r2, [pc, #104]	; (800ab74 <xPortStartScheduler+0x134>)
 800ab0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	b2da      	uxtb	r2, r3
 800ab12:	697b      	ldr	r3, [r7, #20]
 800ab14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ab16:	4b18      	ldr	r3, [pc, #96]	; (800ab78 <xPortStartScheduler+0x138>)
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	4a17      	ldr	r2, [pc, #92]	; (800ab78 <xPortStartScheduler+0x138>)
 800ab1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ab20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ab22:	4b15      	ldr	r3, [pc, #84]	; (800ab78 <xPortStartScheduler+0x138>)
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	4a14      	ldr	r2, [pc, #80]	; (800ab78 <xPortStartScheduler+0x138>)
 800ab28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ab2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ab2e:	f000 f8dd 	bl	800acec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ab32:	4b12      	ldr	r3, [pc, #72]	; (800ab7c <xPortStartScheduler+0x13c>)
 800ab34:	2200      	movs	r2, #0
 800ab36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ab38:	f000 f8fc 	bl	800ad34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ab3c:	4b10      	ldr	r3, [pc, #64]	; (800ab80 <xPortStartScheduler+0x140>)
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	4a0f      	ldr	r2, [pc, #60]	; (800ab80 <xPortStartScheduler+0x140>)
 800ab42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ab46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ab48:	f7ff ff66 	bl	800aa18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ab4c:	f7ff f846 	bl	8009bdc <vTaskSwitchContext>
	prvTaskExitError();
 800ab50:	f7ff ff1c 	bl	800a98c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ab54:	2300      	movs	r3, #0
}
 800ab56:	4618      	mov	r0, r3
 800ab58:	3718      	adds	r7, #24
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bd80      	pop	{r7, pc}
 800ab5e:	bf00      	nop
 800ab60:	e000ed00 	.word	0xe000ed00
 800ab64:	410fc271 	.word	0x410fc271
 800ab68:	410fc270 	.word	0x410fc270
 800ab6c:	e000e400 	.word	0xe000e400
 800ab70:	20001034 	.word	0x20001034
 800ab74:	20001038 	.word	0x20001038
 800ab78:	e000ed20 	.word	0xe000ed20
 800ab7c:	20000098 	.word	0x20000098
 800ab80:	e000ef34 	.word	0xe000ef34

0800ab84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ab84:	b480      	push	{r7}
 800ab86:	b083      	sub	sp, #12
 800ab88:	af00      	add	r7, sp, #0
	__asm volatile
 800ab8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab8e:	f383 8811 	msr	BASEPRI, r3
 800ab92:	f3bf 8f6f 	isb	sy
 800ab96:	f3bf 8f4f 	dsb	sy
 800ab9a:	607b      	str	r3, [r7, #4]
}
 800ab9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ab9e:	4b0f      	ldr	r3, [pc, #60]	; (800abdc <vPortEnterCritical+0x58>)
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	3301      	adds	r3, #1
 800aba4:	4a0d      	ldr	r2, [pc, #52]	; (800abdc <vPortEnterCritical+0x58>)
 800aba6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800aba8:	4b0c      	ldr	r3, [pc, #48]	; (800abdc <vPortEnterCritical+0x58>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	2b01      	cmp	r3, #1
 800abae:	d10f      	bne.n	800abd0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800abb0:	4b0b      	ldr	r3, [pc, #44]	; (800abe0 <vPortEnterCritical+0x5c>)
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	b2db      	uxtb	r3, r3
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d00a      	beq.n	800abd0 <vPortEnterCritical+0x4c>
	__asm volatile
 800abba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abbe:	f383 8811 	msr	BASEPRI, r3
 800abc2:	f3bf 8f6f 	isb	sy
 800abc6:	f3bf 8f4f 	dsb	sy
 800abca:	603b      	str	r3, [r7, #0]
}
 800abcc:	bf00      	nop
 800abce:	e7fe      	b.n	800abce <vPortEnterCritical+0x4a>
	}
}
 800abd0:	bf00      	nop
 800abd2:	370c      	adds	r7, #12
 800abd4:	46bd      	mov	sp, r7
 800abd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abda:	4770      	bx	lr
 800abdc:	20000098 	.word	0x20000098
 800abe0:	e000ed04 	.word	0xe000ed04

0800abe4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800abe4:	b480      	push	{r7}
 800abe6:	b083      	sub	sp, #12
 800abe8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800abea:	4b12      	ldr	r3, [pc, #72]	; (800ac34 <vPortExitCritical+0x50>)
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d10a      	bne.n	800ac08 <vPortExitCritical+0x24>
	__asm volatile
 800abf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abf6:	f383 8811 	msr	BASEPRI, r3
 800abfa:	f3bf 8f6f 	isb	sy
 800abfe:	f3bf 8f4f 	dsb	sy
 800ac02:	607b      	str	r3, [r7, #4]
}
 800ac04:	bf00      	nop
 800ac06:	e7fe      	b.n	800ac06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ac08:	4b0a      	ldr	r3, [pc, #40]	; (800ac34 <vPortExitCritical+0x50>)
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	3b01      	subs	r3, #1
 800ac0e:	4a09      	ldr	r2, [pc, #36]	; (800ac34 <vPortExitCritical+0x50>)
 800ac10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ac12:	4b08      	ldr	r3, [pc, #32]	; (800ac34 <vPortExitCritical+0x50>)
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d105      	bne.n	800ac26 <vPortExitCritical+0x42>
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	f383 8811 	msr	BASEPRI, r3
}
 800ac24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ac26:	bf00      	nop
 800ac28:	370c      	adds	r7, #12
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac30:	4770      	bx	lr
 800ac32:	bf00      	nop
 800ac34:	20000098 	.word	0x20000098
	...

0800ac40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ac40:	f3ef 8009 	mrs	r0, PSP
 800ac44:	f3bf 8f6f 	isb	sy
 800ac48:	4b15      	ldr	r3, [pc, #84]	; (800aca0 <pxCurrentTCBConst>)
 800ac4a:	681a      	ldr	r2, [r3, #0]
 800ac4c:	f01e 0f10 	tst.w	lr, #16
 800ac50:	bf08      	it	eq
 800ac52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ac56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac5a:	6010      	str	r0, [r2, #0]
 800ac5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ac60:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ac64:	f380 8811 	msr	BASEPRI, r0
 800ac68:	f3bf 8f4f 	dsb	sy
 800ac6c:	f3bf 8f6f 	isb	sy
 800ac70:	f7fe ffb4 	bl	8009bdc <vTaskSwitchContext>
 800ac74:	f04f 0000 	mov.w	r0, #0
 800ac78:	f380 8811 	msr	BASEPRI, r0
 800ac7c:	bc09      	pop	{r0, r3}
 800ac7e:	6819      	ldr	r1, [r3, #0]
 800ac80:	6808      	ldr	r0, [r1, #0]
 800ac82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac86:	f01e 0f10 	tst.w	lr, #16
 800ac8a:	bf08      	it	eq
 800ac8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ac90:	f380 8809 	msr	PSP, r0
 800ac94:	f3bf 8f6f 	isb	sy
 800ac98:	4770      	bx	lr
 800ac9a:	bf00      	nop
 800ac9c:	f3af 8000 	nop.w

0800aca0 <pxCurrentTCBConst>:
 800aca0:	20000a08 	.word	0x20000a08
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800aca4:	bf00      	nop
 800aca6:	bf00      	nop

0800aca8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b082      	sub	sp, #8
 800acac:	af00      	add	r7, sp, #0
	__asm volatile
 800acae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acb2:	f383 8811 	msr	BASEPRI, r3
 800acb6:	f3bf 8f6f 	isb	sy
 800acba:	f3bf 8f4f 	dsb	sy
 800acbe:	607b      	str	r3, [r7, #4]
}
 800acc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800acc2:	f7fe fed1 	bl	8009a68 <xTaskIncrementTick>
 800acc6:	4603      	mov	r3, r0
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d003      	beq.n	800acd4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800accc:	4b06      	ldr	r3, [pc, #24]	; (800ace8 <xPortSysTickHandler+0x40>)
 800acce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acd2:	601a      	str	r2, [r3, #0]
 800acd4:	2300      	movs	r3, #0
 800acd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	f383 8811 	msr	BASEPRI, r3
}
 800acde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ace0:	bf00      	nop
 800ace2:	3708      	adds	r7, #8
 800ace4:	46bd      	mov	sp, r7
 800ace6:	bd80      	pop	{r7, pc}
 800ace8:	e000ed04 	.word	0xe000ed04

0800acec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800acec:	b480      	push	{r7}
 800acee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800acf0:	4b0b      	ldr	r3, [pc, #44]	; (800ad20 <vPortSetupTimerInterrupt+0x34>)
 800acf2:	2200      	movs	r2, #0
 800acf4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800acf6:	4b0b      	ldr	r3, [pc, #44]	; (800ad24 <vPortSetupTimerInterrupt+0x38>)
 800acf8:	2200      	movs	r2, #0
 800acfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800acfc:	4b0a      	ldr	r3, [pc, #40]	; (800ad28 <vPortSetupTimerInterrupt+0x3c>)
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	4a0a      	ldr	r2, [pc, #40]	; (800ad2c <vPortSetupTimerInterrupt+0x40>)
 800ad02:	fba2 2303 	umull	r2, r3, r2, r3
 800ad06:	099b      	lsrs	r3, r3, #6
 800ad08:	4a09      	ldr	r2, [pc, #36]	; (800ad30 <vPortSetupTimerInterrupt+0x44>)
 800ad0a:	3b01      	subs	r3, #1
 800ad0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ad0e:	4b04      	ldr	r3, [pc, #16]	; (800ad20 <vPortSetupTimerInterrupt+0x34>)
 800ad10:	2207      	movs	r2, #7
 800ad12:	601a      	str	r2, [r3, #0]
}
 800ad14:	bf00      	nop
 800ad16:	46bd      	mov	sp, r7
 800ad18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1c:	4770      	bx	lr
 800ad1e:	bf00      	nop
 800ad20:	e000e010 	.word	0xe000e010
 800ad24:	e000e018 	.word	0xe000e018
 800ad28:	20000000 	.word	0x20000000
 800ad2c:	10624dd3 	.word	0x10624dd3
 800ad30:	e000e014 	.word	0xe000e014

0800ad34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ad34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ad44 <vPortEnableVFP+0x10>
 800ad38:	6801      	ldr	r1, [r0, #0]
 800ad3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ad3e:	6001      	str	r1, [r0, #0]
 800ad40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ad42:	bf00      	nop
 800ad44:	e000ed88 	.word	0xe000ed88

0800ad48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ad48:	b480      	push	{r7}
 800ad4a:	b085      	sub	sp, #20
 800ad4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ad4e:	f3ef 8305 	mrs	r3, IPSR
 800ad52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	2b0f      	cmp	r3, #15
 800ad58:	d914      	bls.n	800ad84 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ad5a:	4a17      	ldr	r2, [pc, #92]	; (800adb8 <vPortValidateInterruptPriority+0x70>)
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	4413      	add	r3, r2
 800ad60:	781b      	ldrb	r3, [r3, #0]
 800ad62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ad64:	4b15      	ldr	r3, [pc, #84]	; (800adbc <vPortValidateInterruptPriority+0x74>)
 800ad66:	781b      	ldrb	r3, [r3, #0]
 800ad68:	7afa      	ldrb	r2, [r7, #11]
 800ad6a:	429a      	cmp	r2, r3
 800ad6c:	d20a      	bcs.n	800ad84 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ad6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad72:	f383 8811 	msr	BASEPRI, r3
 800ad76:	f3bf 8f6f 	isb	sy
 800ad7a:	f3bf 8f4f 	dsb	sy
 800ad7e:	607b      	str	r3, [r7, #4]
}
 800ad80:	bf00      	nop
 800ad82:	e7fe      	b.n	800ad82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ad84:	4b0e      	ldr	r3, [pc, #56]	; (800adc0 <vPortValidateInterruptPriority+0x78>)
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ad8c:	4b0d      	ldr	r3, [pc, #52]	; (800adc4 <vPortValidateInterruptPriority+0x7c>)
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	429a      	cmp	r2, r3
 800ad92:	d90a      	bls.n	800adaa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ad94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad98:	f383 8811 	msr	BASEPRI, r3
 800ad9c:	f3bf 8f6f 	isb	sy
 800ada0:	f3bf 8f4f 	dsb	sy
 800ada4:	603b      	str	r3, [r7, #0]
}
 800ada6:	bf00      	nop
 800ada8:	e7fe      	b.n	800ada8 <vPortValidateInterruptPriority+0x60>
	}
 800adaa:	bf00      	nop
 800adac:	3714      	adds	r7, #20
 800adae:	46bd      	mov	sp, r7
 800adb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb4:	4770      	bx	lr
 800adb6:	bf00      	nop
 800adb8:	e000e3f0 	.word	0xe000e3f0
 800adbc:	20001034 	.word	0x20001034
 800adc0:	e000ed0c 	.word	0xe000ed0c
 800adc4:	20001038 	.word	0x20001038

0800adc8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b08a      	sub	sp, #40	; 0x28
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800add0:	2300      	movs	r3, #0
 800add2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800add4:	f7fe fd8c 	bl	80098f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800add8:	4b5b      	ldr	r3, [pc, #364]	; (800af48 <pvPortMalloc+0x180>)
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d101      	bne.n	800ade4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ade0:	f000 f920 	bl	800b024 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ade4:	4b59      	ldr	r3, [pc, #356]	; (800af4c <pvPortMalloc+0x184>)
 800ade6:	681a      	ldr	r2, [r3, #0]
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	4013      	ands	r3, r2
 800adec:	2b00      	cmp	r3, #0
 800adee:	f040 8093 	bne.w	800af18 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d01d      	beq.n	800ae34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800adf8:	2208      	movs	r2, #8
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	4413      	add	r3, r2
 800adfe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	f003 0307 	and.w	r3, r3, #7
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d014      	beq.n	800ae34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	f023 0307 	bic.w	r3, r3, #7
 800ae10:	3308      	adds	r3, #8
 800ae12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	f003 0307 	and.w	r3, r3, #7
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d00a      	beq.n	800ae34 <pvPortMalloc+0x6c>
	__asm volatile
 800ae1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae22:	f383 8811 	msr	BASEPRI, r3
 800ae26:	f3bf 8f6f 	isb	sy
 800ae2a:	f3bf 8f4f 	dsb	sy
 800ae2e:	617b      	str	r3, [r7, #20]
}
 800ae30:	bf00      	nop
 800ae32:	e7fe      	b.n	800ae32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d06e      	beq.n	800af18 <pvPortMalloc+0x150>
 800ae3a:	4b45      	ldr	r3, [pc, #276]	; (800af50 <pvPortMalloc+0x188>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	687a      	ldr	r2, [r7, #4]
 800ae40:	429a      	cmp	r2, r3
 800ae42:	d869      	bhi.n	800af18 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ae44:	4b43      	ldr	r3, [pc, #268]	; (800af54 <pvPortMalloc+0x18c>)
 800ae46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ae48:	4b42      	ldr	r3, [pc, #264]	; (800af54 <pvPortMalloc+0x18c>)
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ae4e:	e004      	b.n	800ae5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ae50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ae54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ae5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae5c:	685b      	ldr	r3, [r3, #4]
 800ae5e:	687a      	ldr	r2, [r7, #4]
 800ae60:	429a      	cmp	r2, r3
 800ae62:	d903      	bls.n	800ae6c <pvPortMalloc+0xa4>
 800ae64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d1f1      	bne.n	800ae50 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ae6c:	4b36      	ldr	r3, [pc, #216]	; (800af48 <pvPortMalloc+0x180>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae72:	429a      	cmp	r2, r3
 800ae74:	d050      	beq.n	800af18 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ae76:	6a3b      	ldr	r3, [r7, #32]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	2208      	movs	r2, #8
 800ae7c:	4413      	add	r3, r2
 800ae7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ae80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae82:	681a      	ldr	r2, [r3, #0]
 800ae84:	6a3b      	ldr	r3, [r7, #32]
 800ae86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ae88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae8a:	685a      	ldr	r2, [r3, #4]
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	1ad2      	subs	r2, r2, r3
 800ae90:	2308      	movs	r3, #8
 800ae92:	005b      	lsls	r3, r3, #1
 800ae94:	429a      	cmp	r2, r3
 800ae96:	d91f      	bls.n	800aed8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ae98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	4413      	add	r3, r2
 800ae9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aea0:	69bb      	ldr	r3, [r7, #24]
 800aea2:	f003 0307 	and.w	r3, r3, #7
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d00a      	beq.n	800aec0 <pvPortMalloc+0xf8>
	__asm volatile
 800aeaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeae:	f383 8811 	msr	BASEPRI, r3
 800aeb2:	f3bf 8f6f 	isb	sy
 800aeb6:	f3bf 8f4f 	dsb	sy
 800aeba:	613b      	str	r3, [r7, #16]
}
 800aebc:	bf00      	nop
 800aebe:	e7fe      	b.n	800aebe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800aec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aec2:	685a      	ldr	r2, [r3, #4]
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	1ad2      	subs	r2, r2, r3
 800aec8:	69bb      	ldr	r3, [r7, #24]
 800aeca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800aecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aece:	687a      	ldr	r2, [r7, #4]
 800aed0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800aed2:	69b8      	ldr	r0, [r7, #24]
 800aed4:	f000 f908 	bl	800b0e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800aed8:	4b1d      	ldr	r3, [pc, #116]	; (800af50 <pvPortMalloc+0x188>)
 800aeda:	681a      	ldr	r2, [r3, #0]
 800aedc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aede:	685b      	ldr	r3, [r3, #4]
 800aee0:	1ad3      	subs	r3, r2, r3
 800aee2:	4a1b      	ldr	r2, [pc, #108]	; (800af50 <pvPortMalloc+0x188>)
 800aee4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800aee6:	4b1a      	ldr	r3, [pc, #104]	; (800af50 <pvPortMalloc+0x188>)
 800aee8:	681a      	ldr	r2, [r3, #0]
 800aeea:	4b1b      	ldr	r3, [pc, #108]	; (800af58 <pvPortMalloc+0x190>)
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	429a      	cmp	r2, r3
 800aef0:	d203      	bcs.n	800aefa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800aef2:	4b17      	ldr	r3, [pc, #92]	; (800af50 <pvPortMalloc+0x188>)
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	4a18      	ldr	r2, [pc, #96]	; (800af58 <pvPortMalloc+0x190>)
 800aef8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800aefa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aefc:	685a      	ldr	r2, [r3, #4]
 800aefe:	4b13      	ldr	r3, [pc, #76]	; (800af4c <pvPortMalloc+0x184>)
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	431a      	orrs	r2, r3
 800af04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af06:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800af08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af0a:	2200      	movs	r2, #0
 800af0c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800af0e:	4b13      	ldr	r3, [pc, #76]	; (800af5c <pvPortMalloc+0x194>)
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	3301      	adds	r3, #1
 800af14:	4a11      	ldr	r2, [pc, #68]	; (800af5c <pvPortMalloc+0x194>)
 800af16:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800af18:	f7fe fcf8 	bl	800990c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800af1c:	69fb      	ldr	r3, [r7, #28]
 800af1e:	f003 0307 	and.w	r3, r3, #7
 800af22:	2b00      	cmp	r3, #0
 800af24:	d00a      	beq.n	800af3c <pvPortMalloc+0x174>
	__asm volatile
 800af26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af2a:	f383 8811 	msr	BASEPRI, r3
 800af2e:	f3bf 8f6f 	isb	sy
 800af32:	f3bf 8f4f 	dsb	sy
 800af36:	60fb      	str	r3, [r7, #12]
}
 800af38:	bf00      	nop
 800af3a:	e7fe      	b.n	800af3a <pvPortMalloc+0x172>
	return pvReturn;
 800af3c:	69fb      	ldr	r3, [r7, #28]
}
 800af3e:	4618      	mov	r0, r3
 800af40:	3728      	adds	r7, #40	; 0x28
 800af42:	46bd      	mov	sp, r7
 800af44:	bd80      	pop	{r7, pc}
 800af46:	bf00      	nop
 800af48:	20004c44 	.word	0x20004c44
 800af4c:	20004c58 	.word	0x20004c58
 800af50:	20004c48 	.word	0x20004c48
 800af54:	20004c3c 	.word	0x20004c3c
 800af58:	20004c4c 	.word	0x20004c4c
 800af5c:	20004c50 	.word	0x20004c50

0800af60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b086      	sub	sp, #24
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d04d      	beq.n	800b00e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800af72:	2308      	movs	r3, #8
 800af74:	425b      	negs	r3, r3
 800af76:	697a      	ldr	r2, [r7, #20]
 800af78:	4413      	add	r3, r2
 800af7a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800af7c:	697b      	ldr	r3, [r7, #20]
 800af7e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800af80:	693b      	ldr	r3, [r7, #16]
 800af82:	685a      	ldr	r2, [r3, #4]
 800af84:	4b24      	ldr	r3, [pc, #144]	; (800b018 <vPortFree+0xb8>)
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	4013      	ands	r3, r2
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d10a      	bne.n	800afa4 <vPortFree+0x44>
	__asm volatile
 800af8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af92:	f383 8811 	msr	BASEPRI, r3
 800af96:	f3bf 8f6f 	isb	sy
 800af9a:	f3bf 8f4f 	dsb	sy
 800af9e:	60fb      	str	r3, [r7, #12]
}
 800afa0:	bf00      	nop
 800afa2:	e7fe      	b.n	800afa2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800afa4:	693b      	ldr	r3, [r7, #16]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d00a      	beq.n	800afc2 <vPortFree+0x62>
	__asm volatile
 800afac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afb0:	f383 8811 	msr	BASEPRI, r3
 800afb4:	f3bf 8f6f 	isb	sy
 800afb8:	f3bf 8f4f 	dsb	sy
 800afbc:	60bb      	str	r3, [r7, #8]
}
 800afbe:	bf00      	nop
 800afc0:	e7fe      	b.n	800afc0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800afc2:	693b      	ldr	r3, [r7, #16]
 800afc4:	685a      	ldr	r2, [r3, #4]
 800afc6:	4b14      	ldr	r3, [pc, #80]	; (800b018 <vPortFree+0xb8>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	4013      	ands	r3, r2
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d01e      	beq.n	800b00e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800afd0:	693b      	ldr	r3, [r7, #16]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d11a      	bne.n	800b00e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800afd8:	693b      	ldr	r3, [r7, #16]
 800afda:	685a      	ldr	r2, [r3, #4]
 800afdc:	4b0e      	ldr	r3, [pc, #56]	; (800b018 <vPortFree+0xb8>)
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	43db      	mvns	r3, r3
 800afe2:	401a      	ands	r2, r3
 800afe4:	693b      	ldr	r3, [r7, #16]
 800afe6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800afe8:	f7fe fc82 	bl	80098f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800afec:	693b      	ldr	r3, [r7, #16]
 800afee:	685a      	ldr	r2, [r3, #4]
 800aff0:	4b0a      	ldr	r3, [pc, #40]	; (800b01c <vPortFree+0xbc>)
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	4413      	add	r3, r2
 800aff6:	4a09      	ldr	r2, [pc, #36]	; (800b01c <vPortFree+0xbc>)
 800aff8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800affa:	6938      	ldr	r0, [r7, #16]
 800affc:	f000 f874 	bl	800b0e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b000:	4b07      	ldr	r3, [pc, #28]	; (800b020 <vPortFree+0xc0>)
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	3301      	adds	r3, #1
 800b006:	4a06      	ldr	r2, [pc, #24]	; (800b020 <vPortFree+0xc0>)
 800b008:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b00a:	f7fe fc7f 	bl	800990c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b00e:	bf00      	nop
 800b010:	3718      	adds	r7, #24
 800b012:	46bd      	mov	sp, r7
 800b014:	bd80      	pop	{r7, pc}
 800b016:	bf00      	nop
 800b018:	20004c58 	.word	0x20004c58
 800b01c:	20004c48 	.word	0x20004c48
 800b020:	20004c54 	.word	0x20004c54

0800b024 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b024:	b480      	push	{r7}
 800b026:	b085      	sub	sp, #20
 800b028:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b02a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b02e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b030:	4b27      	ldr	r3, [pc, #156]	; (800b0d0 <prvHeapInit+0xac>)
 800b032:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	f003 0307 	and.w	r3, r3, #7
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d00c      	beq.n	800b058 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	3307      	adds	r3, #7
 800b042:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	f023 0307 	bic.w	r3, r3, #7
 800b04a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b04c:	68ba      	ldr	r2, [r7, #8]
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	1ad3      	subs	r3, r2, r3
 800b052:	4a1f      	ldr	r2, [pc, #124]	; (800b0d0 <prvHeapInit+0xac>)
 800b054:	4413      	add	r3, r2
 800b056:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b05c:	4a1d      	ldr	r2, [pc, #116]	; (800b0d4 <prvHeapInit+0xb0>)
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b062:	4b1c      	ldr	r3, [pc, #112]	; (800b0d4 <prvHeapInit+0xb0>)
 800b064:	2200      	movs	r2, #0
 800b066:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	68ba      	ldr	r2, [r7, #8]
 800b06c:	4413      	add	r3, r2
 800b06e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b070:	2208      	movs	r2, #8
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	1a9b      	subs	r3, r3, r2
 800b076:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	f023 0307 	bic.w	r3, r3, #7
 800b07e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	4a15      	ldr	r2, [pc, #84]	; (800b0d8 <prvHeapInit+0xb4>)
 800b084:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b086:	4b14      	ldr	r3, [pc, #80]	; (800b0d8 <prvHeapInit+0xb4>)
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	2200      	movs	r2, #0
 800b08c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b08e:	4b12      	ldr	r3, [pc, #72]	; (800b0d8 <prvHeapInit+0xb4>)
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	2200      	movs	r2, #0
 800b094:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	68fa      	ldr	r2, [r7, #12]
 800b09e:	1ad2      	subs	r2, r2, r3
 800b0a0:	683b      	ldr	r3, [r7, #0]
 800b0a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b0a4:	4b0c      	ldr	r3, [pc, #48]	; (800b0d8 <prvHeapInit+0xb4>)
 800b0a6:	681a      	ldr	r2, [r3, #0]
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	685b      	ldr	r3, [r3, #4]
 800b0b0:	4a0a      	ldr	r2, [pc, #40]	; (800b0dc <prvHeapInit+0xb8>)
 800b0b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b0b4:	683b      	ldr	r3, [r7, #0]
 800b0b6:	685b      	ldr	r3, [r3, #4]
 800b0b8:	4a09      	ldr	r2, [pc, #36]	; (800b0e0 <prvHeapInit+0xbc>)
 800b0ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b0bc:	4b09      	ldr	r3, [pc, #36]	; (800b0e4 <prvHeapInit+0xc0>)
 800b0be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b0c2:	601a      	str	r2, [r3, #0]
}
 800b0c4:	bf00      	nop
 800b0c6:	3714      	adds	r7, #20
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ce:	4770      	bx	lr
 800b0d0:	2000103c 	.word	0x2000103c
 800b0d4:	20004c3c 	.word	0x20004c3c
 800b0d8:	20004c44 	.word	0x20004c44
 800b0dc:	20004c4c 	.word	0x20004c4c
 800b0e0:	20004c48 	.word	0x20004c48
 800b0e4:	20004c58 	.word	0x20004c58

0800b0e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b0e8:	b480      	push	{r7}
 800b0ea:	b085      	sub	sp, #20
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b0f0:	4b28      	ldr	r3, [pc, #160]	; (800b194 <prvInsertBlockIntoFreeList+0xac>)
 800b0f2:	60fb      	str	r3, [r7, #12]
 800b0f4:	e002      	b.n	800b0fc <prvInsertBlockIntoFreeList+0x14>
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	60fb      	str	r3, [r7, #12]
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	687a      	ldr	r2, [r7, #4]
 800b102:	429a      	cmp	r2, r3
 800b104:	d8f7      	bhi.n	800b0f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	685b      	ldr	r3, [r3, #4]
 800b10e:	68ba      	ldr	r2, [r7, #8]
 800b110:	4413      	add	r3, r2
 800b112:	687a      	ldr	r2, [r7, #4]
 800b114:	429a      	cmp	r2, r3
 800b116:	d108      	bne.n	800b12a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	685a      	ldr	r2, [r3, #4]
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	685b      	ldr	r3, [r3, #4]
 800b120:	441a      	add	r2, r3
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	685b      	ldr	r3, [r3, #4]
 800b132:	68ba      	ldr	r2, [r7, #8]
 800b134:	441a      	add	r2, r3
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	429a      	cmp	r2, r3
 800b13c:	d118      	bne.n	800b170 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	681a      	ldr	r2, [r3, #0]
 800b142:	4b15      	ldr	r3, [pc, #84]	; (800b198 <prvInsertBlockIntoFreeList+0xb0>)
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	429a      	cmp	r2, r3
 800b148:	d00d      	beq.n	800b166 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	685a      	ldr	r2, [r3, #4]
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	685b      	ldr	r3, [r3, #4]
 800b154:	441a      	add	r2, r3
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	681a      	ldr	r2, [r3, #0]
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	601a      	str	r2, [r3, #0]
 800b164:	e008      	b.n	800b178 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b166:	4b0c      	ldr	r3, [pc, #48]	; (800b198 <prvInsertBlockIntoFreeList+0xb0>)
 800b168:	681a      	ldr	r2, [r3, #0]
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	601a      	str	r2, [r3, #0]
 800b16e:	e003      	b.n	800b178 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	681a      	ldr	r2, [r3, #0]
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b178:	68fa      	ldr	r2, [r7, #12]
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	429a      	cmp	r2, r3
 800b17e:	d002      	beq.n	800b186 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	687a      	ldr	r2, [r7, #4]
 800b184:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b186:	bf00      	nop
 800b188:	3714      	adds	r7, #20
 800b18a:	46bd      	mov	sp, r7
 800b18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b190:	4770      	bx	lr
 800b192:	bf00      	nop
 800b194:	20004c3c 	.word	0x20004c3c
 800b198:	20004c44 	.word	0x20004c44

0800b19c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	4912      	ldr	r1, [pc, #72]	; (800b1ec <MX_USB_DEVICE_Init+0x50>)
 800b1a4:	4812      	ldr	r0, [pc, #72]	; (800b1f0 <MX_USB_DEVICE_Init+0x54>)
 800b1a6:	f7fb ff45 	bl	8007034 <USBD_Init>
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d001      	beq.n	800b1b4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b1b0:	f7f5 fdac 	bl	8000d0c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b1b4:	490f      	ldr	r1, [pc, #60]	; (800b1f4 <MX_USB_DEVICE_Init+0x58>)
 800b1b6:	480e      	ldr	r0, [pc, #56]	; (800b1f0 <MX_USB_DEVICE_Init+0x54>)
 800b1b8:	f7fb ff6c 	bl	8007094 <USBD_RegisterClass>
 800b1bc:	4603      	mov	r3, r0
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d001      	beq.n	800b1c6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b1c2:	f7f5 fda3 	bl	8000d0c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b1c6:	490c      	ldr	r1, [pc, #48]	; (800b1f8 <MX_USB_DEVICE_Init+0x5c>)
 800b1c8:	4809      	ldr	r0, [pc, #36]	; (800b1f0 <MX_USB_DEVICE_Init+0x54>)
 800b1ca:	f7fb fe5d 	bl	8006e88 <USBD_CDC_RegisterInterface>
 800b1ce:	4603      	mov	r3, r0
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d001      	beq.n	800b1d8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b1d4:	f7f5 fd9a 	bl	8000d0c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b1d8:	4805      	ldr	r0, [pc, #20]	; (800b1f0 <MX_USB_DEVICE_Init+0x54>)
 800b1da:	f7fb ff91 	bl	8007100 <USBD_Start>
 800b1de:	4603      	mov	r3, r0
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d001      	beq.n	800b1e8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b1e4:	f7f5 fd92 	bl	8000d0c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b1e8:	bf00      	nop
 800b1ea:	bd80      	pop	{r7, pc}
 800b1ec:	200000b0 	.word	0x200000b0
 800b1f0:	20004c5c 	.word	0x20004c5c
 800b1f4:	20000018 	.word	0x20000018
 800b1f8:	2000009c 	.word	0x2000009c

0800b1fc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b200:	2200      	movs	r2, #0
 800b202:	4905      	ldr	r1, [pc, #20]	; (800b218 <CDC_Init_FS+0x1c>)
 800b204:	4805      	ldr	r0, [pc, #20]	; (800b21c <CDC_Init_FS+0x20>)
 800b206:	f7fb fe59 	bl	8006ebc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b20a:	4905      	ldr	r1, [pc, #20]	; (800b220 <CDC_Init_FS+0x24>)
 800b20c:	4803      	ldr	r0, [pc, #12]	; (800b21c <CDC_Init_FS+0x20>)
 800b20e:	f7fb fe77 	bl	8006f00 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b212:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b214:	4618      	mov	r0, r3
 800b216:	bd80      	pop	{r7, pc}
 800b218:	20005738 	.word	0x20005738
 800b21c:	20004c5c 	.word	0x20004c5c
 800b220:	20004f38 	.word	0x20004f38

0800b224 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b224:	b480      	push	{r7}
 800b226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b228:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b22a:	4618      	mov	r0, r3
 800b22c:	46bd      	mov	sp, r7
 800b22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b232:	4770      	bx	lr

0800b234 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b234:	b480      	push	{r7}
 800b236:	b083      	sub	sp, #12
 800b238:	af00      	add	r7, sp, #0
 800b23a:	4603      	mov	r3, r0
 800b23c:	6039      	str	r1, [r7, #0]
 800b23e:	71fb      	strb	r3, [r7, #7]
 800b240:	4613      	mov	r3, r2
 800b242:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b244:	79fb      	ldrb	r3, [r7, #7]
 800b246:	2b23      	cmp	r3, #35	; 0x23
 800b248:	d84a      	bhi.n	800b2e0 <CDC_Control_FS+0xac>
 800b24a:	a201      	add	r2, pc, #4	; (adr r2, 800b250 <CDC_Control_FS+0x1c>)
 800b24c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b250:	0800b2e1 	.word	0x0800b2e1
 800b254:	0800b2e1 	.word	0x0800b2e1
 800b258:	0800b2e1 	.word	0x0800b2e1
 800b25c:	0800b2e1 	.word	0x0800b2e1
 800b260:	0800b2e1 	.word	0x0800b2e1
 800b264:	0800b2e1 	.word	0x0800b2e1
 800b268:	0800b2e1 	.word	0x0800b2e1
 800b26c:	0800b2e1 	.word	0x0800b2e1
 800b270:	0800b2e1 	.word	0x0800b2e1
 800b274:	0800b2e1 	.word	0x0800b2e1
 800b278:	0800b2e1 	.word	0x0800b2e1
 800b27c:	0800b2e1 	.word	0x0800b2e1
 800b280:	0800b2e1 	.word	0x0800b2e1
 800b284:	0800b2e1 	.word	0x0800b2e1
 800b288:	0800b2e1 	.word	0x0800b2e1
 800b28c:	0800b2e1 	.word	0x0800b2e1
 800b290:	0800b2e1 	.word	0x0800b2e1
 800b294:	0800b2e1 	.word	0x0800b2e1
 800b298:	0800b2e1 	.word	0x0800b2e1
 800b29c:	0800b2e1 	.word	0x0800b2e1
 800b2a0:	0800b2e1 	.word	0x0800b2e1
 800b2a4:	0800b2e1 	.word	0x0800b2e1
 800b2a8:	0800b2e1 	.word	0x0800b2e1
 800b2ac:	0800b2e1 	.word	0x0800b2e1
 800b2b0:	0800b2e1 	.word	0x0800b2e1
 800b2b4:	0800b2e1 	.word	0x0800b2e1
 800b2b8:	0800b2e1 	.word	0x0800b2e1
 800b2bc:	0800b2e1 	.word	0x0800b2e1
 800b2c0:	0800b2e1 	.word	0x0800b2e1
 800b2c4:	0800b2e1 	.word	0x0800b2e1
 800b2c8:	0800b2e1 	.word	0x0800b2e1
 800b2cc:	0800b2e1 	.word	0x0800b2e1
 800b2d0:	0800b2e1 	.word	0x0800b2e1
 800b2d4:	0800b2e1 	.word	0x0800b2e1
 800b2d8:	0800b2e1 	.word	0x0800b2e1
 800b2dc:	0800b2e1 	.word	0x0800b2e1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b2e0:	bf00      	nop
  }

  return (USBD_OK);
 800b2e2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	370c      	adds	r7, #12
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ee:	4770      	bx	lr

0800b2f0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b082      	sub	sp, #8
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
 800b2f8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b2fa:	6879      	ldr	r1, [r7, #4]
 800b2fc:	4805      	ldr	r0, [pc, #20]	; (800b314 <CDC_Receive_FS+0x24>)
 800b2fe:	f7fb fdff 	bl	8006f00 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b302:	4804      	ldr	r0, [pc, #16]	; (800b314 <CDC_Receive_FS+0x24>)
 800b304:	f7fb fe60 	bl	8006fc8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b308:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b30a:	4618      	mov	r0, r3
 800b30c:	3708      	adds	r7, #8
 800b30e:	46bd      	mov	sp, r7
 800b310:	bd80      	pop	{r7, pc}
 800b312:	bf00      	nop
 800b314:	20004c5c 	.word	0x20004c5c

0800b318 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b084      	sub	sp, #16
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
 800b320:	460b      	mov	r3, r1
 800b322:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b324:	2300      	movs	r3, #0
 800b326:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b328:	4b0d      	ldr	r3, [pc, #52]	; (800b360 <CDC_Transmit_FS+0x48>)
 800b32a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b32e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b336:	2b00      	cmp	r3, #0
 800b338:	d001      	beq.n	800b33e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b33a:	2301      	movs	r3, #1
 800b33c:	e00b      	b.n	800b356 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b33e:	887b      	ldrh	r3, [r7, #2]
 800b340:	461a      	mov	r2, r3
 800b342:	6879      	ldr	r1, [r7, #4]
 800b344:	4806      	ldr	r0, [pc, #24]	; (800b360 <CDC_Transmit_FS+0x48>)
 800b346:	f7fb fdb9 	bl	8006ebc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b34a:	4805      	ldr	r0, [pc, #20]	; (800b360 <CDC_Transmit_FS+0x48>)
 800b34c:	f7fb fdf6 	bl	8006f3c <USBD_CDC_TransmitPacket>
 800b350:	4603      	mov	r3, r0
 800b352:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b354:	7bfb      	ldrb	r3, [r7, #15]
}
 800b356:	4618      	mov	r0, r3
 800b358:	3710      	adds	r7, #16
 800b35a:	46bd      	mov	sp, r7
 800b35c:	bd80      	pop	{r7, pc}
 800b35e:	bf00      	nop
 800b360:	20004c5c 	.word	0x20004c5c

0800b364 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b364:	b480      	push	{r7}
 800b366:	b087      	sub	sp, #28
 800b368:	af00      	add	r7, sp, #0
 800b36a:	60f8      	str	r0, [r7, #12]
 800b36c:	60b9      	str	r1, [r7, #8]
 800b36e:	4613      	mov	r3, r2
 800b370:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b372:	2300      	movs	r3, #0
 800b374:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b376:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b37a:	4618      	mov	r0, r3
 800b37c:	371c      	adds	r7, #28
 800b37e:	46bd      	mov	sp, r7
 800b380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b384:	4770      	bx	lr
	...

0800b388 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b388:	b480      	push	{r7}
 800b38a:	b083      	sub	sp, #12
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	4603      	mov	r3, r0
 800b390:	6039      	str	r1, [r7, #0]
 800b392:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	2212      	movs	r2, #18
 800b398:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b39a:	4b03      	ldr	r3, [pc, #12]	; (800b3a8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b39c:	4618      	mov	r0, r3
 800b39e:	370c      	adds	r7, #12
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a6:	4770      	bx	lr
 800b3a8:	200000cc 	.word	0x200000cc

0800b3ac <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b3ac:	b480      	push	{r7}
 800b3ae:	b083      	sub	sp, #12
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	4603      	mov	r3, r0
 800b3b4:	6039      	str	r1, [r7, #0]
 800b3b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	2204      	movs	r2, #4
 800b3bc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b3be:	4b03      	ldr	r3, [pc, #12]	; (800b3cc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	370c      	adds	r7, #12
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ca:	4770      	bx	lr
 800b3cc:	200000e0 	.word	0x200000e0

0800b3d0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b082      	sub	sp, #8
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	6039      	str	r1, [r7, #0]
 800b3da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b3dc:	79fb      	ldrb	r3, [r7, #7]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d105      	bne.n	800b3ee <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b3e2:	683a      	ldr	r2, [r7, #0]
 800b3e4:	4907      	ldr	r1, [pc, #28]	; (800b404 <USBD_FS_ProductStrDescriptor+0x34>)
 800b3e6:	4808      	ldr	r0, [pc, #32]	; (800b408 <USBD_FS_ProductStrDescriptor+0x38>)
 800b3e8:	f7fd f836 	bl	8008458 <USBD_GetString>
 800b3ec:	e004      	b.n	800b3f8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b3ee:	683a      	ldr	r2, [r7, #0]
 800b3f0:	4904      	ldr	r1, [pc, #16]	; (800b404 <USBD_FS_ProductStrDescriptor+0x34>)
 800b3f2:	4805      	ldr	r0, [pc, #20]	; (800b408 <USBD_FS_ProductStrDescriptor+0x38>)
 800b3f4:	f7fd f830 	bl	8008458 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b3f8:	4b02      	ldr	r3, [pc, #8]	; (800b404 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	3708      	adds	r7, #8
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd80      	pop	{r7, pc}
 800b402:	bf00      	nop
 800b404:	20005f38 	.word	0x20005f38
 800b408:	0800cab8 	.word	0x0800cab8

0800b40c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b082      	sub	sp, #8
 800b410:	af00      	add	r7, sp, #0
 800b412:	4603      	mov	r3, r0
 800b414:	6039      	str	r1, [r7, #0]
 800b416:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b418:	683a      	ldr	r2, [r7, #0]
 800b41a:	4904      	ldr	r1, [pc, #16]	; (800b42c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b41c:	4804      	ldr	r0, [pc, #16]	; (800b430 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b41e:	f7fd f81b 	bl	8008458 <USBD_GetString>
  return USBD_StrDesc;
 800b422:	4b02      	ldr	r3, [pc, #8]	; (800b42c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b424:	4618      	mov	r0, r3
 800b426:	3708      	adds	r7, #8
 800b428:	46bd      	mov	sp, r7
 800b42a:	bd80      	pop	{r7, pc}
 800b42c:	20005f38 	.word	0x20005f38
 800b430:	0800cac4 	.word	0x0800cac4

0800b434 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b434:	b580      	push	{r7, lr}
 800b436:	b082      	sub	sp, #8
 800b438:	af00      	add	r7, sp, #0
 800b43a:	4603      	mov	r3, r0
 800b43c:	6039      	str	r1, [r7, #0]
 800b43e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b440:	683b      	ldr	r3, [r7, #0]
 800b442:	221a      	movs	r2, #26
 800b444:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b446:	f000 f843 	bl	800b4d0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b44a:	4b02      	ldr	r3, [pc, #8]	; (800b454 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b44c:	4618      	mov	r0, r3
 800b44e:	3708      	adds	r7, #8
 800b450:	46bd      	mov	sp, r7
 800b452:	bd80      	pop	{r7, pc}
 800b454:	200000e4 	.word	0x200000e4

0800b458 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b082      	sub	sp, #8
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	4603      	mov	r3, r0
 800b460:	6039      	str	r1, [r7, #0]
 800b462:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b464:	79fb      	ldrb	r3, [r7, #7]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d105      	bne.n	800b476 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b46a:	683a      	ldr	r2, [r7, #0]
 800b46c:	4907      	ldr	r1, [pc, #28]	; (800b48c <USBD_FS_ConfigStrDescriptor+0x34>)
 800b46e:	4808      	ldr	r0, [pc, #32]	; (800b490 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b470:	f7fc fff2 	bl	8008458 <USBD_GetString>
 800b474:	e004      	b.n	800b480 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b476:	683a      	ldr	r2, [r7, #0]
 800b478:	4904      	ldr	r1, [pc, #16]	; (800b48c <USBD_FS_ConfigStrDescriptor+0x34>)
 800b47a:	4805      	ldr	r0, [pc, #20]	; (800b490 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b47c:	f7fc ffec 	bl	8008458 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b480:	4b02      	ldr	r3, [pc, #8]	; (800b48c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b482:	4618      	mov	r0, r3
 800b484:	3708      	adds	r7, #8
 800b486:	46bd      	mov	sp, r7
 800b488:	bd80      	pop	{r7, pc}
 800b48a:	bf00      	nop
 800b48c:	20005f38 	.word	0x20005f38
 800b490:	0800cad8 	.word	0x0800cad8

0800b494 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b082      	sub	sp, #8
 800b498:	af00      	add	r7, sp, #0
 800b49a:	4603      	mov	r3, r0
 800b49c:	6039      	str	r1, [r7, #0]
 800b49e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b4a0:	79fb      	ldrb	r3, [r7, #7]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d105      	bne.n	800b4b2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b4a6:	683a      	ldr	r2, [r7, #0]
 800b4a8:	4907      	ldr	r1, [pc, #28]	; (800b4c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b4aa:	4808      	ldr	r0, [pc, #32]	; (800b4cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b4ac:	f7fc ffd4 	bl	8008458 <USBD_GetString>
 800b4b0:	e004      	b.n	800b4bc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b4b2:	683a      	ldr	r2, [r7, #0]
 800b4b4:	4904      	ldr	r1, [pc, #16]	; (800b4c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b4b6:	4805      	ldr	r0, [pc, #20]	; (800b4cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b4b8:	f7fc ffce 	bl	8008458 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b4bc:	4b02      	ldr	r3, [pc, #8]	; (800b4c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b4be:	4618      	mov	r0, r3
 800b4c0:	3708      	adds	r7, #8
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	bd80      	pop	{r7, pc}
 800b4c6:	bf00      	nop
 800b4c8:	20005f38 	.word	0x20005f38
 800b4cc:	0800cae4 	.word	0x0800cae4

0800b4d0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b084      	sub	sp, #16
 800b4d4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b4d6:	4b0f      	ldr	r3, [pc, #60]	; (800b514 <Get_SerialNum+0x44>)
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b4dc:	4b0e      	ldr	r3, [pc, #56]	; (800b518 <Get_SerialNum+0x48>)
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b4e2:	4b0e      	ldr	r3, [pc, #56]	; (800b51c <Get_SerialNum+0x4c>)
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b4e8:	68fa      	ldr	r2, [r7, #12]
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	4413      	add	r3, r2
 800b4ee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d009      	beq.n	800b50a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b4f6:	2208      	movs	r2, #8
 800b4f8:	4909      	ldr	r1, [pc, #36]	; (800b520 <Get_SerialNum+0x50>)
 800b4fa:	68f8      	ldr	r0, [r7, #12]
 800b4fc:	f000 f814 	bl	800b528 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b500:	2204      	movs	r2, #4
 800b502:	4908      	ldr	r1, [pc, #32]	; (800b524 <Get_SerialNum+0x54>)
 800b504:	68b8      	ldr	r0, [r7, #8]
 800b506:	f000 f80f 	bl	800b528 <IntToUnicode>
  }
}
 800b50a:	bf00      	nop
 800b50c:	3710      	adds	r7, #16
 800b50e:	46bd      	mov	sp, r7
 800b510:	bd80      	pop	{r7, pc}
 800b512:	bf00      	nop
 800b514:	1fff7a10 	.word	0x1fff7a10
 800b518:	1fff7a14 	.word	0x1fff7a14
 800b51c:	1fff7a18 	.word	0x1fff7a18
 800b520:	200000e6 	.word	0x200000e6
 800b524:	200000f6 	.word	0x200000f6

0800b528 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b528:	b480      	push	{r7}
 800b52a:	b087      	sub	sp, #28
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	60f8      	str	r0, [r7, #12]
 800b530:	60b9      	str	r1, [r7, #8]
 800b532:	4613      	mov	r3, r2
 800b534:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b536:	2300      	movs	r3, #0
 800b538:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b53a:	2300      	movs	r3, #0
 800b53c:	75fb      	strb	r3, [r7, #23]
 800b53e:	e027      	b.n	800b590 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	0f1b      	lsrs	r3, r3, #28
 800b544:	2b09      	cmp	r3, #9
 800b546:	d80b      	bhi.n	800b560 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	0f1b      	lsrs	r3, r3, #28
 800b54c:	b2da      	uxtb	r2, r3
 800b54e:	7dfb      	ldrb	r3, [r7, #23]
 800b550:	005b      	lsls	r3, r3, #1
 800b552:	4619      	mov	r1, r3
 800b554:	68bb      	ldr	r3, [r7, #8]
 800b556:	440b      	add	r3, r1
 800b558:	3230      	adds	r2, #48	; 0x30
 800b55a:	b2d2      	uxtb	r2, r2
 800b55c:	701a      	strb	r2, [r3, #0]
 800b55e:	e00a      	b.n	800b576 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	0f1b      	lsrs	r3, r3, #28
 800b564:	b2da      	uxtb	r2, r3
 800b566:	7dfb      	ldrb	r3, [r7, #23]
 800b568:	005b      	lsls	r3, r3, #1
 800b56a:	4619      	mov	r1, r3
 800b56c:	68bb      	ldr	r3, [r7, #8]
 800b56e:	440b      	add	r3, r1
 800b570:	3237      	adds	r2, #55	; 0x37
 800b572:	b2d2      	uxtb	r2, r2
 800b574:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	011b      	lsls	r3, r3, #4
 800b57a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b57c:	7dfb      	ldrb	r3, [r7, #23]
 800b57e:	005b      	lsls	r3, r3, #1
 800b580:	3301      	adds	r3, #1
 800b582:	68ba      	ldr	r2, [r7, #8]
 800b584:	4413      	add	r3, r2
 800b586:	2200      	movs	r2, #0
 800b588:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b58a:	7dfb      	ldrb	r3, [r7, #23]
 800b58c:	3301      	adds	r3, #1
 800b58e:	75fb      	strb	r3, [r7, #23]
 800b590:	7dfa      	ldrb	r2, [r7, #23]
 800b592:	79fb      	ldrb	r3, [r7, #7]
 800b594:	429a      	cmp	r2, r3
 800b596:	d3d3      	bcc.n	800b540 <IntToUnicode+0x18>
  }
}
 800b598:	bf00      	nop
 800b59a:	bf00      	nop
 800b59c:	371c      	adds	r7, #28
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a4:	4770      	bx	lr
	...

0800b5a8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b08a      	sub	sp, #40	; 0x28
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b5b0:	f107 0314 	add.w	r3, r7, #20
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	601a      	str	r2, [r3, #0]
 800b5b8:	605a      	str	r2, [r3, #4]
 800b5ba:	609a      	str	r2, [r3, #8]
 800b5bc:	60da      	str	r2, [r3, #12]
 800b5be:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b5c8:	d13a      	bne.n	800b640 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	613b      	str	r3, [r7, #16]
 800b5ce:	4b1e      	ldr	r3, [pc, #120]	; (800b648 <HAL_PCD_MspInit+0xa0>)
 800b5d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5d2:	4a1d      	ldr	r2, [pc, #116]	; (800b648 <HAL_PCD_MspInit+0xa0>)
 800b5d4:	f043 0301 	orr.w	r3, r3, #1
 800b5d8:	6313      	str	r3, [r2, #48]	; 0x30
 800b5da:	4b1b      	ldr	r3, [pc, #108]	; (800b648 <HAL_PCD_MspInit+0xa0>)
 800b5dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5de:	f003 0301 	and.w	r3, r3, #1
 800b5e2:	613b      	str	r3, [r7, #16]
 800b5e4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b5e6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b5ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b5ec:	2302      	movs	r3, #2
 800b5ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b5f4:	2303      	movs	r3, #3
 800b5f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b5f8:	230a      	movs	r3, #10
 800b5fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b5fc:	f107 0314 	add.w	r3, r7, #20
 800b600:	4619      	mov	r1, r3
 800b602:	4812      	ldr	r0, [pc, #72]	; (800b64c <HAL_PCD_MspInit+0xa4>)
 800b604:	f7f6 fa9a 	bl	8001b3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b608:	4b0f      	ldr	r3, [pc, #60]	; (800b648 <HAL_PCD_MspInit+0xa0>)
 800b60a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b60c:	4a0e      	ldr	r2, [pc, #56]	; (800b648 <HAL_PCD_MspInit+0xa0>)
 800b60e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b612:	6353      	str	r3, [r2, #52]	; 0x34
 800b614:	2300      	movs	r3, #0
 800b616:	60fb      	str	r3, [r7, #12]
 800b618:	4b0b      	ldr	r3, [pc, #44]	; (800b648 <HAL_PCD_MspInit+0xa0>)
 800b61a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b61c:	4a0a      	ldr	r2, [pc, #40]	; (800b648 <HAL_PCD_MspInit+0xa0>)
 800b61e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b622:	6453      	str	r3, [r2, #68]	; 0x44
 800b624:	4b08      	ldr	r3, [pc, #32]	; (800b648 <HAL_PCD_MspInit+0xa0>)
 800b626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b628:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b62c:	60fb      	str	r3, [r7, #12]
 800b62e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800b630:	2200      	movs	r2, #0
 800b632:	2105      	movs	r1, #5
 800b634:	2043      	movs	r0, #67	; 0x43
 800b636:	f7f6 fa57 	bl	8001ae8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b63a:	2043      	movs	r0, #67	; 0x43
 800b63c:	f7f6 fa70 	bl	8001b20 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b640:	bf00      	nop
 800b642:	3728      	adds	r7, #40	; 0x28
 800b644:	46bd      	mov	sp, r7
 800b646:	bd80      	pop	{r7, pc}
 800b648:	40023800 	.word	0x40023800
 800b64c:	40020000 	.word	0x40020000

0800b650 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b082      	sub	sp, #8
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b664:	4619      	mov	r1, r3
 800b666:	4610      	mov	r0, r2
 800b668:	f7fb fd97 	bl	800719a <USBD_LL_SetupStage>
}
 800b66c:	bf00      	nop
 800b66e:	3708      	adds	r7, #8
 800b670:	46bd      	mov	sp, r7
 800b672:	bd80      	pop	{r7, pc}

0800b674 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b082      	sub	sp, #8
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
 800b67c:	460b      	mov	r3, r1
 800b67e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b686:	78fa      	ldrb	r2, [r7, #3]
 800b688:	6879      	ldr	r1, [r7, #4]
 800b68a:	4613      	mov	r3, r2
 800b68c:	00db      	lsls	r3, r3, #3
 800b68e:	4413      	add	r3, r2
 800b690:	009b      	lsls	r3, r3, #2
 800b692:	440b      	add	r3, r1
 800b694:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800b698:	681a      	ldr	r2, [r3, #0]
 800b69a:	78fb      	ldrb	r3, [r7, #3]
 800b69c:	4619      	mov	r1, r3
 800b69e:	f7fb fdd1 	bl	8007244 <USBD_LL_DataOutStage>
}
 800b6a2:	bf00      	nop
 800b6a4:	3708      	adds	r7, #8
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	bd80      	pop	{r7, pc}

0800b6aa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6aa:	b580      	push	{r7, lr}
 800b6ac:	b082      	sub	sp, #8
 800b6ae:	af00      	add	r7, sp, #0
 800b6b0:	6078      	str	r0, [r7, #4]
 800b6b2:	460b      	mov	r3, r1
 800b6b4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b6bc:	78fa      	ldrb	r2, [r7, #3]
 800b6be:	6879      	ldr	r1, [r7, #4]
 800b6c0:	4613      	mov	r3, r2
 800b6c2:	00db      	lsls	r3, r3, #3
 800b6c4:	4413      	add	r3, r2
 800b6c6:	009b      	lsls	r3, r3, #2
 800b6c8:	440b      	add	r3, r1
 800b6ca:	334c      	adds	r3, #76	; 0x4c
 800b6cc:	681a      	ldr	r2, [r3, #0]
 800b6ce:	78fb      	ldrb	r3, [r7, #3]
 800b6d0:	4619      	mov	r1, r3
 800b6d2:	f7fb fe6a 	bl	80073aa <USBD_LL_DataInStage>
}
 800b6d6:	bf00      	nop
 800b6d8:	3708      	adds	r7, #8
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	bd80      	pop	{r7, pc}

0800b6de <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6de:	b580      	push	{r7, lr}
 800b6e0:	b082      	sub	sp, #8
 800b6e2:	af00      	add	r7, sp, #0
 800b6e4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	f7fb ff9e 	bl	800762e <USBD_LL_SOF>
}
 800b6f2:	bf00      	nop
 800b6f4:	3708      	adds	r7, #8
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	bd80      	pop	{r7, pc}

0800b6fa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6fa:	b580      	push	{r7, lr}
 800b6fc:	b084      	sub	sp, #16
 800b6fe:	af00      	add	r7, sp, #0
 800b700:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b702:	2301      	movs	r3, #1
 800b704:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	68db      	ldr	r3, [r3, #12]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d102      	bne.n	800b714 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800b70e:	2300      	movs	r3, #0
 800b710:	73fb      	strb	r3, [r7, #15]
 800b712:	e008      	b.n	800b726 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	68db      	ldr	r3, [r3, #12]
 800b718:	2b02      	cmp	r3, #2
 800b71a:	d102      	bne.n	800b722 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800b71c:	2301      	movs	r3, #1
 800b71e:	73fb      	strb	r3, [r7, #15]
 800b720:	e001      	b.n	800b726 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800b722:	f7f5 faf3 	bl	8000d0c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b72c:	7bfa      	ldrb	r2, [r7, #15]
 800b72e:	4611      	mov	r1, r2
 800b730:	4618      	mov	r0, r3
 800b732:	f7fb ff3e 	bl	80075b2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b73c:	4618      	mov	r0, r3
 800b73e:	f7fb fee6 	bl	800750e <USBD_LL_Reset>
}
 800b742:	bf00      	nop
 800b744:	3710      	adds	r7, #16
 800b746:	46bd      	mov	sp, r7
 800b748:	bd80      	pop	{r7, pc}
	...

0800b74c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b082      	sub	sp, #8
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b75a:	4618      	mov	r0, r3
 800b75c:	f7fb ff39 	bl	80075d2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	687a      	ldr	r2, [r7, #4]
 800b76c:	6812      	ldr	r2, [r2, #0]
 800b76e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b772:	f043 0301 	orr.w	r3, r3, #1
 800b776:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	6a1b      	ldr	r3, [r3, #32]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d005      	beq.n	800b78c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b780:	4b04      	ldr	r3, [pc, #16]	; (800b794 <HAL_PCD_SuspendCallback+0x48>)
 800b782:	691b      	ldr	r3, [r3, #16]
 800b784:	4a03      	ldr	r2, [pc, #12]	; (800b794 <HAL_PCD_SuspendCallback+0x48>)
 800b786:	f043 0306 	orr.w	r3, r3, #6
 800b78a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b78c:	bf00      	nop
 800b78e:	3708      	adds	r7, #8
 800b790:	46bd      	mov	sp, r7
 800b792:	bd80      	pop	{r7, pc}
 800b794:	e000ed00 	.word	0xe000ed00

0800b798 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b082      	sub	sp, #8
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	f7fb ff29 	bl	80075fe <USBD_LL_Resume>
}
 800b7ac:	bf00      	nop
 800b7ae:	3708      	adds	r7, #8
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	bd80      	pop	{r7, pc}

0800b7b4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b082      	sub	sp, #8
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
 800b7bc:	460b      	mov	r3, r1
 800b7be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b7c6:	78fa      	ldrb	r2, [r7, #3]
 800b7c8:	4611      	mov	r1, r2
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	f7fb ff81 	bl	80076d2 <USBD_LL_IsoOUTIncomplete>
}
 800b7d0:	bf00      	nop
 800b7d2:	3708      	adds	r7, #8
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd80      	pop	{r7, pc}

0800b7d8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b082      	sub	sp, #8
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
 800b7e0:	460b      	mov	r3, r1
 800b7e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b7ea:	78fa      	ldrb	r2, [r7, #3]
 800b7ec:	4611      	mov	r1, r2
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	f7fb ff3d 	bl	800766e <USBD_LL_IsoINIncomplete>
}
 800b7f4:	bf00      	nop
 800b7f6:	3708      	adds	r7, #8
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	bd80      	pop	{r7, pc}

0800b7fc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b082      	sub	sp, #8
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b80a:	4618      	mov	r0, r3
 800b80c:	f7fb ff93 	bl	8007736 <USBD_LL_DevConnected>
}
 800b810:	bf00      	nop
 800b812:	3708      	adds	r7, #8
 800b814:	46bd      	mov	sp, r7
 800b816:	bd80      	pop	{r7, pc}

0800b818 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b082      	sub	sp, #8
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b826:	4618      	mov	r0, r3
 800b828:	f7fb ff90 	bl	800774c <USBD_LL_DevDisconnected>
}
 800b82c:	bf00      	nop
 800b82e:	3708      	adds	r7, #8
 800b830:	46bd      	mov	sp, r7
 800b832:	bd80      	pop	{r7, pc}

0800b834 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b834:	b580      	push	{r7, lr}
 800b836:	b082      	sub	sp, #8
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	781b      	ldrb	r3, [r3, #0]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d13c      	bne.n	800b8be <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b844:	4a20      	ldr	r2, [pc, #128]	; (800b8c8 <USBD_LL_Init+0x94>)
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	4a1e      	ldr	r2, [pc, #120]	; (800b8c8 <USBD_LL_Init+0x94>)
 800b850:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b854:	4b1c      	ldr	r3, [pc, #112]	; (800b8c8 <USBD_LL_Init+0x94>)
 800b856:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b85a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800b85c:	4b1a      	ldr	r3, [pc, #104]	; (800b8c8 <USBD_LL_Init+0x94>)
 800b85e:	2204      	movs	r2, #4
 800b860:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b862:	4b19      	ldr	r3, [pc, #100]	; (800b8c8 <USBD_LL_Init+0x94>)
 800b864:	2202      	movs	r2, #2
 800b866:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b868:	4b17      	ldr	r3, [pc, #92]	; (800b8c8 <USBD_LL_Init+0x94>)
 800b86a:	2200      	movs	r2, #0
 800b86c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b86e:	4b16      	ldr	r3, [pc, #88]	; (800b8c8 <USBD_LL_Init+0x94>)
 800b870:	2202      	movs	r2, #2
 800b872:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b874:	4b14      	ldr	r3, [pc, #80]	; (800b8c8 <USBD_LL_Init+0x94>)
 800b876:	2200      	movs	r2, #0
 800b878:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b87a:	4b13      	ldr	r3, [pc, #76]	; (800b8c8 <USBD_LL_Init+0x94>)
 800b87c:	2200      	movs	r2, #0
 800b87e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b880:	4b11      	ldr	r3, [pc, #68]	; (800b8c8 <USBD_LL_Init+0x94>)
 800b882:	2200      	movs	r2, #0
 800b884:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b886:	4b10      	ldr	r3, [pc, #64]	; (800b8c8 <USBD_LL_Init+0x94>)
 800b888:	2200      	movs	r2, #0
 800b88a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b88c:	4b0e      	ldr	r3, [pc, #56]	; (800b8c8 <USBD_LL_Init+0x94>)
 800b88e:	2200      	movs	r2, #0
 800b890:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b892:	480d      	ldr	r0, [pc, #52]	; (800b8c8 <USBD_LL_Init+0x94>)
 800b894:	f7f6 fb21 	bl	8001eda <HAL_PCD_Init>
 800b898:	4603      	mov	r3, r0
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d001      	beq.n	800b8a2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b89e:	f7f5 fa35 	bl	8000d0c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b8a2:	2180      	movs	r1, #128	; 0x80
 800b8a4:	4808      	ldr	r0, [pc, #32]	; (800b8c8 <USBD_LL_Init+0x94>)
 800b8a6:	f7f7 fd78 	bl	800339a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b8aa:	2240      	movs	r2, #64	; 0x40
 800b8ac:	2100      	movs	r1, #0
 800b8ae:	4806      	ldr	r0, [pc, #24]	; (800b8c8 <USBD_LL_Init+0x94>)
 800b8b0:	f7f7 fd2c 	bl	800330c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b8b4:	2280      	movs	r2, #128	; 0x80
 800b8b6:	2101      	movs	r1, #1
 800b8b8:	4803      	ldr	r0, [pc, #12]	; (800b8c8 <USBD_LL_Init+0x94>)
 800b8ba:	f7f7 fd27 	bl	800330c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b8be:	2300      	movs	r3, #0
}
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	3708      	adds	r7, #8
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	bd80      	pop	{r7, pc}
 800b8c8:	20006138 	.word	0x20006138

0800b8cc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b084      	sub	sp, #16
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b8d8:	2300      	movs	r3, #0
 800b8da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	f7f6 fc16 	bl	8002114 <HAL_PCD_Start>
 800b8e8:	4603      	mov	r3, r0
 800b8ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b8ec:	7bfb      	ldrb	r3, [r7, #15]
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	f000 f942 	bl	800bb78 <USBD_Get_USB_Status>
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b8f8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	3710      	adds	r7, #16
 800b8fe:	46bd      	mov	sp, r7
 800b900:	bd80      	pop	{r7, pc}

0800b902 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b902:	b580      	push	{r7, lr}
 800b904:	b084      	sub	sp, #16
 800b906:	af00      	add	r7, sp, #0
 800b908:	6078      	str	r0, [r7, #4]
 800b90a:	4608      	mov	r0, r1
 800b90c:	4611      	mov	r1, r2
 800b90e:	461a      	mov	r2, r3
 800b910:	4603      	mov	r3, r0
 800b912:	70fb      	strb	r3, [r7, #3]
 800b914:	460b      	mov	r3, r1
 800b916:	70bb      	strb	r3, [r7, #2]
 800b918:	4613      	mov	r3, r2
 800b91a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b91c:	2300      	movs	r3, #0
 800b91e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b920:	2300      	movs	r3, #0
 800b922:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b92a:	78bb      	ldrb	r3, [r7, #2]
 800b92c:	883a      	ldrh	r2, [r7, #0]
 800b92e:	78f9      	ldrb	r1, [r7, #3]
 800b930:	f7f7 f8e7 	bl	8002b02 <HAL_PCD_EP_Open>
 800b934:	4603      	mov	r3, r0
 800b936:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b938:	7bfb      	ldrb	r3, [r7, #15]
 800b93a:	4618      	mov	r0, r3
 800b93c:	f000 f91c 	bl	800bb78 <USBD_Get_USB_Status>
 800b940:	4603      	mov	r3, r0
 800b942:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b944:	7bbb      	ldrb	r3, [r7, #14]
}
 800b946:	4618      	mov	r0, r3
 800b948:	3710      	adds	r7, #16
 800b94a:	46bd      	mov	sp, r7
 800b94c:	bd80      	pop	{r7, pc}

0800b94e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b94e:	b580      	push	{r7, lr}
 800b950:	b084      	sub	sp, #16
 800b952:	af00      	add	r7, sp, #0
 800b954:	6078      	str	r0, [r7, #4]
 800b956:	460b      	mov	r3, r1
 800b958:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b95a:	2300      	movs	r3, #0
 800b95c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b95e:	2300      	movs	r3, #0
 800b960:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b968:	78fa      	ldrb	r2, [r7, #3]
 800b96a:	4611      	mov	r1, r2
 800b96c:	4618      	mov	r0, r3
 800b96e:	f7f7 f930 	bl	8002bd2 <HAL_PCD_EP_Close>
 800b972:	4603      	mov	r3, r0
 800b974:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b976:	7bfb      	ldrb	r3, [r7, #15]
 800b978:	4618      	mov	r0, r3
 800b97a:	f000 f8fd 	bl	800bb78 <USBD_Get_USB_Status>
 800b97e:	4603      	mov	r3, r0
 800b980:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b982:	7bbb      	ldrb	r3, [r7, #14]
}
 800b984:	4618      	mov	r0, r3
 800b986:	3710      	adds	r7, #16
 800b988:	46bd      	mov	sp, r7
 800b98a:	bd80      	pop	{r7, pc}

0800b98c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b084      	sub	sp, #16
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
 800b994:	460b      	mov	r3, r1
 800b996:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b998:	2300      	movs	r3, #0
 800b99a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b99c:	2300      	movs	r3, #0
 800b99e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b9a6:	78fa      	ldrb	r2, [r7, #3]
 800b9a8:	4611      	mov	r1, r2
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	f7f7 fa08 	bl	8002dc0 <HAL_PCD_EP_SetStall>
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9b4:	7bfb      	ldrb	r3, [r7, #15]
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	f000 f8de 	bl	800bb78 <USBD_Get_USB_Status>
 800b9bc:	4603      	mov	r3, r0
 800b9be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b9c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	3710      	adds	r7, #16
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	bd80      	pop	{r7, pc}

0800b9ca <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b9ca:	b580      	push	{r7, lr}
 800b9cc:	b084      	sub	sp, #16
 800b9ce:	af00      	add	r7, sp, #0
 800b9d0:	6078      	str	r0, [r7, #4]
 800b9d2:	460b      	mov	r3, r1
 800b9d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9da:	2300      	movs	r3, #0
 800b9dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b9e4:	78fa      	ldrb	r2, [r7, #3]
 800b9e6:	4611      	mov	r1, r2
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	f7f7 fa4d 	bl	8002e88 <HAL_PCD_EP_ClrStall>
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9f2:	7bfb      	ldrb	r3, [r7, #15]
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	f000 f8bf 	bl	800bb78 <USBD_Get_USB_Status>
 800b9fa:	4603      	mov	r3, r0
 800b9fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b9fe:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba00:	4618      	mov	r0, r3
 800ba02:	3710      	adds	r7, #16
 800ba04:	46bd      	mov	sp, r7
 800ba06:	bd80      	pop	{r7, pc}

0800ba08 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba08:	b480      	push	{r7}
 800ba0a:	b085      	sub	sp, #20
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
 800ba10:	460b      	mov	r3, r1
 800ba12:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ba1a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ba1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	da0b      	bge.n	800ba3c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ba24:	78fb      	ldrb	r3, [r7, #3]
 800ba26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ba2a:	68f9      	ldr	r1, [r7, #12]
 800ba2c:	4613      	mov	r3, r2
 800ba2e:	00db      	lsls	r3, r3, #3
 800ba30:	4413      	add	r3, r2
 800ba32:	009b      	lsls	r3, r3, #2
 800ba34:	440b      	add	r3, r1
 800ba36:	333e      	adds	r3, #62	; 0x3e
 800ba38:	781b      	ldrb	r3, [r3, #0]
 800ba3a:	e00b      	b.n	800ba54 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ba3c:	78fb      	ldrb	r3, [r7, #3]
 800ba3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ba42:	68f9      	ldr	r1, [r7, #12]
 800ba44:	4613      	mov	r3, r2
 800ba46:	00db      	lsls	r3, r3, #3
 800ba48:	4413      	add	r3, r2
 800ba4a:	009b      	lsls	r3, r3, #2
 800ba4c:	440b      	add	r3, r1
 800ba4e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800ba52:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ba54:	4618      	mov	r0, r3
 800ba56:	3714      	adds	r7, #20
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5e:	4770      	bx	lr

0800ba60 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b084      	sub	sp, #16
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]
 800ba68:	460b      	mov	r3, r1
 800ba6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba70:	2300      	movs	r3, #0
 800ba72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ba7a:	78fa      	ldrb	r2, [r7, #3]
 800ba7c:	4611      	mov	r1, r2
 800ba7e:	4618      	mov	r0, r3
 800ba80:	f7f7 f81a 	bl	8002ab8 <HAL_PCD_SetAddress>
 800ba84:	4603      	mov	r3, r0
 800ba86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba88:	7bfb      	ldrb	r3, [r7, #15]
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	f000 f874 	bl	800bb78 <USBD_Get_USB_Status>
 800ba90:	4603      	mov	r3, r0
 800ba92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba94:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba96:	4618      	mov	r0, r3
 800ba98:	3710      	adds	r7, #16
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	bd80      	pop	{r7, pc}

0800ba9e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ba9e:	b580      	push	{r7, lr}
 800baa0:	b086      	sub	sp, #24
 800baa2:	af00      	add	r7, sp, #0
 800baa4:	60f8      	str	r0, [r7, #12]
 800baa6:	607a      	str	r2, [r7, #4]
 800baa8:	603b      	str	r3, [r7, #0]
 800baaa:	460b      	mov	r3, r1
 800baac:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800baae:	2300      	movs	r3, #0
 800bab0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bab2:	2300      	movs	r3, #0
 800bab4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800babc:	7af9      	ldrb	r1, [r7, #11]
 800babe:	683b      	ldr	r3, [r7, #0]
 800bac0:	687a      	ldr	r2, [r7, #4]
 800bac2:	f7f7 f933 	bl	8002d2c <HAL_PCD_EP_Transmit>
 800bac6:	4603      	mov	r3, r0
 800bac8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800baca:	7dfb      	ldrb	r3, [r7, #23]
 800bacc:	4618      	mov	r0, r3
 800bace:	f000 f853 	bl	800bb78 <USBD_Get_USB_Status>
 800bad2:	4603      	mov	r3, r0
 800bad4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bad6:	7dbb      	ldrb	r3, [r7, #22]
}
 800bad8:	4618      	mov	r0, r3
 800bada:	3718      	adds	r7, #24
 800badc:	46bd      	mov	sp, r7
 800bade:	bd80      	pop	{r7, pc}

0800bae0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b086      	sub	sp, #24
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	60f8      	str	r0, [r7, #12]
 800bae8:	607a      	str	r2, [r7, #4]
 800baea:	603b      	str	r3, [r7, #0]
 800baec:	460b      	mov	r3, r1
 800baee:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800baf0:	2300      	movs	r3, #0
 800baf2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800baf4:	2300      	movs	r3, #0
 800baf6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bafe:	7af9      	ldrb	r1, [r7, #11]
 800bb00:	683b      	ldr	r3, [r7, #0]
 800bb02:	687a      	ldr	r2, [r7, #4]
 800bb04:	f7f7 f8af 	bl	8002c66 <HAL_PCD_EP_Receive>
 800bb08:	4603      	mov	r3, r0
 800bb0a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb0c:	7dfb      	ldrb	r3, [r7, #23]
 800bb0e:	4618      	mov	r0, r3
 800bb10:	f000 f832 	bl	800bb78 <USBD_Get_USB_Status>
 800bb14:	4603      	mov	r3, r0
 800bb16:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bb18:	7dbb      	ldrb	r3, [r7, #22]
}
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	3718      	adds	r7, #24
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	bd80      	pop	{r7, pc}

0800bb22 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bb22:	b580      	push	{r7, lr}
 800bb24:	b082      	sub	sp, #8
 800bb26:	af00      	add	r7, sp, #0
 800bb28:	6078      	str	r0, [r7, #4]
 800bb2a:	460b      	mov	r3, r1
 800bb2c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bb34:	78fa      	ldrb	r2, [r7, #3]
 800bb36:	4611      	mov	r1, r2
 800bb38:	4618      	mov	r0, r3
 800bb3a:	f7f7 f8df 	bl	8002cfc <HAL_PCD_EP_GetRxCount>
 800bb3e:	4603      	mov	r3, r0
}
 800bb40:	4618      	mov	r0, r3
 800bb42:	3708      	adds	r7, #8
 800bb44:	46bd      	mov	sp, r7
 800bb46:	bd80      	pop	{r7, pc}

0800bb48 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bb48:	b480      	push	{r7}
 800bb4a:	b083      	sub	sp, #12
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bb50:	4b03      	ldr	r3, [pc, #12]	; (800bb60 <USBD_static_malloc+0x18>)
}
 800bb52:	4618      	mov	r0, r3
 800bb54:	370c      	adds	r7, #12
 800bb56:	46bd      	mov	sp, r7
 800bb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5c:	4770      	bx	lr
 800bb5e:	bf00      	nop
 800bb60:	20006644 	.word	0x20006644

0800bb64 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bb64:	b480      	push	{r7}
 800bb66:	b083      	sub	sp, #12
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]

}
 800bb6c:	bf00      	nop
 800bb6e:	370c      	adds	r7, #12
 800bb70:	46bd      	mov	sp, r7
 800bb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb76:	4770      	bx	lr

0800bb78 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bb78:	b480      	push	{r7}
 800bb7a:	b085      	sub	sp, #20
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	4603      	mov	r3, r0
 800bb80:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb82:	2300      	movs	r3, #0
 800bb84:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bb86:	79fb      	ldrb	r3, [r7, #7]
 800bb88:	2b03      	cmp	r3, #3
 800bb8a:	d817      	bhi.n	800bbbc <USBD_Get_USB_Status+0x44>
 800bb8c:	a201      	add	r2, pc, #4	; (adr r2, 800bb94 <USBD_Get_USB_Status+0x1c>)
 800bb8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb92:	bf00      	nop
 800bb94:	0800bba5 	.word	0x0800bba5
 800bb98:	0800bbab 	.word	0x0800bbab
 800bb9c:	0800bbb1 	.word	0x0800bbb1
 800bba0:	0800bbb7 	.word	0x0800bbb7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bba4:	2300      	movs	r3, #0
 800bba6:	73fb      	strb	r3, [r7, #15]
    break;
 800bba8:	e00b      	b.n	800bbc2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bbaa:	2303      	movs	r3, #3
 800bbac:	73fb      	strb	r3, [r7, #15]
    break;
 800bbae:	e008      	b.n	800bbc2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bbb0:	2301      	movs	r3, #1
 800bbb2:	73fb      	strb	r3, [r7, #15]
    break;
 800bbb4:	e005      	b.n	800bbc2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bbb6:	2303      	movs	r3, #3
 800bbb8:	73fb      	strb	r3, [r7, #15]
    break;
 800bbba:	e002      	b.n	800bbc2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bbbc:	2303      	movs	r3, #3
 800bbbe:	73fb      	strb	r3, [r7, #15]
    break;
 800bbc0:	bf00      	nop
  }
  return usb_status;
 800bbc2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	3714      	adds	r7, #20
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbce:	4770      	bx	lr

0800bbd0 <_ZdlPvj>:
 800bbd0:	f000 b975 	b.w	800bebe <_ZdlPv>

0800bbd4 <_ZNSaIcEC1Ev>:
 800bbd4:	4770      	bx	lr

0800bbd6 <_ZNSaIcED1Ev>:
 800bbd6:	4770      	bx	lr

0800bbd8 <_ZSt17__throw_bad_allocv>:
 800bbd8:	b508      	push	{r3, lr}
 800bbda:	f000 f98b 	bl	800bef4 <abort>

0800bbde <_ZSt19__throw_logic_errorPKc>:
 800bbde:	b508      	push	{r3, lr}
 800bbe0:	f000 f988 	bl	800bef4 <abort>

0800bbe4 <_ZSt20__throw_length_errorPKc>:
 800bbe4:	b508      	push	{r3, lr}
 800bbe6:	f000 f985 	bl	800bef4 <abort>

0800bbea <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 800bbea:	b10a      	cbz	r2, 800bbf0 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 800bbec:	f000 b9c6 	b.w	800bf7c <memcpy>
 800bbf0:	4770      	bx	lr

0800bbf2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 800bbf2:	6001      	str	r1, [r0, #0]
 800bbf4:	4770      	bx	lr

0800bbf6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 800bbf6:	6800      	ldr	r0, [r0, #0]
 800bbf8:	4770      	bx	lr

0800bbfa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 800bbfa:	3008      	adds	r0, #8
 800bbfc:	4770      	bx	lr

0800bbfe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 800bbfe:	6081      	str	r1, [r0, #8]
 800bc00:	4770      	bx	lr

0800bc02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 800bc02:	6803      	ldr	r3, [r0, #0]
 800bc04:	6041      	str	r1, [r0, #4]
 800bc06:	2200      	movs	r2, #0
 800bc08:	545a      	strb	r2, [r3, r1]
 800bc0a:	4770      	bx	lr

0800bc0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 800bc0c:	b508      	push	{r3, lr}
 800bc0e:	680b      	ldr	r3, [r1, #0]
 800bc10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc14:	d302      	bcc.n	800bc1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 800bc16:	480d      	ldr	r0, [pc, #52]	; (800bc4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 800bc18:	f7ff ffe4 	bl	800bbe4 <_ZSt20__throw_length_errorPKc>
 800bc1c:	4293      	cmp	r3, r2
 800bc1e:	d90b      	bls.n	800bc38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800bc20:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 800bc24:	ea4f 0042 	mov.w	r0, r2, lsl #1
 800bc28:	d206      	bcs.n	800bc38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800bc2a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800bc2e:	bf2a      	itet	cs
 800bc30:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 800bc34:	6008      	strcc	r0, [r1, #0]
 800bc36:	600b      	strcs	r3, [r1, #0]
 800bc38:	6808      	ldr	r0, [r1, #0]
 800bc3a:	3001      	adds	r0, #1
 800bc3c:	d501      	bpl.n	800bc42 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 800bc3e:	f7ff ffcb 	bl	800bbd8 <_ZSt17__throw_bad_allocv>
 800bc42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800bc46:	f000 b93c 	b.w	800bec2 <_Znwj>
 800bc4a:	bf00      	nop
 800bc4c:	0800cc78 	.word	0x0800cc78

0800bc50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 800bc50:	f850 3b08 	ldr.w	r3, [r0], #8
 800bc54:	4283      	cmp	r3, r0
 800bc56:	d002      	beq.n	800bc5e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 800bc58:	4618      	mov	r0, r3
 800bc5a:	f000 b930 	b.w	800bebe <_ZdlPv>
 800bc5e:	4770      	bx	lr

0800bc60 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 800bc60:	6840      	ldr	r0, [r0, #4]
 800bc62:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800bc66:	3901      	subs	r1, #1
 800bc68:	1a09      	subs	r1, r1, r0
 800bc6a:	4291      	cmp	r1, r2
 800bc6c:	b508      	push	{r3, lr}
 800bc6e:	d202      	bcs.n	800bc76 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 800bc70:	4618      	mov	r0, r3
 800bc72:	f7ff ffb7 	bl	800bbe4 <_ZSt20__throw_length_errorPKc>
 800bc76:	bd08      	pop	{r3, pc}

0800bc78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 800bc78:	2a01      	cmp	r2, #1
 800bc7a:	b410      	push	{r4}
 800bc7c:	d104      	bne.n	800bc88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 800bc7e:	780a      	ldrb	r2, [r1, #0]
 800bc80:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc84:	7002      	strb	r2, [r0, #0]
 800bc86:	4770      	bx	lr
 800bc88:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc8c:	f7ff bfad 	b.w	800bbea <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

0800bc90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>:
 800bc90:	460b      	mov	r3, r1
 800bc92:	2b01      	cmp	r3, #1
 800bc94:	b410      	push	{r4}
 800bc96:	4611      	mov	r1, r2
 800bc98:	4604      	mov	r4, r0
 800bc9a:	d103      	bne.n	800bca4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0x14>
 800bc9c:	7022      	strb	r2, [r4, #0]
 800bc9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bca2:	4770      	bx	lr
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d0fa      	beq.n	800bc9e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0xe>
 800bca8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bcac:	461a      	mov	r2, r3
 800bcae:	f000 b98d 	b.w	800bfcc <memset>

0800bcb2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc>:
 800bcb2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bcb4:	290f      	cmp	r1, #15
 800bcb6:	4604      	mov	r4, r0
 800bcb8:	9101      	str	r1, [sp, #4]
 800bcba:	4615      	mov	r5, r2
 800bcbc:	d906      	bls.n	800bccc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc+0x1a>
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	a901      	add	r1, sp, #4
 800bcc2:	f7ff ffa3 	bl	800bc0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800bcc6:	9b01      	ldr	r3, [sp, #4]
 800bcc8:	6020      	str	r0, [r4, #0]
 800bcca:	60a3      	str	r3, [r4, #8]
 800bccc:	9901      	ldr	r1, [sp, #4]
 800bcce:	b119      	cbz	r1, 800bcd8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc+0x26>
 800bcd0:	6820      	ldr	r0, [r4, #0]
 800bcd2:	462a      	mov	r2, r5
 800bcd4:	f7ff ffdc 	bl	800bc90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>
 800bcd8:	9b01      	ldr	r3, [sp, #4]
 800bcda:	6822      	ldr	r2, [r4, #0]
 800bcdc:	6063      	str	r3, [r4, #4]
 800bcde:	2100      	movs	r1, #0
 800bce0:	54d1      	strb	r1, [r2, r3]
 800bce2:	b003      	add	sp, #12
 800bce4:	bd30      	pop	{r4, r5, pc}

0800bce6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 800bce6:	b508      	push	{r3, lr}
 800bce8:	1a52      	subs	r2, r2, r1
 800bcea:	f7ff ffc5 	bl	800bc78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800bcee:	bd08      	pop	{r3, pc}

0800bcf0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 800bcf0:	b508      	push	{r3, lr}
 800bcf2:	1a52      	subs	r2, r2, r1
 800bcf4:	f7ff ffc0 	bl	800bc78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800bcf8:	bd08      	pop	{r3, pc}

0800bcfa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 800bcfa:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800bcfe:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800bd00:	461f      	mov	r7, r3
 800bd02:	6843      	ldr	r3, [r0, #4]
 800bd04:	eb01 0802 	add.w	r8, r1, r2
 800bd08:	1ab2      	subs	r2, r6, r2
 800bd0a:	441a      	add	r2, r3
 800bd0c:	eba3 0908 	sub.w	r9, r3, r8
 800bd10:	4603      	mov	r3, r0
 800bd12:	9201      	str	r2, [sp, #4]
 800bd14:	f853 2b08 	ldr.w	r2, [r3], #8
 800bd18:	429a      	cmp	r2, r3
 800bd1a:	bf18      	it	ne
 800bd1c:	6882      	ldrne	r2, [r0, #8]
 800bd1e:	460d      	mov	r5, r1
 800bd20:	bf08      	it	eq
 800bd22:	220f      	moveq	r2, #15
 800bd24:	a901      	add	r1, sp, #4
 800bd26:	4604      	mov	r4, r0
 800bd28:	f7ff ff70 	bl	800bc0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800bd2c:	4682      	mov	sl, r0
 800bd2e:	b11d      	cbz	r5, 800bd38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 800bd30:	6821      	ldr	r1, [r4, #0]
 800bd32:	462a      	mov	r2, r5
 800bd34:	f7ff ffa0 	bl	800bc78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800bd38:	b137      	cbz	r7, 800bd48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 800bd3a:	b12e      	cbz	r6, 800bd48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 800bd3c:	4632      	mov	r2, r6
 800bd3e:	4639      	mov	r1, r7
 800bd40:	eb0a 0005 	add.w	r0, sl, r5
 800bd44:	f7ff ff98 	bl	800bc78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800bd48:	f1b9 0f00 	cmp.w	r9, #0
 800bd4c:	d007      	beq.n	800bd5e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
 800bd4e:	6821      	ldr	r1, [r4, #0]
 800bd50:	4435      	add	r5, r6
 800bd52:	464a      	mov	r2, r9
 800bd54:	4441      	add	r1, r8
 800bd56:	eb0a 0005 	add.w	r0, sl, r5
 800bd5a:	f7ff ff8d 	bl	800bc78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800bd5e:	4620      	mov	r0, r4
 800bd60:	f7ff ff76 	bl	800bc50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800bd64:	9b01      	ldr	r3, [sp, #4]
 800bd66:	f8c4 a000 	str.w	sl, [r4]
 800bd6a:	60a3      	str	r3, [r4, #8]
 800bd6c:	b002      	add	sp, #8
 800bd6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800bd72 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EjcRKS3_>:
 800bd72:	b510      	push	{r4, lr}
 800bd74:	f100 0308 	add.w	r3, r0, #8
 800bd78:	4604      	mov	r4, r0
 800bd7a:	6003      	str	r3, [r0, #0]
 800bd7c:	f7ff ff99 	bl	800bcb2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc>
 800bd80:	4620      	mov	r0, r4
 800bd82:	bd10      	pop	{r4, pc}

0800bd84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 800bd84:	b570      	push	{r4, r5, r6, lr}
 800bd86:	4604      	mov	r4, r0
 800bd88:	460e      	mov	r6, r1
 800bd8a:	3008      	adds	r0, #8
 800bd8c:	6020      	str	r0, [r4, #0]
 800bd8e:	f856 3b08 	ldr.w	r3, [r6], #8
 800bd92:	429e      	cmp	r6, r3
 800bd94:	460d      	mov	r5, r1
 800bd96:	d10b      	bne.n	800bdb0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x2c>
 800bd98:	2210      	movs	r2, #16
 800bd9a:	4631      	mov	r1, r6
 800bd9c:	f7ff ff25 	bl	800bbea <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>
 800bda0:	686b      	ldr	r3, [r5, #4]
 800bda2:	6063      	str	r3, [r4, #4]
 800bda4:	2300      	movs	r3, #0
 800bda6:	602e      	str	r6, [r5, #0]
 800bda8:	606b      	str	r3, [r5, #4]
 800bdaa:	722b      	strb	r3, [r5, #8]
 800bdac:	4620      	mov	r0, r4
 800bdae:	bd70      	pop	{r4, r5, r6, pc}
 800bdb0:	6023      	str	r3, [r4, #0]
 800bdb2:	688b      	ldr	r3, [r1, #8]
 800bdb4:	60a3      	str	r3, [r4, #8]
 800bdb6:	e7f3      	b.n	800bda0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x1c>

0800bdb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 800bdb8:	b510      	push	{r4, lr}
 800bdba:	4604      	mov	r4, r0
 800bdbc:	f7ff ff48 	bl	800bc50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800bdc0:	4620      	mov	r0, r4
 800bdc2:	bd10      	pop	{r4, pc}

0800bdc4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
 800bdc4:	6840      	ldr	r0, [r0, #4]
 800bdc6:	4770      	bx	lr

0800bdc8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
 800bdc8:	6840      	ldr	r0, [r0, #4]
 800bdca:	4770      	bx	lr

0800bdcc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 800bdcc:	6800      	ldr	r0, [r0, #0]
 800bdce:	4408      	add	r0, r1
 800bdd0:	4770      	bx	lr

0800bdd2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 800bdd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bdd4:	4604      	mov	r4, r0
 800bdd6:	4623      	mov	r3, r4
 800bdd8:	6840      	ldr	r0, [r0, #4]
 800bdda:	f853 6b08 	ldr.w	r6, [r3], #8
 800bdde:	429e      	cmp	r6, r3
 800bde0:	bf18      	it	ne
 800bde2:	68a3      	ldrne	r3, [r4, #8]
 800bde4:	eb00 0502 	add.w	r5, r0, r2
 800bde8:	bf08      	it	eq
 800bdea:	230f      	moveq	r3, #15
 800bdec:	429d      	cmp	r5, r3
 800bdee:	d80a      	bhi.n	800be06 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x34>
 800bdf0:	b112      	cbz	r2, 800bdf8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>
 800bdf2:	4430      	add	r0, r6
 800bdf4:	f7ff ff40 	bl	800bc78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800bdf8:	6823      	ldr	r3, [r4, #0]
 800bdfa:	6065      	str	r5, [r4, #4]
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	4620      	mov	r0, r4
 800be00:	555a      	strb	r2, [r3, r5]
 800be02:	b002      	add	sp, #8
 800be04:	bd70      	pop	{r4, r5, r6, pc}
 800be06:	9200      	str	r2, [sp, #0]
 800be08:	460b      	mov	r3, r1
 800be0a:	2200      	movs	r2, #0
 800be0c:	4601      	mov	r1, r0
 800be0e:	4620      	mov	r0, r4
 800be10:	f7ff ff73 	bl	800bcfa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 800be14:	e7f0      	b.n	800bdf8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>
	...

0800be18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>:
 800be18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800be1a:	4604      	mov	r4, r0
 800be1c:	4608      	mov	r0, r1
 800be1e:	460d      	mov	r5, r1
 800be20:	f7f4 fa26 	bl	8000270 <strlen>
 800be24:	4b06      	ldr	r3, [pc, #24]	; (800be40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc+0x28>)
 800be26:	9001      	str	r0, [sp, #4]
 800be28:	4602      	mov	r2, r0
 800be2a:	2100      	movs	r1, #0
 800be2c:	4620      	mov	r0, r4
 800be2e:	f7ff ff17 	bl	800bc60 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 800be32:	9a01      	ldr	r2, [sp, #4]
 800be34:	4629      	mov	r1, r5
 800be36:	4620      	mov	r0, r4
 800be38:	f7ff ffcb 	bl	800bdd2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 800be3c:	b003      	add	sp, #12
 800be3e:	bd30      	pop	{r4, r5, pc}
 800be40:	0800cc90 	.word	0x0800cc90

0800be44 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 800be44:	6800      	ldr	r0, [r0, #0]
 800be46:	4770      	bx	lr

0800be48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 800be48:	6001      	str	r1, [r0, #0]
 800be4a:	4770      	bx	lr

0800be4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 800be4c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800be4e:	4604      	mov	r4, r0
 800be50:	4616      	mov	r6, r2
 800be52:	460d      	mov	r5, r1
 800be54:	b919      	cbnz	r1, 800be5e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800be56:	b112      	cbz	r2, 800be5e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800be58:	480d      	ldr	r0, [pc, #52]	; (800be90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 800be5a:	f7ff fec0 	bl	800bbde <_ZSt19__throw_logic_errorPKc>
 800be5e:	1b73      	subs	r3, r6, r5
 800be60:	2b0f      	cmp	r3, #15
 800be62:	9301      	str	r3, [sp, #4]
 800be64:	d907      	bls.n	800be76 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 800be66:	2200      	movs	r2, #0
 800be68:	a901      	add	r1, sp, #4
 800be6a:	4620      	mov	r0, r4
 800be6c:	f7ff fece 	bl	800bc0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800be70:	9b01      	ldr	r3, [sp, #4]
 800be72:	6020      	str	r0, [r4, #0]
 800be74:	60a3      	str	r3, [r4, #8]
 800be76:	4632      	mov	r2, r6
 800be78:	4629      	mov	r1, r5
 800be7a:	6820      	ldr	r0, [r4, #0]
 800be7c:	f7ff ff38 	bl	800bcf0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 800be80:	9b01      	ldr	r3, [sp, #4]
 800be82:	6822      	ldr	r2, [r4, #0]
 800be84:	6063      	str	r3, [r4, #4]
 800be86:	2100      	movs	r1, #0
 800be88:	54d1      	strb	r1, [r2, r3]
 800be8a:	b002      	add	sp, #8
 800be8c:	bd70      	pop	{r4, r5, r6, pc}
 800be8e:	bf00      	nop
 800be90:	0800cca5 	.word	0x0800cca5

0800be94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 800be94:	b538      	push	{r3, r4, r5, lr}
 800be96:	f100 0308 	add.w	r3, r0, #8
 800be9a:	4604      	mov	r4, r0
 800be9c:	6003      	str	r3, [r0, #0]
 800be9e:	460d      	mov	r5, r1
 800bea0:	b159      	cbz	r1, 800beba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 800bea2:	4608      	mov	r0, r1
 800bea4:	f7f4 f9e4 	bl	8000270 <strlen>
 800bea8:	182a      	adds	r2, r5, r0
 800beaa:	4620      	mov	r0, r4
 800beac:	f04f 0300 	mov.w	r3, #0
 800beb0:	4629      	mov	r1, r5
 800beb2:	f7ff ffcb 	bl	800be4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 800beb6:	4620      	mov	r0, r4
 800beb8:	bd38      	pop	{r3, r4, r5, pc}
 800beba:	2201      	movs	r2, #1
 800bebc:	e7f5      	b.n	800beaa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

0800bebe <_ZdlPv>:
 800bebe:	f000 b855 	b.w	800bf6c <free>

0800bec2 <_Znwj>:
 800bec2:	2801      	cmp	r0, #1
 800bec4:	bf38      	it	cc
 800bec6:	2001      	movcc	r0, #1
 800bec8:	b510      	push	{r4, lr}
 800beca:	4604      	mov	r4, r0
 800becc:	4620      	mov	r0, r4
 800bece:	f000 f845 	bl	800bf5c <malloc>
 800bed2:	b930      	cbnz	r0, 800bee2 <_Znwj+0x20>
 800bed4:	f000 f806 	bl	800bee4 <_ZSt15get_new_handlerv>
 800bed8:	b908      	cbnz	r0, 800bede <_Znwj+0x1c>
 800beda:	f000 f80b 	bl	800bef4 <abort>
 800bede:	4780      	blx	r0
 800bee0:	e7f4      	b.n	800becc <_Znwj+0xa>
 800bee2:	bd10      	pop	{r4, pc}

0800bee4 <_ZSt15get_new_handlerv>:
 800bee4:	4b02      	ldr	r3, [pc, #8]	; (800bef0 <_ZSt15get_new_handlerv+0xc>)
 800bee6:	6818      	ldr	r0, [r3, #0]
 800bee8:	f3bf 8f5b 	dmb	ish
 800beec:	4770      	bx	lr
 800beee:	bf00      	nop
 800bef0:	20006864 	.word	0x20006864

0800bef4 <abort>:
 800bef4:	b508      	push	{r3, lr}
 800bef6:	2006      	movs	r0, #6
 800bef8:	f000 f9f2 	bl	800c2e0 <raise>
 800befc:	2001      	movs	r0, #1
 800befe:	f7f5 fc59 	bl	80017b4 <_exit>
	...

0800bf04 <__errno>:
 800bf04:	4b01      	ldr	r3, [pc, #4]	; (800bf0c <__errno+0x8>)
 800bf06:	6818      	ldr	r0, [r3, #0]
 800bf08:	4770      	bx	lr
 800bf0a:	bf00      	nop
 800bf0c:	20000100 	.word	0x20000100

0800bf10 <__libc_init_array>:
 800bf10:	b570      	push	{r4, r5, r6, lr}
 800bf12:	4d0d      	ldr	r5, [pc, #52]	; (800bf48 <__libc_init_array+0x38>)
 800bf14:	4c0d      	ldr	r4, [pc, #52]	; (800bf4c <__libc_init_array+0x3c>)
 800bf16:	1b64      	subs	r4, r4, r5
 800bf18:	10a4      	asrs	r4, r4, #2
 800bf1a:	2600      	movs	r6, #0
 800bf1c:	42a6      	cmp	r6, r4
 800bf1e:	d109      	bne.n	800bf34 <__libc_init_array+0x24>
 800bf20:	4d0b      	ldr	r5, [pc, #44]	; (800bf50 <__libc_init_array+0x40>)
 800bf22:	4c0c      	ldr	r4, [pc, #48]	; (800bf54 <__libc_init_array+0x44>)
 800bf24:	f000 fd66 	bl	800c9f4 <_init>
 800bf28:	1b64      	subs	r4, r4, r5
 800bf2a:	10a4      	asrs	r4, r4, #2
 800bf2c:	2600      	movs	r6, #0
 800bf2e:	42a6      	cmp	r6, r4
 800bf30:	d105      	bne.n	800bf3e <__libc_init_array+0x2e>
 800bf32:	bd70      	pop	{r4, r5, r6, pc}
 800bf34:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf38:	4798      	blx	r3
 800bf3a:	3601      	adds	r6, #1
 800bf3c:	e7ee      	b.n	800bf1c <__libc_init_array+0xc>
 800bf3e:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf42:	4798      	blx	r3
 800bf44:	3601      	adds	r6, #1
 800bf46:	e7f2      	b.n	800bf2e <__libc_init_array+0x1e>
 800bf48:	0800cd6c 	.word	0x0800cd6c
 800bf4c:	0800cd6c 	.word	0x0800cd6c
 800bf50:	0800cd6c 	.word	0x0800cd6c
 800bf54:	0800cd7c 	.word	0x0800cd7c

0800bf58 <__retarget_lock_acquire_recursive>:
 800bf58:	4770      	bx	lr

0800bf5a <__retarget_lock_release_recursive>:
 800bf5a:	4770      	bx	lr

0800bf5c <malloc>:
 800bf5c:	4b02      	ldr	r3, [pc, #8]	; (800bf68 <malloc+0xc>)
 800bf5e:	4601      	mov	r1, r0
 800bf60:	6818      	ldr	r0, [r3, #0]
 800bf62:	f000 b8a7 	b.w	800c0b4 <_malloc_r>
 800bf66:	bf00      	nop
 800bf68:	20000100 	.word	0x20000100

0800bf6c <free>:
 800bf6c:	4b02      	ldr	r3, [pc, #8]	; (800bf78 <free+0xc>)
 800bf6e:	4601      	mov	r1, r0
 800bf70:	6818      	ldr	r0, [r3, #0]
 800bf72:	f000 b833 	b.w	800bfdc <_free_r>
 800bf76:	bf00      	nop
 800bf78:	20000100 	.word	0x20000100

0800bf7c <memcpy>:
 800bf7c:	440a      	add	r2, r1
 800bf7e:	4291      	cmp	r1, r2
 800bf80:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800bf84:	d100      	bne.n	800bf88 <memcpy+0xc>
 800bf86:	4770      	bx	lr
 800bf88:	b510      	push	{r4, lr}
 800bf8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bf92:	4291      	cmp	r1, r2
 800bf94:	d1f9      	bne.n	800bf8a <memcpy+0xe>
 800bf96:	bd10      	pop	{r4, pc}

0800bf98 <memmove>:
 800bf98:	4288      	cmp	r0, r1
 800bf9a:	b510      	push	{r4, lr}
 800bf9c:	eb01 0402 	add.w	r4, r1, r2
 800bfa0:	d902      	bls.n	800bfa8 <memmove+0x10>
 800bfa2:	4284      	cmp	r4, r0
 800bfa4:	4623      	mov	r3, r4
 800bfa6:	d807      	bhi.n	800bfb8 <memmove+0x20>
 800bfa8:	1e43      	subs	r3, r0, #1
 800bfaa:	42a1      	cmp	r1, r4
 800bfac:	d008      	beq.n	800bfc0 <memmove+0x28>
 800bfae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bfb2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bfb6:	e7f8      	b.n	800bfaa <memmove+0x12>
 800bfb8:	4402      	add	r2, r0
 800bfba:	4601      	mov	r1, r0
 800bfbc:	428a      	cmp	r2, r1
 800bfbe:	d100      	bne.n	800bfc2 <memmove+0x2a>
 800bfc0:	bd10      	pop	{r4, pc}
 800bfc2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bfc6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bfca:	e7f7      	b.n	800bfbc <memmove+0x24>

0800bfcc <memset>:
 800bfcc:	4402      	add	r2, r0
 800bfce:	4603      	mov	r3, r0
 800bfd0:	4293      	cmp	r3, r2
 800bfd2:	d100      	bne.n	800bfd6 <memset+0xa>
 800bfd4:	4770      	bx	lr
 800bfd6:	f803 1b01 	strb.w	r1, [r3], #1
 800bfda:	e7f9      	b.n	800bfd0 <memset+0x4>

0800bfdc <_free_r>:
 800bfdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bfde:	2900      	cmp	r1, #0
 800bfe0:	d044      	beq.n	800c06c <_free_r+0x90>
 800bfe2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bfe6:	9001      	str	r0, [sp, #4]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	f1a1 0404 	sub.w	r4, r1, #4
 800bfee:	bfb8      	it	lt
 800bff0:	18e4      	addlt	r4, r4, r3
 800bff2:	f000 f9cb 	bl	800c38c <__malloc_lock>
 800bff6:	4a1e      	ldr	r2, [pc, #120]	; (800c070 <_free_r+0x94>)
 800bff8:	9801      	ldr	r0, [sp, #4]
 800bffa:	6813      	ldr	r3, [r2, #0]
 800bffc:	b933      	cbnz	r3, 800c00c <_free_r+0x30>
 800bffe:	6063      	str	r3, [r4, #4]
 800c000:	6014      	str	r4, [r2, #0]
 800c002:	b003      	add	sp, #12
 800c004:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c008:	f000 b9c6 	b.w	800c398 <__malloc_unlock>
 800c00c:	42a3      	cmp	r3, r4
 800c00e:	d908      	bls.n	800c022 <_free_r+0x46>
 800c010:	6825      	ldr	r5, [r4, #0]
 800c012:	1961      	adds	r1, r4, r5
 800c014:	428b      	cmp	r3, r1
 800c016:	bf01      	itttt	eq
 800c018:	6819      	ldreq	r1, [r3, #0]
 800c01a:	685b      	ldreq	r3, [r3, #4]
 800c01c:	1949      	addeq	r1, r1, r5
 800c01e:	6021      	streq	r1, [r4, #0]
 800c020:	e7ed      	b.n	800bffe <_free_r+0x22>
 800c022:	461a      	mov	r2, r3
 800c024:	685b      	ldr	r3, [r3, #4]
 800c026:	b10b      	cbz	r3, 800c02c <_free_r+0x50>
 800c028:	42a3      	cmp	r3, r4
 800c02a:	d9fa      	bls.n	800c022 <_free_r+0x46>
 800c02c:	6811      	ldr	r1, [r2, #0]
 800c02e:	1855      	adds	r5, r2, r1
 800c030:	42a5      	cmp	r5, r4
 800c032:	d10b      	bne.n	800c04c <_free_r+0x70>
 800c034:	6824      	ldr	r4, [r4, #0]
 800c036:	4421      	add	r1, r4
 800c038:	1854      	adds	r4, r2, r1
 800c03a:	42a3      	cmp	r3, r4
 800c03c:	6011      	str	r1, [r2, #0]
 800c03e:	d1e0      	bne.n	800c002 <_free_r+0x26>
 800c040:	681c      	ldr	r4, [r3, #0]
 800c042:	685b      	ldr	r3, [r3, #4]
 800c044:	6053      	str	r3, [r2, #4]
 800c046:	4421      	add	r1, r4
 800c048:	6011      	str	r1, [r2, #0]
 800c04a:	e7da      	b.n	800c002 <_free_r+0x26>
 800c04c:	d902      	bls.n	800c054 <_free_r+0x78>
 800c04e:	230c      	movs	r3, #12
 800c050:	6003      	str	r3, [r0, #0]
 800c052:	e7d6      	b.n	800c002 <_free_r+0x26>
 800c054:	6825      	ldr	r5, [r4, #0]
 800c056:	1961      	adds	r1, r4, r5
 800c058:	428b      	cmp	r3, r1
 800c05a:	bf04      	itt	eq
 800c05c:	6819      	ldreq	r1, [r3, #0]
 800c05e:	685b      	ldreq	r3, [r3, #4]
 800c060:	6063      	str	r3, [r4, #4]
 800c062:	bf04      	itt	eq
 800c064:	1949      	addeq	r1, r1, r5
 800c066:	6021      	streq	r1, [r4, #0]
 800c068:	6054      	str	r4, [r2, #4]
 800c06a:	e7ca      	b.n	800c002 <_free_r+0x26>
 800c06c:	b003      	add	sp, #12
 800c06e:	bd30      	pop	{r4, r5, pc}
 800c070:	2000686c 	.word	0x2000686c

0800c074 <sbrk_aligned>:
 800c074:	b570      	push	{r4, r5, r6, lr}
 800c076:	4e0e      	ldr	r6, [pc, #56]	; (800c0b0 <sbrk_aligned+0x3c>)
 800c078:	460c      	mov	r4, r1
 800c07a:	6831      	ldr	r1, [r6, #0]
 800c07c:	4605      	mov	r5, r0
 800c07e:	b911      	cbnz	r1, 800c086 <sbrk_aligned+0x12>
 800c080:	f000 f8f6 	bl	800c270 <_sbrk_r>
 800c084:	6030      	str	r0, [r6, #0]
 800c086:	4621      	mov	r1, r4
 800c088:	4628      	mov	r0, r5
 800c08a:	f000 f8f1 	bl	800c270 <_sbrk_r>
 800c08e:	1c43      	adds	r3, r0, #1
 800c090:	d00a      	beq.n	800c0a8 <sbrk_aligned+0x34>
 800c092:	1cc4      	adds	r4, r0, #3
 800c094:	f024 0403 	bic.w	r4, r4, #3
 800c098:	42a0      	cmp	r0, r4
 800c09a:	d007      	beq.n	800c0ac <sbrk_aligned+0x38>
 800c09c:	1a21      	subs	r1, r4, r0
 800c09e:	4628      	mov	r0, r5
 800c0a0:	f000 f8e6 	bl	800c270 <_sbrk_r>
 800c0a4:	3001      	adds	r0, #1
 800c0a6:	d101      	bne.n	800c0ac <sbrk_aligned+0x38>
 800c0a8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c0ac:	4620      	mov	r0, r4
 800c0ae:	bd70      	pop	{r4, r5, r6, pc}
 800c0b0:	20006870 	.word	0x20006870

0800c0b4 <_malloc_r>:
 800c0b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0b8:	1ccd      	adds	r5, r1, #3
 800c0ba:	f025 0503 	bic.w	r5, r5, #3
 800c0be:	3508      	adds	r5, #8
 800c0c0:	2d0c      	cmp	r5, #12
 800c0c2:	bf38      	it	cc
 800c0c4:	250c      	movcc	r5, #12
 800c0c6:	2d00      	cmp	r5, #0
 800c0c8:	4607      	mov	r7, r0
 800c0ca:	db01      	blt.n	800c0d0 <_malloc_r+0x1c>
 800c0cc:	42a9      	cmp	r1, r5
 800c0ce:	d905      	bls.n	800c0dc <_malloc_r+0x28>
 800c0d0:	230c      	movs	r3, #12
 800c0d2:	603b      	str	r3, [r7, #0]
 800c0d4:	2600      	movs	r6, #0
 800c0d6:	4630      	mov	r0, r6
 800c0d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0dc:	4e2e      	ldr	r6, [pc, #184]	; (800c198 <_malloc_r+0xe4>)
 800c0de:	f000 f955 	bl	800c38c <__malloc_lock>
 800c0e2:	6833      	ldr	r3, [r6, #0]
 800c0e4:	461c      	mov	r4, r3
 800c0e6:	bb34      	cbnz	r4, 800c136 <_malloc_r+0x82>
 800c0e8:	4629      	mov	r1, r5
 800c0ea:	4638      	mov	r0, r7
 800c0ec:	f7ff ffc2 	bl	800c074 <sbrk_aligned>
 800c0f0:	1c43      	adds	r3, r0, #1
 800c0f2:	4604      	mov	r4, r0
 800c0f4:	d14d      	bne.n	800c192 <_malloc_r+0xde>
 800c0f6:	6834      	ldr	r4, [r6, #0]
 800c0f8:	4626      	mov	r6, r4
 800c0fa:	2e00      	cmp	r6, #0
 800c0fc:	d140      	bne.n	800c180 <_malloc_r+0xcc>
 800c0fe:	6823      	ldr	r3, [r4, #0]
 800c100:	4631      	mov	r1, r6
 800c102:	4638      	mov	r0, r7
 800c104:	eb04 0803 	add.w	r8, r4, r3
 800c108:	f000 f8b2 	bl	800c270 <_sbrk_r>
 800c10c:	4580      	cmp	r8, r0
 800c10e:	d13a      	bne.n	800c186 <_malloc_r+0xd2>
 800c110:	6821      	ldr	r1, [r4, #0]
 800c112:	3503      	adds	r5, #3
 800c114:	1a6d      	subs	r5, r5, r1
 800c116:	f025 0503 	bic.w	r5, r5, #3
 800c11a:	3508      	adds	r5, #8
 800c11c:	2d0c      	cmp	r5, #12
 800c11e:	bf38      	it	cc
 800c120:	250c      	movcc	r5, #12
 800c122:	4629      	mov	r1, r5
 800c124:	4638      	mov	r0, r7
 800c126:	f7ff ffa5 	bl	800c074 <sbrk_aligned>
 800c12a:	3001      	adds	r0, #1
 800c12c:	d02b      	beq.n	800c186 <_malloc_r+0xd2>
 800c12e:	6823      	ldr	r3, [r4, #0]
 800c130:	442b      	add	r3, r5
 800c132:	6023      	str	r3, [r4, #0]
 800c134:	e00e      	b.n	800c154 <_malloc_r+0xa0>
 800c136:	6822      	ldr	r2, [r4, #0]
 800c138:	1b52      	subs	r2, r2, r5
 800c13a:	d41e      	bmi.n	800c17a <_malloc_r+0xc6>
 800c13c:	2a0b      	cmp	r2, #11
 800c13e:	d916      	bls.n	800c16e <_malloc_r+0xba>
 800c140:	1961      	adds	r1, r4, r5
 800c142:	42a3      	cmp	r3, r4
 800c144:	6025      	str	r5, [r4, #0]
 800c146:	bf18      	it	ne
 800c148:	6059      	strne	r1, [r3, #4]
 800c14a:	6863      	ldr	r3, [r4, #4]
 800c14c:	bf08      	it	eq
 800c14e:	6031      	streq	r1, [r6, #0]
 800c150:	5162      	str	r2, [r4, r5]
 800c152:	604b      	str	r3, [r1, #4]
 800c154:	4638      	mov	r0, r7
 800c156:	f104 060b 	add.w	r6, r4, #11
 800c15a:	f000 f91d 	bl	800c398 <__malloc_unlock>
 800c15e:	f026 0607 	bic.w	r6, r6, #7
 800c162:	1d23      	adds	r3, r4, #4
 800c164:	1af2      	subs	r2, r6, r3
 800c166:	d0b6      	beq.n	800c0d6 <_malloc_r+0x22>
 800c168:	1b9b      	subs	r3, r3, r6
 800c16a:	50a3      	str	r3, [r4, r2]
 800c16c:	e7b3      	b.n	800c0d6 <_malloc_r+0x22>
 800c16e:	6862      	ldr	r2, [r4, #4]
 800c170:	42a3      	cmp	r3, r4
 800c172:	bf0c      	ite	eq
 800c174:	6032      	streq	r2, [r6, #0]
 800c176:	605a      	strne	r2, [r3, #4]
 800c178:	e7ec      	b.n	800c154 <_malloc_r+0xa0>
 800c17a:	4623      	mov	r3, r4
 800c17c:	6864      	ldr	r4, [r4, #4]
 800c17e:	e7b2      	b.n	800c0e6 <_malloc_r+0x32>
 800c180:	4634      	mov	r4, r6
 800c182:	6876      	ldr	r6, [r6, #4]
 800c184:	e7b9      	b.n	800c0fa <_malloc_r+0x46>
 800c186:	230c      	movs	r3, #12
 800c188:	603b      	str	r3, [r7, #0]
 800c18a:	4638      	mov	r0, r7
 800c18c:	f000 f904 	bl	800c398 <__malloc_unlock>
 800c190:	e7a1      	b.n	800c0d6 <_malloc_r+0x22>
 800c192:	6025      	str	r5, [r4, #0]
 800c194:	e7de      	b.n	800c154 <_malloc_r+0xa0>
 800c196:	bf00      	nop
 800c198:	2000686c 	.word	0x2000686c

0800c19c <cleanup_glue>:
 800c19c:	b538      	push	{r3, r4, r5, lr}
 800c19e:	460c      	mov	r4, r1
 800c1a0:	6809      	ldr	r1, [r1, #0]
 800c1a2:	4605      	mov	r5, r0
 800c1a4:	b109      	cbz	r1, 800c1aa <cleanup_glue+0xe>
 800c1a6:	f7ff fff9 	bl	800c19c <cleanup_glue>
 800c1aa:	4621      	mov	r1, r4
 800c1ac:	4628      	mov	r0, r5
 800c1ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c1b2:	f7ff bf13 	b.w	800bfdc <_free_r>
	...

0800c1b8 <_reclaim_reent>:
 800c1b8:	4b2c      	ldr	r3, [pc, #176]	; (800c26c <_reclaim_reent+0xb4>)
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	4283      	cmp	r3, r0
 800c1be:	b570      	push	{r4, r5, r6, lr}
 800c1c0:	4604      	mov	r4, r0
 800c1c2:	d051      	beq.n	800c268 <_reclaim_reent+0xb0>
 800c1c4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c1c6:	b143      	cbz	r3, 800c1da <_reclaim_reent+0x22>
 800c1c8:	68db      	ldr	r3, [r3, #12]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d14a      	bne.n	800c264 <_reclaim_reent+0xac>
 800c1ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c1d0:	6819      	ldr	r1, [r3, #0]
 800c1d2:	b111      	cbz	r1, 800c1da <_reclaim_reent+0x22>
 800c1d4:	4620      	mov	r0, r4
 800c1d6:	f7ff ff01 	bl	800bfdc <_free_r>
 800c1da:	6961      	ldr	r1, [r4, #20]
 800c1dc:	b111      	cbz	r1, 800c1e4 <_reclaim_reent+0x2c>
 800c1de:	4620      	mov	r0, r4
 800c1e0:	f7ff fefc 	bl	800bfdc <_free_r>
 800c1e4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c1e6:	b111      	cbz	r1, 800c1ee <_reclaim_reent+0x36>
 800c1e8:	4620      	mov	r0, r4
 800c1ea:	f7ff fef7 	bl	800bfdc <_free_r>
 800c1ee:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c1f0:	b111      	cbz	r1, 800c1f8 <_reclaim_reent+0x40>
 800c1f2:	4620      	mov	r0, r4
 800c1f4:	f7ff fef2 	bl	800bfdc <_free_r>
 800c1f8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c1fa:	b111      	cbz	r1, 800c202 <_reclaim_reent+0x4a>
 800c1fc:	4620      	mov	r0, r4
 800c1fe:	f7ff feed 	bl	800bfdc <_free_r>
 800c202:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800c204:	b111      	cbz	r1, 800c20c <_reclaim_reent+0x54>
 800c206:	4620      	mov	r0, r4
 800c208:	f7ff fee8 	bl	800bfdc <_free_r>
 800c20c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800c20e:	b111      	cbz	r1, 800c216 <_reclaim_reent+0x5e>
 800c210:	4620      	mov	r0, r4
 800c212:	f7ff fee3 	bl	800bfdc <_free_r>
 800c216:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800c218:	b111      	cbz	r1, 800c220 <_reclaim_reent+0x68>
 800c21a:	4620      	mov	r0, r4
 800c21c:	f7ff fede 	bl	800bfdc <_free_r>
 800c220:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c222:	b111      	cbz	r1, 800c22a <_reclaim_reent+0x72>
 800c224:	4620      	mov	r0, r4
 800c226:	f7ff fed9 	bl	800bfdc <_free_r>
 800c22a:	69a3      	ldr	r3, [r4, #24]
 800c22c:	b1e3      	cbz	r3, 800c268 <_reclaim_reent+0xb0>
 800c22e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c230:	4620      	mov	r0, r4
 800c232:	4798      	blx	r3
 800c234:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c236:	b1b9      	cbz	r1, 800c268 <_reclaim_reent+0xb0>
 800c238:	4620      	mov	r0, r4
 800c23a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c23e:	f7ff bfad 	b.w	800c19c <cleanup_glue>
 800c242:	5949      	ldr	r1, [r1, r5]
 800c244:	b941      	cbnz	r1, 800c258 <_reclaim_reent+0xa0>
 800c246:	3504      	adds	r5, #4
 800c248:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c24a:	2d80      	cmp	r5, #128	; 0x80
 800c24c:	68d9      	ldr	r1, [r3, #12]
 800c24e:	d1f8      	bne.n	800c242 <_reclaim_reent+0x8a>
 800c250:	4620      	mov	r0, r4
 800c252:	f7ff fec3 	bl	800bfdc <_free_r>
 800c256:	e7ba      	b.n	800c1ce <_reclaim_reent+0x16>
 800c258:	680e      	ldr	r6, [r1, #0]
 800c25a:	4620      	mov	r0, r4
 800c25c:	f7ff febe 	bl	800bfdc <_free_r>
 800c260:	4631      	mov	r1, r6
 800c262:	e7ef      	b.n	800c244 <_reclaim_reent+0x8c>
 800c264:	2500      	movs	r5, #0
 800c266:	e7ef      	b.n	800c248 <_reclaim_reent+0x90>
 800c268:	bd70      	pop	{r4, r5, r6, pc}
 800c26a:	bf00      	nop
 800c26c:	20000100 	.word	0x20000100

0800c270 <_sbrk_r>:
 800c270:	b538      	push	{r3, r4, r5, lr}
 800c272:	4d06      	ldr	r5, [pc, #24]	; (800c28c <_sbrk_r+0x1c>)
 800c274:	2300      	movs	r3, #0
 800c276:	4604      	mov	r4, r0
 800c278:	4608      	mov	r0, r1
 800c27a:	602b      	str	r3, [r5, #0]
 800c27c:	f7f5 faa4 	bl	80017c8 <_sbrk>
 800c280:	1c43      	adds	r3, r0, #1
 800c282:	d102      	bne.n	800c28a <_sbrk_r+0x1a>
 800c284:	682b      	ldr	r3, [r5, #0]
 800c286:	b103      	cbz	r3, 800c28a <_sbrk_r+0x1a>
 800c288:	6023      	str	r3, [r4, #0]
 800c28a:	bd38      	pop	{r3, r4, r5, pc}
 800c28c:	20006874 	.word	0x20006874

0800c290 <_raise_r>:
 800c290:	291f      	cmp	r1, #31
 800c292:	b538      	push	{r3, r4, r5, lr}
 800c294:	4604      	mov	r4, r0
 800c296:	460d      	mov	r5, r1
 800c298:	d904      	bls.n	800c2a4 <_raise_r+0x14>
 800c29a:	2316      	movs	r3, #22
 800c29c:	6003      	str	r3, [r0, #0]
 800c29e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c2a2:	bd38      	pop	{r3, r4, r5, pc}
 800c2a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c2a6:	b112      	cbz	r2, 800c2ae <_raise_r+0x1e>
 800c2a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c2ac:	b94b      	cbnz	r3, 800c2c2 <_raise_r+0x32>
 800c2ae:	4620      	mov	r0, r4
 800c2b0:	f000 f830 	bl	800c314 <_getpid_r>
 800c2b4:	462a      	mov	r2, r5
 800c2b6:	4601      	mov	r1, r0
 800c2b8:	4620      	mov	r0, r4
 800c2ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c2be:	f000 b817 	b.w	800c2f0 <_kill_r>
 800c2c2:	2b01      	cmp	r3, #1
 800c2c4:	d00a      	beq.n	800c2dc <_raise_r+0x4c>
 800c2c6:	1c59      	adds	r1, r3, #1
 800c2c8:	d103      	bne.n	800c2d2 <_raise_r+0x42>
 800c2ca:	2316      	movs	r3, #22
 800c2cc:	6003      	str	r3, [r0, #0]
 800c2ce:	2001      	movs	r0, #1
 800c2d0:	e7e7      	b.n	800c2a2 <_raise_r+0x12>
 800c2d2:	2400      	movs	r4, #0
 800c2d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c2d8:	4628      	mov	r0, r5
 800c2da:	4798      	blx	r3
 800c2dc:	2000      	movs	r0, #0
 800c2de:	e7e0      	b.n	800c2a2 <_raise_r+0x12>

0800c2e0 <raise>:
 800c2e0:	4b02      	ldr	r3, [pc, #8]	; (800c2ec <raise+0xc>)
 800c2e2:	4601      	mov	r1, r0
 800c2e4:	6818      	ldr	r0, [r3, #0]
 800c2e6:	f7ff bfd3 	b.w	800c290 <_raise_r>
 800c2ea:	bf00      	nop
 800c2ec:	20000100 	.word	0x20000100

0800c2f0 <_kill_r>:
 800c2f0:	b538      	push	{r3, r4, r5, lr}
 800c2f2:	4d07      	ldr	r5, [pc, #28]	; (800c310 <_kill_r+0x20>)
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	4604      	mov	r4, r0
 800c2f8:	4608      	mov	r0, r1
 800c2fa:	4611      	mov	r1, r2
 800c2fc:	602b      	str	r3, [r5, #0]
 800c2fe:	f7f5 fa49 	bl	8001794 <_kill>
 800c302:	1c43      	adds	r3, r0, #1
 800c304:	d102      	bne.n	800c30c <_kill_r+0x1c>
 800c306:	682b      	ldr	r3, [r5, #0]
 800c308:	b103      	cbz	r3, 800c30c <_kill_r+0x1c>
 800c30a:	6023      	str	r3, [r4, #0]
 800c30c:	bd38      	pop	{r3, r4, r5, pc}
 800c30e:	bf00      	nop
 800c310:	20006874 	.word	0x20006874

0800c314 <_getpid_r>:
 800c314:	f7f5 ba36 	b.w	8001784 <_getpid>

0800c318 <_vsniprintf_r>:
 800c318:	b530      	push	{r4, r5, lr}
 800c31a:	4614      	mov	r4, r2
 800c31c:	2c00      	cmp	r4, #0
 800c31e:	b09b      	sub	sp, #108	; 0x6c
 800c320:	4605      	mov	r5, r0
 800c322:	461a      	mov	r2, r3
 800c324:	da05      	bge.n	800c332 <_vsniprintf_r+0x1a>
 800c326:	238b      	movs	r3, #139	; 0x8b
 800c328:	6003      	str	r3, [r0, #0]
 800c32a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c32e:	b01b      	add	sp, #108	; 0x6c
 800c330:	bd30      	pop	{r4, r5, pc}
 800c332:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c336:	f8ad 300c 	strh.w	r3, [sp, #12]
 800c33a:	bf14      	ite	ne
 800c33c:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800c340:	4623      	moveq	r3, r4
 800c342:	9302      	str	r3, [sp, #8]
 800c344:	9305      	str	r3, [sp, #20]
 800c346:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c34a:	9100      	str	r1, [sp, #0]
 800c34c:	9104      	str	r1, [sp, #16]
 800c34e:	f8ad 300e 	strh.w	r3, [sp, #14]
 800c352:	4669      	mov	r1, sp
 800c354:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c356:	f000 f881 	bl	800c45c <_svfiprintf_r>
 800c35a:	1c43      	adds	r3, r0, #1
 800c35c:	bfbc      	itt	lt
 800c35e:	238b      	movlt	r3, #139	; 0x8b
 800c360:	602b      	strlt	r3, [r5, #0]
 800c362:	2c00      	cmp	r4, #0
 800c364:	d0e3      	beq.n	800c32e <_vsniprintf_r+0x16>
 800c366:	9b00      	ldr	r3, [sp, #0]
 800c368:	2200      	movs	r2, #0
 800c36a:	701a      	strb	r2, [r3, #0]
 800c36c:	e7df      	b.n	800c32e <_vsniprintf_r+0x16>
	...

0800c370 <vsniprintf>:
 800c370:	b507      	push	{r0, r1, r2, lr}
 800c372:	9300      	str	r3, [sp, #0]
 800c374:	4613      	mov	r3, r2
 800c376:	460a      	mov	r2, r1
 800c378:	4601      	mov	r1, r0
 800c37a:	4803      	ldr	r0, [pc, #12]	; (800c388 <vsniprintf+0x18>)
 800c37c:	6800      	ldr	r0, [r0, #0]
 800c37e:	f7ff ffcb 	bl	800c318 <_vsniprintf_r>
 800c382:	b003      	add	sp, #12
 800c384:	f85d fb04 	ldr.w	pc, [sp], #4
 800c388:	20000100 	.word	0x20000100

0800c38c <__malloc_lock>:
 800c38c:	4801      	ldr	r0, [pc, #4]	; (800c394 <__malloc_lock+0x8>)
 800c38e:	f7ff bde3 	b.w	800bf58 <__retarget_lock_acquire_recursive>
 800c392:	bf00      	nop
 800c394:	20006868 	.word	0x20006868

0800c398 <__malloc_unlock>:
 800c398:	4801      	ldr	r0, [pc, #4]	; (800c3a0 <__malloc_unlock+0x8>)
 800c39a:	f7ff bdde 	b.w	800bf5a <__retarget_lock_release_recursive>
 800c39e:	bf00      	nop
 800c3a0:	20006868 	.word	0x20006868

0800c3a4 <__ssputs_r>:
 800c3a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3a8:	688e      	ldr	r6, [r1, #8]
 800c3aa:	429e      	cmp	r6, r3
 800c3ac:	4682      	mov	sl, r0
 800c3ae:	460c      	mov	r4, r1
 800c3b0:	4690      	mov	r8, r2
 800c3b2:	461f      	mov	r7, r3
 800c3b4:	d838      	bhi.n	800c428 <__ssputs_r+0x84>
 800c3b6:	898a      	ldrh	r2, [r1, #12]
 800c3b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c3bc:	d032      	beq.n	800c424 <__ssputs_r+0x80>
 800c3be:	6825      	ldr	r5, [r4, #0]
 800c3c0:	6909      	ldr	r1, [r1, #16]
 800c3c2:	eba5 0901 	sub.w	r9, r5, r1
 800c3c6:	6965      	ldr	r5, [r4, #20]
 800c3c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c3cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c3d0:	3301      	adds	r3, #1
 800c3d2:	444b      	add	r3, r9
 800c3d4:	106d      	asrs	r5, r5, #1
 800c3d6:	429d      	cmp	r5, r3
 800c3d8:	bf38      	it	cc
 800c3da:	461d      	movcc	r5, r3
 800c3dc:	0553      	lsls	r3, r2, #21
 800c3de:	d531      	bpl.n	800c444 <__ssputs_r+0xa0>
 800c3e0:	4629      	mov	r1, r5
 800c3e2:	f7ff fe67 	bl	800c0b4 <_malloc_r>
 800c3e6:	4606      	mov	r6, r0
 800c3e8:	b950      	cbnz	r0, 800c400 <__ssputs_r+0x5c>
 800c3ea:	230c      	movs	r3, #12
 800c3ec:	f8ca 3000 	str.w	r3, [sl]
 800c3f0:	89a3      	ldrh	r3, [r4, #12]
 800c3f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3f6:	81a3      	strh	r3, [r4, #12]
 800c3f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c3fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c400:	6921      	ldr	r1, [r4, #16]
 800c402:	464a      	mov	r2, r9
 800c404:	f7ff fdba 	bl	800bf7c <memcpy>
 800c408:	89a3      	ldrh	r3, [r4, #12]
 800c40a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c40e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c412:	81a3      	strh	r3, [r4, #12]
 800c414:	6126      	str	r6, [r4, #16]
 800c416:	6165      	str	r5, [r4, #20]
 800c418:	444e      	add	r6, r9
 800c41a:	eba5 0509 	sub.w	r5, r5, r9
 800c41e:	6026      	str	r6, [r4, #0]
 800c420:	60a5      	str	r5, [r4, #8]
 800c422:	463e      	mov	r6, r7
 800c424:	42be      	cmp	r6, r7
 800c426:	d900      	bls.n	800c42a <__ssputs_r+0x86>
 800c428:	463e      	mov	r6, r7
 800c42a:	6820      	ldr	r0, [r4, #0]
 800c42c:	4632      	mov	r2, r6
 800c42e:	4641      	mov	r1, r8
 800c430:	f7ff fdb2 	bl	800bf98 <memmove>
 800c434:	68a3      	ldr	r3, [r4, #8]
 800c436:	1b9b      	subs	r3, r3, r6
 800c438:	60a3      	str	r3, [r4, #8]
 800c43a:	6823      	ldr	r3, [r4, #0]
 800c43c:	4433      	add	r3, r6
 800c43e:	6023      	str	r3, [r4, #0]
 800c440:	2000      	movs	r0, #0
 800c442:	e7db      	b.n	800c3fc <__ssputs_r+0x58>
 800c444:	462a      	mov	r2, r5
 800c446:	f000 fa9d 	bl	800c984 <_realloc_r>
 800c44a:	4606      	mov	r6, r0
 800c44c:	2800      	cmp	r0, #0
 800c44e:	d1e1      	bne.n	800c414 <__ssputs_r+0x70>
 800c450:	6921      	ldr	r1, [r4, #16]
 800c452:	4650      	mov	r0, sl
 800c454:	f7ff fdc2 	bl	800bfdc <_free_r>
 800c458:	e7c7      	b.n	800c3ea <__ssputs_r+0x46>
	...

0800c45c <_svfiprintf_r>:
 800c45c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c460:	4698      	mov	r8, r3
 800c462:	898b      	ldrh	r3, [r1, #12]
 800c464:	061b      	lsls	r3, r3, #24
 800c466:	b09d      	sub	sp, #116	; 0x74
 800c468:	4607      	mov	r7, r0
 800c46a:	460d      	mov	r5, r1
 800c46c:	4614      	mov	r4, r2
 800c46e:	d50e      	bpl.n	800c48e <_svfiprintf_r+0x32>
 800c470:	690b      	ldr	r3, [r1, #16]
 800c472:	b963      	cbnz	r3, 800c48e <_svfiprintf_r+0x32>
 800c474:	2140      	movs	r1, #64	; 0x40
 800c476:	f7ff fe1d 	bl	800c0b4 <_malloc_r>
 800c47a:	6028      	str	r0, [r5, #0]
 800c47c:	6128      	str	r0, [r5, #16]
 800c47e:	b920      	cbnz	r0, 800c48a <_svfiprintf_r+0x2e>
 800c480:	230c      	movs	r3, #12
 800c482:	603b      	str	r3, [r7, #0]
 800c484:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c488:	e0d1      	b.n	800c62e <_svfiprintf_r+0x1d2>
 800c48a:	2340      	movs	r3, #64	; 0x40
 800c48c:	616b      	str	r3, [r5, #20]
 800c48e:	2300      	movs	r3, #0
 800c490:	9309      	str	r3, [sp, #36]	; 0x24
 800c492:	2320      	movs	r3, #32
 800c494:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c498:	f8cd 800c 	str.w	r8, [sp, #12]
 800c49c:	2330      	movs	r3, #48	; 0x30
 800c49e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c648 <_svfiprintf_r+0x1ec>
 800c4a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c4a6:	f04f 0901 	mov.w	r9, #1
 800c4aa:	4623      	mov	r3, r4
 800c4ac:	469a      	mov	sl, r3
 800c4ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c4b2:	b10a      	cbz	r2, 800c4b8 <_svfiprintf_r+0x5c>
 800c4b4:	2a25      	cmp	r2, #37	; 0x25
 800c4b6:	d1f9      	bne.n	800c4ac <_svfiprintf_r+0x50>
 800c4b8:	ebba 0b04 	subs.w	fp, sl, r4
 800c4bc:	d00b      	beq.n	800c4d6 <_svfiprintf_r+0x7a>
 800c4be:	465b      	mov	r3, fp
 800c4c0:	4622      	mov	r2, r4
 800c4c2:	4629      	mov	r1, r5
 800c4c4:	4638      	mov	r0, r7
 800c4c6:	f7ff ff6d 	bl	800c3a4 <__ssputs_r>
 800c4ca:	3001      	adds	r0, #1
 800c4cc:	f000 80aa 	beq.w	800c624 <_svfiprintf_r+0x1c8>
 800c4d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c4d2:	445a      	add	r2, fp
 800c4d4:	9209      	str	r2, [sp, #36]	; 0x24
 800c4d6:	f89a 3000 	ldrb.w	r3, [sl]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	f000 80a2 	beq.w	800c624 <_svfiprintf_r+0x1c8>
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c4e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c4ea:	f10a 0a01 	add.w	sl, sl, #1
 800c4ee:	9304      	str	r3, [sp, #16]
 800c4f0:	9307      	str	r3, [sp, #28]
 800c4f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c4f6:	931a      	str	r3, [sp, #104]	; 0x68
 800c4f8:	4654      	mov	r4, sl
 800c4fa:	2205      	movs	r2, #5
 800c4fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c500:	4851      	ldr	r0, [pc, #324]	; (800c648 <_svfiprintf_r+0x1ec>)
 800c502:	f7f3 fe65 	bl	80001d0 <memchr>
 800c506:	9a04      	ldr	r2, [sp, #16]
 800c508:	b9d8      	cbnz	r0, 800c542 <_svfiprintf_r+0xe6>
 800c50a:	06d0      	lsls	r0, r2, #27
 800c50c:	bf44      	itt	mi
 800c50e:	2320      	movmi	r3, #32
 800c510:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c514:	0711      	lsls	r1, r2, #28
 800c516:	bf44      	itt	mi
 800c518:	232b      	movmi	r3, #43	; 0x2b
 800c51a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c51e:	f89a 3000 	ldrb.w	r3, [sl]
 800c522:	2b2a      	cmp	r3, #42	; 0x2a
 800c524:	d015      	beq.n	800c552 <_svfiprintf_r+0xf6>
 800c526:	9a07      	ldr	r2, [sp, #28]
 800c528:	4654      	mov	r4, sl
 800c52a:	2000      	movs	r0, #0
 800c52c:	f04f 0c0a 	mov.w	ip, #10
 800c530:	4621      	mov	r1, r4
 800c532:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c536:	3b30      	subs	r3, #48	; 0x30
 800c538:	2b09      	cmp	r3, #9
 800c53a:	d94e      	bls.n	800c5da <_svfiprintf_r+0x17e>
 800c53c:	b1b0      	cbz	r0, 800c56c <_svfiprintf_r+0x110>
 800c53e:	9207      	str	r2, [sp, #28]
 800c540:	e014      	b.n	800c56c <_svfiprintf_r+0x110>
 800c542:	eba0 0308 	sub.w	r3, r0, r8
 800c546:	fa09 f303 	lsl.w	r3, r9, r3
 800c54a:	4313      	orrs	r3, r2
 800c54c:	9304      	str	r3, [sp, #16]
 800c54e:	46a2      	mov	sl, r4
 800c550:	e7d2      	b.n	800c4f8 <_svfiprintf_r+0x9c>
 800c552:	9b03      	ldr	r3, [sp, #12]
 800c554:	1d19      	adds	r1, r3, #4
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	9103      	str	r1, [sp, #12]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	bfbb      	ittet	lt
 800c55e:	425b      	neglt	r3, r3
 800c560:	f042 0202 	orrlt.w	r2, r2, #2
 800c564:	9307      	strge	r3, [sp, #28]
 800c566:	9307      	strlt	r3, [sp, #28]
 800c568:	bfb8      	it	lt
 800c56a:	9204      	strlt	r2, [sp, #16]
 800c56c:	7823      	ldrb	r3, [r4, #0]
 800c56e:	2b2e      	cmp	r3, #46	; 0x2e
 800c570:	d10c      	bne.n	800c58c <_svfiprintf_r+0x130>
 800c572:	7863      	ldrb	r3, [r4, #1]
 800c574:	2b2a      	cmp	r3, #42	; 0x2a
 800c576:	d135      	bne.n	800c5e4 <_svfiprintf_r+0x188>
 800c578:	9b03      	ldr	r3, [sp, #12]
 800c57a:	1d1a      	adds	r2, r3, #4
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	9203      	str	r2, [sp, #12]
 800c580:	2b00      	cmp	r3, #0
 800c582:	bfb8      	it	lt
 800c584:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c588:	3402      	adds	r4, #2
 800c58a:	9305      	str	r3, [sp, #20]
 800c58c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c658 <_svfiprintf_r+0x1fc>
 800c590:	7821      	ldrb	r1, [r4, #0]
 800c592:	2203      	movs	r2, #3
 800c594:	4650      	mov	r0, sl
 800c596:	f7f3 fe1b 	bl	80001d0 <memchr>
 800c59a:	b140      	cbz	r0, 800c5ae <_svfiprintf_r+0x152>
 800c59c:	2340      	movs	r3, #64	; 0x40
 800c59e:	eba0 000a 	sub.w	r0, r0, sl
 800c5a2:	fa03 f000 	lsl.w	r0, r3, r0
 800c5a6:	9b04      	ldr	r3, [sp, #16]
 800c5a8:	4303      	orrs	r3, r0
 800c5aa:	3401      	adds	r4, #1
 800c5ac:	9304      	str	r3, [sp, #16]
 800c5ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5b2:	4826      	ldr	r0, [pc, #152]	; (800c64c <_svfiprintf_r+0x1f0>)
 800c5b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c5b8:	2206      	movs	r2, #6
 800c5ba:	f7f3 fe09 	bl	80001d0 <memchr>
 800c5be:	2800      	cmp	r0, #0
 800c5c0:	d038      	beq.n	800c634 <_svfiprintf_r+0x1d8>
 800c5c2:	4b23      	ldr	r3, [pc, #140]	; (800c650 <_svfiprintf_r+0x1f4>)
 800c5c4:	bb1b      	cbnz	r3, 800c60e <_svfiprintf_r+0x1b2>
 800c5c6:	9b03      	ldr	r3, [sp, #12]
 800c5c8:	3307      	adds	r3, #7
 800c5ca:	f023 0307 	bic.w	r3, r3, #7
 800c5ce:	3308      	adds	r3, #8
 800c5d0:	9303      	str	r3, [sp, #12]
 800c5d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5d4:	4433      	add	r3, r6
 800c5d6:	9309      	str	r3, [sp, #36]	; 0x24
 800c5d8:	e767      	b.n	800c4aa <_svfiprintf_r+0x4e>
 800c5da:	fb0c 3202 	mla	r2, ip, r2, r3
 800c5de:	460c      	mov	r4, r1
 800c5e0:	2001      	movs	r0, #1
 800c5e2:	e7a5      	b.n	800c530 <_svfiprintf_r+0xd4>
 800c5e4:	2300      	movs	r3, #0
 800c5e6:	3401      	adds	r4, #1
 800c5e8:	9305      	str	r3, [sp, #20]
 800c5ea:	4619      	mov	r1, r3
 800c5ec:	f04f 0c0a 	mov.w	ip, #10
 800c5f0:	4620      	mov	r0, r4
 800c5f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c5f6:	3a30      	subs	r2, #48	; 0x30
 800c5f8:	2a09      	cmp	r2, #9
 800c5fa:	d903      	bls.n	800c604 <_svfiprintf_r+0x1a8>
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d0c5      	beq.n	800c58c <_svfiprintf_r+0x130>
 800c600:	9105      	str	r1, [sp, #20]
 800c602:	e7c3      	b.n	800c58c <_svfiprintf_r+0x130>
 800c604:	fb0c 2101 	mla	r1, ip, r1, r2
 800c608:	4604      	mov	r4, r0
 800c60a:	2301      	movs	r3, #1
 800c60c:	e7f0      	b.n	800c5f0 <_svfiprintf_r+0x194>
 800c60e:	ab03      	add	r3, sp, #12
 800c610:	9300      	str	r3, [sp, #0]
 800c612:	462a      	mov	r2, r5
 800c614:	4b0f      	ldr	r3, [pc, #60]	; (800c654 <_svfiprintf_r+0x1f8>)
 800c616:	a904      	add	r1, sp, #16
 800c618:	4638      	mov	r0, r7
 800c61a:	f3af 8000 	nop.w
 800c61e:	1c42      	adds	r2, r0, #1
 800c620:	4606      	mov	r6, r0
 800c622:	d1d6      	bne.n	800c5d2 <_svfiprintf_r+0x176>
 800c624:	89ab      	ldrh	r3, [r5, #12]
 800c626:	065b      	lsls	r3, r3, #25
 800c628:	f53f af2c 	bmi.w	800c484 <_svfiprintf_r+0x28>
 800c62c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c62e:	b01d      	add	sp, #116	; 0x74
 800c630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c634:	ab03      	add	r3, sp, #12
 800c636:	9300      	str	r3, [sp, #0]
 800c638:	462a      	mov	r2, r5
 800c63a:	4b06      	ldr	r3, [pc, #24]	; (800c654 <_svfiprintf_r+0x1f8>)
 800c63c:	a904      	add	r1, sp, #16
 800c63e:	4638      	mov	r0, r7
 800c640:	f000 f87a 	bl	800c738 <_printf_i>
 800c644:	e7eb      	b.n	800c61e <_svfiprintf_r+0x1c2>
 800c646:	bf00      	nop
 800c648:	0800cd30 	.word	0x0800cd30
 800c64c:	0800cd3a 	.word	0x0800cd3a
 800c650:	00000000 	.word	0x00000000
 800c654:	0800c3a5 	.word	0x0800c3a5
 800c658:	0800cd36 	.word	0x0800cd36

0800c65c <_printf_common>:
 800c65c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c660:	4616      	mov	r6, r2
 800c662:	4699      	mov	r9, r3
 800c664:	688a      	ldr	r2, [r1, #8]
 800c666:	690b      	ldr	r3, [r1, #16]
 800c668:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c66c:	4293      	cmp	r3, r2
 800c66e:	bfb8      	it	lt
 800c670:	4613      	movlt	r3, r2
 800c672:	6033      	str	r3, [r6, #0]
 800c674:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c678:	4607      	mov	r7, r0
 800c67a:	460c      	mov	r4, r1
 800c67c:	b10a      	cbz	r2, 800c682 <_printf_common+0x26>
 800c67e:	3301      	adds	r3, #1
 800c680:	6033      	str	r3, [r6, #0]
 800c682:	6823      	ldr	r3, [r4, #0]
 800c684:	0699      	lsls	r1, r3, #26
 800c686:	bf42      	ittt	mi
 800c688:	6833      	ldrmi	r3, [r6, #0]
 800c68a:	3302      	addmi	r3, #2
 800c68c:	6033      	strmi	r3, [r6, #0]
 800c68e:	6825      	ldr	r5, [r4, #0]
 800c690:	f015 0506 	ands.w	r5, r5, #6
 800c694:	d106      	bne.n	800c6a4 <_printf_common+0x48>
 800c696:	f104 0a19 	add.w	sl, r4, #25
 800c69a:	68e3      	ldr	r3, [r4, #12]
 800c69c:	6832      	ldr	r2, [r6, #0]
 800c69e:	1a9b      	subs	r3, r3, r2
 800c6a0:	42ab      	cmp	r3, r5
 800c6a2:	dc26      	bgt.n	800c6f2 <_printf_common+0x96>
 800c6a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c6a8:	1e13      	subs	r3, r2, #0
 800c6aa:	6822      	ldr	r2, [r4, #0]
 800c6ac:	bf18      	it	ne
 800c6ae:	2301      	movne	r3, #1
 800c6b0:	0692      	lsls	r2, r2, #26
 800c6b2:	d42b      	bmi.n	800c70c <_printf_common+0xb0>
 800c6b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c6b8:	4649      	mov	r1, r9
 800c6ba:	4638      	mov	r0, r7
 800c6bc:	47c0      	blx	r8
 800c6be:	3001      	adds	r0, #1
 800c6c0:	d01e      	beq.n	800c700 <_printf_common+0xa4>
 800c6c2:	6823      	ldr	r3, [r4, #0]
 800c6c4:	68e5      	ldr	r5, [r4, #12]
 800c6c6:	6832      	ldr	r2, [r6, #0]
 800c6c8:	f003 0306 	and.w	r3, r3, #6
 800c6cc:	2b04      	cmp	r3, #4
 800c6ce:	bf08      	it	eq
 800c6d0:	1aad      	subeq	r5, r5, r2
 800c6d2:	68a3      	ldr	r3, [r4, #8]
 800c6d4:	6922      	ldr	r2, [r4, #16]
 800c6d6:	bf0c      	ite	eq
 800c6d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c6dc:	2500      	movne	r5, #0
 800c6de:	4293      	cmp	r3, r2
 800c6e0:	bfc4      	itt	gt
 800c6e2:	1a9b      	subgt	r3, r3, r2
 800c6e4:	18ed      	addgt	r5, r5, r3
 800c6e6:	2600      	movs	r6, #0
 800c6e8:	341a      	adds	r4, #26
 800c6ea:	42b5      	cmp	r5, r6
 800c6ec:	d11a      	bne.n	800c724 <_printf_common+0xc8>
 800c6ee:	2000      	movs	r0, #0
 800c6f0:	e008      	b.n	800c704 <_printf_common+0xa8>
 800c6f2:	2301      	movs	r3, #1
 800c6f4:	4652      	mov	r2, sl
 800c6f6:	4649      	mov	r1, r9
 800c6f8:	4638      	mov	r0, r7
 800c6fa:	47c0      	blx	r8
 800c6fc:	3001      	adds	r0, #1
 800c6fe:	d103      	bne.n	800c708 <_printf_common+0xac>
 800c700:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c708:	3501      	adds	r5, #1
 800c70a:	e7c6      	b.n	800c69a <_printf_common+0x3e>
 800c70c:	18e1      	adds	r1, r4, r3
 800c70e:	1c5a      	adds	r2, r3, #1
 800c710:	2030      	movs	r0, #48	; 0x30
 800c712:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c716:	4422      	add	r2, r4
 800c718:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c71c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c720:	3302      	adds	r3, #2
 800c722:	e7c7      	b.n	800c6b4 <_printf_common+0x58>
 800c724:	2301      	movs	r3, #1
 800c726:	4622      	mov	r2, r4
 800c728:	4649      	mov	r1, r9
 800c72a:	4638      	mov	r0, r7
 800c72c:	47c0      	blx	r8
 800c72e:	3001      	adds	r0, #1
 800c730:	d0e6      	beq.n	800c700 <_printf_common+0xa4>
 800c732:	3601      	adds	r6, #1
 800c734:	e7d9      	b.n	800c6ea <_printf_common+0x8e>
	...

0800c738 <_printf_i>:
 800c738:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c73c:	7e0f      	ldrb	r7, [r1, #24]
 800c73e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c740:	2f78      	cmp	r7, #120	; 0x78
 800c742:	4691      	mov	r9, r2
 800c744:	4680      	mov	r8, r0
 800c746:	460c      	mov	r4, r1
 800c748:	469a      	mov	sl, r3
 800c74a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c74e:	d807      	bhi.n	800c760 <_printf_i+0x28>
 800c750:	2f62      	cmp	r7, #98	; 0x62
 800c752:	d80a      	bhi.n	800c76a <_printf_i+0x32>
 800c754:	2f00      	cmp	r7, #0
 800c756:	f000 80d8 	beq.w	800c90a <_printf_i+0x1d2>
 800c75a:	2f58      	cmp	r7, #88	; 0x58
 800c75c:	f000 80a3 	beq.w	800c8a6 <_printf_i+0x16e>
 800c760:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c764:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c768:	e03a      	b.n	800c7e0 <_printf_i+0xa8>
 800c76a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c76e:	2b15      	cmp	r3, #21
 800c770:	d8f6      	bhi.n	800c760 <_printf_i+0x28>
 800c772:	a101      	add	r1, pc, #4	; (adr r1, 800c778 <_printf_i+0x40>)
 800c774:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c778:	0800c7d1 	.word	0x0800c7d1
 800c77c:	0800c7e5 	.word	0x0800c7e5
 800c780:	0800c761 	.word	0x0800c761
 800c784:	0800c761 	.word	0x0800c761
 800c788:	0800c761 	.word	0x0800c761
 800c78c:	0800c761 	.word	0x0800c761
 800c790:	0800c7e5 	.word	0x0800c7e5
 800c794:	0800c761 	.word	0x0800c761
 800c798:	0800c761 	.word	0x0800c761
 800c79c:	0800c761 	.word	0x0800c761
 800c7a0:	0800c761 	.word	0x0800c761
 800c7a4:	0800c8f1 	.word	0x0800c8f1
 800c7a8:	0800c815 	.word	0x0800c815
 800c7ac:	0800c8d3 	.word	0x0800c8d3
 800c7b0:	0800c761 	.word	0x0800c761
 800c7b4:	0800c761 	.word	0x0800c761
 800c7b8:	0800c913 	.word	0x0800c913
 800c7bc:	0800c761 	.word	0x0800c761
 800c7c0:	0800c815 	.word	0x0800c815
 800c7c4:	0800c761 	.word	0x0800c761
 800c7c8:	0800c761 	.word	0x0800c761
 800c7cc:	0800c8db 	.word	0x0800c8db
 800c7d0:	682b      	ldr	r3, [r5, #0]
 800c7d2:	1d1a      	adds	r2, r3, #4
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	602a      	str	r2, [r5, #0]
 800c7d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c7dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c7e0:	2301      	movs	r3, #1
 800c7e2:	e0a3      	b.n	800c92c <_printf_i+0x1f4>
 800c7e4:	6820      	ldr	r0, [r4, #0]
 800c7e6:	6829      	ldr	r1, [r5, #0]
 800c7e8:	0606      	lsls	r6, r0, #24
 800c7ea:	f101 0304 	add.w	r3, r1, #4
 800c7ee:	d50a      	bpl.n	800c806 <_printf_i+0xce>
 800c7f0:	680e      	ldr	r6, [r1, #0]
 800c7f2:	602b      	str	r3, [r5, #0]
 800c7f4:	2e00      	cmp	r6, #0
 800c7f6:	da03      	bge.n	800c800 <_printf_i+0xc8>
 800c7f8:	232d      	movs	r3, #45	; 0x2d
 800c7fa:	4276      	negs	r6, r6
 800c7fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c800:	485e      	ldr	r0, [pc, #376]	; (800c97c <_printf_i+0x244>)
 800c802:	230a      	movs	r3, #10
 800c804:	e019      	b.n	800c83a <_printf_i+0x102>
 800c806:	680e      	ldr	r6, [r1, #0]
 800c808:	602b      	str	r3, [r5, #0]
 800c80a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c80e:	bf18      	it	ne
 800c810:	b236      	sxthne	r6, r6
 800c812:	e7ef      	b.n	800c7f4 <_printf_i+0xbc>
 800c814:	682b      	ldr	r3, [r5, #0]
 800c816:	6820      	ldr	r0, [r4, #0]
 800c818:	1d19      	adds	r1, r3, #4
 800c81a:	6029      	str	r1, [r5, #0]
 800c81c:	0601      	lsls	r1, r0, #24
 800c81e:	d501      	bpl.n	800c824 <_printf_i+0xec>
 800c820:	681e      	ldr	r6, [r3, #0]
 800c822:	e002      	b.n	800c82a <_printf_i+0xf2>
 800c824:	0646      	lsls	r6, r0, #25
 800c826:	d5fb      	bpl.n	800c820 <_printf_i+0xe8>
 800c828:	881e      	ldrh	r6, [r3, #0]
 800c82a:	4854      	ldr	r0, [pc, #336]	; (800c97c <_printf_i+0x244>)
 800c82c:	2f6f      	cmp	r7, #111	; 0x6f
 800c82e:	bf0c      	ite	eq
 800c830:	2308      	moveq	r3, #8
 800c832:	230a      	movne	r3, #10
 800c834:	2100      	movs	r1, #0
 800c836:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c83a:	6865      	ldr	r5, [r4, #4]
 800c83c:	60a5      	str	r5, [r4, #8]
 800c83e:	2d00      	cmp	r5, #0
 800c840:	bfa2      	ittt	ge
 800c842:	6821      	ldrge	r1, [r4, #0]
 800c844:	f021 0104 	bicge.w	r1, r1, #4
 800c848:	6021      	strge	r1, [r4, #0]
 800c84a:	b90e      	cbnz	r6, 800c850 <_printf_i+0x118>
 800c84c:	2d00      	cmp	r5, #0
 800c84e:	d04d      	beq.n	800c8ec <_printf_i+0x1b4>
 800c850:	4615      	mov	r5, r2
 800c852:	fbb6 f1f3 	udiv	r1, r6, r3
 800c856:	fb03 6711 	mls	r7, r3, r1, r6
 800c85a:	5dc7      	ldrb	r7, [r0, r7]
 800c85c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c860:	4637      	mov	r7, r6
 800c862:	42bb      	cmp	r3, r7
 800c864:	460e      	mov	r6, r1
 800c866:	d9f4      	bls.n	800c852 <_printf_i+0x11a>
 800c868:	2b08      	cmp	r3, #8
 800c86a:	d10b      	bne.n	800c884 <_printf_i+0x14c>
 800c86c:	6823      	ldr	r3, [r4, #0]
 800c86e:	07de      	lsls	r6, r3, #31
 800c870:	d508      	bpl.n	800c884 <_printf_i+0x14c>
 800c872:	6923      	ldr	r3, [r4, #16]
 800c874:	6861      	ldr	r1, [r4, #4]
 800c876:	4299      	cmp	r1, r3
 800c878:	bfde      	ittt	le
 800c87a:	2330      	movle	r3, #48	; 0x30
 800c87c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c880:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c884:	1b52      	subs	r2, r2, r5
 800c886:	6122      	str	r2, [r4, #16]
 800c888:	f8cd a000 	str.w	sl, [sp]
 800c88c:	464b      	mov	r3, r9
 800c88e:	aa03      	add	r2, sp, #12
 800c890:	4621      	mov	r1, r4
 800c892:	4640      	mov	r0, r8
 800c894:	f7ff fee2 	bl	800c65c <_printf_common>
 800c898:	3001      	adds	r0, #1
 800c89a:	d14c      	bne.n	800c936 <_printf_i+0x1fe>
 800c89c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c8a0:	b004      	add	sp, #16
 800c8a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8a6:	4835      	ldr	r0, [pc, #212]	; (800c97c <_printf_i+0x244>)
 800c8a8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c8ac:	6829      	ldr	r1, [r5, #0]
 800c8ae:	6823      	ldr	r3, [r4, #0]
 800c8b0:	f851 6b04 	ldr.w	r6, [r1], #4
 800c8b4:	6029      	str	r1, [r5, #0]
 800c8b6:	061d      	lsls	r5, r3, #24
 800c8b8:	d514      	bpl.n	800c8e4 <_printf_i+0x1ac>
 800c8ba:	07df      	lsls	r7, r3, #31
 800c8bc:	bf44      	itt	mi
 800c8be:	f043 0320 	orrmi.w	r3, r3, #32
 800c8c2:	6023      	strmi	r3, [r4, #0]
 800c8c4:	b91e      	cbnz	r6, 800c8ce <_printf_i+0x196>
 800c8c6:	6823      	ldr	r3, [r4, #0]
 800c8c8:	f023 0320 	bic.w	r3, r3, #32
 800c8cc:	6023      	str	r3, [r4, #0]
 800c8ce:	2310      	movs	r3, #16
 800c8d0:	e7b0      	b.n	800c834 <_printf_i+0xfc>
 800c8d2:	6823      	ldr	r3, [r4, #0]
 800c8d4:	f043 0320 	orr.w	r3, r3, #32
 800c8d8:	6023      	str	r3, [r4, #0]
 800c8da:	2378      	movs	r3, #120	; 0x78
 800c8dc:	4828      	ldr	r0, [pc, #160]	; (800c980 <_printf_i+0x248>)
 800c8de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c8e2:	e7e3      	b.n	800c8ac <_printf_i+0x174>
 800c8e4:	0659      	lsls	r1, r3, #25
 800c8e6:	bf48      	it	mi
 800c8e8:	b2b6      	uxthmi	r6, r6
 800c8ea:	e7e6      	b.n	800c8ba <_printf_i+0x182>
 800c8ec:	4615      	mov	r5, r2
 800c8ee:	e7bb      	b.n	800c868 <_printf_i+0x130>
 800c8f0:	682b      	ldr	r3, [r5, #0]
 800c8f2:	6826      	ldr	r6, [r4, #0]
 800c8f4:	6961      	ldr	r1, [r4, #20]
 800c8f6:	1d18      	adds	r0, r3, #4
 800c8f8:	6028      	str	r0, [r5, #0]
 800c8fa:	0635      	lsls	r5, r6, #24
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	d501      	bpl.n	800c904 <_printf_i+0x1cc>
 800c900:	6019      	str	r1, [r3, #0]
 800c902:	e002      	b.n	800c90a <_printf_i+0x1d2>
 800c904:	0670      	lsls	r0, r6, #25
 800c906:	d5fb      	bpl.n	800c900 <_printf_i+0x1c8>
 800c908:	8019      	strh	r1, [r3, #0]
 800c90a:	2300      	movs	r3, #0
 800c90c:	6123      	str	r3, [r4, #16]
 800c90e:	4615      	mov	r5, r2
 800c910:	e7ba      	b.n	800c888 <_printf_i+0x150>
 800c912:	682b      	ldr	r3, [r5, #0]
 800c914:	1d1a      	adds	r2, r3, #4
 800c916:	602a      	str	r2, [r5, #0]
 800c918:	681d      	ldr	r5, [r3, #0]
 800c91a:	6862      	ldr	r2, [r4, #4]
 800c91c:	2100      	movs	r1, #0
 800c91e:	4628      	mov	r0, r5
 800c920:	f7f3 fc56 	bl	80001d0 <memchr>
 800c924:	b108      	cbz	r0, 800c92a <_printf_i+0x1f2>
 800c926:	1b40      	subs	r0, r0, r5
 800c928:	6060      	str	r0, [r4, #4]
 800c92a:	6863      	ldr	r3, [r4, #4]
 800c92c:	6123      	str	r3, [r4, #16]
 800c92e:	2300      	movs	r3, #0
 800c930:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c934:	e7a8      	b.n	800c888 <_printf_i+0x150>
 800c936:	6923      	ldr	r3, [r4, #16]
 800c938:	462a      	mov	r2, r5
 800c93a:	4649      	mov	r1, r9
 800c93c:	4640      	mov	r0, r8
 800c93e:	47d0      	blx	sl
 800c940:	3001      	adds	r0, #1
 800c942:	d0ab      	beq.n	800c89c <_printf_i+0x164>
 800c944:	6823      	ldr	r3, [r4, #0]
 800c946:	079b      	lsls	r3, r3, #30
 800c948:	d413      	bmi.n	800c972 <_printf_i+0x23a>
 800c94a:	68e0      	ldr	r0, [r4, #12]
 800c94c:	9b03      	ldr	r3, [sp, #12]
 800c94e:	4298      	cmp	r0, r3
 800c950:	bfb8      	it	lt
 800c952:	4618      	movlt	r0, r3
 800c954:	e7a4      	b.n	800c8a0 <_printf_i+0x168>
 800c956:	2301      	movs	r3, #1
 800c958:	4632      	mov	r2, r6
 800c95a:	4649      	mov	r1, r9
 800c95c:	4640      	mov	r0, r8
 800c95e:	47d0      	blx	sl
 800c960:	3001      	adds	r0, #1
 800c962:	d09b      	beq.n	800c89c <_printf_i+0x164>
 800c964:	3501      	adds	r5, #1
 800c966:	68e3      	ldr	r3, [r4, #12]
 800c968:	9903      	ldr	r1, [sp, #12]
 800c96a:	1a5b      	subs	r3, r3, r1
 800c96c:	42ab      	cmp	r3, r5
 800c96e:	dcf2      	bgt.n	800c956 <_printf_i+0x21e>
 800c970:	e7eb      	b.n	800c94a <_printf_i+0x212>
 800c972:	2500      	movs	r5, #0
 800c974:	f104 0619 	add.w	r6, r4, #25
 800c978:	e7f5      	b.n	800c966 <_printf_i+0x22e>
 800c97a:	bf00      	nop
 800c97c:	0800cd41 	.word	0x0800cd41
 800c980:	0800cd52 	.word	0x0800cd52

0800c984 <_realloc_r>:
 800c984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c988:	4680      	mov	r8, r0
 800c98a:	4614      	mov	r4, r2
 800c98c:	460e      	mov	r6, r1
 800c98e:	b921      	cbnz	r1, 800c99a <_realloc_r+0x16>
 800c990:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c994:	4611      	mov	r1, r2
 800c996:	f7ff bb8d 	b.w	800c0b4 <_malloc_r>
 800c99a:	b92a      	cbnz	r2, 800c9a8 <_realloc_r+0x24>
 800c99c:	f7ff fb1e 	bl	800bfdc <_free_r>
 800c9a0:	4625      	mov	r5, r4
 800c9a2:	4628      	mov	r0, r5
 800c9a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9a8:	f000 f81b 	bl	800c9e2 <_malloc_usable_size_r>
 800c9ac:	4284      	cmp	r4, r0
 800c9ae:	4607      	mov	r7, r0
 800c9b0:	d802      	bhi.n	800c9b8 <_realloc_r+0x34>
 800c9b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c9b6:	d812      	bhi.n	800c9de <_realloc_r+0x5a>
 800c9b8:	4621      	mov	r1, r4
 800c9ba:	4640      	mov	r0, r8
 800c9bc:	f7ff fb7a 	bl	800c0b4 <_malloc_r>
 800c9c0:	4605      	mov	r5, r0
 800c9c2:	2800      	cmp	r0, #0
 800c9c4:	d0ed      	beq.n	800c9a2 <_realloc_r+0x1e>
 800c9c6:	42bc      	cmp	r4, r7
 800c9c8:	4622      	mov	r2, r4
 800c9ca:	4631      	mov	r1, r6
 800c9cc:	bf28      	it	cs
 800c9ce:	463a      	movcs	r2, r7
 800c9d0:	f7ff fad4 	bl	800bf7c <memcpy>
 800c9d4:	4631      	mov	r1, r6
 800c9d6:	4640      	mov	r0, r8
 800c9d8:	f7ff fb00 	bl	800bfdc <_free_r>
 800c9dc:	e7e1      	b.n	800c9a2 <_realloc_r+0x1e>
 800c9de:	4635      	mov	r5, r6
 800c9e0:	e7df      	b.n	800c9a2 <_realloc_r+0x1e>

0800c9e2 <_malloc_usable_size_r>:
 800c9e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c9e6:	1f18      	subs	r0, r3, #4
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	bfbc      	itt	lt
 800c9ec:	580b      	ldrlt	r3, [r1, r0]
 800c9ee:	18c0      	addlt	r0, r0, r3
 800c9f0:	4770      	bx	lr
	...

0800c9f4 <_init>:
 800c9f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9f6:	bf00      	nop
 800c9f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9fa:	bc08      	pop	{r3}
 800c9fc:	469e      	mov	lr, r3
 800c9fe:	4770      	bx	lr

0800ca00 <_fini>:
 800ca00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca02:	bf00      	nop
 800ca04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca06:	bc08      	pop	{r3}
 800ca08:	469e      	mov	lr, r3
 800ca0a:	4770      	bx	lr
