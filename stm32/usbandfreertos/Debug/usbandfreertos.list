
usbandfreertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000afe8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  0800b178  0800b178  0001b178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b388  0800b388  00020164  2**0
                  CONTENTS
  4 .ARM          00000008  0800b388  0800b388  0001b388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b390  0800b390  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  0800b390  0800b390  0001b390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b3a0  0800b3a0  0001b3a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  0800b3a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020164  2**0
                  CONTENTS
 10 .bss          00006714  20000164  20000164  00020164  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20006878  20006878  00020164  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003888b  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000060ee  00000000  00000000  00058a1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c48  00000000  00000000  0005eb10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001a20  00000000  00000000  00060758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000bdbd  00000000  00000000  00062178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022e5d  00000000  00000000  0006df35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd918  00000000  00000000  00090d92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016e6aa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008ec8  00000000  00000000  0016e6fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000164 	.word	0x20000164
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b160 	.word	0x0800b160

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000168 	.word	0x20000168
 80001cc:	0800b160 	.word	0x0800b160

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <main>:
void usbcomunicationserial(void *argument);
static void MX_SPI1_Init(void);
void gyroreadings(void *argument);


int main(void){
 80004e4:	b590      	push	{r4, r7, lr}
 80004e6:	b089      	sub	sp, #36	; 0x24
 80004e8:	af00      	add	r7, sp, #0
  HAL_Init();
 80004ea:	f000 fd0f 	bl	8000f0c <HAL_Init>
  SystemClock_Config();
 80004ee:	f000 f863 	bl	80005b8 <_Z18SystemClock_Configv>
  MX_GPIO_Init();
 80004f2:	f000 f8d7 	bl	80006a4 <_ZL12MX_GPIO_Initv>
  MX_SPI1_Init();
 80004f6:	f000 f93b 	bl	8000770 <_ZL12MX_SPI1_Initv>
  MX_USB_DEVICE_Init();
 80004fa:	f009 fe67 	bl	800a1cc <MX_USB_DEVICE_Init>

  Vesp::console.log("\n\n\n-------Vesp-------\n");
 80004fe:	4b20      	ldr	r3, [pc, #128]	; (8000580 <main+0x9c>)
 8000500:	681c      	ldr	r4, [r3, #0]
 8000502:	f107 031c 	add.w	r3, r7, #28
 8000506:	4618      	mov	r0, r3
 8000508:	f00a fb7c 	bl	800ac04 <_ZNSaIcEC1Ev>
 800050c:	f107 021c 	add.w	r2, r7, #28
 8000510:	1d3b      	adds	r3, r7, #4
 8000512:	491c      	ldr	r1, [pc, #112]	; (8000584 <main+0xa0>)
 8000514:	4618      	mov	r0, r3
 8000516:	f00a fbe5 	bl	800ace4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800051a:	1d3b      	adds	r3, r7, #4
 800051c:	4619      	mov	r1, r3
 800051e:	4620      	mov	r0, r4
 8000520:	f000 fb08 	bl	8000b34 <_ZN7printer3logENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8000524:	1d3b      	adds	r3, r7, #4
 8000526:	4618      	mov	r0, r3
 8000528:	f00a fbad 	bl	800ac86 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800052c:	f107 031c 	add.w	r3, r7, #28
 8000530:	4618      	mov	r0, r3
 8000532:	f00a fb68 	bl	800ac06 <_ZNSaIcED1Ev>
  osKernelInitialize();
 8000536:	f007 f8cb 	bl	80076d0 <osKernelInitialize>

  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800053a:	4a13      	ldr	r2, [pc, #76]	; (8000588 <main+0xa4>)
 800053c:	2100      	movs	r1, #0
 800053e:	4813      	ldr	r0, [pc, #76]	; (800058c <main+0xa8>)
 8000540:	f007 f910 	bl	8007764 <osThreadNew>
 8000544:	4603      	mov	r3, r0
 8000546:	4a12      	ldr	r2, [pc, #72]	; (8000590 <main+0xac>)
 8000548:	6013      	str	r3, [r2, #0]
  ledtoggleHandle = osThreadNew(ledstatustoggle, NULL, &ledtoggle_attributes);
 800054a:	4a12      	ldr	r2, [pc, #72]	; (8000594 <main+0xb0>)
 800054c:	2100      	movs	r1, #0
 800054e:	4812      	ldr	r0, [pc, #72]	; (8000598 <main+0xb4>)
 8000550:	f007 f908 	bl	8007764 <osThreadNew>
 8000554:	4603      	mov	r3, r0
 8000556:	4a11      	ldr	r2, [pc, #68]	; (800059c <main+0xb8>)
 8000558:	6013      	str	r3, [r2, #0]
  usbcomunicationHandle = osThreadNew(usbcomunicationserial, NULL, &usbcomunication_attributes);
 800055a:	4a11      	ldr	r2, [pc, #68]	; (80005a0 <main+0xbc>)
 800055c:	2100      	movs	r1, #0
 800055e:	4811      	ldr	r0, [pc, #68]	; (80005a4 <main+0xc0>)
 8000560:	f007 f900 	bl	8007764 <osThreadNew>
 8000564:	4603      	mov	r3, r0
 8000566:	4a10      	ldr	r2, [pc, #64]	; (80005a8 <main+0xc4>)
 8000568:	6013      	str	r3, [r2, #0]
  gyroreadingsHandle = osThreadNew(gyroreadings, NULL, &gyroreadings_attributes);
 800056a:	4a10      	ldr	r2, [pc, #64]	; (80005ac <main+0xc8>)
 800056c:	2100      	movs	r1, #0
 800056e:	4810      	ldr	r0, [pc, #64]	; (80005b0 <main+0xcc>)
 8000570:	f007 f8f8 	bl	8007764 <osThreadNew>
 8000574:	4603      	mov	r3, r0
 8000576:	4a0f      	ldr	r2, [pc, #60]	; (80005b4 <main+0xd0>)
 8000578:	6013      	str	r3, [r2, #0]

  osKernelStart();
 800057a:	f007 f8cd 	bl	8007718 <osKernelStart>

  for(;;);
 800057e:	e7fe      	b.n	800057e <main+0x9a>
 8000580:	20000180 	.word	0x20000180
 8000584:	0800b1b0 	.word	0x0800b1b0
 8000588:	0800b22c 	.word	0x0800b22c
 800058c:	08000881 	.word	0x08000881
 8000590:	20000184 	.word	0x20000184
 8000594:	0800b250 	.word	0x0800b250
 8000598:	08000895 	.word	0x08000895
 800059c:	20000188 	.word	0x20000188
 80005a0:	0800b274 	.word	0x0800b274
 80005a4:	080008b5 	.word	0x080008b5
 80005a8:	2000018c 	.word	0x2000018c
 80005ac:	0800b298 	.word	0x0800b298
 80005b0:	080007e9 	.word	0x080007e9
 80005b4:	200001e8 	.word	0x200001e8

080005b8 <_Z18SystemClock_Configv>:
}


void SystemClock_Config(void){
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b094      	sub	sp, #80	; 0x50
 80005bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005be:	f107 0320 	add.w	r3, r7, #32
 80005c2:	2230      	movs	r2, #48	; 0x30
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f00a fc18 	bl	800adfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005cc:	f107 030c 	add.w	r3, r7, #12
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
 80005da:	611a      	str	r2, [r3, #16]

  __HAL_RCC_PWR_CLK_ENABLE();
 80005dc:	2300      	movs	r3, #0
 80005de:	60bb      	str	r3, [r7, #8]
 80005e0:	4b2e      	ldr	r3, [pc, #184]	; (800069c <_Z18SystemClock_Configv+0xe4>)
 80005e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e4:	4a2d      	ldr	r2, [pc, #180]	; (800069c <_Z18SystemClock_Configv+0xe4>)
 80005e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ea:	6413      	str	r3, [r2, #64]	; 0x40
 80005ec:	4b2b      	ldr	r3, [pc, #172]	; (800069c <_Z18SystemClock_Configv+0xe4>)
 80005ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f4:	60bb      	str	r3, [r7, #8]
 80005f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005f8:	2300      	movs	r3, #0
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	4b28      	ldr	r3, [pc, #160]	; (80006a0 <_Z18SystemClock_Configv+0xe8>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a27      	ldr	r2, [pc, #156]	; (80006a0 <_Z18SystemClock_Configv+0xe8>)
 8000602:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000606:	6013      	str	r3, [r2, #0]
 8000608:	4b25      	ldr	r3, [pc, #148]	; (80006a0 <_Z18SystemClock_Configv+0xe8>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000610:	607b      	str	r3, [r7, #4]
 8000612:	687b      	ldr	r3, [r7, #4]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000614:	2303      	movs	r3, #3
 8000616:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000618:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800061c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800061e:	2301      	movs	r3, #1
 8000620:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000622:	2310      	movs	r3, #16
 8000624:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000626:	2302      	movs	r3, #2
 8000628:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800062a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800062e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000630:	2304      	movs	r3, #4
 8000632:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000634:	2348      	movs	r3, #72	; 0x48
 8000636:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000638:	2302      	movs	r3, #2
 800063a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800063c:	2303      	movs	r3, #3
 800063e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000640:	f107 0320 	add.w	r3, r7, #32
 8000644:	4618      	mov	r0, r3
 8000646:	f002 f9f5 	bl	8002a34 <HAL_RCC_OscConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	bf14      	ite	ne
 8000650:	2301      	movne	r3, #1
 8000652:	2300      	moveq	r3, #0
 8000654:	b2db      	uxtb	r3, r3
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 800065a:	f000 f947 	bl	80008ec <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065e:	230f      	movs	r3, #15
 8000660:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000662:	2300      	movs	r3, #0
 8000664:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000666:	2300      	movs	r3, #0
 8000668:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066e:	2300      	movs	r3, #0
 8000670:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000672:	f107 030c 	add.w	r3, r7, #12
 8000676:	2100      	movs	r1, #0
 8000678:	4618      	mov	r0, r3
 800067a:	f002 fc53 	bl	8002f24 <HAL_RCC_ClockConfig>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	bf14      	ite	ne
 8000684:	2301      	movne	r3, #1
 8000686:	2300      	moveq	r3, #0
 8000688:	b2db      	uxtb	r3, r3
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 800068e:	f000 f92d 	bl	80008ec <Error_Handler>
  }
}
 8000692:	bf00      	nop
 8000694:	3750      	adds	r7, #80	; 0x50
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40023800 	.word	0x40023800
 80006a0:	40007000 	.word	0x40007000

080006a4 <_ZL12MX_GPIO_Initv>:


static void MX_GPIO_Init(void){
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b088      	sub	sp, #32
 80006a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006aa:	f107 030c 	add.w	r3, r7, #12
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
 80006b6:	60da      	str	r2, [r3, #12]
 80006b8:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	60bb      	str	r3, [r7, #8]
 80006be:	4b29      	ldr	r3, [pc, #164]	; (8000764 <_ZL12MX_GPIO_Initv+0xc0>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a28      	ldr	r2, [pc, #160]	; (8000764 <_ZL12MX_GPIO_Initv+0xc0>)
 80006c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ca:	4b26      	ldr	r3, [pc, #152]	; (8000764 <_ZL12MX_GPIO_Initv+0xc0>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006d2:	60bb      	str	r3, [r7, #8]
 80006d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	4b22      	ldr	r3, [pc, #136]	; (8000764 <_ZL12MX_GPIO_Initv+0xc0>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a21      	ldr	r2, [pc, #132]	; (8000764 <_ZL12MX_GPIO_Initv+0xc0>)
 80006e0:	f043 0301 	orr.w	r3, r3, #1
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
 80006e6:	4b1f      	ldr	r3, [pc, #124]	; (8000764 <_ZL12MX_GPIO_Initv+0xc0>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	f003 0301 	and.w	r3, r3, #1
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	603b      	str	r3, [r7, #0]
 80006f6:	4b1b      	ldr	r3, [pc, #108]	; (8000764 <_ZL12MX_GPIO_Initv+0xc0>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a1a      	ldr	r2, [pc, #104]	; (8000764 <_ZL12MX_GPIO_Initv+0xc0>)
 80006fc:	f043 0302 	orr.w	r3, r3, #2
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4b18      	ldr	r3, [pc, #96]	; (8000764 <_ZL12MX_GPIO_Initv+0xc0>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f003 0302 	and.w	r3, r3, #2
 800070a:	603b      	str	r3, [r7, #0]
 800070c:	683b      	ldr	r3, [r7, #0]

  HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 800070e:	2200      	movs	r2, #0
 8000710:	2110      	movs	r1, #16
 8000712:	4815      	ldr	r0, [pc, #84]	; (8000768 <_ZL12MX_GPIO_Initv+0xc4>)
 8000714:	f000 fede 	bl	80014d4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 8000718:	2200      	movs	r2, #0
 800071a:	2120      	movs	r1, #32
 800071c:	4813      	ldr	r0, [pc, #76]	; (800076c <_ZL12MX_GPIO_Initv+0xc8>)
 800071e:	f000 fed9 	bl	80014d4 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = GYRO_CS_Pin;
 8000722:	2310      	movs	r3, #16
 8000724:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000726:	2301      	movs	r3, #1
 8000728:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072a:	2300      	movs	r3, #0
 800072c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072e:	2300      	movs	r3, #0
 8000730:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GYRO_CS_GPIO_Port, &GPIO_InitStruct);
 8000732:	f107 030c 	add.w	r3, r7, #12
 8000736:	4619      	mov	r1, r3
 8000738:	480b      	ldr	r0, [pc, #44]	; (8000768 <_ZL12MX_GPIO_Initv+0xc4>)
 800073a:	f000 fd2f 	bl	800119c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = led_Pin;
 800073e:	2320      	movs	r3, #32
 8000740:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000742:	2301      	movs	r3, #1
 8000744:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074a:	2300      	movs	r3, #0
 800074c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 800074e:	f107 030c 	add.w	r3, r7, #12
 8000752:	4619      	mov	r1, r3
 8000754:	4805      	ldr	r0, [pc, #20]	; (800076c <_ZL12MX_GPIO_Initv+0xc8>)
 8000756:	f000 fd21 	bl	800119c <HAL_GPIO_Init>
}
 800075a:	bf00      	nop
 800075c:	3720      	adds	r7, #32
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40023800 	.word	0x40023800
 8000768:	40020000 	.word	0x40020000
 800076c:	40020400 	.word	0x40020400

08000770 <_ZL12MX_SPI1_Initv>:


static void MX_SPI1_Init(void){
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  hspi1.Instance = SPI1;
 8000774:	4b1a      	ldr	r3, [pc, #104]	; (80007e0 <_ZL12MX_SPI1_Initv+0x70>)
 8000776:	4a1b      	ldr	r2, [pc, #108]	; (80007e4 <_ZL12MX_SPI1_Initv+0x74>)
 8000778:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800077a:	4b19      	ldr	r3, [pc, #100]	; (80007e0 <_ZL12MX_SPI1_Initv+0x70>)
 800077c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000780:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000782:	4b17      	ldr	r3, [pc, #92]	; (80007e0 <_ZL12MX_SPI1_Initv+0x70>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000788:	4b15      	ldr	r3, [pc, #84]	; (80007e0 <_ZL12MX_SPI1_Initv+0x70>)
 800078a:	2200      	movs	r2, #0
 800078c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800078e:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <_ZL12MX_SPI1_Initv+0x70>)
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000794:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <_ZL12MX_SPI1_Initv+0x70>)
 8000796:	2200      	movs	r2, #0
 8000798:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800079a:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <_ZL12MX_SPI1_Initv+0x70>)
 800079c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007a0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007a2:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <_ZL12MX_SPI1_Initv+0x70>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007a8:	4b0d      	ldr	r3, [pc, #52]	; (80007e0 <_ZL12MX_SPI1_Initv+0x70>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007ae:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <_ZL12MX_SPI1_Initv+0x70>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007b4:	4b0a      	ldr	r3, [pc, #40]	; (80007e0 <_ZL12MX_SPI1_Initv+0x70>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007ba:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <_ZL12MX_SPI1_Initv+0x70>)
 80007bc:	220a      	movs	r2, #10
 80007be:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007c0:	4807      	ldr	r0, [pc, #28]	; (80007e0 <_ZL12MX_SPI1_Initv+0x70>)
 80007c2:	f002 fded 	bl	80033a0 <HAL_SPI_Init>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	bf14      	ite	ne
 80007cc:	2301      	movne	r3, #1
 80007ce:	2300      	moveq	r3, #0
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 80007d6:	f000 f889 	bl	80008ec <Error_Handler>
  }
}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20000190 	.word	0x20000190
 80007e4:	40013000 	.word	0x40013000

080007e8 <_Z12gyroreadingsPv>:

// Threads implementation
void gyroreadings(void *argument){
 80007e8:	b5b0      	push	{r4, r5, r7, lr}
 80007ea:	b0b8      	sub	sp, #224	; 0xe0
 80007ec:	af16      	add	r7, sp, #88	; 0x58
 80007ee:	6078      	str	r0, [r7, #4]
	osDelay(7000);
 80007f0:	f641 3058 	movw	r0, #7000	; 0x1b58
 80007f4:	f007 f848 	bl	8007888 <osDelay>

	// gyro setup
	mpu6000 mpu{hspi1, GYRO_CS_Pin, GYRO_CS_GPIO_Port};
 80007f8:	4c1d      	ldr	r4, [pc, #116]	; (8000870 <_Z12gyroreadingsPv+0x88>)
 80007fa:	f107 0508 	add.w	r5, r7, #8
 80007fe:	4b1d      	ldr	r3, [pc, #116]	; (8000874 <_Z12gyroreadingsPv+0x8c>)
 8000800:	9314      	str	r3, [sp, #80]	; 0x50
 8000802:	2310      	movs	r3, #16
 8000804:	9313      	str	r3, [sp, #76]	; 0x4c
 8000806:	4668      	mov	r0, sp
 8000808:	f104 030c 	add.w	r3, r4, #12
 800080c:	224c      	movs	r2, #76	; 0x4c
 800080e:	4619      	mov	r1, r3
 8000810:	f00a fae6 	bl	800ade0 <memcpy>
 8000814:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8000818:	4628      	mov	r0, r5
 800081a:	f000 f88d 	bl	8000938 <_ZN7mpu6000C1E19__SPI_HandleTypeDeftP12GPIO_TypeDef>
	mpu.init();
 800081e:	f107 0308 	add.w	r3, r7, #8
 8000822:	4618      	mov	r0, r3
 8000824:	f000 f8ce 	bl	80009c4 <_ZN7mpu60004initEv>

	Vesp::console.log("mpu init done \n");
 8000828:	4b13      	ldr	r3, [pc, #76]	; (8000878 <_Z12gyroreadingsPv+0x90>)
 800082a:	681c      	ldr	r4, [r3, #0]
 800082c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000830:	4618      	mov	r0, r3
 8000832:	f00a f9e7 	bl	800ac04 <_ZNSaIcEC1Ev>
 8000836:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800083a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800083e:	490f      	ldr	r1, [pc, #60]	; (800087c <_Z12gyroreadingsPv+0x94>)
 8000840:	4618      	mov	r0, r3
 8000842:	f00a fa4f 	bl	800ace4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8000846:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800084a:	4619      	mov	r1, r3
 800084c:	4620      	mov	r0, r4
 800084e:	f000 f971 	bl	8000b34 <_ZN7printer3logENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8000852:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000856:	4618      	mov	r0, r3
 8000858:	f00a fa15 	bl	800ac86 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800085c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000860:	4618      	mov	r0, r3
 8000862:	f00a f9d0 	bl	800ac06 <_ZNSaIcED1Ev>

	for(;;){
		osDelay(1000);
 8000866:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800086a:	f007 f80d 	bl	8007888 <osDelay>
 800086e:	e7fa      	b.n	8000866 <_Z12gyroreadingsPv+0x7e>
 8000870:	20000190 	.word	0x20000190
 8000874:	40020000 	.word	0x40020000
 8000878:	20000180 	.word	0x20000180
 800087c:	0800b1c8 	.word	0x0800b1c8

08000880 <_Z16StartDefaultTaskPv>:
	}
}

void StartDefaultTask(void *argument){
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  for(;;){
    osDelay(1000);
 8000888:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800088c:	f006 fffc 	bl	8007888 <osDelay>
 8000890:	e7fa      	b.n	8000888 <_Z16StartDefaultTaskPv+0x8>
	...

08000894 <_Z15ledstatustogglePv>:
  }
}

void ledstatustoggle(void *argument){
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  for(;;){
	  HAL_GPIO_TogglePin(led_GPIO_Port, led_Pin);
 800089c:	2120      	movs	r1, #32
 800089e:	4804      	ldr	r0, [pc, #16]	; (80008b0 <_Z15ledstatustogglePv+0x1c>)
 80008a0:	f000 fe31 	bl	8001506 <HAL_GPIO_TogglePin>
	  osDelay(1000);
 80008a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008a8:	f006 ffee 	bl	8007888 <osDelay>
	  HAL_GPIO_TogglePin(led_GPIO_Port, led_Pin);
 80008ac:	e7f6      	b.n	800089c <_Z15ledstatustogglePv+0x8>
 80008ae:	bf00      	nop
 80008b0:	40020400 	.word	0x40020400

080008b4 <_Z21usbcomunicationserialPv>:
  }
}

void usbcomunicationserial(void *argument){
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  for(;;){
	//Vesp::getprinter().log("Vespin2.0 Firmaware 1.0\n");

	osDelay(2000);
 80008bc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80008c0:	f006 ffe2 	bl	8007888 <osDelay>
 80008c4:	e7fa      	b.n	80008bc <_Z21usbcomunicationserialPv+0x8>
	...

080008c8 <HAL_TIM_PeriodElapsedCallback>:
  }
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM6) {
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a04      	ldr	r2, [pc, #16]	; (80008e8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d101      	bne.n	80008de <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008da:	f000 fb39 	bl	8000f50 <HAL_IncTick>
  }
}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40001000 	.word	0x40001000

080008ec <Error_Handler>:

void Error_Handler(void){
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f0:	b672      	cpsid	i
}
 80008f2:	bf00      	nop
  __disable_irq();
  while (1){}
 80008f4:	e7fe      	b.n	80008f4 <Error_Handler+0x8>
	...

080008f8 <_Z41__static_initialization_and_destruction_0ii>:
}
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
 8000900:	6039      	str	r1, [r7, #0]
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2b01      	cmp	r3, #1
 8000906:	d109      	bne.n	800091c <_Z41__static_initialization_and_destruction_0ii+0x24>
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800090e:	4293      	cmp	r3, r2
 8000910:	d104      	bne.n	800091c <_Z41__static_initialization_and_destruction_0ii+0x24>

};

namespace Vesp{
	printer &getprinter();
	static printer& console = getprinter();
 8000912:	f000 f925 	bl	8000b60 <_ZN4Vesp10getprinterEv>
 8000916:	4603      	mov	r3, r0
 8000918:	4a02      	ldr	r2, [pc, #8]	; (8000924 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 800091a:	6013      	str	r3, [r2, #0]
 800091c:	bf00      	nop
 800091e:	3708      	adds	r7, #8
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	20000180 	.word	0x20000180

08000928 <_GLOBAL__sub_I_defaultTaskHandle>:
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
 800092c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000930:	2001      	movs	r0, #1
 8000932:	f7ff ffe1 	bl	80008f8 <_Z41__static_initialization_and_destruction_0ii>
 8000936:	bd80      	pop	{r7, pc}

08000938 <_ZN7mpu6000C1E19__SPI_HandleTypeDeftP12GPIO_TypeDef>:
 */

#include "mpu6000.h"
#include "printer.h"

mpu6000::mpu6000(SPI_HandleTypeDef _spi, uint16_t _cs_pin, GPIO_TypeDef *_cs_port) : spi{_spi}, cs_pin{_cs_pin}, cs_port{_cs_port}{}
 8000938:	b084      	sub	sp, #16
 800093a:	b580      	push	{r7, lr}
 800093c:	b082      	sub	sp, #8
 800093e:	af00      	add	r7, sp, #0
 8000940:	6078      	str	r0, [r7, #4]
 8000942:	f107 0014 	add.w	r0, r7, #20
 8000946:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800094a:	4a0d      	ldr	r2, [pc, #52]	; (8000980 <_ZN7mpu6000C1E19__SPI_HandleTypeDeftP12GPIO_TypeDef+0x48>)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	3304      	adds	r3, #4
 8000954:	f107 0114 	add.w	r1, r7, #20
 8000958:	2258      	movs	r2, #88	; 0x58
 800095a:	4618      	mov	r0, r3
 800095c:	f00a fa40 	bl	800ade0 <memcpy>
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8000966:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800096e:	661a      	str	r2, [r3, #96]	; 0x60
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	4618      	mov	r0, r3
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800097c:	b004      	add	sp, #16
 800097e:	4770      	bx	lr
 8000980:	0800b2c4 	.word	0x0800b2c4

08000984 <_ZN7mpu60008transmitEh>:

HAL_StatusTypeDef mpu6000::transmit(uint8_t datavalue){
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
 800098c:	460b      	mov	r3, r1
 800098e:	70fb      	strb	r3, [r7, #3]
	uint8_t data[1];
	data[0] = datavalue;
 8000990:	78fb      	ldrb	r3, [r7, #3]
 8000992:	733b      	strb	r3, [r7, #12]

	//Vesp::console.log("try transmit\n");
	select();
 8000994:	6878      	ldr	r0, [r7, #4]
 8000996:	f000 f85f 	bl	8000a58 <_ZN7mpu60006selectEv>
	HAL_StatusTypeDef ret = HAL_SPI_Transmit(&spi, data, 1, 10);
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	1d18      	adds	r0, r3, #4
 800099e:	f107 010c 	add.w	r1, r7, #12
 80009a2:	230a      	movs	r3, #10
 80009a4:	2201      	movs	r2, #1
 80009a6:	f002 fd84 	bl	80034b2 <HAL_SPI_Transmit>
 80009aa:	4603      	mov	r3, r0
 80009ac:	73fb      	strb	r3, [r7, #15]
	unselect();
 80009ae:	6878      	ldr	r0, [r7, #4]
 80009b0:	f000 f863 	bl	8000a7a <_ZN7mpu60008unselectEv>
	//Vesp::console.log("done trasmit\n");
	HAL_Delay(15);
 80009b4:	200f      	movs	r0, #15
 80009b6:	f000 faeb 	bl	8000f90 <HAL_Delay>
	}else{
		//Vesp::console.debug("mpu6000: trasmit busy\n");

	}

	return ret;
 80009ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80009bc:	4618      	mov	r0, r3
 80009be:	3710      	adds	r7, #16
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <_ZN7mpu60004initEv>:

int mpu6000::init(){
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
	// Deselect I2C comunication
	select();
 80009cc:	6878      	ldr	r0, [r7, #4]
 80009ce:	f000 f843 	bl	8000a58 <_ZN7mpu60006selectEv>
	transmit(MPUREG_USER_CTRL);
 80009d2:	216a      	movs	r1, #106	; 0x6a
 80009d4:	6878      	ldr	r0, [r7, #4]
 80009d6:	f7ff ffd5 	bl	8000984 <_ZN7mpu60008transmitEh>
	transmit(BIT_I2C_IF_DIS);
 80009da:	2110      	movs	r1, #16
 80009dc:	6878      	ldr	r0, [r7, #4]
 80009de:	f7ff ffd1 	bl	8000984 <_ZN7mpu60008transmitEh>
	unselect();
 80009e2:	6878      	ldr	r0, [r7, #4]
 80009e4:	f000 f849 	bl	8000a7a <_ZN7mpu60008unselectEv>

	select();
 80009e8:	6878      	ldr	r0, [r7, #4]
 80009ea:	f000 f835 	bl	8000a58 <_ZN7mpu60006selectEv>
	transmit(MPUREG_PWR_MGMT_1);
 80009ee:	216b      	movs	r1, #107	; 0x6b
 80009f0:	6878      	ldr	r0, [r7, #4]
 80009f2:	f7ff ffc7 	bl	8000984 <_ZN7mpu60008transmitEh>
	transmit(BIT_H_RESET);
 80009f6:	2180      	movs	r1, #128	; 0x80
 80009f8:	6878      	ldr	r0, [r7, #4]
 80009fa:	f7ff ffc3 	bl	8000984 <_ZN7mpu60008transmitEh>
	unselect();
 80009fe:	6878      	ldr	r0, [r7, #4]
 8000a00:	f000 f83b 	bl	8000a7a <_ZN7mpu60008unselectEv>
	HAL_Delay(150);
 8000a04:	2096      	movs	r0, #150	; 0x96
 8000a06:	f000 fac3 	bl	8000f90 <HAL_Delay>

	select();
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f000 f824 	bl	8000a58 <_ZN7mpu60006selectEv>
	transmit(MPUREG_PWR_MGMT_1);
 8000a10:	216b      	movs	r1, #107	; 0x6b
 8000a12:	6878      	ldr	r0, [r7, #4]
 8000a14:	f7ff ffb6 	bl	8000984 <_ZN7mpu60008transmitEh>
	transmit(MPU_CLK_SEL_PLLGYROZ);
 8000a18:	2103      	movs	r1, #3
 8000a1a:	6878      	ldr	r0, [r7, #4]
 8000a1c:	f7ff ffb2 	bl	8000984 <_ZN7mpu60008transmitEh>
	unselect();
 8000a20:	6878      	ldr	r0, [r7, #4]
 8000a22:	f000 f82a 	bl	8000a7a <_ZN7mpu60008unselectEv>

	select();
 8000a26:	6878      	ldr	r0, [r7, #4]
 8000a28:	f000 f816 	bl	8000a58 <_ZN7mpu60006selectEv>
	transmit(MPUREG_USER_CTRL);
 8000a2c:	216a      	movs	r1, #106	; 0x6a
 8000a2e:	6878      	ldr	r0, [r7, #4]
 8000a30:	f7ff ffa8 	bl	8000984 <_ZN7mpu60008transmitEh>
	transmit(BIT_I2C_IF_DIS);
 8000a34:	2110      	movs	r1, #16
 8000a36:	6878      	ldr	r0, [r7, #4]
 8000a38:	f7ff ffa4 	bl	8000984 <_ZN7mpu60008transmitEh>
	unselect();
 8000a3c:	6878      	ldr	r0, [r7, #4]
 8000a3e:	f000 f81c 	bl	8000a7a <_ZN7mpu60008unselectEv>

	select();
 8000a42:	6878      	ldr	r0, [r7, #4]
 8000a44:	f000 f808 	bl	8000a58 <_ZN7mpu60006selectEv>
	//transmit(MPUREG_WHOAMI|READ_FLAG);

	unselect();
 8000a48:	6878      	ldr	r0, [r7, #4]
 8000a4a:	f000 f816 	bl	8000a7a <_ZN7mpu60008unselectEv>


	return 0;
 8000a4e:	2300      	movs	r3, #0
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	3708      	adds	r7, #8
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}

08000a58 <_ZN7mpu60006selectEv>:

void mpu6000::select(){
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(cs_port, cs_pin, GPIO_PIN_RESET);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	f000 fd31 	bl	80014d4 <HAL_GPIO_WritePin>
}
 8000a72:	bf00      	nop
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <_ZN7mpu60008unselectEv>:

void mpu6000::unselect(){
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b082      	sub	sp, #8
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(cs_port, cs_pin, GPIO_PIN_SET);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	4619      	mov	r1, r3
 8000a90:	f000 fd20 	bl	80014d4 <HAL_GPIO_WritePin>
}
 8000a94:	bf00      	nop
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <_ZN7mpu6000D1Ev>:

mpu6000::~mpu6000() {
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	4a04      	ldr	r2, [pc, #16]	; (8000ab8 <_ZN7mpu6000D1Ev+0x1c>)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	4618      	mov	r0, r3
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	0800b2c4 	.word	0x0800b2c4

08000abc <_ZN7mpu6000D0Ev>:
mpu6000::~mpu6000() {
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
}
 8000ac4:	6878      	ldr	r0, [r7, #4]
 8000ac6:	f7ff ffe9 	bl	8000a9c <_ZN7mpu6000D1Ev>
 8000aca:	2164      	movs	r1, #100	; 0x64
 8000acc:	6878      	ldr	r0, [r7, #4]
 8000ace:	f00a f897 	bl	800ac00 <_ZdlPvj>
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}

08000adc <_Z41__static_initialization_and_destruction_0ii>:
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
 8000ae4:	6039      	str	r1, [r7, #0]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2b01      	cmp	r3, #1
 8000aea:	d109      	bne.n	8000b00 <_Z41__static_initialization_and_destruction_0ii+0x24>
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d104      	bne.n	8000b00 <_Z41__static_initialization_and_destruction_0ii+0x24>
 8000af6:	f000 f833 	bl	8000b60 <_ZN4Vesp10getprinterEv>
 8000afa:	4603      	mov	r3, r0
 8000afc:	4a02      	ldr	r2, [pc, #8]	; (8000b08 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8000afe:	6013      	str	r3, [r2, #0]
 8000b00:	bf00      	nop
 8000b02:	3708      	adds	r7, #8
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	200001ec 	.word	0x200001ec

08000b0c <_GLOBAL__sub_I__ZN7mpu6000C2E19__SPI_HandleTypeDeftP12GPIO_TypeDef>:
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000b14:	2001      	movs	r0, #1
 8000b16:	f7ff ffe1 	bl	8000adc <_Z41__static_initialization_and_destruction_0ii>
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <_ZN7printer13get_singletonEv>:
	static printer *get_singleton(void){
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
		return singleton;
 8000b20:	4b03      	ldr	r3, [pc, #12]	; (8000b30 <_ZN7printer13get_singletonEv+0x14>)
 8000b22:	681b      	ldr	r3, [r3, #0]
	}
 8000b24:	4618      	mov	r0, r3
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	200001f0 	.word	0x200001f0

08000b34 <_ZN7printer3logENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
 *      Author: giovannirasera
 */

#include "printer.h"

void printer::log(std::string toprint){
 8000b34:	b590      	push	{r4, r7, lr}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
 8000b3c:	6039      	str	r1, [r7, #0]
	CDC_Transmit_FS((uint8_t *)toprint.c_str(), toprint.length());
 8000b3e:	6838      	ldr	r0, [r7, #0]
 8000b40:	f00a f8a9 	bl	800ac96 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8000b44:	4604      	mov	r4, r0
 8000b46:	6838      	ldr	r0, [r7, #0]
 8000b48:	f00a f8a3 	bl	800ac92 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	b29b      	uxth	r3, r3
 8000b50:	4619      	mov	r1, r3
 8000b52:	4620      	mov	r0, r4
 8000b54:	f009 fbf8 	bl	800a348 <CDC_Transmit_FS>
}
 8000b58:	bf00      	nop
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd90      	pop	{r4, r7, pc}

08000b60 <_ZN4Vesp10getprinterEv>:

namespace Vesp{
	printer &getprinter(){
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
		return *printer::get_singleton();
 8000b64:	f7ff ffda 	bl	8000b1c <_ZN7printer13get_singletonEv>
 8000b68:	4603      	mov	r3, r0
	}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	bd80      	pop	{r7, pc}
	...

08000b70 <_Z41__static_initialization_and_destruction_0ii>:

};
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	6039      	str	r1, [r7, #0]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d109      	bne.n	8000b94 <_Z41__static_initialization_and_destruction_0ii+0x24>
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d104      	bne.n	8000b94 <_Z41__static_initialization_and_destruction_0ii+0x24>
	static printer& console = getprinter();
 8000b8a:	f7ff ffe9 	bl	8000b60 <_ZN4Vesp10getprinterEv>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	4a02      	ldr	r2, [pc, #8]	; (8000b9c <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8000b92:	6013      	str	r3, [r2, #0]
 8000b94:	bf00      	nop
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	200001f4 	.word	0x200001f4

08000ba0 <_GLOBAL__sub_I__ZN7printer3logENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000ba8:	2001      	movs	r0, #1
 8000baa:	f7ff ffe1 	bl	8000b70 <_Z41__static_initialization_and_destruction_0ii>
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	607b      	str	r3, [r7, #4]
 8000bba:	4b12      	ldr	r3, [pc, #72]	; (8000c04 <HAL_MspInit+0x54>)
 8000bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bbe:	4a11      	ldr	r2, [pc, #68]	; (8000c04 <HAL_MspInit+0x54>)
 8000bc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000bc6:	4b0f      	ldr	r3, [pc, #60]	; (8000c04 <HAL_MspInit+0x54>)
 8000bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bce:	607b      	str	r3, [r7, #4]
 8000bd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	603b      	str	r3, [r7, #0]
 8000bd6:	4b0b      	ldr	r3, [pc, #44]	; (8000c04 <HAL_MspInit+0x54>)
 8000bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bda:	4a0a      	ldr	r2, [pc, #40]	; (8000c04 <HAL_MspInit+0x54>)
 8000bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000be0:	6413      	str	r3, [r2, #64]	; 0x40
 8000be2:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <HAL_MspInit+0x54>)
 8000be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bea:	603b      	str	r3, [r7, #0]
 8000bec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	210f      	movs	r1, #15
 8000bf2:	f06f 0001 	mvn.w	r0, #1
 8000bf6:	f000 faa7 	bl	8001148 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40023800 	.word	0x40023800

08000c08 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b08a      	sub	sp, #40	; 0x28
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]
 8000c1e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a19      	ldr	r2, [pc, #100]	; (8000c8c <HAL_SPI_MspInit+0x84>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d12b      	bne.n	8000c82 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	613b      	str	r3, [r7, #16]
 8000c2e:	4b18      	ldr	r3, [pc, #96]	; (8000c90 <HAL_SPI_MspInit+0x88>)
 8000c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c32:	4a17      	ldr	r2, [pc, #92]	; (8000c90 <HAL_SPI_MspInit+0x88>)
 8000c34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c38:	6453      	str	r3, [r2, #68]	; 0x44
 8000c3a:	4b15      	ldr	r3, [pc, #84]	; (8000c90 <HAL_SPI_MspInit+0x88>)
 8000c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c42:	613b      	str	r3, [r7, #16]
 8000c44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	60fb      	str	r3, [r7, #12]
 8000c4a:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <HAL_SPI_MspInit+0x88>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	4a10      	ldr	r2, [pc, #64]	; (8000c90 <HAL_SPI_MspInit+0x88>)
 8000c50:	f043 0301 	orr.w	r3, r3, #1
 8000c54:	6313      	str	r3, [r2, #48]	; 0x30
 8000c56:	4b0e      	ldr	r3, [pc, #56]	; (8000c90 <HAL_SPI_MspInit+0x88>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	f003 0301 	and.w	r3, r3, #1
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000c62:	23e0      	movs	r3, #224	; 0xe0
 8000c64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c66:	2302      	movs	r3, #2
 8000c68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6e:	2303      	movs	r3, #3
 8000c70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c72:	2305      	movs	r3, #5
 8000c74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c76:	f107 0314 	add.w	r3, r7, #20
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4805      	ldr	r0, [pc, #20]	; (8000c94 <HAL_SPI_MspInit+0x8c>)
 8000c7e:	f000 fa8d 	bl	800119c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c82:	bf00      	nop
 8000c84:	3728      	adds	r7, #40	; 0x28
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40013000 	.word	0x40013000
 8000c90:	40023800 	.word	0x40023800
 8000c94:	40020000 	.word	0x40020000

08000c98 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b08e      	sub	sp, #56	; 0x38
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000ca8:	2300      	movs	r3, #0
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	4b33      	ldr	r3, [pc, #204]	; (8000d7c <HAL_InitTick+0xe4>)
 8000cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb0:	4a32      	ldr	r2, [pc, #200]	; (8000d7c <HAL_InitTick+0xe4>)
 8000cb2:	f043 0310 	orr.w	r3, r3, #16
 8000cb6:	6413      	str	r3, [r2, #64]	; 0x40
 8000cb8:	4b30      	ldr	r3, [pc, #192]	; (8000d7c <HAL_InitTick+0xe4>)
 8000cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbc:	f003 0310 	and.w	r3, r3, #16
 8000cc0:	60fb      	str	r3, [r7, #12]
 8000cc2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cc4:	f107 0210 	add.w	r2, r7, #16
 8000cc8:	f107 0314 	add.w	r3, r7, #20
 8000ccc:	4611      	mov	r1, r2
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f002 fb34 	bl	800333c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000cd4:	6a3b      	ldr	r3, [r7, #32]
 8000cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d103      	bne.n	8000ce6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000cde:	f002 fb19 	bl	8003314 <HAL_RCC_GetPCLK1Freq>
 8000ce2:	6378      	str	r0, [r7, #52]	; 0x34
 8000ce4:	e004      	b.n	8000cf0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ce6:	f002 fb15 	bl	8003314 <HAL_RCC_GetPCLK1Freq>
 8000cea:	4603      	mov	r3, r0
 8000cec:	005b      	lsls	r3, r3, #1
 8000cee:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cf2:	4a23      	ldr	r2, [pc, #140]	; (8000d80 <HAL_InitTick+0xe8>)
 8000cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8000cf8:	0c9b      	lsrs	r3, r3, #18
 8000cfa:	3b01      	subs	r3, #1
 8000cfc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000cfe:	4b21      	ldr	r3, [pc, #132]	; (8000d84 <HAL_InitTick+0xec>)
 8000d00:	4a21      	ldr	r2, [pc, #132]	; (8000d88 <HAL_InitTick+0xf0>)
 8000d02:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d04:	4b1f      	ldr	r3, [pc, #124]	; (8000d84 <HAL_InitTick+0xec>)
 8000d06:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d0a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d0c:	4a1d      	ldr	r2, [pc, #116]	; (8000d84 <HAL_InitTick+0xec>)
 8000d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d10:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d12:	4b1c      	ldr	r3, [pc, #112]	; (8000d84 <HAL_InitTick+0xec>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d18:	4b1a      	ldr	r3, [pc, #104]	; (8000d84 <HAL_InitTick+0xec>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d1e:	4b19      	ldr	r3, [pc, #100]	; (8000d84 <HAL_InitTick+0xec>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000d24:	4817      	ldr	r0, [pc, #92]	; (8000d84 <HAL_InitTick+0xec>)
 8000d26:	f002 fdcb 	bl	80038c0 <HAL_TIM_Base_Init>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000d30:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d11b      	bne.n	8000d70 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000d38:	4812      	ldr	r0, [pc, #72]	; (8000d84 <HAL_InitTick+0xec>)
 8000d3a:	f002 fe1b 	bl	8003974 <HAL_TIM_Base_Start_IT>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000d44:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d111      	bne.n	8000d70 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d4c:	2036      	movs	r0, #54	; 0x36
 8000d4e:	f000 fa17 	bl	8001180 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2b0f      	cmp	r3, #15
 8000d56:	d808      	bhi.n	8000d6a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	6879      	ldr	r1, [r7, #4]
 8000d5c:	2036      	movs	r0, #54	; 0x36
 8000d5e:	f000 f9f3 	bl	8001148 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d62:	4a0a      	ldr	r2, [pc, #40]	; (8000d8c <HAL_InitTick+0xf4>)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6013      	str	r3, [r2, #0]
 8000d68:	e002      	b.n	8000d70 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000d70:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3738      	adds	r7, #56	; 0x38
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40023800 	.word	0x40023800
 8000d80:	431bde83 	.word	0x431bde83
 8000d84:	200001f8 	.word	0x200001f8
 8000d88:	40001000 	.word	0x40001000
 8000d8c:	20000004 	.word	0x20000004

08000d90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <NMI_Handler+0x4>

08000d96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d9a:	e7fe      	b.n	8000d9a <HardFault_Handler+0x4>

08000d9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000da0:	e7fe      	b.n	8000da0 <MemManage_Handler+0x4>

08000da2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000da6:	e7fe      	b.n	8000da6 <BusFault_Handler+0x4>

08000da8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dac:	e7fe      	b.n	8000dac <UsageFault_Handler+0x4>

08000dae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dae:	b480      	push	{r7}
 8000db0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr

08000dbc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000dc0:	4802      	ldr	r0, [pc, #8]	; (8000dcc <TIM6_DAC_IRQHandler+0x10>)
 8000dc2:	f002 fe47 	bl	8003a54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	200001f8 	.word	0x200001f8

08000dd0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000dd4:	4802      	ldr	r0, [pc, #8]	; (8000de0 <OTG_FS_IRQHandler+0x10>)
 8000dd6:	f000 fd00 	bl	80017da <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	20006138 	.word	0x20006138

08000de4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
	return 1;
 8000de8:	2301      	movs	r3, #1
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <_kill>:

int _kill(int pid, int sig)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000dfe:	f009 ffb3 	bl	800ad68 <__errno>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2216      	movs	r2, #22
 8000e06:	601a      	str	r2, [r3, #0]
	return -1;
 8000e08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <_exit>:

void _exit (int status)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000e1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e20:	6878      	ldr	r0, [r7, #4]
 8000e22:	f7ff ffe7 	bl	8000df4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000e26:	e7fe      	b.n	8000e26 <_exit+0x12>

08000e28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e30:	4a14      	ldr	r2, [pc, #80]	; (8000e84 <_sbrk+0x5c>)
 8000e32:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <_sbrk+0x60>)
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e3c:	4b13      	ldr	r3, [pc, #76]	; (8000e8c <_sbrk+0x64>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d102      	bne.n	8000e4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e44:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <_sbrk+0x64>)
 8000e46:	4a12      	ldr	r2, [pc, #72]	; (8000e90 <_sbrk+0x68>)
 8000e48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e4a:	4b10      	ldr	r3, [pc, #64]	; (8000e8c <_sbrk+0x64>)
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4413      	add	r3, r2
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d207      	bcs.n	8000e68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e58:	f009 ff86 	bl	800ad68 <__errno>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	220c      	movs	r2, #12
 8000e60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e66:	e009      	b.n	8000e7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e68:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <_sbrk+0x64>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e6e:	4b07      	ldr	r3, [pc, #28]	; (8000e8c <_sbrk+0x64>)
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4413      	add	r3, r2
 8000e76:	4a05      	ldr	r2, [pc, #20]	; (8000e8c <_sbrk+0x64>)
 8000e78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e7a:	68fb      	ldr	r3, [r7, #12]
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3718      	adds	r7, #24
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20020000 	.word	0x20020000
 8000e88:	00000400 	.word	0x00000400
 8000e8c:	20000240 	.word	0x20000240
 8000e90:	20006878 	.word	0x20006878

08000e94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e98:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <SystemInit+0x20>)
 8000e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e9e:	4a05      	ldr	r2, [pc, #20]	; (8000eb4 <SystemInit+0x20>)
 8000ea0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ea4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000eb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ef0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ebc:	480d      	ldr	r0, [pc, #52]	; (8000ef4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ebe:	490e      	ldr	r1, [pc, #56]	; (8000ef8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ec0:	4a0e      	ldr	r2, [pc, #56]	; (8000efc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ec2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ec4:	e002      	b.n	8000ecc <LoopCopyDataInit>

08000ec6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ec6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ec8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eca:	3304      	adds	r3, #4

08000ecc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ecc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ece:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ed0:	d3f9      	bcc.n	8000ec6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ed2:	4a0b      	ldr	r2, [pc, #44]	; (8000f00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ed4:	4c0b      	ldr	r4, [pc, #44]	; (8000f04 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ed6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ed8:	e001      	b.n	8000ede <LoopFillZerobss>

08000eda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000edc:	3204      	adds	r2, #4

08000ede <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ede:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ee0:	d3fb      	bcc.n	8000eda <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ee2:	f7ff ffd7 	bl	8000e94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ee6:	f009 ff45 	bl	800ad74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eea:	f7ff fafb 	bl	80004e4 <main>
  bx  lr    
 8000eee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ef0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ef4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ef8:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 8000efc:	0800b3a4 	.word	0x0800b3a4
  ldr r2, =_sbss
 8000f00:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 8000f04:	20006878 	.word	0x20006878

08000f08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f08:	e7fe      	b.n	8000f08 <ADC_IRQHandler>
	...

08000f0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f10:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <HAL_Init+0x40>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a0d      	ldr	r2, [pc, #52]	; (8000f4c <HAL_Init+0x40>)
 8000f16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f1c:	4b0b      	ldr	r3, [pc, #44]	; (8000f4c <HAL_Init+0x40>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a0a      	ldr	r2, [pc, #40]	; (8000f4c <HAL_Init+0x40>)
 8000f22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f28:	4b08      	ldr	r3, [pc, #32]	; (8000f4c <HAL_Init+0x40>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a07      	ldr	r2, [pc, #28]	; (8000f4c <HAL_Init+0x40>)
 8000f2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f34:	2003      	movs	r0, #3
 8000f36:	f000 f8fc 	bl	8001132 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f3a:	200f      	movs	r0, #15
 8000f3c:	f7ff feac 	bl	8000c98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f40:	f7ff fe36 	bl	8000bb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f44:	2300      	movs	r3, #0
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40023c00 	.word	0x40023c00

08000f50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f54:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <HAL_IncTick+0x20>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <HAL_IncTick+0x24>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4413      	add	r3, r2
 8000f60:	4a04      	ldr	r2, [pc, #16]	; (8000f74 <HAL_IncTick+0x24>)
 8000f62:	6013      	str	r3, [r2, #0]
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	20000008 	.word	0x20000008
 8000f74:	20000244 	.word	0x20000244

08000f78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f7c:	4b03      	ldr	r3, [pc, #12]	; (8000f8c <HAL_GetTick+0x14>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	20000244 	.word	0x20000244

08000f90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f98:	f7ff ffee 	bl	8000f78 <HAL_GetTick>
 8000f9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000fa8:	d005      	beq.n	8000fb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000faa:	4b0a      	ldr	r3, [pc, #40]	; (8000fd4 <HAL_Delay+0x44>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	461a      	mov	r2, r3
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fb6:	bf00      	nop
 8000fb8:	f7ff ffde 	bl	8000f78 <HAL_GetTick>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	68fa      	ldr	r2, [r7, #12]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d8f7      	bhi.n	8000fb8 <HAL_Delay+0x28>
  {
  }
}
 8000fc8:	bf00      	nop
 8000fca:	bf00      	nop
 8000fcc:	3710      	adds	r7, #16
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000008 	.word	0x20000008

08000fd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	f003 0307 	and.w	r3, r3, #7
 8000fe6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fe8:	4b0c      	ldr	r3, [pc, #48]	; (800101c <__NVIC_SetPriorityGrouping+0x44>)
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fee:	68ba      	ldr	r2, [r7, #8]
 8000ff0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001000:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001004:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001008:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800100a:	4a04      	ldr	r2, [pc, #16]	; (800101c <__NVIC_SetPriorityGrouping+0x44>)
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	60d3      	str	r3, [r2, #12]
}
 8001010:	bf00      	nop
 8001012:	3714      	adds	r7, #20
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001024:	4b04      	ldr	r3, [pc, #16]	; (8001038 <__NVIC_GetPriorityGrouping+0x18>)
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	0a1b      	lsrs	r3, r3, #8
 800102a:	f003 0307 	and.w	r3, r3, #7
}
 800102e:	4618      	mov	r0, r3
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104a:	2b00      	cmp	r3, #0
 800104c:	db0b      	blt.n	8001066 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	f003 021f 	and.w	r2, r3, #31
 8001054:	4907      	ldr	r1, [pc, #28]	; (8001074 <__NVIC_EnableIRQ+0x38>)
 8001056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105a:	095b      	lsrs	r3, r3, #5
 800105c:	2001      	movs	r0, #1
 800105e:	fa00 f202 	lsl.w	r2, r0, r2
 8001062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001066:	bf00      	nop
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	e000e100 	.word	0xe000e100

08001078 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	6039      	str	r1, [r7, #0]
 8001082:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001088:	2b00      	cmp	r3, #0
 800108a:	db0a      	blt.n	80010a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	b2da      	uxtb	r2, r3
 8001090:	490c      	ldr	r1, [pc, #48]	; (80010c4 <__NVIC_SetPriority+0x4c>)
 8001092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001096:	0112      	lsls	r2, r2, #4
 8001098:	b2d2      	uxtb	r2, r2
 800109a:	440b      	add	r3, r1
 800109c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010a0:	e00a      	b.n	80010b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	b2da      	uxtb	r2, r3
 80010a6:	4908      	ldr	r1, [pc, #32]	; (80010c8 <__NVIC_SetPriority+0x50>)
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	f003 030f 	and.w	r3, r3, #15
 80010ae:	3b04      	subs	r3, #4
 80010b0:	0112      	lsls	r2, r2, #4
 80010b2:	b2d2      	uxtb	r2, r2
 80010b4:	440b      	add	r3, r1
 80010b6:	761a      	strb	r2, [r3, #24]
}
 80010b8:	bf00      	nop
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	e000e100 	.word	0xe000e100
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b089      	sub	sp, #36	; 0x24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	f003 0307 	and.w	r3, r3, #7
 80010de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	f1c3 0307 	rsb	r3, r3, #7
 80010e6:	2b04      	cmp	r3, #4
 80010e8:	bf28      	it	cs
 80010ea:	2304      	movcs	r3, #4
 80010ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	3304      	adds	r3, #4
 80010f2:	2b06      	cmp	r3, #6
 80010f4:	d902      	bls.n	80010fc <NVIC_EncodePriority+0x30>
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	3b03      	subs	r3, #3
 80010fa:	e000      	b.n	80010fe <NVIC_EncodePriority+0x32>
 80010fc:	2300      	movs	r3, #0
 80010fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001100:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	43da      	mvns	r2, r3
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	401a      	ands	r2, r3
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001114:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	fa01 f303 	lsl.w	r3, r1, r3
 800111e:	43d9      	mvns	r1, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001124:	4313      	orrs	r3, r2
         );
}
 8001126:	4618      	mov	r0, r3
 8001128:	3724      	adds	r7, #36	; 0x24
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr

08001132 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b082      	sub	sp, #8
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f7ff ff4c 	bl	8000fd8 <__NVIC_SetPriorityGrouping>
}
 8001140:	bf00      	nop
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607a      	str	r2, [r7, #4]
 8001154:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001156:	2300      	movs	r3, #0
 8001158:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800115a:	f7ff ff61 	bl	8001020 <__NVIC_GetPriorityGrouping>
 800115e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001160:	687a      	ldr	r2, [r7, #4]
 8001162:	68b9      	ldr	r1, [r7, #8]
 8001164:	6978      	ldr	r0, [r7, #20]
 8001166:	f7ff ffb1 	bl	80010cc <NVIC_EncodePriority>
 800116a:	4602      	mov	r2, r0
 800116c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001170:	4611      	mov	r1, r2
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff ff80 	bl	8001078 <__NVIC_SetPriority>
}
 8001178:	bf00      	nop
 800117a:	3718      	adds	r7, #24
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800118a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff ff54 	bl	800103c <__NVIC_EnableIRQ>
}
 8001194:	bf00      	nop
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800119c:	b480      	push	{r7}
 800119e:	b089      	sub	sp, #36	; 0x24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011a6:	2300      	movs	r3, #0
 80011a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011aa:	2300      	movs	r3, #0
 80011ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011ae:	2300      	movs	r3, #0
 80011b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011b2:	2300      	movs	r3, #0
 80011b4:	61fb      	str	r3, [r7, #28]
 80011b6:	e16b      	b.n	8001490 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011b8:	2201      	movs	r2, #1
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	697a      	ldr	r2, [r7, #20]
 80011c8:	4013      	ands	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	f040 815a 	bne.w	800148a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f003 0303 	and.w	r3, r3, #3
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d005      	beq.n	80011ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d130      	bne.n	8001250 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	2203      	movs	r2, #3
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	43db      	mvns	r3, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4013      	ands	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	68da      	ldr	r2, [r3, #12]
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4313      	orrs	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001224:	2201      	movs	r2, #1
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	43db      	mvns	r3, r3
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	4013      	ands	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	091b      	lsrs	r3, r3, #4
 800123a:	f003 0201 	and.w	r2, r3, #1
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	4313      	orrs	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f003 0303 	and.w	r3, r3, #3
 8001258:	2b03      	cmp	r3, #3
 800125a:	d017      	beq.n	800128c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	2203      	movs	r2, #3
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	43db      	mvns	r3, r3
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	4013      	ands	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	689a      	ldr	r2, [r3, #8]
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	4313      	orrs	r3, r2
 8001284:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f003 0303 	and.w	r3, r3, #3
 8001294:	2b02      	cmp	r3, #2
 8001296:	d123      	bne.n	80012e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	08da      	lsrs	r2, r3, #3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3208      	adds	r2, #8
 80012a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	f003 0307 	and.w	r3, r3, #7
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	220f      	movs	r2, #15
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	43db      	mvns	r3, r3
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	4013      	ands	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	691a      	ldr	r2, [r3, #16]
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	f003 0307 	and.w	r3, r3, #7
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	08da      	lsrs	r2, r3, #3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	3208      	adds	r2, #8
 80012da:	69b9      	ldr	r1, [r7, #24]
 80012dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	2203      	movs	r2, #3
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	43db      	mvns	r3, r3
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	4013      	ands	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f003 0203 	and.w	r2, r3, #3
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	4313      	orrs	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800131c:	2b00      	cmp	r3, #0
 800131e:	f000 80b4 	beq.w	800148a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	4b60      	ldr	r3, [pc, #384]	; (80014a8 <HAL_GPIO_Init+0x30c>)
 8001328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132a:	4a5f      	ldr	r2, [pc, #380]	; (80014a8 <HAL_GPIO_Init+0x30c>)
 800132c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001330:	6453      	str	r3, [r2, #68]	; 0x44
 8001332:	4b5d      	ldr	r3, [pc, #372]	; (80014a8 <HAL_GPIO_Init+0x30c>)
 8001334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001336:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800133e:	4a5b      	ldr	r2, [pc, #364]	; (80014ac <HAL_GPIO_Init+0x310>)
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	089b      	lsrs	r3, r3, #2
 8001344:	3302      	adds	r3, #2
 8001346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800134a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	f003 0303 	and.w	r3, r3, #3
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	220f      	movs	r2, #15
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	43db      	mvns	r3, r3
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	4013      	ands	r3, r2
 8001360:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a52      	ldr	r2, [pc, #328]	; (80014b0 <HAL_GPIO_Init+0x314>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d02b      	beq.n	80013c2 <HAL_GPIO_Init+0x226>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a51      	ldr	r2, [pc, #324]	; (80014b4 <HAL_GPIO_Init+0x318>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d025      	beq.n	80013be <HAL_GPIO_Init+0x222>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a50      	ldr	r2, [pc, #320]	; (80014b8 <HAL_GPIO_Init+0x31c>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d01f      	beq.n	80013ba <HAL_GPIO_Init+0x21e>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a4f      	ldr	r2, [pc, #316]	; (80014bc <HAL_GPIO_Init+0x320>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d019      	beq.n	80013b6 <HAL_GPIO_Init+0x21a>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a4e      	ldr	r2, [pc, #312]	; (80014c0 <HAL_GPIO_Init+0x324>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d013      	beq.n	80013b2 <HAL_GPIO_Init+0x216>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a4d      	ldr	r2, [pc, #308]	; (80014c4 <HAL_GPIO_Init+0x328>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d00d      	beq.n	80013ae <HAL_GPIO_Init+0x212>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a4c      	ldr	r2, [pc, #304]	; (80014c8 <HAL_GPIO_Init+0x32c>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d007      	beq.n	80013aa <HAL_GPIO_Init+0x20e>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a4b      	ldr	r2, [pc, #300]	; (80014cc <HAL_GPIO_Init+0x330>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d101      	bne.n	80013a6 <HAL_GPIO_Init+0x20a>
 80013a2:	2307      	movs	r3, #7
 80013a4:	e00e      	b.n	80013c4 <HAL_GPIO_Init+0x228>
 80013a6:	2308      	movs	r3, #8
 80013a8:	e00c      	b.n	80013c4 <HAL_GPIO_Init+0x228>
 80013aa:	2306      	movs	r3, #6
 80013ac:	e00a      	b.n	80013c4 <HAL_GPIO_Init+0x228>
 80013ae:	2305      	movs	r3, #5
 80013b0:	e008      	b.n	80013c4 <HAL_GPIO_Init+0x228>
 80013b2:	2304      	movs	r3, #4
 80013b4:	e006      	b.n	80013c4 <HAL_GPIO_Init+0x228>
 80013b6:	2303      	movs	r3, #3
 80013b8:	e004      	b.n	80013c4 <HAL_GPIO_Init+0x228>
 80013ba:	2302      	movs	r3, #2
 80013bc:	e002      	b.n	80013c4 <HAL_GPIO_Init+0x228>
 80013be:	2301      	movs	r3, #1
 80013c0:	e000      	b.n	80013c4 <HAL_GPIO_Init+0x228>
 80013c2:	2300      	movs	r3, #0
 80013c4:	69fa      	ldr	r2, [r7, #28]
 80013c6:	f002 0203 	and.w	r2, r2, #3
 80013ca:	0092      	lsls	r2, r2, #2
 80013cc:	4093      	lsls	r3, r2
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013d4:	4935      	ldr	r1, [pc, #212]	; (80014ac <HAL_GPIO_Init+0x310>)
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	089b      	lsrs	r3, r3, #2
 80013da:	3302      	adds	r3, #2
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013e2:	4b3b      	ldr	r3, [pc, #236]	; (80014d0 <HAL_GPIO_Init+0x334>)
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	43db      	mvns	r3, r3
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	4013      	ands	r3, r2
 80013f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d003      	beq.n	8001406 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	4313      	orrs	r3, r2
 8001404:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001406:	4a32      	ldr	r2, [pc, #200]	; (80014d0 <HAL_GPIO_Init+0x334>)
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800140c:	4b30      	ldr	r3, [pc, #192]	; (80014d0 <HAL_GPIO_Init+0x334>)
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	43db      	mvns	r3, r3
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	4013      	ands	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001424:	2b00      	cmp	r3, #0
 8001426:	d003      	beq.n	8001430 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	4313      	orrs	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001430:	4a27      	ldr	r2, [pc, #156]	; (80014d0 <HAL_GPIO_Init+0x334>)
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001436:	4b26      	ldr	r3, [pc, #152]	; (80014d0 <HAL_GPIO_Init+0x334>)
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	43db      	mvns	r3, r3
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	4013      	ands	r3, r2
 8001444:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d003      	beq.n	800145a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	4313      	orrs	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800145a:	4a1d      	ldr	r2, [pc, #116]	; (80014d0 <HAL_GPIO_Init+0x334>)
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001460:	4b1b      	ldr	r3, [pc, #108]	; (80014d0 <HAL_GPIO_Init+0x334>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	43db      	mvns	r3, r3
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	4013      	ands	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001478:	2b00      	cmp	r3, #0
 800147a:	d003      	beq.n	8001484 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	4313      	orrs	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001484:	4a12      	ldr	r2, [pc, #72]	; (80014d0 <HAL_GPIO_Init+0x334>)
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	3301      	adds	r3, #1
 800148e:	61fb      	str	r3, [r7, #28]
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	2b0f      	cmp	r3, #15
 8001494:	f67f ae90 	bls.w	80011b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001498:	bf00      	nop
 800149a:	bf00      	nop
 800149c:	3724      	adds	r7, #36	; 0x24
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	40023800 	.word	0x40023800
 80014ac:	40013800 	.word	0x40013800
 80014b0:	40020000 	.word	0x40020000
 80014b4:	40020400 	.word	0x40020400
 80014b8:	40020800 	.word	0x40020800
 80014bc:	40020c00 	.word	0x40020c00
 80014c0:	40021000 	.word	0x40021000
 80014c4:	40021400 	.word	0x40021400
 80014c8:	40021800 	.word	0x40021800
 80014cc:	40021c00 	.word	0x40021c00
 80014d0:	40013c00 	.word	0x40013c00

080014d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	460b      	mov	r3, r1
 80014de:	807b      	strh	r3, [r7, #2]
 80014e0:	4613      	mov	r3, r2
 80014e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014e4:	787b      	ldrb	r3, [r7, #1]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d003      	beq.n	80014f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014ea:	887a      	ldrh	r2, [r7, #2]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014f0:	e003      	b.n	80014fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014f2:	887b      	ldrh	r3, [r7, #2]
 80014f4:	041a      	lsls	r2, r3, #16
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	619a      	str	r2, [r3, #24]
}
 80014fa:	bf00      	nop
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr

08001506 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001506:	b480      	push	{r7}
 8001508:	b085      	sub	sp, #20
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
 800150e:	460b      	mov	r3, r1
 8001510:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	695b      	ldr	r3, [r3, #20]
 8001516:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001518:	887a      	ldrh	r2, [r7, #2]
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	4013      	ands	r3, r2
 800151e:	041a      	lsls	r2, r3, #16
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	43d9      	mvns	r1, r3
 8001524:	887b      	ldrh	r3, [r7, #2]
 8001526:	400b      	ands	r3, r1
 8001528:	431a      	orrs	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	619a      	str	r2, [r3, #24]
}
 800152e:	bf00      	nop
 8001530:	3714      	adds	r7, #20
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr

0800153a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800153a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800153c:	b08f      	sub	sp, #60	; 0x3c
 800153e:	af0a      	add	r7, sp, #40	; 0x28
 8001540:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d101      	bne.n	800154c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e10f      	b.n	800176c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001558:	b2db      	uxtb	r3, r3
 800155a:	2b00      	cmp	r3, #0
 800155c:	d106      	bne.n	800156c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2200      	movs	r2, #0
 8001562:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f009 f836 	bl	800a5d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2203      	movs	r2, #3
 8001570:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800157c:	2b00      	cmp	r3, #0
 800157e:	d102      	bne.n	8001586 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2200      	movs	r2, #0
 8001584:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4618      	mov	r0, r3
 800158c:	f002 fd5b 	bl	8004046 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	603b      	str	r3, [r7, #0]
 8001596:	687e      	ldr	r6, [r7, #4]
 8001598:	466d      	mov	r5, sp
 800159a:	f106 0410 	add.w	r4, r6, #16
 800159e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015aa:	e885 0003 	stmia.w	r5, {r0, r1}
 80015ae:	1d33      	adds	r3, r6, #4
 80015b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015b2:	6838      	ldr	r0, [r7, #0]
 80015b4:	f002 fc32 	bl	8003e1c <USB_CoreInit>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d005      	beq.n	80015ca <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2202      	movs	r2, #2
 80015c2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e0d0      	b.n	800176c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	2100      	movs	r1, #0
 80015d0:	4618      	mov	r0, r3
 80015d2:	f002 fd49 	bl	8004068 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015d6:	2300      	movs	r3, #0
 80015d8:	73fb      	strb	r3, [r7, #15]
 80015da:	e04a      	b.n	8001672 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80015dc:	7bfa      	ldrb	r2, [r7, #15]
 80015de:	6879      	ldr	r1, [r7, #4]
 80015e0:	4613      	mov	r3, r2
 80015e2:	00db      	lsls	r3, r3, #3
 80015e4:	4413      	add	r3, r2
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	440b      	add	r3, r1
 80015ea:	333d      	adds	r3, #61	; 0x3d
 80015ec:	2201      	movs	r2, #1
 80015ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80015f0:	7bfa      	ldrb	r2, [r7, #15]
 80015f2:	6879      	ldr	r1, [r7, #4]
 80015f4:	4613      	mov	r3, r2
 80015f6:	00db      	lsls	r3, r3, #3
 80015f8:	4413      	add	r3, r2
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	440b      	add	r3, r1
 80015fe:	333c      	adds	r3, #60	; 0x3c
 8001600:	7bfa      	ldrb	r2, [r7, #15]
 8001602:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001604:	7bfa      	ldrb	r2, [r7, #15]
 8001606:	7bfb      	ldrb	r3, [r7, #15]
 8001608:	b298      	uxth	r0, r3
 800160a:	6879      	ldr	r1, [r7, #4]
 800160c:	4613      	mov	r3, r2
 800160e:	00db      	lsls	r3, r3, #3
 8001610:	4413      	add	r3, r2
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	440b      	add	r3, r1
 8001616:	3344      	adds	r3, #68	; 0x44
 8001618:	4602      	mov	r2, r0
 800161a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800161c:	7bfa      	ldrb	r2, [r7, #15]
 800161e:	6879      	ldr	r1, [r7, #4]
 8001620:	4613      	mov	r3, r2
 8001622:	00db      	lsls	r3, r3, #3
 8001624:	4413      	add	r3, r2
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	440b      	add	r3, r1
 800162a:	3340      	adds	r3, #64	; 0x40
 800162c:	2200      	movs	r2, #0
 800162e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001630:	7bfa      	ldrb	r2, [r7, #15]
 8001632:	6879      	ldr	r1, [r7, #4]
 8001634:	4613      	mov	r3, r2
 8001636:	00db      	lsls	r3, r3, #3
 8001638:	4413      	add	r3, r2
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	440b      	add	r3, r1
 800163e:	3348      	adds	r3, #72	; 0x48
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001644:	7bfa      	ldrb	r2, [r7, #15]
 8001646:	6879      	ldr	r1, [r7, #4]
 8001648:	4613      	mov	r3, r2
 800164a:	00db      	lsls	r3, r3, #3
 800164c:	4413      	add	r3, r2
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	440b      	add	r3, r1
 8001652:	334c      	adds	r3, #76	; 0x4c
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001658:	7bfa      	ldrb	r2, [r7, #15]
 800165a:	6879      	ldr	r1, [r7, #4]
 800165c:	4613      	mov	r3, r2
 800165e:	00db      	lsls	r3, r3, #3
 8001660:	4413      	add	r3, r2
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	440b      	add	r3, r1
 8001666:	3354      	adds	r3, #84	; 0x54
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800166c:	7bfb      	ldrb	r3, [r7, #15]
 800166e:	3301      	adds	r3, #1
 8001670:	73fb      	strb	r3, [r7, #15]
 8001672:	7bfa      	ldrb	r2, [r7, #15]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	429a      	cmp	r2, r3
 800167a:	d3af      	bcc.n	80015dc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800167c:	2300      	movs	r3, #0
 800167e:	73fb      	strb	r3, [r7, #15]
 8001680:	e044      	b.n	800170c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001682:	7bfa      	ldrb	r2, [r7, #15]
 8001684:	6879      	ldr	r1, [r7, #4]
 8001686:	4613      	mov	r3, r2
 8001688:	00db      	lsls	r3, r3, #3
 800168a:	4413      	add	r3, r2
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	440b      	add	r3, r1
 8001690:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001694:	2200      	movs	r2, #0
 8001696:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001698:	7bfa      	ldrb	r2, [r7, #15]
 800169a:	6879      	ldr	r1, [r7, #4]
 800169c:	4613      	mov	r3, r2
 800169e:	00db      	lsls	r3, r3, #3
 80016a0:	4413      	add	r3, r2
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	440b      	add	r3, r1
 80016a6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80016aa:	7bfa      	ldrb	r2, [r7, #15]
 80016ac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80016ae:	7bfa      	ldrb	r2, [r7, #15]
 80016b0:	6879      	ldr	r1, [r7, #4]
 80016b2:	4613      	mov	r3, r2
 80016b4:	00db      	lsls	r3, r3, #3
 80016b6:	4413      	add	r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	440b      	add	r3, r1
 80016bc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80016c0:	2200      	movs	r2, #0
 80016c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80016c4:	7bfa      	ldrb	r2, [r7, #15]
 80016c6:	6879      	ldr	r1, [r7, #4]
 80016c8:	4613      	mov	r3, r2
 80016ca:	00db      	lsls	r3, r3, #3
 80016cc:	4413      	add	r3, r2
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	440b      	add	r3, r1
 80016d2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80016da:	7bfa      	ldrb	r2, [r7, #15]
 80016dc:	6879      	ldr	r1, [r7, #4]
 80016de:	4613      	mov	r3, r2
 80016e0:	00db      	lsls	r3, r3, #3
 80016e2:	4413      	add	r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	440b      	add	r3, r1
 80016e8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80016f0:	7bfa      	ldrb	r2, [r7, #15]
 80016f2:	6879      	ldr	r1, [r7, #4]
 80016f4:	4613      	mov	r3, r2
 80016f6:	00db      	lsls	r3, r3, #3
 80016f8:	4413      	add	r3, r2
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	440b      	add	r3, r1
 80016fe:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001706:	7bfb      	ldrb	r3, [r7, #15]
 8001708:	3301      	adds	r3, #1
 800170a:	73fb      	strb	r3, [r7, #15]
 800170c:	7bfa      	ldrb	r2, [r7, #15]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	429a      	cmp	r2, r3
 8001714:	d3b5      	bcc.n	8001682 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	603b      	str	r3, [r7, #0]
 800171c:	687e      	ldr	r6, [r7, #4]
 800171e:	466d      	mov	r5, sp
 8001720:	f106 0410 	add.w	r4, r6, #16
 8001724:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001726:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001728:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800172a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800172c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001730:	e885 0003 	stmia.w	r5, {r0, r1}
 8001734:	1d33      	adds	r3, r6, #4
 8001736:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001738:	6838      	ldr	r0, [r7, #0]
 800173a:	f002 fce1 	bl	8004100 <USB_DevInit>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d005      	beq.n	8001750 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2202      	movs	r2, #2
 8001748:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e00d      	b.n	800176c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2200      	movs	r2, #0
 8001754:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2201      	movs	r2, #1
 800175c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4618      	mov	r0, r3
 8001766:	f003 fe30 	bl	80053ca <USB_DevDisconnect>

  return HAL_OK;
 800176a:	2300      	movs	r3, #0
}
 800176c:	4618      	mov	r0, r3
 800176e:	3714      	adds	r7, #20
 8001770:	46bd      	mov	sp, r7
 8001772:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001774 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001788:	2b01      	cmp	r3, #1
 800178a:	d101      	bne.n	8001790 <HAL_PCD_Start+0x1c>
 800178c:	2302      	movs	r3, #2
 800178e:	e020      	b.n	80017d2 <HAL_PCD_Start+0x5e>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2201      	movs	r2, #1
 8001794:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800179c:	2b01      	cmp	r3, #1
 800179e:	d109      	bne.n	80017b4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d005      	beq.n	80017b4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017ac:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f002 fc33 	bl	8004024 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f003 fde0 	bl	8005388 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2200      	movs	r2, #0
 80017cc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80017da:	b590      	push	{r4, r7, lr}
 80017dc:	b08d      	sub	sp, #52	; 0x34
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80017e8:	6a3b      	ldr	r3, [r7, #32]
 80017ea:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f003 fe9e 	bl	8005532 <USB_GetMode>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	f040 848a 	bne.w	8002112 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4618      	mov	r0, r3
 8001804:	f003 fe02 	bl	800540c <USB_ReadInterrupts>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	f000 8480 	beq.w	8002110 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	0a1b      	lsrs	r3, r3, #8
 800181a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4618      	mov	r0, r3
 800182a:	f003 fdef 	bl	800540c <USB_ReadInterrupts>
 800182e:	4603      	mov	r3, r0
 8001830:	f003 0302 	and.w	r3, r3, #2
 8001834:	2b02      	cmp	r3, #2
 8001836:	d107      	bne.n	8001848 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	695a      	ldr	r2, [r3, #20]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f002 0202 	and.w	r2, r2, #2
 8001846:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4618      	mov	r0, r3
 800184e:	f003 fddd 	bl	800540c <USB_ReadInterrupts>
 8001852:	4603      	mov	r3, r0
 8001854:	f003 0310 	and.w	r3, r3, #16
 8001858:	2b10      	cmp	r3, #16
 800185a:	d161      	bne.n	8001920 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	699a      	ldr	r2, [r3, #24]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f022 0210 	bic.w	r2, r2, #16
 800186a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800186c:	6a3b      	ldr	r3, [r7, #32]
 800186e:	6a1b      	ldr	r3, [r3, #32]
 8001870:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	f003 020f 	and.w	r2, r3, #15
 8001878:	4613      	mov	r3, r2
 800187a:	00db      	lsls	r3, r3, #3
 800187c:	4413      	add	r3, r2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	4413      	add	r3, r2
 8001888:	3304      	adds	r3, #4
 800188a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	0c5b      	lsrs	r3, r3, #17
 8001890:	f003 030f 	and.w	r3, r3, #15
 8001894:	2b02      	cmp	r3, #2
 8001896:	d124      	bne.n	80018e2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800189e:	4013      	ands	r3, r2
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d035      	beq.n	8001910 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	091b      	lsrs	r3, r3, #4
 80018ac:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80018ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018b2:	b29b      	uxth	r3, r3
 80018b4:	461a      	mov	r2, r3
 80018b6:	6a38      	ldr	r0, [r7, #32]
 80018b8:	f003 fc14 	bl	80050e4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	691a      	ldr	r2, [r3, #16]
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	091b      	lsrs	r3, r3, #4
 80018c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018c8:	441a      	add	r2, r3
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	6a1a      	ldr	r2, [r3, #32]
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	091b      	lsrs	r3, r3, #4
 80018d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018da:	441a      	add	r2, r3
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	621a      	str	r2, [r3, #32]
 80018e0:	e016      	b.n	8001910 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	0c5b      	lsrs	r3, r3, #17
 80018e6:	f003 030f 	and.w	r3, r3, #15
 80018ea:	2b06      	cmp	r3, #6
 80018ec:	d110      	bne.n	8001910 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80018f4:	2208      	movs	r2, #8
 80018f6:	4619      	mov	r1, r3
 80018f8:	6a38      	ldr	r0, [r7, #32]
 80018fa:	f003 fbf3 	bl	80050e4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	6a1a      	ldr	r2, [r3, #32]
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	091b      	lsrs	r3, r3, #4
 8001906:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800190a:	441a      	add	r2, r3
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	699a      	ldr	r2, [r3, #24]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f042 0210 	orr.w	r2, r2, #16
 800191e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4618      	mov	r0, r3
 8001926:	f003 fd71 	bl	800540c <USB_ReadInterrupts>
 800192a:	4603      	mov	r3, r0
 800192c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001930:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001934:	f040 80a7 	bne.w	8001a86 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001938:	2300      	movs	r3, #0
 800193a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4618      	mov	r0, r3
 8001942:	f003 fd76 	bl	8005432 <USB_ReadDevAllOutEpInterrupt>
 8001946:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001948:	e099      	b.n	8001a7e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800194a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800194c:	f003 0301 	and.w	r3, r3, #1
 8001950:	2b00      	cmp	r3, #0
 8001952:	f000 808e 	beq.w	8001a72 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800195c:	b2d2      	uxtb	r2, r2
 800195e:	4611      	mov	r1, r2
 8001960:	4618      	mov	r0, r3
 8001962:	f003 fd9a 	bl	800549a <USB_ReadDevOutEPInterrupt>
 8001966:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	2b00      	cmp	r3, #0
 8001970:	d00c      	beq.n	800198c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001974:	015a      	lsls	r2, r3, #5
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	4413      	add	r3, r2
 800197a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800197e:	461a      	mov	r2, r3
 8001980:	2301      	movs	r3, #1
 8001982:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001984:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f000 fec2 	bl	8002710 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	f003 0308 	and.w	r3, r3, #8
 8001992:	2b00      	cmp	r3, #0
 8001994:	d00c      	beq.n	80019b0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001998:	015a      	lsls	r2, r3, #5
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	4413      	add	r3, r2
 800199e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019a2:	461a      	mov	r2, r3
 80019a4:	2308      	movs	r3, #8
 80019a6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80019a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f000 ff98 	bl	80028e0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	f003 0310 	and.w	r3, r3, #16
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d008      	beq.n	80019cc <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80019ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019bc:	015a      	lsls	r2, r3, #5
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	4413      	add	r3, r2
 80019c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019c6:	461a      	mov	r2, r3
 80019c8:	2310      	movs	r3, #16
 80019ca:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d030      	beq.n	8001a38 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80019d6:	6a3b      	ldr	r3, [r7, #32]
 80019d8:	695b      	ldr	r3, [r3, #20]
 80019da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019de:	2b80      	cmp	r3, #128	; 0x80
 80019e0:	d109      	bne.n	80019f6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	69fa      	ldr	r2, [r7, #28]
 80019ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019f4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80019f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019f8:	4613      	mov	r3, r2
 80019fa:	00db      	lsls	r3, r3, #3
 80019fc:	4413      	add	r3, r2
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	4413      	add	r3, r2
 8001a08:	3304      	adds	r3, #4
 8001a0a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	78db      	ldrb	r3, [r3, #3]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d108      	bne.n	8001a26 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	2200      	movs	r2, #0
 8001a18:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	4619      	mov	r1, r3
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f008 fedf 	bl	800a7e4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a28:	015a      	lsls	r2, r3, #5
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a32:	461a      	mov	r2, r3
 8001a34:	2302      	movs	r3, #2
 8001a36:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	f003 0320 	and.w	r3, r3, #32
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d008      	beq.n	8001a54 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a44:	015a      	lsls	r2, r3, #5
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	4413      	add	r3, r2
 8001a4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a4e:	461a      	mov	r2, r3
 8001a50:	2320      	movs	r3, #32
 8001a52:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d009      	beq.n	8001a72 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a60:	015a      	lsls	r2, r3, #5
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	4413      	add	r3, r2
 8001a66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a70:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a74:	3301      	adds	r3, #1
 8001a76:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a7a:	085b      	lsrs	r3, r3, #1
 8001a7c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	f47f af62 	bne.w	800194a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f003 fcbe 	bl	800540c <USB_ReadInterrupts>
 8001a90:	4603      	mov	r3, r0
 8001a92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a96:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001a9a:	f040 80db 	bne.w	8001c54 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f003 fcdf 	bl	8005466 <USB_ReadDevAllInEpInterrupt>
 8001aa8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001aae:	e0cd      	b.n	8001c4c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	f000 80c2 	beq.w	8001c40 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ac2:	b2d2      	uxtb	r2, r2
 8001ac4:	4611      	mov	r1, r2
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f003 fd05 	bl	80054d6 <USB_ReadDevInEPInterrupt>
 8001acc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	f003 0301 	and.w	r3, r3, #1
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d057      	beq.n	8001b88 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ada:	f003 030f 	and.w	r3, r3, #15
 8001ade:	2201      	movs	r2, #1
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001aec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	43db      	mvns	r3, r3
 8001af2:	69f9      	ldr	r1, [r7, #28]
 8001af4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001af8:	4013      	ands	r3, r2
 8001afa:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afe:	015a      	lsls	r2, r3, #5
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	4413      	add	r3, r2
 8001b04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b08:	461a      	mov	r2, r3
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	691b      	ldr	r3, [r3, #16]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d132      	bne.n	8001b7c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001b16:	6879      	ldr	r1, [r7, #4]
 8001b18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	00db      	lsls	r3, r3, #3
 8001b1e:	4413      	add	r3, r2
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	440b      	add	r3, r1
 8001b24:	334c      	adds	r3, #76	; 0x4c
 8001b26:	6819      	ldr	r1, [r3, #0]
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	00db      	lsls	r3, r3, #3
 8001b30:	4413      	add	r3, r2
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	4403      	add	r3, r0
 8001b36:	3348      	adds	r3, #72	; 0x48
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4419      	add	r1, r3
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b40:	4613      	mov	r3, r2
 8001b42:	00db      	lsls	r3, r3, #3
 8001b44:	4413      	add	r3, r2
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	4403      	add	r3, r0
 8001b4a:	334c      	adds	r3, #76	; 0x4c
 8001b4c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d113      	bne.n	8001b7c <HAL_PCD_IRQHandler+0x3a2>
 8001b54:	6879      	ldr	r1, [r7, #4]
 8001b56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b58:	4613      	mov	r3, r2
 8001b5a:	00db      	lsls	r3, r3, #3
 8001b5c:	4413      	add	r3, r2
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	440b      	add	r3, r1
 8001b62:	3354      	adds	r3, #84	; 0x54
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d108      	bne.n	8001b7c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6818      	ldr	r0, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001b74:	461a      	mov	r2, r3
 8001b76:	2101      	movs	r1, #1
 8001b78:	f003 fd0c 	bl	8005594 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	4619      	mov	r1, r3
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f008 fda9 	bl	800a6da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	f003 0308 	and.w	r3, r3, #8
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d008      	beq.n	8001ba4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b94:	015a      	lsls	r2, r3, #5
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	4413      	add	r3, r2
 8001b9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	2308      	movs	r3, #8
 8001ba2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	f003 0310 	and.w	r3, r3, #16
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d008      	beq.n	8001bc0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb0:	015a      	lsls	r2, r3, #5
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bba:	461a      	mov	r2, r3
 8001bbc:	2310      	movs	r3, #16
 8001bbe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d008      	beq.n	8001bdc <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bcc:	015a      	lsls	r2, r3, #5
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	2340      	movs	r3, #64	; 0x40
 8001bda:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d023      	beq.n	8001c2e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001be6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001be8:	6a38      	ldr	r0, [r7, #32]
 8001bea:	f002 fbed 	bl	80043c8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	00db      	lsls	r3, r3, #3
 8001bf4:	4413      	add	r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	3338      	adds	r3, #56	; 0x38
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	3304      	adds	r3, #4
 8001c00:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	78db      	ldrb	r3, [r3, #3]
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d108      	bne.n	8001c1c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	4619      	mov	r1, r3
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f008 fdf6 	bl	800a808 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1e:	015a      	lsls	r2, r3, #5
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	4413      	add	r3, r2
 8001c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c28:	461a      	mov	r2, r3
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d003      	beq.n	8001c40 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001c38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f000 fcdb 	bl	80025f6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c42:	3301      	adds	r3, #1
 8001c44:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c48:	085b      	lsrs	r3, r3, #1
 8001c4a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	f47f af2e 	bne.w	8001ab0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f003 fbd7 	bl	800540c <USB_ReadInterrupts>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001c64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001c68:	d122      	bne.n	8001cb0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	69fa      	ldr	r2, [r7, #28]
 8001c74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c78:	f023 0301 	bic.w	r3, r3, #1
 8001c7c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d108      	bne.n	8001c9a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001c90:	2100      	movs	r1, #0
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f000 fec2 	bl	8002a1c <HAL_PCDEx_LPM_Callback>
 8001c98:	e002      	b.n	8001ca0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f008 fd94 	bl	800a7c8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	695a      	ldr	r2, [r3, #20]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001cae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f003 fba9 	bl	800540c <USB_ReadInterrupts>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001cc4:	d112      	bne.n	8001cec <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d102      	bne.n	8001cdc <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f008 fd50 	bl	800a77c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	695a      	ldr	r2, [r3, #20]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001cea:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f003 fb8b 	bl	800540c <USB_ReadInterrupts>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d00:	f040 80b7 	bne.w	8001e72 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	69fa      	ldr	r2, [r7, #28]
 8001d0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d12:	f023 0301 	bic.w	r3, r3, #1
 8001d16:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2110      	movs	r1, #16
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f002 fb52 	bl	80043c8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d24:	2300      	movs	r3, #0
 8001d26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d28:	e046      	b.n	8001db8 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d2c:	015a      	lsls	r2, r3, #5
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	4413      	add	r3, r2
 8001d32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d36:	461a      	mov	r2, r3
 8001d38:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001d3c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d40:	015a      	lsls	r2, r3, #5
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	4413      	add	r3, r2
 8001d46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d4e:	0151      	lsls	r1, r2, #5
 8001d50:	69fa      	ldr	r2, [r7, #28]
 8001d52:	440a      	add	r2, r1
 8001d54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001d58:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001d5c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d60:	015a      	lsls	r2, r3, #5
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	4413      	add	r3, r2
 8001d66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001d70:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d74:	015a      	lsls	r2, r3, #5
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	4413      	add	r3, r2
 8001d7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d82:	0151      	lsls	r1, r2, #5
 8001d84:	69fa      	ldr	r2, [r7, #28]
 8001d86:	440a      	add	r2, r1
 8001d88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001d8c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001d90:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d94:	015a      	lsls	r2, r3, #5
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	4413      	add	r3, r2
 8001d9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001da2:	0151      	lsls	r1, r2, #5
 8001da4:	69fa      	ldr	r2, [r7, #28]
 8001da6:	440a      	add	r2, r1
 8001da8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001dac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001db0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001db4:	3301      	adds	r3, #1
 8001db6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d3b3      	bcc.n	8001d2a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001dc8:	69db      	ldr	r3, [r3, #28]
 8001dca:	69fa      	ldr	r2, [r7, #28]
 8001dcc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001dd0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001dd4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d016      	beq.n	8001e0c <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001de4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001de8:	69fa      	ldr	r2, [r7, #28]
 8001dea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001dee:	f043 030b 	orr.w	r3, r3, #11
 8001df2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfe:	69fa      	ldr	r2, [r7, #28]
 8001e00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e04:	f043 030b 	orr.w	r3, r3, #11
 8001e08:	6453      	str	r3, [r2, #68]	; 0x44
 8001e0a:	e015      	b.n	8001e38 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e12:	695b      	ldr	r3, [r3, #20]
 8001e14:	69fa      	ldr	r2, [r7, #28]
 8001e16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e1a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e1e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001e22:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e2a:	691b      	ldr	r3, [r3, #16]
 8001e2c:	69fa      	ldr	r2, [r7, #28]
 8001e2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e32:	f043 030b 	orr.w	r3, r3, #11
 8001e36:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	69fa      	ldr	r2, [r7, #28]
 8001e42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e46:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001e4a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6818      	ldr	r0, [r3, #0]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	691b      	ldr	r3, [r3, #16]
 8001e54:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	f003 fb99 	bl	8005594 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	695a      	ldr	r2, [r3, #20]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001e70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f003 fac8 	bl	800540c <USB_ReadInterrupts>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e86:	d124      	bne.n	8001ed2 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f003 fb5e 	bl	800554e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f002 fb13 	bl	80044c2 <USB_GetDevSpeed>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681c      	ldr	r4, [r3, #0]
 8001ea8:	f001 fa28 	bl	80032fc <HAL_RCC_GetHCLKFreq>
 8001eac:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	4620      	mov	r0, r4
 8001eb8:	f002 f812 	bl	8003ee0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f008 fc34 	bl	800a72a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	695a      	ldr	r2, [r3, #20]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001ed0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f003 fa98 	bl	800540c <USB_ReadInterrupts>
 8001edc:	4603      	mov	r3, r0
 8001ede:	f003 0308 	and.w	r3, r3, #8
 8001ee2:	2b08      	cmp	r3, #8
 8001ee4:	d10a      	bne.n	8001efc <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f008 fc11 	bl	800a70e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	695a      	ldr	r2, [r3, #20]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f002 0208 	and.w	r2, r2, #8
 8001efa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f003 fa83 	bl	800540c <USB_ReadInterrupts>
 8001f06:	4603      	mov	r3, r0
 8001f08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f0c:	2b80      	cmp	r3, #128	; 0x80
 8001f0e:	d122      	bne.n	8001f56 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001f10:	6a3b      	ldr	r3, [r7, #32]
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f18:	6a3b      	ldr	r3, [r7, #32]
 8001f1a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f20:	e014      	b.n	8001f4c <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001f22:	6879      	ldr	r1, [r7, #4]
 8001f24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f26:	4613      	mov	r3, r2
 8001f28:	00db      	lsls	r3, r3, #3
 8001f2a:	4413      	add	r3, r2
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	440b      	add	r3, r1
 8001f30:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d105      	bne.n	8001f46 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	4619      	mov	r1, r3
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f000 fb27 	bl	8002594 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f48:	3301      	adds	r3, #1
 8001f4a:	627b      	str	r3, [r7, #36]	; 0x24
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d3e5      	bcc.n	8001f22 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f003 fa56 	bl	800540c <USB_ReadInterrupts>
 8001f60:	4603      	mov	r3, r0
 8001f62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f6a:	d13b      	bne.n	8001fe4 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f70:	e02b      	b.n	8001fca <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f74:	015a      	lsls	r2, r3, #5
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	4413      	add	r3, r2
 8001f7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001f82:	6879      	ldr	r1, [r7, #4]
 8001f84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f86:	4613      	mov	r3, r2
 8001f88:	00db      	lsls	r3, r3, #3
 8001f8a:	4413      	add	r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	440b      	add	r3, r1
 8001f90:	3340      	adds	r3, #64	; 0x40
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d115      	bne.n	8001fc4 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001f98:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	da12      	bge.n	8001fc4 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001f9e:	6879      	ldr	r1, [r7, #4]
 8001fa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	00db      	lsls	r3, r3, #3
 8001fa6:	4413      	add	r3, r2
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	440b      	add	r3, r1
 8001fac:	333f      	adds	r3, #63	; 0x3f
 8001fae:	2201      	movs	r2, #1
 8001fb0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 fae8 	bl	8002594 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	627b      	str	r3, [r7, #36]	; 0x24
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d3ce      	bcc.n	8001f72 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	695a      	ldr	r2, [r3, #20]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001fe2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f003 fa0f 	bl	800540c <USB_ReadInterrupts>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ff4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001ff8:	d155      	bne.n	80020a6 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	627b      	str	r3, [r7, #36]	; 0x24
 8001ffe:	e045      	b.n	800208c <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002002:	015a      	lsls	r2, r3, #5
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	4413      	add	r3, r2
 8002008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002010:	6879      	ldr	r1, [r7, #4]
 8002012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002014:	4613      	mov	r3, r2
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	4413      	add	r3, r2
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	440b      	add	r3, r1
 800201e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	2b01      	cmp	r3, #1
 8002026:	d12e      	bne.n	8002086 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002028:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800202a:	2b00      	cmp	r3, #0
 800202c:	da2b      	bge.n	8002086 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800203a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800203e:	429a      	cmp	r2, r3
 8002040:	d121      	bne.n	8002086 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002042:	6879      	ldr	r1, [r7, #4]
 8002044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002046:	4613      	mov	r3, r2
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	4413      	add	r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	440b      	add	r3, r1
 8002050:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002054:	2201      	movs	r2, #1
 8002056:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002058:	6a3b      	ldr	r3, [r7, #32]
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002060:	6a3b      	ldr	r3, [r7, #32]
 8002062:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002064:	6a3b      	ldr	r3, [r7, #32]
 8002066:	695b      	ldr	r3, [r3, #20]
 8002068:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800206c:	2b00      	cmp	r3, #0
 800206e:	d10a      	bne.n	8002086 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	69fa      	ldr	r2, [r7, #28]
 800207a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800207e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002082:	6053      	str	r3, [r2, #4]
            break;
 8002084:	e007      	b.n	8002096 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002088:	3301      	adds	r3, #1
 800208a:	627b      	str	r3, [r7, #36]	; 0x24
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002092:	429a      	cmp	r2, r3
 8002094:	d3b4      	bcc.n	8002000 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	695a      	ldr	r2, [r3, #20]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80020a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f003 f9ae 	bl	800540c <USB_ReadInterrupts>
 80020b0:	4603      	mov	r3, r0
 80020b2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80020b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020ba:	d10a      	bne.n	80020d2 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f008 fbb5 	bl	800a82c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	695a      	ldr	r2, [r3, #20]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80020d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f003 f998 	bl	800540c <USB_ReadInterrupts>
 80020dc:	4603      	mov	r3, r0
 80020de:	f003 0304 	and.w	r3, r3, #4
 80020e2:	2b04      	cmp	r3, #4
 80020e4:	d115      	bne.n	8002112 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	f003 0304 	and.w	r3, r3, #4
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d002      	beq.n	80020fe <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f008 fba5 	bl	800a848 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	6859      	ldr	r1, [r3, #4]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	430a      	orrs	r2, r1
 800210c:	605a      	str	r2, [r3, #4]
 800210e:	e000      	b.n	8002112 <HAL_PCD_IRQHandler+0x938>
      return;
 8002110:	bf00      	nop
    }
  }
}
 8002112:	3734      	adds	r7, #52	; 0x34
 8002114:	46bd      	mov	sp, r7
 8002116:	bd90      	pop	{r4, r7, pc}

08002118 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	460b      	mov	r3, r1
 8002122:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800212a:	2b01      	cmp	r3, #1
 800212c:	d101      	bne.n	8002132 <HAL_PCD_SetAddress+0x1a>
 800212e:	2302      	movs	r3, #2
 8002130:	e013      	b.n	800215a <HAL_PCD_SetAddress+0x42>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2201      	movs	r2, #1
 8002136:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	78fa      	ldrb	r2, [r7, #3]
 800213e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	78fa      	ldrb	r2, [r7, #3]
 8002148:	4611      	mov	r1, r2
 800214a:	4618      	mov	r0, r3
 800214c:	f003 f8f6 	bl	800533c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002162:	b580      	push	{r7, lr}
 8002164:	b084      	sub	sp, #16
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
 800216a:	4608      	mov	r0, r1
 800216c:	4611      	mov	r1, r2
 800216e:	461a      	mov	r2, r3
 8002170:	4603      	mov	r3, r0
 8002172:	70fb      	strb	r3, [r7, #3]
 8002174:	460b      	mov	r3, r1
 8002176:	803b      	strh	r3, [r7, #0]
 8002178:	4613      	mov	r3, r2
 800217a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800217c:	2300      	movs	r3, #0
 800217e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002180:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002184:	2b00      	cmp	r3, #0
 8002186:	da0f      	bge.n	80021a8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002188:	78fb      	ldrb	r3, [r7, #3]
 800218a:	f003 020f 	and.w	r2, r3, #15
 800218e:	4613      	mov	r3, r2
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	4413      	add	r3, r2
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	3338      	adds	r3, #56	; 0x38
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	4413      	add	r3, r2
 800219c:	3304      	adds	r3, #4
 800219e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2201      	movs	r2, #1
 80021a4:	705a      	strb	r2, [r3, #1]
 80021a6:	e00f      	b.n	80021c8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021a8:	78fb      	ldrb	r3, [r7, #3]
 80021aa:	f003 020f 	and.w	r2, r3, #15
 80021ae:	4613      	mov	r3, r2
 80021b0:	00db      	lsls	r3, r3, #3
 80021b2:	4413      	add	r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	4413      	add	r3, r2
 80021be:	3304      	adds	r3, #4
 80021c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2200      	movs	r2, #0
 80021c6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80021c8:	78fb      	ldrb	r3, [r7, #3]
 80021ca:	f003 030f 	and.w	r3, r3, #15
 80021ce:	b2da      	uxtb	r2, r3
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80021d4:	883a      	ldrh	r2, [r7, #0]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	78ba      	ldrb	r2, [r7, #2]
 80021de:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	785b      	ldrb	r3, [r3, #1]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d004      	beq.n	80021f2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	b29a      	uxth	r2, r3
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80021f2:	78bb      	ldrb	r3, [r7, #2]
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d102      	bne.n	80021fe <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2200      	movs	r2, #0
 80021fc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002204:	2b01      	cmp	r3, #1
 8002206:	d101      	bne.n	800220c <HAL_PCD_EP_Open+0xaa>
 8002208:	2302      	movs	r3, #2
 800220a:	e00e      	b.n	800222a <HAL_PCD_EP_Open+0xc8>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	68f9      	ldr	r1, [r7, #12]
 800221a:	4618      	mov	r0, r3
 800221c:	f002 f976 	bl	800450c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002228:	7afb      	ldrb	r3, [r7, #11]
}
 800222a:	4618      	mov	r0, r3
 800222c:	3710      	adds	r7, #16
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002232:	b580      	push	{r7, lr}
 8002234:	b084      	sub	sp, #16
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
 800223a:	460b      	mov	r3, r1
 800223c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800223e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002242:	2b00      	cmp	r3, #0
 8002244:	da0f      	bge.n	8002266 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002246:	78fb      	ldrb	r3, [r7, #3]
 8002248:	f003 020f 	and.w	r2, r3, #15
 800224c:	4613      	mov	r3, r2
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	4413      	add	r3, r2
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	3338      	adds	r3, #56	; 0x38
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	4413      	add	r3, r2
 800225a:	3304      	adds	r3, #4
 800225c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2201      	movs	r2, #1
 8002262:	705a      	strb	r2, [r3, #1]
 8002264:	e00f      	b.n	8002286 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002266:	78fb      	ldrb	r3, [r7, #3]
 8002268:	f003 020f 	and.w	r2, r3, #15
 800226c:	4613      	mov	r3, r2
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	4413      	add	r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	4413      	add	r3, r2
 800227c:	3304      	adds	r3, #4
 800227e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2200      	movs	r2, #0
 8002284:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002286:	78fb      	ldrb	r3, [r7, #3]
 8002288:	f003 030f 	and.w	r3, r3, #15
 800228c:	b2da      	uxtb	r2, r3
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002298:	2b01      	cmp	r3, #1
 800229a:	d101      	bne.n	80022a0 <HAL_PCD_EP_Close+0x6e>
 800229c:	2302      	movs	r3, #2
 800229e:	e00e      	b.n	80022be <HAL_PCD_EP_Close+0x8c>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	68f9      	ldr	r1, [r7, #12]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f002 f9b4 	bl	800461c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3710      	adds	r7, #16
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b086      	sub	sp, #24
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	60f8      	str	r0, [r7, #12]
 80022ce:	607a      	str	r2, [r7, #4]
 80022d0:	603b      	str	r3, [r7, #0]
 80022d2:	460b      	mov	r3, r1
 80022d4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022d6:	7afb      	ldrb	r3, [r7, #11]
 80022d8:	f003 020f 	and.w	r2, r3, #15
 80022dc:	4613      	mov	r3, r2
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	4413      	add	r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80022e8:	68fa      	ldr	r2, [r7, #12]
 80022ea:	4413      	add	r3, r2
 80022ec:	3304      	adds	r3, #4
 80022ee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	683a      	ldr	r2, [r7, #0]
 80022fa:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	2200      	movs	r2, #0
 8002300:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	2200      	movs	r2, #0
 8002306:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002308:	7afb      	ldrb	r3, [r7, #11]
 800230a:	f003 030f 	and.w	r3, r3, #15
 800230e:	b2da      	uxtb	r2, r3
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	2b01      	cmp	r3, #1
 800231a:	d102      	bne.n	8002322 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002322:	7afb      	ldrb	r3, [r7, #11]
 8002324:	f003 030f 	and.w	r3, r3, #15
 8002328:	2b00      	cmp	r3, #0
 800232a:	d109      	bne.n	8002340 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6818      	ldr	r0, [r3, #0]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	691b      	ldr	r3, [r3, #16]
 8002334:	b2db      	uxtb	r3, r3
 8002336:	461a      	mov	r2, r3
 8002338:	6979      	ldr	r1, [r7, #20]
 800233a:	f002 fc93 	bl	8004c64 <USB_EP0StartXfer>
 800233e:	e008      	b.n	8002352 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6818      	ldr	r0, [r3, #0]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	691b      	ldr	r3, [r3, #16]
 8002348:	b2db      	uxtb	r3, r3
 800234a:	461a      	mov	r2, r3
 800234c:	6979      	ldr	r1, [r7, #20]
 800234e:	f002 fa41 	bl	80047d4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002352:	2300      	movs	r3, #0
}
 8002354:	4618      	mov	r0, r3
 8002356:	3718      	adds	r7, #24
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}

0800235c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	460b      	mov	r3, r1
 8002366:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002368:	78fb      	ldrb	r3, [r7, #3]
 800236a:	f003 020f 	and.w	r2, r3, #15
 800236e:	6879      	ldr	r1, [r7, #4]
 8002370:	4613      	mov	r3, r2
 8002372:	00db      	lsls	r3, r3, #3
 8002374:	4413      	add	r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	440b      	add	r3, r1
 800237a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800237e:	681b      	ldr	r3, [r3, #0]
}
 8002380:	4618      	mov	r0, r3
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b086      	sub	sp, #24
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	607a      	str	r2, [r7, #4]
 8002396:	603b      	str	r3, [r7, #0]
 8002398:	460b      	mov	r3, r1
 800239a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800239c:	7afb      	ldrb	r3, [r7, #11]
 800239e:	f003 020f 	and.w	r2, r3, #15
 80023a2:	4613      	mov	r3, r2
 80023a4:	00db      	lsls	r3, r3, #3
 80023a6:	4413      	add	r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	3338      	adds	r3, #56	; 0x38
 80023ac:	68fa      	ldr	r2, [r7, #12]
 80023ae:	4413      	add	r3, r2
 80023b0:	3304      	adds	r3, #4
 80023b2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	683a      	ldr	r2, [r7, #0]
 80023be:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	2200      	movs	r2, #0
 80023c4:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	2201      	movs	r2, #1
 80023ca:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023cc:	7afb      	ldrb	r3, [r7, #11]
 80023ce:	f003 030f 	and.w	r3, r3, #15
 80023d2:	b2da      	uxtb	r2, r3
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d102      	bne.n	80023e6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80023e6:	7afb      	ldrb	r3, [r7, #11]
 80023e8:	f003 030f 	and.w	r3, r3, #15
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d109      	bne.n	8002404 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6818      	ldr	r0, [r3, #0]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	461a      	mov	r2, r3
 80023fc:	6979      	ldr	r1, [r7, #20]
 80023fe:	f002 fc31 	bl	8004c64 <USB_EP0StartXfer>
 8002402:	e008      	b.n	8002416 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6818      	ldr	r0, [r3, #0]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	691b      	ldr	r3, [r3, #16]
 800240c:	b2db      	uxtb	r3, r3
 800240e:	461a      	mov	r2, r3
 8002410:	6979      	ldr	r1, [r7, #20]
 8002412:	f002 f9df 	bl	80047d4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002416:	2300      	movs	r3, #0
}
 8002418:	4618      	mov	r0, r3
 800241a:	3718      	adds	r7, #24
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}

08002420 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	460b      	mov	r3, r1
 800242a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800242c:	78fb      	ldrb	r3, [r7, #3]
 800242e:	f003 020f 	and.w	r2, r3, #15
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	429a      	cmp	r2, r3
 8002438:	d901      	bls.n	800243e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e050      	b.n	80024e0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800243e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002442:	2b00      	cmp	r3, #0
 8002444:	da0f      	bge.n	8002466 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002446:	78fb      	ldrb	r3, [r7, #3]
 8002448:	f003 020f 	and.w	r2, r3, #15
 800244c:	4613      	mov	r3, r2
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	4413      	add	r3, r2
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	3338      	adds	r3, #56	; 0x38
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	4413      	add	r3, r2
 800245a:	3304      	adds	r3, #4
 800245c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2201      	movs	r2, #1
 8002462:	705a      	strb	r2, [r3, #1]
 8002464:	e00d      	b.n	8002482 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002466:	78fa      	ldrb	r2, [r7, #3]
 8002468:	4613      	mov	r3, r2
 800246a:	00db      	lsls	r3, r3, #3
 800246c:	4413      	add	r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	4413      	add	r3, r2
 8002478:	3304      	adds	r3, #4
 800247a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2200      	movs	r2, #0
 8002480:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2201      	movs	r2, #1
 8002486:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002488:	78fb      	ldrb	r3, [r7, #3]
 800248a:	f003 030f 	and.w	r3, r3, #15
 800248e:	b2da      	uxtb	r2, r3
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800249a:	2b01      	cmp	r3, #1
 800249c:	d101      	bne.n	80024a2 <HAL_PCD_EP_SetStall+0x82>
 800249e:	2302      	movs	r3, #2
 80024a0:	e01e      	b.n	80024e0 <HAL_PCD_EP_SetStall+0xc0>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2201      	movs	r2, #1
 80024a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	68f9      	ldr	r1, [r7, #12]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f002 fe6f 	bl	8005194 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80024b6:	78fb      	ldrb	r3, [r7, #3]
 80024b8:	f003 030f 	and.w	r3, r3, #15
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d10a      	bne.n	80024d6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6818      	ldr	r0, [r3, #0]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	691b      	ldr	r3, [r3, #16]
 80024c8:	b2d9      	uxtb	r1, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80024d0:	461a      	mov	r2, r3
 80024d2:	f003 f85f 	bl	8005594 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80024de:	2300      	movs	r3, #0
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3710      	adds	r7, #16
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	460b      	mov	r3, r1
 80024f2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80024f4:	78fb      	ldrb	r3, [r7, #3]
 80024f6:	f003 020f 	and.w	r2, r3, #15
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	429a      	cmp	r2, r3
 8002500:	d901      	bls.n	8002506 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e042      	b.n	800258c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002506:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800250a:	2b00      	cmp	r3, #0
 800250c:	da0f      	bge.n	800252e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800250e:	78fb      	ldrb	r3, [r7, #3]
 8002510:	f003 020f 	and.w	r2, r3, #15
 8002514:	4613      	mov	r3, r2
 8002516:	00db      	lsls	r3, r3, #3
 8002518:	4413      	add	r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	3338      	adds	r3, #56	; 0x38
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	4413      	add	r3, r2
 8002522:	3304      	adds	r3, #4
 8002524:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2201      	movs	r2, #1
 800252a:	705a      	strb	r2, [r3, #1]
 800252c:	e00f      	b.n	800254e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800252e:	78fb      	ldrb	r3, [r7, #3]
 8002530:	f003 020f 	and.w	r2, r3, #15
 8002534:	4613      	mov	r3, r2
 8002536:	00db      	lsls	r3, r3, #3
 8002538:	4413      	add	r3, r2
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	4413      	add	r3, r2
 8002544:	3304      	adds	r3, #4
 8002546:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2200      	movs	r2, #0
 800254c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2200      	movs	r2, #0
 8002552:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002554:	78fb      	ldrb	r3, [r7, #3]
 8002556:	f003 030f 	and.w	r3, r3, #15
 800255a:	b2da      	uxtb	r2, r3
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002566:	2b01      	cmp	r3, #1
 8002568:	d101      	bne.n	800256e <HAL_PCD_EP_ClrStall+0x86>
 800256a:	2302      	movs	r3, #2
 800256c:	e00e      	b.n	800258c <HAL_PCD_EP_ClrStall+0xa4>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2201      	movs	r2, #1
 8002572:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	68f9      	ldr	r1, [r7, #12]
 800257c:	4618      	mov	r0, r3
 800257e:	f002 fe77 	bl	8005270 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800258a:	2300      	movs	r3, #0
}
 800258c:	4618      	mov	r0, r3
 800258e:	3710      	adds	r7, #16
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	460b      	mov	r3, r1
 800259e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80025a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	da0c      	bge.n	80025c2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025a8:	78fb      	ldrb	r3, [r7, #3]
 80025aa:	f003 020f 	and.w	r2, r3, #15
 80025ae:	4613      	mov	r3, r2
 80025b0:	00db      	lsls	r3, r3, #3
 80025b2:	4413      	add	r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	3338      	adds	r3, #56	; 0x38
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	4413      	add	r3, r2
 80025bc:	3304      	adds	r3, #4
 80025be:	60fb      	str	r3, [r7, #12]
 80025c0:	e00c      	b.n	80025dc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025c2:	78fb      	ldrb	r3, [r7, #3]
 80025c4:	f003 020f 	and.w	r2, r3, #15
 80025c8:	4613      	mov	r3, r2
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	4413      	add	r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	4413      	add	r3, r2
 80025d8:	3304      	adds	r3, #4
 80025da:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68f9      	ldr	r1, [r7, #12]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f002 fc96 	bl	8004f14 <USB_EPStopXfer>
 80025e8:	4603      	mov	r3, r0
 80025ea:	72fb      	strb	r3, [r7, #11]

  return ret;
 80025ec:	7afb      	ldrb	r3, [r7, #11]
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b08a      	sub	sp, #40	; 0x28
 80025fa:	af02      	add	r7, sp, #8
 80025fc:	6078      	str	r0, [r7, #4]
 80025fe:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800260a:	683a      	ldr	r2, [r7, #0]
 800260c:	4613      	mov	r3, r2
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	4413      	add	r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	3338      	adds	r3, #56	; 0x38
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	4413      	add	r3, r2
 800261a:	3304      	adds	r3, #4
 800261c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6a1a      	ldr	r2, [r3, #32]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	429a      	cmp	r2, r3
 8002628:	d901      	bls.n	800262e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e06c      	b.n	8002708 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	699a      	ldr	r2, [r3, #24]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6a1b      	ldr	r3, [r3, #32]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	69fa      	ldr	r2, [r7, #28]
 8002640:	429a      	cmp	r2, r3
 8002642:	d902      	bls.n	800264a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	3303      	adds	r3, #3
 800264e:	089b      	lsrs	r3, r3, #2
 8002650:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002652:	e02b      	b.n	80026ac <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	699a      	ldr	r2, [r3, #24]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6a1b      	ldr	r3, [r3, #32]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	69fa      	ldr	r2, [r7, #28]
 8002666:	429a      	cmp	r2, r3
 8002668:	d902      	bls.n	8002670 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	3303      	adds	r3, #3
 8002674:	089b      	lsrs	r3, r3, #2
 8002676:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6919      	ldr	r1, [r3, #16]
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	b2da      	uxtb	r2, r3
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002688:	b2db      	uxtb	r3, r3
 800268a:	9300      	str	r3, [sp, #0]
 800268c:	4603      	mov	r3, r0
 800268e:	6978      	ldr	r0, [r7, #20]
 8002690:	f002 fcea 	bl	8005068 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	691a      	ldr	r2, [r3, #16]
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	441a      	add	r2, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6a1a      	ldr	r2, [r3, #32]
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	441a      	add	r2, r3
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	015a      	lsls	r2, r3, #5
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	4413      	add	r3, r2
 80026b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026b8:	699b      	ldr	r3, [r3, #24]
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d809      	bhi.n	80026d6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6a1a      	ldr	r2, [r3, #32]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d203      	bcs.n	80026d6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1be      	bne.n	8002654 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	699a      	ldr	r2, [r3, #24]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6a1b      	ldr	r3, [r3, #32]
 80026de:	429a      	cmp	r2, r3
 80026e0:	d811      	bhi.n	8002706 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	f003 030f 	and.w	r3, r3, #15
 80026e8:	2201      	movs	r2, #1
 80026ea:	fa02 f303 	lsl.w	r3, r2, r3
 80026ee:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	43db      	mvns	r3, r3
 80026fc:	6939      	ldr	r1, [r7, #16]
 80026fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002702:	4013      	ands	r3, r2
 8002704:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	3720      	adds	r7, #32
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b088      	sub	sp, #32
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	333c      	adds	r3, #60	; 0x3c
 8002728:	3304      	adds	r3, #4
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	015a      	lsls	r2, r3, #5
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	4413      	add	r3, r2
 8002736:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d17b      	bne.n	800283e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	f003 0308 	and.w	r3, r3, #8
 800274c:	2b00      	cmp	r3, #0
 800274e:	d015      	beq.n	800277c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	4a61      	ldr	r2, [pc, #388]	; (80028d8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002754:	4293      	cmp	r3, r2
 8002756:	f240 80b9 	bls.w	80028cc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002760:	2b00      	cmp	r3, #0
 8002762:	f000 80b3 	beq.w	80028cc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	015a      	lsls	r2, r3, #5
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	4413      	add	r3, r2
 800276e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002772:	461a      	mov	r2, r3
 8002774:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002778:	6093      	str	r3, [r2, #8]
 800277a:	e0a7      	b.n	80028cc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	f003 0320 	and.w	r3, r3, #32
 8002782:	2b00      	cmp	r3, #0
 8002784:	d009      	beq.n	800279a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	015a      	lsls	r2, r3, #5
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	4413      	add	r3, r2
 800278e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002792:	461a      	mov	r2, r3
 8002794:	2320      	movs	r3, #32
 8002796:	6093      	str	r3, [r2, #8]
 8002798:	e098      	b.n	80028cc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	f040 8093 	bne.w	80028cc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	4a4b      	ldr	r2, [pc, #300]	; (80028d8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d90f      	bls.n	80027ce <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d00a      	beq.n	80027ce <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	015a      	lsls	r2, r3, #5
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	4413      	add	r3, r2
 80027c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027c4:	461a      	mov	r2, r3
 80027c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027ca:	6093      	str	r3, [r2, #8]
 80027cc:	e07e      	b.n	80028cc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80027ce:	683a      	ldr	r2, [r7, #0]
 80027d0:	4613      	mov	r3, r2
 80027d2:	00db      	lsls	r3, r3, #3
 80027d4:	4413      	add	r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	4413      	add	r3, r2
 80027e0:	3304      	adds	r3, #4
 80027e2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	69da      	ldr	r2, [r3, #28]
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	0159      	lsls	r1, r3, #5
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	440b      	add	r3, r1
 80027f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027fa:	1ad2      	subs	r2, r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d114      	bne.n	8002830 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	699b      	ldr	r3, [r3, #24]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d109      	bne.n	8002822 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6818      	ldr	r0, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002818:	461a      	mov	r2, r3
 800281a:	2101      	movs	r1, #1
 800281c:	f002 feba 	bl	8005594 <USB_EP0_OutStart>
 8002820:	e006      	b.n	8002830 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	691a      	ldr	r2, [r3, #16]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6a1b      	ldr	r3, [r3, #32]
 800282a:	441a      	add	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	b2db      	uxtb	r3, r3
 8002834:	4619      	mov	r1, r3
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f007 ff34 	bl	800a6a4 <HAL_PCD_DataOutStageCallback>
 800283c:	e046      	b.n	80028cc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	4a26      	ldr	r2, [pc, #152]	; (80028dc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d124      	bne.n	8002890 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d00a      	beq.n	8002866 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	015a      	lsls	r2, r3, #5
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	4413      	add	r3, r2
 8002858:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800285c:	461a      	mov	r2, r3
 800285e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002862:	6093      	str	r3, [r2, #8]
 8002864:	e032      	b.n	80028cc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	f003 0320 	and.w	r3, r3, #32
 800286c:	2b00      	cmp	r3, #0
 800286e:	d008      	beq.n	8002882 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	015a      	lsls	r2, r3, #5
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	4413      	add	r3, r2
 8002878:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800287c:	461a      	mov	r2, r3
 800287e:	2320      	movs	r3, #32
 8002880:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	b2db      	uxtb	r3, r3
 8002886:	4619      	mov	r1, r3
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f007 ff0b 	bl	800a6a4 <HAL_PCD_DataOutStageCallback>
 800288e:	e01d      	b.n	80028cc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d114      	bne.n	80028c0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002896:	6879      	ldr	r1, [r7, #4]
 8002898:	683a      	ldr	r2, [r7, #0]
 800289a:	4613      	mov	r3, r2
 800289c:	00db      	lsls	r3, r3, #3
 800289e:	4413      	add	r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	440b      	add	r3, r1
 80028a4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d108      	bne.n	80028c0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6818      	ldr	r0, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80028b8:	461a      	mov	r2, r3
 80028ba:	2100      	movs	r1, #0
 80028bc:	f002 fe6a 	bl	8005594 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	4619      	mov	r1, r3
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f007 feec 	bl	800a6a4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3720      	adds	r7, #32
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	4f54300a 	.word	0x4f54300a
 80028dc:	4f54310a 	.word	0x4f54310a

080028e0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b086      	sub	sp, #24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	333c      	adds	r3, #60	; 0x3c
 80028f8:	3304      	adds	r3, #4
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	015a      	lsls	r2, r3, #5
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	4413      	add	r3, r2
 8002906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	4a15      	ldr	r2, [pc, #84]	; (8002968 <PCD_EP_OutSetupPacket_int+0x88>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d90e      	bls.n	8002934 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800291c:	2b00      	cmp	r3, #0
 800291e:	d009      	beq.n	8002934 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	015a      	lsls	r2, r3, #5
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	4413      	add	r3, r2
 8002928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800292c:	461a      	mov	r2, r3
 800292e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002932:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f007 fea3 	bl	800a680 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	4a0a      	ldr	r2, [pc, #40]	; (8002968 <PCD_EP_OutSetupPacket_int+0x88>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d90c      	bls.n	800295c <PCD_EP_OutSetupPacket_int+0x7c>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	2b01      	cmp	r3, #1
 8002948:	d108      	bne.n	800295c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6818      	ldr	r0, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002954:	461a      	mov	r2, r3
 8002956:	2101      	movs	r1, #1
 8002958:	f002 fe1c 	bl	8005594 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3718      	adds	r7, #24
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	4f54300a 	.word	0x4f54300a

0800296c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800296c:	b480      	push	{r7}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	460b      	mov	r3, r1
 8002976:	70fb      	strb	r3, [r7, #3]
 8002978:	4613      	mov	r3, r2
 800297a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002982:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002984:	78fb      	ldrb	r3, [r7, #3]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d107      	bne.n	800299a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800298a:	883b      	ldrh	r3, [r7, #0]
 800298c:	0419      	lsls	r1, r3, #16
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	68ba      	ldr	r2, [r7, #8]
 8002994:	430a      	orrs	r2, r1
 8002996:	629a      	str	r2, [r3, #40]	; 0x28
 8002998:	e028      	b.n	80029ec <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a0:	0c1b      	lsrs	r3, r3, #16
 80029a2:	68ba      	ldr	r2, [r7, #8]
 80029a4:	4413      	add	r3, r2
 80029a6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80029a8:	2300      	movs	r3, #0
 80029aa:	73fb      	strb	r3, [r7, #15]
 80029ac:	e00d      	b.n	80029ca <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	7bfb      	ldrb	r3, [r7, #15]
 80029b4:	3340      	adds	r3, #64	; 0x40
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	4413      	add	r3, r2
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	0c1b      	lsrs	r3, r3, #16
 80029be:	68ba      	ldr	r2, [r7, #8]
 80029c0:	4413      	add	r3, r2
 80029c2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80029c4:	7bfb      	ldrb	r3, [r7, #15]
 80029c6:	3301      	adds	r3, #1
 80029c8:	73fb      	strb	r3, [r7, #15]
 80029ca:	7bfa      	ldrb	r2, [r7, #15]
 80029cc:	78fb      	ldrb	r3, [r7, #3]
 80029ce:	3b01      	subs	r3, #1
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d3ec      	bcc.n	80029ae <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80029d4:	883b      	ldrh	r3, [r7, #0]
 80029d6:	0418      	lsls	r0, r3, #16
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6819      	ldr	r1, [r3, #0]
 80029dc:	78fb      	ldrb	r3, [r7, #3]
 80029de:	3b01      	subs	r3, #1
 80029e0:	68ba      	ldr	r2, [r7, #8]
 80029e2:	4302      	orrs	r2, r0
 80029e4:	3340      	adds	r3, #64	; 0x40
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	440b      	add	r3, r1
 80029ea:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3714      	adds	r7, #20
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr

080029fa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80029fa:	b480      	push	{r7}
 80029fc:	b083      	sub	sp, #12
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
 8002a02:	460b      	mov	r3, r1
 8002a04:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	887a      	ldrh	r2, [r7, #2]
 8002a0c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	460b      	mov	r3, r1
 8002a26:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002a28:	bf00      	nop
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b086      	sub	sp, #24
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d101      	bne.n	8002a46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e267      	b.n	8002f16 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d075      	beq.n	8002b3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a52:	4b88      	ldr	r3, [pc, #544]	; (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f003 030c 	and.w	r3, r3, #12
 8002a5a:	2b04      	cmp	r3, #4
 8002a5c:	d00c      	beq.n	8002a78 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a5e:	4b85      	ldr	r3, [pc, #532]	; (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a66:	2b08      	cmp	r3, #8
 8002a68:	d112      	bne.n	8002a90 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a6a:	4b82      	ldr	r3, [pc, #520]	; (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a76:	d10b      	bne.n	8002a90 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a78:	4b7e      	ldr	r3, [pc, #504]	; (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d05b      	beq.n	8002b3c <HAL_RCC_OscConfig+0x108>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d157      	bne.n	8002b3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e242      	b.n	8002f16 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a98:	d106      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x74>
 8002a9a:	4b76      	ldr	r3, [pc, #472]	; (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a75      	ldr	r2, [pc, #468]	; (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002aa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aa4:	6013      	str	r3, [r2, #0]
 8002aa6:	e01d      	b.n	8002ae4 <HAL_RCC_OscConfig+0xb0>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ab0:	d10c      	bne.n	8002acc <HAL_RCC_OscConfig+0x98>
 8002ab2:	4b70      	ldr	r3, [pc, #448]	; (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a6f      	ldr	r2, [pc, #444]	; (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002ab8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002abc:	6013      	str	r3, [r2, #0]
 8002abe:	4b6d      	ldr	r3, [pc, #436]	; (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a6c      	ldr	r2, [pc, #432]	; (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002ac4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ac8:	6013      	str	r3, [r2, #0]
 8002aca:	e00b      	b.n	8002ae4 <HAL_RCC_OscConfig+0xb0>
 8002acc:	4b69      	ldr	r3, [pc, #420]	; (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a68      	ldr	r2, [pc, #416]	; (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002ad2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ad6:	6013      	str	r3, [r2, #0]
 8002ad8:	4b66      	ldr	r3, [pc, #408]	; (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a65      	ldr	r2, [pc, #404]	; (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002ade:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ae2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d013      	beq.n	8002b14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aec:	f7fe fa44 	bl	8000f78 <HAL_GetTick>
 8002af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002af2:	e008      	b.n	8002b06 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002af4:	f7fe fa40 	bl	8000f78 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b64      	cmp	r3, #100	; 0x64
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e207      	b.n	8002f16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b06:	4b5b      	ldr	r3, [pc, #364]	; (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d0f0      	beq.n	8002af4 <HAL_RCC_OscConfig+0xc0>
 8002b12:	e014      	b.n	8002b3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b14:	f7fe fa30 	bl	8000f78 <HAL_GetTick>
 8002b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b1a:	e008      	b.n	8002b2e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b1c:	f7fe fa2c 	bl	8000f78 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b64      	cmp	r3, #100	; 0x64
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e1f3      	b.n	8002f16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b2e:	4b51      	ldr	r3, [pc, #324]	; (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d1f0      	bne.n	8002b1c <HAL_RCC_OscConfig+0xe8>
 8002b3a:	e000      	b.n	8002b3e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d063      	beq.n	8002c12 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b4a:	4b4a      	ldr	r3, [pc, #296]	; (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f003 030c 	and.w	r3, r3, #12
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00b      	beq.n	8002b6e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b56:	4b47      	ldr	r3, [pc, #284]	; (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b5e:	2b08      	cmp	r3, #8
 8002b60:	d11c      	bne.n	8002b9c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b62:	4b44      	ldr	r3, [pc, #272]	; (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d116      	bne.n	8002b9c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b6e:	4b41      	ldr	r3, [pc, #260]	; (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d005      	beq.n	8002b86 <HAL_RCC_OscConfig+0x152>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d001      	beq.n	8002b86 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e1c7      	b.n	8002f16 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b86:	4b3b      	ldr	r3, [pc, #236]	; (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	4937      	ldr	r1, [pc, #220]	; (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b9a:	e03a      	b.n	8002c12 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d020      	beq.n	8002be6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ba4:	4b34      	ldr	r3, [pc, #208]	; (8002c78 <HAL_RCC_OscConfig+0x244>)
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002baa:	f7fe f9e5 	bl	8000f78 <HAL_GetTick>
 8002bae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bb0:	e008      	b.n	8002bc4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bb2:	f7fe f9e1 	bl	8000f78 <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d901      	bls.n	8002bc4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e1a8      	b.n	8002f16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bc4:	4b2b      	ldr	r3, [pc, #172]	; (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d0f0      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bd0:	4b28      	ldr	r3, [pc, #160]	; (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	00db      	lsls	r3, r3, #3
 8002bde:	4925      	ldr	r1, [pc, #148]	; (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	600b      	str	r3, [r1, #0]
 8002be4:	e015      	b.n	8002c12 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002be6:	4b24      	ldr	r3, [pc, #144]	; (8002c78 <HAL_RCC_OscConfig+0x244>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bec:	f7fe f9c4 	bl	8000f78 <HAL_GetTick>
 8002bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bf2:	e008      	b.n	8002c06 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bf4:	f7fe f9c0 	bl	8000f78 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e187      	b.n	8002f16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c06:	4b1b      	ldr	r3, [pc, #108]	; (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d1f0      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0308 	and.w	r3, r3, #8
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d036      	beq.n	8002c8c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d016      	beq.n	8002c54 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c26:	4b15      	ldr	r3, [pc, #84]	; (8002c7c <HAL_RCC_OscConfig+0x248>)
 8002c28:	2201      	movs	r2, #1
 8002c2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c2c:	f7fe f9a4 	bl	8000f78 <HAL_GetTick>
 8002c30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c32:	e008      	b.n	8002c46 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c34:	f7fe f9a0 	bl	8000f78 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e167      	b.n	8002f16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c46:	4b0b      	ldr	r3, [pc, #44]	; (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002c48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d0f0      	beq.n	8002c34 <HAL_RCC_OscConfig+0x200>
 8002c52:	e01b      	b.n	8002c8c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c54:	4b09      	ldr	r3, [pc, #36]	; (8002c7c <HAL_RCC_OscConfig+0x248>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c5a:	f7fe f98d 	bl	8000f78 <HAL_GetTick>
 8002c5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c60:	e00e      	b.n	8002c80 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c62:	f7fe f989 	bl	8000f78 <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d907      	bls.n	8002c80 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e150      	b.n	8002f16 <HAL_RCC_OscConfig+0x4e2>
 8002c74:	40023800 	.word	0x40023800
 8002c78:	42470000 	.word	0x42470000
 8002c7c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c80:	4b88      	ldr	r3, [pc, #544]	; (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002c82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c84:	f003 0302 	and.w	r3, r3, #2
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1ea      	bne.n	8002c62 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0304 	and.w	r3, r3, #4
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f000 8097 	beq.w	8002dc8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c9e:	4b81      	ldr	r3, [pc, #516]	; (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d10f      	bne.n	8002cca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002caa:	2300      	movs	r3, #0
 8002cac:	60bb      	str	r3, [r7, #8]
 8002cae:	4b7d      	ldr	r3, [pc, #500]	; (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb2:	4a7c      	ldr	r2, [pc, #496]	; (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cb8:	6413      	str	r3, [r2, #64]	; 0x40
 8002cba:	4b7a      	ldr	r3, [pc, #488]	; (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cc2:	60bb      	str	r3, [r7, #8]
 8002cc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cca:	4b77      	ldr	r3, [pc, #476]	; (8002ea8 <HAL_RCC_OscConfig+0x474>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d118      	bne.n	8002d08 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cd6:	4b74      	ldr	r3, [pc, #464]	; (8002ea8 <HAL_RCC_OscConfig+0x474>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a73      	ldr	r2, [pc, #460]	; (8002ea8 <HAL_RCC_OscConfig+0x474>)
 8002cdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ce0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ce2:	f7fe f949 	bl	8000f78 <HAL_GetTick>
 8002ce6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce8:	e008      	b.n	8002cfc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cea:	f7fe f945 	bl	8000f78 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d901      	bls.n	8002cfc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e10c      	b.n	8002f16 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cfc:	4b6a      	ldr	r3, [pc, #424]	; (8002ea8 <HAL_RCC_OscConfig+0x474>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d0f0      	beq.n	8002cea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d106      	bne.n	8002d1e <HAL_RCC_OscConfig+0x2ea>
 8002d10:	4b64      	ldr	r3, [pc, #400]	; (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d14:	4a63      	ldr	r2, [pc, #396]	; (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002d16:	f043 0301 	orr.w	r3, r3, #1
 8002d1a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d1c:	e01c      	b.n	8002d58 <HAL_RCC_OscConfig+0x324>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	2b05      	cmp	r3, #5
 8002d24:	d10c      	bne.n	8002d40 <HAL_RCC_OscConfig+0x30c>
 8002d26:	4b5f      	ldr	r3, [pc, #380]	; (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d2a:	4a5e      	ldr	r2, [pc, #376]	; (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002d2c:	f043 0304 	orr.w	r3, r3, #4
 8002d30:	6713      	str	r3, [r2, #112]	; 0x70
 8002d32:	4b5c      	ldr	r3, [pc, #368]	; (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d36:	4a5b      	ldr	r2, [pc, #364]	; (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002d38:	f043 0301 	orr.w	r3, r3, #1
 8002d3c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d3e:	e00b      	b.n	8002d58 <HAL_RCC_OscConfig+0x324>
 8002d40:	4b58      	ldr	r3, [pc, #352]	; (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d44:	4a57      	ldr	r2, [pc, #348]	; (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002d46:	f023 0301 	bic.w	r3, r3, #1
 8002d4a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d4c:	4b55      	ldr	r3, [pc, #340]	; (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d50:	4a54      	ldr	r2, [pc, #336]	; (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002d52:	f023 0304 	bic.w	r3, r3, #4
 8002d56:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d015      	beq.n	8002d8c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d60:	f7fe f90a 	bl	8000f78 <HAL_GetTick>
 8002d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d66:	e00a      	b.n	8002d7e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d68:	f7fe f906 	bl	8000f78 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e0cb      	b.n	8002f16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d7e:	4b49      	ldr	r3, [pc, #292]	; (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d0ee      	beq.n	8002d68 <HAL_RCC_OscConfig+0x334>
 8002d8a:	e014      	b.n	8002db6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d8c:	f7fe f8f4 	bl	8000f78 <HAL_GetTick>
 8002d90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d92:	e00a      	b.n	8002daa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d94:	f7fe f8f0 	bl	8000f78 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d901      	bls.n	8002daa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e0b5      	b.n	8002f16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002daa:	4b3e      	ldr	r3, [pc, #248]	; (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d1ee      	bne.n	8002d94 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002db6:	7dfb      	ldrb	r3, [r7, #23]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d105      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dbc:	4b39      	ldr	r3, [pc, #228]	; (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc0:	4a38      	ldr	r2, [pc, #224]	; (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002dc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dc6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	699b      	ldr	r3, [r3, #24]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	f000 80a1 	beq.w	8002f14 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002dd2:	4b34      	ldr	r3, [pc, #208]	; (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f003 030c 	and.w	r3, r3, #12
 8002dda:	2b08      	cmp	r3, #8
 8002ddc:	d05c      	beq.n	8002e98 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d141      	bne.n	8002e6a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002de6:	4b31      	ldr	r3, [pc, #196]	; (8002eac <HAL_RCC_OscConfig+0x478>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dec:	f7fe f8c4 	bl	8000f78 <HAL_GetTick>
 8002df0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002df2:	e008      	b.n	8002e06 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002df4:	f7fe f8c0 	bl	8000f78 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e087      	b.n	8002f16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e06:	4b27      	ldr	r3, [pc, #156]	; (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1f0      	bne.n	8002df4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	69da      	ldr	r2, [r3, #28]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a1b      	ldr	r3, [r3, #32]
 8002e1a:	431a      	orrs	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e20:	019b      	lsls	r3, r3, #6
 8002e22:	431a      	orrs	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e28:	085b      	lsrs	r3, r3, #1
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	041b      	lsls	r3, r3, #16
 8002e2e:	431a      	orrs	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e34:	061b      	lsls	r3, r3, #24
 8002e36:	491b      	ldr	r1, [pc, #108]	; (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e3c:	4b1b      	ldr	r3, [pc, #108]	; (8002eac <HAL_RCC_OscConfig+0x478>)
 8002e3e:	2201      	movs	r2, #1
 8002e40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e42:	f7fe f899 	bl	8000f78 <HAL_GetTick>
 8002e46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e48:	e008      	b.n	8002e5c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e4a:	f7fe f895 	bl	8000f78 <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d901      	bls.n	8002e5c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e05c      	b.n	8002f16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e5c:	4b11      	ldr	r3, [pc, #68]	; (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d0f0      	beq.n	8002e4a <HAL_RCC_OscConfig+0x416>
 8002e68:	e054      	b.n	8002f14 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e6a:	4b10      	ldr	r3, [pc, #64]	; (8002eac <HAL_RCC_OscConfig+0x478>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e70:	f7fe f882 	bl	8000f78 <HAL_GetTick>
 8002e74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e76:	e008      	b.n	8002e8a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e78:	f7fe f87e 	bl	8000f78 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e045      	b.n	8002f16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e8a:	4b06      	ldr	r3, [pc, #24]	; (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1f0      	bne.n	8002e78 <HAL_RCC_OscConfig+0x444>
 8002e96:	e03d      	b.n	8002f14 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	699b      	ldr	r3, [r3, #24]
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d107      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e038      	b.n	8002f16 <HAL_RCC_OscConfig+0x4e2>
 8002ea4:	40023800 	.word	0x40023800
 8002ea8:	40007000 	.word	0x40007000
 8002eac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002eb0:	4b1b      	ldr	r3, [pc, #108]	; (8002f20 <HAL_RCC_OscConfig+0x4ec>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d028      	beq.n	8002f10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d121      	bne.n	8002f10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d11a      	bne.n	8002f10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002eda:	68fa      	ldr	r2, [r7, #12]
 8002edc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ee6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d111      	bne.n	8002f10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef6:	085b      	lsrs	r3, r3, #1
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d107      	bne.n	8002f10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d001      	beq.n	8002f14 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e000      	b.n	8002f16 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3718      	adds	r7, #24
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	40023800 	.word	0x40023800

08002f24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d101      	bne.n	8002f38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e0cc      	b.n	80030d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f38:	4b68      	ldr	r3, [pc, #416]	; (80030dc <HAL_RCC_ClockConfig+0x1b8>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0307 	and.w	r3, r3, #7
 8002f40:	683a      	ldr	r2, [r7, #0]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d90c      	bls.n	8002f60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f46:	4b65      	ldr	r3, [pc, #404]	; (80030dc <HAL_RCC_ClockConfig+0x1b8>)
 8002f48:	683a      	ldr	r2, [r7, #0]
 8002f4a:	b2d2      	uxtb	r2, r2
 8002f4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f4e:	4b63      	ldr	r3, [pc, #396]	; (80030dc <HAL_RCC_ClockConfig+0x1b8>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0307 	and.w	r3, r3, #7
 8002f56:	683a      	ldr	r2, [r7, #0]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d001      	beq.n	8002f60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e0b8      	b.n	80030d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0302 	and.w	r3, r3, #2
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d020      	beq.n	8002fae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0304 	and.w	r3, r3, #4
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d005      	beq.n	8002f84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f78:	4b59      	ldr	r3, [pc, #356]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	4a58      	ldr	r2, [pc, #352]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f82:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0308 	and.w	r3, r3, #8
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d005      	beq.n	8002f9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f90:	4b53      	ldr	r3, [pc, #332]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	4a52      	ldr	r2, [pc, #328]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f96:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f9c:	4b50      	ldr	r3, [pc, #320]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	494d      	ldr	r1, [pc, #308]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d044      	beq.n	8003044 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d107      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fc2:	4b47      	ldr	r3, [pc, #284]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d119      	bne.n	8003002 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e07f      	b.n	80030d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d003      	beq.n	8002fe2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fde:	2b03      	cmp	r3, #3
 8002fe0:	d107      	bne.n	8002ff2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fe2:	4b3f      	ldr	r3, [pc, #252]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d109      	bne.n	8003002 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e06f      	b.n	80030d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ff2:	4b3b      	ldr	r3, [pc, #236]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d101      	bne.n	8003002 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e067      	b.n	80030d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003002:	4b37      	ldr	r3, [pc, #220]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f023 0203 	bic.w	r2, r3, #3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	4934      	ldr	r1, [pc, #208]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003010:	4313      	orrs	r3, r2
 8003012:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003014:	f7fd ffb0 	bl	8000f78 <HAL_GetTick>
 8003018:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800301a:	e00a      	b.n	8003032 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800301c:	f7fd ffac 	bl	8000f78 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	f241 3288 	movw	r2, #5000	; 0x1388
 800302a:	4293      	cmp	r3, r2
 800302c:	d901      	bls.n	8003032 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e04f      	b.n	80030d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003032:	4b2b      	ldr	r3, [pc, #172]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f003 020c 	and.w	r2, r3, #12
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	429a      	cmp	r2, r3
 8003042:	d1eb      	bne.n	800301c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003044:	4b25      	ldr	r3, [pc, #148]	; (80030dc <HAL_RCC_ClockConfig+0x1b8>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0307 	and.w	r3, r3, #7
 800304c:	683a      	ldr	r2, [r7, #0]
 800304e:	429a      	cmp	r2, r3
 8003050:	d20c      	bcs.n	800306c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003052:	4b22      	ldr	r3, [pc, #136]	; (80030dc <HAL_RCC_ClockConfig+0x1b8>)
 8003054:	683a      	ldr	r2, [r7, #0]
 8003056:	b2d2      	uxtb	r2, r2
 8003058:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800305a:	4b20      	ldr	r3, [pc, #128]	; (80030dc <HAL_RCC_ClockConfig+0x1b8>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0307 	and.w	r3, r3, #7
 8003062:	683a      	ldr	r2, [r7, #0]
 8003064:	429a      	cmp	r2, r3
 8003066:	d001      	beq.n	800306c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e032      	b.n	80030d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0304 	and.w	r3, r3, #4
 8003074:	2b00      	cmp	r3, #0
 8003076:	d008      	beq.n	800308a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003078:	4b19      	ldr	r3, [pc, #100]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	4916      	ldr	r1, [pc, #88]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003086:	4313      	orrs	r3, r2
 8003088:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0308 	and.w	r3, r3, #8
 8003092:	2b00      	cmp	r3, #0
 8003094:	d009      	beq.n	80030aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003096:	4b12      	ldr	r3, [pc, #72]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	00db      	lsls	r3, r3, #3
 80030a4:	490e      	ldr	r1, [pc, #56]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030aa:	f000 f821 	bl	80030f0 <HAL_RCC_GetSysClockFreq>
 80030ae:	4602      	mov	r2, r0
 80030b0:	4b0b      	ldr	r3, [pc, #44]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	091b      	lsrs	r3, r3, #4
 80030b6:	f003 030f 	and.w	r3, r3, #15
 80030ba:	490a      	ldr	r1, [pc, #40]	; (80030e4 <HAL_RCC_ClockConfig+0x1c0>)
 80030bc:	5ccb      	ldrb	r3, [r1, r3]
 80030be:	fa22 f303 	lsr.w	r3, r2, r3
 80030c2:	4a09      	ldr	r2, [pc, #36]	; (80030e8 <HAL_RCC_ClockConfig+0x1c4>)
 80030c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80030c6:	4b09      	ldr	r3, [pc, #36]	; (80030ec <HAL_RCC_ClockConfig+0x1c8>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7fd fde4 	bl	8000c98 <HAL_InitTick>

  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3710      	adds	r7, #16
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	40023c00 	.word	0x40023c00
 80030e0:	40023800 	.word	0x40023800
 80030e4:	0800b2cc 	.word	0x0800b2cc
 80030e8:	20000000 	.word	0x20000000
 80030ec:	20000004 	.word	0x20000004

080030f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030f4:	b094      	sub	sp, #80	; 0x50
 80030f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80030f8:	2300      	movs	r3, #0
 80030fa:	647b      	str	r3, [r7, #68]	; 0x44
 80030fc:	2300      	movs	r3, #0
 80030fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003100:	2300      	movs	r3, #0
 8003102:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003104:	2300      	movs	r3, #0
 8003106:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003108:	4b79      	ldr	r3, [pc, #484]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f003 030c 	and.w	r3, r3, #12
 8003110:	2b08      	cmp	r3, #8
 8003112:	d00d      	beq.n	8003130 <HAL_RCC_GetSysClockFreq+0x40>
 8003114:	2b08      	cmp	r3, #8
 8003116:	f200 80e1 	bhi.w	80032dc <HAL_RCC_GetSysClockFreq+0x1ec>
 800311a:	2b00      	cmp	r3, #0
 800311c:	d002      	beq.n	8003124 <HAL_RCC_GetSysClockFreq+0x34>
 800311e:	2b04      	cmp	r3, #4
 8003120:	d003      	beq.n	800312a <HAL_RCC_GetSysClockFreq+0x3a>
 8003122:	e0db      	b.n	80032dc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003124:	4b73      	ldr	r3, [pc, #460]	; (80032f4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003126:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003128:	e0db      	b.n	80032e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800312a:	4b73      	ldr	r3, [pc, #460]	; (80032f8 <HAL_RCC_GetSysClockFreq+0x208>)
 800312c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800312e:	e0d8      	b.n	80032e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003130:	4b6f      	ldr	r3, [pc, #444]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003138:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800313a:	4b6d      	ldr	r3, [pc, #436]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d063      	beq.n	800320e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003146:	4b6a      	ldr	r3, [pc, #424]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	099b      	lsrs	r3, r3, #6
 800314c:	2200      	movs	r2, #0
 800314e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003150:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003154:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003158:	633b      	str	r3, [r7, #48]	; 0x30
 800315a:	2300      	movs	r3, #0
 800315c:	637b      	str	r3, [r7, #52]	; 0x34
 800315e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003162:	4622      	mov	r2, r4
 8003164:	462b      	mov	r3, r5
 8003166:	f04f 0000 	mov.w	r0, #0
 800316a:	f04f 0100 	mov.w	r1, #0
 800316e:	0159      	lsls	r1, r3, #5
 8003170:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003174:	0150      	lsls	r0, r2, #5
 8003176:	4602      	mov	r2, r0
 8003178:	460b      	mov	r3, r1
 800317a:	4621      	mov	r1, r4
 800317c:	1a51      	subs	r1, r2, r1
 800317e:	6139      	str	r1, [r7, #16]
 8003180:	4629      	mov	r1, r5
 8003182:	eb63 0301 	sbc.w	r3, r3, r1
 8003186:	617b      	str	r3, [r7, #20]
 8003188:	f04f 0200 	mov.w	r2, #0
 800318c:	f04f 0300 	mov.w	r3, #0
 8003190:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003194:	4659      	mov	r1, fp
 8003196:	018b      	lsls	r3, r1, #6
 8003198:	4651      	mov	r1, sl
 800319a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800319e:	4651      	mov	r1, sl
 80031a0:	018a      	lsls	r2, r1, #6
 80031a2:	4651      	mov	r1, sl
 80031a4:	ebb2 0801 	subs.w	r8, r2, r1
 80031a8:	4659      	mov	r1, fp
 80031aa:	eb63 0901 	sbc.w	r9, r3, r1
 80031ae:	f04f 0200 	mov.w	r2, #0
 80031b2:	f04f 0300 	mov.w	r3, #0
 80031b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031c2:	4690      	mov	r8, r2
 80031c4:	4699      	mov	r9, r3
 80031c6:	4623      	mov	r3, r4
 80031c8:	eb18 0303 	adds.w	r3, r8, r3
 80031cc:	60bb      	str	r3, [r7, #8]
 80031ce:	462b      	mov	r3, r5
 80031d0:	eb49 0303 	adc.w	r3, r9, r3
 80031d4:	60fb      	str	r3, [r7, #12]
 80031d6:	f04f 0200 	mov.w	r2, #0
 80031da:	f04f 0300 	mov.w	r3, #0
 80031de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80031e2:	4629      	mov	r1, r5
 80031e4:	024b      	lsls	r3, r1, #9
 80031e6:	4621      	mov	r1, r4
 80031e8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80031ec:	4621      	mov	r1, r4
 80031ee:	024a      	lsls	r2, r1, #9
 80031f0:	4610      	mov	r0, r2
 80031f2:	4619      	mov	r1, r3
 80031f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031f6:	2200      	movs	r2, #0
 80031f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80031fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80031fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003200:	f7fc ffee 	bl	80001e0 <__aeabi_uldivmod>
 8003204:	4602      	mov	r2, r0
 8003206:	460b      	mov	r3, r1
 8003208:	4613      	mov	r3, r2
 800320a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800320c:	e058      	b.n	80032c0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800320e:	4b38      	ldr	r3, [pc, #224]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	099b      	lsrs	r3, r3, #6
 8003214:	2200      	movs	r2, #0
 8003216:	4618      	mov	r0, r3
 8003218:	4611      	mov	r1, r2
 800321a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800321e:	623b      	str	r3, [r7, #32]
 8003220:	2300      	movs	r3, #0
 8003222:	627b      	str	r3, [r7, #36]	; 0x24
 8003224:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003228:	4642      	mov	r2, r8
 800322a:	464b      	mov	r3, r9
 800322c:	f04f 0000 	mov.w	r0, #0
 8003230:	f04f 0100 	mov.w	r1, #0
 8003234:	0159      	lsls	r1, r3, #5
 8003236:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800323a:	0150      	lsls	r0, r2, #5
 800323c:	4602      	mov	r2, r0
 800323e:	460b      	mov	r3, r1
 8003240:	4641      	mov	r1, r8
 8003242:	ebb2 0a01 	subs.w	sl, r2, r1
 8003246:	4649      	mov	r1, r9
 8003248:	eb63 0b01 	sbc.w	fp, r3, r1
 800324c:	f04f 0200 	mov.w	r2, #0
 8003250:	f04f 0300 	mov.w	r3, #0
 8003254:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003258:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800325c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003260:	ebb2 040a 	subs.w	r4, r2, sl
 8003264:	eb63 050b 	sbc.w	r5, r3, fp
 8003268:	f04f 0200 	mov.w	r2, #0
 800326c:	f04f 0300 	mov.w	r3, #0
 8003270:	00eb      	lsls	r3, r5, #3
 8003272:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003276:	00e2      	lsls	r2, r4, #3
 8003278:	4614      	mov	r4, r2
 800327a:	461d      	mov	r5, r3
 800327c:	4643      	mov	r3, r8
 800327e:	18e3      	adds	r3, r4, r3
 8003280:	603b      	str	r3, [r7, #0]
 8003282:	464b      	mov	r3, r9
 8003284:	eb45 0303 	adc.w	r3, r5, r3
 8003288:	607b      	str	r3, [r7, #4]
 800328a:	f04f 0200 	mov.w	r2, #0
 800328e:	f04f 0300 	mov.w	r3, #0
 8003292:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003296:	4629      	mov	r1, r5
 8003298:	028b      	lsls	r3, r1, #10
 800329a:	4621      	mov	r1, r4
 800329c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032a0:	4621      	mov	r1, r4
 80032a2:	028a      	lsls	r2, r1, #10
 80032a4:	4610      	mov	r0, r2
 80032a6:	4619      	mov	r1, r3
 80032a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032aa:	2200      	movs	r2, #0
 80032ac:	61bb      	str	r3, [r7, #24]
 80032ae:	61fa      	str	r2, [r7, #28]
 80032b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032b4:	f7fc ff94 	bl	80001e0 <__aeabi_uldivmod>
 80032b8:	4602      	mov	r2, r0
 80032ba:	460b      	mov	r3, r1
 80032bc:	4613      	mov	r3, r2
 80032be:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80032c0:	4b0b      	ldr	r3, [pc, #44]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x200>)
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	0c1b      	lsrs	r3, r3, #16
 80032c6:	f003 0303 	and.w	r3, r3, #3
 80032ca:	3301      	adds	r3, #1
 80032cc:	005b      	lsls	r3, r3, #1
 80032ce:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80032d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80032d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032da:	e002      	b.n	80032e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032dc:	4b05      	ldr	r3, [pc, #20]	; (80032f4 <HAL_RCC_GetSysClockFreq+0x204>)
 80032de:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3750      	adds	r7, #80	; 0x50
 80032e8:	46bd      	mov	sp, r7
 80032ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032ee:	bf00      	nop
 80032f0:	40023800 	.word	0x40023800
 80032f4:	00f42400 	.word	0x00f42400
 80032f8:	007a1200 	.word	0x007a1200

080032fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032fc:	b480      	push	{r7}
 80032fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003300:	4b03      	ldr	r3, [pc, #12]	; (8003310 <HAL_RCC_GetHCLKFreq+0x14>)
 8003302:	681b      	ldr	r3, [r3, #0]
}
 8003304:	4618      	mov	r0, r3
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	20000000 	.word	0x20000000

08003314 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003318:	f7ff fff0 	bl	80032fc <HAL_RCC_GetHCLKFreq>
 800331c:	4602      	mov	r2, r0
 800331e:	4b05      	ldr	r3, [pc, #20]	; (8003334 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	0a9b      	lsrs	r3, r3, #10
 8003324:	f003 0307 	and.w	r3, r3, #7
 8003328:	4903      	ldr	r1, [pc, #12]	; (8003338 <HAL_RCC_GetPCLK1Freq+0x24>)
 800332a:	5ccb      	ldrb	r3, [r1, r3]
 800332c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003330:	4618      	mov	r0, r3
 8003332:	bd80      	pop	{r7, pc}
 8003334:	40023800 	.word	0x40023800
 8003338:	0800b2dc 	.word	0x0800b2dc

0800333c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	220f      	movs	r2, #15
 800334a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800334c:	4b12      	ldr	r3, [pc, #72]	; (8003398 <HAL_RCC_GetClockConfig+0x5c>)
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	f003 0203 	and.w	r2, r3, #3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003358:	4b0f      	ldr	r3, [pc, #60]	; (8003398 <HAL_RCC_GetClockConfig+0x5c>)
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003364:	4b0c      	ldr	r3, [pc, #48]	; (8003398 <HAL_RCC_GetClockConfig+0x5c>)
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003370:	4b09      	ldr	r3, [pc, #36]	; (8003398 <HAL_RCC_GetClockConfig+0x5c>)
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	08db      	lsrs	r3, r3, #3
 8003376:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800337e:	4b07      	ldr	r3, [pc, #28]	; (800339c <HAL_RCC_GetClockConfig+0x60>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0207 	and.w	r2, r3, #7
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	601a      	str	r2, [r3, #0]
}
 800338a:	bf00      	nop
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	40023800 	.word	0x40023800
 800339c:	40023c00 	.word	0x40023c00

080033a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d101      	bne.n	80033b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e07b      	b.n	80034aa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d108      	bne.n	80033cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033c2:	d009      	beq.n	80033d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	61da      	str	r2, [r3, #28]
 80033ca:	e005      	b.n	80033d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d106      	bne.n	80033f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f7fd fc08 	bl	8000c08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2202      	movs	r2, #2
 80033fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800340e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003420:	431a      	orrs	r2, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800342a:	431a      	orrs	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	691b      	ldr	r3, [r3, #16]
 8003430:	f003 0302 	and.w	r3, r3, #2
 8003434:	431a      	orrs	r2, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	695b      	ldr	r3, [r3, #20]
 800343a:	f003 0301 	and.w	r3, r3, #1
 800343e:	431a      	orrs	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003448:	431a      	orrs	r2, r3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	69db      	ldr	r3, [r3, #28]
 800344e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003452:	431a      	orrs	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a1b      	ldr	r3, [r3, #32]
 8003458:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800345c:	ea42 0103 	orr.w	r1, r2, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003464:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	430a      	orrs	r2, r1
 800346e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	699b      	ldr	r3, [r3, #24]
 8003474:	0c1b      	lsrs	r3, r3, #16
 8003476:	f003 0104 	and.w	r1, r3, #4
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347e:	f003 0210 	and.w	r2, r3, #16
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	430a      	orrs	r2, r1
 8003488:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	69da      	ldr	r2, [r3, #28]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003498:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3708      	adds	r7, #8
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034b2:	b580      	push	{r7, lr}
 80034b4:	b088      	sub	sp, #32
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	60f8      	str	r0, [r7, #12]
 80034ba:	60b9      	str	r1, [r7, #8]
 80034bc:	603b      	str	r3, [r7, #0]
 80034be:	4613      	mov	r3, r2
 80034c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80034c2:	2300      	movs	r3, #0
 80034c4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d101      	bne.n	80034d4 <HAL_SPI_Transmit+0x22>
 80034d0:	2302      	movs	r3, #2
 80034d2:	e126      	b.n	8003722 <HAL_SPI_Transmit+0x270>
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034dc:	f7fd fd4c 	bl	8000f78 <HAL_GetTick>
 80034e0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80034e2:	88fb      	ldrh	r3, [r7, #6]
 80034e4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d002      	beq.n	80034f8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80034f2:	2302      	movs	r3, #2
 80034f4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80034f6:	e10b      	b.n	8003710 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d002      	beq.n	8003504 <HAL_SPI_Transmit+0x52>
 80034fe:	88fb      	ldrh	r3, [r7, #6]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d102      	bne.n	800350a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003508:	e102      	b.n	8003710 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2203      	movs	r2, #3
 800350e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2200      	movs	r2, #0
 8003516:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	68ba      	ldr	r2, [r7, #8]
 800351c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	88fa      	ldrh	r2, [r7, #6]
 8003522:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	88fa      	ldrh	r2, [r7, #6]
 8003528:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2200      	movs	r2, #0
 800352e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2200      	movs	r2, #0
 800353a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2200      	movs	r2, #0
 8003540:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2200      	movs	r2, #0
 8003546:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003550:	d10f      	bne.n	8003572 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003560:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003570:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800357c:	2b40      	cmp	r3, #64	; 0x40
 800357e:	d007      	beq.n	8003590 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800358e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003598:	d14b      	bne.n	8003632 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d002      	beq.n	80035a8 <HAL_SPI_Transmit+0xf6>
 80035a2:	8afb      	ldrh	r3, [r7, #22]
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d13e      	bne.n	8003626 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ac:	881a      	ldrh	r2, [r3, #0]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b8:	1c9a      	adds	r2, r3, #2
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	3b01      	subs	r3, #1
 80035c6:	b29a      	uxth	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80035cc:	e02b      	b.n	8003626 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f003 0302 	and.w	r3, r3, #2
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d112      	bne.n	8003602 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e0:	881a      	ldrh	r2, [r3, #0]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ec:	1c9a      	adds	r2, r3, #2
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	3b01      	subs	r3, #1
 80035fa:	b29a      	uxth	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	86da      	strh	r2, [r3, #54]	; 0x36
 8003600:	e011      	b.n	8003626 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003602:	f7fd fcb9 	bl	8000f78 <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	683a      	ldr	r2, [r7, #0]
 800360e:	429a      	cmp	r2, r3
 8003610:	d803      	bhi.n	800361a <HAL_SPI_Transmit+0x168>
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003618:	d102      	bne.n	8003620 <HAL_SPI_Transmit+0x16e>
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d102      	bne.n	8003626 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003624:	e074      	b.n	8003710 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800362a:	b29b      	uxth	r3, r3
 800362c:	2b00      	cmp	r3, #0
 800362e:	d1ce      	bne.n	80035ce <HAL_SPI_Transmit+0x11c>
 8003630:	e04c      	b.n	80036cc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d002      	beq.n	8003640 <HAL_SPI_Transmit+0x18e>
 800363a:	8afb      	ldrh	r3, [r7, #22]
 800363c:	2b01      	cmp	r3, #1
 800363e:	d140      	bne.n	80036c2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	330c      	adds	r3, #12
 800364a:	7812      	ldrb	r2, [r2, #0]
 800364c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003652:	1c5a      	adds	r2, r3, #1
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800365c:	b29b      	uxth	r3, r3
 800365e:	3b01      	subs	r3, #1
 8003660:	b29a      	uxth	r2, r3
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003666:	e02c      	b.n	80036c2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f003 0302 	and.w	r3, r3, #2
 8003672:	2b02      	cmp	r3, #2
 8003674:	d113      	bne.n	800369e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	330c      	adds	r3, #12
 8003680:	7812      	ldrb	r2, [r2, #0]
 8003682:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003688:	1c5a      	adds	r2, r3, #1
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003692:	b29b      	uxth	r3, r3
 8003694:	3b01      	subs	r3, #1
 8003696:	b29a      	uxth	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	86da      	strh	r2, [r3, #54]	; 0x36
 800369c:	e011      	b.n	80036c2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800369e:	f7fd fc6b 	bl	8000f78 <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	683a      	ldr	r2, [r7, #0]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d803      	bhi.n	80036b6 <HAL_SPI_Transmit+0x204>
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036b4:	d102      	bne.n	80036bc <HAL_SPI_Transmit+0x20a>
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d102      	bne.n	80036c2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	77fb      	strb	r3, [r7, #31]
          goto error;
 80036c0:	e026      	b.n	8003710 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d1cd      	bne.n	8003668 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	6839      	ldr	r1, [r7, #0]
 80036d0:	68f8      	ldr	r0, [r7, #12]
 80036d2:	f000 f8b3 	bl	800383c <SPI_EndRxTxTransaction>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d002      	beq.n	80036e2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2220      	movs	r2, #32
 80036e0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d10a      	bne.n	8003700 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80036ea:	2300      	movs	r3, #0
 80036ec:	613b      	str	r3, [r7, #16]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	613b      	str	r3, [r7, #16]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	613b      	str	r3, [r7, #16]
 80036fe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003704:	2b00      	cmp	r3, #0
 8003706:	d002      	beq.n	800370e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	77fb      	strb	r3, [r7, #31]
 800370c:	e000      	b.n	8003710 <HAL_SPI_Transmit+0x25e>
  }

error:
 800370e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003720:	7ffb      	ldrb	r3, [r7, #31]
}
 8003722:	4618      	mov	r0, r3
 8003724:	3720      	adds	r7, #32
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
	...

0800372c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b088      	sub	sp, #32
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	603b      	str	r3, [r7, #0]
 8003738:	4613      	mov	r3, r2
 800373a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800373c:	f7fd fc1c 	bl	8000f78 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003744:	1a9b      	subs	r3, r3, r2
 8003746:	683a      	ldr	r2, [r7, #0]
 8003748:	4413      	add	r3, r2
 800374a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800374c:	f7fd fc14 	bl	8000f78 <HAL_GetTick>
 8003750:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003752:	4b39      	ldr	r3, [pc, #228]	; (8003838 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	015b      	lsls	r3, r3, #5
 8003758:	0d1b      	lsrs	r3, r3, #20
 800375a:	69fa      	ldr	r2, [r7, #28]
 800375c:	fb02 f303 	mul.w	r3, r2, r3
 8003760:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003762:	e054      	b.n	800380e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800376a:	d050      	beq.n	800380e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800376c:	f7fd fc04 	bl	8000f78 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	69fa      	ldr	r2, [r7, #28]
 8003778:	429a      	cmp	r2, r3
 800377a:	d902      	bls.n	8003782 <SPI_WaitFlagStateUntilTimeout+0x56>
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d13d      	bne.n	80037fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	685a      	ldr	r2, [r3, #4]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003790:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800379a:	d111      	bne.n	80037c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037a4:	d004      	beq.n	80037b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037ae:	d107      	bne.n	80037c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037c8:	d10f      	bne.n	80037ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037d8:	601a      	str	r2, [r3, #0]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2201      	movs	r2, #1
 80037ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e017      	b.n	800382e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d101      	bne.n	8003808 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003804:	2300      	movs	r3, #0
 8003806:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	3b01      	subs	r3, #1
 800380c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	689a      	ldr	r2, [r3, #8]
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	4013      	ands	r3, r2
 8003818:	68ba      	ldr	r2, [r7, #8]
 800381a:	429a      	cmp	r2, r3
 800381c:	bf0c      	ite	eq
 800381e:	2301      	moveq	r3, #1
 8003820:	2300      	movne	r3, #0
 8003822:	b2db      	uxtb	r3, r3
 8003824:	461a      	mov	r2, r3
 8003826:	79fb      	ldrb	r3, [r7, #7]
 8003828:	429a      	cmp	r2, r3
 800382a:	d19b      	bne.n	8003764 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800382c:	2300      	movs	r3, #0
}
 800382e:	4618      	mov	r0, r3
 8003830:	3720      	adds	r7, #32
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	20000000 	.word	0x20000000

0800383c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b088      	sub	sp, #32
 8003840:	af02      	add	r7, sp, #8
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003848:	4b1b      	ldr	r3, [pc, #108]	; (80038b8 <SPI_EndRxTxTransaction+0x7c>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a1b      	ldr	r2, [pc, #108]	; (80038bc <SPI_EndRxTxTransaction+0x80>)
 800384e:	fba2 2303 	umull	r2, r3, r2, r3
 8003852:	0d5b      	lsrs	r3, r3, #21
 8003854:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003858:	fb02 f303 	mul.w	r3, r2, r3
 800385c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003866:	d112      	bne.n	800388e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	9300      	str	r3, [sp, #0]
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	2200      	movs	r2, #0
 8003870:	2180      	movs	r1, #128	; 0x80
 8003872:	68f8      	ldr	r0, [r7, #12]
 8003874:	f7ff ff5a 	bl	800372c <SPI_WaitFlagStateUntilTimeout>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d016      	beq.n	80038ac <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003882:	f043 0220 	orr.w	r2, r3, #32
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e00f      	b.n	80038ae <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d00a      	beq.n	80038aa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	3b01      	subs	r3, #1
 8003898:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038a4:	2b80      	cmp	r3, #128	; 0x80
 80038a6:	d0f2      	beq.n	800388e <SPI_EndRxTxTransaction+0x52>
 80038a8:	e000      	b.n	80038ac <SPI_EndRxTxTransaction+0x70>
        break;
 80038aa:	bf00      	nop
  }

  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3718      	adds	r7, #24
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	20000000 	.word	0x20000000
 80038bc:	165e9f81 	.word	0x165e9f81

080038c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d101      	bne.n	80038d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e041      	b.n	8003956 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d106      	bne.n	80038ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 f839 	bl	800395e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2202      	movs	r2, #2
 80038f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	3304      	adds	r3, #4
 80038fc:	4619      	mov	r1, r3
 80038fe:	4610      	mov	r0, r2
 8003900:	f000 f9d8 	bl	8003cb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	3708      	adds	r7, #8
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800395e:	b480      	push	{r7}
 8003960:	b083      	sub	sp, #12
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003966:	bf00      	nop
 8003968:	370c      	adds	r7, #12
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
	...

08003974 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003974:	b480      	push	{r7}
 8003976:	b085      	sub	sp, #20
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003982:	b2db      	uxtb	r3, r3
 8003984:	2b01      	cmp	r3, #1
 8003986:	d001      	beq.n	800398c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e04e      	b.n	8003a2a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2202      	movs	r2, #2
 8003990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68da      	ldr	r2, [r3, #12]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f042 0201 	orr.w	r2, r2, #1
 80039a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a23      	ldr	r2, [pc, #140]	; (8003a38 <HAL_TIM_Base_Start_IT+0xc4>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d022      	beq.n	80039f4 <HAL_TIM_Base_Start_IT+0x80>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039b6:	d01d      	beq.n	80039f4 <HAL_TIM_Base_Start_IT+0x80>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a1f      	ldr	r2, [pc, #124]	; (8003a3c <HAL_TIM_Base_Start_IT+0xc8>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d018      	beq.n	80039f4 <HAL_TIM_Base_Start_IT+0x80>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a1e      	ldr	r2, [pc, #120]	; (8003a40 <HAL_TIM_Base_Start_IT+0xcc>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d013      	beq.n	80039f4 <HAL_TIM_Base_Start_IT+0x80>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a1c      	ldr	r2, [pc, #112]	; (8003a44 <HAL_TIM_Base_Start_IT+0xd0>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d00e      	beq.n	80039f4 <HAL_TIM_Base_Start_IT+0x80>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a1b      	ldr	r2, [pc, #108]	; (8003a48 <HAL_TIM_Base_Start_IT+0xd4>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d009      	beq.n	80039f4 <HAL_TIM_Base_Start_IT+0x80>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a19      	ldr	r2, [pc, #100]	; (8003a4c <HAL_TIM_Base_Start_IT+0xd8>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d004      	beq.n	80039f4 <HAL_TIM_Base_Start_IT+0x80>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a18      	ldr	r2, [pc, #96]	; (8003a50 <HAL_TIM_Base_Start_IT+0xdc>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d111      	bne.n	8003a18 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f003 0307 	and.w	r3, r3, #7
 80039fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2b06      	cmp	r3, #6
 8003a04:	d010      	beq.n	8003a28 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f042 0201 	orr.w	r2, r2, #1
 8003a14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a16:	e007      	b.n	8003a28 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f042 0201 	orr.w	r2, r2, #1
 8003a26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3714      	adds	r7, #20
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop
 8003a38:	40010000 	.word	0x40010000
 8003a3c:	40000400 	.word	0x40000400
 8003a40:	40000800 	.word	0x40000800
 8003a44:	40000c00 	.word	0x40000c00
 8003a48:	40010400 	.word	0x40010400
 8003a4c:	40014000 	.word	0x40014000
 8003a50:	40001800 	.word	0x40001800

08003a54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d122      	bne.n	8003ab0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	f003 0302 	and.w	r3, r3, #2
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d11b      	bne.n	8003ab0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f06f 0202 	mvn.w	r2, #2
 8003a80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2201      	movs	r2, #1
 8003a86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	699b      	ldr	r3, [r3, #24]
 8003a8e:	f003 0303 	and.w	r3, r3, #3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d003      	beq.n	8003a9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 f8ee 	bl	8003c78 <HAL_TIM_IC_CaptureCallback>
 8003a9c:	e005      	b.n	8003aaa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 f8e0 	bl	8003c64 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 f8f1 	bl	8003c8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	f003 0304 	and.w	r3, r3, #4
 8003aba:	2b04      	cmp	r3, #4
 8003abc:	d122      	bne.n	8003b04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	f003 0304 	and.w	r3, r3, #4
 8003ac8:	2b04      	cmp	r3, #4
 8003aca:	d11b      	bne.n	8003b04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f06f 0204 	mvn.w	r2, #4
 8003ad4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2202      	movs	r2, #2
 8003ada:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d003      	beq.n	8003af2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 f8c4 	bl	8003c78 <HAL_TIM_IC_CaptureCallback>
 8003af0:	e005      	b.n	8003afe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 f8b6 	bl	8003c64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 f8c7 	bl	8003c8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	f003 0308 	and.w	r3, r3, #8
 8003b0e:	2b08      	cmp	r3, #8
 8003b10:	d122      	bne.n	8003b58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	f003 0308 	and.w	r3, r3, #8
 8003b1c:	2b08      	cmp	r3, #8
 8003b1e:	d11b      	bne.n	8003b58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f06f 0208 	mvn.w	r2, #8
 8003b28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2204      	movs	r2, #4
 8003b2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	69db      	ldr	r3, [r3, #28]
 8003b36:	f003 0303 	and.w	r3, r3, #3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d003      	beq.n	8003b46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 f89a 	bl	8003c78 <HAL_TIM_IC_CaptureCallback>
 8003b44:	e005      	b.n	8003b52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 f88c 	bl	8003c64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f000 f89d 	bl	8003c8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	f003 0310 	and.w	r3, r3, #16
 8003b62:	2b10      	cmp	r3, #16
 8003b64:	d122      	bne.n	8003bac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	f003 0310 	and.w	r3, r3, #16
 8003b70:	2b10      	cmp	r3, #16
 8003b72:	d11b      	bne.n	8003bac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f06f 0210 	mvn.w	r2, #16
 8003b7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2208      	movs	r2, #8
 8003b82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	69db      	ldr	r3, [r3, #28]
 8003b8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d003      	beq.n	8003b9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 f870 	bl	8003c78 <HAL_TIM_IC_CaptureCallback>
 8003b98:	e005      	b.n	8003ba6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 f862 	bl	8003c64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f000 f873 	bl	8003c8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	f003 0301 	and.w	r3, r3, #1
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d10e      	bne.n	8003bd8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	f003 0301 	and.w	r3, r3, #1
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d107      	bne.n	8003bd8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f06f 0201 	mvn.w	r2, #1
 8003bd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f7fc fe78 	bl	80008c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003be2:	2b80      	cmp	r3, #128	; 0x80
 8003be4:	d10e      	bne.n	8003c04 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf0:	2b80      	cmp	r3, #128	; 0x80
 8003bf2:	d107      	bne.n	8003c04 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003bfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 f902 	bl	8003e08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c0e:	2b40      	cmp	r3, #64	; 0x40
 8003c10:	d10e      	bne.n	8003c30 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c1c:	2b40      	cmp	r3, #64	; 0x40
 8003c1e:	d107      	bne.n	8003c30 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 f838 	bl	8003ca0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	f003 0320 	and.w	r3, r3, #32
 8003c3a:	2b20      	cmp	r3, #32
 8003c3c:	d10e      	bne.n	8003c5c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	f003 0320 	and.w	r3, r3, #32
 8003c48:	2b20      	cmp	r3, #32
 8003c4a:	d107      	bne.n	8003c5c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f06f 0220 	mvn.w	r2, #32
 8003c54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 f8cc 	bl	8003df4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c5c:	bf00      	nop
 8003c5e:	3708      	adds	r7, #8
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c6c:	bf00      	nop
 8003c6e:	370c      	adds	r7, #12
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr

08003c78 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c80:	bf00      	nop
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c94:	bf00      	nop
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ca8:	bf00      	nop
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4a40      	ldr	r2, [pc, #256]	; (8003dc8 <TIM_Base_SetConfig+0x114>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d013      	beq.n	8003cf4 <TIM_Base_SetConfig+0x40>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cd2:	d00f      	beq.n	8003cf4 <TIM_Base_SetConfig+0x40>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4a3d      	ldr	r2, [pc, #244]	; (8003dcc <TIM_Base_SetConfig+0x118>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d00b      	beq.n	8003cf4 <TIM_Base_SetConfig+0x40>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4a3c      	ldr	r2, [pc, #240]	; (8003dd0 <TIM_Base_SetConfig+0x11c>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d007      	beq.n	8003cf4 <TIM_Base_SetConfig+0x40>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4a3b      	ldr	r2, [pc, #236]	; (8003dd4 <TIM_Base_SetConfig+0x120>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d003      	beq.n	8003cf4 <TIM_Base_SetConfig+0x40>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	4a3a      	ldr	r2, [pc, #232]	; (8003dd8 <TIM_Base_SetConfig+0x124>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d108      	bne.n	8003d06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a2f      	ldr	r2, [pc, #188]	; (8003dc8 <TIM_Base_SetConfig+0x114>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d02b      	beq.n	8003d66 <TIM_Base_SetConfig+0xb2>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d14:	d027      	beq.n	8003d66 <TIM_Base_SetConfig+0xb2>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a2c      	ldr	r2, [pc, #176]	; (8003dcc <TIM_Base_SetConfig+0x118>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d023      	beq.n	8003d66 <TIM_Base_SetConfig+0xb2>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a2b      	ldr	r2, [pc, #172]	; (8003dd0 <TIM_Base_SetConfig+0x11c>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d01f      	beq.n	8003d66 <TIM_Base_SetConfig+0xb2>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a2a      	ldr	r2, [pc, #168]	; (8003dd4 <TIM_Base_SetConfig+0x120>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d01b      	beq.n	8003d66 <TIM_Base_SetConfig+0xb2>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a29      	ldr	r2, [pc, #164]	; (8003dd8 <TIM_Base_SetConfig+0x124>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d017      	beq.n	8003d66 <TIM_Base_SetConfig+0xb2>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a28      	ldr	r2, [pc, #160]	; (8003ddc <TIM_Base_SetConfig+0x128>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d013      	beq.n	8003d66 <TIM_Base_SetConfig+0xb2>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a27      	ldr	r2, [pc, #156]	; (8003de0 <TIM_Base_SetConfig+0x12c>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d00f      	beq.n	8003d66 <TIM_Base_SetConfig+0xb2>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a26      	ldr	r2, [pc, #152]	; (8003de4 <TIM_Base_SetConfig+0x130>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d00b      	beq.n	8003d66 <TIM_Base_SetConfig+0xb2>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a25      	ldr	r2, [pc, #148]	; (8003de8 <TIM_Base_SetConfig+0x134>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d007      	beq.n	8003d66 <TIM_Base_SetConfig+0xb2>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a24      	ldr	r2, [pc, #144]	; (8003dec <TIM_Base_SetConfig+0x138>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d003      	beq.n	8003d66 <TIM_Base_SetConfig+0xb2>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a23      	ldr	r2, [pc, #140]	; (8003df0 <TIM_Base_SetConfig+0x13c>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d108      	bne.n	8003d78 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	68fa      	ldr	r2, [r7, #12]
 8003d8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	689a      	ldr	r2, [r3, #8]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4a0a      	ldr	r2, [pc, #40]	; (8003dc8 <TIM_Base_SetConfig+0x114>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d003      	beq.n	8003dac <TIM_Base_SetConfig+0xf8>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4a0c      	ldr	r2, [pc, #48]	; (8003dd8 <TIM_Base_SetConfig+0x124>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d103      	bne.n	8003db4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	691a      	ldr	r2, [r3, #16]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	615a      	str	r2, [r3, #20]
}
 8003dba:	bf00      	nop
 8003dbc:	3714      	adds	r7, #20
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	40010000 	.word	0x40010000
 8003dcc:	40000400 	.word	0x40000400
 8003dd0:	40000800 	.word	0x40000800
 8003dd4:	40000c00 	.word	0x40000c00
 8003dd8:	40010400 	.word	0x40010400
 8003ddc:	40014000 	.word	0x40014000
 8003de0:	40014400 	.word	0x40014400
 8003de4:	40014800 	.word	0x40014800
 8003de8:	40001800 	.word	0x40001800
 8003dec:	40001c00 	.word	0x40001c00
 8003df0:	40002000 	.word	0x40002000

08003df4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003dfc:	bf00      	nop
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e10:	bf00      	nop
 8003e12:	370c      	adds	r7, #12
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003e1c:	b084      	sub	sp, #16
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b084      	sub	sp, #16
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
 8003e26:	f107 001c 	add.w	r0, r7, #28
 8003e2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d122      	bne.n	8003e7a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e38:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003e48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003e5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d105      	bne.n	8003e6e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f001 fbee 	bl	8005650 <USB_CoreReset>
 8003e74:	4603      	mov	r3, r0
 8003e76:	73fb      	strb	r3, [r7, #15]
 8003e78:	e01a      	b.n	8003eb0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f001 fbe2 	bl	8005650 <USB_CoreReset>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003e90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d106      	bne.n	8003ea4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e9a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	639a      	str	r2, [r3, #56]	; 0x38
 8003ea2:	e005      	b.n	8003eb0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d10b      	bne.n	8003ece <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f043 0206 	orr.w	r2, r3, #6
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f043 0220 	orr.w	r2, r3, #32
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3710      	adds	r7, #16
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003eda:	b004      	add	sp, #16
 8003edc:	4770      	bx	lr
	...

08003ee0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b087      	sub	sp, #28
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	4613      	mov	r3, r2
 8003eec:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003eee:	79fb      	ldrb	r3, [r7, #7]
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d165      	bne.n	8003fc0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	4a41      	ldr	r2, [pc, #260]	; (8003ffc <USB_SetTurnaroundTime+0x11c>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d906      	bls.n	8003f0a <USB_SetTurnaroundTime+0x2a>
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	4a40      	ldr	r2, [pc, #256]	; (8004000 <USB_SetTurnaroundTime+0x120>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d202      	bcs.n	8003f0a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003f04:	230f      	movs	r3, #15
 8003f06:	617b      	str	r3, [r7, #20]
 8003f08:	e062      	b.n	8003fd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	4a3c      	ldr	r2, [pc, #240]	; (8004000 <USB_SetTurnaroundTime+0x120>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d306      	bcc.n	8003f20 <USB_SetTurnaroundTime+0x40>
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	4a3b      	ldr	r2, [pc, #236]	; (8004004 <USB_SetTurnaroundTime+0x124>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d202      	bcs.n	8003f20 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003f1a:	230e      	movs	r3, #14
 8003f1c:	617b      	str	r3, [r7, #20]
 8003f1e:	e057      	b.n	8003fd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	4a38      	ldr	r2, [pc, #224]	; (8004004 <USB_SetTurnaroundTime+0x124>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d306      	bcc.n	8003f36 <USB_SetTurnaroundTime+0x56>
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	4a37      	ldr	r2, [pc, #220]	; (8004008 <USB_SetTurnaroundTime+0x128>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d202      	bcs.n	8003f36 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003f30:	230d      	movs	r3, #13
 8003f32:	617b      	str	r3, [r7, #20]
 8003f34:	e04c      	b.n	8003fd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	4a33      	ldr	r2, [pc, #204]	; (8004008 <USB_SetTurnaroundTime+0x128>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d306      	bcc.n	8003f4c <USB_SetTurnaroundTime+0x6c>
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	4a32      	ldr	r2, [pc, #200]	; (800400c <USB_SetTurnaroundTime+0x12c>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d802      	bhi.n	8003f4c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003f46:	230c      	movs	r3, #12
 8003f48:	617b      	str	r3, [r7, #20]
 8003f4a:	e041      	b.n	8003fd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	4a2f      	ldr	r2, [pc, #188]	; (800400c <USB_SetTurnaroundTime+0x12c>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d906      	bls.n	8003f62 <USB_SetTurnaroundTime+0x82>
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	4a2e      	ldr	r2, [pc, #184]	; (8004010 <USB_SetTurnaroundTime+0x130>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d802      	bhi.n	8003f62 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003f5c:	230b      	movs	r3, #11
 8003f5e:	617b      	str	r3, [r7, #20]
 8003f60:	e036      	b.n	8003fd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	4a2a      	ldr	r2, [pc, #168]	; (8004010 <USB_SetTurnaroundTime+0x130>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d906      	bls.n	8003f78 <USB_SetTurnaroundTime+0x98>
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	4a29      	ldr	r2, [pc, #164]	; (8004014 <USB_SetTurnaroundTime+0x134>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d802      	bhi.n	8003f78 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003f72:	230a      	movs	r3, #10
 8003f74:	617b      	str	r3, [r7, #20]
 8003f76:	e02b      	b.n	8003fd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	4a26      	ldr	r2, [pc, #152]	; (8004014 <USB_SetTurnaroundTime+0x134>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d906      	bls.n	8003f8e <USB_SetTurnaroundTime+0xae>
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	4a25      	ldr	r2, [pc, #148]	; (8004018 <USB_SetTurnaroundTime+0x138>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d202      	bcs.n	8003f8e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003f88:	2309      	movs	r3, #9
 8003f8a:	617b      	str	r3, [r7, #20]
 8003f8c:	e020      	b.n	8003fd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	4a21      	ldr	r2, [pc, #132]	; (8004018 <USB_SetTurnaroundTime+0x138>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d306      	bcc.n	8003fa4 <USB_SetTurnaroundTime+0xc4>
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	4a20      	ldr	r2, [pc, #128]	; (800401c <USB_SetTurnaroundTime+0x13c>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d802      	bhi.n	8003fa4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003f9e:	2308      	movs	r3, #8
 8003fa0:	617b      	str	r3, [r7, #20]
 8003fa2:	e015      	b.n	8003fd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	4a1d      	ldr	r2, [pc, #116]	; (800401c <USB_SetTurnaroundTime+0x13c>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d906      	bls.n	8003fba <USB_SetTurnaroundTime+0xda>
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	4a1c      	ldr	r2, [pc, #112]	; (8004020 <USB_SetTurnaroundTime+0x140>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d202      	bcs.n	8003fba <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003fb4:	2307      	movs	r3, #7
 8003fb6:	617b      	str	r3, [r7, #20]
 8003fb8:	e00a      	b.n	8003fd0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003fba:	2306      	movs	r3, #6
 8003fbc:	617b      	str	r3, [r7, #20]
 8003fbe:	e007      	b.n	8003fd0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003fc0:	79fb      	ldrb	r3, [r7, #7]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d102      	bne.n	8003fcc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003fc6:	2309      	movs	r3, #9
 8003fc8:	617b      	str	r3, [r7, #20]
 8003fca:	e001      	b.n	8003fd0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003fcc:	2309      	movs	r3, #9
 8003fce:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	68da      	ldr	r2, [r3, #12]
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	029b      	lsls	r3, r3, #10
 8003fe4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003fe8:	431a      	orrs	r2, r3
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003fee:	2300      	movs	r3, #0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	371c      	adds	r7, #28
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr
 8003ffc:	00d8acbf 	.word	0x00d8acbf
 8004000:	00e4e1c0 	.word	0x00e4e1c0
 8004004:	00f42400 	.word	0x00f42400
 8004008:	01067380 	.word	0x01067380
 800400c:	011a499f 	.word	0x011a499f
 8004010:	01312cff 	.word	0x01312cff
 8004014:	014ca43f 	.word	0x014ca43f
 8004018:	016e3600 	.word	0x016e3600
 800401c:	01a6ab1f 	.word	0x01a6ab1f
 8004020:	01e84800 	.word	0x01e84800

08004024 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	f043 0201 	orr.w	r2, r3, #1
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004038:	2300      	movs	r3, #0
}
 800403a:	4618      	mov	r0, r3
 800403c:	370c      	adds	r7, #12
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr

08004046 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004046:	b480      	push	{r7}
 8004048:	b083      	sub	sp, #12
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f023 0201 	bic.w	r2, r3, #1
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800405a:	2300      	movs	r3, #0
}
 800405c:	4618      	mov	r0, r3
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	460b      	mov	r3, r1
 8004072:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004074:	2300      	movs	r3, #0
 8004076:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004084:	78fb      	ldrb	r3, [r7, #3]
 8004086:	2b01      	cmp	r3, #1
 8004088:	d115      	bne.n	80040b6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004096:	2001      	movs	r0, #1
 8004098:	f7fc ff7a 	bl	8000f90 <HAL_Delay>
      ms++;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	3301      	adds	r3, #1
 80040a0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f001 fa45 	bl	8005532 <USB_GetMode>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d01e      	beq.n	80040ec <USB_SetCurrentMode+0x84>
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2b31      	cmp	r3, #49	; 0x31
 80040b2:	d9f0      	bls.n	8004096 <USB_SetCurrentMode+0x2e>
 80040b4:	e01a      	b.n	80040ec <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80040b6:	78fb      	ldrb	r3, [r7, #3]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d115      	bne.n	80040e8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80040c8:	2001      	movs	r0, #1
 80040ca:	f7fc ff61 	bl	8000f90 <HAL_Delay>
      ms++;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	3301      	adds	r3, #1
 80040d2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f001 fa2c 	bl	8005532 <USB_GetMode>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d005      	beq.n	80040ec <USB_SetCurrentMode+0x84>
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2b31      	cmp	r3, #49	; 0x31
 80040e4:	d9f0      	bls.n	80040c8 <USB_SetCurrentMode+0x60>
 80040e6:	e001      	b.n	80040ec <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e005      	b.n	80040f8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2b32      	cmp	r3, #50	; 0x32
 80040f0:	d101      	bne.n	80040f6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e000      	b.n	80040f8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80040f6:	2300      	movs	r3, #0
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3710      	adds	r7, #16
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004100:	b084      	sub	sp, #16
 8004102:	b580      	push	{r7, lr}
 8004104:	b086      	sub	sp, #24
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
 800410a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800410e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004112:	2300      	movs	r3, #0
 8004114:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800411a:	2300      	movs	r3, #0
 800411c:	613b      	str	r3, [r7, #16]
 800411e:	e009      	b.n	8004134 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	3340      	adds	r3, #64	; 0x40
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	4413      	add	r3, r2
 800412a:	2200      	movs	r2, #0
 800412c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	3301      	adds	r3, #1
 8004132:	613b      	str	r3, [r7, #16]
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	2b0e      	cmp	r3, #14
 8004138:	d9f2      	bls.n	8004120 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800413a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800413c:	2b00      	cmp	r3, #0
 800413e:	d11c      	bne.n	800417a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	68fa      	ldr	r2, [r7, #12]
 800414a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800414e:	f043 0302 	orr.w	r3, r3, #2
 8004152:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004158:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004164:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004170:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	639a      	str	r2, [r3, #56]	; 0x38
 8004178:	e00b      	b.n	8004192 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800417e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800418a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004198:	461a      	mov	r2, r3
 800419a:	2300      	movs	r3, #0
 800419c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041a4:	4619      	mov	r1, r3
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041ac:	461a      	mov	r2, r3
 80041ae:	680b      	ldr	r3, [r1, #0]
 80041b0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80041b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d10c      	bne.n	80041d2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80041b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d104      	bne.n	80041c8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80041be:	2100      	movs	r1, #0
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f000 f965 	bl	8004490 <USB_SetDevSpeed>
 80041c6:	e008      	b.n	80041da <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80041c8:	2101      	movs	r1, #1
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f000 f960 	bl	8004490 <USB_SetDevSpeed>
 80041d0:	e003      	b.n	80041da <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80041d2:	2103      	movs	r1, #3
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f000 f95b 	bl	8004490 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80041da:	2110      	movs	r1, #16
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f000 f8f3 	bl	80043c8 <USB_FlushTxFifo>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d001      	beq.n	80041ec <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f000 f91f 	bl	8004430 <USB_FlushRxFifo>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d001      	beq.n	80041fc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004202:	461a      	mov	r2, r3
 8004204:	2300      	movs	r3, #0
 8004206:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800420e:	461a      	mov	r2, r3
 8004210:	2300      	movs	r3, #0
 8004212:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800421a:	461a      	mov	r2, r3
 800421c:	2300      	movs	r3, #0
 800421e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004220:	2300      	movs	r3, #0
 8004222:	613b      	str	r3, [r7, #16]
 8004224:	e043      	b.n	80042ae <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	015a      	lsls	r2, r3, #5
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	4413      	add	r3, r2
 800422e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004238:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800423c:	d118      	bne.n	8004270 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d10a      	bne.n	800425a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	015a      	lsls	r2, r3, #5
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	4413      	add	r3, r2
 800424c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004250:	461a      	mov	r2, r3
 8004252:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004256:	6013      	str	r3, [r2, #0]
 8004258:	e013      	b.n	8004282 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	015a      	lsls	r2, r3, #5
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	4413      	add	r3, r2
 8004262:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004266:	461a      	mov	r2, r3
 8004268:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800426c:	6013      	str	r3, [r2, #0]
 800426e:	e008      	b.n	8004282 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	015a      	lsls	r2, r3, #5
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	4413      	add	r3, r2
 8004278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800427c:	461a      	mov	r2, r3
 800427e:	2300      	movs	r3, #0
 8004280:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	015a      	lsls	r2, r3, #5
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	4413      	add	r3, r2
 800428a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800428e:	461a      	mov	r2, r3
 8004290:	2300      	movs	r3, #0
 8004292:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	015a      	lsls	r2, r3, #5
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	4413      	add	r3, r2
 800429c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042a0:	461a      	mov	r2, r3
 80042a2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80042a6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	3301      	adds	r3, #1
 80042ac:	613b      	str	r3, [r7, #16]
 80042ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b0:	693a      	ldr	r2, [r7, #16]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d3b7      	bcc.n	8004226 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042b6:	2300      	movs	r3, #0
 80042b8:	613b      	str	r3, [r7, #16]
 80042ba:	e043      	b.n	8004344 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	015a      	lsls	r2, r3, #5
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	4413      	add	r3, r2
 80042c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042d2:	d118      	bne.n	8004306 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d10a      	bne.n	80042f0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	015a      	lsls	r2, r3, #5
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	4413      	add	r3, r2
 80042e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042e6:	461a      	mov	r2, r3
 80042e8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80042ec:	6013      	str	r3, [r2, #0]
 80042ee:	e013      	b.n	8004318 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	015a      	lsls	r2, r3, #5
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	4413      	add	r3, r2
 80042f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042fc:	461a      	mov	r2, r3
 80042fe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004302:	6013      	str	r3, [r2, #0]
 8004304:	e008      	b.n	8004318 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	015a      	lsls	r2, r3, #5
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	4413      	add	r3, r2
 800430e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004312:	461a      	mov	r2, r3
 8004314:	2300      	movs	r3, #0
 8004316:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	015a      	lsls	r2, r3, #5
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	4413      	add	r3, r2
 8004320:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004324:	461a      	mov	r2, r3
 8004326:	2300      	movs	r3, #0
 8004328:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	015a      	lsls	r2, r3, #5
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	4413      	add	r3, r2
 8004332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004336:	461a      	mov	r2, r3
 8004338:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800433c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	3301      	adds	r3, #1
 8004342:	613b      	str	r3, [r7, #16]
 8004344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004346:	693a      	ldr	r2, [r7, #16]
 8004348:	429a      	cmp	r2, r3
 800434a:	d3b7      	bcc.n	80042bc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004352:	691b      	ldr	r3, [r3, #16]
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800435a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800435e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800436c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800436e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004370:	2b00      	cmp	r3, #0
 8004372:	d105      	bne.n	8004380 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	699b      	ldr	r3, [r3, #24]
 8004378:	f043 0210 	orr.w	r2, r3, #16
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	699a      	ldr	r2, [r3, #24]
 8004384:	4b0f      	ldr	r3, [pc, #60]	; (80043c4 <USB_DevInit+0x2c4>)
 8004386:	4313      	orrs	r3, r2
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800438c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800438e:	2b00      	cmp	r3, #0
 8004390:	d005      	beq.n	800439e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	699b      	ldr	r3, [r3, #24]
 8004396:	f043 0208 	orr.w	r2, r3, #8
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800439e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d107      	bne.n	80043b4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	699b      	ldr	r3, [r3, #24]
 80043a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80043ac:	f043 0304 	orr.w	r3, r3, #4
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80043b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3718      	adds	r7, #24
 80043ba:	46bd      	mov	sp, r7
 80043bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80043c0:	b004      	add	sp, #16
 80043c2:	4770      	bx	lr
 80043c4:	803c3800 	.word	0x803c3800

080043c8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b085      	sub	sp, #20
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80043d2:	2300      	movs	r3, #0
 80043d4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	3301      	adds	r3, #1
 80043da:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	4a13      	ldr	r2, [pc, #76]	; (800442c <USB_FlushTxFifo+0x64>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d901      	bls.n	80043e8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e01b      	b.n	8004420 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	691b      	ldr	r3, [r3, #16]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	daf2      	bge.n	80043d6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80043f0:	2300      	movs	r3, #0
 80043f2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	019b      	lsls	r3, r3, #6
 80043f8:	f043 0220 	orr.w	r2, r3, #32
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	3301      	adds	r3, #1
 8004404:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	4a08      	ldr	r2, [pc, #32]	; (800442c <USB_FlushTxFifo+0x64>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d901      	bls.n	8004412 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e006      	b.n	8004420 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	f003 0320 	and.w	r3, r3, #32
 800441a:	2b20      	cmp	r3, #32
 800441c:	d0f0      	beq.n	8004400 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	3714      	adds	r7, #20
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr
 800442c:	00030d40 	.word	0x00030d40

08004430 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004430:	b480      	push	{r7}
 8004432:	b085      	sub	sp, #20
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004438:	2300      	movs	r3, #0
 800443a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	3301      	adds	r3, #1
 8004440:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	4a11      	ldr	r2, [pc, #68]	; (800448c <USB_FlushRxFifo+0x5c>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d901      	bls.n	800444e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e018      	b.n	8004480 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	2b00      	cmp	r3, #0
 8004454:	daf2      	bge.n	800443c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004456:	2300      	movs	r3, #0
 8004458:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2210      	movs	r2, #16
 800445e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	3301      	adds	r3, #1
 8004464:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	4a08      	ldr	r2, [pc, #32]	; (800448c <USB_FlushRxFifo+0x5c>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d901      	bls.n	8004472 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e006      	b.n	8004480 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	f003 0310 	and.w	r3, r3, #16
 800447a:	2b10      	cmp	r3, #16
 800447c:	d0f0      	beq.n	8004460 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	3714      	adds	r7, #20
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr
 800448c:	00030d40 	.word	0x00030d40

08004490 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004490:	b480      	push	{r7}
 8004492:	b085      	sub	sp, #20
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	460b      	mov	r3, r1
 800449a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	78fb      	ldrb	r3, [r7, #3]
 80044aa:	68f9      	ldr	r1, [r7, #12]
 80044ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044b0:	4313      	orrs	r3, r2
 80044b2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3714      	adds	r7, #20
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr

080044c2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80044c2:	b480      	push	{r7}
 80044c4:	b087      	sub	sp, #28
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f003 0306 	and.w	r3, r3, #6
 80044da:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d102      	bne.n	80044e8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80044e2:	2300      	movs	r3, #0
 80044e4:	75fb      	strb	r3, [r7, #23]
 80044e6:	e00a      	b.n	80044fe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d002      	beq.n	80044f4 <USB_GetDevSpeed+0x32>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2b06      	cmp	r3, #6
 80044f2:	d102      	bne.n	80044fa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80044f4:	2302      	movs	r3, #2
 80044f6:	75fb      	strb	r3, [r7, #23]
 80044f8:	e001      	b.n	80044fe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80044fa:	230f      	movs	r3, #15
 80044fc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80044fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004500:	4618      	mov	r0, r3
 8004502:	371c      	adds	r7, #28
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800450c:	b480      	push	{r7}
 800450e:	b085      	sub	sp, #20
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	785b      	ldrb	r3, [r3, #1]
 8004524:	2b01      	cmp	r3, #1
 8004526:	d13a      	bne.n	800459e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800452e:	69da      	ldr	r2, [r3, #28]
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	f003 030f 	and.w	r3, r3, #15
 8004538:	2101      	movs	r1, #1
 800453a:	fa01 f303 	lsl.w	r3, r1, r3
 800453e:	b29b      	uxth	r3, r3
 8004540:	68f9      	ldr	r1, [r7, #12]
 8004542:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004546:	4313      	orrs	r3, r2
 8004548:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	015a      	lsls	r2, r3, #5
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	4413      	add	r3, r2
 8004552:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d155      	bne.n	800460c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	015a      	lsls	r2, r3, #5
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	4413      	add	r3, r2
 8004568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	791b      	ldrb	r3, [r3, #4]
 800457a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800457c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	059b      	lsls	r3, r3, #22
 8004582:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004584:	4313      	orrs	r3, r2
 8004586:	68ba      	ldr	r2, [r7, #8]
 8004588:	0151      	lsls	r1, r2, #5
 800458a:	68fa      	ldr	r2, [r7, #12]
 800458c:	440a      	add	r2, r1
 800458e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004592:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004596:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800459a:	6013      	str	r3, [r2, #0]
 800459c:	e036      	b.n	800460c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045a4:	69da      	ldr	r2, [r3, #28]
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	f003 030f 	and.w	r3, r3, #15
 80045ae:	2101      	movs	r1, #1
 80045b0:	fa01 f303 	lsl.w	r3, r1, r3
 80045b4:	041b      	lsls	r3, r3, #16
 80045b6:	68f9      	ldr	r1, [r7, #12]
 80045b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045bc:	4313      	orrs	r3, r2
 80045be:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	015a      	lsls	r2, r3, #5
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	4413      	add	r3, r2
 80045c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d11a      	bne.n	800460c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	015a      	lsls	r2, r3, #5
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	4413      	add	r3, r2
 80045de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	791b      	ldrb	r3, [r3, #4]
 80045f0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80045f2:	430b      	orrs	r3, r1
 80045f4:	4313      	orrs	r3, r2
 80045f6:	68ba      	ldr	r2, [r7, #8]
 80045f8:	0151      	lsls	r1, r2, #5
 80045fa:	68fa      	ldr	r2, [r7, #12]
 80045fc:	440a      	add	r2, r1
 80045fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004602:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004606:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800460a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	3714      	adds	r7, #20
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr
	...

0800461c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800461c:	b480      	push	{r7}
 800461e:	b085      	sub	sp, #20
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	785b      	ldrb	r3, [r3, #1]
 8004634:	2b01      	cmp	r3, #1
 8004636:	d161      	bne.n	80046fc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	015a      	lsls	r2, r3, #5
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	4413      	add	r3, r2
 8004640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800464a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800464e:	d11f      	bne.n	8004690 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	015a      	lsls	r2, r3, #5
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	4413      	add	r3, r2
 8004658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	68ba      	ldr	r2, [r7, #8]
 8004660:	0151      	lsls	r1, r2, #5
 8004662:	68fa      	ldr	r2, [r7, #12]
 8004664:	440a      	add	r2, r1
 8004666:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800466a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800466e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	015a      	lsls	r2, r3, #5
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	4413      	add	r3, r2
 8004678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68ba      	ldr	r2, [r7, #8]
 8004680:	0151      	lsls	r1, r2, #5
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	440a      	add	r2, r1
 8004686:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800468a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800468e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004696:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	f003 030f 	and.w	r3, r3, #15
 80046a0:	2101      	movs	r1, #1
 80046a2:	fa01 f303 	lsl.w	r3, r1, r3
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	43db      	mvns	r3, r3
 80046aa:	68f9      	ldr	r1, [r7, #12]
 80046ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046b0:	4013      	ands	r3, r2
 80046b2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046ba:	69da      	ldr	r2, [r3, #28]
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	f003 030f 	and.w	r3, r3, #15
 80046c4:	2101      	movs	r1, #1
 80046c6:	fa01 f303 	lsl.w	r3, r1, r3
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	43db      	mvns	r3, r3
 80046ce:	68f9      	ldr	r1, [r7, #12]
 80046d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046d4:	4013      	ands	r3, r2
 80046d6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	015a      	lsls	r2, r3, #5
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	4413      	add	r3, r2
 80046e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	0159      	lsls	r1, r3, #5
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	440b      	add	r3, r1
 80046ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046f2:	4619      	mov	r1, r3
 80046f4:	4b35      	ldr	r3, [pc, #212]	; (80047cc <USB_DeactivateEndpoint+0x1b0>)
 80046f6:	4013      	ands	r3, r2
 80046f8:	600b      	str	r3, [r1, #0]
 80046fa:	e060      	b.n	80047be <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	015a      	lsls	r2, r3, #5
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	4413      	add	r3, r2
 8004704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800470e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004712:	d11f      	bne.n	8004754 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	015a      	lsls	r2, r3, #5
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	4413      	add	r3, r2
 800471c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68ba      	ldr	r2, [r7, #8]
 8004724:	0151      	lsls	r1, r2, #5
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	440a      	add	r2, r1
 800472a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800472e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004732:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	015a      	lsls	r2, r3, #5
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	4413      	add	r3, r2
 800473c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68ba      	ldr	r2, [r7, #8]
 8004744:	0151      	lsls	r1, r2, #5
 8004746:	68fa      	ldr	r2, [r7, #12]
 8004748:	440a      	add	r2, r1
 800474a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800474e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004752:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800475a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	f003 030f 	and.w	r3, r3, #15
 8004764:	2101      	movs	r1, #1
 8004766:	fa01 f303 	lsl.w	r3, r1, r3
 800476a:	041b      	lsls	r3, r3, #16
 800476c:	43db      	mvns	r3, r3
 800476e:	68f9      	ldr	r1, [r7, #12]
 8004770:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004774:	4013      	ands	r3, r2
 8004776:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800477e:	69da      	ldr	r2, [r3, #28]
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	f003 030f 	and.w	r3, r3, #15
 8004788:	2101      	movs	r1, #1
 800478a:	fa01 f303 	lsl.w	r3, r1, r3
 800478e:	041b      	lsls	r3, r3, #16
 8004790:	43db      	mvns	r3, r3
 8004792:	68f9      	ldr	r1, [r7, #12]
 8004794:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004798:	4013      	ands	r3, r2
 800479a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	015a      	lsls	r2, r3, #5
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	4413      	add	r3, r2
 80047a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	0159      	lsls	r1, r3, #5
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	440b      	add	r3, r1
 80047b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047b6:	4619      	mov	r1, r3
 80047b8:	4b05      	ldr	r3, [pc, #20]	; (80047d0 <USB_DeactivateEndpoint+0x1b4>)
 80047ba:	4013      	ands	r3, r2
 80047bc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80047be:	2300      	movs	r3, #0
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3714      	adds	r7, #20
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr
 80047cc:	ec337800 	.word	0xec337800
 80047d0:	eff37800 	.word	0xeff37800

080047d4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b08a      	sub	sp, #40	; 0x28
 80047d8:	af02      	add	r7, sp, #8
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	4613      	mov	r3, r2
 80047e0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	781b      	ldrb	r3, [r3, #0]
 80047ea:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	785b      	ldrb	r3, [r3, #1]
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	f040 815c 	bne.w	8004aae <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	699b      	ldr	r3, [r3, #24]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d132      	bne.n	8004864 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	015a      	lsls	r2, r3, #5
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	4413      	add	r3, r2
 8004806:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800480a:	691b      	ldr	r3, [r3, #16]
 800480c:	69ba      	ldr	r2, [r7, #24]
 800480e:	0151      	lsls	r1, r2, #5
 8004810:	69fa      	ldr	r2, [r7, #28]
 8004812:	440a      	add	r2, r1
 8004814:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004818:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800481c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004820:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	015a      	lsls	r2, r3, #5
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	4413      	add	r3, r2
 800482a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	69ba      	ldr	r2, [r7, #24]
 8004832:	0151      	lsls	r1, r2, #5
 8004834:	69fa      	ldr	r2, [r7, #28]
 8004836:	440a      	add	r2, r1
 8004838:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800483c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004840:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	015a      	lsls	r2, r3, #5
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	4413      	add	r3, r2
 800484a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800484e:	691b      	ldr	r3, [r3, #16]
 8004850:	69ba      	ldr	r2, [r7, #24]
 8004852:	0151      	lsls	r1, r2, #5
 8004854:	69fa      	ldr	r2, [r7, #28]
 8004856:	440a      	add	r2, r1
 8004858:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800485c:	0cdb      	lsrs	r3, r3, #19
 800485e:	04db      	lsls	r3, r3, #19
 8004860:	6113      	str	r3, [r2, #16]
 8004862:	e074      	b.n	800494e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	015a      	lsls	r2, r3, #5
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	4413      	add	r3, r2
 800486c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	69ba      	ldr	r2, [r7, #24]
 8004874:	0151      	lsls	r1, r2, #5
 8004876:	69fa      	ldr	r2, [r7, #28]
 8004878:	440a      	add	r2, r1
 800487a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800487e:	0cdb      	lsrs	r3, r3, #19
 8004880:	04db      	lsls	r3, r3, #19
 8004882:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	015a      	lsls	r2, r3, #5
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	4413      	add	r3, r2
 800488c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004890:	691b      	ldr	r3, [r3, #16]
 8004892:	69ba      	ldr	r2, [r7, #24]
 8004894:	0151      	lsls	r1, r2, #5
 8004896:	69fa      	ldr	r2, [r7, #28]
 8004898:	440a      	add	r2, r1
 800489a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800489e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80048a2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80048a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	015a      	lsls	r2, r3, #5
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	4413      	add	r3, r2
 80048b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048b4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	6999      	ldr	r1, [r3, #24]
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	440b      	add	r3, r1
 80048c0:	1e59      	subs	r1, r3, #1
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80048ca:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80048cc:	4b9d      	ldr	r3, [pc, #628]	; (8004b44 <USB_EPStartXfer+0x370>)
 80048ce:	400b      	ands	r3, r1
 80048d0:	69b9      	ldr	r1, [r7, #24]
 80048d2:	0148      	lsls	r0, r1, #5
 80048d4:	69f9      	ldr	r1, [r7, #28]
 80048d6:	4401      	add	r1, r0
 80048d8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80048dc:	4313      	orrs	r3, r2
 80048de:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	015a      	lsls	r2, r3, #5
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	4413      	add	r3, r2
 80048e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ec:	691a      	ldr	r2, [r3, #16]
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048f6:	69b9      	ldr	r1, [r7, #24]
 80048f8:	0148      	lsls	r0, r1, #5
 80048fa:	69f9      	ldr	r1, [r7, #28]
 80048fc:	4401      	add	r1, r0
 80048fe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004902:	4313      	orrs	r3, r2
 8004904:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	791b      	ldrb	r3, [r3, #4]
 800490a:	2b01      	cmp	r3, #1
 800490c:	d11f      	bne.n	800494e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	015a      	lsls	r2, r3, #5
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	4413      	add	r3, r2
 8004916:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800491a:	691b      	ldr	r3, [r3, #16]
 800491c:	69ba      	ldr	r2, [r7, #24]
 800491e:	0151      	lsls	r1, r2, #5
 8004920:	69fa      	ldr	r2, [r7, #28]
 8004922:	440a      	add	r2, r1
 8004924:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004928:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800492c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800492e:	69bb      	ldr	r3, [r7, #24]
 8004930:	015a      	lsls	r2, r3, #5
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	4413      	add	r3, r2
 8004936:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	69ba      	ldr	r2, [r7, #24]
 800493e:	0151      	lsls	r1, r2, #5
 8004940:	69fa      	ldr	r2, [r7, #28]
 8004942:	440a      	add	r2, r1
 8004944:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004948:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800494c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800494e:	79fb      	ldrb	r3, [r7, #7]
 8004950:	2b01      	cmp	r3, #1
 8004952:	d14b      	bne.n	80049ec <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	695b      	ldr	r3, [r3, #20]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d009      	beq.n	8004970 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800495c:	69bb      	ldr	r3, [r7, #24]
 800495e:	015a      	lsls	r2, r3, #5
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	4413      	add	r3, r2
 8004964:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004968:	461a      	mov	r2, r3
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	695b      	ldr	r3, [r3, #20]
 800496e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	791b      	ldrb	r3, [r3, #4]
 8004974:	2b01      	cmp	r3, #1
 8004976:	d128      	bne.n	80049ca <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004984:	2b00      	cmp	r3, #0
 8004986:	d110      	bne.n	80049aa <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	015a      	lsls	r2, r3, #5
 800498c:	69fb      	ldr	r3, [r7, #28]
 800498e:	4413      	add	r3, r2
 8004990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	69ba      	ldr	r2, [r7, #24]
 8004998:	0151      	lsls	r1, r2, #5
 800499a:	69fa      	ldr	r2, [r7, #28]
 800499c:	440a      	add	r2, r1
 800499e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80049a6:	6013      	str	r3, [r2, #0]
 80049a8:	e00f      	b.n	80049ca <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	015a      	lsls	r2, r3, #5
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	4413      	add	r3, r2
 80049b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	69ba      	ldr	r2, [r7, #24]
 80049ba:	0151      	lsls	r1, r2, #5
 80049bc:	69fa      	ldr	r2, [r7, #28]
 80049be:	440a      	add	r2, r1
 80049c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049c8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	015a      	lsls	r2, r3, #5
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	4413      	add	r3, r2
 80049d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	69ba      	ldr	r2, [r7, #24]
 80049da:	0151      	lsls	r1, r2, #5
 80049dc:	69fa      	ldr	r2, [r7, #28]
 80049de:	440a      	add	r2, r1
 80049e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049e4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80049e8:	6013      	str	r3, [r2, #0]
 80049ea:	e133      	b.n	8004c54 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	015a      	lsls	r2, r3, #5
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	4413      	add	r3, r2
 80049f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	69ba      	ldr	r2, [r7, #24]
 80049fc:	0151      	lsls	r1, r2, #5
 80049fe:	69fa      	ldr	r2, [r7, #28]
 8004a00:	440a      	add	r2, r1
 8004a02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a06:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004a0a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	791b      	ldrb	r3, [r3, #4]
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d015      	beq.n	8004a40 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	699b      	ldr	r3, [r3, #24]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	f000 811b 	beq.w	8004c54 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	f003 030f 	and.w	r3, r3, #15
 8004a2e:	2101      	movs	r1, #1
 8004a30:	fa01 f303 	lsl.w	r3, r1, r3
 8004a34:	69f9      	ldr	r1, [r7, #28]
 8004a36:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	634b      	str	r3, [r1, #52]	; 0x34
 8004a3e:	e109      	b.n	8004c54 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d110      	bne.n	8004a72 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	015a      	lsls	r2, r3, #5
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	4413      	add	r3, r2
 8004a58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	69ba      	ldr	r2, [r7, #24]
 8004a60:	0151      	lsls	r1, r2, #5
 8004a62:	69fa      	ldr	r2, [r7, #28]
 8004a64:	440a      	add	r2, r1
 8004a66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a6a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a6e:	6013      	str	r3, [r2, #0]
 8004a70:	e00f      	b.n	8004a92 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004a72:	69bb      	ldr	r3, [r7, #24]
 8004a74:	015a      	lsls	r2, r3, #5
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	4413      	add	r3, r2
 8004a7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	69ba      	ldr	r2, [r7, #24]
 8004a82:	0151      	lsls	r1, r2, #5
 8004a84:	69fa      	ldr	r2, [r7, #28]
 8004a86:	440a      	add	r2, r1
 8004a88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a90:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	6919      	ldr	r1, [r3, #16]
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	781a      	ldrb	r2, [r3, #0]
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	699b      	ldr	r3, [r3, #24]
 8004a9e:	b298      	uxth	r0, r3
 8004aa0:	79fb      	ldrb	r3, [r7, #7]
 8004aa2:	9300      	str	r3, [sp, #0]
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	68f8      	ldr	r0, [r7, #12]
 8004aa8:	f000 fade 	bl	8005068 <USB_WritePacket>
 8004aac:	e0d2      	b.n	8004c54 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	015a      	lsls	r2, r3, #5
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	4413      	add	r3, r2
 8004ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aba:	691b      	ldr	r3, [r3, #16]
 8004abc:	69ba      	ldr	r2, [r7, #24]
 8004abe:	0151      	lsls	r1, r2, #5
 8004ac0:	69fa      	ldr	r2, [r7, #28]
 8004ac2:	440a      	add	r2, r1
 8004ac4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ac8:	0cdb      	lsrs	r3, r3, #19
 8004aca:	04db      	lsls	r3, r3, #19
 8004acc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	015a      	lsls	r2, r3, #5
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	4413      	add	r3, r2
 8004ad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ada:	691b      	ldr	r3, [r3, #16]
 8004adc:	69ba      	ldr	r2, [r7, #24]
 8004ade:	0151      	lsls	r1, r2, #5
 8004ae0:	69fa      	ldr	r2, [r7, #28]
 8004ae2:	440a      	add	r2, r1
 8004ae4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ae8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004aec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004af0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	699b      	ldr	r3, [r3, #24]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d126      	bne.n	8004b48 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	015a      	lsls	r2, r3, #5
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	4413      	add	r3, r2
 8004b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b06:	691a      	ldr	r2, [r3, #16]
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b10:	69b9      	ldr	r1, [r7, #24]
 8004b12:	0148      	lsls	r0, r1, #5
 8004b14:	69f9      	ldr	r1, [r7, #28]
 8004b16:	4401      	add	r1, r0
 8004b18:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	015a      	lsls	r2, r3, #5
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	4413      	add	r3, r2
 8004b28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	69ba      	ldr	r2, [r7, #24]
 8004b30:	0151      	lsls	r1, r2, #5
 8004b32:	69fa      	ldr	r2, [r7, #28]
 8004b34:	440a      	add	r2, r1
 8004b36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b3a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b3e:	6113      	str	r3, [r2, #16]
 8004b40:	e03a      	b.n	8004bb8 <USB_EPStartXfer+0x3e4>
 8004b42:	bf00      	nop
 8004b44:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	699a      	ldr	r2, [r3, #24]
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	4413      	add	r3, r2
 8004b52:	1e5a      	subs	r2, r3, #1
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b5c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	8afa      	ldrh	r2, [r7, #22]
 8004b64:	fb03 f202 	mul.w	r2, r3, r2
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	015a      	lsls	r2, r3, #5
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	4413      	add	r3, r2
 8004b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b78:	691a      	ldr	r2, [r3, #16]
 8004b7a:	8afb      	ldrh	r3, [r7, #22]
 8004b7c:	04d9      	lsls	r1, r3, #19
 8004b7e:	4b38      	ldr	r3, [pc, #224]	; (8004c60 <USB_EPStartXfer+0x48c>)
 8004b80:	400b      	ands	r3, r1
 8004b82:	69b9      	ldr	r1, [r7, #24]
 8004b84:	0148      	lsls	r0, r1, #5
 8004b86:	69f9      	ldr	r1, [r7, #28]
 8004b88:	4401      	add	r1, r0
 8004b8a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004b92:	69bb      	ldr	r3, [r7, #24]
 8004b94:	015a      	lsls	r2, r3, #5
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	4413      	add	r3, r2
 8004b9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b9e:	691a      	ldr	r2, [r3, #16]
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	69db      	ldr	r3, [r3, #28]
 8004ba4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ba8:	69b9      	ldr	r1, [r7, #24]
 8004baa:	0148      	lsls	r0, r1, #5
 8004bac:	69f9      	ldr	r1, [r7, #28]
 8004bae:	4401      	add	r1, r0
 8004bb0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004bb8:	79fb      	ldrb	r3, [r7, #7]
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d10d      	bne.n	8004bda <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d009      	beq.n	8004bda <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	6919      	ldr	r1, [r3, #16]
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	015a      	lsls	r2, r3, #5
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	4413      	add	r3, r2
 8004bd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bd6:	460a      	mov	r2, r1
 8004bd8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	791b      	ldrb	r3, [r3, #4]
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d128      	bne.n	8004c34 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d110      	bne.n	8004c14 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	015a      	lsls	r2, r3, #5
 8004bf6:	69fb      	ldr	r3, [r7, #28]
 8004bf8:	4413      	add	r3, r2
 8004bfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	69ba      	ldr	r2, [r7, #24]
 8004c02:	0151      	lsls	r1, r2, #5
 8004c04:	69fa      	ldr	r2, [r7, #28]
 8004c06:	440a      	add	r2, r1
 8004c08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c0c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c10:	6013      	str	r3, [r2, #0]
 8004c12:	e00f      	b.n	8004c34 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004c14:	69bb      	ldr	r3, [r7, #24]
 8004c16:	015a      	lsls	r2, r3, #5
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	4413      	add	r3, r2
 8004c1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	69ba      	ldr	r2, [r7, #24]
 8004c24:	0151      	lsls	r1, r2, #5
 8004c26:	69fa      	ldr	r2, [r7, #28]
 8004c28:	440a      	add	r2, r1
 8004c2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c32:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004c34:	69bb      	ldr	r3, [r7, #24]
 8004c36:	015a      	lsls	r2, r3, #5
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	4413      	add	r3, r2
 8004c3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	69ba      	ldr	r2, [r7, #24]
 8004c44:	0151      	lsls	r1, r2, #5
 8004c46:	69fa      	ldr	r2, [r7, #28]
 8004c48:	440a      	add	r2, r1
 8004c4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c4e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c52:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004c54:	2300      	movs	r3, #0
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3720      	adds	r7, #32
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	1ff80000 	.word	0x1ff80000

08004c64 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b087      	sub	sp, #28
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	4613      	mov	r3, r2
 8004c70:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	785b      	ldrb	r3, [r3, #1]
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	f040 80ce 	bne.w	8004e22 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	699b      	ldr	r3, [r3, #24]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d132      	bne.n	8004cf4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	015a      	lsls	r2, r3, #5
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	4413      	add	r3, r2
 8004c96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c9a:	691b      	ldr	r3, [r3, #16]
 8004c9c:	693a      	ldr	r2, [r7, #16]
 8004c9e:	0151      	lsls	r1, r2, #5
 8004ca0:	697a      	ldr	r2, [r7, #20]
 8004ca2:	440a      	add	r2, r1
 8004ca4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ca8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004cac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004cb0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	015a      	lsls	r2, r3, #5
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	4413      	add	r3, r2
 8004cba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	693a      	ldr	r2, [r7, #16]
 8004cc2:	0151      	lsls	r1, r2, #5
 8004cc4:	697a      	ldr	r2, [r7, #20]
 8004cc6:	440a      	add	r2, r1
 8004cc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ccc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004cd0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	015a      	lsls	r2, r3, #5
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	4413      	add	r3, r2
 8004cda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cde:	691b      	ldr	r3, [r3, #16]
 8004ce0:	693a      	ldr	r2, [r7, #16]
 8004ce2:	0151      	lsls	r1, r2, #5
 8004ce4:	697a      	ldr	r2, [r7, #20]
 8004ce6:	440a      	add	r2, r1
 8004ce8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cec:	0cdb      	lsrs	r3, r3, #19
 8004cee:	04db      	lsls	r3, r3, #19
 8004cf0:	6113      	str	r3, [r2, #16]
 8004cf2:	e04e      	b.n	8004d92 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	015a      	lsls	r2, r3, #5
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	4413      	add	r3, r2
 8004cfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	693a      	ldr	r2, [r7, #16]
 8004d04:	0151      	lsls	r1, r2, #5
 8004d06:	697a      	ldr	r2, [r7, #20]
 8004d08:	440a      	add	r2, r1
 8004d0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d0e:	0cdb      	lsrs	r3, r3, #19
 8004d10:	04db      	lsls	r3, r3, #19
 8004d12:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	015a      	lsls	r2, r3, #5
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	693a      	ldr	r2, [r7, #16]
 8004d24:	0151      	lsls	r1, r2, #5
 8004d26:	697a      	ldr	r2, [r7, #20]
 8004d28:	440a      	add	r2, r1
 8004d2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d2e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d32:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d36:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	699a      	ldr	r2, [r3, #24]
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d903      	bls.n	8004d4c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	68da      	ldr	r2, [r3, #12]
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	015a      	lsls	r2, r3, #5
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	4413      	add	r3, r2
 8004d54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	693a      	ldr	r2, [r7, #16]
 8004d5c:	0151      	lsls	r1, r2, #5
 8004d5e:	697a      	ldr	r2, [r7, #20]
 8004d60:	440a      	add	r2, r1
 8004d62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d66:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d6a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	015a      	lsls	r2, r3, #5
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	4413      	add	r3, r2
 8004d74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d78:	691a      	ldr	r2, [r3, #16]
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	699b      	ldr	r3, [r3, #24]
 8004d7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d82:	6939      	ldr	r1, [r7, #16]
 8004d84:	0148      	lsls	r0, r1, #5
 8004d86:	6979      	ldr	r1, [r7, #20]
 8004d88:	4401      	add	r1, r0
 8004d8a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004d92:	79fb      	ldrb	r3, [r7, #7]
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d11e      	bne.n	8004dd6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	695b      	ldr	r3, [r3, #20]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d009      	beq.n	8004db4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	015a      	lsls	r2, r3, #5
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	4413      	add	r3, r2
 8004da8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dac:	461a      	mov	r2, r3
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	695b      	ldr	r3, [r3, #20]
 8004db2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	015a      	lsls	r2, r3, #5
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	4413      	add	r3, r2
 8004dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	693a      	ldr	r2, [r7, #16]
 8004dc4:	0151      	lsls	r1, r2, #5
 8004dc6:	697a      	ldr	r2, [r7, #20]
 8004dc8:	440a      	add	r2, r1
 8004dca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004dd2:	6013      	str	r3, [r2, #0]
 8004dd4:	e097      	b.n	8004f06 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	015a      	lsls	r2, r3, #5
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	4413      	add	r3, r2
 8004dde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	693a      	ldr	r2, [r7, #16]
 8004de6:	0151      	lsls	r1, r2, #5
 8004de8:	697a      	ldr	r2, [r7, #20]
 8004dea:	440a      	add	r2, r1
 8004dec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004df0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004df4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	f000 8083 	beq.w	8004f06 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	f003 030f 	and.w	r3, r3, #15
 8004e10:	2101      	movs	r1, #1
 8004e12:	fa01 f303 	lsl.w	r3, r1, r3
 8004e16:	6979      	ldr	r1, [r7, #20]
 8004e18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	634b      	str	r3, [r1, #52]	; 0x34
 8004e20:	e071      	b.n	8004f06 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	015a      	lsls	r2, r3, #5
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	4413      	add	r3, r2
 8004e2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e2e:	691b      	ldr	r3, [r3, #16]
 8004e30:	693a      	ldr	r2, [r7, #16]
 8004e32:	0151      	lsls	r1, r2, #5
 8004e34:	697a      	ldr	r2, [r7, #20]
 8004e36:	440a      	add	r2, r1
 8004e38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e3c:	0cdb      	lsrs	r3, r3, #19
 8004e3e:	04db      	lsls	r3, r3, #19
 8004e40:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	015a      	lsls	r2, r3, #5
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	4413      	add	r3, r2
 8004e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e4e:	691b      	ldr	r3, [r3, #16]
 8004e50:	693a      	ldr	r2, [r7, #16]
 8004e52:	0151      	lsls	r1, r2, #5
 8004e54:	697a      	ldr	r2, [r7, #20]
 8004e56:	440a      	add	r2, r1
 8004e58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e5c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e60:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e64:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	699b      	ldr	r3, [r3, #24]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d003      	beq.n	8004e76 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	68da      	ldr	r2, [r3, #12]
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	68da      	ldr	r2, [r3, #12]
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	015a      	lsls	r2, r3, #5
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	4413      	add	r3, r2
 8004e86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e8a:	691b      	ldr	r3, [r3, #16]
 8004e8c:	693a      	ldr	r2, [r7, #16]
 8004e8e:	0151      	lsls	r1, r2, #5
 8004e90:	697a      	ldr	r2, [r7, #20]
 8004e92:	440a      	add	r2, r1
 8004e94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e98:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e9c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	015a      	lsls	r2, r3, #5
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	4413      	add	r3, r2
 8004ea6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eaa:	691a      	ldr	r2, [r3, #16]
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	69db      	ldr	r3, [r3, #28]
 8004eb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004eb4:	6939      	ldr	r1, [r7, #16]
 8004eb6:	0148      	lsls	r0, r1, #5
 8004eb8:	6979      	ldr	r1, [r7, #20]
 8004eba:	4401      	add	r1, r0
 8004ebc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004ec4:	79fb      	ldrb	r3, [r7, #7]
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d10d      	bne.n	8004ee6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d009      	beq.n	8004ee6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	6919      	ldr	r1, [r3, #16]
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	015a      	lsls	r2, r3, #5
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	4413      	add	r3, r2
 8004ede:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ee2:	460a      	mov	r2, r1
 8004ee4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	015a      	lsls	r2, r3, #5
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	4413      	add	r3, r2
 8004eee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	693a      	ldr	r2, [r7, #16]
 8004ef6:	0151      	lsls	r1, r2, #5
 8004ef8:	697a      	ldr	r2, [r7, #20]
 8004efa:	440a      	add	r2, r1
 8004efc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f00:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f04:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004f06:	2300      	movs	r3, #0
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	371c      	adds	r7, #28
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b087      	sub	sp, #28
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004f22:	2300      	movs	r3, #0
 8004f24:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	785b      	ldrb	r3, [r3, #1]
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d14a      	bne.n	8004fc8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	015a      	lsls	r2, r3, #5
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	4413      	add	r3, r2
 8004f3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f4a:	f040 8086 	bne.w	800505a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	015a      	lsls	r2, r3, #5
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	4413      	add	r3, r2
 8004f58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	683a      	ldr	r2, [r7, #0]
 8004f60:	7812      	ldrb	r2, [r2, #0]
 8004f62:	0151      	lsls	r1, r2, #5
 8004f64:	693a      	ldr	r2, [r7, #16]
 8004f66:	440a      	add	r2, r1
 8004f68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f6c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004f70:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	015a      	lsls	r2, r3, #5
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	4413      	add	r3, r2
 8004f7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	683a      	ldr	r2, [r7, #0]
 8004f84:	7812      	ldrb	r2, [r2, #0]
 8004f86:	0151      	lsls	r1, r2, #5
 8004f88:	693a      	ldr	r2, [r7, #16]
 8004f8a:	440a      	add	r2, r1
 8004f8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f90:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f94:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	3301      	adds	r3, #1
 8004f9a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f242 7210 	movw	r2, #10000	; 0x2710
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d902      	bls.n	8004fac <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	75fb      	strb	r3, [r7, #23]
          break;
 8004faa:	e056      	b.n	800505a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	015a      	lsls	r2, r3, #5
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	4413      	add	r3, r2
 8004fb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004fc0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004fc4:	d0e7      	beq.n	8004f96 <USB_EPStopXfer+0x82>
 8004fc6:	e048      	b.n	800505a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	015a      	lsls	r2, r3, #5
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	4413      	add	r3, r2
 8004fd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004fdc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004fe0:	d13b      	bne.n	800505a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	015a      	lsls	r2, r3, #5
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	4413      	add	r3, r2
 8004fec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	683a      	ldr	r2, [r7, #0]
 8004ff4:	7812      	ldrb	r2, [r2, #0]
 8004ff6:	0151      	lsls	r1, r2, #5
 8004ff8:	693a      	ldr	r2, [r7, #16]
 8004ffa:	440a      	add	r2, r1
 8004ffc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005000:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005004:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	015a      	lsls	r2, r3, #5
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	4413      	add	r3, r2
 8005010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	683a      	ldr	r2, [r7, #0]
 8005018:	7812      	ldrb	r2, [r2, #0]
 800501a:	0151      	lsls	r1, r2, #5
 800501c:	693a      	ldr	r2, [r7, #16]
 800501e:	440a      	add	r2, r1
 8005020:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005024:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005028:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	3301      	adds	r3, #1
 800502e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f242 7210 	movw	r2, #10000	; 0x2710
 8005036:	4293      	cmp	r3, r2
 8005038:	d902      	bls.n	8005040 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	75fb      	strb	r3, [r7, #23]
          break;
 800503e:	e00c      	b.n	800505a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	015a      	lsls	r2, r3, #5
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	4413      	add	r3, r2
 800504a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005054:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005058:	d0e7      	beq.n	800502a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800505a:	7dfb      	ldrb	r3, [r7, #23]
}
 800505c:	4618      	mov	r0, r3
 800505e:	371c      	adds	r7, #28
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005068:	b480      	push	{r7}
 800506a:	b089      	sub	sp, #36	; 0x24
 800506c:	af00      	add	r7, sp, #0
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	60b9      	str	r1, [r7, #8]
 8005072:	4611      	mov	r1, r2
 8005074:	461a      	mov	r2, r3
 8005076:	460b      	mov	r3, r1
 8005078:	71fb      	strb	r3, [r7, #7]
 800507a:	4613      	mov	r3, r2
 800507c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005086:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800508a:	2b00      	cmp	r3, #0
 800508c:	d123      	bne.n	80050d6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800508e:	88bb      	ldrh	r3, [r7, #4]
 8005090:	3303      	adds	r3, #3
 8005092:	089b      	lsrs	r3, r3, #2
 8005094:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005096:	2300      	movs	r3, #0
 8005098:	61bb      	str	r3, [r7, #24]
 800509a:	e018      	b.n	80050ce <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800509c:	79fb      	ldrb	r3, [r7, #7]
 800509e:	031a      	lsls	r2, r3, #12
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	4413      	add	r3, r2
 80050a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050a8:	461a      	mov	r2, r3
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	6013      	str	r3, [r2, #0]
      pSrc++;
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	3301      	adds	r3, #1
 80050b4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	3301      	adds	r3, #1
 80050ba:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	3301      	adds	r3, #1
 80050c0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	3301      	adds	r3, #1
 80050c6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80050c8:	69bb      	ldr	r3, [r7, #24]
 80050ca:	3301      	adds	r3, #1
 80050cc:	61bb      	str	r3, [r7, #24]
 80050ce:	69ba      	ldr	r2, [r7, #24]
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d3e2      	bcc.n	800509c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80050d6:	2300      	movs	r3, #0
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3724      	adds	r7, #36	; 0x24
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr

080050e4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b08b      	sub	sp, #44	; 0x2c
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	60b9      	str	r1, [r7, #8]
 80050ee:	4613      	mov	r3, r2
 80050f0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80050fa:	88fb      	ldrh	r3, [r7, #6]
 80050fc:	089b      	lsrs	r3, r3, #2
 80050fe:	b29b      	uxth	r3, r3
 8005100:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005102:	88fb      	ldrh	r3, [r7, #6]
 8005104:	f003 0303 	and.w	r3, r3, #3
 8005108:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800510a:	2300      	movs	r3, #0
 800510c:	623b      	str	r3, [r7, #32]
 800510e:	e014      	b.n	800513a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511a:	601a      	str	r2, [r3, #0]
    pDest++;
 800511c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511e:	3301      	adds	r3, #1
 8005120:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005124:	3301      	adds	r3, #1
 8005126:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512a:	3301      	adds	r3, #1
 800512c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800512e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005130:	3301      	adds	r3, #1
 8005132:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005134:	6a3b      	ldr	r3, [r7, #32]
 8005136:	3301      	adds	r3, #1
 8005138:	623b      	str	r3, [r7, #32]
 800513a:	6a3a      	ldr	r2, [r7, #32]
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	429a      	cmp	r2, r3
 8005140:	d3e6      	bcc.n	8005110 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005142:	8bfb      	ldrh	r3, [r7, #30]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d01e      	beq.n	8005186 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005148:	2300      	movs	r3, #0
 800514a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005152:	461a      	mov	r2, r3
 8005154:	f107 0310 	add.w	r3, r7, #16
 8005158:	6812      	ldr	r2, [r2, #0]
 800515a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800515c:	693a      	ldr	r2, [r7, #16]
 800515e:	6a3b      	ldr	r3, [r7, #32]
 8005160:	b2db      	uxtb	r3, r3
 8005162:	00db      	lsls	r3, r3, #3
 8005164:	fa22 f303 	lsr.w	r3, r2, r3
 8005168:	b2da      	uxtb	r2, r3
 800516a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516c:	701a      	strb	r2, [r3, #0]
      i++;
 800516e:	6a3b      	ldr	r3, [r7, #32]
 8005170:	3301      	adds	r3, #1
 8005172:	623b      	str	r3, [r7, #32]
      pDest++;
 8005174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005176:	3301      	adds	r3, #1
 8005178:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800517a:	8bfb      	ldrh	r3, [r7, #30]
 800517c:	3b01      	subs	r3, #1
 800517e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005180:	8bfb      	ldrh	r3, [r7, #30]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d1ea      	bne.n	800515c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005188:	4618      	mov	r0, r3
 800518a:	372c      	adds	r7, #44	; 0x2c
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr

08005194 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005194:	b480      	push	{r7}
 8005196:	b085      	sub	sp, #20
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	785b      	ldrb	r3, [r3, #1]
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d12c      	bne.n	800520a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	015a      	lsls	r2, r3, #5
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	4413      	add	r3, r2
 80051b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	db12      	blt.n	80051e8 <USB_EPSetStall+0x54>
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d00f      	beq.n	80051e8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	015a      	lsls	r2, r3, #5
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	4413      	add	r3, r2
 80051d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	68ba      	ldr	r2, [r7, #8]
 80051d8:	0151      	lsls	r1, r2, #5
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	440a      	add	r2, r1
 80051de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051e2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80051e6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	015a      	lsls	r2, r3, #5
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	4413      	add	r3, r2
 80051f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68ba      	ldr	r2, [r7, #8]
 80051f8:	0151      	lsls	r1, r2, #5
 80051fa:	68fa      	ldr	r2, [r7, #12]
 80051fc:	440a      	add	r2, r1
 80051fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005202:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005206:	6013      	str	r3, [r2, #0]
 8005208:	e02b      	b.n	8005262 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	015a      	lsls	r2, r3, #5
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	4413      	add	r3, r2
 8005212:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2b00      	cmp	r3, #0
 800521a:	db12      	blt.n	8005242 <USB_EPSetStall+0xae>
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d00f      	beq.n	8005242 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	015a      	lsls	r2, r3, #5
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	4413      	add	r3, r2
 800522a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68ba      	ldr	r2, [r7, #8]
 8005232:	0151      	lsls	r1, r2, #5
 8005234:	68fa      	ldr	r2, [r7, #12]
 8005236:	440a      	add	r2, r1
 8005238:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800523c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005240:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	015a      	lsls	r2, r3, #5
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	4413      	add	r3, r2
 800524a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	68ba      	ldr	r2, [r7, #8]
 8005252:	0151      	lsls	r1, r2, #5
 8005254:	68fa      	ldr	r2, [r7, #12]
 8005256:	440a      	add	r2, r1
 8005258:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800525c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005260:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005262:	2300      	movs	r3, #0
}
 8005264:	4618      	mov	r0, r3
 8005266:	3714      	adds	r7, #20
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr

08005270 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005270:	b480      	push	{r7}
 8005272:	b085      	sub	sp, #20
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	785b      	ldrb	r3, [r3, #1]
 8005288:	2b01      	cmp	r3, #1
 800528a:	d128      	bne.n	80052de <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	015a      	lsls	r2, r3, #5
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	4413      	add	r3, r2
 8005294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	68ba      	ldr	r2, [r7, #8]
 800529c:	0151      	lsls	r1, r2, #5
 800529e:	68fa      	ldr	r2, [r7, #12]
 80052a0:	440a      	add	r2, r1
 80052a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80052aa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	791b      	ldrb	r3, [r3, #4]
 80052b0:	2b03      	cmp	r3, #3
 80052b2:	d003      	beq.n	80052bc <USB_EPClearStall+0x4c>
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	791b      	ldrb	r3, [r3, #4]
 80052b8:	2b02      	cmp	r3, #2
 80052ba:	d138      	bne.n	800532e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	015a      	lsls	r2, r3, #5
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	4413      	add	r3, r2
 80052c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68ba      	ldr	r2, [r7, #8]
 80052cc:	0151      	lsls	r1, r2, #5
 80052ce:	68fa      	ldr	r2, [r7, #12]
 80052d0:	440a      	add	r2, r1
 80052d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052da:	6013      	str	r3, [r2, #0]
 80052dc:	e027      	b.n	800532e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	015a      	lsls	r2, r3, #5
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	4413      	add	r3, r2
 80052e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68ba      	ldr	r2, [r7, #8]
 80052ee:	0151      	lsls	r1, r2, #5
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	440a      	add	r2, r1
 80052f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052f8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80052fc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	791b      	ldrb	r3, [r3, #4]
 8005302:	2b03      	cmp	r3, #3
 8005304:	d003      	beq.n	800530e <USB_EPClearStall+0x9e>
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	791b      	ldrb	r3, [r3, #4]
 800530a:	2b02      	cmp	r3, #2
 800530c:	d10f      	bne.n	800532e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	015a      	lsls	r2, r3, #5
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	4413      	add	r3, r2
 8005316:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	68ba      	ldr	r2, [r7, #8]
 800531e:	0151      	lsls	r1, r2, #5
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	440a      	add	r2, r1
 8005324:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005328:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800532c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800532e:	2300      	movs	r3, #0
}
 8005330:	4618      	mov	r0, r3
 8005332:	3714      	adds	r7, #20
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr

0800533c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800533c:	b480      	push	{r7}
 800533e:	b085      	sub	sp, #20
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	460b      	mov	r3, r1
 8005346:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800535a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800535e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	78fb      	ldrb	r3, [r7, #3]
 800536a:	011b      	lsls	r3, r3, #4
 800536c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005370:	68f9      	ldr	r1, [r7, #12]
 8005372:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005376:	4313      	orrs	r3, r2
 8005378:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800537a:	2300      	movs	r3, #0
}
 800537c:	4618      	mov	r0, r3
 800537e:	3714      	adds	r7, #20
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr

08005388 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005388:	b480      	push	{r7}
 800538a:	b085      	sub	sp, #20
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80053a2:	f023 0303 	bic.w	r3, r3, #3
 80053a6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053b6:	f023 0302 	bic.w	r3, r3, #2
 80053ba:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80053bc:	2300      	movs	r3, #0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3714      	adds	r7, #20
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr

080053ca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80053ca:	b480      	push	{r7}
 80053cc:	b085      	sub	sp, #20
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80053e4:	f023 0303 	bic.w	r3, r3, #3
 80053e8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	68fa      	ldr	r2, [r7, #12]
 80053f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053f8:	f043 0302 	orr.w	r3, r3, #2
 80053fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80053fe:	2300      	movs	r3, #0
}
 8005400:	4618      	mov	r0, r3
 8005402:	3714      	adds	r7, #20
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800540c:	b480      	push	{r7}
 800540e:	b085      	sub	sp, #20
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	695b      	ldr	r3, [r3, #20]
 8005418:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	699b      	ldr	r3, [r3, #24]
 800541e:	68fa      	ldr	r2, [r7, #12]
 8005420:	4013      	ands	r3, r2
 8005422:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005424:	68fb      	ldr	r3, [r7, #12]
}
 8005426:	4618      	mov	r0, r3
 8005428:	3714      	adds	r7, #20
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr

08005432 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005432:	b480      	push	{r7}
 8005434:	b085      	sub	sp, #20
 8005436:	af00      	add	r7, sp, #0
 8005438:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005444:	699b      	ldr	r3, [r3, #24]
 8005446:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800544e:	69db      	ldr	r3, [r3, #28]
 8005450:	68ba      	ldr	r2, [r7, #8]
 8005452:	4013      	ands	r3, r2
 8005454:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	0c1b      	lsrs	r3, r3, #16
}
 800545a:	4618      	mov	r0, r3
 800545c:	3714      	adds	r7, #20
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr

08005466 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005466:	b480      	push	{r7}
 8005468:	b085      	sub	sp, #20
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005478:	699b      	ldr	r3, [r3, #24]
 800547a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005482:	69db      	ldr	r3, [r3, #28]
 8005484:	68ba      	ldr	r2, [r7, #8]
 8005486:	4013      	ands	r3, r2
 8005488:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	b29b      	uxth	r3, r3
}
 800548e:	4618      	mov	r0, r3
 8005490:	3714      	adds	r7, #20
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr

0800549a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800549a:	b480      	push	{r7}
 800549c:	b085      	sub	sp, #20
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
 80054a2:	460b      	mov	r3, r1
 80054a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80054aa:	78fb      	ldrb	r3, [r7, #3]
 80054ac:	015a      	lsls	r2, r3, #5
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	4413      	add	r3, r2
 80054b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054c0:	695b      	ldr	r3, [r3, #20]
 80054c2:	68ba      	ldr	r2, [r7, #8]
 80054c4:	4013      	ands	r3, r2
 80054c6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80054c8:	68bb      	ldr	r3, [r7, #8]
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3714      	adds	r7, #20
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr

080054d6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80054d6:	b480      	push	{r7}
 80054d8:	b087      	sub	sp, #28
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
 80054de:	460b      	mov	r3, r1
 80054e0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ec:	691b      	ldr	r3, [r3, #16]
 80054ee:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054f8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80054fa:	78fb      	ldrb	r3, [r7, #3]
 80054fc:	f003 030f 	and.w	r3, r3, #15
 8005500:	68fa      	ldr	r2, [r7, #12]
 8005502:	fa22 f303 	lsr.w	r3, r2, r3
 8005506:	01db      	lsls	r3, r3, #7
 8005508:	b2db      	uxtb	r3, r3
 800550a:	693a      	ldr	r2, [r7, #16]
 800550c:	4313      	orrs	r3, r2
 800550e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005510:	78fb      	ldrb	r3, [r7, #3]
 8005512:	015a      	lsls	r2, r3, #5
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	4413      	add	r3, r2
 8005518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	693a      	ldr	r2, [r7, #16]
 8005520:	4013      	ands	r3, r2
 8005522:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005524:	68bb      	ldr	r3, [r7, #8]
}
 8005526:	4618      	mov	r0, r3
 8005528:	371c      	adds	r7, #28
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr

08005532 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005532:	b480      	push	{r7}
 8005534:	b083      	sub	sp, #12
 8005536:	af00      	add	r7, sp, #0
 8005538:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	695b      	ldr	r3, [r3, #20]
 800553e:	f003 0301 	and.w	r3, r3, #1
}
 8005542:	4618      	mov	r0, r3
 8005544:	370c      	adds	r7, #12
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr

0800554e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800554e:	b480      	push	{r7}
 8005550:	b085      	sub	sp, #20
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68fa      	ldr	r2, [r7, #12]
 8005564:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005568:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800556c:	f023 0307 	bic.w	r3, r3, #7
 8005570:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	68fa      	ldr	r2, [r7, #12]
 800557c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005584:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005586:	2300      	movs	r3, #0
}
 8005588:	4618      	mov	r0, r3
 800558a:	3714      	adds	r7, #20
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr

08005594 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005594:	b480      	push	{r7}
 8005596:	b087      	sub	sp, #28
 8005598:	af00      	add	r7, sp, #0
 800559a:	60f8      	str	r0, [r7, #12]
 800559c:	460b      	mov	r3, r1
 800559e:	607a      	str	r2, [r7, #4]
 80055a0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	333c      	adds	r3, #60	; 0x3c
 80055aa:	3304      	adds	r3, #4
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	4a26      	ldr	r2, [pc, #152]	; (800564c <USB_EP0_OutStart+0xb8>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d90a      	bls.n	80055ce <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055c8:	d101      	bne.n	80055ce <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80055ca:	2300      	movs	r3, #0
 80055cc:	e037      	b.n	800563e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055d4:	461a      	mov	r2, r3
 80055d6:	2300      	movs	r3, #0
 80055d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	697a      	ldr	r2, [r7, #20]
 80055e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80055ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	697a      	ldr	r2, [r7, #20]
 80055f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055fc:	f043 0318 	orr.w	r3, r3, #24
 8005600:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005608:	691b      	ldr	r3, [r3, #16]
 800560a:	697a      	ldr	r2, [r7, #20]
 800560c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005610:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005614:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005616:	7afb      	ldrb	r3, [r7, #11]
 8005618:	2b01      	cmp	r3, #1
 800561a:	d10f      	bne.n	800563c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005622:	461a      	mov	r2, r3
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	697a      	ldr	r2, [r7, #20]
 8005632:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005636:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800563a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800563c:	2300      	movs	r3, #0
}
 800563e:	4618      	mov	r0, r3
 8005640:	371c      	adds	r7, #28
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr
 800564a:	bf00      	nop
 800564c:	4f54300a 	.word	0x4f54300a

08005650 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005650:	b480      	push	{r7}
 8005652:	b085      	sub	sp, #20
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005658:	2300      	movs	r3, #0
 800565a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	3301      	adds	r3, #1
 8005660:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	4a13      	ldr	r2, [pc, #76]	; (80056b4 <USB_CoreReset+0x64>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d901      	bls.n	800566e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800566a:	2303      	movs	r3, #3
 800566c:	e01b      	b.n	80056a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	2b00      	cmp	r3, #0
 8005674:	daf2      	bge.n	800565c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005676:	2300      	movs	r3, #0
 8005678:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	f043 0201 	orr.w	r2, r3, #1
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	3301      	adds	r3, #1
 800568a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	4a09      	ldr	r2, [pc, #36]	; (80056b4 <USB_CoreReset+0x64>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d901      	bls.n	8005698 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005694:	2303      	movs	r3, #3
 8005696:	e006      	b.n	80056a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	f003 0301 	and.w	r3, r3, #1
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d0f0      	beq.n	8005686 <USB_CoreReset+0x36>

  return HAL_OK;
 80056a4:	2300      	movs	r3, #0
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3714      	adds	r7, #20
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr
 80056b2:	bf00      	nop
 80056b4:	00030d40 	.word	0x00030d40

080056b8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	460b      	mov	r3, r1
 80056c2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80056c4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80056c8:	f005 fa56 	bl	800ab78 <USBD_static_malloc>
 80056cc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d109      	bne.n	80056e8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	32b0      	adds	r2, #176	; 0xb0
 80056de:	2100      	movs	r1, #0
 80056e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80056e4:	2302      	movs	r3, #2
 80056e6:	e0d4      	b.n	8005892 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80056e8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80056ec:	2100      	movs	r1, #0
 80056ee:	68f8      	ldr	r0, [r7, #12]
 80056f0:	f005 fb84 	bl	800adfc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	32b0      	adds	r2, #176	; 0xb0
 80056fe:	68f9      	ldr	r1, [r7, #12]
 8005700:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	32b0      	adds	r2, #176	; 0xb0
 800570e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	7c1b      	ldrb	r3, [r3, #16]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d138      	bne.n	8005792 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005720:	4b5e      	ldr	r3, [pc, #376]	; (800589c <USBD_CDC_Init+0x1e4>)
 8005722:	7819      	ldrb	r1, [r3, #0]
 8005724:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005728:	2202      	movs	r2, #2
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f005 f901 	bl	800a932 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005730:	4b5a      	ldr	r3, [pc, #360]	; (800589c <USBD_CDC_Init+0x1e4>)
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	f003 020f 	and.w	r2, r3, #15
 8005738:	6879      	ldr	r1, [r7, #4]
 800573a:	4613      	mov	r3, r2
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	4413      	add	r3, r2
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	440b      	add	r3, r1
 8005744:	3324      	adds	r3, #36	; 0x24
 8005746:	2201      	movs	r2, #1
 8005748:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800574a:	4b55      	ldr	r3, [pc, #340]	; (80058a0 <USBD_CDC_Init+0x1e8>)
 800574c:	7819      	ldrb	r1, [r3, #0]
 800574e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005752:	2202      	movs	r2, #2
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f005 f8ec 	bl	800a932 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800575a:	4b51      	ldr	r3, [pc, #324]	; (80058a0 <USBD_CDC_Init+0x1e8>)
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	f003 020f 	and.w	r2, r3, #15
 8005762:	6879      	ldr	r1, [r7, #4]
 8005764:	4613      	mov	r3, r2
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	4413      	add	r3, r2
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	440b      	add	r3, r1
 800576e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005772:	2201      	movs	r2, #1
 8005774:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005776:	4b4b      	ldr	r3, [pc, #300]	; (80058a4 <USBD_CDC_Init+0x1ec>)
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	f003 020f 	and.w	r2, r3, #15
 800577e:	6879      	ldr	r1, [r7, #4]
 8005780:	4613      	mov	r3, r2
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	4413      	add	r3, r2
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	440b      	add	r3, r1
 800578a:	3326      	adds	r3, #38	; 0x26
 800578c:	2210      	movs	r2, #16
 800578e:	801a      	strh	r2, [r3, #0]
 8005790:	e035      	b.n	80057fe <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005792:	4b42      	ldr	r3, [pc, #264]	; (800589c <USBD_CDC_Init+0x1e4>)
 8005794:	7819      	ldrb	r1, [r3, #0]
 8005796:	2340      	movs	r3, #64	; 0x40
 8005798:	2202      	movs	r2, #2
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f005 f8c9 	bl	800a932 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80057a0:	4b3e      	ldr	r3, [pc, #248]	; (800589c <USBD_CDC_Init+0x1e4>)
 80057a2:	781b      	ldrb	r3, [r3, #0]
 80057a4:	f003 020f 	and.w	r2, r3, #15
 80057a8:	6879      	ldr	r1, [r7, #4]
 80057aa:	4613      	mov	r3, r2
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	4413      	add	r3, r2
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	440b      	add	r3, r1
 80057b4:	3324      	adds	r3, #36	; 0x24
 80057b6:	2201      	movs	r2, #1
 80057b8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80057ba:	4b39      	ldr	r3, [pc, #228]	; (80058a0 <USBD_CDC_Init+0x1e8>)
 80057bc:	7819      	ldrb	r1, [r3, #0]
 80057be:	2340      	movs	r3, #64	; 0x40
 80057c0:	2202      	movs	r2, #2
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f005 f8b5 	bl	800a932 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80057c8:	4b35      	ldr	r3, [pc, #212]	; (80058a0 <USBD_CDC_Init+0x1e8>)
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	f003 020f 	and.w	r2, r3, #15
 80057d0:	6879      	ldr	r1, [r7, #4]
 80057d2:	4613      	mov	r3, r2
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	4413      	add	r3, r2
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	440b      	add	r3, r1
 80057dc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80057e0:	2201      	movs	r2, #1
 80057e2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80057e4:	4b2f      	ldr	r3, [pc, #188]	; (80058a4 <USBD_CDC_Init+0x1ec>)
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	f003 020f 	and.w	r2, r3, #15
 80057ec:	6879      	ldr	r1, [r7, #4]
 80057ee:	4613      	mov	r3, r2
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	4413      	add	r3, r2
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	440b      	add	r3, r1
 80057f8:	3326      	adds	r3, #38	; 0x26
 80057fa:	2210      	movs	r2, #16
 80057fc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80057fe:	4b29      	ldr	r3, [pc, #164]	; (80058a4 <USBD_CDC_Init+0x1ec>)
 8005800:	7819      	ldrb	r1, [r3, #0]
 8005802:	2308      	movs	r3, #8
 8005804:	2203      	movs	r2, #3
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f005 f893 	bl	800a932 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800580c:	4b25      	ldr	r3, [pc, #148]	; (80058a4 <USBD_CDC_Init+0x1ec>)
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	f003 020f 	and.w	r2, r3, #15
 8005814:	6879      	ldr	r1, [r7, #4]
 8005816:	4613      	mov	r3, r2
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	4413      	add	r3, r2
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	440b      	add	r3, r1
 8005820:	3324      	adds	r3, #36	; 0x24
 8005822:	2201      	movs	r2, #1
 8005824:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2200      	movs	r2, #0
 800582a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	33b0      	adds	r3, #176	; 0xb0
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	4413      	add	r3, r2
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2200      	movs	r2, #0
 8005846:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2200      	movs	r2, #0
 800584e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005858:	2b00      	cmp	r3, #0
 800585a:	d101      	bne.n	8005860 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800585c:	2302      	movs	r3, #2
 800585e:	e018      	b.n	8005892 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	7c1b      	ldrb	r3, [r3, #16]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d10a      	bne.n	800587e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005868:	4b0d      	ldr	r3, [pc, #52]	; (80058a0 <USBD_CDC_Init+0x1e8>)
 800586a:	7819      	ldrb	r1, [r3, #0]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005872:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f005 f94a 	bl	800ab10 <USBD_LL_PrepareReceive>
 800587c:	e008      	b.n	8005890 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800587e:	4b08      	ldr	r3, [pc, #32]	; (80058a0 <USBD_CDC_Init+0x1e8>)
 8005880:	7819      	ldrb	r1, [r3, #0]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005888:	2340      	movs	r3, #64	; 0x40
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f005 f940 	bl	800ab10 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005890:	2300      	movs	r3, #0
}
 8005892:	4618      	mov	r0, r3
 8005894:	3710      	adds	r7, #16
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop
 800589c:	20000093 	.word	0x20000093
 80058a0:	20000094 	.word	0x20000094
 80058a4:	20000095 	.word	0x20000095

080058a8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b082      	sub	sp, #8
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	460b      	mov	r3, r1
 80058b2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80058b4:	4b3a      	ldr	r3, [pc, #232]	; (80059a0 <USBD_CDC_DeInit+0xf8>)
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	4619      	mov	r1, r3
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f005 f85f 	bl	800a97e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80058c0:	4b37      	ldr	r3, [pc, #220]	; (80059a0 <USBD_CDC_DeInit+0xf8>)
 80058c2:	781b      	ldrb	r3, [r3, #0]
 80058c4:	f003 020f 	and.w	r2, r3, #15
 80058c8:	6879      	ldr	r1, [r7, #4]
 80058ca:	4613      	mov	r3, r2
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	4413      	add	r3, r2
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	440b      	add	r3, r1
 80058d4:	3324      	adds	r3, #36	; 0x24
 80058d6:	2200      	movs	r2, #0
 80058d8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80058da:	4b32      	ldr	r3, [pc, #200]	; (80059a4 <USBD_CDC_DeInit+0xfc>)
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	4619      	mov	r1, r3
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f005 f84c 	bl	800a97e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80058e6:	4b2f      	ldr	r3, [pc, #188]	; (80059a4 <USBD_CDC_DeInit+0xfc>)
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	f003 020f 	and.w	r2, r3, #15
 80058ee:	6879      	ldr	r1, [r7, #4]
 80058f0:	4613      	mov	r3, r2
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	4413      	add	r3, r2
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	440b      	add	r3, r1
 80058fa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80058fe:	2200      	movs	r2, #0
 8005900:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005902:	4b29      	ldr	r3, [pc, #164]	; (80059a8 <USBD_CDC_DeInit+0x100>)
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	4619      	mov	r1, r3
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f005 f838 	bl	800a97e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800590e:	4b26      	ldr	r3, [pc, #152]	; (80059a8 <USBD_CDC_DeInit+0x100>)
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	f003 020f 	and.w	r2, r3, #15
 8005916:	6879      	ldr	r1, [r7, #4]
 8005918:	4613      	mov	r3, r2
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	4413      	add	r3, r2
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	440b      	add	r3, r1
 8005922:	3324      	adds	r3, #36	; 0x24
 8005924:	2200      	movs	r2, #0
 8005926:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005928:	4b1f      	ldr	r3, [pc, #124]	; (80059a8 <USBD_CDC_DeInit+0x100>)
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	f003 020f 	and.w	r2, r3, #15
 8005930:	6879      	ldr	r1, [r7, #4]
 8005932:	4613      	mov	r3, r2
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	4413      	add	r3, r2
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	440b      	add	r3, r1
 800593c:	3326      	adds	r3, #38	; 0x26
 800593e:	2200      	movs	r2, #0
 8005940:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	32b0      	adds	r2, #176	; 0xb0
 800594c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d01f      	beq.n	8005994 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	33b0      	adds	r3, #176	; 0xb0
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	4413      	add	r3, r2
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	32b0      	adds	r2, #176	; 0xb0
 8005972:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005976:	4618      	mov	r0, r3
 8005978:	f005 f90c 	bl	800ab94 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	32b0      	adds	r2, #176	; 0xb0
 8005986:	2100      	movs	r1, #0
 8005988:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	3708      	adds	r7, #8
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
 800599e:	bf00      	nop
 80059a0:	20000093 	.word	0x20000093
 80059a4:	20000094 	.word	0x20000094
 80059a8:	20000095 	.word	0x20000095

080059ac <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b086      	sub	sp, #24
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	32b0      	adds	r2, #176	; 0xb0
 80059c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059c4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80059c6:	2300      	movs	r3, #0
 80059c8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80059ca:	2300      	movs	r3, #0
 80059cc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80059ce:	2300      	movs	r3, #0
 80059d0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d101      	bne.n	80059dc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80059d8:	2303      	movs	r3, #3
 80059da:	e0bf      	b.n	8005b5c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d050      	beq.n	8005a8a <USBD_CDC_Setup+0xde>
 80059e8:	2b20      	cmp	r3, #32
 80059ea:	f040 80af 	bne.w	8005b4c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	88db      	ldrh	r3, [r3, #6]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d03a      	beq.n	8005a6c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	b25b      	sxtb	r3, r3
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	da1b      	bge.n	8005a38 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	33b0      	adds	r3, #176	; 0xb0
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	4413      	add	r3, r2
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	683a      	ldr	r2, [r7, #0]
 8005a14:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005a16:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005a18:	683a      	ldr	r2, [r7, #0]
 8005a1a:	88d2      	ldrh	r2, [r2, #6]
 8005a1c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	88db      	ldrh	r3, [r3, #6]
 8005a22:	2b07      	cmp	r3, #7
 8005a24:	bf28      	it	cs
 8005a26:	2307      	movcs	r3, #7
 8005a28:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	89fa      	ldrh	r2, [r7, #14]
 8005a2e:	4619      	mov	r1, r3
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f001 fd89 	bl	8007548 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005a36:	e090      	b.n	8005b5a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	785a      	ldrb	r2, [r3, #1]
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	88db      	ldrh	r3, [r3, #6]
 8005a46:	2b3f      	cmp	r3, #63	; 0x3f
 8005a48:	d803      	bhi.n	8005a52 <USBD_CDC_Setup+0xa6>
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	88db      	ldrh	r3, [r3, #6]
 8005a4e:	b2da      	uxtb	r2, r3
 8005a50:	e000      	b.n	8005a54 <USBD_CDC_Setup+0xa8>
 8005a52:	2240      	movs	r2, #64	; 0x40
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005a5a:	6939      	ldr	r1, [r7, #16]
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005a62:	461a      	mov	r2, r3
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f001 fd9b 	bl	80075a0 <USBD_CtlPrepareRx>
      break;
 8005a6a:	e076      	b.n	8005b5a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	33b0      	adds	r3, #176	; 0xb0
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	4413      	add	r3, r2
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	683a      	ldr	r2, [r7, #0]
 8005a80:	7850      	ldrb	r0, [r2, #1]
 8005a82:	2200      	movs	r2, #0
 8005a84:	6839      	ldr	r1, [r7, #0]
 8005a86:	4798      	blx	r3
      break;
 8005a88:	e067      	b.n	8005b5a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	785b      	ldrb	r3, [r3, #1]
 8005a8e:	2b0b      	cmp	r3, #11
 8005a90:	d851      	bhi.n	8005b36 <USBD_CDC_Setup+0x18a>
 8005a92:	a201      	add	r2, pc, #4	; (adr r2, 8005a98 <USBD_CDC_Setup+0xec>)
 8005a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a98:	08005ac9 	.word	0x08005ac9
 8005a9c:	08005b45 	.word	0x08005b45
 8005aa0:	08005b37 	.word	0x08005b37
 8005aa4:	08005b37 	.word	0x08005b37
 8005aa8:	08005b37 	.word	0x08005b37
 8005aac:	08005b37 	.word	0x08005b37
 8005ab0:	08005b37 	.word	0x08005b37
 8005ab4:	08005b37 	.word	0x08005b37
 8005ab8:	08005b37 	.word	0x08005b37
 8005abc:	08005b37 	.word	0x08005b37
 8005ac0:	08005af3 	.word	0x08005af3
 8005ac4:	08005b1d 	.word	0x08005b1d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	2b03      	cmp	r3, #3
 8005ad2:	d107      	bne.n	8005ae4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005ad4:	f107 030a 	add.w	r3, r7, #10
 8005ad8:	2202      	movs	r2, #2
 8005ada:	4619      	mov	r1, r3
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f001 fd33 	bl	8007548 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005ae2:	e032      	b.n	8005b4a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005ae4:	6839      	ldr	r1, [r7, #0]
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f001 fcbd 	bl	8007466 <USBD_CtlError>
            ret = USBD_FAIL;
 8005aec:	2303      	movs	r3, #3
 8005aee:	75fb      	strb	r3, [r7, #23]
          break;
 8005af0:	e02b      	b.n	8005b4a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	2b03      	cmp	r3, #3
 8005afc:	d107      	bne.n	8005b0e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005afe:	f107 030d 	add.w	r3, r7, #13
 8005b02:	2201      	movs	r2, #1
 8005b04:	4619      	mov	r1, r3
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f001 fd1e 	bl	8007548 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005b0c:	e01d      	b.n	8005b4a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005b0e:	6839      	ldr	r1, [r7, #0]
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f001 fca8 	bl	8007466 <USBD_CtlError>
            ret = USBD_FAIL;
 8005b16:	2303      	movs	r3, #3
 8005b18:	75fb      	strb	r3, [r7, #23]
          break;
 8005b1a:	e016      	b.n	8005b4a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	2b03      	cmp	r3, #3
 8005b26:	d00f      	beq.n	8005b48 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005b28:	6839      	ldr	r1, [r7, #0]
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f001 fc9b 	bl	8007466 <USBD_CtlError>
            ret = USBD_FAIL;
 8005b30:	2303      	movs	r3, #3
 8005b32:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005b34:	e008      	b.n	8005b48 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005b36:	6839      	ldr	r1, [r7, #0]
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f001 fc94 	bl	8007466 <USBD_CtlError>
          ret = USBD_FAIL;
 8005b3e:	2303      	movs	r3, #3
 8005b40:	75fb      	strb	r3, [r7, #23]
          break;
 8005b42:	e002      	b.n	8005b4a <USBD_CDC_Setup+0x19e>
          break;
 8005b44:	bf00      	nop
 8005b46:	e008      	b.n	8005b5a <USBD_CDC_Setup+0x1ae>
          break;
 8005b48:	bf00      	nop
      }
      break;
 8005b4a:	e006      	b.n	8005b5a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005b4c:	6839      	ldr	r1, [r7, #0]
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f001 fc89 	bl	8007466 <USBD_CtlError>
      ret = USBD_FAIL;
 8005b54:	2303      	movs	r3, #3
 8005b56:	75fb      	strb	r3, [r7, #23]
      break;
 8005b58:	bf00      	nop
  }

  return (uint8_t)ret;
 8005b5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3718      	adds	r7, #24
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b084      	sub	sp, #16
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	460b      	mov	r3, r1
 8005b6e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005b76:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	32b0      	adds	r2, #176	; 0xb0
 8005b82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d101      	bne.n	8005b8e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005b8a:	2303      	movs	r3, #3
 8005b8c:	e065      	b.n	8005c5a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	32b0      	adds	r2, #176	; 0xb0
 8005b98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b9c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005b9e:	78fb      	ldrb	r3, [r7, #3]
 8005ba0:	f003 020f 	and.w	r2, r3, #15
 8005ba4:	6879      	ldr	r1, [r7, #4]
 8005ba6:	4613      	mov	r3, r2
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	4413      	add	r3, r2
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	440b      	add	r3, r1
 8005bb0:	3318      	adds	r3, #24
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d02f      	beq.n	8005c18 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005bb8:	78fb      	ldrb	r3, [r7, #3]
 8005bba:	f003 020f 	and.w	r2, r3, #15
 8005bbe:	6879      	ldr	r1, [r7, #4]
 8005bc0:	4613      	mov	r3, r2
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	4413      	add	r3, r2
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	440b      	add	r3, r1
 8005bca:	3318      	adds	r3, #24
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	78fb      	ldrb	r3, [r7, #3]
 8005bd0:	f003 010f 	and.w	r1, r3, #15
 8005bd4:	68f8      	ldr	r0, [r7, #12]
 8005bd6:	460b      	mov	r3, r1
 8005bd8:	00db      	lsls	r3, r3, #3
 8005bda:	440b      	add	r3, r1
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	4403      	add	r3, r0
 8005be0:	3348      	adds	r3, #72	; 0x48
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	fbb2 f1f3 	udiv	r1, r2, r3
 8005be8:	fb01 f303 	mul.w	r3, r1, r3
 8005bec:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d112      	bne.n	8005c18 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005bf2:	78fb      	ldrb	r3, [r7, #3]
 8005bf4:	f003 020f 	and.w	r2, r3, #15
 8005bf8:	6879      	ldr	r1, [r7, #4]
 8005bfa:	4613      	mov	r3, r2
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	4413      	add	r3, r2
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	440b      	add	r3, r1
 8005c04:	3318      	adds	r3, #24
 8005c06:	2200      	movs	r2, #0
 8005c08:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005c0a:	78f9      	ldrb	r1, [r7, #3]
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	2200      	movs	r2, #0
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f004 ff5c 	bl	800aace <USBD_LL_Transmit>
 8005c16:	e01f      	b.n	8005c58 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	33b0      	adds	r3, #176	; 0xb0
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	4413      	add	r3, r2
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d010      	beq.n	8005c58 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	33b0      	adds	r3, #176	; 0xb0
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	4413      	add	r3, r2
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	691b      	ldr	r3, [r3, #16]
 8005c48:	68ba      	ldr	r2, [r7, #8]
 8005c4a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005c4e:	68ba      	ldr	r2, [r7, #8]
 8005c50:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005c54:	78fa      	ldrb	r2, [r7, #3]
 8005c56:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005c58:	2300      	movs	r3, #0
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3710      	adds	r7, #16
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}

08005c62 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005c62:	b580      	push	{r7, lr}
 8005c64:	b084      	sub	sp, #16
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	6078      	str	r0, [r7, #4]
 8005c6a:	460b      	mov	r3, r1
 8005c6c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	32b0      	adds	r2, #176	; 0xb0
 8005c78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c7c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	32b0      	adds	r2, #176	; 0xb0
 8005c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d101      	bne.n	8005c94 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005c90:	2303      	movs	r3, #3
 8005c92:	e01a      	b.n	8005cca <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005c94:	78fb      	ldrb	r3, [r7, #3]
 8005c96:	4619      	mov	r1, r3
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f004 ff5a 	bl	800ab52 <USBD_LL_GetRxDataSize>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	33b0      	adds	r3, #176	; 0xb0
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	4413      	add	r3, r2
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	68fa      	ldr	r2, [r7, #12]
 8005cba:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005cbe:	68fa      	ldr	r2, [r7, #12]
 8005cc0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005cc4:	4611      	mov	r1, r2
 8005cc6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3710      	adds	r7, #16
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}

08005cd2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005cd2:	b580      	push	{r7, lr}
 8005cd4:	b084      	sub	sp, #16
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	32b0      	adds	r2, #176	; 0xb0
 8005ce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ce8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d101      	bne.n	8005cf4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005cf0:	2303      	movs	r3, #3
 8005cf2:	e025      	b.n	8005d40 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	33b0      	adds	r3, #176	; 0xb0
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	4413      	add	r3, r2
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d01a      	beq.n	8005d3e <USBD_CDC_EP0_RxReady+0x6c>
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005d0e:	2bff      	cmp	r3, #255	; 0xff
 8005d10:	d015      	beq.n	8005d3e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	33b0      	adds	r3, #176	; 0xb0
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	4413      	add	r3, r2
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	68fa      	ldr	r2, [r7, #12]
 8005d26:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8005d2a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005d2c:	68fa      	ldr	r2, [r7, #12]
 8005d2e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005d32:	b292      	uxth	r2, r2
 8005d34:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	22ff      	movs	r2, #255	; 0xff
 8005d3a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005d3e:	2300      	movs	r3, #0
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3710      	adds	r7, #16
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b086      	sub	sp, #24
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005d50:	2182      	movs	r1, #130	; 0x82
 8005d52:	4818      	ldr	r0, [pc, #96]	; (8005db4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005d54:	f000 fd4f 	bl	80067f6 <USBD_GetEpDesc>
 8005d58:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005d5a:	2101      	movs	r1, #1
 8005d5c:	4815      	ldr	r0, [pc, #84]	; (8005db4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005d5e:	f000 fd4a 	bl	80067f6 <USBD_GetEpDesc>
 8005d62:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005d64:	2181      	movs	r1, #129	; 0x81
 8005d66:	4813      	ldr	r0, [pc, #76]	; (8005db4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005d68:	f000 fd45 	bl	80067f6 <USBD_GetEpDesc>
 8005d6c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d002      	beq.n	8005d7a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	2210      	movs	r2, #16
 8005d78:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d006      	beq.n	8005d8e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	2200      	movs	r2, #0
 8005d84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d88:	711a      	strb	r2, [r3, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d006      	beq.n	8005da2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2200      	movs	r2, #0
 8005d98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d9c:	711a      	strb	r2, [r3, #4]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2243      	movs	r2, #67	; 0x43
 8005da6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005da8:	4b02      	ldr	r3, [pc, #8]	; (8005db4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3718      	adds	r7, #24
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
 8005db2:	bf00      	nop
 8005db4:	20000050 	.word	0x20000050

08005db8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b086      	sub	sp, #24
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005dc0:	2182      	movs	r1, #130	; 0x82
 8005dc2:	4818      	ldr	r0, [pc, #96]	; (8005e24 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005dc4:	f000 fd17 	bl	80067f6 <USBD_GetEpDesc>
 8005dc8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005dca:	2101      	movs	r1, #1
 8005dcc:	4815      	ldr	r0, [pc, #84]	; (8005e24 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005dce:	f000 fd12 	bl	80067f6 <USBD_GetEpDesc>
 8005dd2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005dd4:	2181      	movs	r1, #129	; 0x81
 8005dd6:	4813      	ldr	r0, [pc, #76]	; (8005e24 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005dd8:	f000 fd0d 	bl	80067f6 <USBD_GetEpDesc>
 8005ddc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d002      	beq.n	8005dea <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	2210      	movs	r2, #16
 8005de8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d006      	beq.n	8005dfe <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	2200      	movs	r2, #0
 8005df4:	711a      	strb	r2, [r3, #4]
 8005df6:	2200      	movs	r2, #0
 8005df8:	f042 0202 	orr.w	r2, r2, #2
 8005dfc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d006      	beq.n	8005e12 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2200      	movs	r2, #0
 8005e08:	711a      	strb	r2, [r3, #4]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	f042 0202 	orr.w	r2, r2, #2
 8005e10:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2243      	movs	r2, #67	; 0x43
 8005e16:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005e18:	4b02      	ldr	r3, [pc, #8]	; (8005e24 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3718      	adds	r7, #24
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	20000050 	.word	0x20000050

08005e28 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b086      	sub	sp, #24
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005e30:	2182      	movs	r1, #130	; 0x82
 8005e32:	4818      	ldr	r0, [pc, #96]	; (8005e94 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005e34:	f000 fcdf 	bl	80067f6 <USBD_GetEpDesc>
 8005e38:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005e3a:	2101      	movs	r1, #1
 8005e3c:	4815      	ldr	r0, [pc, #84]	; (8005e94 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005e3e:	f000 fcda 	bl	80067f6 <USBD_GetEpDesc>
 8005e42:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005e44:	2181      	movs	r1, #129	; 0x81
 8005e46:	4813      	ldr	r0, [pc, #76]	; (8005e94 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005e48:	f000 fcd5 	bl	80067f6 <USBD_GetEpDesc>
 8005e4c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d002      	beq.n	8005e5a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	2210      	movs	r2, #16
 8005e58:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d006      	beq.n	8005e6e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	2200      	movs	r2, #0
 8005e64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e68:	711a      	strb	r2, [r3, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d006      	beq.n	8005e82 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2200      	movs	r2, #0
 8005e78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e7c:	711a      	strb	r2, [r3, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2243      	movs	r2, #67	; 0x43
 8005e86:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005e88:	4b02      	ldr	r3, [pc, #8]	; (8005e94 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3718      	adds	r7, #24
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	20000050 	.word	0x20000050

08005e98 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b083      	sub	sp, #12
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	220a      	movs	r2, #10
 8005ea4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005ea6:	4b03      	ldr	r3, [pc, #12]	; (8005eb4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	370c      	adds	r7, #12
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr
 8005eb4:	2000000c 	.word	0x2000000c

08005eb8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b083      	sub	sp, #12
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d101      	bne.n	8005ecc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005ec8:	2303      	movs	r3, #3
 8005eca:	e009      	b.n	8005ee0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	33b0      	adds	r3, #176	; 0xb0
 8005ed6:	009b      	lsls	r3, r3, #2
 8005ed8:	4413      	add	r3, r2
 8005eda:	683a      	ldr	r2, [r7, #0]
 8005edc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005ede:	2300      	movs	r3, #0
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b087      	sub	sp, #28
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	60f8      	str	r0, [r7, #12]
 8005ef4:	60b9      	str	r1, [r7, #8]
 8005ef6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	32b0      	adds	r2, #176	; 0xb0
 8005f02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f06:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d101      	bne.n	8005f12 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005f0e:	2303      	movs	r3, #3
 8005f10:	e008      	b.n	8005f24 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	68ba      	ldr	r2, [r7, #8]
 8005f16:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	687a      	ldr	r2, [r7, #4]
 8005f1e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005f22:	2300      	movs	r3, #0
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	371c      	adds	r7, #28
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b085      	sub	sp, #20
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	32b0      	adds	r2, #176	; 0xb0
 8005f44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f48:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d101      	bne.n	8005f54 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005f50:	2303      	movs	r3, #3
 8005f52:	e004      	b.n	8005f5e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	683a      	ldr	r2, [r7, #0]
 8005f58:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005f5c:	2300      	movs	r3, #0
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3714      	adds	r7, #20
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr
	...

08005f6c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	32b0      	adds	r2, #176	; 0xb0
 8005f7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f82:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005f84:	2301      	movs	r3, #1
 8005f86:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	32b0      	adds	r2, #176	; 0xb0
 8005f92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d101      	bne.n	8005f9e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	e025      	b.n	8005fea <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d11f      	bne.n	8005fe8 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005fb0:	4b10      	ldr	r3, [pc, #64]	; (8005ff4 <USBD_CDC_TransmitPacket+0x88>)
 8005fb2:	781b      	ldrb	r3, [r3, #0]
 8005fb4:	f003 020f 	and.w	r2, r3, #15
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	4613      	mov	r3, r2
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	4413      	add	r3, r2
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	4403      	add	r3, r0
 8005fca:	3318      	adds	r3, #24
 8005fcc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005fce:	4b09      	ldr	r3, [pc, #36]	; (8005ff4 <USBD_CDC_TransmitPacket+0x88>)
 8005fd0:	7819      	ldrb	r1, [r3, #0]
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f004 fd75 	bl	800aace <USBD_LL_Transmit>

    ret = USBD_OK;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3710      	adds	r7, #16
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	bf00      	nop
 8005ff4:	20000093 	.word	0x20000093

08005ff8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	32b0      	adds	r2, #176	; 0xb0
 800600a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800600e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	32b0      	adds	r2, #176	; 0xb0
 800601a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d101      	bne.n	8006026 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006022:	2303      	movs	r3, #3
 8006024:	e018      	b.n	8006058 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	7c1b      	ldrb	r3, [r3, #16]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d10a      	bne.n	8006044 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800602e:	4b0c      	ldr	r3, [pc, #48]	; (8006060 <USBD_CDC_ReceivePacket+0x68>)
 8006030:	7819      	ldrb	r1, [r3, #0]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006038:	f44f 7300 	mov.w	r3, #512	; 0x200
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f004 fd67 	bl	800ab10 <USBD_LL_PrepareReceive>
 8006042:	e008      	b.n	8006056 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006044:	4b06      	ldr	r3, [pc, #24]	; (8006060 <USBD_CDC_ReceivePacket+0x68>)
 8006046:	7819      	ldrb	r1, [r3, #0]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800604e:	2340      	movs	r3, #64	; 0x40
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f004 fd5d 	bl	800ab10 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006056:	2300      	movs	r3, #0
}
 8006058:	4618      	mov	r0, r3
 800605a:	3710      	adds	r7, #16
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}
 8006060:	20000094 	.word	0x20000094

08006064 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b086      	sub	sp, #24
 8006068:	af00      	add	r7, sp, #0
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	60b9      	str	r1, [r7, #8]
 800606e:	4613      	mov	r3, r2
 8006070:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d101      	bne.n	800607c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006078:	2303      	movs	r3, #3
 800607a:	e01f      	b.n	80060bc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2200      	movs	r2, #0
 8006080:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2200      	movs	r2, #0
 8006088:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2200      	movs	r2, #0
 8006090:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d003      	beq.n	80060a2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	68ba      	ldr	r2, [r7, #8]
 800609e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2201      	movs	r2, #1
 80060a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	79fa      	ldrb	r2, [r7, #7]
 80060ae:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80060b0:	68f8      	ldr	r0, [r7, #12]
 80060b2:	f004 fbd7 	bl	800a864 <USBD_LL_Init>
 80060b6:	4603      	mov	r3, r0
 80060b8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80060ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80060bc:	4618      	mov	r0, r3
 80060be:	3718      	adds	r7, #24
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}

080060c4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b084      	sub	sp, #16
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80060ce:	2300      	movs	r3, #0
 80060d0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d101      	bne.n	80060dc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80060d8:	2303      	movs	r3, #3
 80060da:	e025      	b.n	8006128 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	683a      	ldr	r2, [r7, #0]
 80060e0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	32ae      	adds	r2, #174	; 0xae
 80060ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d00f      	beq.n	8006118 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	32ae      	adds	r2, #174	; 0xae
 8006102:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006108:	f107 020e 	add.w	r2, r7, #14
 800610c:	4610      	mov	r0, r2
 800610e:	4798      	blx	r3
 8006110:	4602      	mov	r2, r0
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800611e:	1c5a      	adds	r2, r3, #1
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006126:	2300      	movs	r3, #0
}
 8006128:	4618      	mov	r0, r3
 800612a:	3710      	adds	r7, #16
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}

08006130 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b082      	sub	sp, #8
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f004 fbdf 	bl	800a8fc <USBD_LL_Start>
 800613e:	4603      	mov	r3, r0
}
 8006140:	4618      	mov	r0, r3
 8006142:	3708      	adds	r7, #8
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}

08006148 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006150:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006152:	4618      	mov	r0, r3
 8006154:	370c      	adds	r7, #12
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr

0800615e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800615e:	b580      	push	{r7, lr}
 8006160:	b084      	sub	sp, #16
 8006162:	af00      	add	r7, sp, #0
 8006164:	6078      	str	r0, [r7, #4]
 8006166:	460b      	mov	r3, r1
 8006168:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800616a:	2300      	movs	r3, #0
 800616c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006174:	2b00      	cmp	r3, #0
 8006176:	d009      	beq.n	800618c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	78fa      	ldrb	r2, [r7, #3]
 8006182:	4611      	mov	r1, r2
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	4798      	blx	r3
 8006188:	4603      	mov	r3, r0
 800618a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800618c:	7bfb      	ldrb	r3, [r7, #15]
}
 800618e:	4618      	mov	r0, r3
 8006190:	3710      	adds	r7, #16
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}

08006196 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006196:	b580      	push	{r7, lr}
 8006198:	b084      	sub	sp, #16
 800619a:	af00      	add	r7, sp, #0
 800619c:	6078      	str	r0, [r7, #4]
 800619e:	460b      	mov	r3, r1
 80061a0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80061a2:	2300      	movs	r3, #0
 80061a4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	78fa      	ldrb	r2, [r7, #3]
 80061b0:	4611      	mov	r1, r2
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	4798      	blx	r3
 80061b6:	4603      	mov	r3, r0
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d001      	beq.n	80061c0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80061bc:	2303      	movs	r3, #3
 80061be:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80061c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3710      	adds	r7, #16
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}

080061ca <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80061ca:	b580      	push	{r7, lr}
 80061cc:	b084      	sub	sp, #16
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	6078      	str	r0, [r7, #4]
 80061d2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80061da:	6839      	ldr	r1, [r7, #0]
 80061dc:	4618      	mov	r0, r3
 80061de:	f001 f908 	bl	80073f2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2201      	movs	r2, #1
 80061e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80061f0:	461a      	mov	r2, r3
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80061fe:	f003 031f 	and.w	r3, r3, #31
 8006202:	2b02      	cmp	r3, #2
 8006204:	d01a      	beq.n	800623c <USBD_LL_SetupStage+0x72>
 8006206:	2b02      	cmp	r3, #2
 8006208:	d822      	bhi.n	8006250 <USBD_LL_SetupStage+0x86>
 800620a:	2b00      	cmp	r3, #0
 800620c:	d002      	beq.n	8006214 <USBD_LL_SetupStage+0x4a>
 800620e:	2b01      	cmp	r3, #1
 8006210:	d00a      	beq.n	8006228 <USBD_LL_SetupStage+0x5e>
 8006212:	e01d      	b.n	8006250 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800621a:	4619      	mov	r1, r3
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f000 fb5f 	bl	80068e0 <USBD_StdDevReq>
 8006222:	4603      	mov	r3, r0
 8006224:	73fb      	strb	r3, [r7, #15]
      break;
 8006226:	e020      	b.n	800626a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800622e:	4619      	mov	r1, r3
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f000 fbc7 	bl	80069c4 <USBD_StdItfReq>
 8006236:	4603      	mov	r3, r0
 8006238:	73fb      	strb	r3, [r7, #15]
      break;
 800623a:	e016      	b.n	800626a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006242:	4619      	mov	r1, r3
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f000 fc29 	bl	8006a9c <USBD_StdEPReq>
 800624a:	4603      	mov	r3, r0
 800624c:	73fb      	strb	r3, [r7, #15]
      break;
 800624e:	e00c      	b.n	800626a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006256:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800625a:	b2db      	uxtb	r3, r3
 800625c:	4619      	mov	r1, r3
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f004 fbac 	bl	800a9bc <USBD_LL_StallEP>
 8006264:	4603      	mov	r3, r0
 8006266:	73fb      	strb	r3, [r7, #15]
      break;
 8006268:	bf00      	nop
  }

  return ret;
 800626a:	7bfb      	ldrb	r3, [r7, #15]
}
 800626c:	4618      	mov	r0, r3
 800626e:	3710      	adds	r7, #16
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}

08006274 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b086      	sub	sp, #24
 8006278:	af00      	add	r7, sp, #0
 800627a:	60f8      	str	r0, [r7, #12]
 800627c:	460b      	mov	r3, r1
 800627e:	607a      	str	r2, [r7, #4]
 8006280:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006282:	2300      	movs	r3, #0
 8006284:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006286:	7afb      	ldrb	r3, [r7, #11]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d16e      	bne.n	800636a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006292:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800629a:	2b03      	cmp	r3, #3
 800629c:	f040 8098 	bne.w	80063d0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	689a      	ldr	r2, [r3, #8]
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d913      	bls.n	80062d4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	689a      	ldr	r2, [r3, #8]
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	1ad2      	subs	r2, r2, r3
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	68da      	ldr	r2, [r3, #12]
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	4293      	cmp	r3, r2
 80062c4:	bf28      	it	cs
 80062c6:	4613      	movcs	r3, r2
 80062c8:	461a      	mov	r2, r3
 80062ca:	6879      	ldr	r1, [r7, #4]
 80062cc:	68f8      	ldr	r0, [r7, #12]
 80062ce:	f001 f984 	bl	80075da <USBD_CtlContinueRx>
 80062d2:	e07d      	b.n	80063d0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80062da:	f003 031f 	and.w	r3, r3, #31
 80062de:	2b02      	cmp	r3, #2
 80062e0:	d014      	beq.n	800630c <USBD_LL_DataOutStage+0x98>
 80062e2:	2b02      	cmp	r3, #2
 80062e4:	d81d      	bhi.n	8006322 <USBD_LL_DataOutStage+0xae>
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d002      	beq.n	80062f0 <USBD_LL_DataOutStage+0x7c>
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d003      	beq.n	80062f6 <USBD_LL_DataOutStage+0x82>
 80062ee:	e018      	b.n	8006322 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80062f0:	2300      	movs	r3, #0
 80062f2:	75bb      	strb	r3, [r7, #22]
            break;
 80062f4:	e018      	b.n	8006328 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	4619      	mov	r1, r3
 8006300:	68f8      	ldr	r0, [r7, #12]
 8006302:	f000 fa5e 	bl	80067c2 <USBD_CoreFindIF>
 8006306:	4603      	mov	r3, r0
 8006308:	75bb      	strb	r3, [r7, #22]
            break;
 800630a:	e00d      	b.n	8006328 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006312:	b2db      	uxtb	r3, r3
 8006314:	4619      	mov	r1, r3
 8006316:	68f8      	ldr	r0, [r7, #12]
 8006318:	f000 fa60 	bl	80067dc <USBD_CoreFindEP>
 800631c:	4603      	mov	r3, r0
 800631e:	75bb      	strb	r3, [r7, #22]
            break;
 8006320:	e002      	b.n	8006328 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006322:	2300      	movs	r3, #0
 8006324:	75bb      	strb	r3, [r7, #22]
            break;
 8006326:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006328:	7dbb      	ldrb	r3, [r7, #22]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d119      	bne.n	8006362 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006334:	b2db      	uxtb	r3, r3
 8006336:	2b03      	cmp	r3, #3
 8006338:	d113      	bne.n	8006362 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800633a:	7dba      	ldrb	r2, [r7, #22]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	32ae      	adds	r2, #174	; 0xae
 8006340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006344:	691b      	ldr	r3, [r3, #16]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d00b      	beq.n	8006362 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800634a:	7dba      	ldrb	r2, [r7, #22]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006352:	7dba      	ldrb	r2, [r7, #22]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	32ae      	adds	r2, #174	; 0xae
 8006358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800635c:	691b      	ldr	r3, [r3, #16]
 800635e:	68f8      	ldr	r0, [r7, #12]
 8006360:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006362:	68f8      	ldr	r0, [r7, #12]
 8006364:	f001 f94a 	bl	80075fc <USBD_CtlSendStatus>
 8006368:	e032      	b.n	80063d0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800636a:	7afb      	ldrb	r3, [r7, #11]
 800636c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006370:	b2db      	uxtb	r3, r3
 8006372:	4619      	mov	r1, r3
 8006374:	68f8      	ldr	r0, [r7, #12]
 8006376:	f000 fa31 	bl	80067dc <USBD_CoreFindEP>
 800637a:	4603      	mov	r3, r0
 800637c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800637e:	7dbb      	ldrb	r3, [r7, #22]
 8006380:	2bff      	cmp	r3, #255	; 0xff
 8006382:	d025      	beq.n	80063d0 <USBD_LL_DataOutStage+0x15c>
 8006384:	7dbb      	ldrb	r3, [r7, #22]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d122      	bne.n	80063d0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006390:	b2db      	uxtb	r3, r3
 8006392:	2b03      	cmp	r3, #3
 8006394:	d117      	bne.n	80063c6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006396:	7dba      	ldrb	r2, [r7, #22]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	32ae      	adds	r2, #174	; 0xae
 800639c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063a0:	699b      	ldr	r3, [r3, #24]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d00f      	beq.n	80063c6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80063a6:	7dba      	ldrb	r2, [r7, #22]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80063ae:	7dba      	ldrb	r2, [r7, #22]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	32ae      	adds	r2, #174	; 0xae
 80063b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063b8:	699b      	ldr	r3, [r3, #24]
 80063ba:	7afa      	ldrb	r2, [r7, #11]
 80063bc:	4611      	mov	r1, r2
 80063be:	68f8      	ldr	r0, [r7, #12]
 80063c0:	4798      	blx	r3
 80063c2:	4603      	mov	r3, r0
 80063c4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80063c6:	7dfb      	ldrb	r3, [r7, #23]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d001      	beq.n	80063d0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80063cc:	7dfb      	ldrb	r3, [r7, #23]
 80063ce:	e000      	b.n	80063d2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80063d0:	2300      	movs	r3, #0
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3718      	adds	r7, #24
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}

080063da <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80063da:	b580      	push	{r7, lr}
 80063dc:	b086      	sub	sp, #24
 80063de:	af00      	add	r7, sp, #0
 80063e0:	60f8      	str	r0, [r7, #12]
 80063e2:	460b      	mov	r3, r1
 80063e4:	607a      	str	r2, [r7, #4]
 80063e6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80063e8:	7afb      	ldrb	r3, [r7, #11]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d16f      	bne.n	80064ce <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	3314      	adds	r3, #20
 80063f2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80063fa:	2b02      	cmp	r3, #2
 80063fc:	d15a      	bne.n	80064b4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	689a      	ldr	r2, [r3, #8]
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	68db      	ldr	r3, [r3, #12]
 8006406:	429a      	cmp	r2, r3
 8006408:	d914      	bls.n	8006434 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	689a      	ldr	r2, [r3, #8]
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	68db      	ldr	r3, [r3, #12]
 8006412:	1ad2      	subs	r2, r2, r3
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	461a      	mov	r2, r3
 800641e:	6879      	ldr	r1, [r7, #4]
 8006420:	68f8      	ldr	r0, [r7, #12]
 8006422:	f001 f8ac 	bl	800757e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006426:	2300      	movs	r3, #0
 8006428:	2200      	movs	r2, #0
 800642a:	2100      	movs	r1, #0
 800642c:	68f8      	ldr	r0, [r7, #12]
 800642e:	f004 fb6f 	bl	800ab10 <USBD_LL_PrepareReceive>
 8006432:	e03f      	b.n	80064b4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	68da      	ldr	r2, [r3, #12]
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	429a      	cmp	r2, r3
 800643e:	d11c      	bne.n	800647a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	685a      	ldr	r2, [r3, #4]
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006448:	429a      	cmp	r2, r3
 800644a:	d316      	bcc.n	800647a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	685a      	ldr	r2, [r3, #4]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006456:	429a      	cmp	r2, r3
 8006458:	d20f      	bcs.n	800647a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800645a:	2200      	movs	r2, #0
 800645c:	2100      	movs	r1, #0
 800645e:	68f8      	ldr	r0, [r7, #12]
 8006460:	f001 f88d 	bl	800757e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2200      	movs	r2, #0
 8006468:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800646c:	2300      	movs	r3, #0
 800646e:	2200      	movs	r2, #0
 8006470:	2100      	movs	r1, #0
 8006472:	68f8      	ldr	r0, [r7, #12]
 8006474:	f004 fb4c 	bl	800ab10 <USBD_LL_PrepareReceive>
 8006478:	e01c      	b.n	80064b4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006480:	b2db      	uxtb	r3, r3
 8006482:	2b03      	cmp	r3, #3
 8006484:	d10f      	bne.n	80064a6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d009      	beq.n	80064a6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2200      	movs	r2, #0
 8006496:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064a0:	68db      	ldr	r3, [r3, #12]
 80064a2:	68f8      	ldr	r0, [r7, #12]
 80064a4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80064a6:	2180      	movs	r1, #128	; 0x80
 80064a8:	68f8      	ldr	r0, [r7, #12]
 80064aa:	f004 fa87 	bl	800a9bc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80064ae:	68f8      	ldr	r0, [r7, #12]
 80064b0:	f001 f8b7 	bl	8007622 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d03a      	beq.n	8006534 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80064be:	68f8      	ldr	r0, [r7, #12]
 80064c0:	f7ff fe42 	bl	8006148 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2200      	movs	r2, #0
 80064c8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80064cc:	e032      	b.n	8006534 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80064ce:	7afb      	ldrb	r3, [r7, #11]
 80064d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80064d4:	b2db      	uxtb	r3, r3
 80064d6:	4619      	mov	r1, r3
 80064d8:	68f8      	ldr	r0, [r7, #12]
 80064da:	f000 f97f 	bl	80067dc <USBD_CoreFindEP>
 80064de:	4603      	mov	r3, r0
 80064e0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80064e2:	7dfb      	ldrb	r3, [r7, #23]
 80064e4:	2bff      	cmp	r3, #255	; 0xff
 80064e6:	d025      	beq.n	8006534 <USBD_LL_DataInStage+0x15a>
 80064e8:	7dfb      	ldrb	r3, [r7, #23]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d122      	bne.n	8006534 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	2b03      	cmp	r3, #3
 80064f8:	d11c      	bne.n	8006534 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80064fa:	7dfa      	ldrb	r2, [r7, #23]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	32ae      	adds	r2, #174	; 0xae
 8006500:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006504:	695b      	ldr	r3, [r3, #20]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d014      	beq.n	8006534 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800650a:	7dfa      	ldrb	r2, [r7, #23]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006512:	7dfa      	ldrb	r2, [r7, #23]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	32ae      	adds	r2, #174	; 0xae
 8006518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800651c:	695b      	ldr	r3, [r3, #20]
 800651e:	7afa      	ldrb	r2, [r7, #11]
 8006520:	4611      	mov	r1, r2
 8006522:	68f8      	ldr	r0, [r7, #12]
 8006524:	4798      	blx	r3
 8006526:	4603      	mov	r3, r0
 8006528:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800652a:	7dbb      	ldrb	r3, [r7, #22]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d001      	beq.n	8006534 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006530:	7dbb      	ldrb	r3, [r7, #22]
 8006532:	e000      	b.n	8006536 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006534:	2300      	movs	r3, #0
}
 8006536:	4618      	mov	r0, r3
 8006538:	3718      	adds	r7, #24
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}

0800653e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800653e:	b580      	push	{r7, lr}
 8006540:	b084      	sub	sp, #16
 8006542:	af00      	add	r7, sp, #0
 8006544:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006546:	2300      	movs	r3, #0
 8006548:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2201      	movs	r2, #1
 800654e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2200      	movs	r2, #0
 8006556:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2200      	movs	r2, #0
 800655e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2200      	movs	r2, #0
 8006564:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2200      	movs	r2, #0
 800656c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006576:	2b00      	cmp	r3, #0
 8006578:	d014      	beq.n	80065a4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d00e      	beq.n	80065a4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	6852      	ldr	r2, [r2, #4]
 8006592:	b2d2      	uxtb	r2, r2
 8006594:	4611      	mov	r1, r2
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	4798      	blx	r3
 800659a:	4603      	mov	r3, r0
 800659c:	2b00      	cmp	r3, #0
 800659e:	d001      	beq.n	80065a4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80065a0:	2303      	movs	r3, #3
 80065a2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80065a4:	2340      	movs	r3, #64	; 0x40
 80065a6:	2200      	movs	r2, #0
 80065a8:	2100      	movs	r1, #0
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f004 f9c1 	bl	800a932 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2201      	movs	r2, #1
 80065b4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2240      	movs	r2, #64	; 0x40
 80065bc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80065c0:	2340      	movs	r3, #64	; 0x40
 80065c2:	2200      	movs	r2, #0
 80065c4:	2180      	movs	r1, #128	; 0x80
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f004 f9b3 	bl	800a932 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2201      	movs	r2, #1
 80065d0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2240      	movs	r2, #64	; 0x40
 80065d6:	621a      	str	r2, [r3, #32]

  return ret;
 80065d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3710      	adds	r7, #16
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}

080065e2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80065e2:	b480      	push	{r7}
 80065e4:	b083      	sub	sp, #12
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	6078      	str	r0, [r7, #4]
 80065ea:	460b      	mov	r3, r1
 80065ec:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	78fa      	ldrb	r2, [r7, #3]
 80065f2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80065f4:	2300      	movs	r3, #0
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	370c      	adds	r7, #12
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr

08006602 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006602:	b480      	push	{r7}
 8006604:	b083      	sub	sp, #12
 8006606:	af00      	add	r7, sp, #0
 8006608:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006610:	b2da      	uxtb	r2, r3
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2204      	movs	r2, #4
 800661c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006620:	2300      	movs	r3, #0
}
 8006622:	4618      	mov	r0, r3
 8006624:	370c      	adds	r7, #12
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr

0800662e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800662e:	b480      	push	{r7}
 8006630:	b083      	sub	sp, #12
 8006632:	af00      	add	r7, sp, #0
 8006634:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800663c:	b2db      	uxtb	r3, r3
 800663e:	2b04      	cmp	r3, #4
 8006640:	d106      	bne.n	8006650 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006648:	b2da      	uxtb	r2, r3
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006650:	2300      	movs	r3, #0
}
 8006652:	4618      	mov	r0, r3
 8006654:	370c      	adds	r7, #12
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr

0800665e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800665e:	b580      	push	{r7, lr}
 8006660:	b082      	sub	sp, #8
 8006662:	af00      	add	r7, sp, #0
 8006664:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800666c:	b2db      	uxtb	r3, r3
 800666e:	2b03      	cmp	r3, #3
 8006670:	d110      	bne.n	8006694 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006678:	2b00      	cmp	r3, #0
 800667a:	d00b      	beq.n	8006694 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006682:	69db      	ldr	r3, [r3, #28]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d005      	beq.n	8006694 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800668e:	69db      	ldr	r3, [r3, #28]
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006694:	2300      	movs	r3, #0
}
 8006696:	4618      	mov	r0, r3
 8006698:	3708      	adds	r7, #8
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}

0800669e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800669e:	b580      	push	{r7, lr}
 80066a0:	b082      	sub	sp, #8
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	6078      	str	r0, [r7, #4]
 80066a6:	460b      	mov	r3, r1
 80066a8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	32ae      	adds	r2, #174	; 0xae
 80066b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d101      	bne.n	80066c0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80066bc:	2303      	movs	r3, #3
 80066be:	e01c      	b.n	80066fa <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066c6:	b2db      	uxtb	r3, r3
 80066c8:	2b03      	cmp	r3, #3
 80066ca:	d115      	bne.n	80066f8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	32ae      	adds	r2, #174	; 0xae
 80066d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066da:	6a1b      	ldr	r3, [r3, #32]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d00b      	beq.n	80066f8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	32ae      	adds	r2, #174	; 0xae
 80066ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066ee:	6a1b      	ldr	r3, [r3, #32]
 80066f0:	78fa      	ldrb	r2, [r7, #3]
 80066f2:	4611      	mov	r1, r2
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80066f8:	2300      	movs	r3, #0
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3708      	adds	r7, #8
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}

08006702 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006702:	b580      	push	{r7, lr}
 8006704:	b082      	sub	sp, #8
 8006706:	af00      	add	r7, sp, #0
 8006708:	6078      	str	r0, [r7, #4]
 800670a:	460b      	mov	r3, r1
 800670c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	32ae      	adds	r2, #174	; 0xae
 8006718:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d101      	bne.n	8006724 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006720:	2303      	movs	r3, #3
 8006722:	e01c      	b.n	800675e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800672a:	b2db      	uxtb	r3, r3
 800672c:	2b03      	cmp	r3, #3
 800672e:	d115      	bne.n	800675c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	32ae      	adds	r2, #174	; 0xae
 800673a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800673e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006740:	2b00      	cmp	r3, #0
 8006742:	d00b      	beq.n	800675c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	32ae      	adds	r2, #174	; 0xae
 800674e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006754:	78fa      	ldrb	r2, [r7, #3]
 8006756:	4611      	mov	r1, r2
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800675c:	2300      	movs	r3, #0
}
 800675e:	4618      	mov	r0, r3
 8006760:	3708      	adds	r7, #8
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}

08006766 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006766:	b480      	push	{r7}
 8006768:	b083      	sub	sp, #12
 800676a:	af00      	add	r7, sp, #0
 800676c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800676e:	2300      	movs	r3, #0
}
 8006770:	4618      	mov	r0, r3
 8006772:	370c      	adds	r7, #12
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr

0800677c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b084      	sub	sp, #16
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006784:	2300      	movs	r3, #0
 8006786:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006796:	2b00      	cmp	r3, #0
 8006798:	d00e      	beq.n	80067b8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	6852      	ldr	r2, [r2, #4]
 80067a6:	b2d2      	uxtb	r2, r2
 80067a8:	4611      	mov	r1, r2
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	4798      	blx	r3
 80067ae:	4603      	mov	r3, r0
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d001      	beq.n	80067b8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80067b4:	2303      	movs	r3, #3
 80067b6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80067b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3710      	adds	r7, #16
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}

080067c2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80067c2:	b480      	push	{r7}
 80067c4:	b083      	sub	sp, #12
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
 80067ca:	460b      	mov	r3, r1
 80067cc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80067ce:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	370c      	adds	r7, #12
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr

080067dc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80067dc:	b480      	push	{r7}
 80067de:	b083      	sub	sp, #12
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	460b      	mov	r3, r1
 80067e6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80067e8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	370c      	adds	r7, #12
 80067ee:	46bd      	mov	sp, r7
 80067f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f4:	4770      	bx	lr

080067f6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80067f6:	b580      	push	{r7, lr}
 80067f8:	b086      	sub	sp, #24
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	6078      	str	r0, [r7, #4]
 80067fe:	460b      	mov	r3, r1
 8006800:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800680a:	2300      	movs	r3, #0
 800680c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	885b      	ldrh	r3, [r3, #2]
 8006812:	b29a      	uxth	r2, r3
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	b29b      	uxth	r3, r3
 800681a:	429a      	cmp	r2, r3
 800681c:	d920      	bls.n	8006860 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	781b      	ldrb	r3, [r3, #0]
 8006822:	b29b      	uxth	r3, r3
 8006824:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006826:	e013      	b.n	8006850 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006828:	f107 030a 	add.w	r3, r7, #10
 800682c:	4619      	mov	r1, r3
 800682e:	6978      	ldr	r0, [r7, #20]
 8006830:	f000 f81b 	bl	800686a <USBD_GetNextDesc>
 8006834:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	785b      	ldrb	r3, [r3, #1]
 800683a:	2b05      	cmp	r3, #5
 800683c:	d108      	bne.n	8006850 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	789b      	ldrb	r3, [r3, #2]
 8006846:	78fa      	ldrb	r2, [r7, #3]
 8006848:	429a      	cmp	r2, r3
 800684a:	d008      	beq.n	800685e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800684c:	2300      	movs	r3, #0
 800684e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	885b      	ldrh	r3, [r3, #2]
 8006854:	b29a      	uxth	r2, r3
 8006856:	897b      	ldrh	r3, [r7, #10]
 8006858:	429a      	cmp	r2, r3
 800685a:	d8e5      	bhi.n	8006828 <USBD_GetEpDesc+0x32>
 800685c:	e000      	b.n	8006860 <USBD_GetEpDesc+0x6a>
          break;
 800685e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006860:	693b      	ldr	r3, [r7, #16]
}
 8006862:	4618      	mov	r0, r3
 8006864:	3718      	adds	r7, #24
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}

0800686a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800686a:	b480      	push	{r7}
 800686c:	b085      	sub	sp, #20
 800686e:	af00      	add	r7, sp, #0
 8006870:	6078      	str	r0, [r7, #4]
 8006872:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	881a      	ldrh	r2, [r3, #0]
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	781b      	ldrb	r3, [r3, #0]
 8006880:	b29b      	uxth	r3, r3
 8006882:	4413      	add	r3, r2
 8006884:	b29a      	uxth	r2, r3
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	461a      	mov	r2, r3
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	4413      	add	r3, r2
 8006894:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006896:	68fb      	ldr	r3, [r7, #12]
}
 8006898:	4618      	mov	r0, r3
 800689a:	3714      	adds	r7, #20
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr

080068a4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b087      	sub	sp, #28
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	3301      	adds	r3, #1
 80068ba:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80068c2:	8a3b      	ldrh	r3, [r7, #16]
 80068c4:	021b      	lsls	r3, r3, #8
 80068c6:	b21a      	sxth	r2, r3
 80068c8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80068cc:	4313      	orrs	r3, r2
 80068ce:	b21b      	sxth	r3, r3
 80068d0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80068d2:	89fb      	ldrh	r3, [r7, #14]
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	371c      	adds	r7, #28
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr

080068e0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b084      	sub	sp, #16
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
 80068e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80068ea:	2300      	movs	r3, #0
 80068ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80068f6:	2b40      	cmp	r3, #64	; 0x40
 80068f8:	d005      	beq.n	8006906 <USBD_StdDevReq+0x26>
 80068fa:	2b40      	cmp	r3, #64	; 0x40
 80068fc:	d857      	bhi.n	80069ae <USBD_StdDevReq+0xce>
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d00f      	beq.n	8006922 <USBD_StdDevReq+0x42>
 8006902:	2b20      	cmp	r3, #32
 8006904:	d153      	bne.n	80069ae <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	32ae      	adds	r2, #174	; 0xae
 8006910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	6839      	ldr	r1, [r7, #0]
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	4798      	blx	r3
 800691c:	4603      	mov	r3, r0
 800691e:	73fb      	strb	r3, [r7, #15]
      break;
 8006920:	e04a      	b.n	80069b8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	785b      	ldrb	r3, [r3, #1]
 8006926:	2b09      	cmp	r3, #9
 8006928:	d83b      	bhi.n	80069a2 <USBD_StdDevReq+0xc2>
 800692a:	a201      	add	r2, pc, #4	; (adr r2, 8006930 <USBD_StdDevReq+0x50>)
 800692c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006930:	08006985 	.word	0x08006985
 8006934:	08006999 	.word	0x08006999
 8006938:	080069a3 	.word	0x080069a3
 800693c:	0800698f 	.word	0x0800698f
 8006940:	080069a3 	.word	0x080069a3
 8006944:	08006963 	.word	0x08006963
 8006948:	08006959 	.word	0x08006959
 800694c:	080069a3 	.word	0x080069a3
 8006950:	0800697b 	.word	0x0800697b
 8006954:	0800696d 	.word	0x0800696d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006958:	6839      	ldr	r1, [r7, #0]
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f000 fa3c 	bl	8006dd8 <USBD_GetDescriptor>
          break;
 8006960:	e024      	b.n	80069ac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006962:	6839      	ldr	r1, [r7, #0]
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f000 fba1 	bl	80070ac <USBD_SetAddress>
          break;
 800696a:	e01f      	b.n	80069ac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800696c:	6839      	ldr	r1, [r7, #0]
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f000 fbe0 	bl	8007134 <USBD_SetConfig>
 8006974:	4603      	mov	r3, r0
 8006976:	73fb      	strb	r3, [r7, #15]
          break;
 8006978:	e018      	b.n	80069ac <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800697a:	6839      	ldr	r1, [r7, #0]
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f000 fc83 	bl	8007288 <USBD_GetConfig>
          break;
 8006982:	e013      	b.n	80069ac <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006984:	6839      	ldr	r1, [r7, #0]
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f000 fcb4 	bl	80072f4 <USBD_GetStatus>
          break;
 800698c:	e00e      	b.n	80069ac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800698e:	6839      	ldr	r1, [r7, #0]
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f000 fce3 	bl	800735c <USBD_SetFeature>
          break;
 8006996:	e009      	b.n	80069ac <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006998:	6839      	ldr	r1, [r7, #0]
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 fd07 	bl	80073ae <USBD_ClrFeature>
          break;
 80069a0:	e004      	b.n	80069ac <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80069a2:	6839      	ldr	r1, [r7, #0]
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f000 fd5e 	bl	8007466 <USBD_CtlError>
          break;
 80069aa:	bf00      	nop
      }
      break;
 80069ac:	e004      	b.n	80069b8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80069ae:	6839      	ldr	r1, [r7, #0]
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f000 fd58 	bl	8007466 <USBD_CtlError>
      break;
 80069b6:	bf00      	nop
  }

  return ret;
 80069b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3710      	adds	r7, #16
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
 80069c2:	bf00      	nop

080069c4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b084      	sub	sp, #16
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80069ce:	2300      	movs	r3, #0
 80069d0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80069da:	2b40      	cmp	r3, #64	; 0x40
 80069dc:	d005      	beq.n	80069ea <USBD_StdItfReq+0x26>
 80069de:	2b40      	cmp	r3, #64	; 0x40
 80069e0:	d852      	bhi.n	8006a88 <USBD_StdItfReq+0xc4>
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d001      	beq.n	80069ea <USBD_StdItfReq+0x26>
 80069e6:	2b20      	cmp	r3, #32
 80069e8:	d14e      	bne.n	8006a88 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069f0:	b2db      	uxtb	r3, r3
 80069f2:	3b01      	subs	r3, #1
 80069f4:	2b02      	cmp	r3, #2
 80069f6:	d840      	bhi.n	8006a7a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	889b      	ldrh	r3, [r3, #4]
 80069fc:	b2db      	uxtb	r3, r3
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d836      	bhi.n	8006a70 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	889b      	ldrh	r3, [r3, #4]
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	4619      	mov	r1, r3
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f7ff fed9 	bl	80067c2 <USBD_CoreFindIF>
 8006a10:	4603      	mov	r3, r0
 8006a12:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006a14:	7bbb      	ldrb	r3, [r7, #14]
 8006a16:	2bff      	cmp	r3, #255	; 0xff
 8006a18:	d01d      	beq.n	8006a56 <USBD_StdItfReq+0x92>
 8006a1a:	7bbb      	ldrb	r3, [r7, #14]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d11a      	bne.n	8006a56 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006a20:	7bba      	ldrb	r2, [r7, #14]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	32ae      	adds	r2, #174	; 0xae
 8006a26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d00f      	beq.n	8006a50 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006a30:	7bba      	ldrb	r2, [r7, #14]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006a38:	7bba      	ldrb	r2, [r7, #14]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	32ae      	adds	r2, #174	; 0xae
 8006a3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	6839      	ldr	r1, [r7, #0]
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	4798      	blx	r3
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006a4e:	e004      	b.n	8006a5a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006a50:	2303      	movs	r3, #3
 8006a52:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006a54:	e001      	b.n	8006a5a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006a56:	2303      	movs	r3, #3
 8006a58:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	88db      	ldrh	r3, [r3, #6]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d110      	bne.n	8006a84 <USBD_StdItfReq+0xc0>
 8006a62:	7bfb      	ldrb	r3, [r7, #15]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d10d      	bne.n	8006a84 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f000 fdc7 	bl	80075fc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006a6e:	e009      	b.n	8006a84 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006a70:	6839      	ldr	r1, [r7, #0]
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 fcf7 	bl	8007466 <USBD_CtlError>
          break;
 8006a78:	e004      	b.n	8006a84 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006a7a:	6839      	ldr	r1, [r7, #0]
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f000 fcf2 	bl	8007466 <USBD_CtlError>
          break;
 8006a82:	e000      	b.n	8006a86 <USBD_StdItfReq+0xc2>
          break;
 8006a84:	bf00      	nop
      }
      break;
 8006a86:	e004      	b.n	8006a92 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006a88:	6839      	ldr	r1, [r7, #0]
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 fceb 	bl	8007466 <USBD_CtlError>
      break;
 8006a90:	bf00      	nop
  }

  return ret;
 8006a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3710      	adds	r7, #16
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}

08006a9c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b084      	sub	sp, #16
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	889b      	ldrh	r3, [r3, #4]
 8006aae:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	781b      	ldrb	r3, [r3, #0]
 8006ab4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ab8:	2b40      	cmp	r3, #64	; 0x40
 8006aba:	d007      	beq.n	8006acc <USBD_StdEPReq+0x30>
 8006abc:	2b40      	cmp	r3, #64	; 0x40
 8006abe:	f200 817f 	bhi.w	8006dc0 <USBD_StdEPReq+0x324>
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d02a      	beq.n	8006b1c <USBD_StdEPReq+0x80>
 8006ac6:	2b20      	cmp	r3, #32
 8006ac8:	f040 817a 	bne.w	8006dc0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006acc:	7bbb      	ldrb	r3, [r7, #14]
 8006ace:	4619      	mov	r1, r3
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f7ff fe83 	bl	80067dc <USBD_CoreFindEP>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006ada:	7b7b      	ldrb	r3, [r7, #13]
 8006adc:	2bff      	cmp	r3, #255	; 0xff
 8006ade:	f000 8174 	beq.w	8006dca <USBD_StdEPReq+0x32e>
 8006ae2:	7b7b      	ldrb	r3, [r7, #13]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	f040 8170 	bne.w	8006dca <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006aea:	7b7a      	ldrb	r2, [r7, #13]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006af2:	7b7a      	ldrb	r2, [r7, #13]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	32ae      	adds	r2, #174	; 0xae
 8006af8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	f000 8163 	beq.w	8006dca <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006b04:	7b7a      	ldrb	r2, [r7, #13]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	32ae      	adds	r2, #174	; 0xae
 8006b0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	6839      	ldr	r1, [r7, #0]
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	4798      	blx	r3
 8006b16:	4603      	mov	r3, r0
 8006b18:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006b1a:	e156      	b.n	8006dca <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	785b      	ldrb	r3, [r3, #1]
 8006b20:	2b03      	cmp	r3, #3
 8006b22:	d008      	beq.n	8006b36 <USBD_StdEPReq+0x9a>
 8006b24:	2b03      	cmp	r3, #3
 8006b26:	f300 8145 	bgt.w	8006db4 <USBD_StdEPReq+0x318>
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	f000 809b 	beq.w	8006c66 <USBD_StdEPReq+0x1ca>
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d03c      	beq.n	8006bae <USBD_StdEPReq+0x112>
 8006b34:	e13e      	b.n	8006db4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b3c:	b2db      	uxtb	r3, r3
 8006b3e:	2b02      	cmp	r3, #2
 8006b40:	d002      	beq.n	8006b48 <USBD_StdEPReq+0xac>
 8006b42:	2b03      	cmp	r3, #3
 8006b44:	d016      	beq.n	8006b74 <USBD_StdEPReq+0xd8>
 8006b46:	e02c      	b.n	8006ba2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b48:	7bbb      	ldrb	r3, [r7, #14]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d00d      	beq.n	8006b6a <USBD_StdEPReq+0xce>
 8006b4e:	7bbb      	ldrb	r3, [r7, #14]
 8006b50:	2b80      	cmp	r3, #128	; 0x80
 8006b52:	d00a      	beq.n	8006b6a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006b54:	7bbb      	ldrb	r3, [r7, #14]
 8006b56:	4619      	mov	r1, r3
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f003 ff2f 	bl	800a9bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b5e:	2180      	movs	r1, #128	; 0x80
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f003 ff2b 	bl	800a9bc <USBD_LL_StallEP>
 8006b66:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006b68:	e020      	b.n	8006bac <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006b6a:	6839      	ldr	r1, [r7, #0]
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f000 fc7a 	bl	8007466 <USBD_CtlError>
              break;
 8006b72:	e01b      	b.n	8006bac <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	885b      	ldrh	r3, [r3, #2]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d10e      	bne.n	8006b9a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006b7c:	7bbb      	ldrb	r3, [r7, #14]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d00b      	beq.n	8006b9a <USBD_StdEPReq+0xfe>
 8006b82:	7bbb      	ldrb	r3, [r7, #14]
 8006b84:	2b80      	cmp	r3, #128	; 0x80
 8006b86:	d008      	beq.n	8006b9a <USBD_StdEPReq+0xfe>
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	88db      	ldrh	r3, [r3, #6]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d104      	bne.n	8006b9a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006b90:	7bbb      	ldrb	r3, [r7, #14]
 8006b92:	4619      	mov	r1, r3
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f003 ff11 	bl	800a9bc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 fd2e 	bl	80075fc <USBD_CtlSendStatus>

              break;
 8006ba0:	e004      	b.n	8006bac <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006ba2:	6839      	ldr	r1, [r7, #0]
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f000 fc5e 	bl	8007466 <USBD_CtlError>
              break;
 8006baa:	bf00      	nop
          }
          break;
 8006bac:	e107      	b.n	8006dbe <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	2b02      	cmp	r3, #2
 8006bb8:	d002      	beq.n	8006bc0 <USBD_StdEPReq+0x124>
 8006bba:	2b03      	cmp	r3, #3
 8006bbc:	d016      	beq.n	8006bec <USBD_StdEPReq+0x150>
 8006bbe:	e04b      	b.n	8006c58 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006bc0:	7bbb      	ldrb	r3, [r7, #14]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d00d      	beq.n	8006be2 <USBD_StdEPReq+0x146>
 8006bc6:	7bbb      	ldrb	r3, [r7, #14]
 8006bc8:	2b80      	cmp	r3, #128	; 0x80
 8006bca:	d00a      	beq.n	8006be2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006bcc:	7bbb      	ldrb	r3, [r7, #14]
 8006bce:	4619      	mov	r1, r3
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f003 fef3 	bl	800a9bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006bd6:	2180      	movs	r1, #128	; 0x80
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f003 feef 	bl	800a9bc <USBD_LL_StallEP>
 8006bde:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006be0:	e040      	b.n	8006c64 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006be2:	6839      	ldr	r1, [r7, #0]
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 fc3e 	bl	8007466 <USBD_CtlError>
              break;
 8006bea:	e03b      	b.n	8006c64 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	885b      	ldrh	r3, [r3, #2]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d136      	bne.n	8006c62 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006bf4:	7bbb      	ldrb	r3, [r7, #14]
 8006bf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d004      	beq.n	8006c08 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006bfe:	7bbb      	ldrb	r3, [r7, #14]
 8006c00:	4619      	mov	r1, r3
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f003 fef9 	bl	800a9fa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f000 fcf7 	bl	80075fc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006c0e:	7bbb      	ldrb	r3, [r7, #14]
 8006c10:	4619      	mov	r1, r3
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f7ff fde2 	bl	80067dc <USBD_CoreFindEP>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006c1c:	7b7b      	ldrb	r3, [r7, #13]
 8006c1e:	2bff      	cmp	r3, #255	; 0xff
 8006c20:	d01f      	beq.n	8006c62 <USBD_StdEPReq+0x1c6>
 8006c22:	7b7b      	ldrb	r3, [r7, #13]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d11c      	bne.n	8006c62 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006c28:	7b7a      	ldrb	r2, [r7, #13]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006c30:	7b7a      	ldrb	r2, [r7, #13]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	32ae      	adds	r2, #174	; 0xae
 8006c36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d010      	beq.n	8006c62 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006c40:	7b7a      	ldrb	r2, [r7, #13]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	32ae      	adds	r2, #174	; 0xae
 8006c46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	6839      	ldr	r1, [r7, #0]
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	4798      	blx	r3
 8006c52:	4603      	mov	r3, r0
 8006c54:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006c56:	e004      	b.n	8006c62 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006c58:	6839      	ldr	r1, [r7, #0]
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f000 fc03 	bl	8007466 <USBD_CtlError>
              break;
 8006c60:	e000      	b.n	8006c64 <USBD_StdEPReq+0x1c8>
              break;
 8006c62:	bf00      	nop
          }
          break;
 8006c64:	e0ab      	b.n	8006dbe <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	2b02      	cmp	r3, #2
 8006c70:	d002      	beq.n	8006c78 <USBD_StdEPReq+0x1dc>
 8006c72:	2b03      	cmp	r3, #3
 8006c74:	d032      	beq.n	8006cdc <USBD_StdEPReq+0x240>
 8006c76:	e097      	b.n	8006da8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c78:	7bbb      	ldrb	r3, [r7, #14]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d007      	beq.n	8006c8e <USBD_StdEPReq+0x1f2>
 8006c7e:	7bbb      	ldrb	r3, [r7, #14]
 8006c80:	2b80      	cmp	r3, #128	; 0x80
 8006c82:	d004      	beq.n	8006c8e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006c84:	6839      	ldr	r1, [r7, #0]
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f000 fbed 	bl	8007466 <USBD_CtlError>
                break;
 8006c8c:	e091      	b.n	8006db2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c8e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	da0b      	bge.n	8006cae <USBD_StdEPReq+0x212>
 8006c96:	7bbb      	ldrb	r3, [r7, #14]
 8006c98:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c9c:	4613      	mov	r3, r2
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	4413      	add	r3, r2
 8006ca2:	009b      	lsls	r3, r3, #2
 8006ca4:	3310      	adds	r3, #16
 8006ca6:	687a      	ldr	r2, [r7, #4]
 8006ca8:	4413      	add	r3, r2
 8006caa:	3304      	adds	r3, #4
 8006cac:	e00b      	b.n	8006cc6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006cae:	7bbb      	ldrb	r3, [r7, #14]
 8006cb0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006cb4:	4613      	mov	r3, r2
 8006cb6:	009b      	lsls	r3, r3, #2
 8006cb8:	4413      	add	r3, r2
 8006cba:	009b      	lsls	r3, r3, #2
 8006cbc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006cc0:	687a      	ldr	r2, [r7, #4]
 8006cc2:	4413      	add	r3, r2
 8006cc4:	3304      	adds	r3, #4
 8006cc6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	2202      	movs	r2, #2
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f000 fc37 	bl	8007548 <USBD_CtlSendData>
              break;
 8006cda:	e06a      	b.n	8006db2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006cdc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	da11      	bge.n	8006d08 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006ce4:	7bbb      	ldrb	r3, [r7, #14]
 8006ce6:	f003 020f 	and.w	r2, r3, #15
 8006cea:	6879      	ldr	r1, [r7, #4]
 8006cec:	4613      	mov	r3, r2
 8006cee:	009b      	lsls	r3, r3, #2
 8006cf0:	4413      	add	r3, r2
 8006cf2:	009b      	lsls	r3, r3, #2
 8006cf4:	440b      	add	r3, r1
 8006cf6:	3324      	adds	r3, #36	; 0x24
 8006cf8:	881b      	ldrh	r3, [r3, #0]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d117      	bne.n	8006d2e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006cfe:	6839      	ldr	r1, [r7, #0]
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f000 fbb0 	bl	8007466 <USBD_CtlError>
                  break;
 8006d06:	e054      	b.n	8006db2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006d08:	7bbb      	ldrb	r3, [r7, #14]
 8006d0a:	f003 020f 	and.w	r2, r3, #15
 8006d0e:	6879      	ldr	r1, [r7, #4]
 8006d10:	4613      	mov	r3, r2
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	4413      	add	r3, r2
 8006d16:	009b      	lsls	r3, r3, #2
 8006d18:	440b      	add	r3, r1
 8006d1a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006d1e:	881b      	ldrh	r3, [r3, #0]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d104      	bne.n	8006d2e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006d24:	6839      	ldr	r1, [r7, #0]
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f000 fb9d 	bl	8007466 <USBD_CtlError>
                  break;
 8006d2c:	e041      	b.n	8006db2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	da0b      	bge.n	8006d4e <USBD_StdEPReq+0x2b2>
 8006d36:	7bbb      	ldrb	r3, [r7, #14]
 8006d38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d3c:	4613      	mov	r3, r2
 8006d3e:	009b      	lsls	r3, r3, #2
 8006d40:	4413      	add	r3, r2
 8006d42:	009b      	lsls	r3, r3, #2
 8006d44:	3310      	adds	r3, #16
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	4413      	add	r3, r2
 8006d4a:	3304      	adds	r3, #4
 8006d4c:	e00b      	b.n	8006d66 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006d4e:	7bbb      	ldrb	r3, [r7, #14]
 8006d50:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d54:	4613      	mov	r3, r2
 8006d56:	009b      	lsls	r3, r3, #2
 8006d58:	4413      	add	r3, r2
 8006d5a:	009b      	lsls	r3, r3, #2
 8006d5c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	4413      	add	r3, r2
 8006d64:	3304      	adds	r3, #4
 8006d66:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006d68:	7bbb      	ldrb	r3, [r7, #14]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d002      	beq.n	8006d74 <USBD_StdEPReq+0x2d8>
 8006d6e:	7bbb      	ldrb	r3, [r7, #14]
 8006d70:	2b80      	cmp	r3, #128	; 0x80
 8006d72:	d103      	bne.n	8006d7c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	2200      	movs	r2, #0
 8006d78:	601a      	str	r2, [r3, #0]
 8006d7a:	e00e      	b.n	8006d9a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006d7c:	7bbb      	ldrb	r3, [r7, #14]
 8006d7e:	4619      	mov	r1, r3
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f003 fe59 	bl	800aa38 <USBD_LL_IsStallEP>
 8006d86:	4603      	mov	r3, r0
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d003      	beq.n	8006d94 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	2201      	movs	r2, #1
 8006d90:	601a      	str	r2, [r3, #0]
 8006d92:	e002      	b.n	8006d9a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	2200      	movs	r2, #0
 8006d98:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	2202      	movs	r2, #2
 8006d9e:	4619      	mov	r1, r3
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f000 fbd1 	bl	8007548 <USBD_CtlSendData>
              break;
 8006da6:	e004      	b.n	8006db2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006da8:	6839      	ldr	r1, [r7, #0]
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 fb5b 	bl	8007466 <USBD_CtlError>
              break;
 8006db0:	bf00      	nop
          }
          break;
 8006db2:	e004      	b.n	8006dbe <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006db4:	6839      	ldr	r1, [r7, #0]
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f000 fb55 	bl	8007466 <USBD_CtlError>
          break;
 8006dbc:	bf00      	nop
      }
      break;
 8006dbe:	e005      	b.n	8006dcc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006dc0:	6839      	ldr	r1, [r7, #0]
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 fb4f 	bl	8007466 <USBD_CtlError>
      break;
 8006dc8:	e000      	b.n	8006dcc <USBD_StdEPReq+0x330>
      break;
 8006dca:	bf00      	nop
  }

  return ret;
 8006dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3710      	adds	r7, #16
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}
	...

08006dd8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006de2:	2300      	movs	r3, #0
 8006de4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006de6:	2300      	movs	r3, #0
 8006de8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006dea:	2300      	movs	r3, #0
 8006dec:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	885b      	ldrh	r3, [r3, #2]
 8006df2:	0a1b      	lsrs	r3, r3, #8
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	3b01      	subs	r3, #1
 8006df8:	2b06      	cmp	r3, #6
 8006dfa:	f200 8128 	bhi.w	800704e <USBD_GetDescriptor+0x276>
 8006dfe:	a201      	add	r2, pc, #4	; (adr r2, 8006e04 <USBD_GetDescriptor+0x2c>)
 8006e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e04:	08006e21 	.word	0x08006e21
 8006e08:	08006e39 	.word	0x08006e39
 8006e0c:	08006e79 	.word	0x08006e79
 8006e10:	0800704f 	.word	0x0800704f
 8006e14:	0800704f 	.word	0x0800704f
 8006e18:	08006fef 	.word	0x08006fef
 8006e1c:	0800701b 	.word	0x0800701b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	687a      	ldr	r2, [r7, #4]
 8006e2a:	7c12      	ldrb	r2, [r2, #16]
 8006e2c:	f107 0108 	add.w	r1, r7, #8
 8006e30:	4610      	mov	r0, r2
 8006e32:	4798      	blx	r3
 8006e34:	60f8      	str	r0, [r7, #12]
      break;
 8006e36:	e112      	b.n	800705e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	7c1b      	ldrb	r3, [r3, #16]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d10d      	bne.n	8006e5c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e48:	f107 0208 	add.w	r2, r7, #8
 8006e4c:	4610      	mov	r0, r2
 8006e4e:	4798      	blx	r3
 8006e50:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	3301      	adds	r3, #1
 8006e56:	2202      	movs	r2, #2
 8006e58:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006e5a:	e100      	b.n	800705e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e64:	f107 0208 	add.w	r2, r7, #8
 8006e68:	4610      	mov	r0, r2
 8006e6a:	4798      	blx	r3
 8006e6c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	3301      	adds	r3, #1
 8006e72:	2202      	movs	r2, #2
 8006e74:	701a      	strb	r2, [r3, #0]
      break;
 8006e76:	e0f2      	b.n	800705e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	885b      	ldrh	r3, [r3, #2]
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	2b05      	cmp	r3, #5
 8006e80:	f200 80ac 	bhi.w	8006fdc <USBD_GetDescriptor+0x204>
 8006e84:	a201      	add	r2, pc, #4	; (adr r2, 8006e8c <USBD_GetDescriptor+0xb4>)
 8006e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e8a:	bf00      	nop
 8006e8c:	08006ea5 	.word	0x08006ea5
 8006e90:	08006ed9 	.word	0x08006ed9
 8006e94:	08006f0d 	.word	0x08006f0d
 8006e98:	08006f41 	.word	0x08006f41
 8006e9c:	08006f75 	.word	0x08006f75
 8006ea0:	08006fa9 	.word	0x08006fa9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d00b      	beq.n	8006ec8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	687a      	ldr	r2, [r7, #4]
 8006eba:	7c12      	ldrb	r2, [r2, #16]
 8006ebc:	f107 0108 	add.w	r1, r7, #8
 8006ec0:	4610      	mov	r0, r2
 8006ec2:	4798      	blx	r3
 8006ec4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ec6:	e091      	b.n	8006fec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ec8:	6839      	ldr	r1, [r7, #0]
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 facb 	bl	8007466 <USBD_CtlError>
            err++;
 8006ed0:	7afb      	ldrb	r3, [r7, #11]
 8006ed2:	3301      	adds	r3, #1
 8006ed4:	72fb      	strb	r3, [r7, #11]
          break;
 8006ed6:	e089      	b.n	8006fec <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d00b      	beq.n	8006efc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	7c12      	ldrb	r2, [r2, #16]
 8006ef0:	f107 0108 	add.w	r1, r7, #8
 8006ef4:	4610      	mov	r0, r2
 8006ef6:	4798      	blx	r3
 8006ef8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006efa:	e077      	b.n	8006fec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006efc:	6839      	ldr	r1, [r7, #0]
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 fab1 	bl	8007466 <USBD_CtlError>
            err++;
 8006f04:	7afb      	ldrb	r3, [r7, #11]
 8006f06:	3301      	adds	r3, #1
 8006f08:	72fb      	strb	r3, [r7, #11]
          break;
 8006f0a:	e06f      	b.n	8006fec <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f12:	68db      	ldr	r3, [r3, #12]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d00b      	beq.n	8006f30 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f1e:	68db      	ldr	r3, [r3, #12]
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	7c12      	ldrb	r2, [r2, #16]
 8006f24:	f107 0108 	add.w	r1, r7, #8
 8006f28:	4610      	mov	r0, r2
 8006f2a:	4798      	blx	r3
 8006f2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f2e:	e05d      	b.n	8006fec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f30:	6839      	ldr	r1, [r7, #0]
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f000 fa97 	bl	8007466 <USBD_CtlError>
            err++;
 8006f38:	7afb      	ldrb	r3, [r7, #11]
 8006f3a:	3301      	adds	r3, #1
 8006f3c:	72fb      	strb	r3, [r7, #11]
          break;
 8006f3e:	e055      	b.n	8006fec <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f46:	691b      	ldr	r3, [r3, #16]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d00b      	beq.n	8006f64 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f52:	691b      	ldr	r3, [r3, #16]
 8006f54:	687a      	ldr	r2, [r7, #4]
 8006f56:	7c12      	ldrb	r2, [r2, #16]
 8006f58:	f107 0108 	add.w	r1, r7, #8
 8006f5c:	4610      	mov	r0, r2
 8006f5e:	4798      	blx	r3
 8006f60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f62:	e043      	b.n	8006fec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f64:	6839      	ldr	r1, [r7, #0]
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 fa7d 	bl	8007466 <USBD_CtlError>
            err++;
 8006f6c:	7afb      	ldrb	r3, [r7, #11]
 8006f6e:	3301      	adds	r3, #1
 8006f70:	72fb      	strb	r3, [r7, #11]
          break;
 8006f72:	e03b      	b.n	8006fec <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f7a:	695b      	ldr	r3, [r3, #20]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d00b      	beq.n	8006f98 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f86:	695b      	ldr	r3, [r3, #20]
 8006f88:	687a      	ldr	r2, [r7, #4]
 8006f8a:	7c12      	ldrb	r2, [r2, #16]
 8006f8c:	f107 0108 	add.w	r1, r7, #8
 8006f90:	4610      	mov	r0, r2
 8006f92:	4798      	blx	r3
 8006f94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f96:	e029      	b.n	8006fec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f98:	6839      	ldr	r1, [r7, #0]
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 fa63 	bl	8007466 <USBD_CtlError>
            err++;
 8006fa0:	7afb      	ldrb	r3, [r7, #11]
 8006fa2:	3301      	adds	r3, #1
 8006fa4:	72fb      	strb	r3, [r7, #11]
          break;
 8006fa6:	e021      	b.n	8006fec <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fae:	699b      	ldr	r3, [r3, #24]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d00b      	beq.n	8006fcc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fba:	699b      	ldr	r3, [r3, #24]
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	7c12      	ldrb	r2, [r2, #16]
 8006fc0:	f107 0108 	add.w	r1, r7, #8
 8006fc4:	4610      	mov	r0, r2
 8006fc6:	4798      	blx	r3
 8006fc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006fca:	e00f      	b.n	8006fec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006fcc:	6839      	ldr	r1, [r7, #0]
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f000 fa49 	bl	8007466 <USBD_CtlError>
            err++;
 8006fd4:	7afb      	ldrb	r3, [r7, #11]
 8006fd6:	3301      	adds	r3, #1
 8006fd8:	72fb      	strb	r3, [r7, #11]
          break;
 8006fda:	e007      	b.n	8006fec <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006fdc:	6839      	ldr	r1, [r7, #0]
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f000 fa41 	bl	8007466 <USBD_CtlError>
          err++;
 8006fe4:	7afb      	ldrb	r3, [r7, #11]
 8006fe6:	3301      	adds	r3, #1
 8006fe8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006fea:	bf00      	nop
      }
      break;
 8006fec:	e037      	b.n	800705e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	7c1b      	ldrb	r3, [r3, #16]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d109      	bne.n	800700a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ffe:	f107 0208 	add.w	r2, r7, #8
 8007002:	4610      	mov	r0, r2
 8007004:	4798      	blx	r3
 8007006:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007008:	e029      	b.n	800705e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800700a:	6839      	ldr	r1, [r7, #0]
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f000 fa2a 	bl	8007466 <USBD_CtlError>
        err++;
 8007012:	7afb      	ldrb	r3, [r7, #11]
 8007014:	3301      	adds	r3, #1
 8007016:	72fb      	strb	r3, [r7, #11]
      break;
 8007018:	e021      	b.n	800705e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	7c1b      	ldrb	r3, [r3, #16]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d10d      	bne.n	800703e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800702a:	f107 0208 	add.w	r2, r7, #8
 800702e:	4610      	mov	r0, r2
 8007030:	4798      	blx	r3
 8007032:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	3301      	adds	r3, #1
 8007038:	2207      	movs	r2, #7
 800703a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800703c:	e00f      	b.n	800705e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800703e:	6839      	ldr	r1, [r7, #0]
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f000 fa10 	bl	8007466 <USBD_CtlError>
        err++;
 8007046:	7afb      	ldrb	r3, [r7, #11]
 8007048:	3301      	adds	r3, #1
 800704a:	72fb      	strb	r3, [r7, #11]
      break;
 800704c:	e007      	b.n	800705e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800704e:	6839      	ldr	r1, [r7, #0]
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f000 fa08 	bl	8007466 <USBD_CtlError>
      err++;
 8007056:	7afb      	ldrb	r3, [r7, #11]
 8007058:	3301      	adds	r3, #1
 800705a:	72fb      	strb	r3, [r7, #11]
      break;
 800705c:	bf00      	nop
  }

  if (err != 0U)
 800705e:	7afb      	ldrb	r3, [r7, #11]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d11e      	bne.n	80070a2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	88db      	ldrh	r3, [r3, #6]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d016      	beq.n	800709a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800706c:	893b      	ldrh	r3, [r7, #8]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d00e      	beq.n	8007090 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	88da      	ldrh	r2, [r3, #6]
 8007076:	893b      	ldrh	r3, [r7, #8]
 8007078:	4293      	cmp	r3, r2
 800707a:	bf28      	it	cs
 800707c:	4613      	movcs	r3, r2
 800707e:	b29b      	uxth	r3, r3
 8007080:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007082:	893b      	ldrh	r3, [r7, #8]
 8007084:	461a      	mov	r2, r3
 8007086:	68f9      	ldr	r1, [r7, #12]
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f000 fa5d 	bl	8007548 <USBD_CtlSendData>
 800708e:	e009      	b.n	80070a4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007090:	6839      	ldr	r1, [r7, #0]
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 f9e7 	bl	8007466 <USBD_CtlError>
 8007098:	e004      	b.n	80070a4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f000 faae 	bl	80075fc <USBD_CtlSendStatus>
 80070a0:	e000      	b.n	80070a4 <USBD_GetDescriptor+0x2cc>
    return;
 80070a2:	bf00      	nop
  }
}
 80070a4:	3710      	adds	r7, #16
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}
 80070aa:	bf00      	nop

080070ac <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	889b      	ldrh	r3, [r3, #4]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d131      	bne.n	8007122 <USBD_SetAddress+0x76>
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	88db      	ldrh	r3, [r3, #6]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d12d      	bne.n	8007122 <USBD_SetAddress+0x76>
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	885b      	ldrh	r3, [r3, #2]
 80070ca:	2b7f      	cmp	r3, #127	; 0x7f
 80070cc:	d829      	bhi.n	8007122 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	885b      	ldrh	r3, [r3, #2]
 80070d2:	b2db      	uxtb	r3, r3
 80070d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070d8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070e0:	b2db      	uxtb	r3, r3
 80070e2:	2b03      	cmp	r3, #3
 80070e4:	d104      	bne.n	80070f0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80070e6:	6839      	ldr	r1, [r7, #0]
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f000 f9bc 	bl	8007466 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070ee:	e01d      	b.n	800712c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	7bfa      	ldrb	r2, [r7, #15]
 80070f4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80070f8:	7bfb      	ldrb	r3, [r7, #15]
 80070fa:	4619      	mov	r1, r3
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f003 fcc7 	bl	800aa90 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 fa7a 	bl	80075fc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007108:	7bfb      	ldrb	r3, [r7, #15]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d004      	beq.n	8007118 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2202      	movs	r2, #2
 8007112:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007116:	e009      	b.n	800712c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2201      	movs	r2, #1
 800711c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007120:	e004      	b.n	800712c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007122:	6839      	ldr	r1, [r7, #0]
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f000 f99e 	bl	8007466 <USBD_CtlError>
  }
}
 800712a:	bf00      	nop
 800712c:	bf00      	nop
 800712e:	3710      	adds	r7, #16
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b084      	sub	sp, #16
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
 800713c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800713e:	2300      	movs	r3, #0
 8007140:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	885b      	ldrh	r3, [r3, #2]
 8007146:	b2da      	uxtb	r2, r3
 8007148:	4b4e      	ldr	r3, [pc, #312]	; (8007284 <USBD_SetConfig+0x150>)
 800714a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800714c:	4b4d      	ldr	r3, [pc, #308]	; (8007284 <USBD_SetConfig+0x150>)
 800714e:	781b      	ldrb	r3, [r3, #0]
 8007150:	2b01      	cmp	r3, #1
 8007152:	d905      	bls.n	8007160 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007154:	6839      	ldr	r1, [r7, #0]
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 f985 	bl	8007466 <USBD_CtlError>
    return USBD_FAIL;
 800715c:	2303      	movs	r3, #3
 800715e:	e08c      	b.n	800727a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007166:	b2db      	uxtb	r3, r3
 8007168:	2b02      	cmp	r3, #2
 800716a:	d002      	beq.n	8007172 <USBD_SetConfig+0x3e>
 800716c:	2b03      	cmp	r3, #3
 800716e:	d029      	beq.n	80071c4 <USBD_SetConfig+0x90>
 8007170:	e075      	b.n	800725e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007172:	4b44      	ldr	r3, [pc, #272]	; (8007284 <USBD_SetConfig+0x150>)
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d020      	beq.n	80071bc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800717a:	4b42      	ldr	r3, [pc, #264]	; (8007284 <USBD_SetConfig+0x150>)
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	461a      	mov	r2, r3
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007184:	4b3f      	ldr	r3, [pc, #252]	; (8007284 <USBD_SetConfig+0x150>)
 8007186:	781b      	ldrb	r3, [r3, #0]
 8007188:	4619      	mov	r1, r3
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f7fe ffe7 	bl	800615e <USBD_SetClassConfig>
 8007190:	4603      	mov	r3, r0
 8007192:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007194:	7bfb      	ldrb	r3, [r7, #15]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d008      	beq.n	80071ac <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800719a:	6839      	ldr	r1, [r7, #0]
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f000 f962 	bl	8007466 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2202      	movs	r2, #2
 80071a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80071aa:	e065      	b.n	8007278 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f000 fa25 	bl	80075fc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2203      	movs	r2, #3
 80071b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80071ba:	e05d      	b.n	8007278 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f000 fa1d 	bl	80075fc <USBD_CtlSendStatus>
      break;
 80071c2:	e059      	b.n	8007278 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80071c4:	4b2f      	ldr	r3, [pc, #188]	; (8007284 <USBD_SetConfig+0x150>)
 80071c6:	781b      	ldrb	r3, [r3, #0]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d112      	bne.n	80071f2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2202      	movs	r2, #2
 80071d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80071d4:	4b2b      	ldr	r3, [pc, #172]	; (8007284 <USBD_SetConfig+0x150>)
 80071d6:	781b      	ldrb	r3, [r3, #0]
 80071d8:	461a      	mov	r2, r3
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80071de:	4b29      	ldr	r3, [pc, #164]	; (8007284 <USBD_SetConfig+0x150>)
 80071e0:	781b      	ldrb	r3, [r3, #0]
 80071e2:	4619      	mov	r1, r3
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f7fe ffd6 	bl	8006196 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f000 fa06 	bl	80075fc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80071f0:	e042      	b.n	8007278 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80071f2:	4b24      	ldr	r3, [pc, #144]	; (8007284 <USBD_SetConfig+0x150>)
 80071f4:	781b      	ldrb	r3, [r3, #0]
 80071f6:	461a      	mov	r2, r3
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	429a      	cmp	r2, r3
 80071fe:	d02a      	beq.n	8007256 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	b2db      	uxtb	r3, r3
 8007206:	4619      	mov	r1, r3
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f7fe ffc4 	bl	8006196 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800720e:	4b1d      	ldr	r3, [pc, #116]	; (8007284 <USBD_SetConfig+0x150>)
 8007210:	781b      	ldrb	r3, [r3, #0]
 8007212:	461a      	mov	r2, r3
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007218:	4b1a      	ldr	r3, [pc, #104]	; (8007284 <USBD_SetConfig+0x150>)
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	4619      	mov	r1, r3
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f7fe ff9d 	bl	800615e <USBD_SetClassConfig>
 8007224:	4603      	mov	r3, r0
 8007226:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007228:	7bfb      	ldrb	r3, [r7, #15]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d00f      	beq.n	800724e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800722e:	6839      	ldr	r1, [r7, #0]
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f000 f918 	bl	8007466 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	b2db      	uxtb	r3, r3
 800723c:	4619      	mov	r1, r3
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f7fe ffa9 	bl	8006196 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2202      	movs	r2, #2
 8007248:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800724c:	e014      	b.n	8007278 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f000 f9d4 	bl	80075fc <USBD_CtlSendStatus>
      break;
 8007254:	e010      	b.n	8007278 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 f9d0 	bl	80075fc <USBD_CtlSendStatus>
      break;
 800725c:	e00c      	b.n	8007278 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800725e:	6839      	ldr	r1, [r7, #0]
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f000 f900 	bl	8007466 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007266:	4b07      	ldr	r3, [pc, #28]	; (8007284 <USBD_SetConfig+0x150>)
 8007268:	781b      	ldrb	r3, [r3, #0]
 800726a:	4619      	mov	r1, r3
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f7fe ff92 	bl	8006196 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007272:	2303      	movs	r3, #3
 8007274:	73fb      	strb	r3, [r7, #15]
      break;
 8007276:	bf00      	nop
  }

  return ret;
 8007278:	7bfb      	ldrb	r3, [r7, #15]
}
 800727a:	4618      	mov	r0, r3
 800727c:	3710      	adds	r7, #16
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}
 8007282:	bf00      	nop
 8007284:	20000248 	.word	0x20000248

08007288 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b082      	sub	sp, #8
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	88db      	ldrh	r3, [r3, #6]
 8007296:	2b01      	cmp	r3, #1
 8007298:	d004      	beq.n	80072a4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800729a:	6839      	ldr	r1, [r7, #0]
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f000 f8e2 	bl	8007466 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80072a2:	e023      	b.n	80072ec <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072aa:	b2db      	uxtb	r3, r3
 80072ac:	2b02      	cmp	r3, #2
 80072ae:	dc02      	bgt.n	80072b6 <USBD_GetConfig+0x2e>
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	dc03      	bgt.n	80072bc <USBD_GetConfig+0x34>
 80072b4:	e015      	b.n	80072e2 <USBD_GetConfig+0x5a>
 80072b6:	2b03      	cmp	r3, #3
 80072b8:	d00b      	beq.n	80072d2 <USBD_GetConfig+0x4a>
 80072ba:	e012      	b.n	80072e2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2200      	movs	r2, #0
 80072c0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	3308      	adds	r3, #8
 80072c6:	2201      	movs	r2, #1
 80072c8:	4619      	mov	r1, r3
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 f93c 	bl	8007548 <USBD_CtlSendData>
        break;
 80072d0:	e00c      	b.n	80072ec <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	3304      	adds	r3, #4
 80072d6:	2201      	movs	r2, #1
 80072d8:	4619      	mov	r1, r3
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 f934 	bl	8007548 <USBD_CtlSendData>
        break;
 80072e0:	e004      	b.n	80072ec <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80072e2:	6839      	ldr	r1, [r7, #0]
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f000 f8be 	bl	8007466 <USBD_CtlError>
        break;
 80072ea:	bf00      	nop
}
 80072ec:	bf00      	nop
 80072ee:	3708      	adds	r7, #8
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}

080072f4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b082      	sub	sp, #8
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007304:	b2db      	uxtb	r3, r3
 8007306:	3b01      	subs	r3, #1
 8007308:	2b02      	cmp	r3, #2
 800730a:	d81e      	bhi.n	800734a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	88db      	ldrh	r3, [r3, #6]
 8007310:	2b02      	cmp	r3, #2
 8007312:	d004      	beq.n	800731e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007314:	6839      	ldr	r1, [r7, #0]
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 f8a5 	bl	8007466 <USBD_CtlError>
        break;
 800731c:	e01a      	b.n	8007354 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2201      	movs	r2, #1
 8007322:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800732a:	2b00      	cmp	r3, #0
 800732c:	d005      	beq.n	800733a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	68db      	ldr	r3, [r3, #12]
 8007332:	f043 0202 	orr.w	r2, r3, #2
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	330c      	adds	r3, #12
 800733e:	2202      	movs	r2, #2
 8007340:	4619      	mov	r1, r3
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f000 f900 	bl	8007548 <USBD_CtlSendData>
      break;
 8007348:	e004      	b.n	8007354 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800734a:	6839      	ldr	r1, [r7, #0]
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f000 f88a 	bl	8007466 <USBD_CtlError>
      break;
 8007352:	bf00      	nop
  }
}
 8007354:	bf00      	nop
 8007356:	3708      	adds	r7, #8
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}

0800735c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b082      	sub	sp, #8
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	885b      	ldrh	r3, [r3, #2]
 800736a:	2b01      	cmp	r3, #1
 800736c:	d107      	bne.n	800737e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2201      	movs	r2, #1
 8007372:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f000 f940 	bl	80075fc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800737c:	e013      	b.n	80073a6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	885b      	ldrh	r3, [r3, #2]
 8007382:	2b02      	cmp	r3, #2
 8007384:	d10b      	bne.n	800739e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	889b      	ldrh	r3, [r3, #4]
 800738a:	0a1b      	lsrs	r3, r3, #8
 800738c:	b29b      	uxth	r3, r3
 800738e:	b2da      	uxtb	r2, r3
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f000 f930 	bl	80075fc <USBD_CtlSendStatus>
}
 800739c:	e003      	b.n	80073a6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800739e:	6839      	ldr	r1, [r7, #0]
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f000 f860 	bl	8007466 <USBD_CtlError>
}
 80073a6:	bf00      	nop
 80073a8:	3708      	adds	r7, #8
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}

080073ae <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073ae:	b580      	push	{r7, lr}
 80073b0:	b082      	sub	sp, #8
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	6078      	str	r0, [r7, #4]
 80073b6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073be:	b2db      	uxtb	r3, r3
 80073c0:	3b01      	subs	r3, #1
 80073c2:	2b02      	cmp	r3, #2
 80073c4:	d80b      	bhi.n	80073de <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	885b      	ldrh	r3, [r3, #2]
 80073ca:	2b01      	cmp	r3, #1
 80073cc:	d10c      	bne.n	80073e8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2200      	movs	r2, #0
 80073d2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f000 f910 	bl	80075fc <USBD_CtlSendStatus>
      }
      break;
 80073dc:	e004      	b.n	80073e8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80073de:	6839      	ldr	r1, [r7, #0]
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f000 f840 	bl	8007466 <USBD_CtlError>
      break;
 80073e6:	e000      	b.n	80073ea <USBD_ClrFeature+0x3c>
      break;
 80073e8:	bf00      	nop
  }
}
 80073ea:	bf00      	nop
 80073ec:	3708      	adds	r7, #8
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}

080073f2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80073f2:	b580      	push	{r7, lr}
 80073f4:	b084      	sub	sp, #16
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	6078      	str	r0, [r7, #4]
 80073fa:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	781a      	ldrb	r2, [r3, #0]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	3301      	adds	r3, #1
 800740c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	781a      	ldrb	r2, [r3, #0]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	3301      	adds	r3, #1
 800741a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800741c:	68f8      	ldr	r0, [r7, #12]
 800741e:	f7ff fa41 	bl	80068a4 <SWAPBYTE>
 8007422:	4603      	mov	r3, r0
 8007424:	461a      	mov	r2, r3
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	3301      	adds	r3, #1
 800742e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	3301      	adds	r3, #1
 8007434:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007436:	68f8      	ldr	r0, [r7, #12]
 8007438:	f7ff fa34 	bl	80068a4 <SWAPBYTE>
 800743c:	4603      	mov	r3, r0
 800743e:	461a      	mov	r2, r3
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	3301      	adds	r3, #1
 8007448:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	3301      	adds	r3, #1
 800744e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007450:	68f8      	ldr	r0, [r7, #12]
 8007452:	f7ff fa27 	bl	80068a4 <SWAPBYTE>
 8007456:	4603      	mov	r3, r0
 8007458:	461a      	mov	r2, r3
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	80da      	strh	r2, [r3, #6]
}
 800745e:	bf00      	nop
 8007460:	3710      	adds	r7, #16
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}

08007466 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007466:	b580      	push	{r7, lr}
 8007468:	b082      	sub	sp, #8
 800746a:	af00      	add	r7, sp, #0
 800746c:	6078      	str	r0, [r7, #4]
 800746e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007470:	2180      	movs	r1, #128	; 0x80
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f003 faa2 	bl	800a9bc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007478:	2100      	movs	r1, #0
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f003 fa9e 	bl	800a9bc <USBD_LL_StallEP>
}
 8007480:	bf00      	nop
 8007482:	3708      	adds	r7, #8
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}

08007488 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b086      	sub	sp, #24
 800748c:	af00      	add	r7, sp, #0
 800748e:	60f8      	str	r0, [r7, #12]
 8007490:	60b9      	str	r1, [r7, #8]
 8007492:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007494:	2300      	movs	r3, #0
 8007496:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d036      	beq.n	800750c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80074a2:	6938      	ldr	r0, [r7, #16]
 80074a4:	f000 f836 	bl	8007514 <USBD_GetLen>
 80074a8:	4603      	mov	r3, r0
 80074aa:	3301      	adds	r3, #1
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	005b      	lsls	r3, r3, #1
 80074b0:	b29a      	uxth	r2, r3
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80074b6:	7dfb      	ldrb	r3, [r7, #23]
 80074b8:	68ba      	ldr	r2, [r7, #8]
 80074ba:	4413      	add	r3, r2
 80074bc:	687a      	ldr	r2, [r7, #4]
 80074be:	7812      	ldrb	r2, [r2, #0]
 80074c0:	701a      	strb	r2, [r3, #0]
  idx++;
 80074c2:	7dfb      	ldrb	r3, [r7, #23]
 80074c4:	3301      	adds	r3, #1
 80074c6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80074c8:	7dfb      	ldrb	r3, [r7, #23]
 80074ca:	68ba      	ldr	r2, [r7, #8]
 80074cc:	4413      	add	r3, r2
 80074ce:	2203      	movs	r2, #3
 80074d0:	701a      	strb	r2, [r3, #0]
  idx++;
 80074d2:	7dfb      	ldrb	r3, [r7, #23]
 80074d4:	3301      	adds	r3, #1
 80074d6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80074d8:	e013      	b.n	8007502 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80074da:	7dfb      	ldrb	r3, [r7, #23]
 80074dc:	68ba      	ldr	r2, [r7, #8]
 80074de:	4413      	add	r3, r2
 80074e0:	693a      	ldr	r2, [r7, #16]
 80074e2:	7812      	ldrb	r2, [r2, #0]
 80074e4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	3301      	adds	r3, #1
 80074ea:	613b      	str	r3, [r7, #16]
    idx++;
 80074ec:	7dfb      	ldrb	r3, [r7, #23]
 80074ee:	3301      	adds	r3, #1
 80074f0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80074f2:	7dfb      	ldrb	r3, [r7, #23]
 80074f4:	68ba      	ldr	r2, [r7, #8]
 80074f6:	4413      	add	r3, r2
 80074f8:	2200      	movs	r2, #0
 80074fa:	701a      	strb	r2, [r3, #0]
    idx++;
 80074fc:	7dfb      	ldrb	r3, [r7, #23]
 80074fe:	3301      	adds	r3, #1
 8007500:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d1e7      	bne.n	80074da <USBD_GetString+0x52>
 800750a:	e000      	b.n	800750e <USBD_GetString+0x86>
    return;
 800750c:	bf00      	nop
  }
}
 800750e:	3718      	adds	r7, #24
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007514:	b480      	push	{r7}
 8007516:	b085      	sub	sp, #20
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800751c:	2300      	movs	r3, #0
 800751e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007524:	e005      	b.n	8007532 <USBD_GetLen+0x1e>
  {
    len++;
 8007526:	7bfb      	ldrb	r3, [r7, #15]
 8007528:	3301      	adds	r3, #1
 800752a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	3301      	adds	r3, #1
 8007530:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	781b      	ldrb	r3, [r3, #0]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d1f5      	bne.n	8007526 <USBD_GetLen+0x12>
  }

  return len;
 800753a:	7bfb      	ldrb	r3, [r7, #15]
}
 800753c:	4618      	mov	r0, r3
 800753e:	3714      	adds	r7, #20
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr

08007548 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
 800754e:	60f8      	str	r0, [r7, #12]
 8007550:	60b9      	str	r1, [r7, #8]
 8007552:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	2202      	movs	r2, #2
 8007558:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	687a      	ldr	r2, [r7, #4]
 8007560:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	68ba      	ldr	r2, [r7, #8]
 800756c:	2100      	movs	r1, #0
 800756e:	68f8      	ldr	r0, [r7, #12]
 8007570:	f003 faad 	bl	800aace <USBD_LL_Transmit>

  return USBD_OK;
 8007574:	2300      	movs	r3, #0
}
 8007576:	4618      	mov	r0, r3
 8007578:	3710      	adds	r7, #16
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}

0800757e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800757e:	b580      	push	{r7, lr}
 8007580:	b084      	sub	sp, #16
 8007582:	af00      	add	r7, sp, #0
 8007584:	60f8      	str	r0, [r7, #12]
 8007586:	60b9      	str	r1, [r7, #8]
 8007588:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	68ba      	ldr	r2, [r7, #8]
 800758e:	2100      	movs	r1, #0
 8007590:	68f8      	ldr	r0, [r7, #12]
 8007592:	f003 fa9c 	bl	800aace <USBD_LL_Transmit>

  return USBD_OK;
 8007596:	2300      	movs	r3, #0
}
 8007598:	4618      	mov	r0, r3
 800759a:	3710      	adds	r7, #16
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b084      	sub	sp, #16
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	60f8      	str	r0, [r7, #12]
 80075a8:	60b9      	str	r1, [r7, #8]
 80075aa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2203      	movs	r2, #3
 80075b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	687a      	ldr	r2, [r7, #4]
 80075b8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	68ba      	ldr	r2, [r7, #8]
 80075c8:	2100      	movs	r1, #0
 80075ca:	68f8      	ldr	r0, [r7, #12]
 80075cc:	f003 faa0 	bl	800ab10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80075d0:	2300      	movs	r3, #0
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3710      	adds	r7, #16
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}

080075da <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80075da:	b580      	push	{r7, lr}
 80075dc:	b084      	sub	sp, #16
 80075de:	af00      	add	r7, sp, #0
 80075e0:	60f8      	str	r0, [r7, #12]
 80075e2:	60b9      	str	r1, [r7, #8]
 80075e4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	68ba      	ldr	r2, [r7, #8]
 80075ea:	2100      	movs	r1, #0
 80075ec:	68f8      	ldr	r0, [r7, #12]
 80075ee:	f003 fa8f 	bl	800ab10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80075f2:	2300      	movs	r3, #0
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	3710      	adds	r7, #16
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}

080075fc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b082      	sub	sp, #8
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2204      	movs	r2, #4
 8007608:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800760c:	2300      	movs	r3, #0
 800760e:	2200      	movs	r2, #0
 8007610:	2100      	movs	r1, #0
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f003 fa5b 	bl	800aace <USBD_LL_Transmit>

  return USBD_OK;
 8007618:	2300      	movs	r3, #0
}
 800761a:	4618      	mov	r0, r3
 800761c:	3708      	adds	r7, #8
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}

08007622 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007622:	b580      	push	{r7, lr}
 8007624:	b082      	sub	sp, #8
 8007626:	af00      	add	r7, sp, #0
 8007628:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2205      	movs	r2, #5
 800762e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007632:	2300      	movs	r3, #0
 8007634:	2200      	movs	r2, #0
 8007636:	2100      	movs	r1, #0
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f003 fa69 	bl	800ab10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800763e:	2300      	movs	r3, #0
}
 8007640:	4618      	mov	r0, r3
 8007642:	3708      	adds	r7, #8
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <__NVIC_SetPriority>:
{
 8007648:	b480      	push	{r7}
 800764a:	b083      	sub	sp, #12
 800764c:	af00      	add	r7, sp, #0
 800764e:	4603      	mov	r3, r0
 8007650:	6039      	str	r1, [r7, #0]
 8007652:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007658:	2b00      	cmp	r3, #0
 800765a:	db0a      	blt.n	8007672 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	b2da      	uxtb	r2, r3
 8007660:	490c      	ldr	r1, [pc, #48]	; (8007694 <__NVIC_SetPriority+0x4c>)
 8007662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007666:	0112      	lsls	r2, r2, #4
 8007668:	b2d2      	uxtb	r2, r2
 800766a:	440b      	add	r3, r1
 800766c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007670:	e00a      	b.n	8007688 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	b2da      	uxtb	r2, r3
 8007676:	4908      	ldr	r1, [pc, #32]	; (8007698 <__NVIC_SetPriority+0x50>)
 8007678:	79fb      	ldrb	r3, [r7, #7]
 800767a:	f003 030f 	and.w	r3, r3, #15
 800767e:	3b04      	subs	r3, #4
 8007680:	0112      	lsls	r2, r2, #4
 8007682:	b2d2      	uxtb	r2, r2
 8007684:	440b      	add	r3, r1
 8007686:	761a      	strb	r2, [r3, #24]
}
 8007688:	bf00      	nop
 800768a:	370c      	adds	r7, #12
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr
 8007694:	e000e100 	.word	0xe000e100
 8007698:	e000ed00 	.word	0xe000ed00

0800769c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800769c:	b580      	push	{r7, lr}
 800769e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80076a0:	4b05      	ldr	r3, [pc, #20]	; (80076b8 <SysTick_Handler+0x1c>)
 80076a2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80076a4:	f001 fd28 	bl	80090f8 <xTaskGetSchedulerState>
 80076a8:	4603      	mov	r3, r0
 80076aa:	2b01      	cmp	r3, #1
 80076ac:	d001      	beq.n	80076b2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80076ae:	f002 fb13 	bl	8009cd8 <xPortSysTickHandler>
  }
}
 80076b2:	bf00      	nop
 80076b4:	bd80      	pop	{r7, pc}
 80076b6:	bf00      	nop
 80076b8:	e000e010 	.word	0xe000e010

080076bc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80076bc:	b580      	push	{r7, lr}
 80076be:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80076c0:	2100      	movs	r1, #0
 80076c2:	f06f 0004 	mvn.w	r0, #4
 80076c6:	f7ff ffbf 	bl	8007648 <__NVIC_SetPriority>
#endif
}
 80076ca:	bf00      	nop
 80076cc:	bd80      	pop	{r7, pc}
	...

080076d0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80076d0:	b480      	push	{r7}
 80076d2:	b083      	sub	sp, #12
 80076d4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076d6:	f3ef 8305 	mrs	r3, IPSR
 80076da:	603b      	str	r3, [r7, #0]
  return(result);
 80076dc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d003      	beq.n	80076ea <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80076e2:	f06f 0305 	mvn.w	r3, #5
 80076e6:	607b      	str	r3, [r7, #4]
 80076e8:	e00c      	b.n	8007704 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80076ea:	4b0a      	ldr	r3, [pc, #40]	; (8007714 <osKernelInitialize+0x44>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d105      	bne.n	80076fe <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80076f2:	4b08      	ldr	r3, [pc, #32]	; (8007714 <osKernelInitialize+0x44>)
 80076f4:	2201      	movs	r2, #1
 80076f6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80076f8:	2300      	movs	r3, #0
 80076fa:	607b      	str	r3, [r7, #4]
 80076fc:	e002      	b.n	8007704 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80076fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007702:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007704:	687b      	ldr	r3, [r7, #4]
}
 8007706:	4618      	mov	r0, r3
 8007708:	370c      	adds	r7, #12
 800770a:	46bd      	mov	sp, r7
 800770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007710:	4770      	bx	lr
 8007712:	bf00      	nop
 8007714:	2000024c 	.word	0x2000024c

08007718 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007718:	b580      	push	{r7, lr}
 800771a:	b082      	sub	sp, #8
 800771c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800771e:	f3ef 8305 	mrs	r3, IPSR
 8007722:	603b      	str	r3, [r7, #0]
  return(result);
 8007724:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007726:	2b00      	cmp	r3, #0
 8007728:	d003      	beq.n	8007732 <osKernelStart+0x1a>
    stat = osErrorISR;
 800772a:	f06f 0305 	mvn.w	r3, #5
 800772e:	607b      	str	r3, [r7, #4]
 8007730:	e010      	b.n	8007754 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007732:	4b0b      	ldr	r3, [pc, #44]	; (8007760 <osKernelStart+0x48>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	2b01      	cmp	r3, #1
 8007738:	d109      	bne.n	800774e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800773a:	f7ff ffbf 	bl	80076bc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800773e:	4b08      	ldr	r3, [pc, #32]	; (8007760 <osKernelStart+0x48>)
 8007740:	2202      	movs	r2, #2
 8007742:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007744:	f001 f87c 	bl	8008840 <vTaskStartScheduler>
      stat = osOK;
 8007748:	2300      	movs	r3, #0
 800774a:	607b      	str	r3, [r7, #4]
 800774c:	e002      	b.n	8007754 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800774e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007752:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007754:	687b      	ldr	r3, [r7, #4]
}
 8007756:	4618      	mov	r0, r3
 8007758:	3708      	adds	r7, #8
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}
 800775e:	bf00      	nop
 8007760:	2000024c 	.word	0x2000024c

08007764 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007764:	b580      	push	{r7, lr}
 8007766:	b08e      	sub	sp, #56	; 0x38
 8007768:	af04      	add	r7, sp, #16
 800776a:	60f8      	str	r0, [r7, #12]
 800776c:	60b9      	str	r1, [r7, #8]
 800776e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007770:	2300      	movs	r3, #0
 8007772:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007774:	f3ef 8305 	mrs	r3, IPSR
 8007778:	617b      	str	r3, [r7, #20]
  return(result);
 800777a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800777c:	2b00      	cmp	r3, #0
 800777e:	d17e      	bne.n	800787e <osThreadNew+0x11a>
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d07b      	beq.n	800787e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007786:	2380      	movs	r3, #128	; 0x80
 8007788:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800778a:	2318      	movs	r3, #24
 800778c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800778e:	2300      	movs	r3, #0
 8007790:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007792:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007796:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d045      	beq.n	800782a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d002      	beq.n	80077ac <osThreadNew+0x48>
        name = attr->name;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	699b      	ldr	r3, [r3, #24]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d002      	beq.n	80077ba <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	699b      	ldr	r3, [r3, #24]
 80077b8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80077ba:	69fb      	ldr	r3, [r7, #28]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d008      	beq.n	80077d2 <osThreadNew+0x6e>
 80077c0:	69fb      	ldr	r3, [r7, #28]
 80077c2:	2b38      	cmp	r3, #56	; 0x38
 80077c4:	d805      	bhi.n	80077d2 <osThreadNew+0x6e>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	f003 0301 	and.w	r3, r3, #1
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d001      	beq.n	80077d6 <osThreadNew+0x72>
        return (NULL);
 80077d2:	2300      	movs	r3, #0
 80077d4:	e054      	b.n	8007880 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	695b      	ldr	r3, [r3, #20]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d003      	beq.n	80077e6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	695b      	ldr	r3, [r3, #20]
 80077e2:	089b      	lsrs	r3, r3, #2
 80077e4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	689b      	ldr	r3, [r3, #8]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d00e      	beq.n	800780c <osThreadNew+0xa8>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	68db      	ldr	r3, [r3, #12]
 80077f2:	2bbb      	cmp	r3, #187	; 0xbb
 80077f4:	d90a      	bls.n	800780c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d006      	beq.n	800780c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	695b      	ldr	r3, [r3, #20]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d002      	beq.n	800780c <osThreadNew+0xa8>
        mem = 1;
 8007806:	2301      	movs	r3, #1
 8007808:	61bb      	str	r3, [r7, #24]
 800780a:	e010      	b.n	800782e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d10c      	bne.n	800782e <osThreadNew+0xca>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	68db      	ldr	r3, [r3, #12]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d108      	bne.n	800782e <osThreadNew+0xca>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	691b      	ldr	r3, [r3, #16]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d104      	bne.n	800782e <osThreadNew+0xca>
          mem = 0;
 8007824:	2300      	movs	r3, #0
 8007826:	61bb      	str	r3, [r7, #24]
 8007828:	e001      	b.n	800782e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800782a:	2300      	movs	r3, #0
 800782c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800782e:	69bb      	ldr	r3, [r7, #24]
 8007830:	2b01      	cmp	r3, #1
 8007832:	d110      	bne.n	8007856 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007838:	687a      	ldr	r2, [r7, #4]
 800783a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800783c:	9202      	str	r2, [sp, #8]
 800783e:	9301      	str	r3, [sp, #4]
 8007840:	69fb      	ldr	r3, [r7, #28]
 8007842:	9300      	str	r3, [sp, #0]
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	6a3a      	ldr	r2, [r7, #32]
 8007848:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800784a:	68f8      	ldr	r0, [r7, #12]
 800784c:	f000 fe0c 	bl	8008468 <xTaskCreateStatic>
 8007850:	4603      	mov	r3, r0
 8007852:	613b      	str	r3, [r7, #16]
 8007854:	e013      	b.n	800787e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007856:	69bb      	ldr	r3, [r7, #24]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d110      	bne.n	800787e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800785c:	6a3b      	ldr	r3, [r7, #32]
 800785e:	b29a      	uxth	r2, r3
 8007860:	f107 0310 	add.w	r3, r7, #16
 8007864:	9301      	str	r3, [sp, #4]
 8007866:	69fb      	ldr	r3, [r7, #28]
 8007868:	9300      	str	r3, [sp, #0]
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800786e:	68f8      	ldr	r0, [r7, #12]
 8007870:	f000 fe57 	bl	8008522 <xTaskCreate>
 8007874:	4603      	mov	r3, r0
 8007876:	2b01      	cmp	r3, #1
 8007878:	d001      	beq.n	800787e <osThreadNew+0x11a>
            hTask = NULL;
 800787a:	2300      	movs	r3, #0
 800787c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800787e:	693b      	ldr	r3, [r7, #16]
}
 8007880:	4618      	mov	r0, r3
 8007882:	3728      	adds	r7, #40	; 0x28
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}

08007888 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007888:	b580      	push	{r7, lr}
 800788a:	b084      	sub	sp, #16
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007890:	f3ef 8305 	mrs	r3, IPSR
 8007894:	60bb      	str	r3, [r7, #8]
  return(result);
 8007896:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007898:	2b00      	cmp	r3, #0
 800789a:	d003      	beq.n	80078a4 <osDelay+0x1c>
    stat = osErrorISR;
 800789c:	f06f 0305 	mvn.w	r3, #5
 80078a0:	60fb      	str	r3, [r7, #12]
 80078a2:	e007      	b.n	80078b4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80078a4:	2300      	movs	r3, #0
 80078a6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d002      	beq.n	80078b4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 ff92 	bl	80087d8 <vTaskDelay>
    }
  }

  return (stat);
 80078b4:	68fb      	ldr	r3, [r7, #12]
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3710      	adds	r7, #16
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}
	...

080078c0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80078c0:	b480      	push	{r7}
 80078c2:	b085      	sub	sp, #20
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	60f8      	str	r0, [r7, #12]
 80078c8:	60b9      	str	r1, [r7, #8]
 80078ca:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	4a07      	ldr	r2, [pc, #28]	; (80078ec <vApplicationGetIdleTaskMemory+0x2c>)
 80078d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	4a06      	ldr	r2, [pc, #24]	; (80078f0 <vApplicationGetIdleTaskMemory+0x30>)
 80078d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2280      	movs	r2, #128	; 0x80
 80078dc:	601a      	str	r2, [r3, #0]
}
 80078de:	bf00      	nop
 80078e0:	3714      	adds	r7, #20
 80078e2:	46bd      	mov	sp, r7
 80078e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e8:	4770      	bx	lr
 80078ea:	bf00      	nop
 80078ec:	20000250 	.word	0x20000250
 80078f0:	2000030c 	.word	0x2000030c

080078f4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80078f4:	b480      	push	{r7}
 80078f6:	b085      	sub	sp, #20
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	60f8      	str	r0, [r7, #12]
 80078fc:	60b9      	str	r1, [r7, #8]
 80078fe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	4a07      	ldr	r2, [pc, #28]	; (8007920 <vApplicationGetTimerTaskMemory+0x2c>)
 8007904:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	4a06      	ldr	r2, [pc, #24]	; (8007924 <vApplicationGetTimerTaskMemory+0x30>)
 800790a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007912:	601a      	str	r2, [r3, #0]
}
 8007914:	bf00      	nop
 8007916:	3714      	adds	r7, #20
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr
 8007920:	2000050c 	.word	0x2000050c
 8007924:	200005c8 	.word	0x200005c8

08007928 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007928:	b480      	push	{r7}
 800792a:	b083      	sub	sp, #12
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f103 0208 	add.w	r2, r3, #8
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007940:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f103 0208 	add.w	r2, r3, #8
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f103 0208 	add.w	r2, r3, #8
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2200      	movs	r2, #0
 800795a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800795c:	bf00      	nop
 800795e:	370c      	adds	r7, #12
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr

08007968 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007968:	b480      	push	{r7}
 800796a:	b083      	sub	sp, #12
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2200      	movs	r2, #0
 8007974:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007976:	bf00      	nop
 8007978:	370c      	adds	r7, #12
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr

08007982 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007982:	b480      	push	{r7}
 8007984:	b085      	sub	sp, #20
 8007986:	af00      	add	r7, sp, #0
 8007988:	6078      	str	r0, [r7, #4]
 800798a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	68fa      	ldr	r2, [r7, #12]
 8007996:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	689a      	ldr	r2, [r3, #8]
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	689b      	ldr	r3, [r3, #8]
 80079a4:	683a      	ldr	r2, [r7, #0]
 80079a6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	683a      	ldr	r2, [r7, #0]
 80079ac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	687a      	ldr	r2, [r7, #4]
 80079b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	1c5a      	adds	r2, r3, #1
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	601a      	str	r2, [r3, #0]
}
 80079be:	bf00      	nop
 80079c0:	3714      	adds	r7, #20
 80079c2:	46bd      	mov	sp, r7
 80079c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c8:	4770      	bx	lr

080079ca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80079ca:	b480      	push	{r7}
 80079cc:	b085      	sub	sp, #20
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	6078      	str	r0, [r7, #4]
 80079d2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079e0:	d103      	bne.n	80079ea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	691b      	ldr	r3, [r3, #16]
 80079e6:	60fb      	str	r3, [r7, #12]
 80079e8:	e00c      	b.n	8007a04 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	3308      	adds	r3, #8
 80079ee:	60fb      	str	r3, [r7, #12]
 80079f0:	e002      	b.n	80079f8 <vListInsert+0x2e>
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	685b      	ldr	r3, [r3, #4]
 80079f6:	60fb      	str	r3, [r7, #12]
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	68ba      	ldr	r2, [r7, #8]
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d2f6      	bcs.n	80079f2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	685a      	ldr	r2, [r3, #4]
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	683a      	ldr	r2, [r7, #0]
 8007a12:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	68fa      	ldr	r2, [r7, #12]
 8007a18:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	683a      	ldr	r2, [r7, #0]
 8007a1e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	1c5a      	adds	r2, r3, #1
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	601a      	str	r2, [r3, #0]
}
 8007a30:	bf00      	nop
 8007a32:	3714      	adds	r7, #20
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr

08007a3c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b085      	sub	sp, #20
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	691b      	ldr	r3, [r3, #16]
 8007a48:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	687a      	ldr	r2, [r7, #4]
 8007a50:	6892      	ldr	r2, [r2, #8]
 8007a52:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	687a      	ldr	r2, [r7, #4]
 8007a5a:	6852      	ldr	r2, [r2, #4]
 8007a5c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	429a      	cmp	r2, r3
 8007a66:	d103      	bne.n	8007a70 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	689a      	ldr	r2, [r3, #8]
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2200      	movs	r2, #0
 8007a74:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	1e5a      	subs	r2, r3, #1
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3714      	adds	r7, #20
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr

08007a90 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b084      	sub	sp, #16
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d10a      	bne.n	8007aba <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa8:	f383 8811 	msr	BASEPRI, r3
 8007aac:	f3bf 8f6f 	isb	sy
 8007ab0:	f3bf 8f4f 	dsb	sy
 8007ab4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007ab6:	bf00      	nop
 8007ab8:	e7fe      	b.n	8007ab8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007aba:	f002 f87b 	bl	8009bb4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681a      	ldr	r2, [r3, #0]
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ac6:	68f9      	ldr	r1, [r7, #12]
 8007ac8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007aca:	fb01 f303 	mul.w	r3, r1, r3
 8007ace:	441a      	add	r2, r3
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681a      	ldr	r2, [r3, #0]
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681a      	ldr	r2, [r3, #0]
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aea:	3b01      	subs	r3, #1
 8007aec:	68f9      	ldr	r1, [r7, #12]
 8007aee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007af0:	fb01 f303 	mul.w	r3, r1, r3
 8007af4:	441a      	add	r2, r3
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	22ff      	movs	r2, #255	; 0xff
 8007afe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	22ff      	movs	r2, #255	; 0xff
 8007b06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d114      	bne.n	8007b3a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	691b      	ldr	r3, [r3, #16]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d01a      	beq.n	8007b4e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	3310      	adds	r3, #16
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f001 f929 	bl	8008d74 <xTaskRemoveFromEventList>
 8007b22:	4603      	mov	r3, r0
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d012      	beq.n	8007b4e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007b28:	4b0c      	ldr	r3, [pc, #48]	; (8007b5c <xQueueGenericReset+0xcc>)
 8007b2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b2e:	601a      	str	r2, [r3, #0]
 8007b30:	f3bf 8f4f 	dsb	sy
 8007b34:	f3bf 8f6f 	isb	sy
 8007b38:	e009      	b.n	8007b4e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	3310      	adds	r3, #16
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f7ff fef2 	bl	8007928 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	3324      	adds	r3, #36	; 0x24
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f7ff feed 	bl	8007928 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007b4e:	f002 f861 	bl	8009c14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007b52:	2301      	movs	r3, #1
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	3710      	adds	r7, #16
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}
 8007b5c:	e000ed04 	.word	0xe000ed04

08007b60 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b08e      	sub	sp, #56	; 0x38
 8007b64:	af02      	add	r7, sp, #8
 8007b66:	60f8      	str	r0, [r7, #12]
 8007b68:	60b9      	str	r1, [r7, #8]
 8007b6a:	607a      	str	r2, [r7, #4]
 8007b6c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d10a      	bne.n	8007b8a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b78:	f383 8811 	msr	BASEPRI, r3
 8007b7c:	f3bf 8f6f 	isb	sy
 8007b80:	f3bf 8f4f 	dsb	sy
 8007b84:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007b86:	bf00      	nop
 8007b88:	e7fe      	b.n	8007b88 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d10a      	bne.n	8007ba6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b94:	f383 8811 	msr	BASEPRI, r3
 8007b98:	f3bf 8f6f 	isb	sy
 8007b9c:	f3bf 8f4f 	dsb	sy
 8007ba0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007ba2:	bf00      	nop
 8007ba4:	e7fe      	b.n	8007ba4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d002      	beq.n	8007bb2 <xQueueGenericCreateStatic+0x52>
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d001      	beq.n	8007bb6 <xQueueGenericCreateStatic+0x56>
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	e000      	b.n	8007bb8 <xQueueGenericCreateStatic+0x58>
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d10a      	bne.n	8007bd2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc0:	f383 8811 	msr	BASEPRI, r3
 8007bc4:	f3bf 8f6f 	isb	sy
 8007bc8:	f3bf 8f4f 	dsb	sy
 8007bcc:	623b      	str	r3, [r7, #32]
}
 8007bce:	bf00      	nop
 8007bd0:	e7fe      	b.n	8007bd0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d102      	bne.n	8007bde <xQueueGenericCreateStatic+0x7e>
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d101      	bne.n	8007be2 <xQueueGenericCreateStatic+0x82>
 8007bde:	2301      	movs	r3, #1
 8007be0:	e000      	b.n	8007be4 <xQueueGenericCreateStatic+0x84>
 8007be2:	2300      	movs	r3, #0
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d10a      	bne.n	8007bfe <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bec:	f383 8811 	msr	BASEPRI, r3
 8007bf0:	f3bf 8f6f 	isb	sy
 8007bf4:	f3bf 8f4f 	dsb	sy
 8007bf8:	61fb      	str	r3, [r7, #28]
}
 8007bfa:	bf00      	nop
 8007bfc:	e7fe      	b.n	8007bfc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007bfe:	2350      	movs	r3, #80	; 0x50
 8007c00:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	2b50      	cmp	r3, #80	; 0x50
 8007c06:	d00a      	beq.n	8007c1e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c0c:	f383 8811 	msr	BASEPRI, r3
 8007c10:	f3bf 8f6f 	isb	sy
 8007c14:	f3bf 8f4f 	dsb	sy
 8007c18:	61bb      	str	r3, [r7, #24]
}
 8007c1a:	bf00      	nop
 8007c1c:	e7fe      	b.n	8007c1c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007c1e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d00d      	beq.n	8007c46 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c2c:	2201      	movs	r2, #1
 8007c2e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007c32:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c38:	9300      	str	r3, [sp, #0]
 8007c3a:	4613      	mov	r3, r2
 8007c3c:	687a      	ldr	r2, [r7, #4]
 8007c3e:	68b9      	ldr	r1, [r7, #8]
 8007c40:	68f8      	ldr	r0, [r7, #12]
 8007c42:	f000 f805 	bl	8007c50 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3730      	adds	r7, #48	; 0x30
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b084      	sub	sp, #16
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	60f8      	str	r0, [r7, #12]
 8007c58:	60b9      	str	r1, [r7, #8]
 8007c5a:	607a      	str	r2, [r7, #4]
 8007c5c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d103      	bne.n	8007c6c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007c64:	69bb      	ldr	r3, [r7, #24]
 8007c66:	69ba      	ldr	r2, [r7, #24]
 8007c68:	601a      	str	r2, [r3, #0]
 8007c6a:	e002      	b.n	8007c72 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007c6c:	69bb      	ldr	r3, [r7, #24]
 8007c6e:	687a      	ldr	r2, [r7, #4]
 8007c70:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007c72:	69bb      	ldr	r3, [r7, #24]
 8007c74:	68fa      	ldr	r2, [r7, #12]
 8007c76:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007c78:	69bb      	ldr	r3, [r7, #24]
 8007c7a:	68ba      	ldr	r2, [r7, #8]
 8007c7c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007c7e:	2101      	movs	r1, #1
 8007c80:	69b8      	ldr	r0, [r7, #24]
 8007c82:	f7ff ff05 	bl	8007a90 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007c86:	69bb      	ldr	r3, [r7, #24]
 8007c88:	78fa      	ldrb	r2, [r7, #3]
 8007c8a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007c8e:	bf00      	nop
 8007c90:	3710      	adds	r7, #16
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
	...

08007c98 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b08e      	sub	sp, #56	; 0x38
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	60f8      	str	r0, [r7, #12]
 8007ca0:	60b9      	str	r1, [r7, #8]
 8007ca2:	607a      	str	r2, [r7, #4]
 8007ca4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d10a      	bne.n	8007cca <xQueueGenericSend+0x32>
	__asm volatile
 8007cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb8:	f383 8811 	msr	BASEPRI, r3
 8007cbc:	f3bf 8f6f 	isb	sy
 8007cc0:	f3bf 8f4f 	dsb	sy
 8007cc4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007cc6:	bf00      	nop
 8007cc8:	e7fe      	b.n	8007cc8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d103      	bne.n	8007cd8 <xQueueGenericSend+0x40>
 8007cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d101      	bne.n	8007cdc <xQueueGenericSend+0x44>
 8007cd8:	2301      	movs	r3, #1
 8007cda:	e000      	b.n	8007cde <xQueueGenericSend+0x46>
 8007cdc:	2300      	movs	r3, #0
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d10a      	bne.n	8007cf8 <xQueueGenericSend+0x60>
	__asm volatile
 8007ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce6:	f383 8811 	msr	BASEPRI, r3
 8007cea:	f3bf 8f6f 	isb	sy
 8007cee:	f3bf 8f4f 	dsb	sy
 8007cf2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007cf4:	bf00      	nop
 8007cf6:	e7fe      	b.n	8007cf6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	2b02      	cmp	r3, #2
 8007cfc:	d103      	bne.n	8007d06 <xQueueGenericSend+0x6e>
 8007cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	d101      	bne.n	8007d0a <xQueueGenericSend+0x72>
 8007d06:	2301      	movs	r3, #1
 8007d08:	e000      	b.n	8007d0c <xQueueGenericSend+0x74>
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d10a      	bne.n	8007d26 <xQueueGenericSend+0x8e>
	__asm volatile
 8007d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d14:	f383 8811 	msr	BASEPRI, r3
 8007d18:	f3bf 8f6f 	isb	sy
 8007d1c:	f3bf 8f4f 	dsb	sy
 8007d20:	623b      	str	r3, [r7, #32]
}
 8007d22:	bf00      	nop
 8007d24:	e7fe      	b.n	8007d24 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007d26:	f001 f9e7 	bl	80090f8 <xTaskGetSchedulerState>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d102      	bne.n	8007d36 <xQueueGenericSend+0x9e>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d101      	bne.n	8007d3a <xQueueGenericSend+0xa2>
 8007d36:	2301      	movs	r3, #1
 8007d38:	e000      	b.n	8007d3c <xQueueGenericSend+0xa4>
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d10a      	bne.n	8007d56 <xQueueGenericSend+0xbe>
	__asm volatile
 8007d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d44:	f383 8811 	msr	BASEPRI, r3
 8007d48:	f3bf 8f6f 	isb	sy
 8007d4c:	f3bf 8f4f 	dsb	sy
 8007d50:	61fb      	str	r3, [r7, #28]
}
 8007d52:	bf00      	nop
 8007d54:	e7fe      	b.n	8007d54 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007d56:	f001 ff2d 	bl	8009bb4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d62:	429a      	cmp	r2, r3
 8007d64:	d302      	bcc.n	8007d6c <xQueueGenericSend+0xd4>
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	2b02      	cmp	r3, #2
 8007d6a:	d129      	bne.n	8007dc0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007d6c:	683a      	ldr	r2, [r7, #0]
 8007d6e:	68b9      	ldr	r1, [r7, #8]
 8007d70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d72:	f000 fa0b 	bl	800818c <prvCopyDataToQueue>
 8007d76:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d010      	beq.n	8007da2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d82:	3324      	adds	r3, #36	; 0x24
 8007d84:	4618      	mov	r0, r3
 8007d86:	f000 fff5 	bl	8008d74 <xTaskRemoveFromEventList>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d013      	beq.n	8007db8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007d90:	4b3f      	ldr	r3, [pc, #252]	; (8007e90 <xQueueGenericSend+0x1f8>)
 8007d92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d96:	601a      	str	r2, [r3, #0]
 8007d98:	f3bf 8f4f 	dsb	sy
 8007d9c:	f3bf 8f6f 	isb	sy
 8007da0:	e00a      	b.n	8007db8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d007      	beq.n	8007db8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007da8:	4b39      	ldr	r3, [pc, #228]	; (8007e90 <xQueueGenericSend+0x1f8>)
 8007daa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dae:	601a      	str	r2, [r3, #0]
 8007db0:	f3bf 8f4f 	dsb	sy
 8007db4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007db8:	f001 ff2c 	bl	8009c14 <vPortExitCritical>
				return pdPASS;
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	e063      	b.n	8007e88 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d103      	bne.n	8007dce <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007dc6:	f001 ff25 	bl	8009c14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	e05c      	b.n	8007e88 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d106      	bne.n	8007de2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007dd4:	f107 0314 	add.w	r3, r7, #20
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f001 f82f 	bl	8008e3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007dde:	2301      	movs	r3, #1
 8007de0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007de2:	f001 ff17 	bl	8009c14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007de6:	f000 fd9b 	bl	8008920 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007dea:	f001 fee3 	bl	8009bb4 <vPortEnterCritical>
 8007dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007df4:	b25b      	sxtb	r3, r3
 8007df6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007dfa:	d103      	bne.n	8007e04 <xQueueGenericSend+0x16c>
 8007dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dfe:	2200      	movs	r2, #0
 8007e00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e0a:	b25b      	sxtb	r3, r3
 8007e0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e10:	d103      	bne.n	8007e1a <xQueueGenericSend+0x182>
 8007e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e14:	2200      	movs	r2, #0
 8007e16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e1a:	f001 fefb 	bl	8009c14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007e1e:	1d3a      	adds	r2, r7, #4
 8007e20:	f107 0314 	add.w	r3, r7, #20
 8007e24:	4611      	mov	r1, r2
 8007e26:	4618      	mov	r0, r3
 8007e28:	f001 f81e 	bl	8008e68 <xTaskCheckForTimeOut>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d124      	bne.n	8007e7c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007e32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e34:	f000 faa2 	bl	800837c <prvIsQueueFull>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d018      	beq.n	8007e70 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e40:	3310      	adds	r3, #16
 8007e42:	687a      	ldr	r2, [r7, #4]
 8007e44:	4611      	mov	r1, r2
 8007e46:	4618      	mov	r0, r3
 8007e48:	f000 ff44 	bl	8008cd4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007e4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e4e:	f000 fa2d 	bl	80082ac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007e52:	f000 fd73 	bl	800893c <xTaskResumeAll>
 8007e56:	4603      	mov	r3, r0
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	f47f af7c 	bne.w	8007d56 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007e5e:	4b0c      	ldr	r3, [pc, #48]	; (8007e90 <xQueueGenericSend+0x1f8>)
 8007e60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e64:	601a      	str	r2, [r3, #0]
 8007e66:	f3bf 8f4f 	dsb	sy
 8007e6a:	f3bf 8f6f 	isb	sy
 8007e6e:	e772      	b.n	8007d56 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007e70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e72:	f000 fa1b 	bl	80082ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007e76:	f000 fd61 	bl	800893c <xTaskResumeAll>
 8007e7a:	e76c      	b.n	8007d56 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007e7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e7e:	f000 fa15 	bl	80082ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007e82:	f000 fd5b 	bl	800893c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007e86:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3738      	adds	r7, #56	; 0x38
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}
 8007e90:	e000ed04 	.word	0xe000ed04

08007e94 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b090      	sub	sp, #64	; 0x40
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	60f8      	str	r0, [r7, #12]
 8007e9c:	60b9      	str	r1, [r7, #8]
 8007e9e:	607a      	str	r2, [r7, #4]
 8007ea0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d10a      	bne.n	8007ec2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb0:	f383 8811 	msr	BASEPRI, r3
 8007eb4:	f3bf 8f6f 	isb	sy
 8007eb8:	f3bf 8f4f 	dsb	sy
 8007ebc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007ebe:	bf00      	nop
 8007ec0:	e7fe      	b.n	8007ec0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d103      	bne.n	8007ed0 <xQueueGenericSendFromISR+0x3c>
 8007ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d101      	bne.n	8007ed4 <xQueueGenericSendFromISR+0x40>
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	e000      	b.n	8007ed6 <xQueueGenericSendFromISR+0x42>
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d10a      	bne.n	8007ef0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ede:	f383 8811 	msr	BASEPRI, r3
 8007ee2:	f3bf 8f6f 	isb	sy
 8007ee6:	f3bf 8f4f 	dsb	sy
 8007eea:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007eec:	bf00      	nop
 8007eee:	e7fe      	b.n	8007eee <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	2b02      	cmp	r3, #2
 8007ef4:	d103      	bne.n	8007efe <xQueueGenericSendFromISR+0x6a>
 8007ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007efa:	2b01      	cmp	r3, #1
 8007efc:	d101      	bne.n	8007f02 <xQueueGenericSendFromISR+0x6e>
 8007efe:	2301      	movs	r3, #1
 8007f00:	e000      	b.n	8007f04 <xQueueGenericSendFromISR+0x70>
 8007f02:	2300      	movs	r3, #0
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d10a      	bne.n	8007f1e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f0c:	f383 8811 	msr	BASEPRI, r3
 8007f10:	f3bf 8f6f 	isb	sy
 8007f14:	f3bf 8f4f 	dsb	sy
 8007f18:	623b      	str	r3, [r7, #32]
}
 8007f1a:	bf00      	nop
 8007f1c:	e7fe      	b.n	8007f1c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007f1e:	f001 ff2b 	bl	8009d78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007f22:	f3ef 8211 	mrs	r2, BASEPRI
 8007f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f2a:	f383 8811 	msr	BASEPRI, r3
 8007f2e:	f3bf 8f6f 	isb	sy
 8007f32:	f3bf 8f4f 	dsb	sy
 8007f36:	61fa      	str	r2, [r7, #28]
 8007f38:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007f3a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007f3c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f46:	429a      	cmp	r2, r3
 8007f48:	d302      	bcc.n	8007f50 <xQueueGenericSendFromISR+0xbc>
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	2b02      	cmp	r3, #2
 8007f4e:	d12f      	bne.n	8007fb0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007f60:	683a      	ldr	r2, [r7, #0]
 8007f62:	68b9      	ldr	r1, [r7, #8]
 8007f64:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007f66:	f000 f911 	bl	800818c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007f6a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007f6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f72:	d112      	bne.n	8007f9a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d016      	beq.n	8007faa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f7e:	3324      	adds	r3, #36	; 0x24
 8007f80:	4618      	mov	r0, r3
 8007f82:	f000 fef7 	bl	8008d74 <xTaskRemoveFromEventList>
 8007f86:	4603      	mov	r3, r0
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d00e      	beq.n	8007faa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d00b      	beq.n	8007faa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2201      	movs	r2, #1
 8007f96:	601a      	str	r2, [r3, #0]
 8007f98:	e007      	b.n	8007faa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007f9a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007f9e:	3301      	adds	r3, #1
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	b25a      	sxtb	r2, r3
 8007fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fa6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007faa:	2301      	movs	r3, #1
 8007fac:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007fae:	e001      	b.n	8007fb4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fb6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007fbe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007fc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3740      	adds	r7, #64	; 0x40
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}
	...

08007fcc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b08c      	sub	sp, #48	; 0x30
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	60f8      	str	r0, [r7, #12]
 8007fd4:	60b9      	str	r1, [r7, #8]
 8007fd6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d10a      	bne.n	8007ffc <xQueueReceive+0x30>
	__asm volatile
 8007fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fea:	f383 8811 	msr	BASEPRI, r3
 8007fee:	f3bf 8f6f 	isb	sy
 8007ff2:	f3bf 8f4f 	dsb	sy
 8007ff6:	623b      	str	r3, [r7, #32]
}
 8007ff8:	bf00      	nop
 8007ffa:	e7fe      	b.n	8007ffa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d103      	bne.n	800800a <xQueueReceive+0x3e>
 8008002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008006:	2b00      	cmp	r3, #0
 8008008:	d101      	bne.n	800800e <xQueueReceive+0x42>
 800800a:	2301      	movs	r3, #1
 800800c:	e000      	b.n	8008010 <xQueueReceive+0x44>
 800800e:	2300      	movs	r3, #0
 8008010:	2b00      	cmp	r3, #0
 8008012:	d10a      	bne.n	800802a <xQueueReceive+0x5e>
	__asm volatile
 8008014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008018:	f383 8811 	msr	BASEPRI, r3
 800801c:	f3bf 8f6f 	isb	sy
 8008020:	f3bf 8f4f 	dsb	sy
 8008024:	61fb      	str	r3, [r7, #28]
}
 8008026:	bf00      	nop
 8008028:	e7fe      	b.n	8008028 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800802a:	f001 f865 	bl	80090f8 <xTaskGetSchedulerState>
 800802e:	4603      	mov	r3, r0
 8008030:	2b00      	cmp	r3, #0
 8008032:	d102      	bne.n	800803a <xQueueReceive+0x6e>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d101      	bne.n	800803e <xQueueReceive+0x72>
 800803a:	2301      	movs	r3, #1
 800803c:	e000      	b.n	8008040 <xQueueReceive+0x74>
 800803e:	2300      	movs	r3, #0
 8008040:	2b00      	cmp	r3, #0
 8008042:	d10a      	bne.n	800805a <xQueueReceive+0x8e>
	__asm volatile
 8008044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008048:	f383 8811 	msr	BASEPRI, r3
 800804c:	f3bf 8f6f 	isb	sy
 8008050:	f3bf 8f4f 	dsb	sy
 8008054:	61bb      	str	r3, [r7, #24]
}
 8008056:	bf00      	nop
 8008058:	e7fe      	b.n	8008058 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800805a:	f001 fdab 	bl	8009bb4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800805e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008062:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008066:	2b00      	cmp	r3, #0
 8008068:	d01f      	beq.n	80080aa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800806a:	68b9      	ldr	r1, [r7, #8]
 800806c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800806e:	f000 f8f7 	bl	8008260 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008074:	1e5a      	subs	r2, r3, #1
 8008076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008078:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800807a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800807c:	691b      	ldr	r3, [r3, #16]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d00f      	beq.n	80080a2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008084:	3310      	adds	r3, #16
 8008086:	4618      	mov	r0, r3
 8008088:	f000 fe74 	bl	8008d74 <xTaskRemoveFromEventList>
 800808c:	4603      	mov	r3, r0
 800808e:	2b00      	cmp	r3, #0
 8008090:	d007      	beq.n	80080a2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008092:	4b3d      	ldr	r3, [pc, #244]	; (8008188 <xQueueReceive+0x1bc>)
 8008094:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008098:	601a      	str	r2, [r3, #0]
 800809a:	f3bf 8f4f 	dsb	sy
 800809e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80080a2:	f001 fdb7 	bl	8009c14 <vPortExitCritical>
				return pdPASS;
 80080a6:	2301      	movs	r3, #1
 80080a8:	e069      	b.n	800817e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d103      	bne.n	80080b8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80080b0:	f001 fdb0 	bl	8009c14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80080b4:	2300      	movs	r3, #0
 80080b6:	e062      	b.n	800817e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80080b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d106      	bne.n	80080cc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80080be:	f107 0310 	add.w	r3, r7, #16
 80080c2:	4618      	mov	r0, r3
 80080c4:	f000 feba 	bl	8008e3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80080c8:	2301      	movs	r3, #1
 80080ca:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80080cc:	f001 fda2 	bl	8009c14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80080d0:	f000 fc26 	bl	8008920 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80080d4:	f001 fd6e 	bl	8009bb4 <vPortEnterCritical>
 80080d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80080de:	b25b      	sxtb	r3, r3
 80080e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080e4:	d103      	bne.n	80080ee <xQueueReceive+0x122>
 80080e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080e8:	2200      	movs	r2, #0
 80080ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80080ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80080f4:	b25b      	sxtb	r3, r3
 80080f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080fa:	d103      	bne.n	8008104 <xQueueReceive+0x138>
 80080fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080fe:	2200      	movs	r2, #0
 8008100:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008104:	f001 fd86 	bl	8009c14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008108:	1d3a      	adds	r2, r7, #4
 800810a:	f107 0310 	add.w	r3, r7, #16
 800810e:	4611      	mov	r1, r2
 8008110:	4618      	mov	r0, r3
 8008112:	f000 fea9 	bl	8008e68 <xTaskCheckForTimeOut>
 8008116:	4603      	mov	r3, r0
 8008118:	2b00      	cmp	r3, #0
 800811a:	d123      	bne.n	8008164 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800811c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800811e:	f000 f917 	bl	8008350 <prvIsQueueEmpty>
 8008122:	4603      	mov	r3, r0
 8008124:	2b00      	cmp	r3, #0
 8008126:	d017      	beq.n	8008158 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800812a:	3324      	adds	r3, #36	; 0x24
 800812c:	687a      	ldr	r2, [r7, #4]
 800812e:	4611      	mov	r1, r2
 8008130:	4618      	mov	r0, r3
 8008132:	f000 fdcf 	bl	8008cd4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008136:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008138:	f000 f8b8 	bl	80082ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800813c:	f000 fbfe 	bl	800893c <xTaskResumeAll>
 8008140:	4603      	mov	r3, r0
 8008142:	2b00      	cmp	r3, #0
 8008144:	d189      	bne.n	800805a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008146:	4b10      	ldr	r3, [pc, #64]	; (8008188 <xQueueReceive+0x1bc>)
 8008148:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800814c:	601a      	str	r2, [r3, #0]
 800814e:	f3bf 8f4f 	dsb	sy
 8008152:	f3bf 8f6f 	isb	sy
 8008156:	e780      	b.n	800805a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008158:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800815a:	f000 f8a7 	bl	80082ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800815e:	f000 fbed 	bl	800893c <xTaskResumeAll>
 8008162:	e77a      	b.n	800805a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008164:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008166:	f000 f8a1 	bl	80082ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800816a:	f000 fbe7 	bl	800893c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800816e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008170:	f000 f8ee 	bl	8008350 <prvIsQueueEmpty>
 8008174:	4603      	mov	r3, r0
 8008176:	2b00      	cmp	r3, #0
 8008178:	f43f af6f 	beq.w	800805a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800817c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800817e:	4618      	mov	r0, r3
 8008180:	3730      	adds	r7, #48	; 0x30
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
 8008186:	bf00      	nop
 8008188:	e000ed04 	.word	0xe000ed04

0800818c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b086      	sub	sp, #24
 8008190:	af00      	add	r7, sp, #0
 8008192:	60f8      	str	r0, [r7, #12]
 8008194:	60b9      	str	r1, [r7, #8]
 8008196:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008198:	2300      	movs	r3, #0
 800819a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081a0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d10d      	bne.n	80081c6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d14d      	bne.n	800824e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	689b      	ldr	r3, [r3, #8]
 80081b6:	4618      	mov	r0, r3
 80081b8:	f000 ffbc 	bl	8009134 <xTaskPriorityDisinherit>
 80081bc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	2200      	movs	r2, #0
 80081c2:	609a      	str	r2, [r3, #8]
 80081c4:	e043      	b.n	800824e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d119      	bne.n	8008200 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	6858      	ldr	r0, [r3, #4]
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081d4:	461a      	mov	r2, r3
 80081d6:	68b9      	ldr	r1, [r7, #8]
 80081d8:	f002 fe02 	bl	800ade0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	685a      	ldr	r2, [r3, #4]
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081e4:	441a      	add	r2, r3
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	685a      	ldr	r2, [r3, #4]
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	689b      	ldr	r3, [r3, #8]
 80081f2:	429a      	cmp	r2, r3
 80081f4:	d32b      	bcc.n	800824e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681a      	ldr	r2, [r3, #0]
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	605a      	str	r2, [r3, #4]
 80081fe:	e026      	b.n	800824e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	68d8      	ldr	r0, [r3, #12]
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008208:	461a      	mov	r2, r3
 800820a:	68b9      	ldr	r1, [r7, #8]
 800820c:	f002 fde8 	bl	800ade0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	68da      	ldr	r2, [r3, #12]
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008218:	425b      	negs	r3, r3
 800821a:	441a      	add	r2, r3
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	68da      	ldr	r2, [r3, #12]
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	429a      	cmp	r2, r3
 800822a:	d207      	bcs.n	800823c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	689a      	ldr	r2, [r3, #8]
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008234:	425b      	negs	r3, r3
 8008236:	441a      	add	r2, r3
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2b02      	cmp	r3, #2
 8008240:	d105      	bne.n	800824e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d002      	beq.n	800824e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	3b01      	subs	r3, #1
 800824c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	1c5a      	adds	r2, r3, #1
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008256:	697b      	ldr	r3, [r7, #20]
}
 8008258:	4618      	mov	r0, r3
 800825a:	3718      	adds	r7, #24
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b082      	sub	sp, #8
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800826e:	2b00      	cmp	r3, #0
 8008270:	d018      	beq.n	80082a4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	68da      	ldr	r2, [r3, #12]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800827a:	441a      	add	r2, r3
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	68da      	ldr	r2, [r3, #12]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	689b      	ldr	r3, [r3, #8]
 8008288:	429a      	cmp	r2, r3
 800828a:	d303      	bcc.n	8008294 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681a      	ldr	r2, [r3, #0]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	68d9      	ldr	r1, [r3, #12]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800829c:	461a      	mov	r2, r3
 800829e:	6838      	ldr	r0, [r7, #0]
 80082a0:	f002 fd9e 	bl	800ade0 <memcpy>
	}
}
 80082a4:	bf00      	nop
 80082a6:	3708      	adds	r7, #8
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}

080082ac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b084      	sub	sp, #16
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80082b4:	f001 fc7e 	bl	8009bb4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80082be:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80082c0:	e011      	b.n	80082e6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d012      	beq.n	80082f0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	3324      	adds	r3, #36	; 0x24
 80082ce:	4618      	mov	r0, r3
 80082d0:	f000 fd50 	bl	8008d74 <xTaskRemoveFromEventList>
 80082d4:	4603      	mov	r3, r0
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d001      	beq.n	80082de <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80082da:	f000 fe27 	bl	8008f2c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80082de:	7bfb      	ldrb	r3, [r7, #15]
 80082e0:	3b01      	subs	r3, #1
 80082e2:	b2db      	uxtb	r3, r3
 80082e4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80082e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	dce9      	bgt.n	80082c2 <prvUnlockQueue+0x16>
 80082ee:	e000      	b.n	80082f2 <prvUnlockQueue+0x46>
					break;
 80082f0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	22ff      	movs	r2, #255	; 0xff
 80082f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80082fa:	f001 fc8b 	bl	8009c14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80082fe:	f001 fc59 	bl	8009bb4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008308:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800830a:	e011      	b.n	8008330 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	691b      	ldr	r3, [r3, #16]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d012      	beq.n	800833a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	3310      	adds	r3, #16
 8008318:	4618      	mov	r0, r3
 800831a:	f000 fd2b 	bl	8008d74 <xTaskRemoveFromEventList>
 800831e:	4603      	mov	r3, r0
 8008320:	2b00      	cmp	r3, #0
 8008322:	d001      	beq.n	8008328 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008324:	f000 fe02 	bl	8008f2c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008328:	7bbb      	ldrb	r3, [r7, #14]
 800832a:	3b01      	subs	r3, #1
 800832c:	b2db      	uxtb	r3, r3
 800832e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008330:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008334:	2b00      	cmp	r3, #0
 8008336:	dce9      	bgt.n	800830c <prvUnlockQueue+0x60>
 8008338:	e000      	b.n	800833c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800833a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	22ff      	movs	r2, #255	; 0xff
 8008340:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008344:	f001 fc66 	bl	8009c14 <vPortExitCritical>
}
 8008348:	bf00      	nop
 800834a:	3710      	adds	r7, #16
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}

08008350 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b084      	sub	sp, #16
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008358:	f001 fc2c 	bl	8009bb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008360:	2b00      	cmp	r3, #0
 8008362:	d102      	bne.n	800836a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008364:	2301      	movs	r3, #1
 8008366:	60fb      	str	r3, [r7, #12]
 8008368:	e001      	b.n	800836e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800836a:	2300      	movs	r3, #0
 800836c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800836e:	f001 fc51 	bl	8009c14 <vPortExitCritical>

	return xReturn;
 8008372:	68fb      	ldr	r3, [r7, #12]
}
 8008374:	4618      	mov	r0, r3
 8008376:	3710      	adds	r7, #16
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}

0800837c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b084      	sub	sp, #16
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008384:	f001 fc16 	bl	8009bb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008390:	429a      	cmp	r2, r3
 8008392:	d102      	bne.n	800839a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008394:	2301      	movs	r3, #1
 8008396:	60fb      	str	r3, [r7, #12]
 8008398:	e001      	b.n	800839e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800839a:	2300      	movs	r3, #0
 800839c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800839e:	f001 fc39 	bl	8009c14 <vPortExitCritical>

	return xReturn;
 80083a2:	68fb      	ldr	r3, [r7, #12]
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3710      	adds	r7, #16
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}

080083ac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80083ac:	b480      	push	{r7}
 80083ae:	b085      	sub	sp, #20
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80083b6:	2300      	movs	r3, #0
 80083b8:	60fb      	str	r3, [r7, #12]
 80083ba:	e014      	b.n	80083e6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80083bc:	4a0f      	ldr	r2, [pc, #60]	; (80083fc <vQueueAddToRegistry+0x50>)
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d10b      	bne.n	80083e0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80083c8:	490c      	ldr	r1, [pc, #48]	; (80083fc <vQueueAddToRegistry+0x50>)
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	683a      	ldr	r2, [r7, #0]
 80083ce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80083d2:	4a0a      	ldr	r2, [pc, #40]	; (80083fc <vQueueAddToRegistry+0x50>)
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	00db      	lsls	r3, r3, #3
 80083d8:	4413      	add	r3, r2
 80083da:	687a      	ldr	r2, [r7, #4]
 80083dc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80083de:	e006      	b.n	80083ee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	3301      	adds	r3, #1
 80083e4:	60fb      	str	r3, [r7, #12]
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	2b07      	cmp	r3, #7
 80083ea:	d9e7      	bls.n	80083bc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80083ec:	bf00      	nop
 80083ee:	bf00      	nop
 80083f0:	3714      	adds	r7, #20
 80083f2:	46bd      	mov	sp, r7
 80083f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f8:	4770      	bx	lr
 80083fa:	bf00      	nop
 80083fc:	200009c8 	.word	0x200009c8

08008400 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008400:	b580      	push	{r7, lr}
 8008402:	b086      	sub	sp, #24
 8008404:	af00      	add	r7, sp, #0
 8008406:	60f8      	str	r0, [r7, #12]
 8008408:	60b9      	str	r1, [r7, #8]
 800840a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008410:	f001 fbd0 	bl	8009bb4 <vPortEnterCritical>
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800841a:	b25b      	sxtb	r3, r3
 800841c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008420:	d103      	bne.n	800842a <vQueueWaitForMessageRestricted+0x2a>
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	2200      	movs	r2, #0
 8008426:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008430:	b25b      	sxtb	r3, r3
 8008432:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008436:	d103      	bne.n	8008440 <vQueueWaitForMessageRestricted+0x40>
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	2200      	movs	r2, #0
 800843c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008440:	f001 fbe8 	bl	8009c14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008448:	2b00      	cmp	r3, #0
 800844a:	d106      	bne.n	800845a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	3324      	adds	r3, #36	; 0x24
 8008450:	687a      	ldr	r2, [r7, #4]
 8008452:	68b9      	ldr	r1, [r7, #8]
 8008454:	4618      	mov	r0, r3
 8008456:	f000 fc61 	bl	8008d1c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800845a:	6978      	ldr	r0, [r7, #20]
 800845c:	f7ff ff26 	bl	80082ac <prvUnlockQueue>
	}
 8008460:	bf00      	nop
 8008462:	3718      	adds	r7, #24
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}

08008468 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008468:	b580      	push	{r7, lr}
 800846a:	b08e      	sub	sp, #56	; 0x38
 800846c:	af04      	add	r7, sp, #16
 800846e:	60f8      	str	r0, [r7, #12]
 8008470:	60b9      	str	r1, [r7, #8]
 8008472:	607a      	str	r2, [r7, #4]
 8008474:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008478:	2b00      	cmp	r3, #0
 800847a:	d10a      	bne.n	8008492 <xTaskCreateStatic+0x2a>
	__asm volatile
 800847c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008480:	f383 8811 	msr	BASEPRI, r3
 8008484:	f3bf 8f6f 	isb	sy
 8008488:	f3bf 8f4f 	dsb	sy
 800848c:	623b      	str	r3, [r7, #32]
}
 800848e:	bf00      	nop
 8008490:	e7fe      	b.n	8008490 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008494:	2b00      	cmp	r3, #0
 8008496:	d10a      	bne.n	80084ae <xTaskCreateStatic+0x46>
	__asm volatile
 8008498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800849c:	f383 8811 	msr	BASEPRI, r3
 80084a0:	f3bf 8f6f 	isb	sy
 80084a4:	f3bf 8f4f 	dsb	sy
 80084a8:	61fb      	str	r3, [r7, #28]
}
 80084aa:	bf00      	nop
 80084ac:	e7fe      	b.n	80084ac <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80084ae:	23bc      	movs	r3, #188	; 0xbc
 80084b0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	2bbc      	cmp	r3, #188	; 0xbc
 80084b6:	d00a      	beq.n	80084ce <xTaskCreateStatic+0x66>
	__asm volatile
 80084b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084bc:	f383 8811 	msr	BASEPRI, r3
 80084c0:	f3bf 8f6f 	isb	sy
 80084c4:	f3bf 8f4f 	dsb	sy
 80084c8:	61bb      	str	r3, [r7, #24]
}
 80084ca:	bf00      	nop
 80084cc:	e7fe      	b.n	80084cc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80084ce:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80084d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d01e      	beq.n	8008514 <xTaskCreateStatic+0xac>
 80084d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d01b      	beq.n	8008514 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80084dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084de:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80084e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80084e4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80084e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e8:	2202      	movs	r2, #2
 80084ea:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80084ee:	2300      	movs	r3, #0
 80084f0:	9303      	str	r3, [sp, #12]
 80084f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f4:	9302      	str	r3, [sp, #8]
 80084f6:	f107 0314 	add.w	r3, r7, #20
 80084fa:	9301      	str	r3, [sp, #4]
 80084fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084fe:	9300      	str	r3, [sp, #0]
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	687a      	ldr	r2, [r7, #4]
 8008504:	68b9      	ldr	r1, [r7, #8]
 8008506:	68f8      	ldr	r0, [r7, #12]
 8008508:	f000 f850 	bl	80085ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800850c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800850e:	f000 f8f3 	bl	80086f8 <prvAddNewTaskToReadyList>
 8008512:	e001      	b.n	8008518 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008514:	2300      	movs	r3, #0
 8008516:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008518:	697b      	ldr	r3, [r7, #20]
	}
 800851a:	4618      	mov	r0, r3
 800851c:	3728      	adds	r7, #40	; 0x28
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}

08008522 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008522:	b580      	push	{r7, lr}
 8008524:	b08c      	sub	sp, #48	; 0x30
 8008526:	af04      	add	r7, sp, #16
 8008528:	60f8      	str	r0, [r7, #12]
 800852a:	60b9      	str	r1, [r7, #8]
 800852c:	603b      	str	r3, [r7, #0]
 800852e:	4613      	mov	r3, r2
 8008530:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008532:	88fb      	ldrh	r3, [r7, #6]
 8008534:	009b      	lsls	r3, r3, #2
 8008536:	4618      	mov	r0, r3
 8008538:	f001 fc5e 	bl	8009df8 <pvPortMalloc>
 800853c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d00e      	beq.n	8008562 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008544:	20bc      	movs	r0, #188	; 0xbc
 8008546:	f001 fc57 	bl	8009df8 <pvPortMalloc>
 800854a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800854c:	69fb      	ldr	r3, [r7, #28]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d003      	beq.n	800855a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008552:	69fb      	ldr	r3, [r7, #28]
 8008554:	697a      	ldr	r2, [r7, #20]
 8008556:	631a      	str	r2, [r3, #48]	; 0x30
 8008558:	e005      	b.n	8008566 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800855a:	6978      	ldr	r0, [r7, #20]
 800855c:	f001 fd18 	bl	8009f90 <vPortFree>
 8008560:	e001      	b.n	8008566 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008562:	2300      	movs	r3, #0
 8008564:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008566:	69fb      	ldr	r3, [r7, #28]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d017      	beq.n	800859c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800856c:	69fb      	ldr	r3, [r7, #28]
 800856e:	2200      	movs	r2, #0
 8008570:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008574:	88fa      	ldrh	r2, [r7, #6]
 8008576:	2300      	movs	r3, #0
 8008578:	9303      	str	r3, [sp, #12]
 800857a:	69fb      	ldr	r3, [r7, #28]
 800857c:	9302      	str	r3, [sp, #8]
 800857e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008580:	9301      	str	r3, [sp, #4]
 8008582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008584:	9300      	str	r3, [sp, #0]
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	68b9      	ldr	r1, [r7, #8]
 800858a:	68f8      	ldr	r0, [r7, #12]
 800858c:	f000 f80e 	bl	80085ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008590:	69f8      	ldr	r0, [r7, #28]
 8008592:	f000 f8b1 	bl	80086f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008596:	2301      	movs	r3, #1
 8008598:	61bb      	str	r3, [r7, #24]
 800859a:	e002      	b.n	80085a2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800859c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80085a0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80085a2:	69bb      	ldr	r3, [r7, #24]
	}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3720      	adds	r7, #32
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}

080085ac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b088      	sub	sp, #32
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	60f8      	str	r0, [r7, #12]
 80085b4:	60b9      	str	r1, [r7, #8]
 80085b6:	607a      	str	r2, [r7, #4]
 80085b8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80085ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085bc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	009b      	lsls	r3, r3, #2
 80085c2:	461a      	mov	r2, r3
 80085c4:	21a5      	movs	r1, #165	; 0xa5
 80085c6:	f002 fc19 	bl	800adfc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80085ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80085d4:	3b01      	subs	r3, #1
 80085d6:	009b      	lsls	r3, r3, #2
 80085d8:	4413      	add	r3, r2
 80085da:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80085dc:	69bb      	ldr	r3, [r7, #24]
 80085de:	f023 0307 	bic.w	r3, r3, #7
 80085e2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80085e4:	69bb      	ldr	r3, [r7, #24]
 80085e6:	f003 0307 	and.w	r3, r3, #7
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d00a      	beq.n	8008604 <prvInitialiseNewTask+0x58>
	__asm volatile
 80085ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f2:	f383 8811 	msr	BASEPRI, r3
 80085f6:	f3bf 8f6f 	isb	sy
 80085fa:	f3bf 8f4f 	dsb	sy
 80085fe:	617b      	str	r3, [r7, #20]
}
 8008600:	bf00      	nop
 8008602:	e7fe      	b.n	8008602 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d01f      	beq.n	800864a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800860a:	2300      	movs	r3, #0
 800860c:	61fb      	str	r3, [r7, #28]
 800860e:	e012      	b.n	8008636 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008610:	68ba      	ldr	r2, [r7, #8]
 8008612:	69fb      	ldr	r3, [r7, #28]
 8008614:	4413      	add	r3, r2
 8008616:	7819      	ldrb	r1, [r3, #0]
 8008618:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800861a:	69fb      	ldr	r3, [r7, #28]
 800861c:	4413      	add	r3, r2
 800861e:	3334      	adds	r3, #52	; 0x34
 8008620:	460a      	mov	r2, r1
 8008622:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008624:	68ba      	ldr	r2, [r7, #8]
 8008626:	69fb      	ldr	r3, [r7, #28]
 8008628:	4413      	add	r3, r2
 800862a:	781b      	ldrb	r3, [r3, #0]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d006      	beq.n	800863e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008630:	69fb      	ldr	r3, [r7, #28]
 8008632:	3301      	adds	r3, #1
 8008634:	61fb      	str	r3, [r7, #28]
 8008636:	69fb      	ldr	r3, [r7, #28]
 8008638:	2b0f      	cmp	r3, #15
 800863a:	d9e9      	bls.n	8008610 <prvInitialiseNewTask+0x64>
 800863c:	e000      	b.n	8008640 <prvInitialiseNewTask+0x94>
			{
				break;
 800863e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008642:	2200      	movs	r2, #0
 8008644:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008648:	e003      	b.n	8008652 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800864a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800864c:	2200      	movs	r2, #0
 800864e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008654:	2b37      	cmp	r3, #55	; 0x37
 8008656:	d901      	bls.n	800865c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008658:	2337      	movs	r3, #55	; 0x37
 800865a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800865c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800865e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008660:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008664:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008666:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800866a:	2200      	movs	r2, #0
 800866c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800866e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008670:	3304      	adds	r3, #4
 8008672:	4618      	mov	r0, r3
 8008674:	f7ff f978 	bl	8007968 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800867a:	3318      	adds	r3, #24
 800867c:	4618      	mov	r0, r3
 800867e:	f7ff f973 	bl	8007968 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008684:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008686:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800868a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800868e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008690:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008694:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008696:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800869a:	2200      	movs	r2, #0
 800869c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80086a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a2:	2200      	movs	r2, #0
 80086a4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80086a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086aa:	3354      	adds	r3, #84	; 0x54
 80086ac:	2260      	movs	r2, #96	; 0x60
 80086ae:	2100      	movs	r1, #0
 80086b0:	4618      	mov	r0, r3
 80086b2:	f002 fba3 	bl	800adfc <memset>
 80086b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b8:	4a0c      	ldr	r2, [pc, #48]	; (80086ec <prvInitialiseNewTask+0x140>)
 80086ba:	659a      	str	r2, [r3, #88]	; 0x58
 80086bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086be:	4a0c      	ldr	r2, [pc, #48]	; (80086f0 <prvInitialiseNewTask+0x144>)
 80086c0:	65da      	str	r2, [r3, #92]	; 0x5c
 80086c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c4:	4a0b      	ldr	r2, [pc, #44]	; (80086f4 <prvInitialiseNewTask+0x148>)
 80086c6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80086c8:	683a      	ldr	r2, [r7, #0]
 80086ca:	68f9      	ldr	r1, [r7, #12]
 80086cc:	69b8      	ldr	r0, [r7, #24]
 80086ce:	f001 f941 	bl	8009954 <pxPortInitialiseStack>
 80086d2:	4602      	mov	r2, r0
 80086d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086d6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80086d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d002      	beq.n	80086e4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80086de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086e2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80086e4:	bf00      	nop
 80086e6:	3720      	adds	r7, #32
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}
 80086ec:	0800b348 	.word	0x0800b348
 80086f0:	0800b368 	.word	0x0800b368
 80086f4:	0800b328 	.word	0x0800b328

080086f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b082      	sub	sp, #8
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008700:	f001 fa58 	bl	8009bb4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008704:	4b2d      	ldr	r3, [pc, #180]	; (80087bc <prvAddNewTaskToReadyList+0xc4>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	3301      	adds	r3, #1
 800870a:	4a2c      	ldr	r2, [pc, #176]	; (80087bc <prvAddNewTaskToReadyList+0xc4>)
 800870c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800870e:	4b2c      	ldr	r3, [pc, #176]	; (80087c0 <prvAddNewTaskToReadyList+0xc8>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d109      	bne.n	800872a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008716:	4a2a      	ldr	r2, [pc, #168]	; (80087c0 <prvAddNewTaskToReadyList+0xc8>)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800871c:	4b27      	ldr	r3, [pc, #156]	; (80087bc <prvAddNewTaskToReadyList+0xc4>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	2b01      	cmp	r3, #1
 8008722:	d110      	bne.n	8008746 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008724:	f000 fc26 	bl	8008f74 <prvInitialiseTaskLists>
 8008728:	e00d      	b.n	8008746 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800872a:	4b26      	ldr	r3, [pc, #152]	; (80087c4 <prvAddNewTaskToReadyList+0xcc>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d109      	bne.n	8008746 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008732:	4b23      	ldr	r3, [pc, #140]	; (80087c0 <prvAddNewTaskToReadyList+0xc8>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800873c:	429a      	cmp	r2, r3
 800873e:	d802      	bhi.n	8008746 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008740:	4a1f      	ldr	r2, [pc, #124]	; (80087c0 <prvAddNewTaskToReadyList+0xc8>)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008746:	4b20      	ldr	r3, [pc, #128]	; (80087c8 <prvAddNewTaskToReadyList+0xd0>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	3301      	adds	r3, #1
 800874c:	4a1e      	ldr	r2, [pc, #120]	; (80087c8 <prvAddNewTaskToReadyList+0xd0>)
 800874e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008750:	4b1d      	ldr	r3, [pc, #116]	; (80087c8 <prvAddNewTaskToReadyList+0xd0>)
 8008752:	681a      	ldr	r2, [r3, #0]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800875c:	4b1b      	ldr	r3, [pc, #108]	; (80087cc <prvAddNewTaskToReadyList+0xd4>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	429a      	cmp	r2, r3
 8008762:	d903      	bls.n	800876c <prvAddNewTaskToReadyList+0x74>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008768:	4a18      	ldr	r2, [pc, #96]	; (80087cc <prvAddNewTaskToReadyList+0xd4>)
 800876a:	6013      	str	r3, [r2, #0]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008770:	4613      	mov	r3, r2
 8008772:	009b      	lsls	r3, r3, #2
 8008774:	4413      	add	r3, r2
 8008776:	009b      	lsls	r3, r3, #2
 8008778:	4a15      	ldr	r2, [pc, #84]	; (80087d0 <prvAddNewTaskToReadyList+0xd8>)
 800877a:	441a      	add	r2, r3
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	3304      	adds	r3, #4
 8008780:	4619      	mov	r1, r3
 8008782:	4610      	mov	r0, r2
 8008784:	f7ff f8fd 	bl	8007982 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008788:	f001 fa44 	bl	8009c14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800878c:	4b0d      	ldr	r3, [pc, #52]	; (80087c4 <prvAddNewTaskToReadyList+0xcc>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d00e      	beq.n	80087b2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008794:	4b0a      	ldr	r3, [pc, #40]	; (80087c0 <prvAddNewTaskToReadyList+0xc8>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800879e:	429a      	cmp	r2, r3
 80087a0:	d207      	bcs.n	80087b2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80087a2:	4b0c      	ldr	r3, [pc, #48]	; (80087d4 <prvAddNewTaskToReadyList+0xdc>)
 80087a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087a8:	601a      	str	r2, [r3, #0]
 80087aa:	f3bf 8f4f 	dsb	sy
 80087ae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80087b2:	bf00      	nop
 80087b4:	3708      	adds	r7, #8
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}
 80087ba:	bf00      	nop
 80087bc:	20000edc 	.word	0x20000edc
 80087c0:	20000a08 	.word	0x20000a08
 80087c4:	20000ee8 	.word	0x20000ee8
 80087c8:	20000ef8 	.word	0x20000ef8
 80087cc:	20000ee4 	.word	0x20000ee4
 80087d0:	20000a0c 	.word	0x20000a0c
 80087d4:	e000ed04 	.word	0xe000ed04

080087d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b084      	sub	sp, #16
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80087e0:	2300      	movs	r3, #0
 80087e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d017      	beq.n	800881a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80087ea:	4b13      	ldr	r3, [pc, #76]	; (8008838 <vTaskDelay+0x60>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d00a      	beq.n	8008808 <vTaskDelay+0x30>
	__asm volatile
 80087f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f6:	f383 8811 	msr	BASEPRI, r3
 80087fa:	f3bf 8f6f 	isb	sy
 80087fe:	f3bf 8f4f 	dsb	sy
 8008802:	60bb      	str	r3, [r7, #8]
}
 8008804:	bf00      	nop
 8008806:	e7fe      	b.n	8008806 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008808:	f000 f88a 	bl	8008920 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800880c:	2100      	movs	r1, #0
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f000 fcfe 	bl	8009210 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008814:	f000 f892 	bl	800893c <xTaskResumeAll>
 8008818:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d107      	bne.n	8008830 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008820:	4b06      	ldr	r3, [pc, #24]	; (800883c <vTaskDelay+0x64>)
 8008822:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008826:	601a      	str	r2, [r3, #0]
 8008828:	f3bf 8f4f 	dsb	sy
 800882c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008830:	bf00      	nop
 8008832:	3710      	adds	r7, #16
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}
 8008838:	20000f04 	.word	0x20000f04
 800883c:	e000ed04 	.word	0xe000ed04

08008840 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b08a      	sub	sp, #40	; 0x28
 8008844:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008846:	2300      	movs	r3, #0
 8008848:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800884a:	2300      	movs	r3, #0
 800884c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800884e:	463a      	mov	r2, r7
 8008850:	1d39      	adds	r1, r7, #4
 8008852:	f107 0308 	add.w	r3, r7, #8
 8008856:	4618      	mov	r0, r3
 8008858:	f7ff f832 	bl	80078c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800885c:	6839      	ldr	r1, [r7, #0]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	68ba      	ldr	r2, [r7, #8]
 8008862:	9202      	str	r2, [sp, #8]
 8008864:	9301      	str	r3, [sp, #4]
 8008866:	2300      	movs	r3, #0
 8008868:	9300      	str	r3, [sp, #0]
 800886a:	2300      	movs	r3, #0
 800886c:	460a      	mov	r2, r1
 800886e:	4924      	ldr	r1, [pc, #144]	; (8008900 <vTaskStartScheduler+0xc0>)
 8008870:	4824      	ldr	r0, [pc, #144]	; (8008904 <vTaskStartScheduler+0xc4>)
 8008872:	f7ff fdf9 	bl	8008468 <xTaskCreateStatic>
 8008876:	4603      	mov	r3, r0
 8008878:	4a23      	ldr	r2, [pc, #140]	; (8008908 <vTaskStartScheduler+0xc8>)
 800887a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800887c:	4b22      	ldr	r3, [pc, #136]	; (8008908 <vTaskStartScheduler+0xc8>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d002      	beq.n	800888a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008884:	2301      	movs	r3, #1
 8008886:	617b      	str	r3, [r7, #20]
 8008888:	e001      	b.n	800888e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800888a:	2300      	movs	r3, #0
 800888c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	2b01      	cmp	r3, #1
 8008892:	d102      	bne.n	800889a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008894:	f000 fd10 	bl	80092b8 <xTimerCreateTimerTask>
 8008898:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	2b01      	cmp	r3, #1
 800889e:	d11b      	bne.n	80088d8 <vTaskStartScheduler+0x98>
	__asm volatile
 80088a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a4:	f383 8811 	msr	BASEPRI, r3
 80088a8:	f3bf 8f6f 	isb	sy
 80088ac:	f3bf 8f4f 	dsb	sy
 80088b0:	613b      	str	r3, [r7, #16]
}
 80088b2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80088b4:	4b15      	ldr	r3, [pc, #84]	; (800890c <vTaskStartScheduler+0xcc>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	3354      	adds	r3, #84	; 0x54
 80088ba:	4a15      	ldr	r2, [pc, #84]	; (8008910 <vTaskStartScheduler+0xd0>)
 80088bc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80088be:	4b15      	ldr	r3, [pc, #84]	; (8008914 <vTaskStartScheduler+0xd4>)
 80088c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80088c4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80088c6:	4b14      	ldr	r3, [pc, #80]	; (8008918 <vTaskStartScheduler+0xd8>)
 80088c8:	2201      	movs	r2, #1
 80088ca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80088cc:	4b13      	ldr	r3, [pc, #76]	; (800891c <vTaskStartScheduler+0xdc>)
 80088ce:	2200      	movs	r2, #0
 80088d0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80088d2:	f001 f8cd 	bl	8009a70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80088d6:	e00e      	b.n	80088f6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80088de:	d10a      	bne.n	80088f6 <vTaskStartScheduler+0xb6>
	__asm volatile
 80088e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e4:	f383 8811 	msr	BASEPRI, r3
 80088e8:	f3bf 8f6f 	isb	sy
 80088ec:	f3bf 8f4f 	dsb	sy
 80088f0:	60fb      	str	r3, [r7, #12]
}
 80088f2:	bf00      	nop
 80088f4:	e7fe      	b.n	80088f4 <vTaskStartScheduler+0xb4>
}
 80088f6:	bf00      	nop
 80088f8:	3718      	adds	r7, #24
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}
 80088fe:	bf00      	nop
 8008900:	0800b1d8 	.word	0x0800b1d8
 8008904:	08008f45 	.word	0x08008f45
 8008908:	20000f00 	.word	0x20000f00
 800890c:	20000a08 	.word	0x20000a08
 8008910:	20000100 	.word	0x20000100
 8008914:	20000efc 	.word	0x20000efc
 8008918:	20000ee8 	.word	0x20000ee8
 800891c:	20000ee0 	.word	0x20000ee0

08008920 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008920:	b480      	push	{r7}
 8008922:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008924:	4b04      	ldr	r3, [pc, #16]	; (8008938 <vTaskSuspendAll+0x18>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	3301      	adds	r3, #1
 800892a:	4a03      	ldr	r2, [pc, #12]	; (8008938 <vTaskSuspendAll+0x18>)
 800892c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800892e:	bf00      	nop
 8008930:	46bd      	mov	sp, r7
 8008932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008936:	4770      	bx	lr
 8008938:	20000f04 	.word	0x20000f04

0800893c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b084      	sub	sp, #16
 8008940:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008942:	2300      	movs	r3, #0
 8008944:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008946:	2300      	movs	r3, #0
 8008948:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800894a:	4b42      	ldr	r3, [pc, #264]	; (8008a54 <xTaskResumeAll+0x118>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d10a      	bne.n	8008968 <xTaskResumeAll+0x2c>
	__asm volatile
 8008952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008956:	f383 8811 	msr	BASEPRI, r3
 800895a:	f3bf 8f6f 	isb	sy
 800895e:	f3bf 8f4f 	dsb	sy
 8008962:	603b      	str	r3, [r7, #0]
}
 8008964:	bf00      	nop
 8008966:	e7fe      	b.n	8008966 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008968:	f001 f924 	bl	8009bb4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800896c:	4b39      	ldr	r3, [pc, #228]	; (8008a54 <xTaskResumeAll+0x118>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	3b01      	subs	r3, #1
 8008972:	4a38      	ldr	r2, [pc, #224]	; (8008a54 <xTaskResumeAll+0x118>)
 8008974:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008976:	4b37      	ldr	r3, [pc, #220]	; (8008a54 <xTaskResumeAll+0x118>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d162      	bne.n	8008a44 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800897e:	4b36      	ldr	r3, [pc, #216]	; (8008a58 <xTaskResumeAll+0x11c>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d05e      	beq.n	8008a44 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008986:	e02f      	b.n	80089e8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008988:	4b34      	ldr	r3, [pc, #208]	; (8008a5c <xTaskResumeAll+0x120>)
 800898a:	68db      	ldr	r3, [r3, #12]
 800898c:	68db      	ldr	r3, [r3, #12]
 800898e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	3318      	adds	r3, #24
 8008994:	4618      	mov	r0, r3
 8008996:	f7ff f851 	bl	8007a3c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	3304      	adds	r3, #4
 800899e:	4618      	mov	r0, r3
 80089a0:	f7ff f84c 	bl	8007a3c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089a8:	4b2d      	ldr	r3, [pc, #180]	; (8008a60 <xTaskResumeAll+0x124>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	429a      	cmp	r2, r3
 80089ae:	d903      	bls.n	80089b8 <xTaskResumeAll+0x7c>
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089b4:	4a2a      	ldr	r2, [pc, #168]	; (8008a60 <xTaskResumeAll+0x124>)
 80089b6:	6013      	str	r3, [r2, #0]
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089bc:	4613      	mov	r3, r2
 80089be:	009b      	lsls	r3, r3, #2
 80089c0:	4413      	add	r3, r2
 80089c2:	009b      	lsls	r3, r3, #2
 80089c4:	4a27      	ldr	r2, [pc, #156]	; (8008a64 <xTaskResumeAll+0x128>)
 80089c6:	441a      	add	r2, r3
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	3304      	adds	r3, #4
 80089cc:	4619      	mov	r1, r3
 80089ce:	4610      	mov	r0, r2
 80089d0:	f7fe ffd7 	bl	8007982 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089d8:	4b23      	ldr	r3, [pc, #140]	; (8008a68 <xTaskResumeAll+0x12c>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089de:	429a      	cmp	r2, r3
 80089e0:	d302      	bcc.n	80089e8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80089e2:	4b22      	ldr	r3, [pc, #136]	; (8008a6c <xTaskResumeAll+0x130>)
 80089e4:	2201      	movs	r2, #1
 80089e6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80089e8:	4b1c      	ldr	r3, [pc, #112]	; (8008a5c <xTaskResumeAll+0x120>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d1cb      	bne.n	8008988 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d001      	beq.n	80089fa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80089f6:	f000 fb5f 	bl	80090b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80089fa:	4b1d      	ldr	r3, [pc, #116]	; (8008a70 <xTaskResumeAll+0x134>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d010      	beq.n	8008a28 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008a06:	f000 f847 	bl	8008a98 <xTaskIncrementTick>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d002      	beq.n	8008a16 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008a10:	4b16      	ldr	r3, [pc, #88]	; (8008a6c <xTaskResumeAll+0x130>)
 8008a12:	2201      	movs	r2, #1
 8008a14:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	3b01      	subs	r3, #1
 8008a1a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d1f1      	bne.n	8008a06 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008a22:	4b13      	ldr	r3, [pc, #76]	; (8008a70 <xTaskResumeAll+0x134>)
 8008a24:	2200      	movs	r2, #0
 8008a26:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008a28:	4b10      	ldr	r3, [pc, #64]	; (8008a6c <xTaskResumeAll+0x130>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d009      	beq.n	8008a44 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008a30:	2301      	movs	r3, #1
 8008a32:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008a34:	4b0f      	ldr	r3, [pc, #60]	; (8008a74 <xTaskResumeAll+0x138>)
 8008a36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a3a:	601a      	str	r2, [r3, #0]
 8008a3c:	f3bf 8f4f 	dsb	sy
 8008a40:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008a44:	f001 f8e6 	bl	8009c14 <vPortExitCritical>

	return xAlreadyYielded;
 8008a48:	68bb      	ldr	r3, [r7, #8]
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3710      	adds	r7, #16
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}
 8008a52:	bf00      	nop
 8008a54:	20000f04 	.word	0x20000f04
 8008a58:	20000edc 	.word	0x20000edc
 8008a5c:	20000e9c 	.word	0x20000e9c
 8008a60:	20000ee4 	.word	0x20000ee4
 8008a64:	20000a0c 	.word	0x20000a0c
 8008a68:	20000a08 	.word	0x20000a08
 8008a6c:	20000ef0 	.word	0x20000ef0
 8008a70:	20000eec 	.word	0x20000eec
 8008a74:	e000ed04 	.word	0xe000ed04

08008a78 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b083      	sub	sp, #12
 8008a7c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008a7e:	4b05      	ldr	r3, [pc, #20]	; (8008a94 <xTaskGetTickCount+0x1c>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008a84:	687b      	ldr	r3, [r7, #4]
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	370c      	adds	r7, #12
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a90:	4770      	bx	lr
 8008a92:	bf00      	nop
 8008a94:	20000ee0 	.word	0x20000ee0

08008a98 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b086      	sub	sp, #24
 8008a9c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008aa2:	4b4f      	ldr	r3, [pc, #316]	; (8008be0 <xTaskIncrementTick+0x148>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	f040 808f 	bne.w	8008bca <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008aac:	4b4d      	ldr	r3, [pc, #308]	; (8008be4 <xTaskIncrementTick+0x14c>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	3301      	adds	r3, #1
 8008ab2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008ab4:	4a4b      	ldr	r2, [pc, #300]	; (8008be4 <xTaskIncrementTick+0x14c>)
 8008ab6:	693b      	ldr	r3, [r7, #16]
 8008ab8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d120      	bne.n	8008b02 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008ac0:	4b49      	ldr	r3, [pc, #292]	; (8008be8 <xTaskIncrementTick+0x150>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d00a      	beq.n	8008ae0 <xTaskIncrementTick+0x48>
	__asm volatile
 8008aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ace:	f383 8811 	msr	BASEPRI, r3
 8008ad2:	f3bf 8f6f 	isb	sy
 8008ad6:	f3bf 8f4f 	dsb	sy
 8008ada:	603b      	str	r3, [r7, #0]
}
 8008adc:	bf00      	nop
 8008ade:	e7fe      	b.n	8008ade <xTaskIncrementTick+0x46>
 8008ae0:	4b41      	ldr	r3, [pc, #260]	; (8008be8 <xTaskIncrementTick+0x150>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	60fb      	str	r3, [r7, #12]
 8008ae6:	4b41      	ldr	r3, [pc, #260]	; (8008bec <xTaskIncrementTick+0x154>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4a3f      	ldr	r2, [pc, #252]	; (8008be8 <xTaskIncrementTick+0x150>)
 8008aec:	6013      	str	r3, [r2, #0]
 8008aee:	4a3f      	ldr	r2, [pc, #252]	; (8008bec <xTaskIncrementTick+0x154>)
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	6013      	str	r3, [r2, #0]
 8008af4:	4b3e      	ldr	r3, [pc, #248]	; (8008bf0 <xTaskIncrementTick+0x158>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	3301      	adds	r3, #1
 8008afa:	4a3d      	ldr	r2, [pc, #244]	; (8008bf0 <xTaskIncrementTick+0x158>)
 8008afc:	6013      	str	r3, [r2, #0]
 8008afe:	f000 fadb 	bl	80090b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008b02:	4b3c      	ldr	r3, [pc, #240]	; (8008bf4 <xTaskIncrementTick+0x15c>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	693a      	ldr	r2, [r7, #16]
 8008b08:	429a      	cmp	r2, r3
 8008b0a:	d349      	bcc.n	8008ba0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b0c:	4b36      	ldr	r3, [pc, #216]	; (8008be8 <xTaskIncrementTick+0x150>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d104      	bne.n	8008b20 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b16:	4b37      	ldr	r3, [pc, #220]	; (8008bf4 <xTaskIncrementTick+0x15c>)
 8008b18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b1c:	601a      	str	r2, [r3, #0]
					break;
 8008b1e:	e03f      	b.n	8008ba0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b20:	4b31      	ldr	r3, [pc, #196]	; (8008be8 <xTaskIncrementTick+0x150>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	68db      	ldr	r3, [r3, #12]
 8008b26:	68db      	ldr	r3, [r3, #12]
 8008b28:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008b30:	693a      	ldr	r2, [r7, #16]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	429a      	cmp	r2, r3
 8008b36:	d203      	bcs.n	8008b40 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008b38:	4a2e      	ldr	r2, [pc, #184]	; (8008bf4 <xTaskIncrementTick+0x15c>)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008b3e:	e02f      	b.n	8008ba0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	3304      	adds	r3, #4
 8008b44:	4618      	mov	r0, r3
 8008b46:	f7fe ff79 	bl	8007a3c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d004      	beq.n	8008b5c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	3318      	adds	r3, #24
 8008b56:	4618      	mov	r0, r3
 8008b58:	f7fe ff70 	bl	8007a3c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b60:	4b25      	ldr	r3, [pc, #148]	; (8008bf8 <xTaskIncrementTick+0x160>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	429a      	cmp	r2, r3
 8008b66:	d903      	bls.n	8008b70 <xTaskIncrementTick+0xd8>
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b6c:	4a22      	ldr	r2, [pc, #136]	; (8008bf8 <xTaskIncrementTick+0x160>)
 8008b6e:	6013      	str	r3, [r2, #0]
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b74:	4613      	mov	r3, r2
 8008b76:	009b      	lsls	r3, r3, #2
 8008b78:	4413      	add	r3, r2
 8008b7a:	009b      	lsls	r3, r3, #2
 8008b7c:	4a1f      	ldr	r2, [pc, #124]	; (8008bfc <xTaskIncrementTick+0x164>)
 8008b7e:	441a      	add	r2, r3
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	3304      	adds	r3, #4
 8008b84:	4619      	mov	r1, r3
 8008b86:	4610      	mov	r0, r2
 8008b88:	f7fe fefb 	bl	8007982 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b90:	4b1b      	ldr	r3, [pc, #108]	; (8008c00 <xTaskIncrementTick+0x168>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b96:	429a      	cmp	r2, r3
 8008b98:	d3b8      	bcc.n	8008b0c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b9e:	e7b5      	b.n	8008b0c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008ba0:	4b17      	ldr	r3, [pc, #92]	; (8008c00 <xTaskIncrementTick+0x168>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ba6:	4915      	ldr	r1, [pc, #84]	; (8008bfc <xTaskIncrementTick+0x164>)
 8008ba8:	4613      	mov	r3, r2
 8008baa:	009b      	lsls	r3, r3, #2
 8008bac:	4413      	add	r3, r2
 8008bae:	009b      	lsls	r3, r3, #2
 8008bb0:	440b      	add	r3, r1
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d901      	bls.n	8008bbc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008bb8:	2301      	movs	r3, #1
 8008bba:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008bbc:	4b11      	ldr	r3, [pc, #68]	; (8008c04 <xTaskIncrementTick+0x16c>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d007      	beq.n	8008bd4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	617b      	str	r3, [r7, #20]
 8008bc8:	e004      	b.n	8008bd4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008bca:	4b0f      	ldr	r3, [pc, #60]	; (8008c08 <xTaskIncrementTick+0x170>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	3301      	adds	r3, #1
 8008bd0:	4a0d      	ldr	r2, [pc, #52]	; (8008c08 <xTaskIncrementTick+0x170>)
 8008bd2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008bd4:	697b      	ldr	r3, [r7, #20]
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	3718      	adds	r7, #24
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}
 8008bde:	bf00      	nop
 8008be0:	20000f04 	.word	0x20000f04
 8008be4:	20000ee0 	.word	0x20000ee0
 8008be8:	20000e94 	.word	0x20000e94
 8008bec:	20000e98 	.word	0x20000e98
 8008bf0:	20000ef4 	.word	0x20000ef4
 8008bf4:	20000efc 	.word	0x20000efc
 8008bf8:	20000ee4 	.word	0x20000ee4
 8008bfc:	20000a0c 	.word	0x20000a0c
 8008c00:	20000a08 	.word	0x20000a08
 8008c04:	20000ef0 	.word	0x20000ef0
 8008c08:	20000eec 	.word	0x20000eec

08008c0c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b085      	sub	sp, #20
 8008c10:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008c12:	4b2a      	ldr	r3, [pc, #168]	; (8008cbc <vTaskSwitchContext+0xb0>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d003      	beq.n	8008c22 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008c1a:	4b29      	ldr	r3, [pc, #164]	; (8008cc0 <vTaskSwitchContext+0xb4>)
 8008c1c:	2201      	movs	r2, #1
 8008c1e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008c20:	e046      	b.n	8008cb0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8008c22:	4b27      	ldr	r3, [pc, #156]	; (8008cc0 <vTaskSwitchContext+0xb4>)
 8008c24:	2200      	movs	r2, #0
 8008c26:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c28:	4b26      	ldr	r3, [pc, #152]	; (8008cc4 <vTaskSwitchContext+0xb8>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	60fb      	str	r3, [r7, #12]
 8008c2e:	e010      	b.n	8008c52 <vTaskSwitchContext+0x46>
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d10a      	bne.n	8008c4c <vTaskSwitchContext+0x40>
	__asm volatile
 8008c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c3a:	f383 8811 	msr	BASEPRI, r3
 8008c3e:	f3bf 8f6f 	isb	sy
 8008c42:	f3bf 8f4f 	dsb	sy
 8008c46:	607b      	str	r3, [r7, #4]
}
 8008c48:	bf00      	nop
 8008c4a:	e7fe      	b.n	8008c4a <vTaskSwitchContext+0x3e>
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	3b01      	subs	r3, #1
 8008c50:	60fb      	str	r3, [r7, #12]
 8008c52:	491d      	ldr	r1, [pc, #116]	; (8008cc8 <vTaskSwitchContext+0xbc>)
 8008c54:	68fa      	ldr	r2, [r7, #12]
 8008c56:	4613      	mov	r3, r2
 8008c58:	009b      	lsls	r3, r3, #2
 8008c5a:	4413      	add	r3, r2
 8008c5c:	009b      	lsls	r3, r3, #2
 8008c5e:	440b      	add	r3, r1
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d0e4      	beq.n	8008c30 <vTaskSwitchContext+0x24>
 8008c66:	68fa      	ldr	r2, [r7, #12]
 8008c68:	4613      	mov	r3, r2
 8008c6a:	009b      	lsls	r3, r3, #2
 8008c6c:	4413      	add	r3, r2
 8008c6e:	009b      	lsls	r3, r3, #2
 8008c70:	4a15      	ldr	r2, [pc, #84]	; (8008cc8 <vTaskSwitchContext+0xbc>)
 8008c72:	4413      	add	r3, r2
 8008c74:	60bb      	str	r3, [r7, #8]
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	685b      	ldr	r3, [r3, #4]
 8008c7a:	685a      	ldr	r2, [r3, #4]
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	605a      	str	r2, [r3, #4]
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	685a      	ldr	r2, [r3, #4]
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	3308      	adds	r3, #8
 8008c88:	429a      	cmp	r2, r3
 8008c8a:	d104      	bne.n	8008c96 <vTaskSwitchContext+0x8a>
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	685a      	ldr	r2, [r3, #4]
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	605a      	str	r2, [r3, #4]
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	685b      	ldr	r3, [r3, #4]
 8008c9a:	68db      	ldr	r3, [r3, #12]
 8008c9c:	4a0b      	ldr	r2, [pc, #44]	; (8008ccc <vTaskSwitchContext+0xc0>)
 8008c9e:	6013      	str	r3, [r2, #0]
 8008ca0:	4a08      	ldr	r2, [pc, #32]	; (8008cc4 <vTaskSwitchContext+0xb8>)
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008ca6:	4b09      	ldr	r3, [pc, #36]	; (8008ccc <vTaskSwitchContext+0xc0>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	3354      	adds	r3, #84	; 0x54
 8008cac:	4a08      	ldr	r2, [pc, #32]	; (8008cd0 <vTaskSwitchContext+0xc4>)
 8008cae:	6013      	str	r3, [r2, #0]
}
 8008cb0:	bf00      	nop
 8008cb2:	3714      	adds	r7, #20
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cba:	4770      	bx	lr
 8008cbc:	20000f04 	.word	0x20000f04
 8008cc0:	20000ef0 	.word	0x20000ef0
 8008cc4:	20000ee4 	.word	0x20000ee4
 8008cc8:	20000a0c 	.word	0x20000a0c
 8008ccc:	20000a08 	.word	0x20000a08
 8008cd0:	20000100 	.word	0x20000100

08008cd4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b084      	sub	sp, #16
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
 8008cdc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d10a      	bne.n	8008cfa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce8:	f383 8811 	msr	BASEPRI, r3
 8008cec:	f3bf 8f6f 	isb	sy
 8008cf0:	f3bf 8f4f 	dsb	sy
 8008cf4:	60fb      	str	r3, [r7, #12]
}
 8008cf6:	bf00      	nop
 8008cf8:	e7fe      	b.n	8008cf8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008cfa:	4b07      	ldr	r3, [pc, #28]	; (8008d18 <vTaskPlaceOnEventList+0x44>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	3318      	adds	r3, #24
 8008d00:	4619      	mov	r1, r3
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f7fe fe61 	bl	80079ca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008d08:	2101      	movs	r1, #1
 8008d0a:	6838      	ldr	r0, [r7, #0]
 8008d0c:	f000 fa80 	bl	8009210 <prvAddCurrentTaskToDelayedList>
}
 8008d10:	bf00      	nop
 8008d12:	3710      	adds	r7, #16
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}
 8008d18:	20000a08 	.word	0x20000a08

08008d1c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b086      	sub	sp, #24
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	60f8      	str	r0, [r7, #12]
 8008d24:	60b9      	str	r1, [r7, #8]
 8008d26:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d10a      	bne.n	8008d44 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d32:	f383 8811 	msr	BASEPRI, r3
 8008d36:	f3bf 8f6f 	isb	sy
 8008d3a:	f3bf 8f4f 	dsb	sy
 8008d3e:	617b      	str	r3, [r7, #20]
}
 8008d40:	bf00      	nop
 8008d42:	e7fe      	b.n	8008d42 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008d44:	4b0a      	ldr	r3, [pc, #40]	; (8008d70 <vTaskPlaceOnEventListRestricted+0x54>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	3318      	adds	r3, #24
 8008d4a:	4619      	mov	r1, r3
 8008d4c:	68f8      	ldr	r0, [r7, #12]
 8008d4e:	f7fe fe18 	bl	8007982 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d002      	beq.n	8008d5e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008d58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008d5c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008d5e:	6879      	ldr	r1, [r7, #4]
 8008d60:	68b8      	ldr	r0, [r7, #8]
 8008d62:	f000 fa55 	bl	8009210 <prvAddCurrentTaskToDelayedList>
	}
 8008d66:	bf00      	nop
 8008d68:	3718      	adds	r7, #24
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}
 8008d6e:	bf00      	nop
 8008d70:	20000a08 	.word	0x20000a08

08008d74 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b086      	sub	sp, #24
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	68db      	ldr	r3, [r3, #12]
 8008d80:	68db      	ldr	r3, [r3, #12]
 8008d82:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008d84:	693b      	ldr	r3, [r7, #16]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d10a      	bne.n	8008da0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d8e:	f383 8811 	msr	BASEPRI, r3
 8008d92:	f3bf 8f6f 	isb	sy
 8008d96:	f3bf 8f4f 	dsb	sy
 8008d9a:	60fb      	str	r3, [r7, #12]
}
 8008d9c:	bf00      	nop
 8008d9e:	e7fe      	b.n	8008d9e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008da0:	693b      	ldr	r3, [r7, #16]
 8008da2:	3318      	adds	r3, #24
 8008da4:	4618      	mov	r0, r3
 8008da6:	f7fe fe49 	bl	8007a3c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008daa:	4b1e      	ldr	r3, [pc, #120]	; (8008e24 <xTaskRemoveFromEventList+0xb0>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d11d      	bne.n	8008dee <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	3304      	adds	r3, #4
 8008db6:	4618      	mov	r0, r3
 8008db8:	f7fe fe40 	bl	8007a3c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dc0:	4b19      	ldr	r3, [pc, #100]	; (8008e28 <xTaskRemoveFromEventList+0xb4>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	429a      	cmp	r2, r3
 8008dc6:	d903      	bls.n	8008dd0 <xTaskRemoveFromEventList+0x5c>
 8008dc8:	693b      	ldr	r3, [r7, #16]
 8008dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dcc:	4a16      	ldr	r2, [pc, #88]	; (8008e28 <xTaskRemoveFromEventList+0xb4>)
 8008dce:	6013      	str	r3, [r2, #0]
 8008dd0:	693b      	ldr	r3, [r7, #16]
 8008dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dd4:	4613      	mov	r3, r2
 8008dd6:	009b      	lsls	r3, r3, #2
 8008dd8:	4413      	add	r3, r2
 8008dda:	009b      	lsls	r3, r3, #2
 8008ddc:	4a13      	ldr	r2, [pc, #76]	; (8008e2c <xTaskRemoveFromEventList+0xb8>)
 8008dde:	441a      	add	r2, r3
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	3304      	adds	r3, #4
 8008de4:	4619      	mov	r1, r3
 8008de6:	4610      	mov	r0, r2
 8008de8:	f7fe fdcb 	bl	8007982 <vListInsertEnd>
 8008dec:	e005      	b.n	8008dfa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008dee:	693b      	ldr	r3, [r7, #16]
 8008df0:	3318      	adds	r3, #24
 8008df2:	4619      	mov	r1, r3
 8008df4:	480e      	ldr	r0, [pc, #56]	; (8008e30 <xTaskRemoveFromEventList+0xbc>)
 8008df6:	f7fe fdc4 	bl	8007982 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dfe:	4b0d      	ldr	r3, [pc, #52]	; (8008e34 <xTaskRemoveFromEventList+0xc0>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e04:	429a      	cmp	r2, r3
 8008e06:	d905      	bls.n	8008e14 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008e08:	2301      	movs	r3, #1
 8008e0a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008e0c:	4b0a      	ldr	r3, [pc, #40]	; (8008e38 <xTaskRemoveFromEventList+0xc4>)
 8008e0e:	2201      	movs	r2, #1
 8008e10:	601a      	str	r2, [r3, #0]
 8008e12:	e001      	b.n	8008e18 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008e14:	2300      	movs	r3, #0
 8008e16:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008e18:	697b      	ldr	r3, [r7, #20]
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	3718      	adds	r7, #24
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}
 8008e22:	bf00      	nop
 8008e24:	20000f04 	.word	0x20000f04
 8008e28:	20000ee4 	.word	0x20000ee4
 8008e2c:	20000a0c 	.word	0x20000a0c
 8008e30:	20000e9c 	.word	0x20000e9c
 8008e34:	20000a08 	.word	0x20000a08
 8008e38:	20000ef0 	.word	0x20000ef0

08008e3c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b083      	sub	sp, #12
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008e44:	4b06      	ldr	r3, [pc, #24]	; (8008e60 <vTaskInternalSetTimeOutState+0x24>)
 8008e46:	681a      	ldr	r2, [r3, #0]
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008e4c:	4b05      	ldr	r3, [pc, #20]	; (8008e64 <vTaskInternalSetTimeOutState+0x28>)
 8008e4e:	681a      	ldr	r2, [r3, #0]
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	605a      	str	r2, [r3, #4]
}
 8008e54:	bf00      	nop
 8008e56:	370c      	adds	r7, #12
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5e:	4770      	bx	lr
 8008e60:	20000ef4 	.word	0x20000ef4
 8008e64:	20000ee0 	.word	0x20000ee0

08008e68 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b088      	sub	sp, #32
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
 8008e70:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d10a      	bne.n	8008e8e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e7c:	f383 8811 	msr	BASEPRI, r3
 8008e80:	f3bf 8f6f 	isb	sy
 8008e84:	f3bf 8f4f 	dsb	sy
 8008e88:	613b      	str	r3, [r7, #16]
}
 8008e8a:	bf00      	nop
 8008e8c:	e7fe      	b.n	8008e8c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d10a      	bne.n	8008eaa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e98:	f383 8811 	msr	BASEPRI, r3
 8008e9c:	f3bf 8f6f 	isb	sy
 8008ea0:	f3bf 8f4f 	dsb	sy
 8008ea4:	60fb      	str	r3, [r7, #12]
}
 8008ea6:	bf00      	nop
 8008ea8:	e7fe      	b.n	8008ea8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008eaa:	f000 fe83 	bl	8009bb4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008eae:	4b1d      	ldr	r3, [pc, #116]	; (8008f24 <xTaskCheckForTimeOut+0xbc>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	69ba      	ldr	r2, [r7, #24]
 8008eba:	1ad3      	subs	r3, r2, r3
 8008ebc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ec6:	d102      	bne.n	8008ece <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	61fb      	str	r3, [r7, #28]
 8008ecc:	e023      	b.n	8008f16 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681a      	ldr	r2, [r3, #0]
 8008ed2:	4b15      	ldr	r3, [pc, #84]	; (8008f28 <xTaskCheckForTimeOut+0xc0>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	429a      	cmp	r2, r3
 8008ed8:	d007      	beq.n	8008eea <xTaskCheckForTimeOut+0x82>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	685b      	ldr	r3, [r3, #4]
 8008ede:	69ba      	ldr	r2, [r7, #24]
 8008ee0:	429a      	cmp	r2, r3
 8008ee2:	d302      	bcc.n	8008eea <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	61fb      	str	r3, [r7, #28]
 8008ee8:	e015      	b.n	8008f16 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	697a      	ldr	r2, [r7, #20]
 8008ef0:	429a      	cmp	r2, r3
 8008ef2:	d20b      	bcs.n	8008f0c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	681a      	ldr	r2, [r3, #0]
 8008ef8:	697b      	ldr	r3, [r7, #20]
 8008efa:	1ad2      	subs	r2, r2, r3
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f7ff ff9b 	bl	8008e3c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008f06:	2300      	movs	r3, #0
 8008f08:	61fb      	str	r3, [r7, #28]
 8008f0a:	e004      	b.n	8008f16 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008f12:	2301      	movs	r3, #1
 8008f14:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008f16:	f000 fe7d 	bl	8009c14 <vPortExitCritical>

	return xReturn;
 8008f1a:	69fb      	ldr	r3, [r7, #28]
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3720      	adds	r7, #32
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}
 8008f24:	20000ee0 	.word	0x20000ee0
 8008f28:	20000ef4 	.word	0x20000ef4

08008f2c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008f30:	4b03      	ldr	r3, [pc, #12]	; (8008f40 <vTaskMissedYield+0x14>)
 8008f32:	2201      	movs	r2, #1
 8008f34:	601a      	str	r2, [r3, #0]
}
 8008f36:	bf00      	nop
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr
 8008f40:	20000ef0 	.word	0x20000ef0

08008f44 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b082      	sub	sp, #8
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008f4c:	f000 f852 	bl	8008ff4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008f50:	4b06      	ldr	r3, [pc, #24]	; (8008f6c <prvIdleTask+0x28>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	2b01      	cmp	r3, #1
 8008f56:	d9f9      	bls.n	8008f4c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008f58:	4b05      	ldr	r3, [pc, #20]	; (8008f70 <prvIdleTask+0x2c>)
 8008f5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f5e:	601a      	str	r2, [r3, #0]
 8008f60:	f3bf 8f4f 	dsb	sy
 8008f64:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008f68:	e7f0      	b.n	8008f4c <prvIdleTask+0x8>
 8008f6a:	bf00      	nop
 8008f6c:	20000a0c 	.word	0x20000a0c
 8008f70:	e000ed04 	.word	0xe000ed04

08008f74 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b082      	sub	sp, #8
 8008f78:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	607b      	str	r3, [r7, #4]
 8008f7e:	e00c      	b.n	8008f9a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008f80:	687a      	ldr	r2, [r7, #4]
 8008f82:	4613      	mov	r3, r2
 8008f84:	009b      	lsls	r3, r3, #2
 8008f86:	4413      	add	r3, r2
 8008f88:	009b      	lsls	r3, r3, #2
 8008f8a:	4a12      	ldr	r2, [pc, #72]	; (8008fd4 <prvInitialiseTaskLists+0x60>)
 8008f8c:	4413      	add	r3, r2
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f7fe fcca 	bl	8007928 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	3301      	adds	r3, #1
 8008f98:	607b      	str	r3, [r7, #4]
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2b37      	cmp	r3, #55	; 0x37
 8008f9e:	d9ef      	bls.n	8008f80 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008fa0:	480d      	ldr	r0, [pc, #52]	; (8008fd8 <prvInitialiseTaskLists+0x64>)
 8008fa2:	f7fe fcc1 	bl	8007928 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008fa6:	480d      	ldr	r0, [pc, #52]	; (8008fdc <prvInitialiseTaskLists+0x68>)
 8008fa8:	f7fe fcbe 	bl	8007928 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008fac:	480c      	ldr	r0, [pc, #48]	; (8008fe0 <prvInitialiseTaskLists+0x6c>)
 8008fae:	f7fe fcbb 	bl	8007928 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008fb2:	480c      	ldr	r0, [pc, #48]	; (8008fe4 <prvInitialiseTaskLists+0x70>)
 8008fb4:	f7fe fcb8 	bl	8007928 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008fb8:	480b      	ldr	r0, [pc, #44]	; (8008fe8 <prvInitialiseTaskLists+0x74>)
 8008fba:	f7fe fcb5 	bl	8007928 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008fbe:	4b0b      	ldr	r3, [pc, #44]	; (8008fec <prvInitialiseTaskLists+0x78>)
 8008fc0:	4a05      	ldr	r2, [pc, #20]	; (8008fd8 <prvInitialiseTaskLists+0x64>)
 8008fc2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008fc4:	4b0a      	ldr	r3, [pc, #40]	; (8008ff0 <prvInitialiseTaskLists+0x7c>)
 8008fc6:	4a05      	ldr	r2, [pc, #20]	; (8008fdc <prvInitialiseTaskLists+0x68>)
 8008fc8:	601a      	str	r2, [r3, #0]
}
 8008fca:	bf00      	nop
 8008fcc:	3708      	adds	r7, #8
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}
 8008fd2:	bf00      	nop
 8008fd4:	20000a0c 	.word	0x20000a0c
 8008fd8:	20000e6c 	.word	0x20000e6c
 8008fdc:	20000e80 	.word	0x20000e80
 8008fe0:	20000e9c 	.word	0x20000e9c
 8008fe4:	20000eb0 	.word	0x20000eb0
 8008fe8:	20000ec8 	.word	0x20000ec8
 8008fec:	20000e94 	.word	0x20000e94
 8008ff0:	20000e98 	.word	0x20000e98

08008ff4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b082      	sub	sp, #8
 8008ff8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008ffa:	e019      	b.n	8009030 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008ffc:	f000 fdda 	bl	8009bb4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009000:	4b10      	ldr	r3, [pc, #64]	; (8009044 <prvCheckTasksWaitingTermination+0x50>)
 8009002:	68db      	ldr	r3, [r3, #12]
 8009004:	68db      	ldr	r3, [r3, #12]
 8009006:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	3304      	adds	r3, #4
 800900c:	4618      	mov	r0, r3
 800900e:	f7fe fd15 	bl	8007a3c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009012:	4b0d      	ldr	r3, [pc, #52]	; (8009048 <prvCheckTasksWaitingTermination+0x54>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	3b01      	subs	r3, #1
 8009018:	4a0b      	ldr	r2, [pc, #44]	; (8009048 <prvCheckTasksWaitingTermination+0x54>)
 800901a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800901c:	4b0b      	ldr	r3, [pc, #44]	; (800904c <prvCheckTasksWaitingTermination+0x58>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	3b01      	subs	r3, #1
 8009022:	4a0a      	ldr	r2, [pc, #40]	; (800904c <prvCheckTasksWaitingTermination+0x58>)
 8009024:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009026:	f000 fdf5 	bl	8009c14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f000 f810 	bl	8009050 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009030:	4b06      	ldr	r3, [pc, #24]	; (800904c <prvCheckTasksWaitingTermination+0x58>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d1e1      	bne.n	8008ffc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009038:	bf00      	nop
 800903a:	bf00      	nop
 800903c:	3708      	adds	r7, #8
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}
 8009042:	bf00      	nop
 8009044:	20000eb0 	.word	0x20000eb0
 8009048:	20000edc 	.word	0x20000edc
 800904c:	20000ec4 	.word	0x20000ec4

08009050 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009050:	b580      	push	{r7, lr}
 8009052:	b084      	sub	sp, #16
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	3354      	adds	r3, #84	; 0x54
 800905c:	4618      	mov	r0, r3
 800905e:	f001 ffc3 	bl	800afe8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009068:	2b00      	cmp	r3, #0
 800906a:	d108      	bne.n	800907e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009070:	4618      	mov	r0, r3
 8009072:	f000 ff8d 	bl	8009f90 <vPortFree>
				vPortFree( pxTCB );
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f000 ff8a 	bl	8009f90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800907c:	e018      	b.n	80090b0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009084:	2b01      	cmp	r3, #1
 8009086:	d103      	bne.n	8009090 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f000 ff81 	bl	8009f90 <vPortFree>
	}
 800908e:	e00f      	b.n	80090b0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009096:	2b02      	cmp	r3, #2
 8009098:	d00a      	beq.n	80090b0 <prvDeleteTCB+0x60>
	__asm volatile
 800909a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800909e:	f383 8811 	msr	BASEPRI, r3
 80090a2:	f3bf 8f6f 	isb	sy
 80090a6:	f3bf 8f4f 	dsb	sy
 80090aa:	60fb      	str	r3, [r7, #12]
}
 80090ac:	bf00      	nop
 80090ae:	e7fe      	b.n	80090ae <prvDeleteTCB+0x5e>
	}
 80090b0:	bf00      	nop
 80090b2:	3710      	adds	r7, #16
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bd80      	pop	{r7, pc}

080090b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80090b8:	b480      	push	{r7}
 80090ba:	b083      	sub	sp, #12
 80090bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80090be:	4b0c      	ldr	r3, [pc, #48]	; (80090f0 <prvResetNextTaskUnblockTime+0x38>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d104      	bne.n	80090d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80090c8:	4b0a      	ldr	r3, [pc, #40]	; (80090f4 <prvResetNextTaskUnblockTime+0x3c>)
 80090ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80090ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80090d0:	e008      	b.n	80090e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090d2:	4b07      	ldr	r3, [pc, #28]	; (80090f0 <prvResetNextTaskUnblockTime+0x38>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	68db      	ldr	r3, [r3, #12]
 80090d8:	68db      	ldr	r3, [r3, #12]
 80090da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	685b      	ldr	r3, [r3, #4]
 80090e0:	4a04      	ldr	r2, [pc, #16]	; (80090f4 <prvResetNextTaskUnblockTime+0x3c>)
 80090e2:	6013      	str	r3, [r2, #0]
}
 80090e4:	bf00      	nop
 80090e6:	370c      	adds	r7, #12
 80090e8:	46bd      	mov	sp, r7
 80090ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ee:	4770      	bx	lr
 80090f0:	20000e94 	.word	0x20000e94
 80090f4:	20000efc 	.word	0x20000efc

080090f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80090f8:	b480      	push	{r7}
 80090fa:	b083      	sub	sp, #12
 80090fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80090fe:	4b0b      	ldr	r3, [pc, #44]	; (800912c <xTaskGetSchedulerState+0x34>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d102      	bne.n	800910c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009106:	2301      	movs	r3, #1
 8009108:	607b      	str	r3, [r7, #4]
 800910a:	e008      	b.n	800911e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800910c:	4b08      	ldr	r3, [pc, #32]	; (8009130 <xTaskGetSchedulerState+0x38>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d102      	bne.n	800911a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009114:	2302      	movs	r3, #2
 8009116:	607b      	str	r3, [r7, #4]
 8009118:	e001      	b.n	800911e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800911a:	2300      	movs	r3, #0
 800911c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800911e:	687b      	ldr	r3, [r7, #4]
	}
 8009120:	4618      	mov	r0, r3
 8009122:	370c      	adds	r7, #12
 8009124:	46bd      	mov	sp, r7
 8009126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912a:	4770      	bx	lr
 800912c:	20000ee8 	.word	0x20000ee8
 8009130:	20000f04 	.word	0x20000f04

08009134 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009134:	b580      	push	{r7, lr}
 8009136:	b086      	sub	sp, #24
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009140:	2300      	movs	r3, #0
 8009142:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d056      	beq.n	80091f8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800914a:	4b2e      	ldr	r3, [pc, #184]	; (8009204 <xTaskPriorityDisinherit+0xd0>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	693a      	ldr	r2, [r7, #16]
 8009150:	429a      	cmp	r2, r3
 8009152:	d00a      	beq.n	800916a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009158:	f383 8811 	msr	BASEPRI, r3
 800915c:	f3bf 8f6f 	isb	sy
 8009160:	f3bf 8f4f 	dsb	sy
 8009164:	60fb      	str	r3, [r7, #12]
}
 8009166:	bf00      	nop
 8009168:	e7fe      	b.n	8009168 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800916a:	693b      	ldr	r3, [r7, #16]
 800916c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800916e:	2b00      	cmp	r3, #0
 8009170:	d10a      	bne.n	8009188 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009176:	f383 8811 	msr	BASEPRI, r3
 800917a:	f3bf 8f6f 	isb	sy
 800917e:	f3bf 8f4f 	dsb	sy
 8009182:	60bb      	str	r3, [r7, #8]
}
 8009184:	bf00      	nop
 8009186:	e7fe      	b.n	8009186 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800918c:	1e5a      	subs	r2, r3, #1
 800918e:	693b      	ldr	r3, [r7, #16]
 8009190:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800919a:	429a      	cmp	r2, r3
 800919c:	d02c      	beq.n	80091f8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d128      	bne.n	80091f8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	3304      	adds	r3, #4
 80091aa:	4618      	mov	r0, r3
 80091ac:	f7fe fc46 	bl	8007a3c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80091b0:	693b      	ldr	r3, [r7, #16]
 80091b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091b8:	693b      	ldr	r3, [r7, #16]
 80091ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091bc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091c8:	4b0f      	ldr	r3, [pc, #60]	; (8009208 <xTaskPriorityDisinherit+0xd4>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	429a      	cmp	r2, r3
 80091ce:	d903      	bls.n	80091d8 <xTaskPriorityDisinherit+0xa4>
 80091d0:	693b      	ldr	r3, [r7, #16]
 80091d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091d4:	4a0c      	ldr	r2, [pc, #48]	; (8009208 <xTaskPriorityDisinherit+0xd4>)
 80091d6:	6013      	str	r3, [r2, #0]
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091dc:	4613      	mov	r3, r2
 80091de:	009b      	lsls	r3, r3, #2
 80091e0:	4413      	add	r3, r2
 80091e2:	009b      	lsls	r3, r3, #2
 80091e4:	4a09      	ldr	r2, [pc, #36]	; (800920c <xTaskPriorityDisinherit+0xd8>)
 80091e6:	441a      	add	r2, r3
 80091e8:	693b      	ldr	r3, [r7, #16]
 80091ea:	3304      	adds	r3, #4
 80091ec:	4619      	mov	r1, r3
 80091ee:	4610      	mov	r0, r2
 80091f0:	f7fe fbc7 	bl	8007982 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80091f4:	2301      	movs	r3, #1
 80091f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80091f8:	697b      	ldr	r3, [r7, #20]
	}
 80091fa:	4618      	mov	r0, r3
 80091fc:	3718      	adds	r7, #24
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}
 8009202:	bf00      	nop
 8009204:	20000a08 	.word	0x20000a08
 8009208:	20000ee4 	.word	0x20000ee4
 800920c:	20000a0c 	.word	0x20000a0c

08009210 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b084      	sub	sp, #16
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
 8009218:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800921a:	4b21      	ldr	r3, [pc, #132]	; (80092a0 <prvAddCurrentTaskToDelayedList+0x90>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009220:	4b20      	ldr	r3, [pc, #128]	; (80092a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	3304      	adds	r3, #4
 8009226:	4618      	mov	r0, r3
 8009228:	f7fe fc08 	bl	8007a3c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009232:	d10a      	bne.n	800924a <prvAddCurrentTaskToDelayedList+0x3a>
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d007      	beq.n	800924a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800923a:	4b1a      	ldr	r3, [pc, #104]	; (80092a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	3304      	adds	r3, #4
 8009240:	4619      	mov	r1, r3
 8009242:	4819      	ldr	r0, [pc, #100]	; (80092a8 <prvAddCurrentTaskToDelayedList+0x98>)
 8009244:	f7fe fb9d 	bl	8007982 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009248:	e026      	b.n	8009298 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800924a:	68fa      	ldr	r2, [r7, #12]
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	4413      	add	r3, r2
 8009250:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009252:	4b14      	ldr	r3, [pc, #80]	; (80092a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	68ba      	ldr	r2, [r7, #8]
 8009258:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800925a:	68ba      	ldr	r2, [r7, #8]
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	429a      	cmp	r2, r3
 8009260:	d209      	bcs.n	8009276 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009262:	4b12      	ldr	r3, [pc, #72]	; (80092ac <prvAddCurrentTaskToDelayedList+0x9c>)
 8009264:	681a      	ldr	r2, [r3, #0]
 8009266:	4b0f      	ldr	r3, [pc, #60]	; (80092a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	3304      	adds	r3, #4
 800926c:	4619      	mov	r1, r3
 800926e:	4610      	mov	r0, r2
 8009270:	f7fe fbab 	bl	80079ca <vListInsert>
}
 8009274:	e010      	b.n	8009298 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009276:	4b0e      	ldr	r3, [pc, #56]	; (80092b0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009278:	681a      	ldr	r2, [r3, #0]
 800927a:	4b0a      	ldr	r3, [pc, #40]	; (80092a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	3304      	adds	r3, #4
 8009280:	4619      	mov	r1, r3
 8009282:	4610      	mov	r0, r2
 8009284:	f7fe fba1 	bl	80079ca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009288:	4b0a      	ldr	r3, [pc, #40]	; (80092b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	68ba      	ldr	r2, [r7, #8]
 800928e:	429a      	cmp	r2, r3
 8009290:	d202      	bcs.n	8009298 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009292:	4a08      	ldr	r2, [pc, #32]	; (80092b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	6013      	str	r3, [r2, #0]
}
 8009298:	bf00      	nop
 800929a:	3710      	adds	r7, #16
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}
 80092a0:	20000ee0 	.word	0x20000ee0
 80092a4:	20000a08 	.word	0x20000a08
 80092a8:	20000ec8 	.word	0x20000ec8
 80092ac:	20000e98 	.word	0x20000e98
 80092b0:	20000e94 	.word	0x20000e94
 80092b4:	20000efc 	.word	0x20000efc

080092b8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b08a      	sub	sp, #40	; 0x28
 80092bc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80092be:	2300      	movs	r3, #0
 80092c0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80092c2:	f000 fb07 	bl	80098d4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80092c6:	4b1c      	ldr	r3, [pc, #112]	; (8009338 <xTimerCreateTimerTask+0x80>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d021      	beq.n	8009312 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80092ce:	2300      	movs	r3, #0
 80092d0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80092d2:	2300      	movs	r3, #0
 80092d4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80092d6:	1d3a      	adds	r2, r7, #4
 80092d8:	f107 0108 	add.w	r1, r7, #8
 80092dc:	f107 030c 	add.w	r3, r7, #12
 80092e0:	4618      	mov	r0, r3
 80092e2:	f7fe fb07 	bl	80078f4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80092e6:	6879      	ldr	r1, [r7, #4]
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	68fa      	ldr	r2, [r7, #12]
 80092ec:	9202      	str	r2, [sp, #8]
 80092ee:	9301      	str	r3, [sp, #4]
 80092f0:	2302      	movs	r3, #2
 80092f2:	9300      	str	r3, [sp, #0]
 80092f4:	2300      	movs	r3, #0
 80092f6:	460a      	mov	r2, r1
 80092f8:	4910      	ldr	r1, [pc, #64]	; (800933c <xTimerCreateTimerTask+0x84>)
 80092fa:	4811      	ldr	r0, [pc, #68]	; (8009340 <xTimerCreateTimerTask+0x88>)
 80092fc:	f7ff f8b4 	bl	8008468 <xTaskCreateStatic>
 8009300:	4603      	mov	r3, r0
 8009302:	4a10      	ldr	r2, [pc, #64]	; (8009344 <xTimerCreateTimerTask+0x8c>)
 8009304:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009306:	4b0f      	ldr	r3, [pc, #60]	; (8009344 <xTimerCreateTimerTask+0x8c>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d001      	beq.n	8009312 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800930e:	2301      	movs	r3, #1
 8009310:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d10a      	bne.n	800932e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800931c:	f383 8811 	msr	BASEPRI, r3
 8009320:	f3bf 8f6f 	isb	sy
 8009324:	f3bf 8f4f 	dsb	sy
 8009328:	613b      	str	r3, [r7, #16]
}
 800932a:	bf00      	nop
 800932c:	e7fe      	b.n	800932c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800932e:	697b      	ldr	r3, [r7, #20]
}
 8009330:	4618      	mov	r0, r3
 8009332:	3718      	adds	r7, #24
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}
 8009338:	20000f38 	.word	0x20000f38
 800933c:	0800b1e0 	.word	0x0800b1e0
 8009340:	0800947d 	.word	0x0800947d
 8009344:	20000f3c 	.word	0x20000f3c

08009348 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b08a      	sub	sp, #40	; 0x28
 800934c:	af00      	add	r7, sp, #0
 800934e:	60f8      	str	r0, [r7, #12]
 8009350:	60b9      	str	r1, [r7, #8]
 8009352:	607a      	str	r2, [r7, #4]
 8009354:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009356:	2300      	movs	r3, #0
 8009358:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d10a      	bne.n	8009376 <xTimerGenericCommand+0x2e>
	__asm volatile
 8009360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009364:	f383 8811 	msr	BASEPRI, r3
 8009368:	f3bf 8f6f 	isb	sy
 800936c:	f3bf 8f4f 	dsb	sy
 8009370:	623b      	str	r3, [r7, #32]
}
 8009372:	bf00      	nop
 8009374:	e7fe      	b.n	8009374 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009376:	4b1a      	ldr	r3, [pc, #104]	; (80093e0 <xTimerGenericCommand+0x98>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d02a      	beq.n	80093d4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	2b05      	cmp	r3, #5
 800938e:	dc18      	bgt.n	80093c2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009390:	f7ff feb2 	bl	80090f8 <xTaskGetSchedulerState>
 8009394:	4603      	mov	r3, r0
 8009396:	2b02      	cmp	r3, #2
 8009398:	d109      	bne.n	80093ae <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800939a:	4b11      	ldr	r3, [pc, #68]	; (80093e0 <xTimerGenericCommand+0x98>)
 800939c:	6818      	ldr	r0, [r3, #0]
 800939e:	f107 0110 	add.w	r1, r7, #16
 80093a2:	2300      	movs	r3, #0
 80093a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093a6:	f7fe fc77 	bl	8007c98 <xQueueGenericSend>
 80093aa:	6278      	str	r0, [r7, #36]	; 0x24
 80093ac:	e012      	b.n	80093d4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80093ae:	4b0c      	ldr	r3, [pc, #48]	; (80093e0 <xTimerGenericCommand+0x98>)
 80093b0:	6818      	ldr	r0, [r3, #0]
 80093b2:	f107 0110 	add.w	r1, r7, #16
 80093b6:	2300      	movs	r3, #0
 80093b8:	2200      	movs	r2, #0
 80093ba:	f7fe fc6d 	bl	8007c98 <xQueueGenericSend>
 80093be:	6278      	str	r0, [r7, #36]	; 0x24
 80093c0:	e008      	b.n	80093d4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80093c2:	4b07      	ldr	r3, [pc, #28]	; (80093e0 <xTimerGenericCommand+0x98>)
 80093c4:	6818      	ldr	r0, [r3, #0]
 80093c6:	f107 0110 	add.w	r1, r7, #16
 80093ca:	2300      	movs	r3, #0
 80093cc:	683a      	ldr	r2, [r7, #0]
 80093ce:	f7fe fd61 	bl	8007e94 <xQueueGenericSendFromISR>
 80093d2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80093d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	3728      	adds	r7, #40	; 0x28
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}
 80093de:	bf00      	nop
 80093e0:	20000f38 	.word	0x20000f38

080093e4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b088      	sub	sp, #32
 80093e8:	af02      	add	r7, sp, #8
 80093ea:	6078      	str	r0, [r7, #4]
 80093ec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093ee:	4b22      	ldr	r3, [pc, #136]	; (8009478 <prvProcessExpiredTimer+0x94>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	68db      	ldr	r3, [r3, #12]
 80093f4:	68db      	ldr	r3, [r3, #12]
 80093f6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	3304      	adds	r3, #4
 80093fc:	4618      	mov	r0, r3
 80093fe:	f7fe fb1d 	bl	8007a3c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009402:	697b      	ldr	r3, [r7, #20]
 8009404:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009408:	f003 0304 	and.w	r3, r3, #4
 800940c:	2b00      	cmp	r3, #0
 800940e:	d022      	beq.n	8009456 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	699a      	ldr	r2, [r3, #24]
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	18d1      	adds	r1, r2, r3
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	683a      	ldr	r2, [r7, #0]
 800941c:	6978      	ldr	r0, [r7, #20]
 800941e:	f000 f8d1 	bl	80095c4 <prvInsertTimerInActiveList>
 8009422:	4603      	mov	r3, r0
 8009424:	2b00      	cmp	r3, #0
 8009426:	d01f      	beq.n	8009468 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009428:	2300      	movs	r3, #0
 800942a:	9300      	str	r3, [sp, #0]
 800942c:	2300      	movs	r3, #0
 800942e:	687a      	ldr	r2, [r7, #4]
 8009430:	2100      	movs	r1, #0
 8009432:	6978      	ldr	r0, [r7, #20]
 8009434:	f7ff ff88 	bl	8009348 <xTimerGenericCommand>
 8009438:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800943a:	693b      	ldr	r3, [r7, #16]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d113      	bne.n	8009468 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009444:	f383 8811 	msr	BASEPRI, r3
 8009448:	f3bf 8f6f 	isb	sy
 800944c:	f3bf 8f4f 	dsb	sy
 8009450:	60fb      	str	r3, [r7, #12]
}
 8009452:	bf00      	nop
 8009454:	e7fe      	b.n	8009454 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800945c:	f023 0301 	bic.w	r3, r3, #1
 8009460:	b2da      	uxtb	r2, r3
 8009462:	697b      	ldr	r3, [r7, #20]
 8009464:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	6a1b      	ldr	r3, [r3, #32]
 800946c:	6978      	ldr	r0, [r7, #20]
 800946e:	4798      	blx	r3
}
 8009470:	bf00      	nop
 8009472:	3718      	adds	r7, #24
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}
 8009478:	20000f30 	.word	0x20000f30

0800947c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b084      	sub	sp, #16
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009484:	f107 0308 	add.w	r3, r7, #8
 8009488:	4618      	mov	r0, r3
 800948a:	f000 f857 	bl	800953c <prvGetNextExpireTime>
 800948e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	4619      	mov	r1, r3
 8009494:	68f8      	ldr	r0, [r7, #12]
 8009496:	f000 f803 	bl	80094a0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800949a:	f000 f8d5 	bl	8009648 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800949e:	e7f1      	b.n	8009484 <prvTimerTask+0x8>

080094a0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b084      	sub	sp, #16
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
 80094a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80094aa:	f7ff fa39 	bl	8008920 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80094ae:	f107 0308 	add.w	r3, r7, #8
 80094b2:	4618      	mov	r0, r3
 80094b4:	f000 f866 	bl	8009584 <prvSampleTimeNow>
 80094b8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d130      	bne.n	8009522 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d10a      	bne.n	80094dc <prvProcessTimerOrBlockTask+0x3c>
 80094c6:	687a      	ldr	r2, [r7, #4]
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	429a      	cmp	r2, r3
 80094cc:	d806      	bhi.n	80094dc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80094ce:	f7ff fa35 	bl	800893c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80094d2:	68f9      	ldr	r1, [r7, #12]
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f7ff ff85 	bl	80093e4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80094da:	e024      	b.n	8009526 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d008      	beq.n	80094f4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80094e2:	4b13      	ldr	r3, [pc, #76]	; (8009530 <prvProcessTimerOrBlockTask+0x90>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d101      	bne.n	80094f0 <prvProcessTimerOrBlockTask+0x50>
 80094ec:	2301      	movs	r3, #1
 80094ee:	e000      	b.n	80094f2 <prvProcessTimerOrBlockTask+0x52>
 80094f0:	2300      	movs	r3, #0
 80094f2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80094f4:	4b0f      	ldr	r3, [pc, #60]	; (8009534 <prvProcessTimerOrBlockTask+0x94>)
 80094f6:	6818      	ldr	r0, [r3, #0]
 80094f8:	687a      	ldr	r2, [r7, #4]
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	1ad3      	subs	r3, r2, r3
 80094fe:	683a      	ldr	r2, [r7, #0]
 8009500:	4619      	mov	r1, r3
 8009502:	f7fe ff7d 	bl	8008400 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009506:	f7ff fa19 	bl	800893c <xTaskResumeAll>
 800950a:	4603      	mov	r3, r0
 800950c:	2b00      	cmp	r3, #0
 800950e:	d10a      	bne.n	8009526 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009510:	4b09      	ldr	r3, [pc, #36]	; (8009538 <prvProcessTimerOrBlockTask+0x98>)
 8009512:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009516:	601a      	str	r2, [r3, #0]
 8009518:	f3bf 8f4f 	dsb	sy
 800951c:	f3bf 8f6f 	isb	sy
}
 8009520:	e001      	b.n	8009526 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009522:	f7ff fa0b 	bl	800893c <xTaskResumeAll>
}
 8009526:	bf00      	nop
 8009528:	3710      	adds	r7, #16
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}
 800952e:	bf00      	nop
 8009530:	20000f34 	.word	0x20000f34
 8009534:	20000f38 	.word	0x20000f38
 8009538:	e000ed04 	.word	0xe000ed04

0800953c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800953c:	b480      	push	{r7}
 800953e:	b085      	sub	sp, #20
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009544:	4b0e      	ldr	r3, [pc, #56]	; (8009580 <prvGetNextExpireTime+0x44>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d101      	bne.n	8009552 <prvGetNextExpireTime+0x16>
 800954e:	2201      	movs	r2, #1
 8009550:	e000      	b.n	8009554 <prvGetNextExpireTime+0x18>
 8009552:	2200      	movs	r2, #0
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d105      	bne.n	800956c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009560:	4b07      	ldr	r3, [pc, #28]	; (8009580 <prvGetNextExpireTime+0x44>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	68db      	ldr	r3, [r3, #12]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	60fb      	str	r3, [r7, #12]
 800956a:	e001      	b.n	8009570 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800956c:	2300      	movs	r3, #0
 800956e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009570:	68fb      	ldr	r3, [r7, #12]
}
 8009572:	4618      	mov	r0, r3
 8009574:	3714      	adds	r7, #20
 8009576:	46bd      	mov	sp, r7
 8009578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957c:	4770      	bx	lr
 800957e:	bf00      	nop
 8009580:	20000f30 	.word	0x20000f30

08009584 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b084      	sub	sp, #16
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800958c:	f7ff fa74 	bl	8008a78 <xTaskGetTickCount>
 8009590:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009592:	4b0b      	ldr	r3, [pc, #44]	; (80095c0 <prvSampleTimeNow+0x3c>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	68fa      	ldr	r2, [r7, #12]
 8009598:	429a      	cmp	r2, r3
 800959a:	d205      	bcs.n	80095a8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800959c:	f000 f936 	bl	800980c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2201      	movs	r2, #1
 80095a4:	601a      	str	r2, [r3, #0]
 80095a6:	e002      	b.n	80095ae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2200      	movs	r2, #0
 80095ac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80095ae:	4a04      	ldr	r2, [pc, #16]	; (80095c0 <prvSampleTimeNow+0x3c>)
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80095b4:	68fb      	ldr	r3, [r7, #12]
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	3710      	adds	r7, #16
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}
 80095be:	bf00      	nop
 80095c0:	20000f40 	.word	0x20000f40

080095c4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b086      	sub	sp, #24
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	60f8      	str	r0, [r7, #12]
 80095cc:	60b9      	str	r1, [r7, #8]
 80095ce:	607a      	str	r2, [r7, #4]
 80095d0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80095d2:	2300      	movs	r3, #0
 80095d4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	68ba      	ldr	r2, [r7, #8]
 80095da:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	68fa      	ldr	r2, [r7, #12]
 80095e0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80095e2:	68ba      	ldr	r2, [r7, #8]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	429a      	cmp	r2, r3
 80095e8:	d812      	bhi.n	8009610 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095ea:	687a      	ldr	r2, [r7, #4]
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	1ad2      	subs	r2, r2, r3
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	699b      	ldr	r3, [r3, #24]
 80095f4:	429a      	cmp	r2, r3
 80095f6:	d302      	bcc.n	80095fe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80095f8:	2301      	movs	r3, #1
 80095fa:	617b      	str	r3, [r7, #20]
 80095fc:	e01b      	b.n	8009636 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80095fe:	4b10      	ldr	r3, [pc, #64]	; (8009640 <prvInsertTimerInActiveList+0x7c>)
 8009600:	681a      	ldr	r2, [r3, #0]
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	3304      	adds	r3, #4
 8009606:	4619      	mov	r1, r3
 8009608:	4610      	mov	r0, r2
 800960a:	f7fe f9de 	bl	80079ca <vListInsert>
 800960e:	e012      	b.n	8009636 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009610:	687a      	ldr	r2, [r7, #4]
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	429a      	cmp	r2, r3
 8009616:	d206      	bcs.n	8009626 <prvInsertTimerInActiveList+0x62>
 8009618:	68ba      	ldr	r2, [r7, #8]
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	429a      	cmp	r2, r3
 800961e:	d302      	bcc.n	8009626 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009620:	2301      	movs	r3, #1
 8009622:	617b      	str	r3, [r7, #20]
 8009624:	e007      	b.n	8009636 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009626:	4b07      	ldr	r3, [pc, #28]	; (8009644 <prvInsertTimerInActiveList+0x80>)
 8009628:	681a      	ldr	r2, [r3, #0]
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	3304      	adds	r3, #4
 800962e:	4619      	mov	r1, r3
 8009630:	4610      	mov	r0, r2
 8009632:	f7fe f9ca 	bl	80079ca <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009636:	697b      	ldr	r3, [r7, #20]
}
 8009638:	4618      	mov	r0, r3
 800963a:	3718      	adds	r7, #24
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}
 8009640:	20000f34 	.word	0x20000f34
 8009644:	20000f30 	.word	0x20000f30

08009648 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b08e      	sub	sp, #56	; 0x38
 800964c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800964e:	e0ca      	b.n	80097e6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2b00      	cmp	r3, #0
 8009654:	da18      	bge.n	8009688 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009656:	1d3b      	adds	r3, r7, #4
 8009658:	3304      	adds	r3, #4
 800965a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800965c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800965e:	2b00      	cmp	r3, #0
 8009660:	d10a      	bne.n	8009678 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009666:	f383 8811 	msr	BASEPRI, r3
 800966a:	f3bf 8f6f 	isb	sy
 800966e:	f3bf 8f4f 	dsb	sy
 8009672:	61fb      	str	r3, [r7, #28]
}
 8009674:	bf00      	nop
 8009676:	e7fe      	b.n	8009676 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800967e:	6850      	ldr	r0, [r2, #4]
 8009680:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009682:	6892      	ldr	r2, [r2, #8]
 8009684:	4611      	mov	r1, r2
 8009686:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2b00      	cmp	r3, #0
 800968c:	f2c0 80aa 	blt.w	80097e4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009696:	695b      	ldr	r3, [r3, #20]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d004      	beq.n	80096a6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800969c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800969e:	3304      	adds	r3, #4
 80096a0:	4618      	mov	r0, r3
 80096a2:	f7fe f9cb 	bl	8007a3c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80096a6:	463b      	mov	r3, r7
 80096a8:	4618      	mov	r0, r3
 80096aa:	f7ff ff6b 	bl	8009584 <prvSampleTimeNow>
 80096ae:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2b09      	cmp	r3, #9
 80096b4:	f200 8097 	bhi.w	80097e6 <prvProcessReceivedCommands+0x19e>
 80096b8:	a201      	add	r2, pc, #4	; (adr r2, 80096c0 <prvProcessReceivedCommands+0x78>)
 80096ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096be:	bf00      	nop
 80096c0:	080096e9 	.word	0x080096e9
 80096c4:	080096e9 	.word	0x080096e9
 80096c8:	080096e9 	.word	0x080096e9
 80096cc:	0800975d 	.word	0x0800975d
 80096d0:	08009771 	.word	0x08009771
 80096d4:	080097bb 	.word	0x080097bb
 80096d8:	080096e9 	.word	0x080096e9
 80096dc:	080096e9 	.word	0x080096e9
 80096e0:	0800975d 	.word	0x0800975d
 80096e4:	08009771 	.word	0x08009771
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80096e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80096ee:	f043 0301 	orr.w	r3, r3, #1
 80096f2:	b2da      	uxtb	r2, r3
 80096f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80096fa:	68ba      	ldr	r2, [r7, #8]
 80096fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096fe:	699b      	ldr	r3, [r3, #24]
 8009700:	18d1      	adds	r1, r2, r3
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009706:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009708:	f7ff ff5c 	bl	80095c4 <prvInsertTimerInActiveList>
 800970c:	4603      	mov	r3, r0
 800970e:	2b00      	cmp	r3, #0
 8009710:	d069      	beq.n	80097e6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009714:	6a1b      	ldr	r3, [r3, #32]
 8009716:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009718:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800971a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800971c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009720:	f003 0304 	and.w	r3, r3, #4
 8009724:	2b00      	cmp	r3, #0
 8009726:	d05e      	beq.n	80097e6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009728:	68ba      	ldr	r2, [r7, #8]
 800972a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800972c:	699b      	ldr	r3, [r3, #24]
 800972e:	441a      	add	r2, r3
 8009730:	2300      	movs	r3, #0
 8009732:	9300      	str	r3, [sp, #0]
 8009734:	2300      	movs	r3, #0
 8009736:	2100      	movs	r1, #0
 8009738:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800973a:	f7ff fe05 	bl	8009348 <xTimerGenericCommand>
 800973e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009740:	6a3b      	ldr	r3, [r7, #32]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d14f      	bne.n	80097e6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800974a:	f383 8811 	msr	BASEPRI, r3
 800974e:	f3bf 8f6f 	isb	sy
 8009752:	f3bf 8f4f 	dsb	sy
 8009756:	61bb      	str	r3, [r7, #24]
}
 8009758:	bf00      	nop
 800975a:	e7fe      	b.n	800975a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800975c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800975e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009762:	f023 0301 	bic.w	r3, r3, #1
 8009766:	b2da      	uxtb	r2, r3
 8009768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800976a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800976e:	e03a      	b.n	80097e6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009772:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009776:	f043 0301 	orr.w	r3, r3, #1
 800977a:	b2da      	uxtb	r2, r3
 800977c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800977e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009782:	68ba      	ldr	r2, [r7, #8]
 8009784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009786:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800978a:	699b      	ldr	r3, [r3, #24]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d10a      	bne.n	80097a6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009794:	f383 8811 	msr	BASEPRI, r3
 8009798:	f3bf 8f6f 	isb	sy
 800979c:	f3bf 8f4f 	dsb	sy
 80097a0:	617b      	str	r3, [r7, #20]
}
 80097a2:	bf00      	nop
 80097a4:	e7fe      	b.n	80097a4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80097a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097a8:	699a      	ldr	r2, [r3, #24]
 80097aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ac:	18d1      	adds	r1, r2, r3
 80097ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097b4:	f7ff ff06 	bl	80095c4 <prvInsertTimerInActiveList>
					break;
 80097b8:	e015      	b.n	80097e6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80097ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80097c0:	f003 0302 	and.w	r3, r3, #2
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d103      	bne.n	80097d0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80097c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097ca:	f000 fbe1 	bl	8009f90 <vPortFree>
 80097ce:	e00a      	b.n	80097e6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80097d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80097d6:	f023 0301 	bic.w	r3, r3, #1
 80097da:	b2da      	uxtb	r2, r3
 80097dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80097e2:	e000      	b.n	80097e6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80097e4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80097e6:	4b08      	ldr	r3, [pc, #32]	; (8009808 <prvProcessReceivedCommands+0x1c0>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	1d39      	adds	r1, r7, #4
 80097ec:	2200      	movs	r2, #0
 80097ee:	4618      	mov	r0, r3
 80097f0:	f7fe fbec 	bl	8007fcc <xQueueReceive>
 80097f4:	4603      	mov	r3, r0
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	f47f af2a 	bne.w	8009650 <prvProcessReceivedCommands+0x8>
	}
}
 80097fc:	bf00      	nop
 80097fe:	bf00      	nop
 8009800:	3730      	adds	r7, #48	; 0x30
 8009802:	46bd      	mov	sp, r7
 8009804:	bd80      	pop	{r7, pc}
 8009806:	bf00      	nop
 8009808:	20000f38 	.word	0x20000f38

0800980c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b088      	sub	sp, #32
 8009810:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009812:	e048      	b.n	80098a6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009814:	4b2d      	ldr	r3, [pc, #180]	; (80098cc <prvSwitchTimerLists+0xc0>)
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	68db      	ldr	r3, [r3, #12]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800981e:	4b2b      	ldr	r3, [pc, #172]	; (80098cc <prvSwitchTimerLists+0xc0>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	68db      	ldr	r3, [r3, #12]
 8009824:	68db      	ldr	r3, [r3, #12]
 8009826:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	3304      	adds	r3, #4
 800982c:	4618      	mov	r0, r3
 800982e:	f7fe f905 	bl	8007a3c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	6a1b      	ldr	r3, [r3, #32]
 8009836:	68f8      	ldr	r0, [r7, #12]
 8009838:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009840:	f003 0304 	and.w	r3, r3, #4
 8009844:	2b00      	cmp	r3, #0
 8009846:	d02e      	beq.n	80098a6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	699b      	ldr	r3, [r3, #24]
 800984c:	693a      	ldr	r2, [r7, #16]
 800984e:	4413      	add	r3, r2
 8009850:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009852:	68ba      	ldr	r2, [r7, #8]
 8009854:	693b      	ldr	r3, [r7, #16]
 8009856:	429a      	cmp	r2, r3
 8009858:	d90e      	bls.n	8009878 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	68ba      	ldr	r2, [r7, #8]
 800985e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	68fa      	ldr	r2, [r7, #12]
 8009864:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009866:	4b19      	ldr	r3, [pc, #100]	; (80098cc <prvSwitchTimerLists+0xc0>)
 8009868:	681a      	ldr	r2, [r3, #0]
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	3304      	adds	r3, #4
 800986e:	4619      	mov	r1, r3
 8009870:	4610      	mov	r0, r2
 8009872:	f7fe f8aa 	bl	80079ca <vListInsert>
 8009876:	e016      	b.n	80098a6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009878:	2300      	movs	r3, #0
 800987a:	9300      	str	r3, [sp, #0]
 800987c:	2300      	movs	r3, #0
 800987e:	693a      	ldr	r2, [r7, #16]
 8009880:	2100      	movs	r1, #0
 8009882:	68f8      	ldr	r0, [r7, #12]
 8009884:	f7ff fd60 	bl	8009348 <xTimerGenericCommand>
 8009888:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d10a      	bne.n	80098a6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009894:	f383 8811 	msr	BASEPRI, r3
 8009898:	f3bf 8f6f 	isb	sy
 800989c:	f3bf 8f4f 	dsb	sy
 80098a0:	603b      	str	r3, [r7, #0]
}
 80098a2:	bf00      	nop
 80098a4:	e7fe      	b.n	80098a4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80098a6:	4b09      	ldr	r3, [pc, #36]	; (80098cc <prvSwitchTimerLists+0xc0>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d1b1      	bne.n	8009814 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80098b0:	4b06      	ldr	r3, [pc, #24]	; (80098cc <prvSwitchTimerLists+0xc0>)
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80098b6:	4b06      	ldr	r3, [pc, #24]	; (80098d0 <prvSwitchTimerLists+0xc4>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	4a04      	ldr	r2, [pc, #16]	; (80098cc <prvSwitchTimerLists+0xc0>)
 80098bc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80098be:	4a04      	ldr	r2, [pc, #16]	; (80098d0 <prvSwitchTimerLists+0xc4>)
 80098c0:	697b      	ldr	r3, [r7, #20]
 80098c2:	6013      	str	r3, [r2, #0]
}
 80098c4:	bf00      	nop
 80098c6:	3718      	adds	r7, #24
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}
 80098cc:	20000f30 	.word	0x20000f30
 80098d0:	20000f34 	.word	0x20000f34

080098d4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b082      	sub	sp, #8
 80098d8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80098da:	f000 f96b 	bl	8009bb4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80098de:	4b15      	ldr	r3, [pc, #84]	; (8009934 <prvCheckForValidListAndQueue+0x60>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d120      	bne.n	8009928 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80098e6:	4814      	ldr	r0, [pc, #80]	; (8009938 <prvCheckForValidListAndQueue+0x64>)
 80098e8:	f7fe f81e 	bl	8007928 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80098ec:	4813      	ldr	r0, [pc, #76]	; (800993c <prvCheckForValidListAndQueue+0x68>)
 80098ee:	f7fe f81b 	bl	8007928 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80098f2:	4b13      	ldr	r3, [pc, #76]	; (8009940 <prvCheckForValidListAndQueue+0x6c>)
 80098f4:	4a10      	ldr	r2, [pc, #64]	; (8009938 <prvCheckForValidListAndQueue+0x64>)
 80098f6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80098f8:	4b12      	ldr	r3, [pc, #72]	; (8009944 <prvCheckForValidListAndQueue+0x70>)
 80098fa:	4a10      	ldr	r2, [pc, #64]	; (800993c <prvCheckForValidListAndQueue+0x68>)
 80098fc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80098fe:	2300      	movs	r3, #0
 8009900:	9300      	str	r3, [sp, #0]
 8009902:	4b11      	ldr	r3, [pc, #68]	; (8009948 <prvCheckForValidListAndQueue+0x74>)
 8009904:	4a11      	ldr	r2, [pc, #68]	; (800994c <prvCheckForValidListAndQueue+0x78>)
 8009906:	2110      	movs	r1, #16
 8009908:	200a      	movs	r0, #10
 800990a:	f7fe f929 	bl	8007b60 <xQueueGenericCreateStatic>
 800990e:	4603      	mov	r3, r0
 8009910:	4a08      	ldr	r2, [pc, #32]	; (8009934 <prvCheckForValidListAndQueue+0x60>)
 8009912:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009914:	4b07      	ldr	r3, [pc, #28]	; (8009934 <prvCheckForValidListAndQueue+0x60>)
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d005      	beq.n	8009928 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800991c:	4b05      	ldr	r3, [pc, #20]	; (8009934 <prvCheckForValidListAndQueue+0x60>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	490b      	ldr	r1, [pc, #44]	; (8009950 <prvCheckForValidListAndQueue+0x7c>)
 8009922:	4618      	mov	r0, r3
 8009924:	f7fe fd42 	bl	80083ac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009928:	f000 f974 	bl	8009c14 <vPortExitCritical>
}
 800992c:	bf00      	nop
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}
 8009932:	bf00      	nop
 8009934:	20000f38 	.word	0x20000f38
 8009938:	20000f08 	.word	0x20000f08
 800993c:	20000f1c 	.word	0x20000f1c
 8009940:	20000f30 	.word	0x20000f30
 8009944:	20000f34 	.word	0x20000f34
 8009948:	20000fe4 	.word	0x20000fe4
 800994c:	20000f44 	.word	0x20000f44
 8009950:	0800b1e8 	.word	0x0800b1e8

08009954 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009954:	b480      	push	{r7}
 8009956:	b085      	sub	sp, #20
 8009958:	af00      	add	r7, sp, #0
 800995a:	60f8      	str	r0, [r7, #12]
 800995c:	60b9      	str	r1, [r7, #8]
 800995e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	3b04      	subs	r3, #4
 8009964:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800996c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	3b04      	subs	r3, #4
 8009972:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	f023 0201 	bic.w	r2, r3, #1
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	3b04      	subs	r3, #4
 8009982:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009984:	4a0c      	ldr	r2, [pc, #48]	; (80099b8 <pxPortInitialiseStack+0x64>)
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	3b14      	subs	r3, #20
 800998e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009990:	687a      	ldr	r2, [r7, #4]
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	3b04      	subs	r3, #4
 800999a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	f06f 0202 	mvn.w	r2, #2
 80099a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	3b20      	subs	r3, #32
 80099a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80099aa:	68fb      	ldr	r3, [r7, #12]
}
 80099ac:	4618      	mov	r0, r3
 80099ae:	3714      	adds	r7, #20
 80099b0:	46bd      	mov	sp, r7
 80099b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b6:	4770      	bx	lr
 80099b8:	080099bd 	.word	0x080099bd

080099bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80099bc:	b480      	push	{r7}
 80099be:	b085      	sub	sp, #20
 80099c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80099c2:	2300      	movs	r3, #0
 80099c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80099c6:	4b12      	ldr	r3, [pc, #72]	; (8009a10 <prvTaskExitError+0x54>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80099ce:	d00a      	beq.n	80099e6 <prvTaskExitError+0x2a>
	__asm volatile
 80099d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d4:	f383 8811 	msr	BASEPRI, r3
 80099d8:	f3bf 8f6f 	isb	sy
 80099dc:	f3bf 8f4f 	dsb	sy
 80099e0:	60fb      	str	r3, [r7, #12]
}
 80099e2:	bf00      	nop
 80099e4:	e7fe      	b.n	80099e4 <prvTaskExitError+0x28>
	__asm volatile
 80099e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ea:	f383 8811 	msr	BASEPRI, r3
 80099ee:	f3bf 8f6f 	isb	sy
 80099f2:	f3bf 8f4f 	dsb	sy
 80099f6:	60bb      	str	r3, [r7, #8]
}
 80099f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80099fa:	bf00      	nop
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d0fc      	beq.n	80099fc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009a02:	bf00      	nop
 8009a04:	bf00      	nop
 8009a06:	3714      	adds	r7, #20
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0e:	4770      	bx	lr
 8009a10:	20000098 	.word	0x20000098
	...

08009a20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009a20:	4b07      	ldr	r3, [pc, #28]	; (8009a40 <pxCurrentTCBConst2>)
 8009a22:	6819      	ldr	r1, [r3, #0]
 8009a24:	6808      	ldr	r0, [r1, #0]
 8009a26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a2a:	f380 8809 	msr	PSP, r0
 8009a2e:	f3bf 8f6f 	isb	sy
 8009a32:	f04f 0000 	mov.w	r0, #0
 8009a36:	f380 8811 	msr	BASEPRI, r0
 8009a3a:	4770      	bx	lr
 8009a3c:	f3af 8000 	nop.w

08009a40 <pxCurrentTCBConst2>:
 8009a40:	20000a08 	.word	0x20000a08
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009a44:	bf00      	nop
 8009a46:	bf00      	nop

08009a48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009a48:	4808      	ldr	r0, [pc, #32]	; (8009a6c <prvPortStartFirstTask+0x24>)
 8009a4a:	6800      	ldr	r0, [r0, #0]
 8009a4c:	6800      	ldr	r0, [r0, #0]
 8009a4e:	f380 8808 	msr	MSP, r0
 8009a52:	f04f 0000 	mov.w	r0, #0
 8009a56:	f380 8814 	msr	CONTROL, r0
 8009a5a:	b662      	cpsie	i
 8009a5c:	b661      	cpsie	f
 8009a5e:	f3bf 8f4f 	dsb	sy
 8009a62:	f3bf 8f6f 	isb	sy
 8009a66:	df00      	svc	0
 8009a68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009a6a:	bf00      	nop
 8009a6c:	e000ed08 	.word	0xe000ed08

08009a70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b086      	sub	sp, #24
 8009a74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009a76:	4b46      	ldr	r3, [pc, #280]	; (8009b90 <xPortStartScheduler+0x120>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	4a46      	ldr	r2, [pc, #280]	; (8009b94 <xPortStartScheduler+0x124>)
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	d10a      	bne.n	8009a96 <xPortStartScheduler+0x26>
	__asm volatile
 8009a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a84:	f383 8811 	msr	BASEPRI, r3
 8009a88:	f3bf 8f6f 	isb	sy
 8009a8c:	f3bf 8f4f 	dsb	sy
 8009a90:	613b      	str	r3, [r7, #16]
}
 8009a92:	bf00      	nop
 8009a94:	e7fe      	b.n	8009a94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009a96:	4b3e      	ldr	r3, [pc, #248]	; (8009b90 <xPortStartScheduler+0x120>)
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	4a3f      	ldr	r2, [pc, #252]	; (8009b98 <xPortStartScheduler+0x128>)
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d10a      	bne.n	8009ab6 <xPortStartScheduler+0x46>
	__asm volatile
 8009aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aa4:	f383 8811 	msr	BASEPRI, r3
 8009aa8:	f3bf 8f6f 	isb	sy
 8009aac:	f3bf 8f4f 	dsb	sy
 8009ab0:	60fb      	str	r3, [r7, #12]
}
 8009ab2:	bf00      	nop
 8009ab4:	e7fe      	b.n	8009ab4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009ab6:	4b39      	ldr	r3, [pc, #228]	; (8009b9c <xPortStartScheduler+0x12c>)
 8009ab8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009aba:	697b      	ldr	r3, [r7, #20]
 8009abc:	781b      	ldrb	r3, [r3, #0]
 8009abe:	b2db      	uxtb	r3, r3
 8009ac0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009ac2:	697b      	ldr	r3, [r7, #20]
 8009ac4:	22ff      	movs	r2, #255	; 0xff
 8009ac6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009ac8:	697b      	ldr	r3, [r7, #20]
 8009aca:	781b      	ldrb	r3, [r3, #0]
 8009acc:	b2db      	uxtb	r3, r3
 8009ace:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009ad0:	78fb      	ldrb	r3, [r7, #3]
 8009ad2:	b2db      	uxtb	r3, r3
 8009ad4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009ad8:	b2da      	uxtb	r2, r3
 8009ada:	4b31      	ldr	r3, [pc, #196]	; (8009ba0 <xPortStartScheduler+0x130>)
 8009adc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009ade:	4b31      	ldr	r3, [pc, #196]	; (8009ba4 <xPortStartScheduler+0x134>)
 8009ae0:	2207      	movs	r2, #7
 8009ae2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009ae4:	e009      	b.n	8009afa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009ae6:	4b2f      	ldr	r3, [pc, #188]	; (8009ba4 <xPortStartScheduler+0x134>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	3b01      	subs	r3, #1
 8009aec:	4a2d      	ldr	r2, [pc, #180]	; (8009ba4 <xPortStartScheduler+0x134>)
 8009aee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009af0:	78fb      	ldrb	r3, [r7, #3]
 8009af2:	b2db      	uxtb	r3, r3
 8009af4:	005b      	lsls	r3, r3, #1
 8009af6:	b2db      	uxtb	r3, r3
 8009af8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009afa:	78fb      	ldrb	r3, [r7, #3]
 8009afc:	b2db      	uxtb	r3, r3
 8009afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b02:	2b80      	cmp	r3, #128	; 0x80
 8009b04:	d0ef      	beq.n	8009ae6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009b06:	4b27      	ldr	r3, [pc, #156]	; (8009ba4 <xPortStartScheduler+0x134>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f1c3 0307 	rsb	r3, r3, #7
 8009b0e:	2b04      	cmp	r3, #4
 8009b10:	d00a      	beq.n	8009b28 <xPortStartScheduler+0xb8>
	__asm volatile
 8009b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b16:	f383 8811 	msr	BASEPRI, r3
 8009b1a:	f3bf 8f6f 	isb	sy
 8009b1e:	f3bf 8f4f 	dsb	sy
 8009b22:	60bb      	str	r3, [r7, #8]
}
 8009b24:	bf00      	nop
 8009b26:	e7fe      	b.n	8009b26 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009b28:	4b1e      	ldr	r3, [pc, #120]	; (8009ba4 <xPortStartScheduler+0x134>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	021b      	lsls	r3, r3, #8
 8009b2e:	4a1d      	ldr	r2, [pc, #116]	; (8009ba4 <xPortStartScheduler+0x134>)
 8009b30:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009b32:	4b1c      	ldr	r3, [pc, #112]	; (8009ba4 <xPortStartScheduler+0x134>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009b3a:	4a1a      	ldr	r2, [pc, #104]	; (8009ba4 <xPortStartScheduler+0x134>)
 8009b3c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	b2da      	uxtb	r2, r3
 8009b42:	697b      	ldr	r3, [r7, #20]
 8009b44:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009b46:	4b18      	ldr	r3, [pc, #96]	; (8009ba8 <xPortStartScheduler+0x138>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	4a17      	ldr	r2, [pc, #92]	; (8009ba8 <xPortStartScheduler+0x138>)
 8009b4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009b50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009b52:	4b15      	ldr	r3, [pc, #84]	; (8009ba8 <xPortStartScheduler+0x138>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	4a14      	ldr	r2, [pc, #80]	; (8009ba8 <xPortStartScheduler+0x138>)
 8009b58:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009b5c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009b5e:	f000 f8dd 	bl	8009d1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009b62:	4b12      	ldr	r3, [pc, #72]	; (8009bac <xPortStartScheduler+0x13c>)
 8009b64:	2200      	movs	r2, #0
 8009b66:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009b68:	f000 f8fc 	bl	8009d64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009b6c:	4b10      	ldr	r3, [pc, #64]	; (8009bb0 <xPortStartScheduler+0x140>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	4a0f      	ldr	r2, [pc, #60]	; (8009bb0 <xPortStartScheduler+0x140>)
 8009b72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009b76:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009b78:	f7ff ff66 	bl	8009a48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009b7c:	f7ff f846 	bl	8008c0c <vTaskSwitchContext>
	prvTaskExitError();
 8009b80:	f7ff ff1c 	bl	80099bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009b84:	2300      	movs	r3, #0
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	3718      	adds	r7, #24
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}
 8009b8e:	bf00      	nop
 8009b90:	e000ed00 	.word	0xe000ed00
 8009b94:	410fc271 	.word	0x410fc271
 8009b98:	410fc270 	.word	0x410fc270
 8009b9c:	e000e400 	.word	0xe000e400
 8009ba0:	20001034 	.word	0x20001034
 8009ba4:	20001038 	.word	0x20001038
 8009ba8:	e000ed20 	.word	0xe000ed20
 8009bac:	20000098 	.word	0x20000098
 8009bb0:	e000ef34 	.word	0xe000ef34

08009bb4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b083      	sub	sp, #12
 8009bb8:	af00      	add	r7, sp, #0
	__asm volatile
 8009bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bbe:	f383 8811 	msr	BASEPRI, r3
 8009bc2:	f3bf 8f6f 	isb	sy
 8009bc6:	f3bf 8f4f 	dsb	sy
 8009bca:	607b      	str	r3, [r7, #4]
}
 8009bcc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009bce:	4b0f      	ldr	r3, [pc, #60]	; (8009c0c <vPortEnterCritical+0x58>)
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	3301      	adds	r3, #1
 8009bd4:	4a0d      	ldr	r2, [pc, #52]	; (8009c0c <vPortEnterCritical+0x58>)
 8009bd6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009bd8:	4b0c      	ldr	r3, [pc, #48]	; (8009c0c <vPortEnterCritical+0x58>)
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	2b01      	cmp	r3, #1
 8009bde:	d10f      	bne.n	8009c00 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009be0:	4b0b      	ldr	r3, [pc, #44]	; (8009c10 <vPortEnterCritical+0x5c>)
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	b2db      	uxtb	r3, r3
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d00a      	beq.n	8009c00 <vPortEnterCritical+0x4c>
	__asm volatile
 8009bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bee:	f383 8811 	msr	BASEPRI, r3
 8009bf2:	f3bf 8f6f 	isb	sy
 8009bf6:	f3bf 8f4f 	dsb	sy
 8009bfa:	603b      	str	r3, [r7, #0]
}
 8009bfc:	bf00      	nop
 8009bfe:	e7fe      	b.n	8009bfe <vPortEnterCritical+0x4a>
	}
}
 8009c00:	bf00      	nop
 8009c02:	370c      	adds	r7, #12
 8009c04:	46bd      	mov	sp, r7
 8009c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0a:	4770      	bx	lr
 8009c0c:	20000098 	.word	0x20000098
 8009c10:	e000ed04 	.word	0xe000ed04

08009c14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009c14:	b480      	push	{r7}
 8009c16:	b083      	sub	sp, #12
 8009c18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009c1a:	4b12      	ldr	r3, [pc, #72]	; (8009c64 <vPortExitCritical+0x50>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d10a      	bne.n	8009c38 <vPortExitCritical+0x24>
	__asm volatile
 8009c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c26:	f383 8811 	msr	BASEPRI, r3
 8009c2a:	f3bf 8f6f 	isb	sy
 8009c2e:	f3bf 8f4f 	dsb	sy
 8009c32:	607b      	str	r3, [r7, #4]
}
 8009c34:	bf00      	nop
 8009c36:	e7fe      	b.n	8009c36 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009c38:	4b0a      	ldr	r3, [pc, #40]	; (8009c64 <vPortExitCritical+0x50>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	3b01      	subs	r3, #1
 8009c3e:	4a09      	ldr	r2, [pc, #36]	; (8009c64 <vPortExitCritical+0x50>)
 8009c40:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009c42:	4b08      	ldr	r3, [pc, #32]	; (8009c64 <vPortExitCritical+0x50>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d105      	bne.n	8009c56 <vPortExitCritical+0x42>
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	f383 8811 	msr	BASEPRI, r3
}
 8009c54:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009c56:	bf00      	nop
 8009c58:	370c      	adds	r7, #12
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c60:	4770      	bx	lr
 8009c62:	bf00      	nop
 8009c64:	20000098 	.word	0x20000098
	...

08009c70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009c70:	f3ef 8009 	mrs	r0, PSP
 8009c74:	f3bf 8f6f 	isb	sy
 8009c78:	4b15      	ldr	r3, [pc, #84]	; (8009cd0 <pxCurrentTCBConst>)
 8009c7a:	681a      	ldr	r2, [r3, #0]
 8009c7c:	f01e 0f10 	tst.w	lr, #16
 8009c80:	bf08      	it	eq
 8009c82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009c86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c8a:	6010      	str	r0, [r2, #0]
 8009c8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009c90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009c94:	f380 8811 	msr	BASEPRI, r0
 8009c98:	f3bf 8f4f 	dsb	sy
 8009c9c:	f3bf 8f6f 	isb	sy
 8009ca0:	f7fe ffb4 	bl	8008c0c <vTaskSwitchContext>
 8009ca4:	f04f 0000 	mov.w	r0, #0
 8009ca8:	f380 8811 	msr	BASEPRI, r0
 8009cac:	bc09      	pop	{r0, r3}
 8009cae:	6819      	ldr	r1, [r3, #0]
 8009cb0:	6808      	ldr	r0, [r1, #0]
 8009cb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cb6:	f01e 0f10 	tst.w	lr, #16
 8009cba:	bf08      	it	eq
 8009cbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009cc0:	f380 8809 	msr	PSP, r0
 8009cc4:	f3bf 8f6f 	isb	sy
 8009cc8:	4770      	bx	lr
 8009cca:	bf00      	nop
 8009ccc:	f3af 8000 	nop.w

08009cd0 <pxCurrentTCBConst>:
 8009cd0:	20000a08 	.word	0x20000a08
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009cd4:	bf00      	nop
 8009cd6:	bf00      	nop

08009cd8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b082      	sub	sp, #8
 8009cdc:	af00      	add	r7, sp, #0
	__asm volatile
 8009cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce2:	f383 8811 	msr	BASEPRI, r3
 8009ce6:	f3bf 8f6f 	isb	sy
 8009cea:	f3bf 8f4f 	dsb	sy
 8009cee:	607b      	str	r3, [r7, #4]
}
 8009cf0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009cf2:	f7fe fed1 	bl	8008a98 <xTaskIncrementTick>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d003      	beq.n	8009d04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009cfc:	4b06      	ldr	r3, [pc, #24]	; (8009d18 <xPortSysTickHandler+0x40>)
 8009cfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d02:	601a      	str	r2, [r3, #0]
 8009d04:	2300      	movs	r3, #0
 8009d06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	f383 8811 	msr	BASEPRI, r3
}
 8009d0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009d10:	bf00      	nop
 8009d12:	3708      	adds	r7, #8
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}
 8009d18:	e000ed04 	.word	0xe000ed04

08009d1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009d1c:	b480      	push	{r7}
 8009d1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009d20:	4b0b      	ldr	r3, [pc, #44]	; (8009d50 <vPortSetupTimerInterrupt+0x34>)
 8009d22:	2200      	movs	r2, #0
 8009d24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009d26:	4b0b      	ldr	r3, [pc, #44]	; (8009d54 <vPortSetupTimerInterrupt+0x38>)
 8009d28:	2200      	movs	r2, #0
 8009d2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009d2c:	4b0a      	ldr	r3, [pc, #40]	; (8009d58 <vPortSetupTimerInterrupt+0x3c>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	4a0a      	ldr	r2, [pc, #40]	; (8009d5c <vPortSetupTimerInterrupt+0x40>)
 8009d32:	fba2 2303 	umull	r2, r3, r2, r3
 8009d36:	099b      	lsrs	r3, r3, #6
 8009d38:	4a09      	ldr	r2, [pc, #36]	; (8009d60 <vPortSetupTimerInterrupt+0x44>)
 8009d3a:	3b01      	subs	r3, #1
 8009d3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009d3e:	4b04      	ldr	r3, [pc, #16]	; (8009d50 <vPortSetupTimerInterrupt+0x34>)
 8009d40:	2207      	movs	r2, #7
 8009d42:	601a      	str	r2, [r3, #0]
}
 8009d44:	bf00      	nop
 8009d46:	46bd      	mov	sp, r7
 8009d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4c:	4770      	bx	lr
 8009d4e:	bf00      	nop
 8009d50:	e000e010 	.word	0xe000e010
 8009d54:	e000e018 	.word	0xe000e018
 8009d58:	20000000 	.word	0x20000000
 8009d5c:	10624dd3 	.word	0x10624dd3
 8009d60:	e000e014 	.word	0xe000e014

08009d64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009d64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009d74 <vPortEnableVFP+0x10>
 8009d68:	6801      	ldr	r1, [r0, #0]
 8009d6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009d6e:	6001      	str	r1, [r0, #0]
 8009d70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009d72:	bf00      	nop
 8009d74:	e000ed88 	.word	0xe000ed88

08009d78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009d78:	b480      	push	{r7}
 8009d7a:	b085      	sub	sp, #20
 8009d7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009d7e:	f3ef 8305 	mrs	r3, IPSR
 8009d82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	2b0f      	cmp	r3, #15
 8009d88:	d914      	bls.n	8009db4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009d8a:	4a17      	ldr	r2, [pc, #92]	; (8009de8 <vPortValidateInterruptPriority+0x70>)
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	4413      	add	r3, r2
 8009d90:	781b      	ldrb	r3, [r3, #0]
 8009d92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009d94:	4b15      	ldr	r3, [pc, #84]	; (8009dec <vPortValidateInterruptPriority+0x74>)
 8009d96:	781b      	ldrb	r3, [r3, #0]
 8009d98:	7afa      	ldrb	r2, [r7, #11]
 8009d9a:	429a      	cmp	r2, r3
 8009d9c:	d20a      	bcs.n	8009db4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da2:	f383 8811 	msr	BASEPRI, r3
 8009da6:	f3bf 8f6f 	isb	sy
 8009daa:	f3bf 8f4f 	dsb	sy
 8009dae:	607b      	str	r3, [r7, #4]
}
 8009db0:	bf00      	nop
 8009db2:	e7fe      	b.n	8009db2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009db4:	4b0e      	ldr	r3, [pc, #56]	; (8009df0 <vPortValidateInterruptPriority+0x78>)
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009dbc:	4b0d      	ldr	r3, [pc, #52]	; (8009df4 <vPortValidateInterruptPriority+0x7c>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	429a      	cmp	r2, r3
 8009dc2:	d90a      	bls.n	8009dda <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dc8:	f383 8811 	msr	BASEPRI, r3
 8009dcc:	f3bf 8f6f 	isb	sy
 8009dd0:	f3bf 8f4f 	dsb	sy
 8009dd4:	603b      	str	r3, [r7, #0]
}
 8009dd6:	bf00      	nop
 8009dd8:	e7fe      	b.n	8009dd8 <vPortValidateInterruptPriority+0x60>
	}
 8009dda:	bf00      	nop
 8009ddc:	3714      	adds	r7, #20
 8009dde:	46bd      	mov	sp, r7
 8009de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de4:	4770      	bx	lr
 8009de6:	bf00      	nop
 8009de8:	e000e3f0 	.word	0xe000e3f0
 8009dec:	20001034 	.word	0x20001034
 8009df0:	e000ed0c 	.word	0xe000ed0c
 8009df4:	20001038 	.word	0x20001038

08009df8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b08a      	sub	sp, #40	; 0x28
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009e00:	2300      	movs	r3, #0
 8009e02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009e04:	f7fe fd8c 	bl	8008920 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009e08:	4b5b      	ldr	r3, [pc, #364]	; (8009f78 <pvPortMalloc+0x180>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d101      	bne.n	8009e14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009e10:	f000 f920 	bl	800a054 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009e14:	4b59      	ldr	r3, [pc, #356]	; (8009f7c <pvPortMalloc+0x184>)
 8009e16:	681a      	ldr	r2, [r3, #0]
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	4013      	ands	r3, r2
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	f040 8093 	bne.w	8009f48 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d01d      	beq.n	8009e64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009e28:	2208      	movs	r2, #8
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	4413      	add	r3, r2
 8009e2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f003 0307 	and.w	r3, r3, #7
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d014      	beq.n	8009e64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	f023 0307 	bic.w	r3, r3, #7
 8009e40:	3308      	adds	r3, #8
 8009e42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f003 0307 	and.w	r3, r3, #7
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d00a      	beq.n	8009e64 <pvPortMalloc+0x6c>
	__asm volatile
 8009e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e52:	f383 8811 	msr	BASEPRI, r3
 8009e56:	f3bf 8f6f 	isb	sy
 8009e5a:	f3bf 8f4f 	dsb	sy
 8009e5e:	617b      	str	r3, [r7, #20]
}
 8009e60:	bf00      	nop
 8009e62:	e7fe      	b.n	8009e62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d06e      	beq.n	8009f48 <pvPortMalloc+0x150>
 8009e6a:	4b45      	ldr	r3, [pc, #276]	; (8009f80 <pvPortMalloc+0x188>)
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	687a      	ldr	r2, [r7, #4]
 8009e70:	429a      	cmp	r2, r3
 8009e72:	d869      	bhi.n	8009f48 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009e74:	4b43      	ldr	r3, [pc, #268]	; (8009f84 <pvPortMalloc+0x18c>)
 8009e76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009e78:	4b42      	ldr	r3, [pc, #264]	; (8009f84 <pvPortMalloc+0x18c>)
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009e7e:	e004      	b.n	8009e8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e8c:	685b      	ldr	r3, [r3, #4]
 8009e8e:	687a      	ldr	r2, [r7, #4]
 8009e90:	429a      	cmp	r2, r3
 8009e92:	d903      	bls.n	8009e9c <pvPortMalloc+0xa4>
 8009e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d1f1      	bne.n	8009e80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009e9c:	4b36      	ldr	r3, [pc, #216]	; (8009f78 <pvPortMalloc+0x180>)
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ea2:	429a      	cmp	r2, r3
 8009ea4:	d050      	beq.n	8009f48 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009ea6:	6a3b      	ldr	r3, [r7, #32]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	2208      	movs	r2, #8
 8009eac:	4413      	add	r3, r2
 8009eae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb2:	681a      	ldr	r2, [r3, #0]
 8009eb4:	6a3b      	ldr	r3, [r7, #32]
 8009eb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eba:	685a      	ldr	r2, [r3, #4]
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	1ad2      	subs	r2, r2, r3
 8009ec0:	2308      	movs	r3, #8
 8009ec2:	005b      	lsls	r3, r3, #1
 8009ec4:	429a      	cmp	r2, r3
 8009ec6:	d91f      	bls.n	8009f08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009ec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	4413      	add	r3, r2
 8009ece:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ed0:	69bb      	ldr	r3, [r7, #24]
 8009ed2:	f003 0307 	and.w	r3, r3, #7
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d00a      	beq.n	8009ef0 <pvPortMalloc+0xf8>
	__asm volatile
 8009eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ede:	f383 8811 	msr	BASEPRI, r3
 8009ee2:	f3bf 8f6f 	isb	sy
 8009ee6:	f3bf 8f4f 	dsb	sy
 8009eea:	613b      	str	r3, [r7, #16]
}
 8009eec:	bf00      	nop
 8009eee:	e7fe      	b.n	8009eee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef2:	685a      	ldr	r2, [r3, #4]
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	1ad2      	subs	r2, r2, r3
 8009ef8:	69bb      	ldr	r3, [r7, #24]
 8009efa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009efe:	687a      	ldr	r2, [r7, #4]
 8009f00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009f02:	69b8      	ldr	r0, [r7, #24]
 8009f04:	f000 f908 	bl	800a118 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009f08:	4b1d      	ldr	r3, [pc, #116]	; (8009f80 <pvPortMalloc+0x188>)
 8009f0a:	681a      	ldr	r2, [r3, #0]
 8009f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f0e:	685b      	ldr	r3, [r3, #4]
 8009f10:	1ad3      	subs	r3, r2, r3
 8009f12:	4a1b      	ldr	r2, [pc, #108]	; (8009f80 <pvPortMalloc+0x188>)
 8009f14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009f16:	4b1a      	ldr	r3, [pc, #104]	; (8009f80 <pvPortMalloc+0x188>)
 8009f18:	681a      	ldr	r2, [r3, #0]
 8009f1a:	4b1b      	ldr	r3, [pc, #108]	; (8009f88 <pvPortMalloc+0x190>)
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	429a      	cmp	r2, r3
 8009f20:	d203      	bcs.n	8009f2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009f22:	4b17      	ldr	r3, [pc, #92]	; (8009f80 <pvPortMalloc+0x188>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	4a18      	ldr	r2, [pc, #96]	; (8009f88 <pvPortMalloc+0x190>)
 8009f28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f2c:	685a      	ldr	r2, [r3, #4]
 8009f2e:	4b13      	ldr	r3, [pc, #76]	; (8009f7c <pvPortMalloc+0x184>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	431a      	orrs	r2, r3
 8009f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009f3e:	4b13      	ldr	r3, [pc, #76]	; (8009f8c <pvPortMalloc+0x194>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	3301      	adds	r3, #1
 8009f44:	4a11      	ldr	r2, [pc, #68]	; (8009f8c <pvPortMalloc+0x194>)
 8009f46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009f48:	f7fe fcf8 	bl	800893c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009f4c:	69fb      	ldr	r3, [r7, #28]
 8009f4e:	f003 0307 	and.w	r3, r3, #7
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d00a      	beq.n	8009f6c <pvPortMalloc+0x174>
	__asm volatile
 8009f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f5a:	f383 8811 	msr	BASEPRI, r3
 8009f5e:	f3bf 8f6f 	isb	sy
 8009f62:	f3bf 8f4f 	dsb	sy
 8009f66:	60fb      	str	r3, [r7, #12]
}
 8009f68:	bf00      	nop
 8009f6a:	e7fe      	b.n	8009f6a <pvPortMalloc+0x172>
	return pvReturn;
 8009f6c:	69fb      	ldr	r3, [r7, #28]
}
 8009f6e:	4618      	mov	r0, r3
 8009f70:	3728      	adds	r7, #40	; 0x28
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bd80      	pop	{r7, pc}
 8009f76:	bf00      	nop
 8009f78:	20004c44 	.word	0x20004c44
 8009f7c:	20004c58 	.word	0x20004c58
 8009f80:	20004c48 	.word	0x20004c48
 8009f84:	20004c3c 	.word	0x20004c3c
 8009f88:	20004c4c 	.word	0x20004c4c
 8009f8c:	20004c50 	.word	0x20004c50

08009f90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b086      	sub	sp, #24
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d04d      	beq.n	800a03e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009fa2:	2308      	movs	r3, #8
 8009fa4:	425b      	negs	r3, r3
 8009fa6:	697a      	ldr	r2, [r7, #20]
 8009fa8:	4413      	add	r3, r2
 8009faa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009fac:	697b      	ldr	r3, [r7, #20]
 8009fae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009fb0:	693b      	ldr	r3, [r7, #16]
 8009fb2:	685a      	ldr	r2, [r3, #4]
 8009fb4:	4b24      	ldr	r3, [pc, #144]	; (800a048 <vPortFree+0xb8>)
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	4013      	ands	r3, r2
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d10a      	bne.n	8009fd4 <vPortFree+0x44>
	__asm volatile
 8009fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fc2:	f383 8811 	msr	BASEPRI, r3
 8009fc6:	f3bf 8f6f 	isb	sy
 8009fca:	f3bf 8f4f 	dsb	sy
 8009fce:	60fb      	str	r3, [r7, #12]
}
 8009fd0:	bf00      	nop
 8009fd2:	e7fe      	b.n	8009fd2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009fd4:	693b      	ldr	r3, [r7, #16]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d00a      	beq.n	8009ff2 <vPortFree+0x62>
	__asm volatile
 8009fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fe0:	f383 8811 	msr	BASEPRI, r3
 8009fe4:	f3bf 8f6f 	isb	sy
 8009fe8:	f3bf 8f4f 	dsb	sy
 8009fec:	60bb      	str	r3, [r7, #8]
}
 8009fee:	bf00      	nop
 8009ff0:	e7fe      	b.n	8009ff0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009ff2:	693b      	ldr	r3, [r7, #16]
 8009ff4:	685a      	ldr	r2, [r3, #4]
 8009ff6:	4b14      	ldr	r3, [pc, #80]	; (800a048 <vPortFree+0xb8>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	4013      	ands	r3, r2
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d01e      	beq.n	800a03e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a000:	693b      	ldr	r3, [r7, #16]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d11a      	bne.n	800a03e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a008:	693b      	ldr	r3, [r7, #16]
 800a00a:	685a      	ldr	r2, [r3, #4]
 800a00c:	4b0e      	ldr	r3, [pc, #56]	; (800a048 <vPortFree+0xb8>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	43db      	mvns	r3, r3
 800a012:	401a      	ands	r2, r3
 800a014:	693b      	ldr	r3, [r7, #16]
 800a016:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a018:	f7fe fc82 	bl	8008920 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a01c:	693b      	ldr	r3, [r7, #16]
 800a01e:	685a      	ldr	r2, [r3, #4]
 800a020:	4b0a      	ldr	r3, [pc, #40]	; (800a04c <vPortFree+0xbc>)
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	4413      	add	r3, r2
 800a026:	4a09      	ldr	r2, [pc, #36]	; (800a04c <vPortFree+0xbc>)
 800a028:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a02a:	6938      	ldr	r0, [r7, #16]
 800a02c:	f000 f874 	bl	800a118 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a030:	4b07      	ldr	r3, [pc, #28]	; (800a050 <vPortFree+0xc0>)
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	3301      	adds	r3, #1
 800a036:	4a06      	ldr	r2, [pc, #24]	; (800a050 <vPortFree+0xc0>)
 800a038:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a03a:	f7fe fc7f 	bl	800893c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a03e:	bf00      	nop
 800a040:	3718      	adds	r7, #24
 800a042:	46bd      	mov	sp, r7
 800a044:	bd80      	pop	{r7, pc}
 800a046:	bf00      	nop
 800a048:	20004c58 	.word	0x20004c58
 800a04c:	20004c48 	.word	0x20004c48
 800a050:	20004c54 	.word	0x20004c54

0800a054 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a054:	b480      	push	{r7}
 800a056:	b085      	sub	sp, #20
 800a058:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a05a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a05e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a060:	4b27      	ldr	r3, [pc, #156]	; (800a100 <prvHeapInit+0xac>)
 800a062:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	f003 0307 	and.w	r3, r3, #7
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d00c      	beq.n	800a088 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	3307      	adds	r3, #7
 800a072:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	f023 0307 	bic.w	r3, r3, #7
 800a07a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a07c:	68ba      	ldr	r2, [r7, #8]
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	1ad3      	subs	r3, r2, r3
 800a082:	4a1f      	ldr	r2, [pc, #124]	; (800a100 <prvHeapInit+0xac>)
 800a084:	4413      	add	r3, r2
 800a086:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a08c:	4a1d      	ldr	r2, [pc, #116]	; (800a104 <prvHeapInit+0xb0>)
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a092:	4b1c      	ldr	r3, [pc, #112]	; (800a104 <prvHeapInit+0xb0>)
 800a094:	2200      	movs	r2, #0
 800a096:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	68ba      	ldr	r2, [r7, #8]
 800a09c:	4413      	add	r3, r2
 800a09e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a0a0:	2208      	movs	r2, #8
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	1a9b      	subs	r3, r3, r2
 800a0a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	f023 0307 	bic.w	r3, r3, #7
 800a0ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	4a15      	ldr	r2, [pc, #84]	; (800a108 <prvHeapInit+0xb4>)
 800a0b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a0b6:	4b14      	ldr	r3, [pc, #80]	; (800a108 <prvHeapInit+0xb4>)
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a0be:	4b12      	ldr	r3, [pc, #72]	; (800a108 <prvHeapInit+0xb4>)
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	68fa      	ldr	r2, [r7, #12]
 800a0ce:	1ad2      	subs	r2, r2, r3
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a0d4:	4b0c      	ldr	r3, [pc, #48]	; (800a108 <prvHeapInit+0xb4>)
 800a0d6:	681a      	ldr	r2, [r3, #0]
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	685b      	ldr	r3, [r3, #4]
 800a0e0:	4a0a      	ldr	r2, [pc, #40]	; (800a10c <prvHeapInit+0xb8>)
 800a0e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	685b      	ldr	r3, [r3, #4]
 800a0e8:	4a09      	ldr	r2, [pc, #36]	; (800a110 <prvHeapInit+0xbc>)
 800a0ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a0ec:	4b09      	ldr	r3, [pc, #36]	; (800a114 <prvHeapInit+0xc0>)
 800a0ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a0f2:	601a      	str	r2, [r3, #0]
}
 800a0f4:	bf00      	nop
 800a0f6:	3714      	adds	r7, #20
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fe:	4770      	bx	lr
 800a100:	2000103c 	.word	0x2000103c
 800a104:	20004c3c 	.word	0x20004c3c
 800a108:	20004c44 	.word	0x20004c44
 800a10c:	20004c4c 	.word	0x20004c4c
 800a110:	20004c48 	.word	0x20004c48
 800a114:	20004c58 	.word	0x20004c58

0800a118 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a118:	b480      	push	{r7}
 800a11a:	b085      	sub	sp, #20
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a120:	4b28      	ldr	r3, [pc, #160]	; (800a1c4 <prvInsertBlockIntoFreeList+0xac>)
 800a122:	60fb      	str	r3, [r7, #12]
 800a124:	e002      	b.n	800a12c <prvInsertBlockIntoFreeList+0x14>
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	60fb      	str	r3, [r7, #12]
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	687a      	ldr	r2, [r7, #4]
 800a132:	429a      	cmp	r2, r3
 800a134:	d8f7      	bhi.n	800a126 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	685b      	ldr	r3, [r3, #4]
 800a13e:	68ba      	ldr	r2, [r7, #8]
 800a140:	4413      	add	r3, r2
 800a142:	687a      	ldr	r2, [r7, #4]
 800a144:	429a      	cmp	r2, r3
 800a146:	d108      	bne.n	800a15a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	685a      	ldr	r2, [r3, #4]
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	685b      	ldr	r3, [r3, #4]
 800a150:	441a      	add	r2, r3
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	685b      	ldr	r3, [r3, #4]
 800a162:	68ba      	ldr	r2, [r7, #8]
 800a164:	441a      	add	r2, r3
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	429a      	cmp	r2, r3
 800a16c:	d118      	bne.n	800a1a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	681a      	ldr	r2, [r3, #0]
 800a172:	4b15      	ldr	r3, [pc, #84]	; (800a1c8 <prvInsertBlockIntoFreeList+0xb0>)
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	429a      	cmp	r2, r3
 800a178:	d00d      	beq.n	800a196 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	685a      	ldr	r2, [r3, #4]
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	685b      	ldr	r3, [r3, #4]
 800a184:	441a      	add	r2, r3
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	681a      	ldr	r2, [r3, #0]
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	601a      	str	r2, [r3, #0]
 800a194:	e008      	b.n	800a1a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a196:	4b0c      	ldr	r3, [pc, #48]	; (800a1c8 <prvInsertBlockIntoFreeList+0xb0>)
 800a198:	681a      	ldr	r2, [r3, #0]
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	601a      	str	r2, [r3, #0]
 800a19e:	e003      	b.n	800a1a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	681a      	ldr	r2, [r3, #0]
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a1a8:	68fa      	ldr	r2, [r7, #12]
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	429a      	cmp	r2, r3
 800a1ae:	d002      	beq.n	800a1b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	687a      	ldr	r2, [r7, #4]
 800a1b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a1b6:	bf00      	nop
 800a1b8:	3714      	adds	r7, #20
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c0:	4770      	bx	lr
 800a1c2:	bf00      	nop
 800a1c4:	20004c3c 	.word	0x20004c3c
 800a1c8:	20004c44 	.word	0x20004c44

0800a1cc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	4912      	ldr	r1, [pc, #72]	; (800a21c <MX_USB_DEVICE_Init+0x50>)
 800a1d4:	4812      	ldr	r0, [pc, #72]	; (800a220 <MX_USB_DEVICE_Init+0x54>)
 800a1d6:	f7fb ff45 	bl	8006064 <USBD_Init>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d001      	beq.n	800a1e4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a1e0:	f7f6 fb84 	bl	80008ec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a1e4:	490f      	ldr	r1, [pc, #60]	; (800a224 <MX_USB_DEVICE_Init+0x58>)
 800a1e6:	480e      	ldr	r0, [pc, #56]	; (800a220 <MX_USB_DEVICE_Init+0x54>)
 800a1e8:	f7fb ff6c 	bl	80060c4 <USBD_RegisterClass>
 800a1ec:	4603      	mov	r3, r0
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d001      	beq.n	800a1f6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a1f2:	f7f6 fb7b 	bl	80008ec <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a1f6:	490c      	ldr	r1, [pc, #48]	; (800a228 <MX_USB_DEVICE_Init+0x5c>)
 800a1f8:	4809      	ldr	r0, [pc, #36]	; (800a220 <MX_USB_DEVICE_Init+0x54>)
 800a1fa:	f7fb fe5d 	bl	8005eb8 <USBD_CDC_RegisterInterface>
 800a1fe:	4603      	mov	r3, r0
 800a200:	2b00      	cmp	r3, #0
 800a202:	d001      	beq.n	800a208 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a204:	f7f6 fb72 	bl	80008ec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a208:	4805      	ldr	r0, [pc, #20]	; (800a220 <MX_USB_DEVICE_Init+0x54>)
 800a20a:	f7fb ff91 	bl	8006130 <USBD_Start>
 800a20e:	4603      	mov	r3, r0
 800a210:	2b00      	cmp	r3, #0
 800a212:	d001      	beq.n	800a218 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a214:	f7f6 fb6a 	bl	80008ec <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a218:	bf00      	nop
 800a21a:	bd80      	pop	{r7, pc}
 800a21c:	200000b0 	.word	0x200000b0
 800a220:	20004c5c 	.word	0x20004c5c
 800a224:	20000018 	.word	0x20000018
 800a228:	2000009c 	.word	0x2000009c

0800a22c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a230:	2200      	movs	r2, #0
 800a232:	4905      	ldr	r1, [pc, #20]	; (800a248 <CDC_Init_FS+0x1c>)
 800a234:	4805      	ldr	r0, [pc, #20]	; (800a24c <CDC_Init_FS+0x20>)
 800a236:	f7fb fe59 	bl	8005eec <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a23a:	4905      	ldr	r1, [pc, #20]	; (800a250 <CDC_Init_FS+0x24>)
 800a23c:	4803      	ldr	r0, [pc, #12]	; (800a24c <CDC_Init_FS+0x20>)
 800a23e:	f7fb fe77 	bl	8005f30 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a242:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a244:	4618      	mov	r0, r3
 800a246:	bd80      	pop	{r7, pc}
 800a248:	20005738 	.word	0x20005738
 800a24c:	20004c5c 	.word	0x20004c5c
 800a250:	20004f38 	.word	0x20004f38

0800a254 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a254:	b480      	push	{r7}
 800a256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a258:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a25a:	4618      	mov	r0, r3
 800a25c:	46bd      	mov	sp, r7
 800a25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a262:	4770      	bx	lr

0800a264 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a264:	b480      	push	{r7}
 800a266:	b083      	sub	sp, #12
 800a268:	af00      	add	r7, sp, #0
 800a26a:	4603      	mov	r3, r0
 800a26c:	6039      	str	r1, [r7, #0]
 800a26e:	71fb      	strb	r3, [r7, #7]
 800a270:	4613      	mov	r3, r2
 800a272:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a274:	79fb      	ldrb	r3, [r7, #7]
 800a276:	2b23      	cmp	r3, #35	; 0x23
 800a278:	d84a      	bhi.n	800a310 <CDC_Control_FS+0xac>
 800a27a:	a201      	add	r2, pc, #4	; (adr r2, 800a280 <CDC_Control_FS+0x1c>)
 800a27c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a280:	0800a311 	.word	0x0800a311
 800a284:	0800a311 	.word	0x0800a311
 800a288:	0800a311 	.word	0x0800a311
 800a28c:	0800a311 	.word	0x0800a311
 800a290:	0800a311 	.word	0x0800a311
 800a294:	0800a311 	.word	0x0800a311
 800a298:	0800a311 	.word	0x0800a311
 800a29c:	0800a311 	.word	0x0800a311
 800a2a0:	0800a311 	.word	0x0800a311
 800a2a4:	0800a311 	.word	0x0800a311
 800a2a8:	0800a311 	.word	0x0800a311
 800a2ac:	0800a311 	.word	0x0800a311
 800a2b0:	0800a311 	.word	0x0800a311
 800a2b4:	0800a311 	.word	0x0800a311
 800a2b8:	0800a311 	.word	0x0800a311
 800a2bc:	0800a311 	.word	0x0800a311
 800a2c0:	0800a311 	.word	0x0800a311
 800a2c4:	0800a311 	.word	0x0800a311
 800a2c8:	0800a311 	.word	0x0800a311
 800a2cc:	0800a311 	.word	0x0800a311
 800a2d0:	0800a311 	.word	0x0800a311
 800a2d4:	0800a311 	.word	0x0800a311
 800a2d8:	0800a311 	.word	0x0800a311
 800a2dc:	0800a311 	.word	0x0800a311
 800a2e0:	0800a311 	.word	0x0800a311
 800a2e4:	0800a311 	.word	0x0800a311
 800a2e8:	0800a311 	.word	0x0800a311
 800a2ec:	0800a311 	.word	0x0800a311
 800a2f0:	0800a311 	.word	0x0800a311
 800a2f4:	0800a311 	.word	0x0800a311
 800a2f8:	0800a311 	.word	0x0800a311
 800a2fc:	0800a311 	.word	0x0800a311
 800a300:	0800a311 	.word	0x0800a311
 800a304:	0800a311 	.word	0x0800a311
 800a308:	0800a311 	.word	0x0800a311
 800a30c:	0800a311 	.word	0x0800a311
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a310:	bf00      	nop
  }

  return (USBD_OK);
 800a312:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a314:	4618      	mov	r0, r3
 800a316:	370c      	adds	r7, #12
 800a318:	46bd      	mov	sp, r7
 800a31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31e:	4770      	bx	lr

0800a320 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b082      	sub	sp, #8
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
 800a328:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a32a:	6879      	ldr	r1, [r7, #4]
 800a32c:	4805      	ldr	r0, [pc, #20]	; (800a344 <CDC_Receive_FS+0x24>)
 800a32e:	f7fb fdff 	bl	8005f30 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a332:	4804      	ldr	r0, [pc, #16]	; (800a344 <CDC_Receive_FS+0x24>)
 800a334:	f7fb fe60 	bl	8005ff8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a338:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	3708      	adds	r7, #8
 800a33e:	46bd      	mov	sp, r7
 800a340:	bd80      	pop	{r7, pc}
 800a342:	bf00      	nop
 800a344:	20004c5c 	.word	0x20004c5c

0800a348 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b084      	sub	sp, #16
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
 800a350:	460b      	mov	r3, r1
 800a352:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a354:	2300      	movs	r3, #0
 800a356:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a358:	4b0d      	ldr	r3, [pc, #52]	; (800a390 <CDC_Transmit_FS+0x48>)
 800a35a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a35e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a360:	68bb      	ldr	r3, [r7, #8]
 800a362:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a366:	2b00      	cmp	r3, #0
 800a368:	d001      	beq.n	800a36e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a36a:	2301      	movs	r3, #1
 800a36c:	e00b      	b.n	800a386 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a36e:	887b      	ldrh	r3, [r7, #2]
 800a370:	461a      	mov	r2, r3
 800a372:	6879      	ldr	r1, [r7, #4]
 800a374:	4806      	ldr	r0, [pc, #24]	; (800a390 <CDC_Transmit_FS+0x48>)
 800a376:	f7fb fdb9 	bl	8005eec <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a37a:	4805      	ldr	r0, [pc, #20]	; (800a390 <CDC_Transmit_FS+0x48>)
 800a37c:	f7fb fdf6 	bl	8005f6c <USBD_CDC_TransmitPacket>
 800a380:	4603      	mov	r3, r0
 800a382:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a384:	7bfb      	ldrb	r3, [r7, #15]
}
 800a386:	4618      	mov	r0, r3
 800a388:	3710      	adds	r7, #16
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bd80      	pop	{r7, pc}
 800a38e:	bf00      	nop
 800a390:	20004c5c 	.word	0x20004c5c

0800a394 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a394:	b480      	push	{r7}
 800a396:	b087      	sub	sp, #28
 800a398:	af00      	add	r7, sp, #0
 800a39a:	60f8      	str	r0, [r7, #12]
 800a39c:	60b9      	str	r1, [r7, #8]
 800a39e:	4613      	mov	r3, r2
 800a3a0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a3a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	371c      	adds	r7, #28
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b4:	4770      	bx	lr
	...

0800a3b8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3b8:	b480      	push	{r7}
 800a3ba:	b083      	sub	sp, #12
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	4603      	mov	r3, r0
 800a3c0:	6039      	str	r1, [r7, #0]
 800a3c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	2212      	movs	r2, #18
 800a3c8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a3ca:	4b03      	ldr	r3, [pc, #12]	; (800a3d8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	370c      	adds	r7, #12
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d6:	4770      	bx	lr
 800a3d8:	200000cc 	.word	0x200000cc

0800a3dc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3dc:	b480      	push	{r7}
 800a3de:	b083      	sub	sp, #12
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	6039      	str	r1, [r7, #0]
 800a3e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	2204      	movs	r2, #4
 800a3ec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a3ee:	4b03      	ldr	r3, [pc, #12]	; (800a3fc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	370c      	adds	r7, #12
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fa:	4770      	bx	lr
 800a3fc:	200000e0 	.word	0x200000e0

0800a400 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b082      	sub	sp, #8
 800a404:	af00      	add	r7, sp, #0
 800a406:	4603      	mov	r3, r0
 800a408:	6039      	str	r1, [r7, #0]
 800a40a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a40c:	79fb      	ldrb	r3, [r7, #7]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d105      	bne.n	800a41e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a412:	683a      	ldr	r2, [r7, #0]
 800a414:	4907      	ldr	r1, [pc, #28]	; (800a434 <USBD_FS_ProductStrDescriptor+0x34>)
 800a416:	4808      	ldr	r0, [pc, #32]	; (800a438 <USBD_FS_ProductStrDescriptor+0x38>)
 800a418:	f7fd f836 	bl	8007488 <USBD_GetString>
 800a41c:	e004      	b.n	800a428 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a41e:	683a      	ldr	r2, [r7, #0]
 800a420:	4904      	ldr	r1, [pc, #16]	; (800a434 <USBD_FS_ProductStrDescriptor+0x34>)
 800a422:	4805      	ldr	r0, [pc, #20]	; (800a438 <USBD_FS_ProductStrDescriptor+0x38>)
 800a424:	f7fd f830 	bl	8007488 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a428:	4b02      	ldr	r3, [pc, #8]	; (800a434 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a42a:	4618      	mov	r0, r3
 800a42c:	3708      	adds	r7, #8
 800a42e:	46bd      	mov	sp, r7
 800a430:	bd80      	pop	{r7, pc}
 800a432:	bf00      	nop
 800a434:	20005f38 	.word	0x20005f38
 800a438:	0800b1f0 	.word	0x0800b1f0

0800a43c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b082      	sub	sp, #8
 800a440:	af00      	add	r7, sp, #0
 800a442:	4603      	mov	r3, r0
 800a444:	6039      	str	r1, [r7, #0]
 800a446:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a448:	683a      	ldr	r2, [r7, #0]
 800a44a:	4904      	ldr	r1, [pc, #16]	; (800a45c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a44c:	4804      	ldr	r0, [pc, #16]	; (800a460 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a44e:	f7fd f81b 	bl	8007488 <USBD_GetString>
  return USBD_StrDesc;
 800a452:	4b02      	ldr	r3, [pc, #8]	; (800a45c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a454:	4618      	mov	r0, r3
 800a456:	3708      	adds	r7, #8
 800a458:	46bd      	mov	sp, r7
 800a45a:	bd80      	pop	{r7, pc}
 800a45c:	20005f38 	.word	0x20005f38
 800a460:	0800b1fc 	.word	0x0800b1fc

0800a464 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b082      	sub	sp, #8
 800a468:	af00      	add	r7, sp, #0
 800a46a:	4603      	mov	r3, r0
 800a46c:	6039      	str	r1, [r7, #0]
 800a46e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	221a      	movs	r2, #26
 800a474:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a476:	f000 f843 	bl	800a500 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a47a:	4b02      	ldr	r3, [pc, #8]	; (800a484 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a47c:	4618      	mov	r0, r3
 800a47e:	3708      	adds	r7, #8
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}
 800a484:	200000e4 	.word	0x200000e4

0800a488 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b082      	sub	sp, #8
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	4603      	mov	r3, r0
 800a490:	6039      	str	r1, [r7, #0]
 800a492:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a494:	79fb      	ldrb	r3, [r7, #7]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d105      	bne.n	800a4a6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a49a:	683a      	ldr	r2, [r7, #0]
 800a49c:	4907      	ldr	r1, [pc, #28]	; (800a4bc <USBD_FS_ConfigStrDescriptor+0x34>)
 800a49e:	4808      	ldr	r0, [pc, #32]	; (800a4c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a4a0:	f7fc fff2 	bl	8007488 <USBD_GetString>
 800a4a4:	e004      	b.n	800a4b0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a4a6:	683a      	ldr	r2, [r7, #0]
 800a4a8:	4904      	ldr	r1, [pc, #16]	; (800a4bc <USBD_FS_ConfigStrDescriptor+0x34>)
 800a4aa:	4805      	ldr	r0, [pc, #20]	; (800a4c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a4ac:	f7fc ffec 	bl	8007488 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a4b0:	4b02      	ldr	r3, [pc, #8]	; (800a4bc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	3708      	adds	r7, #8
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	bd80      	pop	{r7, pc}
 800a4ba:	bf00      	nop
 800a4bc:	20005f38 	.word	0x20005f38
 800a4c0:	0800b210 	.word	0x0800b210

0800a4c4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b082      	sub	sp, #8
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	6039      	str	r1, [r7, #0]
 800a4ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a4d0:	79fb      	ldrb	r3, [r7, #7]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d105      	bne.n	800a4e2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a4d6:	683a      	ldr	r2, [r7, #0]
 800a4d8:	4907      	ldr	r1, [pc, #28]	; (800a4f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a4da:	4808      	ldr	r0, [pc, #32]	; (800a4fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a4dc:	f7fc ffd4 	bl	8007488 <USBD_GetString>
 800a4e0:	e004      	b.n	800a4ec <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a4e2:	683a      	ldr	r2, [r7, #0]
 800a4e4:	4904      	ldr	r1, [pc, #16]	; (800a4f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a4e6:	4805      	ldr	r0, [pc, #20]	; (800a4fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a4e8:	f7fc ffce 	bl	8007488 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a4ec:	4b02      	ldr	r3, [pc, #8]	; (800a4f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	3708      	adds	r7, #8
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bd80      	pop	{r7, pc}
 800a4f6:	bf00      	nop
 800a4f8:	20005f38 	.word	0x20005f38
 800a4fc:	0800b21c 	.word	0x0800b21c

0800a500 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b084      	sub	sp, #16
 800a504:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a506:	4b0f      	ldr	r3, [pc, #60]	; (800a544 <Get_SerialNum+0x44>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a50c:	4b0e      	ldr	r3, [pc, #56]	; (800a548 <Get_SerialNum+0x48>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a512:	4b0e      	ldr	r3, [pc, #56]	; (800a54c <Get_SerialNum+0x4c>)
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a518:	68fa      	ldr	r2, [r7, #12]
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	4413      	add	r3, r2
 800a51e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d009      	beq.n	800a53a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a526:	2208      	movs	r2, #8
 800a528:	4909      	ldr	r1, [pc, #36]	; (800a550 <Get_SerialNum+0x50>)
 800a52a:	68f8      	ldr	r0, [r7, #12]
 800a52c:	f000 f814 	bl	800a558 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a530:	2204      	movs	r2, #4
 800a532:	4908      	ldr	r1, [pc, #32]	; (800a554 <Get_SerialNum+0x54>)
 800a534:	68b8      	ldr	r0, [r7, #8]
 800a536:	f000 f80f 	bl	800a558 <IntToUnicode>
  }
}
 800a53a:	bf00      	nop
 800a53c:	3710      	adds	r7, #16
 800a53e:	46bd      	mov	sp, r7
 800a540:	bd80      	pop	{r7, pc}
 800a542:	bf00      	nop
 800a544:	1fff7a10 	.word	0x1fff7a10
 800a548:	1fff7a14 	.word	0x1fff7a14
 800a54c:	1fff7a18 	.word	0x1fff7a18
 800a550:	200000e6 	.word	0x200000e6
 800a554:	200000f6 	.word	0x200000f6

0800a558 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a558:	b480      	push	{r7}
 800a55a:	b087      	sub	sp, #28
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	60f8      	str	r0, [r7, #12]
 800a560:	60b9      	str	r1, [r7, #8]
 800a562:	4613      	mov	r3, r2
 800a564:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a566:	2300      	movs	r3, #0
 800a568:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a56a:	2300      	movs	r3, #0
 800a56c:	75fb      	strb	r3, [r7, #23]
 800a56e:	e027      	b.n	800a5c0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	0f1b      	lsrs	r3, r3, #28
 800a574:	2b09      	cmp	r3, #9
 800a576:	d80b      	bhi.n	800a590 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	0f1b      	lsrs	r3, r3, #28
 800a57c:	b2da      	uxtb	r2, r3
 800a57e:	7dfb      	ldrb	r3, [r7, #23]
 800a580:	005b      	lsls	r3, r3, #1
 800a582:	4619      	mov	r1, r3
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	440b      	add	r3, r1
 800a588:	3230      	adds	r2, #48	; 0x30
 800a58a:	b2d2      	uxtb	r2, r2
 800a58c:	701a      	strb	r2, [r3, #0]
 800a58e:	e00a      	b.n	800a5a6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	0f1b      	lsrs	r3, r3, #28
 800a594:	b2da      	uxtb	r2, r3
 800a596:	7dfb      	ldrb	r3, [r7, #23]
 800a598:	005b      	lsls	r3, r3, #1
 800a59a:	4619      	mov	r1, r3
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	440b      	add	r3, r1
 800a5a0:	3237      	adds	r2, #55	; 0x37
 800a5a2:	b2d2      	uxtb	r2, r2
 800a5a4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	011b      	lsls	r3, r3, #4
 800a5aa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a5ac:	7dfb      	ldrb	r3, [r7, #23]
 800a5ae:	005b      	lsls	r3, r3, #1
 800a5b0:	3301      	adds	r3, #1
 800a5b2:	68ba      	ldr	r2, [r7, #8]
 800a5b4:	4413      	add	r3, r2
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a5ba:	7dfb      	ldrb	r3, [r7, #23]
 800a5bc:	3301      	adds	r3, #1
 800a5be:	75fb      	strb	r3, [r7, #23]
 800a5c0:	7dfa      	ldrb	r2, [r7, #23]
 800a5c2:	79fb      	ldrb	r3, [r7, #7]
 800a5c4:	429a      	cmp	r2, r3
 800a5c6:	d3d3      	bcc.n	800a570 <IntToUnicode+0x18>
  }
}
 800a5c8:	bf00      	nop
 800a5ca:	bf00      	nop
 800a5cc:	371c      	adds	r7, #28
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d4:	4770      	bx	lr
	...

0800a5d8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b08a      	sub	sp, #40	; 0x28
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a5e0:	f107 0314 	add.w	r3, r7, #20
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	601a      	str	r2, [r3, #0]
 800a5e8:	605a      	str	r2, [r3, #4]
 800a5ea:	609a      	str	r2, [r3, #8]
 800a5ec:	60da      	str	r2, [r3, #12]
 800a5ee:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a5f8:	d13a      	bne.n	800a670 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	613b      	str	r3, [r7, #16]
 800a5fe:	4b1e      	ldr	r3, [pc, #120]	; (800a678 <HAL_PCD_MspInit+0xa0>)
 800a600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a602:	4a1d      	ldr	r2, [pc, #116]	; (800a678 <HAL_PCD_MspInit+0xa0>)
 800a604:	f043 0301 	orr.w	r3, r3, #1
 800a608:	6313      	str	r3, [r2, #48]	; 0x30
 800a60a:	4b1b      	ldr	r3, [pc, #108]	; (800a678 <HAL_PCD_MspInit+0xa0>)
 800a60c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a60e:	f003 0301 	and.w	r3, r3, #1
 800a612:	613b      	str	r3, [r7, #16]
 800a614:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a616:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a61a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a61c:	2302      	movs	r3, #2
 800a61e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a620:	2300      	movs	r3, #0
 800a622:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a624:	2303      	movs	r3, #3
 800a626:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a628:	230a      	movs	r3, #10
 800a62a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a62c:	f107 0314 	add.w	r3, r7, #20
 800a630:	4619      	mov	r1, r3
 800a632:	4812      	ldr	r0, [pc, #72]	; (800a67c <HAL_PCD_MspInit+0xa4>)
 800a634:	f7f6 fdb2 	bl	800119c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a638:	4b0f      	ldr	r3, [pc, #60]	; (800a678 <HAL_PCD_MspInit+0xa0>)
 800a63a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a63c:	4a0e      	ldr	r2, [pc, #56]	; (800a678 <HAL_PCD_MspInit+0xa0>)
 800a63e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a642:	6353      	str	r3, [r2, #52]	; 0x34
 800a644:	2300      	movs	r3, #0
 800a646:	60fb      	str	r3, [r7, #12]
 800a648:	4b0b      	ldr	r3, [pc, #44]	; (800a678 <HAL_PCD_MspInit+0xa0>)
 800a64a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a64c:	4a0a      	ldr	r2, [pc, #40]	; (800a678 <HAL_PCD_MspInit+0xa0>)
 800a64e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a652:	6453      	str	r3, [r2, #68]	; 0x44
 800a654:	4b08      	ldr	r3, [pc, #32]	; (800a678 <HAL_PCD_MspInit+0xa0>)
 800a656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a658:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a65c:	60fb      	str	r3, [r7, #12]
 800a65e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800a660:	2200      	movs	r2, #0
 800a662:	2105      	movs	r1, #5
 800a664:	2043      	movs	r0, #67	; 0x43
 800a666:	f7f6 fd6f 	bl	8001148 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a66a:	2043      	movs	r0, #67	; 0x43
 800a66c:	f7f6 fd88 	bl	8001180 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a670:	bf00      	nop
 800a672:	3728      	adds	r7, #40	; 0x28
 800a674:	46bd      	mov	sp, r7
 800a676:	bd80      	pop	{r7, pc}
 800a678:	40023800 	.word	0x40023800
 800a67c:	40020000 	.word	0x40020000

0800a680 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b082      	sub	sp, #8
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a694:	4619      	mov	r1, r3
 800a696:	4610      	mov	r0, r2
 800a698:	f7fb fd97 	bl	80061ca <USBD_LL_SetupStage>
}
 800a69c:	bf00      	nop
 800a69e:	3708      	adds	r7, #8
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bd80      	pop	{r7, pc}

0800a6a4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b082      	sub	sp, #8
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
 800a6ac:	460b      	mov	r3, r1
 800a6ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a6b6:	78fa      	ldrb	r2, [r7, #3]
 800a6b8:	6879      	ldr	r1, [r7, #4]
 800a6ba:	4613      	mov	r3, r2
 800a6bc:	00db      	lsls	r3, r3, #3
 800a6be:	4413      	add	r3, r2
 800a6c0:	009b      	lsls	r3, r3, #2
 800a6c2:	440b      	add	r3, r1
 800a6c4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a6c8:	681a      	ldr	r2, [r3, #0]
 800a6ca:	78fb      	ldrb	r3, [r7, #3]
 800a6cc:	4619      	mov	r1, r3
 800a6ce:	f7fb fdd1 	bl	8006274 <USBD_LL_DataOutStage>
}
 800a6d2:	bf00      	nop
 800a6d4:	3708      	adds	r7, #8
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	bd80      	pop	{r7, pc}

0800a6da <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6da:	b580      	push	{r7, lr}
 800a6dc:	b082      	sub	sp, #8
 800a6de:	af00      	add	r7, sp, #0
 800a6e0:	6078      	str	r0, [r7, #4]
 800a6e2:	460b      	mov	r3, r1
 800a6e4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a6ec:	78fa      	ldrb	r2, [r7, #3]
 800a6ee:	6879      	ldr	r1, [r7, #4]
 800a6f0:	4613      	mov	r3, r2
 800a6f2:	00db      	lsls	r3, r3, #3
 800a6f4:	4413      	add	r3, r2
 800a6f6:	009b      	lsls	r3, r3, #2
 800a6f8:	440b      	add	r3, r1
 800a6fa:	334c      	adds	r3, #76	; 0x4c
 800a6fc:	681a      	ldr	r2, [r3, #0]
 800a6fe:	78fb      	ldrb	r3, [r7, #3]
 800a700:	4619      	mov	r1, r3
 800a702:	f7fb fe6a 	bl	80063da <USBD_LL_DataInStage>
}
 800a706:	bf00      	nop
 800a708:	3708      	adds	r7, #8
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}

0800a70e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a70e:	b580      	push	{r7, lr}
 800a710:	b082      	sub	sp, #8
 800a712:	af00      	add	r7, sp, #0
 800a714:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a71c:	4618      	mov	r0, r3
 800a71e:	f7fb ff9e 	bl	800665e <USBD_LL_SOF>
}
 800a722:	bf00      	nop
 800a724:	3708      	adds	r7, #8
 800a726:	46bd      	mov	sp, r7
 800a728:	bd80      	pop	{r7, pc}

0800a72a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a72a:	b580      	push	{r7, lr}
 800a72c:	b084      	sub	sp, #16
 800a72e:	af00      	add	r7, sp, #0
 800a730:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a732:	2301      	movs	r3, #1
 800a734:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	68db      	ldr	r3, [r3, #12]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d102      	bne.n	800a744 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a73e:	2300      	movs	r3, #0
 800a740:	73fb      	strb	r3, [r7, #15]
 800a742:	e008      	b.n	800a756 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	68db      	ldr	r3, [r3, #12]
 800a748:	2b02      	cmp	r3, #2
 800a74a:	d102      	bne.n	800a752 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a74c:	2301      	movs	r3, #1
 800a74e:	73fb      	strb	r3, [r7, #15]
 800a750:	e001      	b.n	800a756 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a752:	f7f6 f8cb 	bl	80008ec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a75c:	7bfa      	ldrb	r2, [r7, #15]
 800a75e:	4611      	mov	r1, r2
 800a760:	4618      	mov	r0, r3
 800a762:	f7fb ff3e 	bl	80065e2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a76c:	4618      	mov	r0, r3
 800a76e:	f7fb fee6 	bl	800653e <USBD_LL_Reset>
}
 800a772:	bf00      	nop
 800a774:	3710      	adds	r7, #16
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}
	...

0800a77c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b082      	sub	sp, #8
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a78a:	4618      	mov	r0, r3
 800a78c:	f7fb ff39 	bl	8006602 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	687a      	ldr	r2, [r7, #4]
 800a79c:	6812      	ldr	r2, [r2, #0]
 800a79e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a7a2:	f043 0301 	orr.w	r3, r3, #1
 800a7a6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	6a1b      	ldr	r3, [r3, #32]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d005      	beq.n	800a7bc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a7b0:	4b04      	ldr	r3, [pc, #16]	; (800a7c4 <HAL_PCD_SuspendCallback+0x48>)
 800a7b2:	691b      	ldr	r3, [r3, #16]
 800a7b4:	4a03      	ldr	r2, [pc, #12]	; (800a7c4 <HAL_PCD_SuspendCallback+0x48>)
 800a7b6:	f043 0306 	orr.w	r3, r3, #6
 800a7ba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a7bc:	bf00      	nop
 800a7be:	3708      	adds	r7, #8
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	bd80      	pop	{r7, pc}
 800a7c4:	e000ed00 	.word	0xe000ed00

0800a7c8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b082      	sub	sp, #8
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	f7fb ff29 	bl	800662e <USBD_LL_Resume>
}
 800a7dc:	bf00      	nop
 800a7de:	3708      	adds	r7, #8
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	bd80      	pop	{r7, pc}

0800a7e4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b082      	sub	sp, #8
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
 800a7ec:	460b      	mov	r3, r1
 800a7ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a7f6:	78fa      	ldrb	r2, [r7, #3]
 800a7f8:	4611      	mov	r1, r2
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	f7fb ff81 	bl	8006702 <USBD_LL_IsoOUTIncomplete>
}
 800a800:	bf00      	nop
 800a802:	3708      	adds	r7, #8
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}

0800a808 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b082      	sub	sp, #8
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
 800a810:	460b      	mov	r3, r1
 800a812:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a81a:	78fa      	ldrb	r2, [r7, #3]
 800a81c:	4611      	mov	r1, r2
 800a81e:	4618      	mov	r0, r3
 800a820:	f7fb ff3d 	bl	800669e <USBD_LL_IsoINIncomplete>
}
 800a824:	bf00      	nop
 800a826:	3708      	adds	r7, #8
 800a828:	46bd      	mov	sp, r7
 800a82a:	bd80      	pop	{r7, pc}

0800a82c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b082      	sub	sp, #8
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a83a:	4618      	mov	r0, r3
 800a83c:	f7fb ff93 	bl	8006766 <USBD_LL_DevConnected>
}
 800a840:	bf00      	nop
 800a842:	3708      	adds	r7, #8
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}

0800a848 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b082      	sub	sp, #8
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a856:	4618      	mov	r0, r3
 800a858:	f7fb ff90 	bl	800677c <USBD_LL_DevDisconnected>
}
 800a85c:	bf00      	nop
 800a85e:	3708      	adds	r7, #8
 800a860:	46bd      	mov	sp, r7
 800a862:	bd80      	pop	{r7, pc}

0800a864 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b082      	sub	sp, #8
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	781b      	ldrb	r3, [r3, #0]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d13c      	bne.n	800a8ee <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a874:	4a20      	ldr	r2, [pc, #128]	; (800a8f8 <USBD_LL_Init+0x94>)
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	4a1e      	ldr	r2, [pc, #120]	; (800a8f8 <USBD_LL_Init+0x94>)
 800a880:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a884:	4b1c      	ldr	r3, [pc, #112]	; (800a8f8 <USBD_LL_Init+0x94>)
 800a886:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a88a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a88c:	4b1a      	ldr	r3, [pc, #104]	; (800a8f8 <USBD_LL_Init+0x94>)
 800a88e:	2204      	movs	r2, #4
 800a890:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a892:	4b19      	ldr	r3, [pc, #100]	; (800a8f8 <USBD_LL_Init+0x94>)
 800a894:	2202      	movs	r2, #2
 800a896:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a898:	4b17      	ldr	r3, [pc, #92]	; (800a8f8 <USBD_LL_Init+0x94>)
 800a89a:	2200      	movs	r2, #0
 800a89c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a89e:	4b16      	ldr	r3, [pc, #88]	; (800a8f8 <USBD_LL_Init+0x94>)
 800a8a0:	2202      	movs	r2, #2
 800a8a2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a8a4:	4b14      	ldr	r3, [pc, #80]	; (800a8f8 <USBD_LL_Init+0x94>)
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a8aa:	4b13      	ldr	r3, [pc, #76]	; (800a8f8 <USBD_LL_Init+0x94>)
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a8b0:	4b11      	ldr	r3, [pc, #68]	; (800a8f8 <USBD_LL_Init+0x94>)
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a8b6:	4b10      	ldr	r3, [pc, #64]	; (800a8f8 <USBD_LL_Init+0x94>)
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a8bc:	4b0e      	ldr	r3, [pc, #56]	; (800a8f8 <USBD_LL_Init+0x94>)
 800a8be:	2200      	movs	r2, #0
 800a8c0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a8c2:	480d      	ldr	r0, [pc, #52]	; (800a8f8 <USBD_LL_Init+0x94>)
 800a8c4:	f7f6 fe39 	bl	800153a <HAL_PCD_Init>
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d001      	beq.n	800a8d2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a8ce:	f7f6 f80d 	bl	80008ec <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a8d2:	2180      	movs	r1, #128	; 0x80
 800a8d4:	4808      	ldr	r0, [pc, #32]	; (800a8f8 <USBD_LL_Init+0x94>)
 800a8d6:	f7f8 f890 	bl	80029fa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a8da:	2240      	movs	r2, #64	; 0x40
 800a8dc:	2100      	movs	r1, #0
 800a8de:	4806      	ldr	r0, [pc, #24]	; (800a8f8 <USBD_LL_Init+0x94>)
 800a8e0:	f7f8 f844 	bl	800296c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a8e4:	2280      	movs	r2, #128	; 0x80
 800a8e6:	2101      	movs	r1, #1
 800a8e8:	4803      	ldr	r0, [pc, #12]	; (800a8f8 <USBD_LL_Init+0x94>)
 800a8ea:	f7f8 f83f 	bl	800296c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a8ee:	2300      	movs	r3, #0
}
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	3708      	adds	r7, #8
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bd80      	pop	{r7, pc}
 800a8f8:	20006138 	.word	0x20006138

0800a8fc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b084      	sub	sp, #16
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a904:	2300      	movs	r3, #0
 800a906:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a908:	2300      	movs	r3, #0
 800a90a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a912:	4618      	mov	r0, r3
 800a914:	f7f6 ff2e 	bl	8001774 <HAL_PCD_Start>
 800a918:	4603      	mov	r3, r0
 800a91a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a91c:	7bfb      	ldrb	r3, [r7, #15]
 800a91e:	4618      	mov	r0, r3
 800a920:	f000 f942 	bl	800aba8 <USBD_Get_USB_Status>
 800a924:	4603      	mov	r3, r0
 800a926:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a928:	7bbb      	ldrb	r3, [r7, #14]
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	3710      	adds	r7, #16
 800a92e:	46bd      	mov	sp, r7
 800a930:	bd80      	pop	{r7, pc}

0800a932 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a932:	b580      	push	{r7, lr}
 800a934:	b084      	sub	sp, #16
 800a936:	af00      	add	r7, sp, #0
 800a938:	6078      	str	r0, [r7, #4]
 800a93a:	4608      	mov	r0, r1
 800a93c:	4611      	mov	r1, r2
 800a93e:	461a      	mov	r2, r3
 800a940:	4603      	mov	r3, r0
 800a942:	70fb      	strb	r3, [r7, #3]
 800a944:	460b      	mov	r3, r1
 800a946:	70bb      	strb	r3, [r7, #2]
 800a948:	4613      	mov	r3, r2
 800a94a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a94c:	2300      	movs	r3, #0
 800a94e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a950:	2300      	movs	r3, #0
 800a952:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a95a:	78bb      	ldrb	r3, [r7, #2]
 800a95c:	883a      	ldrh	r2, [r7, #0]
 800a95e:	78f9      	ldrb	r1, [r7, #3]
 800a960:	f7f7 fbff 	bl	8002162 <HAL_PCD_EP_Open>
 800a964:	4603      	mov	r3, r0
 800a966:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a968:	7bfb      	ldrb	r3, [r7, #15]
 800a96a:	4618      	mov	r0, r3
 800a96c:	f000 f91c 	bl	800aba8 <USBD_Get_USB_Status>
 800a970:	4603      	mov	r3, r0
 800a972:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a974:	7bbb      	ldrb	r3, [r7, #14]
}
 800a976:	4618      	mov	r0, r3
 800a978:	3710      	adds	r7, #16
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}

0800a97e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a97e:	b580      	push	{r7, lr}
 800a980:	b084      	sub	sp, #16
 800a982:	af00      	add	r7, sp, #0
 800a984:	6078      	str	r0, [r7, #4]
 800a986:	460b      	mov	r3, r1
 800a988:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a98a:	2300      	movs	r3, #0
 800a98c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a98e:	2300      	movs	r3, #0
 800a990:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a998:	78fa      	ldrb	r2, [r7, #3]
 800a99a:	4611      	mov	r1, r2
 800a99c:	4618      	mov	r0, r3
 800a99e:	f7f7 fc48 	bl	8002232 <HAL_PCD_EP_Close>
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9a6:	7bfb      	ldrb	r3, [r7, #15]
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	f000 f8fd 	bl	800aba8 <USBD_Get_USB_Status>
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9b2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	3710      	adds	r7, #16
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bd80      	pop	{r7, pc}

0800a9bc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b084      	sub	sp, #16
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
 800a9c4:	460b      	mov	r3, r1
 800a9c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a9d6:	78fa      	ldrb	r2, [r7, #3]
 800a9d8:	4611      	mov	r1, r2
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f7f7 fd20 	bl	8002420 <HAL_PCD_EP_SetStall>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9e4:	7bfb      	ldrb	r3, [r7, #15]
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	f000 f8de 	bl	800aba8 <USBD_Get_USB_Status>
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9f0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	3710      	adds	r7, #16
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	bd80      	pop	{r7, pc}

0800a9fa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a9fa:	b580      	push	{r7, lr}
 800a9fc:	b084      	sub	sp, #16
 800a9fe:	af00      	add	r7, sp, #0
 800aa00:	6078      	str	r0, [r7, #4]
 800aa02:	460b      	mov	r3, r1
 800aa04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa06:	2300      	movs	r3, #0
 800aa08:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800aa14:	78fa      	ldrb	r2, [r7, #3]
 800aa16:	4611      	mov	r1, r2
 800aa18:	4618      	mov	r0, r3
 800aa1a:	f7f7 fd65 	bl	80024e8 <HAL_PCD_EP_ClrStall>
 800aa1e:	4603      	mov	r3, r0
 800aa20:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa22:	7bfb      	ldrb	r3, [r7, #15]
 800aa24:	4618      	mov	r0, r3
 800aa26:	f000 f8bf 	bl	800aba8 <USBD_Get_USB_Status>
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa2e:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa30:	4618      	mov	r0, r3
 800aa32:	3710      	adds	r7, #16
 800aa34:	46bd      	mov	sp, r7
 800aa36:	bd80      	pop	{r7, pc}

0800aa38 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa38:	b480      	push	{r7}
 800aa3a:	b085      	sub	sp, #20
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
 800aa40:	460b      	mov	r3, r1
 800aa42:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800aa4a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800aa4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	da0b      	bge.n	800aa6c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800aa54:	78fb      	ldrb	r3, [r7, #3]
 800aa56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aa5a:	68f9      	ldr	r1, [r7, #12]
 800aa5c:	4613      	mov	r3, r2
 800aa5e:	00db      	lsls	r3, r3, #3
 800aa60:	4413      	add	r3, r2
 800aa62:	009b      	lsls	r3, r3, #2
 800aa64:	440b      	add	r3, r1
 800aa66:	333e      	adds	r3, #62	; 0x3e
 800aa68:	781b      	ldrb	r3, [r3, #0]
 800aa6a:	e00b      	b.n	800aa84 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800aa6c:	78fb      	ldrb	r3, [r7, #3]
 800aa6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aa72:	68f9      	ldr	r1, [r7, #12]
 800aa74:	4613      	mov	r3, r2
 800aa76:	00db      	lsls	r3, r3, #3
 800aa78:	4413      	add	r3, r2
 800aa7a:	009b      	lsls	r3, r3, #2
 800aa7c:	440b      	add	r3, r1
 800aa7e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800aa82:	781b      	ldrb	r3, [r3, #0]
  }
}
 800aa84:	4618      	mov	r0, r3
 800aa86:	3714      	adds	r7, #20
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8e:	4770      	bx	lr

0800aa90 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b084      	sub	sp, #16
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
 800aa98:	460b      	mov	r3, r1
 800aa9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800aaaa:	78fa      	ldrb	r2, [r7, #3]
 800aaac:	4611      	mov	r1, r2
 800aaae:	4618      	mov	r0, r3
 800aab0:	f7f7 fb32 	bl	8002118 <HAL_PCD_SetAddress>
 800aab4:	4603      	mov	r3, r0
 800aab6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aab8:	7bfb      	ldrb	r3, [r7, #15]
 800aaba:	4618      	mov	r0, r3
 800aabc:	f000 f874 	bl	800aba8 <USBD_Get_USB_Status>
 800aac0:	4603      	mov	r3, r0
 800aac2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aac4:	7bbb      	ldrb	r3, [r7, #14]
}
 800aac6:	4618      	mov	r0, r3
 800aac8:	3710      	adds	r7, #16
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bd80      	pop	{r7, pc}

0800aace <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800aace:	b580      	push	{r7, lr}
 800aad0:	b086      	sub	sp, #24
 800aad2:	af00      	add	r7, sp, #0
 800aad4:	60f8      	str	r0, [r7, #12]
 800aad6:	607a      	str	r2, [r7, #4]
 800aad8:	603b      	str	r3, [r7, #0]
 800aada:	460b      	mov	r3, r1
 800aadc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aade:	2300      	movs	r3, #0
 800aae0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aae2:	2300      	movs	r3, #0
 800aae4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800aaec:	7af9      	ldrb	r1, [r7, #11]
 800aaee:	683b      	ldr	r3, [r7, #0]
 800aaf0:	687a      	ldr	r2, [r7, #4]
 800aaf2:	f7f7 fc4b 	bl	800238c <HAL_PCD_EP_Transmit>
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aafa:	7dfb      	ldrb	r3, [r7, #23]
 800aafc:	4618      	mov	r0, r3
 800aafe:	f000 f853 	bl	800aba8 <USBD_Get_USB_Status>
 800ab02:	4603      	mov	r3, r0
 800ab04:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ab06:	7dbb      	ldrb	r3, [r7, #22]
}
 800ab08:	4618      	mov	r0, r3
 800ab0a:	3718      	adds	r7, #24
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	bd80      	pop	{r7, pc}

0800ab10 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b086      	sub	sp, #24
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	60f8      	str	r0, [r7, #12]
 800ab18:	607a      	str	r2, [r7, #4]
 800ab1a:	603b      	str	r3, [r7, #0]
 800ab1c:	460b      	mov	r3, r1
 800ab1e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab20:	2300      	movs	r3, #0
 800ab22:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab24:	2300      	movs	r3, #0
 800ab26:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ab2e:	7af9      	ldrb	r1, [r7, #11]
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	687a      	ldr	r2, [r7, #4]
 800ab34:	f7f7 fbc7 	bl	80022c6 <HAL_PCD_EP_Receive>
 800ab38:	4603      	mov	r3, r0
 800ab3a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab3c:	7dfb      	ldrb	r3, [r7, #23]
 800ab3e:	4618      	mov	r0, r3
 800ab40:	f000 f832 	bl	800aba8 <USBD_Get_USB_Status>
 800ab44:	4603      	mov	r3, r0
 800ab46:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ab48:	7dbb      	ldrb	r3, [r7, #22]
}
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	3718      	adds	r7, #24
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}

0800ab52 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab52:	b580      	push	{r7, lr}
 800ab54:	b082      	sub	sp, #8
 800ab56:	af00      	add	r7, sp, #0
 800ab58:	6078      	str	r0, [r7, #4]
 800ab5a:	460b      	mov	r3, r1
 800ab5c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ab64:	78fa      	ldrb	r2, [r7, #3]
 800ab66:	4611      	mov	r1, r2
 800ab68:	4618      	mov	r0, r3
 800ab6a:	f7f7 fbf7 	bl	800235c <HAL_PCD_EP_GetRxCount>
 800ab6e:	4603      	mov	r3, r0
}
 800ab70:	4618      	mov	r0, r3
 800ab72:	3708      	adds	r7, #8
 800ab74:	46bd      	mov	sp, r7
 800ab76:	bd80      	pop	{r7, pc}

0800ab78 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ab78:	b480      	push	{r7}
 800ab7a:	b083      	sub	sp, #12
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ab80:	4b03      	ldr	r3, [pc, #12]	; (800ab90 <USBD_static_malloc+0x18>)
}
 800ab82:	4618      	mov	r0, r3
 800ab84:	370c      	adds	r7, #12
 800ab86:	46bd      	mov	sp, r7
 800ab88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8c:	4770      	bx	lr
 800ab8e:	bf00      	nop
 800ab90:	20006644 	.word	0x20006644

0800ab94 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ab94:	b480      	push	{r7}
 800ab96:	b083      	sub	sp, #12
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]

}
 800ab9c:	bf00      	nop
 800ab9e:	370c      	adds	r7, #12
 800aba0:	46bd      	mov	sp, r7
 800aba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba6:	4770      	bx	lr

0800aba8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800aba8:	b480      	push	{r7}
 800abaa:	b085      	sub	sp, #20
 800abac:	af00      	add	r7, sp, #0
 800abae:	4603      	mov	r3, r0
 800abb0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abb2:	2300      	movs	r3, #0
 800abb4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800abb6:	79fb      	ldrb	r3, [r7, #7]
 800abb8:	2b03      	cmp	r3, #3
 800abba:	d817      	bhi.n	800abec <USBD_Get_USB_Status+0x44>
 800abbc:	a201      	add	r2, pc, #4	; (adr r2, 800abc4 <USBD_Get_USB_Status+0x1c>)
 800abbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abc2:	bf00      	nop
 800abc4:	0800abd5 	.word	0x0800abd5
 800abc8:	0800abdb 	.word	0x0800abdb
 800abcc:	0800abe1 	.word	0x0800abe1
 800abd0:	0800abe7 	.word	0x0800abe7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800abd4:	2300      	movs	r3, #0
 800abd6:	73fb      	strb	r3, [r7, #15]
    break;
 800abd8:	e00b      	b.n	800abf2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800abda:	2303      	movs	r3, #3
 800abdc:	73fb      	strb	r3, [r7, #15]
    break;
 800abde:	e008      	b.n	800abf2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800abe0:	2301      	movs	r3, #1
 800abe2:	73fb      	strb	r3, [r7, #15]
    break;
 800abe4:	e005      	b.n	800abf2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800abe6:	2303      	movs	r3, #3
 800abe8:	73fb      	strb	r3, [r7, #15]
    break;
 800abea:	e002      	b.n	800abf2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800abec:	2303      	movs	r3, #3
 800abee:	73fb      	strb	r3, [r7, #15]
    break;
 800abf0:	bf00      	nop
  }
  return usb_status;
 800abf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	3714      	adds	r7, #20
 800abf8:	46bd      	mov	sp, r7
 800abfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfe:	4770      	bx	lr

0800ac00 <_ZdlPvj>:
 800ac00:	f000 b885 	b.w	800ad0e <_ZdlPv>

0800ac04 <_ZNSaIcEC1Ev>:
 800ac04:	4770      	bx	lr

0800ac06 <_ZNSaIcED1Ev>:
 800ac06:	4770      	bx	lr

0800ac08 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 800ac08:	b10a      	cbz	r2, 800ac0e <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 800ac0a:	f000 b8e9 	b.w	800ade0 <memcpy>
 800ac0e:	4770      	bx	lr

0800ac10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 800ac10:	b508      	push	{r3, lr}
 800ac12:	680b      	ldr	r3, [r1, #0]
 800ac14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac18:	d302      	bcc.n	800ac20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 800ac1a:	480d      	ldr	r0, [pc, #52]	; (800ac50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 800ac1c:	f000 f890 	bl	800ad40 <_ZSt20__throw_length_errorPKc>
 800ac20:	4293      	cmp	r3, r2
 800ac22:	d90b      	bls.n	800ac3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800ac24:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 800ac28:	ea4f 0042 	mov.w	r0, r2, lsl #1
 800ac2c:	d206      	bcs.n	800ac3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800ac2e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800ac32:	bf2a      	itet	cs
 800ac34:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 800ac38:	6008      	strcc	r0, [r1, #0]
 800ac3a:	600b      	strcs	r3, [r1, #0]
 800ac3c:	6808      	ldr	r0, [r1, #0]
 800ac3e:	3001      	adds	r0, #1
 800ac40:	d501      	bpl.n	800ac46 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 800ac42:	f000 f877 	bl	800ad34 <_ZSt17__throw_bad_allocv>
 800ac46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ac4a:	f000 b862 	b.w	800ad12 <_Znwj>
 800ac4e:	bf00      	nop
 800ac50:	0800b2e4 	.word	0x0800b2e4

0800ac54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 800ac54:	f850 3b08 	ldr.w	r3, [r0], #8
 800ac58:	4283      	cmp	r3, r0
 800ac5a:	d002      	beq.n	800ac62 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	f000 b856 	b.w	800ad0e <_ZdlPv>
 800ac62:	4770      	bx	lr

0800ac64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 800ac64:	2a01      	cmp	r2, #1
 800ac66:	b410      	push	{r4}
 800ac68:	d104      	bne.n	800ac74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 800ac6a:	780a      	ldrb	r2, [r1, #0]
 800ac6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac70:	7002      	strb	r2, [r0, #0]
 800ac72:	4770      	bx	lr
 800ac74:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac78:	f7ff bfc6 	b.w	800ac08 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

0800ac7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 800ac7c:	b508      	push	{r3, lr}
 800ac7e:	1a52      	subs	r2, r2, r1
 800ac80:	f7ff fff0 	bl	800ac64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800ac84:	bd08      	pop	{r3, pc}

0800ac86 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 800ac86:	b510      	push	{r4, lr}
 800ac88:	4604      	mov	r4, r0
 800ac8a:	f7ff ffe3 	bl	800ac54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800ac8e:	4620      	mov	r0, r4
 800ac90:	bd10      	pop	{r4, pc}

0800ac92 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
 800ac92:	6840      	ldr	r0, [r0, #4]
 800ac94:	4770      	bx	lr

0800ac96 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 800ac96:	6800      	ldr	r0, [r0, #0]
 800ac98:	4770      	bx	lr
	...

0800ac9c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 800ac9c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ac9e:	4604      	mov	r4, r0
 800aca0:	4616      	mov	r6, r2
 800aca2:	460d      	mov	r5, r1
 800aca4:	b919      	cbnz	r1, 800acae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800aca6:	b112      	cbz	r2, 800acae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800aca8:	480d      	ldr	r0, [pc, #52]	; (800ace0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 800acaa:	f000 f846 	bl	800ad3a <_ZSt19__throw_logic_errorPKc>
 800acae:	1b73      	subs	r3, r6, r5
 800acb0:	2b0f      	cmp	r3, #15
 800acb2:	9301      	str	r3, [sp, #4]
 800acb4:	d907      	bls.n	800acc6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 800acb6:	2200      	movs	r2, #0
 800acb8:	a901      	add	r1, sp, #4
 800acba:	4620      	mov	r0, r4
 800acbc:	f7ff ffa8 	bl	800ac10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800acc0:	9b01      	ldr	r3, [sp, #4]
 800acc2:	6020      	str	r0, [r4, #0]
 800acc4:	60a3      	str	r3, [r4, #8]
 800acc6:	4632      	mov	r2, r6
 800acc8:	4629      	mov	r1, r5
 800acca:	6820      	ldr	r0, [r4, #0]
 800accc:	f7ff ffd6 	bl	800ac7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 800acd0:	9b01      	ldr	r3, [sp, #4]
 800acd2:	6822      	ldr	r2, [r4, #0]
 800acd4:	6063      	str	r3, [r4, #4]
 800acd6:	2100      	movs	r1, #0
 800acd8:	54d1      	strb	r1, [r2, r3]
 800acda:	b002      	add	sp, #8
 800acdc:	bd70      	pop	{r4, r5, r6, pc}
 800acde:	bf00      	nop
 800ace0:	0800b2fc 	.word	0x0800b2fc

0800ace4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 800ace4:	b538      	push	{r3, r4, r5, lr}
 800ace6:	f100 0308 	add.w	r3, r0, #8
 800acea:	4604      	mov	r4, r0
 800acec:	6003      	str	r3, [r0, #0]
 800acee:	460d      	mov	r5, r1
 800acf0:	b159      	cbz	r1, 800ad0a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 800acf2:	4608      	mov	r0, r1
 800acf4:	f7f5 fa6c 	bl	80001d0 <strlen>
 800acf8:	182a      	adds	r2, r5, r0
 800acfa:	4620      	mov	r0, r4
 800acfc:	f04f 0300 	mov.w	r3, #0
 800ad00:	4629      	mov	r1, r5
 800ad02:	f7ff ffcb 	bl	800ac9c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 800ad06:	4620      	mov	r0, r4
 800ad08:	bd38      	pop	{r3, r4, r5, pc}
 800ad0a:	2201      	movs	r2, #1
 800ad0c:	e7f5      	b.n	800acfa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

0800ad0e <_ZdlPv>:
 800ad0e:	f000 b85f 	b.w	800add0 <free>

0800ad12 <_Znwj>:
 800ad12:	2801      	cmp	r0, #1
 800ad14:	bf38      	it	cc
 800ad16:	2001      	movcc	r0, #1
 800ad18:	b510      	push	{r4, lr}
 800ad1a:	4604      	mov	r4, r0
 800ad1c:	4620      	mov	r0, r4
 800ad1e:	f000 f84f 	bl	800adc0 <malloc>
 800ad22:	b930      	cbnz	r0, 800ad32 <_Znwj+0x20>
 800ad24:	f000 f810 	bl	800ad48 <_ZSt15get_new_handlerv>
 800ad28:	b908      	cbnz	r0, 800ad2e <_Znwj+0x1c>
 800ad2a:	f000 f815 	bl	800ad58 <abort>
 800ad2e:	4780      	blx	r0
 800ad30:	e7f4      	b.n	800ad1c <_Znwj+0xa>
 800ad32:	bd10      	pop	{r4, pc}

0800ad34 <_ZSt17__throw_bad_allocv>:
 800ad34:	b508      	push	{r3, lr}
 800ad36:	f000 f80f 	bl	800ad58 <abort>

0800ad3a <_ZSt19__throw_logic_errorPKc>:
 800ad3a:	b508      	push	{r3, lr}
 800ad3c:	f000 f80c 	bl	800ad58 <abort>

0800ad40 <_ZSt20__throw_length_errorPKc>:
 800ad40:	b508      	push	{r3, lr}
 800ad42:	f000 f809 	bl	800ad58 <abort>
	...

0800ad48 <_ZSt15get_new_handlerv>:
 800ad48:	4b02      	ldr	r3, [pc, #8]	; (800ad54 <_ZSt15get_new_handlerv+0xc>)
 800ad4a:	6818      	ldr	r0, [r3, #0]
 800ad4c:	f3bf 8f5b 	dmb	ish
 800ad50:	4770      	bx	lr
 800ad52:	bf00      	nop
 800ad54:	20006864 	.word	0x20006864

0800ad58 <abort>:
 800ad58:	b508      	push	{r3, lr}
 800ad5a:	2006      	movs	r0, #6
 800ad5c:	f000 f9d8 	bl	800b110 <raise>
 800ad60:	2001      	movs	r0, #1
 800ad62:	f7f6 f857 	bl	8000e14 <_exit>
	...

0800ad68 <__errno>:
 800ad68:	4b01      	ldr	r3, [pc, #4]	; (800ad70 <__errno+0x8>)
 800ad6a:	6818      	ldr	r0, [r3, #0]
 800ad6c:	4770      	bx	lr
 800ad6e:	bf00      	nop
 800ad70:	20000100 	.word	0x20000100

0800ad74 <__libc_init_array>:
 800ad74:	b570      	push	{r4, r5, r6, lr}
 800ad76:	4d0d      	ldr	r5, [pc, #52]	; (800adac <__libc_init_array+0x38>)
 800ad78:	4c0d      	ldr	r4, [pc, #52]	; (800adb0 <__libc_init_array+0x3c>)
 800ad7a:	1b64      	subs	r4, r4, r5
 800ad7c:	10a4      	asrs	r4, r4, #2
 800ad7e:	2600      	movs	r6, #0
 800ad80:	42a6      	cmp	r6, r4
 800ad82:	d109      	bne.n	800ad98 <__libc_init_array+0x24>
 800ad84:	4d0b      	ldr	r5, [pc, #44]	; (800adb4 <__libc_init_array+0x40>)
 800ad86:	4c0c      	ldr	r4, [pc, #48]	; (800adb8 <__libc_init_array+0x44>)
 800ad88:	f000 f9ea 	bl	800b160 <_init>
 800ad8c:	1b64      	subs	r4, r4, r5
 800ad8e:	10a4      	asrs	r4, r4, #2
 800ad90:	2600      	movs	r6, #0
 800ad92:	42a6      	cmp	r6, r4
 800ad94:	d105      	bne.n	800ada2 <__libc_init_array+0x2e>
 800ad96:	bd70      	pop	{r4, r5, r6, pc}
 800ad98:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad9c:	4798      	blx	r3
 800ad9e:	3601      	adds	r6, #1
 800ada0:	e7ee      	b.n	800ad80 <__libc_init_array+0xc>
 800ada2:	f855 3b04 	ldr.w	r3, [r5], #4
 800ada6:	4798      	blx	r3
 800ada8:	3601      	adds	r6, #1
 800adaa:	e7f2      	b.n	800ad92 <__libc_init_array+0x1e>
 800adac:	0800b390 	.word	0x0800b390
 800adb0:	0800b390 	.word	0x0800b390
 800adb4:	0800b390 	.word	0x0800b390
 800adb8:	0800b3a0 	.word	0x0800b3a0

0800adbc <__retarget_lock_acquire_recursive>:
 800adbc:	4770      	bx	lr

0800adbe <__retarget_lock_release_recursive>:
 800adbe:	4770      	bx	lr

0800adc0 <malloc>:
 800adc0:	4b02      	ldr	r3, [pc, #8]	; (800adcc <malloc+0xc>)
 800adc2:	4601      	mov	r1, r0
 800adc4:	6818      	ldr	r0, [r3, #0]
 800adc6:	f000 b88d 	b.w	800aee4 <_malloc_r>
 800adca:	bf00      	nop
 800adcc:	20000100 	.word	0x20000100

0800add0 <free>:
 800add0:	4b02      	ldr	r3, [pc, #8]	; (800addc <free+0xc>)
 800add2:	4601      	mov	r1, r0
 800add4:	6818      	ldr	r0, [r3, #0]
 800add6:	f000 b819 	b.w	800ae0c <_free_r>
 800adda:	bf00      	nop
 800addc:	20000100 	.word	0x20000100

0800ade0 <memcpy>:
 800ade0:	440a      	add	r2, r1
 800ade2:	4291      	cmp	r1, r2
 800ade4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ade8:	d100      	bne.n	800adec <memcpy+0xc>
 800adea:	4770      	bx	lr
 800adec:	b510      	push	{r4, lr}
 800adee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800adf2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800adf6:	4291      	cmp	r1, r2
 800adf8:	d1f9      	bne.n	800adee <memcpy+0xe>
 800adfa:	bd10      	pop	{r4, pc}

0800adfc <memset>:
 800adfc:	4402      	add	r2, r0
 800adfe:	4603      	mov	r3, r0
 800ae00:	4293      	cmp	r3, r2
 800ae02:	d100      	bne.n	800ae06 <memset+0xa>
 800ae04:	4770      	bx	lr
 800ae06:	f803 1b01 	strb.w	r1, [r3], #1
 800ae0a:	e7f9      	b.n	800ae00 <memset+0x4>

0800ae0c <_free_r>:
 800ae0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ae0e:	2900      	cmp	r1, #0
 800ae10:	d044      	beq.n	800ae9c <_free_r+0x90>
 800ae12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae16:	9001      	str	r0, [sp, #4]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	f1a1 0404 	sub.w	r4, r1, #4
 800ae1e:	bfb8      	it	lt
 800ae20:	18e4      	addlt	r4, r4, r3
 800ae22:	f000 f991 	bl	800b148 <__malloc_lock>
 800ae26:	4a1e      	ldr	r2, [pc, #120]	; (800aea0 <_free_r+0x94>)
 800ae28:	9801      	ldr	r0, [sp, #4]
 800ae2a:	6813      	ldr	r3, [r2, #0]
 800ae2c:	b933      	cbnz	r3, 800ae3c <_free_r+0x30>
 800ae2e:	6063      	str	r3, [r4, #4]
 800ae30:	6014      	str	r4, [r2, #0]
 800ae32:	b003      	add	sp, #12
 800ae34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ae38:	f000 b98c 	b.w	800b154 <__malloc_unlock>
 800ae3c:	42a3      	cmp	r3, r4
 800ae3e:	d908      	bls.n	800ae52 <_free_r+0x46>
 800ae40:	6825      	ldr	r5, [r4, #0]
 800ae42:	1961      	adds	r1, r4, r5
 800ae44:	428b      	cmp	r3, r1
 800ae46:	bf01      	itttt	eq
 800ae48:	6819      	ldreq	r1, [r3, #0]
 800ae4a:	685b      	ldreq	r3, [r3, #4]
 800ae4c:	1949      	addeq	r1, r1, r5
 800ae4e:	6021      	streq	r1, [r4, #0]
 800ae50:	e7ed      	b.n	800ae2e <_free_r+0x22>
 800ae52:	461a      	mov	r2, r3
 800ae54:	685b      	ldr	r3, [r3, #4]
 800ae56:	b10b      	cbz	r3, 800ae5c <_free_r+0x50>
 800ae58:	42a3      	cmp	r3, r4
 800ae5a:	d9fa      	bls.n	800ae52 <_free_r+0x46>
 800ae5c:	6811      	ldr	r1, [r2, #0]
 800ae5e:	1855      	adds	r5, r2, r1
 800ae60:	42a5      	cmp	r5, r4
 800ae62:	d10b      	bne.n	800ae7c <_free_r+0x70>
 800ae64:	6824      	ldr	r4, [r4, #0]
 800ae66:	4421      	add	r1, r4
 800ae68:	1854      	adds	r4, r2, r1
 800ae6a:	42a3      	cmp	r3, r4
 800ae6c:	6011      	str	r1, [r2, #0]
 800ae6e:	d1e0      	bne.n	800ae32 <_free_r+0x26>
 800ae70:	681c      	ldr	r4, [r3, #0]
 800ae72:	685b      	ldr	r3, [r3, #4]
 800ae74:	6053      	str	r3, [r2, #4]
 800ae76:	4421      	add	r1, r4
 800ae78:	6011      	str	r1, [r2, #0]
 800ae7a:	e7da      	b.n	800ae32 <_free_r+0x26>
 800ae7c:	d902      	bls.n	800ae84 <_free_r+0x78>
 800ae7e:	230c      	movs	r3, #12
 800ae80:	6003      	str	r3, [r0, #0]
 800ae82:	e7d6      	b.n	800ae32 <_free_r+0x26>
 800ae84:	6825      	ldr	r5, [r4, #0]
 800ae86:	1961      	adds	r1, r4, r5
 800ae88:	428b      	cmp	r3, r1
 800ae8a:	bf04      	itt	eq
 800ae8c:	6819      	ldreq	r1, [r3, #0]
 800ae8e:	685b      	ldreq	r3, [r3, #4]
 800ae90:	6063      	str	r3, [r4, #4]
 800ae92:	bf04      	itt	eq
 800ae94:	1949      	addeq	r1, r1, r5
 800ae96:	6021      	streq	r1, [r4, #0]
 800ae98:	6054      	str	r4, [r2, #4]
 800ae9a:	e7ca      	b.n	800ae32 <_free_r+0x26>
 800ae9c:	b003      	add	sp, #12
 800ae9e:	bd30      	pop	{r4, r5, pc}
 800aea0:	2000686c 	.word	0x2000686c

0800aea4 <sbrk_aligned>:
 800aea4:	b570      	push	{r4, r5, r6, lr}
 800aea6:	4e0e      	ldr	r6, [pc, #56]	; (800aee0 <sbrk_aligned+0x3c>)
 800aea8:	460c      	mov	r4, r1
 800aeaa:	6831      	ldr	r1, [r6, #0]
 800aeac:	4605      	mov	r5, r0
 800aeae:	b911      	cbnz	r1, 800aeb6 <sbrk_aligned+0x12>
 800aeb0:	f000 f8f6 	bl	800b0a0 <_sbrk_r>
 800aeb4:	6030      	str	r0, [r6, #0]
 800aeb6:	4621      	mov	r1, r4
 800aeb8:	4628      	mov	r0, r5
 800aeba:	f000 f8f1 	bl	800b0a0 <_sbrk_r>
 800aebe:	1c43      	adds	r3, r0, #1
 800aec0:	d00a      	beq.n	800aed8 <sbrk_aligned+0x34>
 800aec2:	1cc4      	adds	r4, r0, #3
 800aec4:	f024 0403 	bic.w	r4, r4, #3
 800aec8:	42a0      	cmp	r0, r4
 800aeca:	d007      	beq.n	800aedc <sbrk_aligned+0x38>
 800aecc:	1a21      	subs	r1, r4, r0
 800aece:	4628      	mov	r0, r5
 800aed0:	f000 f8e6 	bl	800b0a0 <_sbrk_r>
 800aed4:	3001      	adds	r0, #1
 800aed6:	d101      	bne.n	800aedc <sbrk_aligned+0x38>
 800aed8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800aedc:	4620      	mov	r0, r4
 800aede:	bd70      	pop	{r4, r5, r6, pc}
 800aee0:	20006870 	.word	0x20006870

0800aee4 <_malloc_r>:
 800aee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aee8:	1ccd      	adds	r5, r1, #3
 800aeea:	f025 0503 	bic.w	r5, r5, #3
 800aeee:	3508      	adds	r5, #8
 800aef0:	2d0c      	cmp	r5, #12
 800aef2:	bf38      	it	cc
 800aef4:	250c      	movcc	r5, #12
 800aef6:	2d00      	cmp	r5, #0
 800aef8:	4607      	mov	r7, r0
 800aefa:	db01      	blt.n	800af00 <_malloc_r+0x1c>
 800aefc:	42a9      	cmp	r1, r5
 800aefe:	d905      	bls.n	800af0c <_malloc_r+0x28>
 800af00:	230c      	movs	r3, #12
 800af02:	603b      	str	r3, [r7, #0]
 800af04:	2600      	movs	r6, #0
 800af06:	4630      	mov	r0, r6
 800af08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af0c:	4e2e      	ldr	r6, [pc, #184]	; (800afc8 <_malloc_r+0xe4>)
 800af0e:	f000 f91b 	bl	800b148 <__malloc_lock>
 800af12:	6833      	ldr	r3, [r6, #0]
 800af14:	461c      	mov	r4, r3
 800af16:	bb34      	cbnz	r4, 800af66 <_malloc_r+0x82>
 800af18:	4629      	mov	r1, r5
 800af1a:	4638      	mov	r0, r7
 800af1c:	f7ff ffc2 	bl	800aea4 <sbrk_aligned>
 800af20:	1c43      	adds	r3, r0, #1
 800af22:	4604      	mov	r4, r0
 800af24:	d14d      	bne.n	800afc2 <_malloc_r+0xde>
 800af26:	6834      	ldr	r4, [r6, #0]
 800af28:	4626      	mov	r6, r4
 800af2a:	2e00      	cmp	r6, #0
 800af2c:	d140      	bne.n	800afb0 <_malloc_r+0xcc>
 800af2e:	6823      	ldr	r3, [r4, #0]
 800af30:	4631      	mov	r1, r6
 800af32:	4638      	mov	r0, r7
 800af34:	eb04 0803 	add.w	r8, r4, r3
 800af38:	f000 f8b2 	bl	800b0a0 <_sbrk_r>
 800af3c:	4580      	cmp	r8, r0
 800af3e:	d13a      	bne.n	800afb6 <_malloc_r+0xd2>
 800af40:	6821      	ldr	r1, [r4, #0]
 800af42:	3503      	adds	r5, #3
 800af44:	1a6d      	subs	r5, r5, r1
 800af46:	f025 0503 	bic.w	r5, r5, #3
 800af4a:	3508      	adds	r5, #8
 800af4c:	2d0c      	cmp	r5, #12
 800af4e:	bf38      	it	cc
 800af50:	250c      	movcc	r5, #12
 800af52:	4629      	mov	r1, r5
 800af54:	4638      	mov	r0, r7
 800af56:	f7ff ffa5 	bl	800aea4 <sbrk_aligned>
 800af5a:	3001      	adds	r0, #1
 800af5c:	d02b      	beq.n	800afb6 <_malloc_r+0xd2>
 800af5e:	6823      	ldr	r3, [r4, #0]
 800af60:	442b      	add	r3, r5
 800af62:	6023      	str	r3, [r4, #0]
 800af64:	e00e      	b.n	800af84 <_malloc_r+0xa0>
 800af66:	6822      	ldr	r2, [r4, #0]
 800af68:	1b52      	subs	r2, r2, r5
 800af6a:	d41e      	bmi.n	800afaa <_malloc_r+0xc6>
 800af6c:	2a0b      	cmp	r2, #11
 800af6e:	d916      	bls.n	800af9e <_malloc_r+0xba>
 800af70:	1961      	adds	r1, r4, r5
 800af72:	42a3      	cmp	r3, r4
 800af74:	6025      	str	r5, [r4, #0]
 800af76:	bf18      	it	ne
 800af78:	6059      	strne	r1, [r3, #4]
 800af7a:	6863      	ldr	r3, [r4, #4]
 800af7c:	bf08      	it	eq
 800af7e:	6031      	streq	r1, [r6, #0]
 800af80:	5162      	str	r2, [r4, r5]
 800af82:	604b      	str	r3, [r1, #4]
 800af84:	4638      	mov	r0, r7
 800af86:	f104 060b 	add.w	r6, r4, #11
 800af8a:	f000 f8e3 	bl	800b154 <__malloc_unlock>
 800af8e:	f026 0607 	bic.w	r6, r6, #7
 800af92:	1d23      	adds	r3, r4, #4
 800af94:	1af2      	subs	r2, r6, r3
 800af96:	d0b6      	beq.n	800af06 <_malloc_r+0x22>
 800af98:	1b9b      	subs	r3, r3, r6
 800af9a:	50a3      	str	r3, [r4, r2]
 800af9c:	e7b3      	b.n	800af06 <_malloc_r+0x22>
 800af9e:	6862      	ldr	r2, [r4, #4]
 800afa0:	42a3      	cmp	r3, r4
 800afa2:	bf0c      	ite	eq
 800afa4:	6032      	streq	r2, [r6, #0]
 800afa6:	605a      	strne	r2, [r3, #4]
 800afa8:	e7ec      	b.n	800af84 <_malloc_r+0xa0>
 800afaa:	4623      	mov	r3, r4
 800afac:	6864      	ldr	r4, [r4, #4]
 800afae:	e7b2      	b.n	800af16 <_malloc_r+0x32>
 800afb0:	4634      	mov	r4, r6
 800afb2:	6876      	ldr	r6, [r6, #4]
 800afb4:	e7b9      	b.n	800af2a <_malloc_r+0x46>
 800afb6:	230c      	movs	r3, #12
 800afb8:	603b      	str	r3, [r7, #0]
 800afba:	4638      	mov	r0, r7
 800afbc:	f000 f8ca 	bl	800b154 <__malloc_unlock>
 800afc0:	e7a1      	b.n	800af06 <_malloc_r+0x22>
 800afc2:	6025      	str	r5, [r4, #0]
 800afc4:	e7de      	b.n	800af84 <_malloc_r+0xa0>
 800afc6:	bf00      	nop
 800afc8:	2000686c 	.word	0x2000686c

0800afcc <cleanup_glue>:
 800afcc:	b538      	push	{r3, r4, r5, lr}
 800afce:	460c      	mov	r4, r1
 800afd0:	6809      	ldr	r1, [r1, #0]
 800afd2:	4605      	mov	r5, r0
 800afd4:	b109      	cbz	r1, 800afda <cleanup_glue+0xe>
 800afd6:	f7ff fff9 	bl	800afcc <cleanup_glue>
 800afda:	4621      	mov	r1, r4
 800afdc:	4628      	mov	r0, r5
 800afde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800afe2:	f7ff bf13 	b.w	800ae0c <_free_r>
	...

0800afe8 <_reclaim_reent>:
 800afe8:	4b2c      	ldr	r3, [pc, #176]	; (800b09c <_reclaim_reent+0xb4>)
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	4283      	cmp	r3, r0
 800afee:	b570      	push	{r4, r5, r6, lr}
 800aff0:	4604      	mov	r4, r0
 800aff2:	d051      	beq.n	800b098 <_reclaim_reent+0xb0>
 800aff4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800aff6:	b143      	cbz	r3, 800b00a <_reclaim_reent+0x22>
 800aff8:	68db      	ldr	r3, [r3, #12]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d14a      	bne.n	800b094 <_reclaim_reent+0xac>
 800affe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b000:	6819      	ldr	r1, [r3, #0]
 800b002:	b111      	cbz	r1, 800b00a <_reclaim_reent+0x22>
 800b004:	4620      	mov	r0, r4
 800b006:	f7ff ff01 	bl	800ae0c <_free_r>
 800b00a:	6961      	ldr	r1, [r4, #20]
 800b00c:	b111      	cbz	r1, 800b014 <_reclaim_reent+0x2c>
 800b00e:	4620      	mov	r0, r4
 800b010:	f7ff fefc 	bl	800ae0c <_free_r>
 800b014:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b016:	b111      	cbz	r1, 800b01e <_reclaim_reent+0x36>
 800b018:	4620      	mov	r0, r4
 800b01a:	f7ff fef7 	bl	800ae0c <_free_r>
 800b01e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b020:	b111      	cbz	r1, 800b028 <_reclaim_reent+0x40>
 800b022:	4620      	mov	r0, r4
 800b024:	f7ff fef2 	bl	800ae0c <_free_r>
 800b028:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b02a:	b111      	cbz	r1, 800b032 <_reclaim_reent+0x4a>
 800b02c:	4620      	mov	r0, r4
 800b02e:	f7ff feed 	bl	800ae0c <_free_r>
 800b032:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b034:	b111      	cbz	r1, 800b03c <_reclaim_reent+0x54>
 800b036:	4620      	mov	r0, r4
 800b038:	f7ff fee8 	bl	800ae0c <_free_r>
 800b03c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b03e:	b111      	cbz	r1, 800b046 <_reclaim_reent+0x5e>
 800b040:	4620      	mov	r0, r4
 800b042:	f7ff fee3 	bl	800ae0c <_free_r>
 800b046:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b048:	b111      	cbz	r1, 800b050 <_reclaim_reent+0x68>
 800b04a:	4620      	mov	r0, r4
 800b04c:	f7ff fede 	bl	800ae0c <_free_r>
 800b050:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b052:	b111      	cbz	r1, 800b05a <_reclaim_reent+0x72>
 800b054:	4620      	mov	r0, r4
 800b056:	f7ff fed9 	bl	800ae0c <_free_r>
 800b05a:	69a3      	ldr	r3, [r4, #24]
 800b05c:	b1e3      	cbz	r3, 800b098 <_reclaim_reent+0xb0>
 800b05e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b060:	4620      	mov	r0, r4
 800b062:	4798      	blx	r3
 800b064:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b066:	b1b9      	cbz	r1, 800b098 <_reclaim_reent+0xb0>
 800b068:	4620      	mov	r0, r4
 800b06a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b06e:	f7ff bfad 	b.w	800afcc <cleanup_glue>
 800b072:	5949      	ldr	r1, [r1, r5]
 800b074:	b941      	cbnz	r1, 800b088 <_reclaim_reent+0xa0>
 800b076:	3504      	adds	r5, #4
 800b078:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b07a:	2d80      	cmp	r5, #128	; 0x80
 800b07c:	68d9      	ldr	r1, [r3, #12]
 800b07e:	d1f8      	bne.n	800b072 <_reclaim_reent+0x8a>
 800b080:	4620      	mov	r0, r4
 800b082:	f7ff fec3 	bl	800ae0c <_free_r>
 800b086:	e7ba      	b.n	800affe <_reclaim_reent+0x16>
 800b088:	680e      	ldr	r6, [r1, #0]
 800b08a:	4620      	mov	r0, r4
 800b08c:	f7ff febe 	bl	800ae0c <_free_r>
 800b090:	4631      	mov	r1, r6
 800b092:	e7ef      	b.n	800b074 <_reclaim_reent+0x8c>
 800b094:	2500      	movs	r5, #0
 800b096:	e7ef      	b.n	800b078 <_reclaim_reent+0x90>
 800b098:	bd70      	pop	{r4, r5, r6, pc}
 800b09a:	bf00      	nop
 800b09c:	20000100 	.word	0x20000100

0800b0a0 <_sbrk_r>:
 800b0a0:	b538      	push	{r3, r4, r5, lr}
 800b0a2:	4d06      	ldr	r5, [pc, #24]	; (800b0bc <_sbrk_r+0x1c>)
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	4604      	mov	r4, r0
 800b0a8:	4608      	mov	r0, r1
 800b0aa:	602b      	str	r3, [r5, #0]
 800b0ac:	f7f5 febc 	bl	8000e28 <_sbrk>
 800b0b0:	1c43      	adds	r3, r0, #1
 800b0b2:	d102      	bne.n	800b0ba <_sbrk_r+0x1a>
 800b0b4:	682b      	ldr	r3, [r5, #0]
 800b0b6:	b103      	cbz	r3, 800b0ba <_sbrk_r+0x1a>
 800b0b8:	6023      	str	r3, [r4, #0]
 800b0ba:	bd38      	pop	{r3, r4, r5, pc}
 800b0bc:	20006874 	.word	0x20006874

0800b0c0 <_raise_r>:
 800b0c0:	291f      	cmp	r1, #31
 800b0c2:	b538      	push	{r3, r4, r5, lr}
 800b0c4:	4604      	mov	r4, r0
 800b0c6:	460d      	mov	r5, r1
 800b0c8:	d904      	bls.n	800b0d4 <_raise_r+0x14>
 800b0ca:	2316      	movs	r3, #22
 800b0cc:	6003      	str	r3, [r0, #0]
 800b0ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b0d2:	bd38      	pop	{r3, r4, r5, pc}
 800b0d4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b0d6:	b112      	cbz	r2, 800b0de <_raise_r+0x1e>
 800b0d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b0dc:	b94b      	cbnz	r3, 800b0f2 <_raise_r+0x32>
 800b0de:	4620      	mov	r0, r4
 800b0e0:	f000 f830 	bl	800b144 <_getpid_r>
 800b0e4:	462a      	mov	r2, r5
 800b0e6:	4601      	mov	r1, r0
 800b0e8:	4620      	mov	r0, r4
 800b0ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b0ee:	f000 b817 	b.w	800b120 <_kill_r>
 800b0f2:	2b01      	cmp	r3, #1
 800b0f4:	d00a      	beq.n	800b10c <_raise_r+0x4c>
 800b0f6:	1c59      	adds	r1, r3, #1
 800b0f8:	d103      	bne.n	800b102 <_raise_r+0x42>
 800b0fa:	2316      	movs	r3, #22
 800b0fc:	6003      	str	r3, [r0, #0]
 800b0fe:	2001      	movs	r0, #1
 800b100:	e7e7      	b.n	800b0d2 <_raise_r+0x12>
 800b102:	2400      	movs	r4, #0
 800b104:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b108:	4628      	mov	r0, r5
 800b10a:	4798      	blx	r3
 800b10c:	2000      	movs	r0, #0
 800b10e:	e7e0      	b.n	800b0d2 <_raise_r+0x12>

0800b110 <raise>:
 800b110:	4b02      	ldr	r3, [pc, #8]	; (800b11c <raise+0xc>)
 800b112:	4601      	mov	r1, r0
 800b114:	6818      	ldr	r0, [r3, #0]
 800b116:	f7ff bfd3 	b.w	800b0c0 <_raise_r>
 800b11a:	bf00      	nop
 800b11c:	20000100 	.word	0x20000100

0800b120 <_kill_r>:
 800b120:	b538      	push	{r3, r4, r5, lr}
 800b122:	4d07      	ldr	r5, [pc, #28]	; (800b140 <_kill_r+0x20>)
 800b124:	2300      	movs	r3, #0
 800b126:	4604      	mov	r4, r0
 800b128:	4608      	mov	r0, r1
 800b12a:	4611      	mov	r1, r2
 800b12c:	602b      	str	r3, [r5, #0]
 800b12e:	f7f5 fe61 	bl	8000df4 <_kill>
 800b132:	1c43      	adds	r3, r0, #1
 800b134:	d102      	bne.n	800b13c <_kill_r+0x1c>
 800b136:	682b      	ldr	r3, [r5, #0]
 800b138:	b103      	cbz	r3, 800b13c <_kill_r+0x1c>
 800b13a:	6023      	str	r3, [r4, #0]
 800b13c:	bd38      	pop	{r3, r4, r5, pc}
 800b13e:	bf00      	nop
 800b140:	20006874 	.word	0x20006874

0800b144 <_getpid_r>:
 800b144:	f7f5 be4e 	b.w	8000de4 <_getpid>

0800b148 <__malloc_lock>:
 800b148:	4801      	ldr	r0, [pc, #4]	; (800b150 <__malloc_lock+0x8>)
 800b14a:	f7ff be37 	b.w	800adbc <__retarget_lock_acquire_recursive>
 800b14e:	bf00      	nop
 800b150:	20006868 	.word	0x20006868

0800b154 <__malloc_unlock>:
 800b154:	4801      	ldr	r0, [pc, #4]	; (800b15c <__malloc_unlock+0x8>)
 800b156:	f7ff be32 	b.w	800adbe <__retarget_lock_release_recursive>
 800b15a:	bf00      	nop
 800b15c:	20006868 	.word	0x20006868

0800b160 <_init>:
 800b160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b162:	bf00      	nop
 800b164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b166:	bc08      	pop	{r3}
 800b168:	469e      	mov	lr, r3
 800b16a:	4770      	bx	lr

0800b16c <_fini>:
 800b16c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b16e:	bf00      	nop
 800b170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b172:	bc08      	pop	{r3}
 800b174:	469e      	mov	lr, r3
 800b176:	4770      	bx	lr
