
usbandfreertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a5f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001bc  0800a784  0800a784  0001a784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a940  0800a940  00020164  2**0
                  CONTENTS
  4 .ARM          00000008  0800a940  0800a940  0001a940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a948  0800a948  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a948  0800a948  0001a948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a94c  0800a94c  0001a94c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  0800a950  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020164  2**0
                  CONTENTS
 10 .bss          000066a8  20000164  20000164  00020164  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000680c  2000680c  00020164  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 13 .debug_info   000271c8  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004dea  00000000  00000000  0004735c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001998  00000000  00000000  0004c148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000017a0  00000000  00000000  0004dae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000a5c2  00000000  00000000  0004f280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e51c  00000000  00000000  00059842  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db03d  00000000  00000000  00077d5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00152d9b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008338  00000000  00000000  00152dec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000164 	.word	0x20000164
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a76c 	.word	0x0800a76c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000168 	.word	0x20000168
 80001cc:	0800a76c 	.word	0x0800a76c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e8:	f000 fac4 	bl	8000a74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ec:	f000 f834 	bl	8000558 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f0:	f000 f8a8 	bl	8000644 <_ZL12MX_GPIO_Initv>
  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init();
 80004f4:	f009 f98a 	bl	800980c <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004f8:	f006 fc0e 	bl	8006d18 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004fc:	4a0d      	ldr	r2, [pc, #52]	; (8000534 <main+0x50>)
 80004fe:	2100      	movs	r1, #0
 8000500:	480d      	ldr	r0, [pc, #52]	; (8000538 <main+0x54>)
 8000502:	f006 fc53 	bl	8006dac <osThreadNew>
 8000506:	4603      	mov	r3, r0
 8000508:	4a0c      	ldr	r2, [pc, #48]	; (800053c <main+0x58>)
 800050a:	6013      	str	r3, [r2, #0]

  /* creation of ledtoggle */
  ledtoggleHandle = osThreadNew(ledstatustoggle, NULL, &ledtoggle_attributes);
 800050c:	4a0c      	ldr	r2, [pc, #48]	; (8000540 <main+0x5c>)
 800050e:	2100      	movs	r1, #0
 8000510:	480c      	ldr	r0, [pc, #48]	; (8000544 <main+0x60>)
 8000512:	f006 fc4b 	bl	8006dac <osThreadNew>
 8000516:	4603      	mov	r3, r0
 8000518:	4a0b      	ldr	r2, [pc, #44]	; (8000548 <main+0x64>)
 800051a:	6013      	str	r3, [r2, #0]

  /* creation of usbcomunication */
  usbcomunicationHandle = osThreadNew(usbcomunicationserial, NULL, &usbcomunication_attributes);
 800051c:	4a0b      	ldr	r2, [pc, #44]	; (800054c <main+0x68>)
 800051e:	2100      	movs	r1, #0
 8000520:	480b      	ldr	r0, [pc, #44]	; (8000550 <main+0x6c>)
 8000522:	f006 fc43 	bl	8006dac <osThreadNew>
 8000526:	4603      	mov	r3, r0
 8000528:	4a0a      	ldr	r2, [pc, #40]	; (8000554 <main+0x70>)
 800052a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800052c:	f006 fc18 	bl	8006d60 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000530:	e7fe      	b.n	8000530 <main+0x4c>
 8000532:	bf00      	nop
 8000534:	0800a818 	.word	0x0800a818
 8000538:	080006e5 	.word	0x080006e5
 800053c:	20000180 	.word	0x20000180
 8000540:	0800a83c 	.word	0x0800a83c
 8000544:	080006f9 	.word	0x080006f9
 8000548:	20000184 	.word	0x20000184
 800054c:	0800a860 	.word	0x0800a860
 8000550:	08000719 	.word	0x08000719
 8000554:	20000188 	.word	0x20000188

08000558 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b094      	sub	sp, #80	; 0x50
 800055c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055e:	f107 0320 	add.w	r3, r7, #32
 8000562:	2230      	movs	r2, #48	; 0x30
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f009 ff4e 	bl	800a408 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056c:	f107 030c 	add.w	r3, r7, #12
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
 800057a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800057c:	2300      	movs	r3, #0
 800057e:	60bb      	str	r3, [r7, #8]
 8000580:	4b2e      	ldr	r3, [pc, #184]	; (800063c <_Z18SystemClock_Configv+0xe4>)
 8000582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000584:	4a2d      	ldr	r2, [pc, #180]	; (800063c <_Z18SystemClock_Configv+0xe4>)
 8000586:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800058a:	6413      	str	r3, [r2, #64]	; 0x40
 800058c:	4b2b      	ldr	r3, [pc, #172]	; (800063c <_Z18SystemClock_Configv+0xe4>)
 800058e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000594:	60bb      	str	r3, [r7, #8]
 8000596:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000598:	2300      	movs	r3, #0
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	4b28      	ldr	r3, [pc, #160]	; (8000640 <_Z18SystemClock_Configv+0xe8>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a27      	ldr	r2, [pc, #156]	; (8000640 <_Z18SystemClock_Configv+0xe8>)
 80005a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005a6:	6013      	str	r3, [r2, #0]
 80005a8:	4b25      	ldr	r3, [pc, #148]	; (8000640 <_Z18SystemClock_Configv+0xe8>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005b0:	607b      	str	r3, [r7, #4]
 80005b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80005b4:	2303      	movs	r3, #3
 80005b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005be:	2301      	movs	r3, #1
 80005c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c2:	2310      	movs	r3, #16
 80005c4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c6:	2302      	movs	r3, #2
 80005c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005d0:	2304      	movs	r3, #4
 80005d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005d4:	2348      	movs	r3, #72	; 0x48
 80005d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005d8:	2302      	movs	r3, #2
 80005da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80005dc:	2303      	movs	r3, #3
 80005de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e0:	f107 0320 	add.w	r3, r7, #32
 80005e4:	4618      	mov	r0, r3
 80005e6:	f001 ffd9 	bl	800259c <HAL_RCC_OscConfig>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	bf14      	ite	ne
 80005f0:	2301      	movne	r3, #1
 80005f2:	2300      	moveq	r3, #0
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 80005fa:	f000 f8cf 	bl	800079c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fe:	230f      	movs	r3, #15
 8000600:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000602:	2300      	movs	r3, #0
 8000604:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000606:	2300      	movs	r3, #0
 8000608:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800060a:	2300      	movs	r3, #0
 800060c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800060e:	2300      	movs	r3, #0
 8000610:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000612:	f107 030c 	add.w	r3, r7, #12
 8000616:	2100      	movs	r1, #0
 8000618:	4618      	mov	r0, r3
 800061a:	f002 fa37 	bl	8002a8c <HAL_RCC_ClockConfig>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	bf14      	ite	ne
 8000624:	2301      	movne	r3, #1
 8000626:	2300      	moveq	r3, #0
 8000628:	b2db      	uxtb	r3, r3
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 800062e:	f000 f8b5 	bl	800079c <Error_Handler>
  }
}
 8000632:	bf00      	nop
 8000634:	3750      	adds	r7, #80	; 0x50
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	40023800 	.word	0x40023800
 8000640:	40007000 	.word	0x40007000

08000644 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b088      	sub	sp, #32
 8000648:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064a:	f107 030c 	add.w	r3, r7, #12
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	605a      	str	r2, [r3, #4]
 8000654:	609a      	str	r2, [r3, #8]
 8000656:	60da      	str	r2, [r3, #12]
 8000658:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800065a:	2300      	movs	r3, #0
 800065c:	60bb      	str	r3, [r7, #8]
 800065e:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <_ZL12MX_GPIO_Initv+0x98>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	4a1e      	ldr	r2, [pc, #120]	; (80006dc <_ZL12MX_GPIO_Initv+0x98>)
 8000664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000668:	6313      	str	r3, [r2, #48]	; 0x30
 800066a:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <_ZL12MX_GPIO_Initv+0x98>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000672:	60bb      	str	r3, [r7, #8]
 8000674:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	4b18      	ldr	r3, [pc, #96]	; (80006dc <_ZL12MX_GPIO_Initv+0x98>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	4a17      	ldr	r2, [pc, #92]	; (80006dc <_ZL12MX_GPIO_Initv+0x98>)
 8000680:	f043 0301 	orr.w	r3, r3, #1
 8000684:	6313      	str	r3, [r2, #48]	; 0x30
 8000686:	4b15      	ldr	r3, [pc, #84]	; (80006dc <_ZL12MX_GPIO_Initv+0x98>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	f003 0301 	and.w	r3, r3, #1
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000692:	2300      	movs	r3, #0
 8000694:	603b      	str	r3, [r7, #0]
 8000696:	4b11      	ldr	r3, [pc, #68]	; (80006dc <_ZL12MX_GPIO_Initv+0x98>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	4a10      	ldr	r2, [pc, #64]	; (80006dc <_ZL12MX_GPIO_Initv+0x98>)
 800069c:	f043 0302 	orr.w	r3, r3, #2
 80006a0:	6313      	str	r3, [r2, #48]	; 0x30
 80006a2:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <_ZL12MX_GPIO_Initv+0x98>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	f003 0302 	and.w	r3, r3, #2
 80006aa:	603b      	str	r3, [r7, #0]
 80006ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 80006ae:	2200      	movs	r2, #0
 80006b0:	2120      	movs	r1, #32
 80006b2:	480b      	ldr	r0, [pc, #44]	; (80006e0 <_ZL12MX_GPIO_Initv+0x9c>)
 80006b4:	f000 fcc2 	bl	800103c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : led_Pin */
  GPIO_InitStruct.Pin = led_Pin;
 80006b8:	2320      	movs	r3, #32
 80006ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006bc:	2301      	movs	r3, #1
 80006be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c0:	2300      	movs	r3, #0
 80006c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c4:	2300      	movs	r3, #0
 80006c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 80006c8:	f107 030c 	add.w	r3, r7, #12
 80006cc:	4619      	mov	r1, r3
 80006ce:	4804      	ldr	r0, [pc, #16]	; (80006e0 <_ZL12MX_GPIO_Initv+0x9c>)
 80006d0:	f000 fb18 	bl	8000d04 <HAL_GPIO_Init>

}
 80006d4:	bf00      	nop
 80006d6:	3720      	adds	r7, #32
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	40023800 	.word	0x40023800
 80006e0:	40020400 	.word	0x40020400

080006e4 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80006ec:	f009 f88e 	bl	800980c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80006f0:	2001      	movs	r0, #1
 80006f2:	f006 fbed 	bl	8006ed0 <osDelay>
 80006f6:	e7fb      	b.n	80006f0 <_Z16StartDefaultTaskPv+0xc>

080006f8 <_Z15ledstatustogglePv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ledstatustoggle */
void ledstatustoggle(void *argument)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ledstatustoggle */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(led_GPIO_Port, led_Pin);
 8000700:	2120      	movs	r1, #32
 8000702:	4804      	ldr	r0, [pc, #16]	; (8000714 <_Z15ledstatustogglePv+0x1c>)
 8000704:	f000 fcb3 	bl	800106e <HAL_GPIO_TogglePin>
	  osDelay(1000);
 8000708:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800070c:	f006 fbe0 	bl	8006ed0 <osDelay>
	  HAL_GPIO_TogglePin(led_GPIO_Port, led_Pin);
 8000710:	e7f6      	b.n	8000700 <_Z15ledstatustogglePv+0x8>
 8000712:	bf00      	nop
 8000714:	40020400 	.word	0x40020400

08000718 <_Z21usbcomunicationserialPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_usbcomunicationserial */
void usbcomunicationserial(void *argument)
{
 8000718:	b590      	push	{r4, r7, lr}
 800071a:	b08b      	sub	sp, #44	; 0x2c
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN usbcomunicationserial */
	std::string tosend = "Hello";
 8000720:	f107 0320 	add.w	r3, r7, #32
 8000724:	4618      	mov	r0, r3
 8000726:	f009 fd8b 	bl	800a240 <_ZNSaIcEC1Ev>
 800072a:	f107 0220 	add.w	r2, r7, #32
 800072e:	f107 0308 	add.w	r3, r7, #8
 8000732:	4910      	ldr	r1, [pc, #64]	; (8000774 <_Z21usbcomunicationserialPv+0x5c>)
 8000734:	4618      	mov	r0, r3
 8000736:	f009 fde5 	bl	800a304 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800073a:	f107 0320 	add.w	r3, r7, #32
 800073e:	4618      	mov	r0, r3
 8000740:	f009 fd7f 	bl	800a242 <_ZNSaIcED1Ev>
	int index = 0;
 8000744:	2300      	movs	r3, #0
 8000746:	627b      	str	r3, [r7, #36]	; 0x24
  /* Infinite loop */
  for(;;)
  {

	  CDC_Transmit_FS((uint8_t *)tosend.c_str(), tosend.length());
 8000748:	f107 0308 	add.w	r3, r7, #8
 800074c:	4618      	mov	r0, r3
 800074e:	f009 fdb2 	bl	800a2b6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8000752:	4604      	mov	r4, r0
 8000754:	f107 0308 	add.w	r3, r7, #8
 8000758:	4618      	mov	r0, r3
 800075a:	f009 fdaa 	bl	800a2b2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 800075e:	4603      	mov	r3, r0
 8000760:	b29b      	uxth	r3, r3
 8000762:	4619      	mov	r1, r3
 8000764:	4620      	mov	r0, r4
 8000766:	f009 f90f 	bl	8009988 <CDC_Transmit_FS>
	  osDelay(2000);
 800076a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800076e:	f006 fbaf 	bl	8006ed0 <osDelay>
	  CDC_Transmit_FS((uint8_t *)tosend.c_str(), tosend.length());
 8000772:	e7e9      	b.n	8000748 <_Z21usbcomunicationserialPv+0x30>
 8000774:	0800a7bc 	.word	0x0800a7bc

08000778 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a04      	ldr	r2, [pc, #16]	; (8000798 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000786:	4293      	cmp	r3, r2
 8000788:	d101      	bne.n	800078e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800078a:	f000 f995 	bl	8000ab8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800078e:	bf00      	nop
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40001000 	.word	0x40001000

0800079c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a0:	b672      	cpsid	i
}
 80007a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a4:	e7fe      	b.n	80007a4 <Error_Handler+0x8>
	...

080007a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	607b      	str	r3, [r7, #4]
 80007b2:	4b12      	ldr	r3, [pc, #72]	; (80007fc <HAL_MspInit+0x54>)
 80007b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007b6:	4a11      	ldr	r2, [pc, #68]	; (80007fc <HAL_MspInit+0x54>)
 80007b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007bc:	6453      	str	r3, [r2, #68]	; 0x44
 80007be:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <HAL_MspInit+0x54>)
 80007c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	603b      	str	r3, [r7, #0]
 80007ce:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <HAL_MspInit+0x54>)
 80007d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d2:	4a0a      	ldr	r2, [pc, #40]	; (80007fc <HAL_MspInit+0x54>)
 80007d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d8:	6413      	str	r3, [r2, #64]	; 0x40
 80007da:	4b08      	ldr	r3, [pc, #32]	; (80007fc <HAL_MspInit+0x54>)
 80007dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e2:	603b      	str	r3, [r7, #0]
 80007e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007e6:	2200      	movs	r2, #0
 80007e8:	210f      	movs	r1, #15
 80007ea:	f06f 0001 	mvn.w	r0, #1
 80007ee:	f000 fa5f 	bl	8000cb0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40023800 	.word	0x40023800

08000800 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08e      	sub	sp, #56	; 0x38
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000808:	2300      	movs	r3, #0
 800080a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800080c:	2300      	movs	r3, #0
 800080e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000810:	2300      	movs	r3, #0
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	4b33      	ldr	r3, [pc, #204]	; (80008e4 <HAL_InitTick+0xe4>)
 8000816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000818:	4a32      	ldr	r2, [pc, #200]	; (80008e4 <HAL_InitTick+0xe4>)
 800081a:	f043 0310 	orr.w	r3, r3, #16
 800081e:	6413      	str	r3, [r2, #64]	; 0x40
 8000820:	4b30      	ldr	r3, [pc, #192]	; (80008e4 <HAL_InitTick+0xe4>)
 8000822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000824:	f003 0310 	and.w	r3, r3, #16
 8000828:	60fb      	str	r3, [r7, #12]
 800082a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800082c:	f107 0210 	add.w	r2, r7, #16
 8000830:	f107 0314 	add.w	r3, r7, #20
 8000834:	4611      	mov	r1, r2
 8000836:	4618      	mov	r0, r3
 8000838:	f002 fb34 	bl	8002ea4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800083c:	6a3b      	ldr	r3, [r7, #32]
 800083e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000842:	2b00      	cmp	r3, #0
 8000844:	d103      	bne.n	800084e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000846:	f002 fb19 	bl	8002e7c <HAL_RCC_GetPCLK1Freq>
 800084a:	6378      	str	r0, [r7, #52]	; 0x34
 800084c:	e004      	b.n	8000858 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800084e:	f002 fb15 	bl	8002e7c <HAL_RCC_GetPCLK1Freq>
 8000852:	4603      	mov	r3, r0
 8000854:	005b      	lsls	r3, r3, #1
 8000856:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800085a:	4a23      	ldr	r2, [pc, #140]	; (80008e8 <HAL_InitTick+0xe8>)
 800085c:	fba2 2303 	umull	r2, r3, r2, r3
 8000860:	0c9b      	lsrs	r3, r3, #18
 8000862:	3b01      	subs	r3, #1
 8000864:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000866:	4b21      	ldr	r3, [pc, #132]	; (80008ec <HAL_InitTick+0xec>)
 8000868:	4a21      	ldr	r2, [pc, #132]	; (80008f0 <HAL_InitTick+0xf0>)
 800086a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800086c:	4b1f      	ldr	r3, [pc, #124]	; (80008ec <HAL_InitTick+0xec>)
 800086e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000872:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000874:	4a1d      	ldr	r2, [pc, #116]	; (80008ec <HAL_InitTick+0xec>)
 8000876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000878:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800087a:	4b1c      	ldr	r3, [pc, #112]	; (80008ec <HAL_InitTick+0xec>)
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000880:	4b1a      	ldr	r3, [pc, #104]	; (80008ec <HAL_InitTick+0xec>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000886:	4b19      	ldr	r3, [pc, #100]	; (80008ec <HAL_InitTick+0xec>)
 8000888:	2200      	movs	r2, #0
 800088a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800088c:	4817      	ldr	r0, [pc, #92]	; (80008ec <HAL_InitTick+0xec>)
 800088e:	f002 fb3b 	bl	8002f08 <HAL_TIM_Base_Init>
 8000892:	4603      	mov	r3, r0
 8000894:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000898:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800089c:	2b00      	cmp	r3, #0
 800089e:	d11b      	bne.n	80008d8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80008a0:	4812      	ldr	r0, [pc, #72]	; (80008ec <HAL_InitTick+0xec>)
 80008a2:	f002 fb8b 	bl	8002fbc <HAL_TIM_Base_Start_IT>
 80008a6:	4603      	mov	r3, r0
 80008a8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80008ac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d111      	bne.n	80008d8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80008b4:	2036      	movs	r0, #54	; 0x36
 80008b6:	f000 fa17 	bl	8000ce8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	2b0f      	cmp	r3, #15
 80008be:	d808      	bhi.n	80008d2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80008c0:	2200      	movs	r2, #0
 80008c2:	6879      	ldr	r1, [r7, #4]
 80008c4:	2036      	movs	r0, #54	; 0x36
 80008c6:	f000 f9f3 	bl	8000cb0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008ca:	4a0a      	ldr	r2, [pc, #40]	; (80008f4 <HAL_InitTick+0xf4>)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	6013      	str	r3, [r2, #0]
 80008d0:	e002      	b.n	80008d8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80008d2:	2301      	movs	r3, #1
 80008d4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80008d8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80008dc:	4618      	mov	r0, r3
 80008de:	3738      	adds	r7, #56	; 0x38
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40023800 	.word	0x40023800
 80008e8:	431bde83 	.word	0x431bde83
 80008ec:	2000018c 	.word	0x2000018c
 80008f0:	40001000 	.word	0x40001000
 80008f4:	20000004 	.word	0x20000004

080008f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008fc:	e7fe      	b.n	80008fc <NMI_Handler+0x4>

080008fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000902:	e7fe      	b.n	8000902 <HardFault_Handler+0x4>

08000904 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000908:	e7fe      	b.n	8000908 <MemManage_Handler+0x4>

0800090a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800090a:	b480      	push	{r7}
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800090e:	e7fe      	b.n	800090e <BusFault_Handler+0x4>

08000910 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000914:	e7fe      	b.n	8000914 <UsageFault_Handler+0x4>

08000916 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000916:	b480      	push	{r7}
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr

08000924 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000928:	4802      	ldr	r0, [pc, #8]	; (8000934 <TIM6_DAC_IRQHandler+0x10>)
 800092a:	f002 fbb7 	bl	800309c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	2000018c 	.word	0x2000018c

08000938 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800093c:	4802      	ldr	r0, [pc, #8]	; (8000948 <OTG_FS_IRQHandler+0x10>)
 800093e:	f000 fd00 	bl	8001342 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	200060cc 	.word	0x200060cc

0800094c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
	return 1;
 8000950:	2301      	movs	r3, #1
}
 8000952:	4618      	mov	r0, r3
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr

0800095c <_kill>:

int _kill(int pid, int sig)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
 8000964:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000966:	f009 fd0d 	bl	800a384 <__errno>
 800096a:	4603      	mov	r3, r0
 800096c:	2216      	movs	r2, #22
 800096e:	601a      	str	r2, [r3, #0]
	return -1;
 8000970:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000974:	4618      	mov	r0, r3
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}

0800097c <_exit>:

void _exit (int status)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000984:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000988:	6878      	ldr	r0, [r7, #4]
 800098a:	f7ff ffe7 	bl	800095c <_kill>
	while (1) {}		/* Make sure we hang here */
 800098e:	e7fe      	b.n	800098e <_exit+0x12>

08000990 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b086      	sub	sp, #24
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000998:	4a14      	ldr	r2, [pc, #80]	; (80009ec <_sbrk+0x5c>)
 800099a:	4b15      	ldr	r3, [pc, #84]	; (80009f0 <_sbrk+0x60>)
 800099c:	1ad3      	subs	r3, r2, r3
 800099e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009a4:	4b13      	ldr	r3, [pc, #76]	; (80009f4 <_sbrk+0x64>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d102      	bne.n	80009b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009ac:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <_sbrk+0x64>)
 80009ae:	4a12      	ldr	r2, [pc, #72]	; (80009f8 <_sbrk+0x68>)
 80009b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009b2:	4b10      	ldr	r3, [pc, #64]	; (80009f4 <_sbrk+0x64>)
 80009b4:	681a      	ldr	r2, [r3, #0]
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	4413      	add	r3, r2
 80009ba:	693a      	ldr	r2, [r7, #16]
 80009bc:	429a      	cmp	r2, r3
 80009be:	d207      	bcs.n	80009d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009c0:	f009 fce0 	bl	800a384 <__errno>
 80009c4:	4603      	mov	r3, r0
 80009c6:	220c      	movs	r2, #12
 80009c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009ce:	e009      	b.n	80009e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009d0:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <_sbrk+0x64>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009d6:	4b07      	ldr	r3, [pc, #28]	; (80009f4 <_sbrk+0x64>)
 80009d8:	681a      	ldr	r2, [r3, #0]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4413      	add	r3, r2
 80009de:	4a05      	ldr	r2, [pc, #20]	; (80009f4 <_sbrk+0x64>)
 80009e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009e2:	68fb      	ldr	r3, [r7, #12]
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	3718      	adds	r7, #24
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	20020000 	.word	0x20020000
 80009f0:	00000400 	.word	0x00000400
 80009f4:	200001d4 	.word	0x200001d4
 80009f8:	20006810 	.word	0x20006810

080009fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a00:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <SystemInit+0x20>)
 8000a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a06:	4a05      	ldr	r2, [pc, #20]	; (8000a1c <SystemInit+0x20>)
 8000a08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	e000ed00 	.word	0xe000ed00

08000a20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a58 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a24:	480d      	ldr	r0, [pc, #52]	; (8000a5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a26:	490e      	ldr	r1, [pc, #56]	; (8000a60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a28:	4a0e      	ldr	r2, [pc, #56]	; (8000a64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a2c:	e002      	b.n	8000a34 <LoopCopyDataInit>

08000a2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a32:	3304      	adds	r3, #4

08000a34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a38:	d3f9      	bcc.n	8000a2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a3a:	4a0b      	ldr	r2, [pc, #44]	; (8000a68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a3c:	4c0b      	ldr	r4, [pc, #44]	; (8000a6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a40:	e001      	b.n	8000a46 <LoopFillZerobss>

08000a42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a44:	3204      	adds	r2, #4

08000a46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a48:	d3fb      	bcc.n	8000a42 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a4a:	f7ff ffd7 	bl	80009fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a4e:	f009 fc9f 	bl	800a390 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a52:	f7ff fd47 	bl	80004e4 <main>
  bx  lr    
 8000a56:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a60:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 8000a64:	0800a950 	.word	0x0800a950
  ldr r2, =_sbss
 8000a68:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 8000a6c:	2000680c 	.word	0x2000680c

08000a70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a70:	e7fe      	b.n	8000a70 <ADC_IRQHandler>
	...

08000a74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a78:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <HAL_Init+0x40>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a0d      	ldr	r2, [pc, #52]	; (8000ab4 <HAL_Init+0x40>)
 8000a7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a84:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <HAL_Init+0x40>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a0a      	ldr	r2, [pc, #40]	; (8000ab4 <HAL_Init+0x40>)
 8000a8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a90:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <HAL_Init+0x40>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a07      	ldr	r2, [pc, #28]	; (8000ab4 <HAL_Init+0x40>)
 8000a96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a9c:	2003      	movs	r0, #3
 8000a9e:	f000 f8fc 	bl	8000c9a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aa2:	200f      	movs	r0, #15
 8000aa4:	f7ff feac 	bl	8000800 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aa8:	f7ff fe7e 	bl	80007a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aac:	2300      	movs	r3, #0
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40023c00 	.word	0x40023c00

08000ab8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000abc:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <HAL_IncTick+0x20>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	4b06      	ldr	r3, [pc, #24]	; (8000adc <HAL_IncTick+0x24>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4413      	add	r3, r2
 8000ac8:	4a04      	ldr	r2, [pc, #16]	; (8000adc <HAL_IncTick+0x24>)
 8000aca:	6013      	str	r3, [r2, #0]
}
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	20000008 	.word	0x20000008
 8000adc:	200001d8 	.word	0x200001d8

08000ae0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ae4:	4b03      	ldr	r3, [pc, #12]	; (8000af4 <HAL_GetTick+0x14>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	200001d8 	.word	0x200001d8

08000af8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b00:	f7ff ffee 	bl	8000ae0 <HAL_GetTick>
 8000b04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b10:	d005      	beq.n	8000b1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b12:	4b0a      	ldr	r3, [pc, #40]	; (8000b3c <HAL_Delay+0x44>)
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	461a      	mov	r2, r3
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	4413      	add	r3, r2
 8000b1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b1e:	bf00      	nop
 8000b20:	f7ff ffde 	bl	8000ae0 <HAL_GetTick>
 8000b24:	4602      	mov	r2, r0
 8000b26:	68bb      	ldr	r3, [r7, #8]
 8000b28:	1ad3      	subs	r3, r2, r3
 8000b2a:	68fa      	ldr	r2, [r7, #12]
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	d8f7      	bhi.n	8000b20 <HAL_Delay+0x28>
  {
  }
}
 8000b30:	bf00      	nop
 8000b32:	bf00      	nop
 8000b34:	3710      	adds	r7, #16
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20000008 	.word	0x20000008

08000b40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	f003 0307 	and.w	r3, r3, #7
 8000b4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b50:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <__NVIC_SetPriorityGrouping+0x44>)
 8000b52:	68db      	ldr	r3, [r3, #12]
 8000b54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b56:	68ba      	ldr	r2, [r7, #8]
 8000b58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b72:	4a04      	ldr	r2, [pc, #16]	; (8000b84 <__NVIC_SetPriorityGrouping+0x44>)
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	60d3      	str	r3, [r2, #12]
}
 8000b78:	bf00      	nop
 8000b7a:	3714      	adds	r7, #20
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b8c:	4b04      	ldr	r3, [pc, #16]	; (8000ba0 <__NVIC_GetPriorityGrouping+0x18>)
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	0a1b      	lsrs	r3, r3, #8
 8000b92:	f003 0307 	and.w	r3, r3, #7
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr
 8000ba0:	e000ed00 	.word	0xe000ed00

08000ba4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	db0b      	blt.n	8000bce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	f003 021f 	and.w	r2, r3, #31
 8000bbc:	4907      	ldr	r1, [pc, #28]	; (8000bdc <__NVIC_EnableIRQ+0x38>)
 8000bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc2:	095b      	lsrs	r3, r3, #5
 8000bc4:	2001      	movs	r0, #1
 8000bc6:	fa00 f202 	lsl.w	r2, r0, r2
 8000bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bce:	bf00      	nop
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	e000e100 	.word	0xe000e100

08000be0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	6039      	str	r1, [r7, #0]
 8000bea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	db0a      	blt.n	8000c0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	b2da      	uxtb	r2, r3
 8000bf8:	490c      	ldr	r1, [pc, #48]	; (8000c2c <__NVIC_SetPriority+0x4c>)
 8000bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfe:	0112      	lsls	r2, r2, #4
 8000c00:	b2d2      	uxtb	r2, r2
 8000c02:	440b      	add	r3, r1
 8000c04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c08:	e00a      	b.n	8000c20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	b2da      	uxtb	r2, r3
 8000c0e:	4908      	ldr	r1, [pc, #32]	; (8000c30 <__NVIC_SetPriority+0x50>)
 8000c10:	79fb      	ldrb	r3, [r7, #7]
 8000c12:	f003 030f 	and.w	r3, r3, #15
 8000c16:	3b04      	subs	r3, #4
 8000c18:	0112      	lsls	r2, r2, #4
 8000c1a:	b2d2      	uxtb	r2, r2
 8000c1c:	440b      	add	r3, r1
 8000c1e:	761a      	strb	r2, [r3, #24]
}
 8000c20:	bf00      	nop
 8000c22:	370c      	adds	r7, #12
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr
 8000c2c:	e000e100 	.word	0xe000e100
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b089      	sub	sp, #36	; 0x24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	60f8      	str	r0, [r7, #12]
 8000c3c:	60b9      	str	r1, [r7, #8]
 8000c3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	f003 0307 	and.w	r3, r3, #7
 8000c46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c48:	69fb      	ldr	r3, [r7, #28]
 8000c4a:	f1c3 0307 	rsb	r3, r3, #7
 8000c4e:	2b04      	cmp	r3, #4
 8000c50:	bf28      	it	cs
 8000c52:	2304      	movcs	r3, #4
 8000c54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	3304      	adds	r3, #4
 8000c5a:	2b06      	cmp	r3, #6
 8000c5c:	d902      	bls.n	8000c64 <NVIC_EncodePriority+0x30>
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	3b03      	subs	r3, #3
 8000c62:	e000      	b.n	8000c66 <NVIC_EncodePriority+0x32>
 8000c64:	2300      	movs	r3, #0
 8000c66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c6c:	69bb      	ldr	r3, [r7, #24]
 8000c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c72:	43da      	mvns	r2, r3
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	401a      	ands	r2, r3
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c7c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	fa01 f303 	lsl.w	r3, r1, r3
 8000c86:	43d9      	mvns	r1, r3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c8c:	4313      	orrs	r3, r2
         );
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3724      	adds	r7, #36	; 0x24
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr

08000c9a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b082      	sub	sp, #8
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	f7ff ff4c 	bl	8000b40 <__NVIC_SetPriorityGrouping>
}
 8000ca8:	bf00      	nop
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b086      	sub	sp, #24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	60b9      	str	r1, [r7, #8]
 8000cba:	607a      	str	r2, [r7, #4]
 8000cbc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cc2:	f7ff ff61 	bl	8000b88 <__NVIC_GetPriorityGrouping>
 8000cc6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cc8:	687a      	ldr	r2, [r7, #4]
 8000cca:	68b9      	ldr	r1, [r7, #8]
 8000ccc:	6978      	ldr	r0, [r7, #20]
 8000cce:	f7ff ffb1 	bl	8000c34 <NVIC_EncodePriority>
 8000cd2:	4602      	mov	r2, r0
 8000cd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cd8:	4611      	mov	r1, r2
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff ff80 	bl	8000be0 <__NVIC_SetPriority>
}
 8000ce0:	bf00      	nop
 8000ce2:	3718      	adds	r7, #24
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f7ff ff54 	bl	8000ba4 <__NVIC_EnableIRQ>
}
 8000cfc:	bf00      	nop
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b089      	sub	sp, #36	; 0x24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d12:	2300      	movs	r3, #0
 8000d14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d16:	2300      	movs	r3, #0
 8000d18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	61fb      	str	r3, [r7, #28]
 8000d1e:	e16b      	b.n	8000ff8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d20:	2201      	movs	r2, #1
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	fa02 f303 	lsl.w	r3, r2, r3
 8000d28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	697a      	ldr	r2, [r7, #20]
 8000d30:	4013      	ands	r3, r2
 8000d32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d34:	693a      	ldr	r2, [r7, #16]
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	f040 815a 	bne.w	8000ff2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	f003 0303 	and.w	r3, r3, #3
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d005      	beq.n	8000d56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d52:	2b02      	cmp	r3, #2
 8000d54:	d130      	bne.n	8000db8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	689b      	ldr	r3, [r3, #8]
 8000d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	2203      	movs	r2, #3
 8000d62:	fa02 f303 	lsl.w	r3, r2, r3
 8000d66:	43db      	mvns	r3, r3
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	68da      	ldr	r2, [r3, #12]
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	69ba      	ldr	r2, [r7, #24]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	69ba      	ldr	r2, [r7, #24]
 8000d84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	43db      	mvns	r3, r3
 8000d96:	69ba      	ldr	r2, [r7, #24]
 8000d98:	4013      	ands	r3, r2
 8000d9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	091b      	lsrs	r3, r3, #4
 8000da2:	f003 0201 	and.w	r2, r3, #1
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	4313      	orrs	r3, r2
 8000db0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	69ba      	ldr	r2, [r7, #24]
 8000db6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f003 0303 	and.w	r3, r3, #3
 8000dc0:	2b03      	cmp	r3, #3
 8000dc2:	d017      	beq.n	8000df4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	005b      	lsls	r3, r3, #1
 8000dce:	2203      	movs	r2, #3
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	69ba      	ldr	r2, [r7, #24]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	689a      	ldr	r2, [r3, #8]
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f003 0303 	and.w	r3, r3, #3
 8000dfc:	2b02      	cmp	r3, #2
 8000dfe:	d123      	bne.n	8000e48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	08da      	lsrs	r2, r3, #3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	3208      	adds	r2, #8
 8000e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	f003 0307 	and.w	r3, r3, #7
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	220f      	movs	r2, #15
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	69ba      	ldr	r2, [r7, #24]
 8000e20:	4013      	ands	r3, r2
 8000e22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	691a      	ldr	r2, [r3, #16]
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	f003 0307 	and.w	r3, r3, #7
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	08da      	lsrs	r2, r3, #3
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	3208      	adds	r2, #8
 8000e42:	69b9      	ldr	r1, [r7, #24]
 8000e44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	2203      	movs	r2, #3
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	69ba      	ldr	r2, [r7, #24]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f003 0203 	and.w	r2, r3, #3
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	4313      	orrs	r3, r2
 8000e74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	f000 80b4 	beq.w	8000ff2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	4b60      	ldr	r3, [pc, #384]	; (8001010 <HAL_GPIO_Init+0x30c>)
 8000e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e92:	4a5f      	ldr	r2, [pc, #380]	; (8001010 <HAL_GPIO_Init+0x30c>)
 8000e94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e98:	6453      	str	r3, [r2, #68]	; 0x44
 8000e9a:	4b5d      	ldr	r3, [pc, #372]	; (8001010 <HAL_GPIO_Init+0x30c>)
 8000e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ea6:	4a5b      	ldr	r2, [pc, #364]	; (8001014 <HAL_GPIO_Init+0x310>)
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	089b      	lsrs	r3, r3, #2
 8000eac:	3302      	adds	r3, #2
 8000eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	f003 0303 	and.w	r3, r3, #3
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	220f      	movs	r2, #15
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	43db      	mvns	r3, r3
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4a52      	ldr	r2, [pc, #328]	; (8001018 <HAL_GPIO_Init+0x314>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d02b      	beq.n	8000f2a <HAL_GPIO_Init+0x226>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4a51      	ldr	r2, [pc, #324]	; (800101c <HAL_GPIO_Init+0x318>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d025      	beq.n	8000f26 <HAL_GPIO_Init+0x222>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a50      	ldr	r2, [pc, #320]	; (8001020 <HAL_GPIO_Init+0x31c>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d01f      	beq.n	8000f22 <HAL_GPIO_Init+0x21e>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a4f      	ldr	r2, [pc, #316]	; (8001024 <HAL_GPIO_Init+0x320>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d019      	beq.n	8000f1e <HAL_GPIO_Init+0x21a>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a4e      	ldr	r2, [pc, #312]	; (8001028 <HAL_GPIO_Init+0x324>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d013      	beq.n	8000f1a <HAL_GPIO_Init+0x216>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a4d      	ldr	r2, [pc, #308]	; (800102c <HAL_GPIO_Init+0x328>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d00d      	beq.n	8000f16 <HAL_GPIO_Init+0x212>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a4c      	ldr	r2, [pc, #304]	; (8001030 <HAL_GPIO_Init+0x32c>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d007      	beq.n	8000f12 <HAL_GPIO_Init+0x20e>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a4b      	ldr	r2, [pc, #300]	; (8001034 <HAL_GPIO_Init+0x330>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d101      	bne.n	8000f0e <HAL_GPIO_Init+0x20a>
 8000f0a:	2307      	movs	r3, #7
 8000f0c:	e00e      	b.n	8000f2c <HAL_GPIO_Init+0x228>
 8000f0e:	2308      	movs	r3, #8
 8000f10:	e00c      	b.n	8000f2c <HAL_GPIO_Init+0x228>
 8000f12:	2306      	movs	r3, #6
 8000f14:	e00a      	b.n	8000f2c <HAL_GPIO_Init+0x228>
 8000f16:	2305      	movs	r3, #5
 8000f18:	e008      	b.n	8000f2c <HAL_GPIO_Init+0x228>
 8000f1a:	2304      	movs	r3, #4
 8000f1c:	e006      	b.n	8000f2c <HAL_GPIO_Init+0x228>
 8000f1e:	2303      	movs	r3, #3
 8000f20:	e004      	b.n	8000f2c <HAL_GPIO_Init+0x228>
 8000f22:	2302      	movs	r3, #2
 8000f24:	e002      	b.n	8000f2c <HAL_GPIO_Init+0x228>
 8000f26:	2301      	movs	r3, #1
 8000f28:	e000      	b.n	8000f2c <HAL_GPIO_Init+0x228>
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	69fa      	ldr	r2, [r7, #28]
 8000f2e:	f002 0203 	and.w	r2, r2, #3
 8000f32:	0092      	lsls	r2, r2, #2
 8000f34:	4093      	lsls	r3, r2
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f3c:	4935      	ldr	r1, [pc, #212]	; (8001014 <HAL_GPIO_Init+0x310>)
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	089b      	lsrs	r3, r3, #2
 8000f42:	3302      	adds	r3, #2
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f4a:	4b3b      	ldr	r3, [pc, #236]	; (8001038 <HAL_GPIO_Init+0x334>)
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	43db      	mvns	r3, r3
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	4013      	ands	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d003      	beq.n	8000f6e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f6e:	4a32      	ldr	r2, [pc, #200]	; (8001038 <HAL_GPIO_Init+0x334>)
 8000f70:	69bb      	ldr	r3, [r7, #24]
 8000f72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f74:	4b30      	ldr	r3, [pc, #192]	; (8001038 <HAL_GPIO_Init+0x334>)
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	4013      	ands	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d003      	beq.n	8000f98 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f98:	4a27      	ldr	r2, [pc, #156]	; (8001038 <HAL_GPIO_Init+0x334>)
 8000f9a:	69bb      	ldr	r3, [r7, #24]
 8000f9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f9e:	4b26      	ldr	r3, [pc, #152]	; (8001038 <HAL_GPIO_Init+0x334>)
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	43db      	mvns	r3, r3
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	4013      	ands	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d003      	beq.n	8000fc2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fc2:	4a1d      	ldr	r2, [pc, #116]	; (8001038 <HAL_GPIO_Init+0x334>)
 8000fc4:	69bb      	ldr	r3, [r7, #24]
 8000fc6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fc8:	4b1b      	ldr	r3, [pc, #108]	; (8001038 <HAL_GPIO_Init+0x334>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d003      	beq.n	8000fec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fec:	4a12      	ldr	r2, [pc, #72]	; (8001038 <HAL_GPIO_Init+0x334>)
 8000fee:	69bb      	ldr	r3, [r7, #24]
 8000ff0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	61fb      	str	r3, [r7, #28]
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	2b0f      	cmp	r3, #15
 8000ffc:	f67f ae90 	bls.w	8000d20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001000:	bf00      	nop
 8001002:	bf00      	nop
 8001004:	3724      	adds	r7, #36	; 0x24
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	40023800 	.word	0x40023800
 8001014:	40013800 	.word	0x40013800
 8001018:	40020000 	.word	0x40020000
 800101c:	40020400 	.word	0x40020400
 8001020:	40020800 	.word	0x40020800
 8001024:	40020c00 	.word	0x40020c00
 8001028:	40021000 	.word	0x40021000
 800102c:	40021400 	.word	0x40021400
 8001030:	40021800 	.word	0x40021800
 8001034:	40021c00 	.word	0x40021c00
 8001038:	40013c00 	.word	0x40013c00

0800103c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	460b      	mov	r3, r1
 8001046:	807b      	strh	r3, [r7, #2]
 8001048:	4613      	mov	r3, r2
 800104a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800104c:	787b      	ldrb	r3, [r7, #1]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d003      	beq.n	800105a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001052:	887a      	ldrh	r2, [r7, #2]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001058:	e003      	b.n	8001062 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800105a:	887b      	ldrh	r3, [r7, #2]
 800105c:	041a      	lsls	r2, r3, #16
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	619a      	str	r2, [r3, #24]
}
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr

0800106e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800106e:	b480      	push	{r7}
 8001070:	b085      	sub	sp, #20
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
 8001076:	460b      	mov	r3, r1
 8001078:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	695b      	ldr	r3, [r3, #20]
 800107e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001080:	887a      	ldrh	r2, [r7, #2]
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	4013      	ands	r3, r2
 8001086:	041a      	lsls	r2, r3, #16
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	43d9      	mvns	r1, r3
 800108c:	887b      	ldrh	r3, [r7, #2]
 800108e:	400b      	ands	r3, r1
 8001090:	431a      	orrs	r2, r3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	619a      	str	r2, [r3, #24]
}
 8001096:	bf00      	nop
 8001098:	3714      	adds	r7, #20
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr

080010a2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80010a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010a4:	b08f      	sub	sp, #60	; 0x3c
 80010a6:	af0a      	add	r7, sp, #40	; 0x28
 80010a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d101      	bne.n	80010b4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80010b0:	2301      	movs	r3, #1
 80010b2:	e10f      	b.n	80012d4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d106      	bne.n	80010d4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2200      	movs	r2, #0
 80010ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f008 fda2 	bl	8009c18 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2203      	movs	r2, #3
 80010d8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d102      	bne.n	80010ee <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2200      	movs	r2, #0
 80010ec:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4618      	mov	r0, r3
 80010f4:	f002 facb 	bl	800368e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	603b      	str	r3, [r7, #0]
 80010fe:	687e      	ldr	r6, [r7, #4]
 8001100:	466d      	mov	r5, sp
 8001102:	f106 0410 	add.w	r4, r6, #16
 8001106:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001108:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800110a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800110c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800110e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001112:	e885 0003 	stmia.w	r5, {r0, r1}
 8001116:	1d33      	adds	r3, r6, #4
 8001118:	cb0e      	ldmia	r3, {r1, r2, r3}
 800111a:	6838      	ldr	r0, [r7, #0]
 800111c:	f002 f9a2 	bl	8003464 <USB_CoreInit>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d005      	beq.n	8001132 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2202      	movs	r2, #2
 800112a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e0d0      	b.n	80012d4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	2100      	movs	r1, #0
 8001138:	4618      	mov	r0, r3
 800113a:	f002 fab9 	bl	80036b0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800113e:	2300      	movs	r3, #0
 8001140:	73fb      	strb	r3, [r7, #15]
 8001142:	e04a      	b.n	80011da <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001144:	7bfa      	ldrb	r2, [r7, #15]
 8001146:	6879      	ldr	r1, [r7, #4]
 8001148:	4613      	mov	r3, r2
 800114a:	00db      	lsls	r3, r3, #3
 800114c:	4413      	add	r3, r2
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	440b      	add	r3, r1
 8001152:	333d      	adds	r3, #61	; 0x3d
 8001154:	2201      	movs	r2, #1
 8001156:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001158:	7bfa      	ldrb	r2, [r7, #15]
 800115a:	6879      	ldr	r1, [r7, #4]
 800115c:	4613      	mov	r3, r2
 800115e:	00db      	lsls	r3, r3, #3
 8001160:	4413      	add	r3, r2
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	440b      	add	r3, r1
 8001166:	333c      	adds	r3, #60	; 0x3c
 8001168:	7bfa      	ldrb	r2, [r7, #15]
 800116a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800116c:	7bfa      	ldrb	r2, [r7, #15]
 800116e:	7bfb      	ldrb	r3, [r7, #15]
 8001170:	b298      	uxth	r0, r3
 8001172:	6879      	ldr	r1, [r7, #4]
 8001174:	4613      	mov	r3, r2
 8001176:	00db      	lsls	r3, r3, #3
 8001178:	4413      	add	r3, r2
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	440b      	add	r3, r1
 800117e:	3344      	adds	r3, #68	; 0x44
 8001180:	4602      	mov	r2, r0
 8001182:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001184:	7bfa      	ldrb	r2, [r7, #15]
 8001186:	6879      	ldr	r1, [r7, #4]
 8001188:	4613      	mov	r3, r2
 800118a:	00db      	lsls	r3, r3, #3
 800118c:	4413      	add	r3, r2
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	440b      	add	r3, r1
 8001192:	3340      	adds	r3, #64	; 0x40
 8001194:	2200      	movs	r2, #0
 8001196:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001198:	7bfa      	ldrb	r2, [r7, #15]
 800119a:	6879      	ldr	r1, [r7, #4]
 800119c:	4613      	mov	r3, r2
 800119e:	00db      	lsls	r3, r3, #3
 80011a0:	4413      	add	r3, r2
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	440b      	add	r3, r1
 80011a6:	3348      	adds	r3, #72	; 0x48
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80011ac:	7bfa      	ldrb	r2, [r7, #15]
 80011ae:	6879      	ldr	r1, [r7, #4]
 80011b0:	4613      	mov	r3, r2
 80011b2:	00db      	lsls	r3, r3, #3
 80011b4:	4413      	add	r3, r2
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	440b      	add	r3, r1
 80011ba:	334c      	adds	r3, #76	; 0x4c
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80011c0:	7bfa      	ldrb	r2, [r7, #15]
 80011c2:	6879      	ldr	r1, [r7, #4]
 80011c4:	4613      	mov	r3, r2
 80011c6:	00db      	lsls	r3, r3, #3
 80011c8:	4413      	add	r3, r2
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	440b      	add	r3, r1
 80011ce:	3354      	adds	r3, #84	; 0x54
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011d4:	7bfb      	ldrb	r3, [r7, #15]
 80011d6:	3301      	adds	r3, #1
 80011d8:	73fb      	strb	r3, [r7, #15]
 80011da:	7bfa      	ldrb	r2, [r7, #15]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d3af      	bcc.n	8001144 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011e4:	2300      	movs	r3, #0
 80011e6:	73fb      	strb	r3, [r7, #15]
 80011e8:	e044      	b.n	8001274 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80011ea:	7bfa      	ldrb	r2, [r7, #15]
 80011ec:	6879      	ldr	r1, [r7, #4]
 80011ee:	4613      	mov	r3, r2
 80011f0:	00db      	lsls	r3, r3, #3
 80011f2:	4413      	add	r3, r2
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	440b      	add	r3, r1
 80011f8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80011fc:	2200      	movs	r2, #0
 80011fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001200:	7bfa      	ldrb	r2, [r7, #15]
 8001202:	6879      	ldr	r1, [r7, #4]
 8001204:	4613      	mov	r3, r2
 8001206:	00db      	lsls	r3, r3, #3
 8001208:	4413      	add	r3, r2
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	440b      	add	r3, r1
 800120e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001212:	7bfa      	ldrb	r2, [r7, #15]
 8001214:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001216:	7bfa      	ldrb	r2, [r7, #15]
 8001218:	6879      	ldr	r1, [r7, #4]
 800121a:	4613      	mov	r3, r2
 800121c:	00db      	lsls	r3, r3, #3
 800121e:	4413      	add	r3, r2
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	440b      	add	r3, r1
 8001224:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001228:	2200      	movs	r2, #0
 800122a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800122c:	7bfa      	ldrb	r2, [r7, #15]
 800122e:	6879      	ldr	r1, [r7, #4]
 8001230:	4613      	mov	r3, r2
 8001232:	00db      	lsls	r3, r3, #3
 8001234:	4413      	add	r3, r2
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	440b      	add	r3, r1
 800123a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001242:	7bfa      	ldrb	r2, [r7, #15]
 8001244:	6879      	ldr	r1, [r7, #4]
 8001246:	4613      	mov	r3, r2
 8001248:	00db      	lsls	r3, r3, #3
 800124a:	4413      	add	r3, r2
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	440b      	add	r3, r1
 8001250:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001258:	7bfa      	ldrb	r2, [r7, #15]
 800125a:	6879      	ldr	r1, [r7, #4]
 800125c:	4613      	mov	r3, r2
 800125e:	00db      	lsls	r3, r3, #3
 8001260:	4413      	add	r3, r2
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	440b      	add	r3, r1
 8001266:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800126e:	7bfb      	ldrb	r3, [r7, #15]
 8001270:	3301      	adds	r3, #1
 8001272:	73fb      	strb	r3, [r7, #15]
 8001274:	7bfa      	ldrb	r2, [r7, #15]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	429a      	cmp	r2, r3
 800127c:	d3b5      	bcc.n	80011ea <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	603b      	str	r3, [r7, #0]
 8001284:	687e      	ldr	r6, [r7, #4]
 8001286:	466d      	mov	r5, sp
 8001288:	f106 0410 	add.w	r4, r6, #16
 800128c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800128e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001290:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001292:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001294:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001298:	e885 0003 	stmia.w	r5, {r0, r1}
 800129c:	1d33      	adds	r3, r6, #4
 800129e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012a0:	6838      	ldr	r0, [r7, #0]
 80012a2:	f002 fa51 	bl	8003748 <USB_DevInit>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d005      	beq.n	80012b8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2202      	movs	r2, #2
 80012b0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80012b4:	2301      	movs	r3, #1
 80012b6:	e00d      	b.n	80012d4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2200      	movs	r2, #0
 80012bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2201      	movs	r2, #1
 80012c4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f003 fba0 	bl	8004a12 <USB_DevDisconnect>

  return HAL_OK;
 80012d2:	2300      	movs	r3, #0
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3714      	adds	r7, #20
 80012d8:	46bd      	mov	sp, r7
 80012da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080012dc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d101      	bne.n	80012f8 <HAL_PCD_Start+0x1c>
 80012f4:	2302      	movs	r3, #2
 80012f6:	e020      	b.n	800133a <HAL_PCD_Start+0x5e>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2201      	movs	r2, #1
 80012fc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001304:	2b01      	cmp	r3, #1
 8001306:	d109      	bne.n	800131c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800130c:	2b01      	cmp	r3, #1
 800130e:	d005      	beq.n	800131c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001314:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4618      	mov	r0, r3
 8001322:	f002 f9a3 	bl	800366c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4618      	mov	r0, r3
 800132c:	f003 fb50 	bl	80049d0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2200      	movs	r2, #0
 8001334:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001342:	b590      	push	{r4, r7, lr}
 8001344:	b08d      	sub	sp, #52	; 0x34
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001350:	6a3b      	ldr	r3, [r7, #32]
 8001352:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4618      	mov	r0, r3
 800135a:	f003 fc0e 	bl	8004b7a <USB_GetMode>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	f040 848a 	bne.w	8001c7a <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4618      	mov	r0, r3
 800136c:	f003 fb72 	bl	8004a54 <USB_ReadInterrupts>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	f000 8480 	beq.w	8001c78 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	0a1b      	lsrs	r3, r3, #8
 8001382:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4618      	mov	r0, r3
 8001392:	f003 fb5f 	bl	8004a54 <USB_ReadInterrupts>
 8001396:	4603      	mov	r3, r0
 8001398:	f003 0302 	and.w	r3, r3, #2
 800139c:	2b02      	cmp	r3, #2
 800139e:	d107      	bne.n	80013b0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	695a      	ldr	r2, [r3, #20]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f002 0202 	and.w	r2, r2, #2
 80013ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f003 fb4d 	bl	8004a54 <USB_ReadInterrupts>
 80013ba:	4603      	mov	r3, r0
 80013bc:	f003 0310 	and.w	r3, r3, #16
 80013c0:	2b10      	cmp	r3, #16
 80013c2:	d161      	bne.n	8001488 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	699a      	ldr	r2, [r3, #24]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f022 0210 	bic.w	r2, r2, #16
 80013d2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80013d4:	6a3b      	ldr	r3, [r7, #32]
 80013d6:	6a1b      	ldr	r3, [r3, #32]
 80013d8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	f003 020f 	and.w	r2, r3, #15
 80013e0:	4613      	mov	r3, r2
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	4413      	add	r3, r2
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	4413      	add	r3, r2
 80013f0:	3304      	adds	r3, #4
 80013f2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	0c5b      	lsrs	r3, r3, #17
 80013f8:	f003 030f 	and.w	r3, r3, #15
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d124      	bne.n	800144a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001406:	4013      	ands	r3, r2
 8001408:	2b00      	cmp	r3, #0
 800140a:	d035      	beq.n	8001478 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	091b      	lsrs	r3, r3, #4
 8001414:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001416:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800141a:	b29b      	uxth	r3, r3
 800141c:	461a      	mov	r2, r3
 800141e:	6a38      	ldr	r0, [r7, #32]
 8001420:	f003 f984 	bl	800472c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	691a      	ldr	r2, [r3, #16]
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	091b      	lsrs	r3, r3, #4
 800142c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001430:	441a      	add	r2, r3
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	6a1a      	ldr	r2, [r3, #32]
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	091b      	lsrs	r3, r3, #4
 800143e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001442:	441a      	add	r2, r3
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	621a      	str	r2, [r3, #32]
 8001448:	e016      	b.n	8001478 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	0c5b      	lsrs	r3, r3, #17
 800144e:	f003 030f 	and.w	r3, r3, #15
 8001452:	2b06      	cmp	r3, #6
 8001454:	d110      	bne.n	8001478 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800145c:	2208      	movs	r2, #8
 800145e:	4619      	mov	r1, r3
 8001460:	6a38      	ldr	r0, [r7, #32]
 8001462:	f003 f963 	bl	800472c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	6a1a      	ldr	r2, [r3, #32]
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	091b      	lsrs	r3, r3, #4
 800146e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001472:	441a      	add	r2, r3
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	699a      	ldr	r2, [r3, #24]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f042 0210 	orr.w	r2, r2, #16
 8001486:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4618      	mov	r0, r3
 800148e:	f003 fae1 	bl	8004a54 <USB_ReadInterrupts>
 8001492:	4603      	mov	r3, r0
 8001494:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001498:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800149c:	f040 80a7 	bne.w	80015ee <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80014a0:	2300      	movs	r3, #0
 80014a2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f003 fae6 	bl	8004a7a <USB_ReadDevAllOutEpInterrupt>
 80014ae:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80014b0:	e099      	b.n	80015e6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80014b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014b4:	f003 0301 	and.w	r3, r3, #1
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	f000 808e 	beq.w	80015da <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014c4:	b2d2      	uxtb	r2, r2
 80014c6:	4611      	mov	r1, r2
 80014c8:	4618      	mov	r0, r3
 80014ca:	f003 fb0a 	bl	8004ae2 <USB_ReadDevOutEPInterrupt>
 80014ce:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d00c      	beq.n	80014f4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80014da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014dc:	015a      	lsls	r2, r3, #5
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	4413      	add	r3, r2
 80014e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014e6:	461a      	mov	r2, r3
 80014e8:	2301      	movs	r3, #1
 80014ea:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80014ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f000 fec2 	bl	8002278 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	f003 0308 	and.w	r3, r3, #8
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d00c      	beq.n	8001518 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80014fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001500:	015a      	lsls	r2, r3, #5
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	4413      	add	r3, r2
 8001506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800150a:	461a      	mov	r2, r3
 800150c:	2308      	movs	r3, #8
 800150e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001510:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f000 ff98 	bl	8002448 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	f003 0310 	and.w	r3, r3, #16
 800151e:	2b00      	cmp	r3, #0
 8001520:	d008      	beq.n	8001534 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001524:	015a      	lsls	r2, r3, #5
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	4413      	add	r3, r2
 800152a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800152e:	461a      	mov	r2, r3
 8001530:	2310      	movs	r3, #16
 8001532:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d030      	beq.n	80015a0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800153e:	6a3b      	ldr	r3, [r7, #32]
 8001540:	695b      	ldr	r3, [r3, #20]
 8001542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001546:	2b80      	cmp	r3, #128	; 0x80
 8001548:	d109      	bne.n	800155e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	69fa      	ldr	r2, [r7, #28]
 8001554:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001558:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800155c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800155e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001560:	4613      	mov	r3, r2
 8001562:	00db      	lsls	r3, r3, #3
 8001564:	4413      	add	r3, r2
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	4413      	add	r3, r2
 8001570:	3304      	adds	r3, #4
 8001572:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	78db      	ldrb	r3, [r3, #3]
 8001578:	2b01      	cmp	r3, #1
 800157a:	d108      	bne.n	800158e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	2200      	movs	r2, #0
 8001580:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001584:	b2db      	uxtb	r3, r3
 8001586:	4619      	mov	r1, r3
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f008 fc4b 	bl	8009e24 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800158e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001590:	015a      	lsls	r2, r3, #5
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	4413      	add	r3, r2
 8001596:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800159a:	461a      	mov	r2, r3
 800159c:	2302      	movs	r3, #2
 800159e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	f003 0320 	and.w	r3, r3, #32
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d008      	beq.n	80015bc <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80015aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ac:	015a      	lsls	r2, r3, #5
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	4413      	add	r3, r2
 80015b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015b6:	461a      	mov	r2, r3
 80015b8:	2320      	movs	r3, #32
 80015ba:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d009      	beq.n	80015da <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80015c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c8:	015a      	lsls	r2, r3, #5
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	4413      	add	r3, r2
 80015ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015d2:	461a      	mov	r2, r3
 80015d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015d8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80015da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015dc:	3301      	adds	r3, #1
 80015de:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80015e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015e2:	085b      	lsrs	r3, r3, #1
 80015e4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80015e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	f47f af62 	bne.w	80014b2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f003 fa2e 	bl	8004a54 <USB_ReadInterrupts>
 80015f8:	4603      	mov	r3, r0
 80015fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015fe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001602:	f040 80db 	bne.w	80017bc <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4618      	mov	r0, r3
 800160c:	f003 fa4f 	bl	8004aae <USB_ReadDevAllInEpInterrupt>
 8001610:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001612:	2300      	movs	r3, #0
 8001614:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001616:	e0cd      	b.n	80017b4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	2b00      	cmp	r3, #0
 8001620:	f000 80c2 	beq.w	80017a8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800162a:	b2d2      	uxtb	r2, r2
 800162c:	4611      	mov	r1, r2
 800162e:	4618      	mov	r0, r3
 8001630:	f003 fa75 	bl	8004b1e <USB_ReadDevInEPInterrupt>
 8001634:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	f003 0301 	and.w	r3, r3, #1
 800163c:	2b00      	cmp	r3, #0
 800163e:	d057      	beq.n	80016f0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001642:	f003 030f 	and.w	r3, r3, #15
 8001646:	2201      	movs	r2, #1
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001654:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	43db      	mvns	r3, r3
 800165a:	69f9      	ldr	r1, [r7, #28]
 800165c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001660:	4013      	ands	r3, r2
 8001662:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001666:	015a      	lsls	r2, r3, #5
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	4413      	add	r3, r2
 800166c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001670:	461a      	mov	r2, r3
 8001672:	2301      	movs	r3, #1
 8001674:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	691b      	ldr	r3, [r3, #16]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d132      	bne.n	80016e4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800167e:	6879      	ldr	r1, [r7, #4]
 8001680:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001682:	4613      	mov	r3, r2
 8001684:	00db      	lsls	r3, r3, #3
 8001686:	4413      	add	r3, r2
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	440b      	add	r3, r1
 800168c:	334c      	adds	r3, #76	; 0x4c
 800168e:	6819      	ldr	r1, [r3, #0]
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001694:	4613      	mov	r3, r2
 8001696:	00db      	lsls	r3, r3, #3
 8001698:	4413      	add	r3, r2
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	4403      	add	r3, r0
 800169e:	3348      	adds	r3, #72	; 0x48
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4419      	add	r1, r3
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016a8:	4613      	mov	r3, r2
 80016aa:	00db      	lsls	r3, r3, #3
 80016ac:	4413      	add	r3, r2
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	4403      	add	r3, r0
 80016b2:	334c      	adds	r3, #76	; 0x4c
 80016b4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80016b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d113      	bne.n	80016e4 <HAL_PCD_IRQHandler+0x3a2>
 80016bc:	6879      	ldr	r1, [r7, #4]
 80016be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016c0:	4613      	mov	r3, r2
 80016c2:	00db      	lsls	r3, r3, #3
 80016c4:	4413      	add	r3, r2
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	440b      	add	r3, r1
 80016ca:	3354      	adds	r3, #84	; 0x54
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d108      	bne.n	80016e4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6818      	ldr	r0, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80016dc:	461a      	mov	r2, r3
 80016de:	2101      	movs	r1, #1
 80016e0:	f003 fa7c 	bl	8004bdc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80016e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	4619      	mov	r1, r3
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f008 fb15 	bl	8009d1a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	f003 0308 	and.w	r3, r3, #8
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d008      	beq.n	800170c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80016fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fc:	015a      	lsls	r2, r3, #5
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	4413      	add	r3, r2
 8001702:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001706:	461a      	mov	r2, r3
 8001708:	2308      	movs	r3, #8
 800170a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	f003 0310 	and.w	r3, r3, #16
 8001712:	2b00      	cmp	r3, #0
 8001714:	d008      	beq.n	8001728 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001718:	015a      	lsls	r2, r3, #5
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	4413      	add	r3, r2
 800171e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001722:	461a      	mov	r2, r3
 8001724:	2310      	movs	r3, #16
 8001726:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800172e:	2b00      	cmp	r3, #0
 8001730:	d008      	beq.n	8001744 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001734:	015a      	lsls	r2, r3, #5
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	4413      	add	r3, r2
 800173a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800173e:	461a      	mov	r2, r3
 8001740:	2340      	movs	r3, #64	; 0x40
 8001742:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	2b00      	cmp	r3, #0
 800174c:	d023      	beq.n	8001796 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800174e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001750:	6a38      	ldr	r0, [r7, #32]
 8001752:	f002 f95d 	bl	8003a10 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001756:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001758:	4613      	mov	r3, r2
 800175a:	00db      	lsls	r3, r3, #3
 800175c:	4413      	add	r3, r2
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	3338      	adds	r3, #56	; 0x38
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	4413      	add	r3, r2
 8001766:	3304      	adds	r3, #4
 8001768:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	78db      	ldrb	r3, [r3, #3]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d108      	bne.n	8001784 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	2200      	movs	r2, #0
 8001776:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177a:	b2db      	uxtb	r3, r3
 800177c:	4619      	mov	r1, r3
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f008 fb62 	bl	8009e48 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001786:	015a      	lsls	r2, r3, #5
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	4413      	add	r3, r2
 800178c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001790:	461a      	mov	r2, r3
 8001792:	2302      	movs	r3, #2
 8001794:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800179c:	2b00      	cmp	r3, #0
 800179e:	d003      	beq.n	80017a8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80017a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f000 fcdb 	bl	800215e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80017a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017aa:	3301      	adds	r3, #1
 80017ac:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80017ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017b0:	085b      	lsrs	r3, r3, #1
 80017b2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80017b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	f47f af2e 	bne.w	8001618 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f003 f947 	bl	8004a54 <USB_ReadInterrupts>
 80017c6:	4603      	mov	r3, r0
 80017c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80017cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80017d0:	d122      	bne.n	8001818 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	69fa      	ldr	r2, [r7, #28]
 80017dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017e0:	f023 0301 	bic.w	r3, r3, #1
 80017e4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d108      	bne.n	8001802 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2200      	movs	r2, #0
 80017f4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80017f8:	2100      	movs	r1, #0
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f000 fec2 	bl	8002584 <HAL_PCDEx_LPM_Callback>
 8001800:	e002      	b.n	8001808 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f008 fb00 	bl	8009e08 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	695a      	ldr	r2, [r3, #20]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001816:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4618      	mov	r0, r3
 800181e:	f003 f919 	bl	8004a54 <USB_ReadInterrupts>
 8001822:	4603      	mov	r3, r0
 8001824:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001828:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800182c:	d112      	bne.n	8001854 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	2b01      	cmp	r3, #1
 800183c:	d102      	bne.n	8001844 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f008 fabc 	bl	8009dbc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	695a      	ldr	r2, [r3, #20]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001852:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4618      	mov	r0, r3
 800185a:	f003 f8fb 	bl	8004a54 <USB_ReadInterrupts>
 800185e:	4603      	mov	r3, r0
 8001860:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001864:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001868:	f040 80b7 	bne.w	80019da <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	69fa      	ldr	r2, [r7, #28]
 8001876:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800187a:	f023 0301 	bic.w	r3, r3, #1
 800187e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2110      	movs	r1, #16
 8001886:	4618      	mov	r0, r3
 8001888:	f002 f8c2 	bl	8003a10 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800188c:	2300      	movs	r3, #0
 800188e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001890:	e046      	b.n	8001920 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001894:	015a      	lsls	r2, r3, #5
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	4413      	add	r3, r2
 800189a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800189e:	461a      	mov	r2, r3
 80018a0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80018a4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80018a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018a8:	015a      	lsls	r2, r3, #5
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	4413      	add	r3, r2
 80018ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018b6:	0151      	lsls	r1, r2, #5
 80018b8:	69fa      	ldr	r2, [r7, #28]
 80018ba:	440a      	add	r2, r1
 80018bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80018c0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80018c4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80018c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018c8:	015a      	lsls	r2, r3, #5
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	4413      	add	r3, r2
 80018ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018d2:	461a      	mov	r2, r3
 80018d4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80018d8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80018da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018dc:	015a      	lsls	r2, r3, #5
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	4413      	add	r3, r2
 80018e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018ea:	0151      	lsls	r1, r2, #5
 80018ec:	69fa      	ldr	r2, [r7, #28]
 80018ee:	440a      	add	r2, r1
 80018f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80018f4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80018f8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80018fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018fc:	015a      	lsls	r2, r3, #5
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	4413      	add	r3, r2
 8001902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800190a:	0151      	lsls	r1, r2, #5
 800190c:	69fa      	ldr	r2, [r7, #28]
 800190e:	440a      	add	r2, r1
 8001910:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001914:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001918:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800191a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800191c:	3301      	adds	r3, #1
 800191e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001926:	429a      	cmp	r2, r3
 8001928:	d3b3      	bcc.n	8001892 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001930:	69db      	ldr	r3, [r3, #28]
 8001932:	69fa      	ldr	r2, [r7, #28]
 8001934:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001938:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800193c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001942:	2b00      	cmp	r3, #0
 8001944:	d016      	beq.n	8001974 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800194c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001950:	69fa      	ldr	r2, [r7, #28]
 8001952:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001956:	f043 030b 	orr.w	r3, r3, #11
 800195a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001966:	69fa      	ldr	r2, [r7, #28]
 8001968:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800196c:	f043 030b 	orr.w	r3, r3, #11
 8001970:	6453      	str	r3, [r2, #68]	; 0x44
 8001972:	e015      	b.n	80019a0 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800197a:	695b      	ldr	r3, [r3, #20]
 800197c:	69fa      	ldr	r2, [r7, #28]
 800197e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001982:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001986:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800198a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001992:	691b      	ldr	r3, [r3, #16]
 8001994:	69fa      	ldr	r2, [r7, #28]
 8001996:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800199a:	f043 030b 	orr.w	r3, r3, #11
 800199e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	69fa      	ldr	r2, [r7, #28]
 80019aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019ae:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80019b2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6818      	ldr	r0, [r3, #0]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	691b      	ldr	r3, [r3, #16]
 80019bc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80019c4:	461a      	mov	r2, r3
 80019c6:	f003 f909 	bl	8004bdc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	695a      	ldr	r2, [r3, #20]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80019d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4618      	mov	r0, r3
 80019e0:	f003 f838 	bl	8004a54 <USB_ReadInterrupts>
 80019e4:	4603      	mov	r3, r0
 80019e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019ee:	d124      	bne.n	8001a3a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f003 f8ce 	bl	8004b96 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f002 f883 	bl	8003b0a <USB_GetDevSpeed>
 8001a04:	4603      	mov	r3, r0
 8001a06:	461a      	mov	r2, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681c      	ldr	r4, [r3, #0]
 8001a10:	f001 fa28 	bl	8002e64 <HAL_RCC_GetHCLKFreq>
 8001a14:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	4620      	mov	r0, r4
 8001a20:	f001 fd82 	bl	8003528 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f008 f9a0 	bl	8009d6a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	695a      	ldr	r2, [r3, #20]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001a38:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f003 f808 	bl	8004a54 <USB_ReadInterrupts>
 8001a44:	4603      	mov	r3, r0
 8001a46:	f003 0308 	and.w	r3, r3, #8
 8001a4a:	2b08      	cmp	r3, #8
 8001a4c:	d10a      	bne.n	8001a64 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f008 f97d 	bl	8009d4e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	695a      	ldr	r2, [r3, #20]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f002 0208 	and.w	r2, r2, #8
 8001a62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f002 fff3 	bl	8004a54 <USB_ReadInterrupts>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a74:	2b80      	cmp	r3, #128	; 0x80
 8001a76:	d122      	bne.n	8001abe <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001a78:	6a3b      	ldr	r3, [r7, #32]
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001a80:	6a3b      	ldr	r3, [r7, #32]
 8001a82:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a84:	2301      	movs	r3, #1
 8001a86:	627b      	str	r3, [r7, #36]	; 0x24
 8001a88:	e014      	b.n	8001ab4 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001a8a:	6879      	ldr	r1, [r7, #4]
 8001a8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a8e:	4613      	mov	r3, r2
 8001a90:	00db      	lsls	r3, r3, #3
 8001a92:	4413      	add	r3, r2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	440b      	add	r3, r1
 8001a98:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d105      	bne.n	8001aae <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f000 fb27 	bl	80020fc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d3e5      	bcc.n	8001a8a <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f002 ffc6 	bl	8004a54 <USB_ReadInterrupts>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ace:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ad2:	d13b      	bne.n	8001b4c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ad8:	e02b      	b.n	8001b32 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001adc:	015a      	lsls	r2, r3, #5
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001aea:	6879      	ldr	r1, [r7, #4]
 8001aec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aee:	4613      	mov	r3, r2
 8001af0:	00db      	lsls	r3, r3, #3
 8001af2:	4413      	add	r3, r2
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	440b      	add	r3, r1
 8001af8:	3340      	adds	r3, #64	; 0x40
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d115      	bne.n	8001b2c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001b00:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	da12      	bge.n	8001b2c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001b06:	6879      	ldr	r1, [r7, #4]
 8001b08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	00db      	lsls	r3, r3, #3
 8001b0e:	4413      	add	r3, r2
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	440b      	add	r3, r1
 8001b14:	333f      	adds	r3, #63	; 0x3f
 8001b16:	2201      	movs	r2, #1
 8001b18:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	4619      	mov	r1, r3
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f000 fae8 	bl	80020fc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2e:	3301      	adds	r3, #1
 8001b30:	627b      	str	r3, [r7, #36]	; 0x24
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d3ce      	bcc.n	8001ada <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	695a      	ldr	r2, [r3, #20]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001b4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f002 ff7f 	bl	8004a54 <USB_ReadInterrupts>
 8001b56:	4603      	mov	r3, r0
 8001b58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b60:	d155      	bne.n	8001c0e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b62:	2301      	movs	r3, #1
 8001b64:	627b      	str	r3, [r7, #36]	; 0x24
 8001b66:	e045      	b.n	8001bf4 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6a:	015a      	lsls	r2, r3, #5
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	4413      	add	r3, r2
 8001b70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b78:	6879      	ldr	r1, [r7, #4]
 8001b7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	00db      	lsls	r3, r3, #3
 8001b80:	4413      	add	r3, r2
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	440b      	add	r3, r1
 8001b86:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d12e      	bne.n	8001bee <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001b90:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	da2b      	bge.n	8001bee <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001ba2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d121      	bne.n	8001bee <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001baa:	6879      	ldr	r1, [r7, #4]
 8001bac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bae:	4613      	mov	r3, r2
 8001bb0:	00db      	lsls	r3, r3, #3
 8001bb2:	4413      	add	r3, r2
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	440b      	add	r3, r1
 8001bb8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001bc0:	6a3b      	ldr	r3, [r7, #32]
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001bc8:	6a3b      	ldr	r3, [r7, #32]
 8001bca:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001bcc:	6a3b      	ldr	r3, [r7, #32]
 8001bce:	695b      	ldr	r3, [r3, #20]
 8001bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d10a      	bne.n	8001bee <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	69fa      	ldr	r2, [r7, #28]
 8001be2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001be6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bea:	6053      	str	r3, [r2, #4]
            break;
 8001bec:	e007      	b.n	8001bfe <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	627b      	str	r3, [r7, #36]	; 0x24
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d3b4      	bcc.n	8001b68 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	695a      	ldr	r2, [r3, #20]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001c0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f002 ff1e 	bl	8004a54 <USB_ReadInterrupts>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001c1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c22:	d10a      	bne.n	8001c3a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f008 f921 	bl	8009e6c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	695a      	ldr	r2, [r3, #20]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001c38:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f002 ff08 	bl	8004a54 <USB_ReadInterrupts>
 8001c44:	4603      	mov	r3, r0
 8001c46:	f003 0304 	and.w	r3, r3, #4
 8001c4a:	2b04      	cmp	r3, #4
 8001c4c:	d115      	bne.n	8001c7a <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	f003 0304 	and.w	r3, r3, #4
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d002      	beq.n	8001c66 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f008 f911 	bl	8009e88 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	6859      	ldr	r1, [r3, #4]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	430a      	orrs	r2, r1
 8001c74:	605a      	str	r2, [r3, #4]
 8001c76:	e000      	b.n	8001c7a <HAL_PCD_IRQHandler+0x938>
      return;
 8001c78:	bf00      	nop
    }
  }
}
 8001c7a:	3734      	adds	r7, #52	; 0x34
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd90      	pop	{r4, r7, pc}

08001c80 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	460b      	mov	r3, r1
 8001c8a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d101      	bne.n	8001c9a <HAL_PCD_SetAddress+0x1a>
 8001c96:	2302      	movs	r3, #2
 8001c98:	e013      	b.n	8001cc2 <HAL_PCD_SetAddress+0x42>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	78fa      	ldrb	r2, [r7, #3]
 8001ca6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	78fa      	ldrb	r2, [r7, #3]
 8001cb0:	4611      	mov	r1, r2
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f002 fe66 	bl	8004984 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b084      	sub	sp, #16
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
 8001cd2:	4608      	mov	r0, r1
 8001cd4:	4611      	mov	r1, r2
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	4603      	mov	r3, r0
 8001cda:	70fb      	strb	r3, [r7, #3]
 8001cdc:	460b      	mov	r3, r1
 8001cde:	803b      	strh	r3, [r7, #0]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ce8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	da0f      	bge.n	8001d10 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cf0:	78fb      	ldrb	r3, [r7, #3]
 8001cf2:	f003 020f 	and.w	r2, r3, #15
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	00db      	lsls	r3, r3, #3
 8001cfa:	4413      	add	r3, r2
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	3338      	adds	r3, #56	; 0x38
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	4413      	add	r3, r2
 8001d04:	3304      	adds	r3, #4
 8001d06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	705a      	strb	r2, [r3, #1]
 8001d0e:	e00f      	b.n	8001d30 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d10:	78fb      	ldrb	r3, [r7, #3]
 8001d12:	f003 020f 	and.w	r2, r3, #15
 8001d16:	4613      	mov	r3, r2
 8001d18:	00db      	lsls	r3, r3, #3
 8001d1a:	4413      	add	r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	4413      	add	r3, r2
 8001d26:	3304      	adds	r3, #4
 8001d28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001d30:	78fb      	ldrb	r3, [r7, #3]
 8001d32:	f003 030f 	and.w	r3, r3, #15
 8001d36:	b2da      	uxtb	r2, r3
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001d3c:	883a      	ldrh	r2, [r7, #0]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	78ba      	ldrb	r2, [r7, #2]
 8001d46:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	785b      	ldrb	r3, [r3, #1]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d004      	beq.n	8001d5a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	b29a      	uxth	r2, r3
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001d5a:	78bb      	ldrb	r3, [r7, #2]
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d102      	bne.n	8001d66 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2200      	movs	r2, #0
 8001d64:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d101      	bne.n	8001d74 <HAL_PCD_EP_Open+0xaa>
 8001d70:	2302      	movs	r3, #2
 8001d72:	e00e      	b.n	8001d92 <HAL_PCD_EP_Open+0xc8>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	68f9      	ldr	r1, [r7, #12]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f001 fee6 	bl	8003b54 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001d90:	7afb      	ldrb	r3, [r7, #11]
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3710      	adds	r7, #16
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b084      	sub	sp, #16
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
 8001da2:	460b      	mov	r3, r1
 8001da4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001da6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	da0f      	bge.n	8001dce <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dae:	78fb      	ldrb	r3, [r7, #3]
 8001db0:	f003 020f 	and.w	r2, r3, #15
 8001db4:	4613      	mov	r3, r2
 8001db6:	00db      	lsls	r3, r3, #3
 8001db8:	4413      	add	r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	3338      	adds	r3, #56	; 0x38
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	3304      	adds	r3, #4
 8001dc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	705a      	strb	r2, [r3, #1]
 8001dcc:	e00f      	b.n	8001dee <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dce:	78fb      	ldrb	r3, [r7, #3]
 8001dd0:	f003 020f 	and.w	r2, r3, #15
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	00db      	lsls	r3, r3, #3
 8001dd8:	4413      	add	r3, r2
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	4413      	add	r3, r2
 8001de4:	3304      	adds	r3, #4
 8001de6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2200      	movs	r2, #0
 8001dec:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001dee:	78fb      	ldrb	r3, [r7, #3]
 8001df0:	f003 030f 	and.w	r3, r3, #15
 8001df4:	b2da      	uxtb	r2, r3
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d101      	bne.n	8001e08 <HAL_PCD_EP_Close+0x6e>
 8001e04:	2302      	movs	r3, #2
 8001e06:	e00e      	b.n	8001e26 <HAL_PCD_EP_Close+0x8c>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68f9      	ldr	r1, [r7, #12]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f001 ff24 	bl	8003c64 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3710      	adds	r7, #16
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b086      	sub	sp, #24
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	60f8      	str	r0, [r7, #12]
 8001e36:	607a      	str	r2, [r7, #4]
 8001e38:	603b      	str	r3, [r7, #0]
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e3e:	7afb      	ldrb	r3, [r7, #11]
 8001e40:	f003 020f 	and.w	r2, r3, #15
 8001e44:	4613      	mov	r3, r2
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	4413      	add	r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e50:	68fa      	ldr	r2, [r7, #12]
 8001e52:	4413      	add	r3, r2
 8001e54:	3304      	adds	r3, #4
 8001e56:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	683a      	ldr	r2, [r7, #0]
 8001e62:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	2200      	movs	r2, #0
 8001e68:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e70:	7afb      	ldrb	r3, [r7, #11]
 8001e72:	f003 030f 	and.w	r3, r3, #15
 8001e76:	b2da      	uxtb	r2, r3
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	691b      	ldr	r3, [r3, #16]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d102      	bne.n	8001e8a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e8a:	7afb      	ldrb	r3, [r7, #11]
 8001e8c:	f003 030f 	and.w	r3, r3, #15
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d109      	bne.n	8001ea8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6818      	ldr	r0, [r3, #0]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	691b      	ldr	r3, [r3, #16]
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	6979      	ldr	r1, [r7, #20]
 8001ea2:	f002 fa03 	bl	80042ac <USB_EP0StartXfer>
 8001ea6:	e008      	b.n	8001eba <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	6818      	ldr	r0, [r3, #0]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	691b      	ldr	r3, [r3, #16]
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	6979      	ldr	r1, [r7, #20]
 8001eb6:	f001 ffb1 	bl	8003e1c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001eba:	2300      	movs	r3, #0
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3718      	adds	r7, #24
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	460b      	mov	r3, r1
 8001ece:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001ed0:	78fb      	ldrb	r3, [r7, #3]
 8001ed2:	f003 020f 	and.w	r2, r3, #15
 8001ed6:	6879      	ldr	r1, [r7, #4]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	00db      	lsls	r3, r3, #3
 8001edc:	4413      	add	r3, r2
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	440b      	add	r3, r1
 8001ee2:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8001ee6:	681b      	ldr	r3, [r3, #0]
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b086      	sub	sp, #24
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	60f8      	str	r0, [r7, #12]
 8001efc:	607a      	str	r2, [r7, #4]
 8001efe:	603b      	str	r3, [r7, #0]
 8001f00:	460b      	mov	r3, r1
 8001f02:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f04:	7afb      	ldrb	r3, [r7, #11]
 8001f06:	f003 020f 	and.w	r2, r3, #15
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	4413      	add	r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	3338      	adds	r3, #56	; 0x38
 8001f14:	68fa      	ldr	r2, [r7, #12]
 8001f16:	4413      	add	r3, r2
 8001f18:	3304      	adds	r3, #4
 8001f1a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	683a      	ldr	r2, [r7, #0]
 8001f26:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	2201      	movs	r2, #1
 8001f32:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f34:	7afb      	ldrb	r3, [r7, #11]
 8001f36:	f003 030f 	and.w	r3, r3, #15
 8001f3a:	b2da      	uxtb	r2, r3
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	691b      	ldr	r3, [r3, #16]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d102      	bne.n	8001f4e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f4e:	7afb      	ldrb	r3, [r7, #11]
 8001f50:	f003 030f 	and.w	r3, r3, #15
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d109      	bne.n	8001f6c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	6818      	ldr	r0, [r3, #0]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	691b      	ldr	r3, [r3, #16]
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	461a      	mov	r2, r3
 8001f64:	6979      	ldr	r1, [r7, #20]
 8001f66:	f002 f9a1 	bl	80042ac <USB_EP0StartXfer>
 8001f6a:	e008      	b.n	8001f7e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6818      	ldr	r0, [r3, #0]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	691b      	ldr	r3, [r3, #16]
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	461a      	mov	r2, r3
 8001f78:	6979      	ldr	r1, [r7, #20]
 8001f7a:	f001 ff4f 	bl	8003e1c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f7e:	2300      	movs	r3, #0
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3718      	adds	r7, #24
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	460b      	mov	r3, r1
 8001f92:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001f94:	78fb      	ldrb	r3, [r7, #3]
 8001f96:	f003 020f 	and.w	r2, r3, #15
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d901      	bls.n	8001fa6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e050      	b.n	8002048 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001fa6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	da0f      	bge.n	8001fce <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fae:	78fb      	ldrb	r3, [r7, #3]
 8001fb0:	f003 020f 	and.w	r2, r3, #15
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	4413      	add	r3, r2
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	3338      	adds	r3, #56	; 0x38
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	3304      	adds	r3, #4
 8001fc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2201      	movs	r2, #1
 8001fca:	705a      	strb	r2, [r3, #1]
 8001fcc:	e00d      	b.n	8001fea <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001fce:	78fa      	ldrb	r2, [r7, #3]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	4413      	add	r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	4413      	add	r3, r2
 8001fe0:	3304      	adds	r3, #4
 8001fe2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2201      	movs	r2, #1
 8001fee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ff0:	78fb      	ldrb	r3, [r7, #3]
 8001ff2:	f003 030f 	and.w	r3, r3, #15
 8001ff6:	b2da      	uxtb	r2, r3
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002002:	2b01      	cmp	r3, #1
 8002004:	d101      	bne.n	800200a <HAL_PCD_EP_SetStall+0x82>
 8002006:	2302      	movs	r3, #2
 8002008:	e01e      	b.n	8002048 <HAL_PCD_EP_SetStall+0xc0>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2201      	movs	r2, #1
 800200e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	68f9      	ldr	r1, [r7, #12]
 8002018:	4618      	mov	r0, r3
 800201a:	f002 fbdf 	bl	80047dc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800201e:	78fb      	ldrb	r3, [r7, #3]
 8002020:	f003 030f 	and.w	r3, r3, #15
 8002024:	2b00      	cmp	r3, #0
 8002026:	d10a      	bne.n	800203e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6818      	ldr	r0, [r3, #0]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	691b      	ldr	r3, [r3, #16]
 8002030:	b2d9      	uxtb	r1, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002038:	461a      	mov	r2, r3
 800203a:	f002 fdcf 	bl	8004bdc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002046:	2300      	movs	r3, #0
}
 8002048:	4618      	mov	r0, r3
 800204a:	3710      	adds	r7, #16
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	460b      	mov	r3, r1
 800205a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800205c:	78fb      	ldrb	r3, [r7, #3]
 800205e:	f003 020f 	and.w	r2, r3, #15
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	429a      	cmp	r2, r3
 8002068:	d901      	bls.n	800206e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e042      	b.n	80020f4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800206e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002072:	2b00      	cmp	r3, #0
 8002074:	da0f      	bge.n	8002096 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002076:	78fb      	ldrb	r3, [r7, #3]
 8002078:	f003 020f 	and.w	r2, r3, #15
 800207c:	4613      	mov	r3, r2
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	4413      	add	r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	3338      	adds	r3, #56	; 0x38
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	4413      	add	r3, r2
 800208a:	3304      	adds	r3, #4
 800208c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2201      	movs	r2, #1
 8002092:	705a      	strb	r2, [r3, #1]
 8002094:	e00f      	b.n	80020b6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002096:	78fb      	ldrb	r3, [r7, #3]
 8002098:	f003 020f 	and.w	r2, r3, #15
 800209c:	4613      	mov	r3, r2
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	4413      	add	r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	4413      	add	r3, r2
 80020ac:	3304      	adds	r3, #4
 80020ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2200      	movs	r2, #0
 80020b4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2200      	movs	r2, #0
 80020ba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020bc:	78fb      	ldrb	r3, [r7, #3]
 80020be:	f003 030f 	and.w	r3, r3, #15
 80020c2:	b2da      	uxtb	r2, r3
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d101      	bne.n	80020d6 <HAL_PCD_EP_ClrStall+0x86>
 80020d2:	2302      	movs	r3, #2
 80020d4:	e00e      	b.n	80020f4 <HAL_PCD_EP_ClrStall+0xa4>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2201      	movs	r2, #1
 80020da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	68f9      	ldr	r1, [r7, #12]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f002 fbe7 	bl	80048b8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80020f2:	2300      	movs	r3, #0
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3710      	adds	r7, #16
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	460b      	mov	r3, r1
 8002106:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002108:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800210c:	2b00      	cmp	r3, #0
 800210e:	da0c      	bge.n	800212a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002110:	78fb      	ldrb	r3, [r7, #3]
 8002112:	f003 020f 	and.w	r2, r3, #15
 8002116:	4613      	mov	r3, r2
 8002118:	00db      	lsls	r3, r3, #3
 800211a:	4413      	add	r3, r2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	3338      	adds	r3, #56	; 0x38
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	4413      	add	r3, r2
 8002124:	3304      	adds	r3, #4
 8002126:	60fb      	str	r3, [r7, #12]
 8002128:	e00c      	b.n	8002144 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800212a:	78fb      	ldrb	r3, [r7, #3]
 800212c:	f003 020f 	and.w	r2, r3, #15
 8002130:	4613      	mov	r3, r2
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	4413      	add	r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	4413      	add	r3, r2
 8002140:	3304      	adds	r3, #4
 8002142:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	68f9      	ldr	r1, [r7, #12]
 800214a:	4618      	mov	r0, r3
 800214c:	f002 fa06 	bl	800455c <USB_EPStopXfer>
 8002150:	4603      	mov	r3, r0
 8002152:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002154:	7afb      	ldrb	r3, [r7, #11]
}
 8002156:	4618      	mov	r0, r3
 8002158:	3710      	adds	r7, #16
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	b08a      	sub	sp, #40	; 0x28
 8002162:	af02      	add	r7, sp, #8
 8002164:	6078      	str	r0, [r7, #4]
 8002166:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002172:	683a      	ldr	r2, [r7, #0]
 8002174:	4613      	mov	r3, r2
 8002176:	00db      	lsls	r3, r3, #3
 8002178:	4413      	add	r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	3338      	adds	r3, #56	; 0x38
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	4413      	add	r3, r2
 8002182:	3304      	adds	r3, #4
 8002184:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	6a1a      	ldr	r2, [r3, #32]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	429a      	cmp	r2, r3
 8002190:	d901      	bls.n	8002196 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e06c      	b.n	8002270 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	699a      	ldr	r2, [r3, #24]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	6a1b      	ldr	r3, [r3, #32]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	69fa      	ldr	r2, [r7, #28]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d902      	bls.n	80021b2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	3303      	adds	r3, #3
 80021b6:	089b      	lsrs	r3, r3, #2
 80021b8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80021ba:	e02b      	b.n	8002214 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	699a      	ldr	r2, [r3, #24]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6a1b      	ldr	r3, [r3, #32]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	69fa      	ldr	r2, [r7, #28]
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d902      	bls.n	80021d8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	3303      	adds	r3, #3
 80021dc:	089b      	lsrs	r3, r3, #2
 80021de:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6919      	ldr	r1, [r3, #16]
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	b2da      	uxtb	r2, r3
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	9300      	str	r3, [sp, #0]
 80021f4:	4603      	mov	r3, r0
 80021f6:	6978      	ldr	r0, [r7, #20]
 80021f8:	f002 fa5a 	bl	80046b0 <USB_WritePacket>

    ep->xfer_buff  += len;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	691a      	ldr	r2, [r3, #16]
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	441a      	add	r2, r3
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6a1a      	ldr	r2, [r3, #32]
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	441a      	add	r2, r3
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	015a      	lsls	r2, r3, #5
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	4413      	add	r3, r2
 800221c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	b29b      	uxth	r3, r3
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	429a      	cmp	r2, r3
 8002228:	d809      	bhi.n	800223e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6a1a      	ldr	r2, [r3, #32]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002232:	429a      	cmp	r2, r3
 8002234:	d203      	bcs.n	800223e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	699b      	ldr	r3, [r3, #24]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1be      	bne.n	80021bc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	699a      	ldr	r2, [r3, #24]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	6a1b      	ldr	r3, [r3, #32]
 8002246:	429a      	cmp	r2, r3
 8002248:	d811      	bhi.n	800226e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	f003 030f 	and.w	r3, r3, #15
 8002250:	2201      	movs	r2, #1
 8002252:	fa02 f303 	lsl.w	r3, r2, r3
 8002256:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800225e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	43db      	mvns	r3, r3
 8002264:	6939      	ldr	r1, [r7, #16]
 8002266:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800226a:	4013      	ands	r3, r2
 800226c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800226e:	2300      	movs	r3, #0
}
 8002270:	4618      	mov	r0, r3
 8002272:	3720      	adds	r7, #32
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b088      	sub	sp, #32
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	333c      	adds	r3, #60	; 0x3c
 8002290:	3304      	adds	r3, #4
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	015a      	lsls	r2, r3, #5
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	4413      	add	r3, r2
 800229e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d17b      	bne.n	80023a6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	f003 0308 	and.w	r3, r3, #8
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d015      	beq.n	80022e4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	4a61      	ldr	r2, [pc, #388]	; (8002440 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	f240 80b9 	bls.w	8002434 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	f000 80b3 	beq.w	8002434 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	015a      	lsls	r2, r3, #5
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	4413      	add	r3, r2
 80022d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022da:	461a      	mov	r2, r3
 80022dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022e0:	6093      	str	r3, [r2, #8]
 80022e2:	e0a7      	b.n	8002434 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	f003 0320 	and.w	r3, r3, #32
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d009      	beq.n	8002302 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	015a      	lsls	r2, r3, #5
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	4413      	add	r3, r2
 80022f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022fa:	461a      	mov	r2, r3
 80022fc:	2320      	movs	r3, #32
 80022fe:	6093      	str	r3, [r2, #8]
 8002300:	e098      	b.n	8002434 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002308:	2b00      	cmp	r3, #0
 800230a:	f040 8093 	bne.w	8002434 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	4a4b      	ldr	r2, [pc, #300]	; (8002440 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d90f      	bls.n	8002336 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800231c:	2b00      	cmp	r3, #0
 800231e:	d00a      	beq.n	8002336 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	015a      	lsls	r2, r3, #5
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	4413      	add	r3, r2
 8002328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800232c:	461a      	mov	r2, r3
 800232e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002332:	6093      	str	r3, [r2, #8]
 8002334:	e07e      	b.n	8002434 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	4613      	mov	r3, r2
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	4413      	add	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	4413      	add	r3, r2
 8002348:	3304      	adds	r3, #4
 800234a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	69da      	ldr	r2, [r3, #28]
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	0159      	lsls	r1, r3, #5
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	440b      	add	r3, r1
 8002358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002362:	1ad2      	subs	r2, r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d114      	bne.n	8002398 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	699b      	ldr	r3, [r3, #24]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d109      	bne.n	800238a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6818      	ldr	r0, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002380:	461a      	mov	r2, r3
 8002382:	2101      	movs	r1, #1
 8002384:	f002 fc2a 	bl	8004bdc <USB_EP0_OutStart>
 8002388:	e006      	b.n	8002398 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	691a      	ldr	r2, [r3, #16]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6a1b      	ldr	r3, [r3, #32]
 8002392:	441a      	add	r2, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	b2db      	uxtb	r3, r3
 800239c:	4619      	mov	r1, r3
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f007 fca0 	bl	8009ce4 <HAL_PCD_DataOutStageCallback>
 80023a4:	e046      	b.n	8002434 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	4a26      	ldr	r2, [pc, #152]	; (8002444 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d124      	bne.n	80023f8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d00a      	beq.n	80023ce <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	015a      	lsls	r2, r3, #5
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	4413      	add	r3, r2
 80023c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023c4:	461a      	mov	r2, r3
 80023c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023ca:	6093      	str	r3, [r2, #8]
 80023cc:	e032      	b.n	8002434 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	f003 0320 	and.w	r3, r3, #32
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d008      	beq.n	80023ea <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	015a      	lsls	r2, r3, #5
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	4413      	add	r3, r2
 80023e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023e4:	461a      	mov	r2, r3
 80023e6:	2320      	movs	r3, #32
 80023e8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	4619      	mov	r1, r3
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f007 fc77 	bl	8009ce4 <HAL_PCD_DataOutStageCallback>
 80023f6:	e01d      	b.n	8002434 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d114      	bne.n	8002428 <PCD_EP_OutXfrComplete_int+0x1b0>
 80023fe:	6879      	ldr	r1, [r7, #4]
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	4613      	mov	r3, r2
 8002404:	00db      	lsls	r3, r3, #3
 8002406:	4413      	add	r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	440b      	add	r3, r1
 800240c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d108      	bne.n	8002428 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6818      	ldr	r0, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002420:	461a      	mov	r2, r3
 8002422:	2100      	movs	r1, #0
 8002424:	f002 fbda 	bl	8004bdc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	b2db      	uxtb	r3, r3
 800242c:	4619      	mov	r1, r3
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f007 fc58 	bl	8009ce4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3720      	adds	r7, #32
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	4f54300a 	.word	0x4f54300a
 8002444:	4f54310a 	.word	0x4f54310a

08002448 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	333c      	adds	r3, #60	; 0x3c
 8002460:	3304      	adds	r3, #4
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	015a      	lsls	r2, r3, #5
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	4413      	add	r3, r2
 800246e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	4a15      	ldr	r2, [pc, #84]	; (80024d0 <PCD_EP_OutSetupPacket_int+0x88>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d90e      	bls.n	800249c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002484:	2b00      	cmp	r3, #0
 8002486:	d009      	beq.n	800249c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	015a      	lsls	r2, r3, #5
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	4413      	add	r3, r2
 8002490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002494:	461a      	mov	r2, r3
 8002496:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800249a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f007 fc0f 	bl	8009cc0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	4a0a      	ldr	r2, [pc, #40]	; (80024d0 <PCD_EP_OutSetupPacket_int+0x88>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d90c      	bls.n	80024c4 <PCD_EP_OutSetupPacket_int+0x7c>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	691b      	ldr	r3, [r3, #16]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d108      	bne.n	80024c4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6818      	ldr	r0, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80024bc:	461a      	mov	r2, r3
 80024be:	2101      	movs	r1, #1
 80024c0:	f002 fb8c 	bl	8004bdc <USB_EP0_OutStart>
  }

  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3718      	adds	r7, #24
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	4f54300a 	.word	0x4f54300a

080024d4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	460b      	mov	r3, r1
 80024de:	70fb      	strb	r3, [r7, #3]
 80024e0:	4613      	mov	r3, r2
 80024e2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ea:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80024ec:	78fb      	ldrb	r3, [r7, #3]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d107      	bne.n	8002502 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80024f2:	883b      	ldrh	r3, [r7, #0]
 80024f4:	0419      	lsls	r1, r3, #16
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68ba      	ldr	r2, [r7, #8]
 80024fc:	430a      	orrs	r2, r1
 80024fe:	629a      	str	r2, [r3, #40]	; 0x28
 8002500:	e028      	b.n	8002554 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002508:	0c1b      	lsrs	r3, r3, #16
 800250a:	68ba      	ldr	r2, [r7, #8]
 800250c:	4413      	add	r3, r2
 800250e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002510:	2300      	movs	r3, #0
 8002512:	73fb      	strb	r3, [r7, #15]
 8002514:	e00d      	b.n	8002532 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	7bfb      	ldrb	r3, [r7, #15]
 800251c:	3340      	adds	r3, #64	; 0x40
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	4413      	add	r3, r2
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	0c1b      	lsrs	r3, r3, #16
 8002526:	68ba      	ldr	r2, [r7, #8]
 8002528:	4413      	add	r3, r2
 800252a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800252c:	7bfb      	ldrb	r3, [r7, #15]
 800252e:	3301      	adds	r3, #1
 8002530:	73fb      	strb	r3, [r7, #15]
 8002532:	7bfa      	ldrb	r2, [r7, #15]
 8002534:	78fb      	ldrb	r3, [r7, #3]
 8002536:	3b01      	subs	r3, #1
 8002538:	429a      	cmp	r2, r3
 800253a:	d3ec      	bcc.n	8002516 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800253c:	883b      	ldrh	r3, [r7, #0]
 800253e:	0418      	lsls	r0, r3, #16
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6819      	ldr	r1, [r3, #0]
 8002544:	78fb      	ldrb	r3, [r7, #3]
 8002546:	3b01      	subs	r3, #1
 8002548:	68ba      	ldr	r2, [r7, #8]
 800254a:	4302      	orrs	r2, r0
 800254c:	3340      	adds	r3, #64	; 0x40
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	440b      	add	r3, r1
 8002552:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	3714      	adds	r7, #20
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr

08002562 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002562:	b480      	push	{r7}
 8002564:	b083      	sub	sp, #12
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
 800256a:	460b      	mov	r3, r1
 800256c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	887a      	ldrh	r2, [r7, #2]
 8002574:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002576:	2300      	movs	r3, #0
}
 8002578:	4618      	mov	r0, r3
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	460b      	mov	r3, r1
 800258e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002590:	bf00      	nop
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b086      	sub	sp, #24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d101      	bne.n	80025ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e267      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d075      	beq.n	80026a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025ba:	4b88      	ldr	r3, [pc, #544]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 030c 	and.w	r3, r3, #12
 80025c2:	2b04      	cmp	r3, #4
 80025c4:	d00c      	beq.n	80025e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025c6:	4b85      	ldr	r3, [pc, #532]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025ce:	2b08      	cmp	r3, #8
 80025d0:	d112      	bne.n	80025f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025d2:	4b82      	ldr	r3, [pc, #520]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025de:	d10b      	bne.n	80025f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e0:	4b7e      	ldr	r3, [pc, #504]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d05b      	beq.n	80026a4 <HAL_RCC_OscConfig+0x108>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d157      	bne.n	80026a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e242      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002600:	d106      	bne.n	8002610 <HAL_RCC_OscConfig+0x74>
 8002602:	4b76      	ldr	r3, [pc, #472]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a75      	ldr	r2, [pc, #468]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 8002608:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800260c:	6013      	str	r3, [r2, #0]
 800260e:	e01d      	b.n	800264c <HAL_RCC_OscConfig+0xb0>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002618:	d10c      	bne.n	8002634 <HAL_RCC_OscConfig+0x98>
 800261a:	4b70      	ldr	r3, [pc, #448]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a6f      	ldr	r2, [pc, #444]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 8002620:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002624:	6013      	str	r3, [r2, #0]
 8002626:	4b6d      	ldr	r3, [pc, #436]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a6c      	ldr	r2, [pc, #432]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 800262c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002630:	6013      	str	r3, [r2, #0]
 8002632:	e00b      	b.n	800264c <HAL_RCC_OscConfig+0xb0>
 8002634:	4b69      	ldr	r3, [pc, #420]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a68      	ldr	r2, [pc, #416]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 800263a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800263e:	6013      	str	r3, [r2, #0]
 8002640:	4b66      	ldr	r3, [pc, #408]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a65      	ldr	r2, [pc, #404]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 8002646:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800264a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d013      	beq.n	800267c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002654:	f7fe fa44 	bl	8000ae0 <HAL_GetTick>
 8002658:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800265a:	e008      	b.n	800266e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800265c:	f7fe fa40 	bl	8000ae0 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b64      	cmp	r3, #100	; 0x64
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e207      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800266e:	4b5b      	ldr	r3, [pc, #364]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d0f0      	beq.n	800265c <HAL_RCC_OscConfig+0xc0>
 800267a:	e014      	b.n	80026a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800267c:	f7fe fa30 	bl	8000ae0 <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002684:	f7fe fa2c 	bl	8000ae0 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b64      	cmp	r3, #100	; 0x64
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e1f3      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002696:	4b51      	ldr	r3, [pc, #324]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d1f0      	bne.n	8002684 <HAL_RCC_OscConfig+0xe8>
 80026a2:	e000      	b.n	80026a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d063      	beq.n	800277a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026b2:	4b4a      	ldr	r3, [pc, #296]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f003 030c 	and.w	r3, r3, #12
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00b      	beq.n	80026d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026be:	4b47      	ldr	r3, [pc, #284]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026c6:	2b08      	cmp	r3, #8
 80026c8:	d11c      	bne.n	8002704 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026ca:	4b44      	ldr	r3, [pc, #272]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d116      	bne.n	8002704 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026d6:	4b41      	ldr	r3, [pc, #260]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d005      	beq.n	80026ee <HAL_RCC_OscConfig+0x152>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d001      	beq.n	80026ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e1c7      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ee:	4b3b      	ldr	r3, [pc, #236]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	00db      	lsls	r3, r3, #3
 80026fc:	4937      	ldr	r1, [pc, #220]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002702:	e03a      	b.n	800277a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d020      	beq.n	800274e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800270c:	4b34      	ldr	r3, [pc, #208]	; (80027e0 <HAL_RCC_OscConfig+0x244>)
 800270e:	2201      	movs	r2, #1
 8002710:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002712:	f7fe f9e5 	bl	8000ae0 <HAL_GetTick>
 8002716:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002718:	e008      	b.n	800272c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800271a:	f7fe f9e1 	bl	8000ae0 <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	2b02      	cmp	r3, #2
 8002726:	d901      	bls.n	800272c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e1a8      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800272c:	4b2b      	ldr	r3, [pc, #172]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0302 	and.w	r3, r3, #2
 8002734:	2b00      	cmp	r3, #0
 8002736:	d0f0      	beq.n	800271a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002738:	4b28      	ldr	r3, [pc, #160]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	691b      	ldr	r3, [r3, #16]
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	4925      	ldr	r1, [pc, #148]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 8002748:	4313      	orrs	r3, r2
 800274a:	600b      	str	r3, [r1, #0]
 800274c:	e015      	b.n	800277a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800274e:	4b24      	ldr	r3, [pc, #144]	; (80027e0 <HAL_RCC_OscConfig+0x244>)
 8002750:	2200      	movs	r2, #0
 8002752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002754:	f7fe f9c4 	bl	8000ae0 <HAL_GetTick>
 8002758:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800275a:	e008      	b.n	800276e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800275c:	f7fe f9c0 	bl	8000ae0 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e187      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800276e:	4b1b      	ldr	r3, [pc, #108]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1f0      	bne.n	800275c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0308 	and.w	r3, r3, #8
 8002782:	2b00      	cmp	r3, #0
 8002784:	d036      	beq.n	80027f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d016      	beq.n	80027bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800278e:	4b15      	ldr	r3, [pc, #84]	; (80027e4 <HAL_RCC_OscConfig+0x248>)
 8002790:	2201      	movs	r2, #1
 8002792:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002794:	f7fe f9a4 	bl	8000ae0 <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800279a:	e008      	b.n	80027ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800279c:	f7fe f9a0 	bl	8000ae0 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e167      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ae:	4b0b      	ldr	r3, [pc, #44]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 80027b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d0f0      	beq.n	800279c <HAL_RCC_OscConfig+0x200>
 80027ba:	e01b      	b.n	80027f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027bc:	4b09      	ldr	r3, [pc, #36]	; (80027e4 <HAL_RCC_OscConfig+0x248>)
 80027be:	2200      	movs	r2, #0
 80027c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027c2:	f7fe f98d 	bl	8000ae0 <HAL_GetTick>
 80027c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027c8:	e00e      	b.n	80027e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027ca:	f7fe f989 	bl	8000ae0 <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d907      	bls.n	80027e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e150      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
 80027dc:	40023800 	.word	0x40023800
 80027e0:	42470000 	.word	0x42470000
 80027e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027e8:	4b88      	ldr	r3, [pc, #544]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 80027ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027ec:	f003 0302 	and.w	r3, r3, #2
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d1ea      	bne.n	80027ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0304 	and.w	r3, r3, #4
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	f000 8097 	beq.w	8002930 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002802:	2300      	movs	r3, #0
 8002804:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002806:	4b81      	ldr	r3, [pc, #516]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 8002808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d10f      	bne.n	8002832 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002812:	2300      	movs	r3, #0
 8002814:	60bb      	str	r3, [r7, #8]
 8002816:	4b7d      	ldr	r3, [pc, #500]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 8002818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281a:	4a7c      	ldr	r2, [pc, #496]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 800281c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002820:	6413      	str	r3, [r2, #64]	; 0x40
 8002822:	4b7a      	ldr	r3, [pc, #488]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800282a:	60bb      	str	r3, [r7, #8]
 800282c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800282e:	2301      	movs	r3, #1
 8002830:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002832:	4b77      	ldr	r3, [pc, #476]	; (8002a10 <HAL_RCC_OscConfig+0x474>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800283a:	2b00      	cmp	r3, #0
 800283c:	d118      	bne.n	8002870 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800283e:	4b74      	ldr	r3, [pc, #464]	; (8002a10 <HAL_RCC_OscConfig+0x474>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a73      	ldr	r2, [pc, #460]	; (8002a10 <HAL_RCC_OscConfig+0x474>)
 8002844:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002848:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800284a:	f7fe f949 	bl	8000ae0 <HAL_GetTick>
 800284e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002850:	e008      	b.n	8002864 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002852:	f7fe f945 	bl	8000ae0 <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	2b02      	cmp	r3, #2
 800285e:	d901      	bls.n	8002864 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e10c      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002864:	4b6a      	ldr	r3, [pc, #424]	; (8002a10 <HAL_RCC_OscConfig+0x474>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800286c:	2b00      	cmp	r3, #0
 800286e:	d0f0      	beq.n	8002852 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	2b01      	cmp	r3, #1
 8002876:	d106      	bne.n	8002886 <HAL_RCC_OscConfig+0x2ea>
 8002878:	4b64      	ldr	r3, [pc, #400]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 800287a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800287c:	4a63      	ldr	r2, [pc, #396]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 800287e:	f043 0301 	orr.w	r3, r3, #1
 8002882:	6713      	str	r3, [r2, #112]	; 0x70
 8002884:	e01c      	b.n	80028c0 <HAL_RCC_OscConfig+0x324>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	2b05      	cmp	r3, #5
 800288c:	d10c      	bne.n	80028a8 <HAL_RCC_OscConfig+0x30c>
 800288e:	4b5f      	ldr	r3, [pc, #380]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 8002890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002892:	4a5e      	ldr	r2, [pc, #376]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 8002894:	f043 0304 	orr.w	r3, r3, #4
 8002898:	6713      	str	r3, [r2, #112]	; 0x70
 800289a:	4b5c      	ldr	r3, [pc, #368]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 800289c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800289e:	4a5b      	ldr	r2, [pc, #364]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 80028a0:	f043 0301 	orr.w	r3, r3, #1
 80028a4:	6713      	str	r3, [r2, #112]	; 0x70
 80028a6:	e00b      	b.n	80028c0 <HAL_RCC_OscConfig+0x324>
 80028a8:	4b58      	ldr	r3, [pc, #352]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 80028aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ac:	4a57      	ldr	r2, [pc, #348]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 80028ae:	f023 0301 	bic.w	r3, r3, #1
 80028b2:	6713      	str	r3, [r2, #112]	; 0x70
 80028b4:	4b55      	ldr	r3, [pc, #340]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 80028b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b8:	4a54      	ldr	r2, [pc, #336]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 80028ba:	f023 0304 	bic.w	r3, r3, #4
 80028be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d015      	beq.n	80028f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c8:	f7fe f90a 	bl	8000ae0 <HAL_GetTick>
 80028cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ce:	e00a      	b.n	80028e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028d0:	f7fe f906 	bl	8000ae0 <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	f241 3288 	movw	r2, #5000	; 0x1388
 80028de:	4293      	cmp	r3, r2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e0cb      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028e6:	4b49      	ldr	r3, [pc, #292]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 80028e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d0ee      	beq.n	80028d0 <HAL_RCC_OscConfig+0x334>
 80028f2:	e014      	b.n	800291e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028f4:	f7fe f8f4 	bl	8000ae0 <HAL_GetTick>
 80028f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028fa:	e00a      	b.n	8002912 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028fc:	f7fe f8f0 	bl	8000ae0 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	f241 3288 	movw	r2, #5000	; 0x1388
 800290a:	4293      	cmp	r3, r2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e0b5      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002912:	4b3e      	ldr	r3, [pc, #248]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 8002914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d1ee      	bne.n	80028fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800291e:	7dfb      	ldrb	r3, [r7, #23]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d105      	bne.n	8002930 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002924:	4b39      	ldr	r3, [pc, #228]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 8002926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002928:	4a38      	ldr	r2, [pc, #224]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 800292a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800292e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	2b00      	cmp	r3, #0
 8002936:	f000 80a1 	beq.w	8002a7c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800293a:	4b34      	ldr	r3, [pc, #208]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f003 030c 	and.w	r3, r3, #12
 8002942:	2b08      	cmp	r3, #8
 8002944:	d05c      	beq.n	8002a00 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	2b02      	cmp	r3, #2
 800294c:	d141      	bne.n	80029d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800294e:	4b31      	ldr	r3, [pc, #196]	; (8002a14 <HAL_RCC_OscConfig+0x478>)
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002954:	f7fe f8c4 	bl	8000ae0 <HAL_GetTick>
 8002958:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800295a:	e008      	b.n	800296e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800295c:	f7fe f8c0 	bl	8000ae0 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b02      	cmp	r3, #2
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e087      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800296e:	4b27      	ldr	r3, [pc, #156]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1f0      	bne.n	800295c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	69da      	ldr	r2, [r3, #28]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a1b      	ldr	r3, [r3, #32]
 8002982:	431a      	orrs	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002988:	019b      	lsls	r3, r3, #6
 800298a:	431a      	orrs	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002990:	085b      	lsrs	r3, r3, #1
 8002992:	3b01      	subs	r3, #1
 8002994:	041b      	lsls	r3, r3, #16
 8002996:	431a      	orrs	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800299c:	061b      	lsls	r3, r3, #24
 800299e:	491b      	ldr	r1, [pc, #108]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029a4:	4b1b      	ldr	r3, [pc, #108]	; (8002a14 <HAL_RCC_OscConfig+0x478>)
 80029a6:	2201      	movs	r2, #1
 80029a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029aa:	f7fe f899 	bl	8000ae0 <HAL_GetTick>
 80029ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029b0:	e008      	b.n	80029c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029b2:	f7fe f895 	bl	8000ae0 <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d901      	bls.n	80029c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e05c      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029c4:	4b11      	ldr	r3, [pc, #68]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d0f0      	beq.n	80029b2 <HAL_RCC_OscConfig+0x416>
 80029d0:	e054      	b.n	8002a7c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029d2:	4b10      	ldr	r3, [pc, #64]	; (8002a14 <HAL_RCC_OscConfig+0x478>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d8:	f7fe f882 	bl	8000ae0 <HAL_GetTick>
 80029dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029de:	e008      	b.n	80029f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029e0:	f7fe f87e 	bl	8000ae0 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e045      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029f2:	4b06      	ldr	r3, [pc, #24]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d1f0      	bne.n	80029e0 <HAL_RCC_OscConfig+0x444>
 80029fe:	e03d      	b.n	8002a7c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d107      	bne.n	8002a18 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e038      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
 8002a0c:	40023800 	.word	0x40023800
 8002a10:	40007000 	.word	0x40007000
 8002a14:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a18:	4b1b      	ldr	r3, [pc, #108]	; (8002a88 <HAL_RCC_OscConfig+0x4ec>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d028      	beq.n	8002a78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d121      	bne.n	8002a78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d11a      	bne.n	8002a78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a48:	4013      	ands	r3, r2
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a4e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d111      	bne.n	8002a78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a5e:	085b      	lsrs	r3, r3, #1
 8002a60:	3b01      	subs	r3, #1
 8002a62:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d107      	bne.n	8002a78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a72:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d001      	beq.n	8002a7c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e000      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3718      	adds	r7, #24
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	40023800 	.word	0x40023800

08002a8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d101      	bne.n	8002aa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e0cc      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002aa0:	4b68      	ldr	r3, [pc, #416]	; (8002c44 <HAL_RCC_ClockConfig+0x1b8>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0307 	and.w	r3, r3, #7
 8002aa8:	683a      	ldr	r2, [r7, #0]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d90c      	bls.n	8002ac8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aae:	4b65      	ldr	r3, [pc, #404]	; (8002c44 <HAL_RCC_ClockConfig+0x1b8>)
 8002ab0:	683a      	ldr	r2, [r7, #0]
 8002ab2:	b2d2      	uxtb	r2, r2
 8002ab4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ab6:	4b63      	ldr	r3, [pc, #396]	; (8002c44 <HAL_RCC_ClockConfig+0x1b8>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0307 	and.w	r3, r3, #7
 8002abe:	683a      	ldr	r2, [r7, #0]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d001      	beq.n	8002ac8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e0b8      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0302 	and.w	r3, r3, #2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d020      	beq.n	8002b16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0304 	and.w	r3, r3, #4
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d005      	beq.n	8002aec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ae0:	4b59      	ldr	r3, [pc, #356]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	4a58      	ldr	r2, [pc, #352]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002aea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0308 	and.w	r3, r3, #8
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d005      	beq.n	8002b04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002af8:	4b53      	ldr	r3, [pc, #332]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	4a52      	ldr	r2, [pc, #328]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002afe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b04:	4b50      	ldr	r3, [pc, #320]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	494d      	ldr	r1, [pc, #308]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d044      	beq.n	8002bac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d107      	bne.n	8002b3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b2a:	4b47      	ldr	r3, [pc, #284]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d119      	bne.n	8002b6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e07f      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d003      	beq.n	8002b4a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b46:	2b03      	cmp	r3, #3
 8002b48:	d107      	bne.n	8002b5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b4a:	4b3f      	ldr	r3, [pc, #252]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d109      	bne.n	8002b6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e06f      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b5a:	4b3b      	ldr	r3, [pc, #236]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d101      	bne.n	8002b6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e067      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b6a:	4b37      	ldr	r3, [pc, #220]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f023 0203 	bic.w	r2, r3, #3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	4934      	ldr	r1, [pc, #208]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b7c:	f7fd ffb0 	bl	8000ae0 <HAL_GetTick>
 8002b80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b82:	e00a      	b.n	8002b9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b84:	f7fd ffac 	bl	8000ae0 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e04f      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b9a:	4b2b      	ldr	r3, [pc, #172]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f003 020c 	and.w	r2, r3, #12
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d1eb      	bne.n	8002b84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bac:	4b25      	ldr	r3, [pc, #148]	; (8002c44 <HAL_RCC_ClockConfig+0x1b8>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0307 	and.w	r3, r3, #7
 8002bb4:	683a      	ldr	r2, [r7, #0]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d20c      	bcs.n	8002bd4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bba:	4b22      	ldr	r3, [pc, #136]	; (8002c44 <HAL_RCC_ClockConfig+0x1b8>)
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	b2d2      	uxtb	r2, r2
 8002bc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bc2:	4b20      	ldr	r3, [pc, #128]	; (8002c44 <HAL_RCC_ClockConfig+0x1b8>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0307 	and.w	r3, r3, #7
 8002bca:	683a      	ldr	r2, [r7, #0]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d001      	beq.n	8002bd4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e032      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0304 	and.w	r3, r3, #4
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d008      	beq.n	8002bf2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002be0:	4b19      	ldr	r3, [pc, #100]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	4916      	ldr	r1, [pc, #88]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0308 	and.w	r3, r3, #8
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d009      	beq.n	8002c12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bfe:	4b12      	ldr	r3, [pc, #72]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	490e      	ldr	r1, [pc, #56]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c12:	f000 f821 	bl	8002c58 <HAL_RCC_GetSysClockFreq>
 8002c16:	4602      	mov	r2, r0
 8002c18:	4b0b      	ldr	r3, [pc, #44]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	091b      	lsrs	r3, r3, #4
 8002c1e:	f003 030f 	and.w	r3, r3, #15
 8002c22:	490a      	ldr	r1, [pc, #40]	; (8002c4c <HAL_RCC_ClockConfig+0x1c0>)
 8002c24:	5ccb      	ldrb	r3, [r1, r3]
 8002c26:	fa22 f303 	lsr.w	r3, r2, r3
 8002c2a:	4a09      	ldr	r2, [pc, #36]	; (8002c50 <HAL_RCC_ClockConfig+0x1c4>)
 8002c2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c2e:	4b09      	ldr	r3, [pc, #36]	; (8002c54 <HAL_RCC_ClockConfig+0x1c8>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7fd fde4 	bl	8000800 <HAL_InitTick>

  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3710      	adds	r7, #16
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	40023c00 	.word	0x40023c00
 8002c48:	40023800 	.word	0x40023800
 8002c4c:	0800a884 	.word	0x0800a884
 8002c50:	20000000 	.word	0x20000000
 8002c54:	20000004 	.word	0x20000004

08002c58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c5c:	b094      	sub	sp, #80	; 0x50
 8002c5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c60:	2300      	movs	r3, #0
 8002c62:	647b      	str	r3, [r7, #68]	; 0x44
 8002c64:	2300      	movs	r3, #0
 8002c66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c68:	2300      	movs	r3, #0
 8002c6a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c70:	4b79      	ldr	r3, [pc, #484]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f003 030c 	and.w	r3, r3, #12
 8002c78:	2b08      	cmp	r3, #8
 8002c7a:	d00d      	beq.n	8002c98 <HAL_RCC_GetSysClockFreq+0x40>
 8002c7c:	2b08      	cmp	r3, #8
 8002c7e:	f200 80e1 	bhi.w	8002e44 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d002      	beq.n	8002c8c <HAL_RCC_GetSysClockFreq+0x34>
 8002c86:	2b04      	cmp	r3, #4
 8002c88:	d003      	beq.n	8002c92 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c8a:	e0db      	b.n	8002e44 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c8c:	4b73      	ldr	r3, [pc, #460]	; (8002e5c <HAL_RCC_GetSysClockFreq+0x204>)
 8002c8e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002c90:	e0db      	b.n	8002e4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c92:	4b73      	ldr	r3, [pc, #460]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x208>)
 8002c94:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c96:	e0d8      	b.n	8002e4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c98:	4b6f      	ldr	r3, [pc, #444]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ca0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ca2:	4b6d      	ldr	r3, [pc, #436]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d063      	beq.n	8002d76 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cae:	4b6a      	ldr	r3, [pc, #424]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	099b      	lsrs	r3, r3, #6
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002cb8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cc0:	633b      	str	r3, [r7, #48]	; 0x30
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	637b      	str	r3, [r7, #52]	; 0x34
 8002cc6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002cca:	4622      	mov	r2, r4
 8002ccc:	462b      	mov	r3, r5
 8002cce:	f04f 0000 	mov.w	r0, #0
 8002cd2:	f04f 0100 	mov.w	r1, #0
 8002cd6:	0159      	lsls	r1, r3, #5
 8002cd8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cdc:	0150      	lsls	r0, r2, #5
 8002cde:	4602      	mov	r2, r0
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	4621      	mov	r1, r4
 8002ce4:	1a51      	subs	r1, r2, r1
 8002ce6:	6139      	str	r1, [r7, #16]
 8002ce8:	4629      	mov	r1, r5
 8002cea:	eb63 0301 	sbc.w	r3, r3, r1
 8002cee:	617b      	str	r3, [r7, #20]
 8002cf0:	f04f 0200 	mov.w	r2, #0
 8002cf4:	f04f 0300 	mov.w	r3, #0
 8002cf8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002cfc:	4659      	mov	r1, fp
 8002cfe:	018b      	lsls	r3, r1, #6
 8002d00:	4651      	mov	r1, sl
 8002d02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d06:	4651      	mov	r1, sl
 8002d08:	018a      	lsls	r2, r1, #6
 8002d0a:	4651      	mov	r1, sl
 8002d0c:	ebb2 0801 	subs.w	r8, r2, r1
 8002d10:	4659      	mov	r1, fp
 8002d12:	eb63 0901 	sbc.w	r9, r3, r1
 8002d16:	f04f 0200 	mov.w	r2, #0
 8002d1a:	f04f 0300 	mov.w	r3, #0
 8002d1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d2a:	4690      	mov	r8, r2
 8002d2c:	4699      	mov	r9, r3
 8002d2e:	4623      	mov	r3, r4
 8002d30:	eb18 0303 	adds.w	r3, r8, r3
 8002d34:	60bb      	str	r3, [r7, #8]
 8002d36:	462b      	mov	r3, r5
 8002d38:	eb49 0303 	adc.w	r3, r9, r3
 8002d3c:	60fb      	str	r3, [r7, #12]
 8002d3e:	f04f 0200 	mov.w	r2, #0
 8002d42:	f04f 0300 	mov.w	r3, #0
 8002d46:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002d4a:	4629      	mov	r1, r5
 8002d4c:	024b      	lsls	r3, r1, #9
 8002d4e:	4621      	mov	r1, r4
 8002d50:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d54:	4621      	mov	r1, r4
 8002d56:	024a      	lsls	r2, r1, #9
 8002d58:	4610      	mov	r0, r2
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d5e:	2200      	movs	r2, #0
 8002d60:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d64:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d68:	f7fd fa3a 	bl	80001e0 <__aeabi_uldivmod>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	460b      	mov	r3, r1
 8002d70:	4613      	mov	r3, r2
 8002d72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d74:	e058      	b.n	8002e28 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d76:	4b38      	ldr	r3, [pc, #224]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	099b      	lsrs	r3, r3, #6
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	4618      	mov	r0, r3
 8002d80:	4611      	mov	r1, r2
 8002d82:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d86:	623b      	str	r3, [r7, #32]
 8002d88:	2300      	movs	r3, #0
 8002d8a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d8c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d90:	4642      	mov	r2, r8
 8002d92:	464b      	mov	r3, r9
 8002d94:	f04f 0000 	mov.w	r0, #0
 8002d98:	f04f 0100 	mov.w	r1, #0
 8002d9c:	0159      	lsls	r1, r3, #5
 8002d9e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002da2:	0150      	lsls	r0, r2, #5
 8002da4:	4602      	mov	r2, r0
 8002da6:	460b      	mov	r3, r1
 8002da8:	4641      	mov	r1, r8
 8002daa:	ebb2 0a01 	subs.w	sl, r2, r1
 8002dae:	4649      	mov	r1, r9
 8002db0:	eb63 0b01 	sbc.w	fp, r3, r1
 8002db4:	f04f 0200 	mov.w	r2, #0
 8002db8:	f04f 0300 	mov.w	r3, #0
 8002dbc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002dc0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002dc4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002dc8:	ebb2 040a 	subs.w	r4, r2, sl
 8002dcc:	eb63 050b 	sbc.w	r5, r3, fp
 8002dd0:	f04f 0200 	mov.w	r2, #0
 8002dd4:	f04f 0300 	mov.w	r3, #0
 8002dd8:	00eb      	lsls	r3, r5, #3
 8002dda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002dde:	00e2      	lsls	r2, r4, #3
 8002de0:	4614      	mov	r4, r2
 8002de2:	461d      	mov	r5, r3
 8002de4:	4643      	mov	r3, r8
 8002de6:	18e3      	adds	r3, r4, r3
 8002de8:	603b      	str	r3, [r7, #0]
 8002dea:	464b      	mov	r3, r9
 8002dec:	eb45 0303 	adc.w	r3, r5, r3
 8002df0:	607b      	str	r3, [r7, #4]
 8002df2:	f04f 0200 	mov.w	r2, #0
 8002df6:	f04f 0300 	mov.w	r3, #0
 8002dfa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002dfe:	4629      	mov	r1, r5
 8002e00:	028b      	lsls	r3, r1, #10
 8002e02:	4621      	mov	r1, r4
 8002e04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e08:	4621      	mov	r1, r4
 8002e0a:	028a      	lsls	r2, r1, #10
 8002e0c:	4610      	mov	r0, r2
 8002e0e:	4619      	mov	r1, r3
 8002e10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e12:	2200      	movs	r2, #0
 8002e14:	61bb      	str	r3, [r7, #24]
 8002e16:	61fa      	str	r2, [r7, #28]
 8002e18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e1c:	f7fd f9e0 	bl	80001e0 <__aeabi_uldivmod>
 8002e20:	4602      	mov	r2, r0
 8002e22:	460b      	mov	r3, r1
 8002e24:	4613      	mov	r3, r2
 8002e26:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e28:	4b0b      	ldr	r3, [pc, #44]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	0c1b      	lsrs	r3, r3, #16
 8002e2e:	f003 0303 	and.w	r3, r3, #3
 8002e32:	3301      	adds	r3, #1
 8002e34:	005b      	lsls	r3, r3, #1
 8002e36:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002e38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e40:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e42:	e002      	b.n	8002e4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e44:	4b05      	ldr	r3, [pc, #20]	; (8002e5c <HAL_RCC_GetSysClockFreq+0x204>)
 8002e46:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3750      	adds	r7, #80	; 0x50
 8002e50:	46bd      	mov	sp, r7
 8002e52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e56:	bf00      	nop
 8002e58:	40023800 	.word	0x40023800
 8002e5c:	00f42400 	.word	0x00f42400
 8002e60:	007a1200 	.word	0x007a1200

08002e64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e68:	4b03      	ldr	r3, [pc, #12]	; (8002e78 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	20000000 	.word	0x20000000

08002e7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e80:	f7ff fff0 	bl	8002e64 <HAL_RCC_GetHCLKFreq>
 8002e84:	4602      	mov	r2, r0
 8002e86:	4b05      	ldr	r3, [pc, #20]	; (8002e9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	0a9b      	lsrs	r3, r3, #10
 8002e8c:	f003 0307 	and.w	r3, r3, #7
 8002e90:	4903      	ldr	r1, [pc, #12]	; (8002ea0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e92:	5ccb      	ldrb	r3, [r1, r3]
 8002e94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	40023800 	.word	0x40023800
 8002ea0:	0800a894 	.word	0x0800a894

08002ea4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	220f      	movs	r2, #15
 8002eb2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002eb4:	4b12      	ldr	r3, [pc, #72]	; (8002f00 <HAL_RCC_GetClockConfig+0x5c>)
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f003 0203 	and.w	r2, r3, #3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002ec0:	4b0f      	ldr	r3, [pc, #60]	; (8002f00 <HAL_RCC_GetClockConfig+0x5c>)
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002ecc:	4b0c      	ldr	r3, [pc, #48]	; (8002f00 <HAL_RCC_GetClockConfig+0x5c>)
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002ed8:	4b09      	ldr	r3, [pc, #36]	; (8002f00 <HAL_RCC_GetClockConfig+0x5c>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	08db      	lsrs	r3, r3, #3
 8002ede:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002ee6:	4b07      	ldr	r3, [pc, #28]	; (8002f04 <HAL_RCC_GetClockConfig+0x60>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0207 	and.w	r2, r3, #7
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	601a      	str	r2, [r3, #0]
}
 8002ef2:	bf00      	nop
 8002ef4:	370c      	adds	r7, #12
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	40023800 	.word	0x40023800
 8002f04:	40023c00 	.word	0x40023c00

08002f08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d101      	bne.n	8002f1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e041      	b.n	8002f9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d106      	bne.n	8002f34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 f839 	bl	8002fa6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2202      	movs	r2, #2
 8002f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	3304      	adds	r3, #4
 8002f44:	4619      	mov	r1, r3
 8002f46:	4610      	mov	r0, r2
 8002f48:	f000 f9d8 	bl	80032fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3708      	adds	r7, #8
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}

08002fa6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	b083      	sub	sp, #12
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002fae:	bf00      	nop
 8002fb0:	370c      	adds	r7, #12
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
	...

08002fbc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b085      	sub	sp, #20
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d001      	beq.n	8002fd4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e04e      	b.n	8003072 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2202      	movs	r2, #2
 8002fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68da      	ldr	r2, [r3, #12]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f042 0201 	orr.w	r2, r2, #1
 8002fea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a23      	ldr	r2, [pc, #140]	; (8003080 <HAL_TIM_Base_Start_IT+0xc4>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d022      	beq.n	800303c <HAL_TIM_Base_Start_IT+0x80>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ffe:	d01d      	beq.n	800303c <HAL_TIM_Base_Start_IT+0x80>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a1f      	ldr	r2, [pc, #124]	; (8003084 <HAL_TIM_Base_Start_IT+0xc8>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d018      	beq.n	800303c <HAL_TIM_Base_Start_IT+0x80>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a1e      	ldr	r2, [pc, #120]	; (8003088 <HAL_TIM_Base_Start_IT+0xcc>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d013      	beq.n	800303c <HAL_TIM_Base_Start_IT+0x80>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a1c      	ldr	r2, [pc, #112]	; (800308c <HAL_TIM_Base_Start_IT+0xd0>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d00e      	beq.n	800303c <HAL_TIM_Base_Start_IT+0x80>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a1b      	ldr	r2, [pc, #108]	; (8003090 <HAL_TIM_Base_Start_IT+0xd4>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d009      	beq.n	800303c <HAL_TIM_Base_Start_IT+0x80>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a19      	ldr	r2, [pc, #100]	; (8003094 <HAL_TIM_Base_Start_IT+0xd8>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d004      	beq.n	800303c <HAL_TIM_Base_Start_IT+0x80>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a18      	ldr	r2, [pc, #96]	; (8003098 <HAL_TIM_Base_Start_IT+0xdc>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d111      	bne.n	8003060 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f003 0307 	and.w	r3, r3, #7
 8003046:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2b06      	cmp	r3, #6
 800304c:	d010      	beq.n	8003070 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f042 0201 	orr.w	r2, r2, #1
 800305c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800305e:	e007      	b.n	8003070 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f042 0201 	orr.w	r2, r2, #1
 800306e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	3714      	adds	r7, #20
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	40010000 	.word	0x40010000
 8003084:	40000400 	.word	0x40000400
 8003088:	40000800 	.word	0x40000800
 800308c:	40000c00 	.word	0x40000c00
 8003090:	40010400 	.word	0x40010400
 8003094:	40014000 	.word	0x40014000
 8003098:	40001800 	.word	0x40001800

0800309c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d122      	bne.n	80030f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	f003 0302 	and.w	r3, r3, #2
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d11b      	bne.n	80030f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f06f 0202 	mvn.w	r2, #2
 80030c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2201      	movs	r2, #1
 80030ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	f003 0303 	and.w	r3, r3, #3
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d003      	beq.n	80030e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 f8ee 	bl	80032c0 <HAL_TIM_IC_CaptureCallback>
 80030e4:	e005      	b.n	80030f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f000 f8e0 	bl	80032ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f000 f8f1 	bl	80032d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	f003 0304 	and.w	r3, r3, #4
 8003102:	2b04      	cmp	r3, #4
 8003104:	d122      	bne.n	800314c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	f003 0304 	and.w	r3, r3, #4
 8003110:	2b04      	cmp	r3, #4
 8003112:	d11b      	bne.n	800314c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f06f 0204 	mvn.w	r2, #4
 800311c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2202      	movs	r2, #2
 8003122:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800312e:	2b00      	cmp	r3, #0
 8003130:	d003      	beq.n	800313a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 f8c4 	bl	80032c0 <HAL_TIM_IC_CaptureCallback>
 8003138:	e005      	b.n	8003146 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 f8b6 	bl	80032ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f000 f8c7 	bl	80032d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	f003 0308 	and.w	r3, r3, #8
 8003156:	2b08      	cmp	r3, #8
 8003158:	d122      	bne.n	80031a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	f003 0308 	and.w	r3, r3, #8
 8003164:	2b08      	cmp	r3, #8
 8003166:	d11b      	bne.n	80031a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f06f 0208 	mvn.w	r2, #8
 8003170:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2204      	movs	r2, #4
 8003176:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	69db      	ldr	r3, [r3, #28]
 800317e:	f003 0303 	and.w	r3, r3, #3
 8003182:	2b00      	cmp	r3, #0
 8003184:	d003      	beq.n	800318e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 f89a 	bl	80032c0 <HAL_TIM_IC_CaptureCallback>
 800318c:	e005      	b.n	800319a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 f88c 	bl	80032ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f000 f89d 	bl	80032d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	f003 0310 	and.w	r3, r3, #16
 80031aa:	2b10      	cmp	r3, #16
 80031ac:	d122      	bne.n	80031f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	f003 0310 	and.w	r3, r3, #16
 80031b8:	2b10      	cmp	r3, #16
 80031ba:	d11b      	bne.n	80031f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f06f 0210 	mvn.w	r2, #16
 80031c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2208      	movs	r2, #8
 80031ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	69db      	ldr	r3, [r3, #28]
 80031d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d003      	beq.n	80031e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 f870 	bl	80032c0 <HAL_TIM_IC_CaptureCallback>
 80031e0:	e005      	b.n	80031ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 f862 	bl	80032ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f000 f873 	bl	80032d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d10e      	bne.n	8003220 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	f003 0301 	and.w	r3, r3, #1
 800320c:	2b01      	cmp	r3, #1
 800320e:	d107      	bne.n	8003220 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f06f 0201 	mvn.w	r2, #1
 8003218:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f7fd faac 	bl	8000778 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800322a:	2b80      	cmp	r3, #128	; 0x80
 800322c:	d10e      	bne.n	800324c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003238:	2b80      	cmp	r3, #128	; 0x80
 800323a:	d107      	bne.n	800324c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003244:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 f902 	bl	8003450 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	691b      	ldr	r3, [r3, #16]
 8003252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003256:	2b40      	cmp	r3, #64	; 0x40
 8003258:	d10e      	bne.n	8003278 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003264:	2b40      	cmp	r3, #64	; 0x40
 8003266:	d107      	bne.n	8003278 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003270:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 f838 	bl	80032e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	f003 0320 	and.w	r3, r3, #32
 8003282:	2b20      	cmp	r3, #32
 8003284:	d10e      	bne.n	80032a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	f003 0320 	and.w	r3, r3, #32
 8003290:	2b20      	cmp	r3, #32
 8003292:	d107      	bne.n	80032a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f06f 0220 	mvn.w	r2, #32
 800329c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 f8cc 	bl	800343c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032a4:	bf00      	nop
 80032a6:	3708      	adds	r7, #8
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032b4:	bf00      	nop
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80032c8:	bf00      	nop
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr

080032d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80032dc:	bf00      	nop
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032f0:	bf00      	nop
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4a40      	ldr	r2, [pc, #256]	; (8003410 <TIM_Base_SetConfig+0x114>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d013      	beq.n	800333c <TIM_Base_SetConfig+0x40>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800331a:	d00f      	beq.n	800333c <TIM_Base_SetConfig+0x40>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	4a3d      	ldr	r2, [pc, #244]	; (8003414 <TIM_Base_SetConfig+0x118>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d00b      	beq.n	800333c <TIM_Base_SetConfig+0x40>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4a3c      	ldr	r2, [pc, #240]	; (8003418 <TIM_Base_SetConfig+0x11c>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d007      	beq.n	800333c <TIM_Base_SetConfig+0x40>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4a3b      	ldr	r2, [pc, #236]	; (800341c <TIM_Base_SetConfig+0x120>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d003      	beq.n	800333c <TIM_Base_SetConfig+0x40>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	4a3a      	ldr	r2, [pc, #232]	; (8003420 <TIM_Base_SetConfig+0x124>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d108      	bne.n	800334e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003342:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	68fa      	ldr	r2, [r7, #12]
 800334a:	4313      	orrs	r3, r2
 800334c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a2f      	ldr	r2, [pc, #188]	; (8003410 <TIM_Base_SetConfig+0x114>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d02b      	beq.n	80033ae <TIM_Base_SetConfig+0xb2>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800335c:	d027      	beq.n	80033ae <TIM_Base_SetConfig+0xb2>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a2c      	ldr	r2, [pc, #176]	; (8003414 <TIM_Base_SetConfig+0x118>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d023      	beq.n	80033ae <TIM_Base_SetConfig+0xb2>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a2b      	ldr	r2, [pc, #172]	; (8003418 <TIM_Base_SetConfig+0x11c>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d01f      	beq.n	80033ae <TIM_Base_SetConfig+0xb2>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a2a      	ldr	r2, [pc, #168]	; (800341c <TIM_Base_SetConfig+0x120>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d01b      	beq.n	80033ae <TIM_Base_SetConfig+0xb2>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a29      	ldr	r2, [pc, #164]	; (8003420 <TIM_Base_SetConfig+0x124>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d017      	beq.n	80033ae <TIM_Base_SetConfig+0xb2>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a28      	ldr	r2, [pc, #160]	; (8003424 <TIM_Base_SetConfig+0x128>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d013      	beq.n	80033ae <TIM_Base_SetConfig+0xb2>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a27      	ldr	r2, [pc, #156]	; (8003428 <TIM_Base_SetConfig+0x12c>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d00f      	beq.n	80033ae <TIM_Base_SetConfig+0xb2>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a26      	ldr	r2, [pc, #152]	; (800342c <TIM_Base_SetConfig+0x130>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d00b      	beq.n	80033ae <TIM_Base_SetConfig+0xb2>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a25      	ldr	r2, [pc, #148]	; (8003430 <TIM_Base_SetConfig+0x134>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d007      	beq.n	80033ae <TIM_Base_SetConfig+0xb2>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a24      	ldr	r2, [pc, #144]	; (8003434 <TIM_Base_SetConfig+0x138>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d003      	beq.n	80033ae <TIM_Base_SetConfig+0xb2>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a23      	ldr	r2, [pc, #140]	; (8003438 <TIM_Base_SetConfig+0x13c>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d108      	bne.n	80033c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	4313      	orrs	r3, r2
 80033be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	695b      	ldr	r3, [r3, #20]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	68fa      	ldr	r2, [r7, #12]
 80033d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	689a      	ldr	r2, [r3, #8]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a0a      	ldr	r2, [pc, #40]	; (8003410 <TIM_Base_SetConfig+0x114>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d003      	beq.n	80033f4 <TIM_Base_SetConfig+0xf8>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a0c      	ldr	r2, [pc, #48]	; (8003420 <TIM_Base_SetConfig+0x124>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d103      	bne.n	80033fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	691a      	ldr	r2, [r3, #16]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	615a      	str	r2, [r3, #20]
}
 8003402:	bf00      	nop
 8003404:	3714      	adds	r7, #20
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	40010000 	.word	0x40010000
 8003414:	40000400 	.word	0x40000400
 8003418:	40000800 	.word	0x40000800
 800341c:	40000c00 	.word	0x40000c00
 8003420:	40010400 	.word	0x40010400
 8003424:	40014000 	.word	0x40014000
 8003428:	40014400 	.word	0x40014400
 800342c:	40014800 	.word	0x40014800
 8003430:	40001800 	.word	0x40001800
 8003434:	40001c00 	.word	0x40001c00
 8003438:	40002000 	.word	0x40002000

0800343c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003444:	bf00      	nop
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003458:	bf00      	nop
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003464:	b084      	sub	sp, #16
 8003466:	b580      	push	{r7, lr}
 8003468:	b084      	sub	sp, #16
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
 800346e:	f107 001c 	add.w	r0, r7, #28
 8003472:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003478:	2b01      	cmp	r3, #1
 800347a:	d122      	bne.n	80034c2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003480:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003490:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80034a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d105      	bne.n	80034b6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f001 fbee 	bl	8004c98 <USB_CoreReset>
 80034bc:	4603      	mov	r3, r0
 80034be:	73fb      	strb	r3, [r7, #15]
 80034c0:	e01a      	b.n	80034f8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f001 fbe2 	bl	8004c98 <USB_CoreReset>
 80034d4:	4603      	mov	r3, r0
 80034d6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80034d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d106      	bne.n	80034ec <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	639a      	str	r2, [r3, #56]	; 0x38
 80034ea:	e005      	b.n	80034f8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80034f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d10b      	bne.n	8003516 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f043 0206 	orr.w	r2, r3, #6
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f043 0220 	orr.w	r2, r3, #32
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003516:	7bfb      	ldrb	r3, [r7, #15]
}
 8003518:	4618      	mov	r0, r3
 800351a:	3710      	adds	r7, #16
 800351c:	46bd      	mov	sp, r7
 800351e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003522:	b004      	add	sp, #16
 8003524:	4770      	bx	lr
	...

08003528 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003528:	b480      	push	{r7}
 800352a:	b087      	sub	sp, #28
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	4613      	mov	r3, r2
 8003534:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003536:	79fb      	ldrb	r3, [r7, #7]
 8003538:	2b02      	cmp	r3, #2
 800353a:	d165      	bne.n	8003608 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	4a41      	ldr	r2, [pc, #260]	; (8003644 <USB_SetTurnaroundTime+0x11c>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d906      	bls.n	8003552 <USB_SetTurnaroundTime+0x2a>
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	4a40      	ldr	r2, [pc, #256]	; (8003648 <USB_SetTurnaroundTime+0x120>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d202      	bcs.n	8003552 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800354c:	230f      	movs	r3, #15
 800354e:	617b      	str	r3, [r7, #20]
 8003550:	e062      	b.n	8003618 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	4a3c      	ldr	r2, [pc, #240]	; (8003648 <USB_SetTurnaroundTime+0x120>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d306      	bcc.n	8003568 <USB_SetTurnaroundTime+0x40>
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	4a3b      	ldr	r2, [pc, #236]	; (800364c <USB_SetTurnaroundTime+0x124>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d202      	bcs.n	8003568 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003562:	230e      	movs	r3, #14
 8003564:	617b      	str	r3, [r7, #20]
 8003566:	e057      	b.n	8003618 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	4a38      	ldr	r2, [pc, #224]	; (800364c <USB_SetTurnaroundTime+0x124>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d306      	bcc.n	800357e <USB_SetTurnaroundTime+0x56>
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	4a37      	ldr	r2, [pc, #220]	; (8003650 <USB_SetTurnaroundTime+0x128>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d202      	bcs.n	800357e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003578:	230d      	movs	r3, #13
 800357a:	617b      	str	r3, [r7, #20]
 800357c:	e04c      	b.n	8003618 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	4a33      	ldr	r2, [pc, #204]	; (8003650 <USB_SetTurnaroundTime+0x128>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d306      	bcc.n	8003594 <USB_SetTurnaroundTime+0x6c>
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	4a32      	ldr	r2, [pc, #200]	; (8003654 <USB_SetTurnaroundTime+0x12c>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d802      	bhi.n	8003594 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800358e:	230c      	movs	r3, #12
 8003590:	617b      	str	r3, [r7, #20]
 8003592:	e041      	b.n	8003618 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	4a2f      	ldr	r2, [pc, #188]	; (8003654 <USB_SetTurnaroundTime+0x12c>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d906      	bls.n	80035aa <USB_SetTurnaroundTime+0x82>
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	4a2e      	ldr	r2, [pc, #184]	; (8003658 <USB_SetTurnaroundTime+0x130>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d802      	bhi.n	80035aa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80035a4:	230b      	movs	r3, #11
 80035a6:	617b      	str	r3, [r7, #20]
 80035a8:	e036      	b.n	8003618 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	4a2a      	ldr	r2, [pc, #168]	; (8003658 <USB_SetTurnaroundTime+0x130>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d906      	bls.n	80035c0 <USB_SetTurnaroundTime+0x98>
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	4a29      	ldr	r2, [pc, #164]	; (800365c <USB_SetTurnaroundTime+0x134>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d802      	bhi.n	80035c0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80035ba:	230a      	movs	r3, #10
 80035bc:	617b      	str	r3, [r7, #20]
 80035be:	e02b      	b.n	8003618 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	4a26      	ldr	r2, [pc, #152]	; (800365c <USB_SetTurnaroundTime+0x134>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d906      	bls.n	80035d6 <USB_SetTurnaroundTime+0xae>
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	4a25      	ldr	r2, [pc, #148]	; (8003660 <USB_SetTurnaroundTime+0x138>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d202      	bcs.n	80035d6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80035d0:	2309      	movs	r3, #9
 80035d2:	617b      	str	r3, [r7, #20]
 80035d4:	e020      	b.n	8003618 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	4a21      	ldr	r2, [pc, #132]	; (8003660 <USB_SetTurnaroundTime+0x138>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d306      	bcc.n	80035ec <USB_SetTurnaroundTime+0xc4>
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	4a20      	ldr	r2, [pc, #128]	; (8003664 <USB_SetTurnaroundTime+0x13c>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d802      	bhi.n	80035ec <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80035e6:	2308      	movs	r3, #8
 80035e8:	617b      	str	r3, [r7, #20]
 80035ea:	e015      	b.n	8003618 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	4a1d      	ldr	r2, [pc, #116]	; (8003664 <USB_SetTurnaroundTime+0x13c>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d906      	bls.n	8003602 <USB_SetTurnaroundTime+0xda>
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	4a1c      	ldr	r2, [pc, #112]	; (8003668 <USB_SetTurnaroundTime+0x140>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d202      	bcs.n	8003602 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80035fc:	2307      	movs	r3, #7
 80035fe:	617b      	str	r3, [r7, #20]
 8003600:	e00a      	b.n	8003618 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003602:	2306      	movs	r3, #6
 8003604:	617b      	str	r3, [r7, #20]
 8003606:	e007      	b.n	8003618 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003608:	79fb      	ldrb	r3, [r7, #7]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d102      	bne.n	8003614 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800360e:	2309      	movs	r3, #9
 8003610:	617b      	str	r3, [r7, #20]
 8003612:	e001      	b.n	8003618 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003614:	2309      	movs	r3, #9
 8003616:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	68da      	ldr	r2, [r3, #12]
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	029b      	lsls	r3, r3, #10
 800362c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003630:	431a      	orrs	r2, r3
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003636:	2300      	movs	r3, #0
}
 8003638:	4618      	mov	r0, r3
 800363a:	371c      	adds	r7, #28
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr
 8003644:	00d8acbf 	.word	0x00d8acbf
 8003648:	00e4e1c0 	.word	0x00e4e1c0
 800364c:	00f42400 	.word	0x00f42400
 8003650:	01067380 	.word	0x01067380
 8003654:	011a499f 	.word	0x011a499f
 8003658:	01312cff 	.word	0x01312cff
 800365c:	014ca43f 	.word	0x014ca43f
 8003660:	016e3600 	.word	0x016e3600
 8003664:	01a6ab1f 	.word	0x01a6ab1f
 8003668:	01e84800 	.word	0x01e84800

0800366c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f043 0201 	orr.w	r2, r3, #1
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	370c      	adds	r7, #12
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr

0800368e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800368e:	b480      	push	{r7}
 8003690:	b083      	sub	sp, #12
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f023 0201 	bic.w	r2, r3, #1
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80036a2:	2300      	movs	r3, #0
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	460b      	mov	r3, r1
 80036ba:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80036bc:	2300      	movs	r3, #0
 80036be:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80036cc:	78fb      	ldrb	r3, [r7, #3]
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d115      	bne.n	80036fe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80036de:	2001      	movs	r0, #1
 80036e0:	f7fd fa0a 	bl	8000af8 <HAL_Delay>
      ms++;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	3301      	adds	r3, #1
 80036e8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f001 fa45 	bl	8004b7a <USB_GetMode>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d01e      	beq.n	8003734 <USB_SetCurrentMode+0x84>
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2b31      	cmp	r3, #49	; 0x31
 80036fa:	d9f0      	bls.n	80036de <USB_SetCurrentMode+0x2e>
 80036fc:	e01a      	b.n	8003734 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80036fe:	78fb      	ldrb	r3, [r7, #3]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d115      	bne.n	8003730 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003710:	2001      	movs	r0, #1
 8003712:	f7fd f9f1 	bl	8000af8 <HAL_Delay>
      ms++;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	3301      	adds	r3, #1
 800371a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f001 fa2c 	bl	8004b7a <USB_GetMode>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d005      	beq.n	8003734 <USB_SetCurrentMode+0x84>
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2b31      	cmp	r3, #49	; 0x31
 800372c:	d9f0      	bls.n	8003710 <USB_SetCurrentMode+0x60>
 800372e:	e001      	b.n	8003734 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e005      	b.n	8003740 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2b32      	cmp	r3, #50	; 0x32
 8003738:	d101      	bne.n	800373e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e000      	b.n	8003740 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800373e:	2300      	movs	r3, #0
}
 8003740:	4618      	mov	r0, r3
 8003742:	3710      	adds	r7, #16
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003748:	b084      	sub	sp, #16
 800374a:	b580      	push	{r7, lr}
 800374c:	b086      	sub	sp, #24
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
 8003752:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003756:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800375a:	2300      	movs	r3, #0
 800375c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003762:	2300      	movs	r3, #0
 8003764:	613b      	str	r3, [r7, #16]
 8003766:	e009      	b.n	800377c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	3340      	adds	r3, #64	; 0x40
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	4413      	add	r3, r2
 8003772:	2200      	movs	r2, #0
 8003774:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	3301      	adds	r3, #1
 800377a:	613b      	str	r3, [r7, #16]
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	2b0e      	cmp	r3, #14
 8003780:	d9f2      	bls.n	8003768 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003782:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003784:	2b00      	cmp	r3, #0
 8003786:	d11c      	bne.n	80037c2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	68fa      	ldr	r2, [r7, #12]
 8003792:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003796:	f043 0302 	orr.w	r3, r3, #2
 800379a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ac:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	639a      	str	r2, [r3, #56]	; 0x38
 80037c0:	e00b      	b.n	80037da <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80037e0:	461a      	mov	r2, r3
 80037e2:	2300      	movs	r3, #0
 80037e4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037ec:	4619      	mov	r1, r3
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037f4:	461a      	mov	r2, r3
 80037f6:	680b      	ldr	r3, [r1, #0]
 80037f8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80037fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d10c      	bne.n	800381a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003802:	2b00      	cmp	r3, #0
 8003804:	d104      	bne.n	8003810 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003806:	2100      	movs	r1, #0
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f000 f965 	bl	8003ad8 <USB_SetDevSpeed>
 800380e:	e008      	b.n	8003822 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003810:	2101      	movs	r1, #1
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 f960 	bl	8003ad8 <USB_SetDevSpeed>
 8003818:	e003      	b.n	8003822 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800381a:	2103      	movs	r1, #3
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f000 f95b 	bl	8003ad8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003822:	2110      	movs	r1, #16
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f000 f8f3 	bl	8003a10 <USB_FlushTxFifo>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d001      	beq.n	8003834 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f000 f91f 	bl	8003a78 <USB_FlushRxFifo>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d001      	beq.n	8003844 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800384a:	461a      	mov	r2, r3
 800384c:	2300      	movs	r3, #0
 800384e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003856:	461a      	mov	r2, r3
 8003858:	2300      	movs	r3, #0
 800385a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003862:	461a      	mov	r2, r3
 8003864:	2300      	movs	r3, #0
 8003866:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003868:	2300      	movs	r3, #0
 800386a:	613b      	str	r3, [r7, #16]
 800386c:	e043      	b.n	80038f6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	015a      	lsls	r2, r3, #5
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	4413      	add	r3, r2
 8003876:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003880:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003884:	d118      	bne.n	80038b8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d10a      	bne.n	80038a2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	015a      	lsls	r2, r3, #5
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	4413      	add	r3, r2
 8003894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003898:	461a      	mov	r2, r3
 800389a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800389e:	6013      	str	r3, [r2, #0]
 80038a0:	e013      	b.n	80038ca <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	015a      	lsls	r2, r3, #5
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	4413      	add	r3, r2
 80038aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038ae:	461a      	mov	r2, r3
 80038b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80038b4:	6013      	str	r3, [r2, #0]
 80038b6:	e008      	b.n	80038ca <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	015a      	lsls	r2, r3, #5
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	4413      	add	r3, r2
 80038c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038c4:	461a      	mov	r2, r3
 80038c6:	2300      	movs	r3, #0
 80038c8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	015a      	lsls	r2, r3, #5
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	4413      	add	r3, r2
 80038d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038d6:	461a      	mov	r2, r3
 80038d8:	2300      	movs	r3, #0
 80038da:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	015a      	lsls	r2, r3, #5
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	4413      	add	r3, r2
 80038e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038e8:	461a      	mov	r2, r3
 80038ea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80038ee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	3301      	adds	r3, #1
 80038f4:	613b      	str	r3, [r7, #16]
 80038f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d3b7      	bcc.n	800386e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80038fe:	2300      	movs	r3, #0
 8003900:	613b      	str	r3, [r7, #16]
 8003902:	e043      	b.n	800398c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	015a      	lsls	r2, r3, #5
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	4413      	add	r3, r2
 800390c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003916:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800391a:	d118      	bne.n	800394e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d10a      	bne.n	8003938 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	015a      	lsls	r2, r3, #5
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	4413      	add	r3, r2
 800392a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800392e:	461a      	mov	r2, r3
 8003930:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003934:	6013      	str	r3, [r2, #0]
 8003936:	e013      	b.n	8003960 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	015a      	lsls	r2, r3, #5
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	4413      	add	r3, r2
 8003940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003944:	461a      	mov	r2, r3
 8003946:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800394a:	6013      	str	r3, [r2, #0]
 800394c:	e008      	b.n	8003960 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	015a      	lsls	r2, r3, #5
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	4413      	add	r3, r2
 8003956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800395a:	461a      	mov	r2, r3
 800395c:	2300      	movs	r3, #0
 800395e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	015a      	lsls	r2, r3, #5
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	4413      	add	r3, r2
 8003968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800396c:	461a      	mov	r2, r3
 800396e:	2300      	movs	r3, #0
 8003970:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	015a      	lsls	r2, r3, #5
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	4413      	add	r3, r2
 800397a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800397e:	461a      	mov	r2, r3
 8003980:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003984:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	3301      	adds	r3, #1
 800398a:	613b      	str	r3, [r7, #16]
 800398c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	429a      	cmp	r2, r3
 8003992:	d3b7      	bcc.n	8003904 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800399a:	691b      	ldr	r3, [r3, #16]
 800399c:	68fa      	ldr	r2, [r7, #12]
 800399e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039a6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80039b4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80039b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d105      	bne.n	80039c8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	699b      	ldr	r3, [r3, #24]
 80039c0:	f043 0210 	orr.w	r2, r3, #16
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	699a      	ldr	r2, [r3, #24]
 80039cc:	4b0f      	ldr	r3, [pc, #60]	; (8003a0c <USB_DevInit+0x2c4>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80039d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d005      	beq.n	80039e6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	699b      	ldr	r3, [r3, #24]
 80039de:	f043 0208 	orr.w	r2, r3, #8
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80039e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d107      	bne.n	80039fc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	699b      	ldr	r3, [r3, #24]
 80039f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80039f4:	f043 0304 	orr.w	r3, r3, #4
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80039fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3718      	adds	r7, #24
 8003a02:	46bd      	mov	sp, r7
 8003a04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003a08:	b004      	add	sp, #16
 8003a0a:	4770      	bx	lr
 8003a0c:	803c3800 	.word	0x803c3800

08003a10 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b085      	sub	sp, #20
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	3301      	adds	r3, #1
 8003a22:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	4a13      	ldr	r2, [pc, #76]	; (8003a74 <USB_FlushTxFifo+0x64>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d901      	bls.n	8003a30 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e01b      	b.n	8003a68 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	691b      	ldr	r3, [r3, #16]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	daf2      	bge.n	8003a1e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	019b      	lsls	r3, r3, #6
 8003a40:	f043 0220 	orr.w	r2, r3, #32
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	4a08      	ldr	r2, [pc, #32]	; (8003a74 <USB_FlushTxFifo+0x64>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d901      	bls.n	8003a5a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e006      	b.n	8003a68 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	f003 0320 	and.w	r3, r3, #32
 8003a62:	2b20      	cmp	r3, #32
 8003a64:	d0f0      	beq.n	8003a48 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003a66:	2300      	movs	r3, #0
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3714      	adds	r7, #20
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr
 8003a74:	00030d40 	.word	0x00030d40

08003a78 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b085      	sub	sp, #20
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003a80:	2300      	movs	r3, #0
 8003a82:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	3301      	adds	r3, #1
 8003a88:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	4a11      	ldr	r2, [pc, #68]	; (8003ad4 <USB_FlushRxFifo+0x5c>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d901      	bls.n	8003a96 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e018      	b.n	8003ac8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	daf2      	bge.n	8003a84 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2210      	movs	r2, #16
 8003aa6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	3301      	adds	r3, #1
 8003aac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	4a08      	ldr	r2, [pc, #32]	; (8003ad4 <USB_FlushRxFifo+0x5c>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d901      	bls.n	8003aba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e006      	b.n	8003ac8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	f003 0310 	and.w	r3, r3, #16
 8003ac2:	2b10      	cmp	r3, #16
 8003ac4:	d0f0      	beq.n	8003aa8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003ac6:	2300      	movs	r3, #0
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3714      	adds	r7, #20
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr
 8003ad4:	00030d40 	.word	0x00030d40

08003ad8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b085      	sub	sp, #20
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	78fb      	ldrb	r3, [r7, #3]
 8003af2:	68f9      	ldr	r1, [r7, #12]
 8003af4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003af8:	4313      	orrs	r3, r2
 8003afa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3714      	adds	r7, #20
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr

08003b0a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003b0a:	b480      	push	{r7}
 8003b0c:	b087      	sub	sp, #28
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f003 0306 	and.w	r3, r3, #6
 8003b22:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d102      	bne.n	8003b30 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	75fb      	strb	r3, [r7, #23]
 8003b2e:	e00a      	b.n	8003b46 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d002      	beq.n	8003b3c <USB_GetDevSpeed+0x32>
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2b06      	cmp	r3, #6
 8003b3a:	d102      	bne.n	8003b42 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003b3c:	2302      	movs	r3, #2
 8003b3e:	75fb      	strb	r3, [r7, #23]
 8003b40:	e001      	b.n	8003b46 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003b42:	230f      	movs	r3, #15
 8003b44:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003b46:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	371c      	adds	r7, #28
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b085      	sub	sp, #20
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	785b      	ldrb	r3, [r3, #1]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d13a      	bne.n	8003be6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b76:	69da      	ldr	r2, [r3, #28]
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	f003 030f 	and.w	r3, r3, #15
 8003b80:	2101      	movs	r1, #1
 8003b82:	fa01 f303 	lsl.w	r3, r1, r3
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	68f9      	ldr	r1, [r7, #12]
 8003b8a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	015a      	lsls	r2, r3, #5
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	4413      	add	r3, r2
 8003b9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d155      	bne.n	8003c54 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	015a      	lsls	r2, r3, #5
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	4413      	add	r3, r2
 8003bb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	791b      	ldrb	r3, [r3, #4]
 8003bc2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003bc4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	059b      	lsls	r3, r3, #22
 8003bca:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	68ba      	ldr	r2, [r7, #8]
 8003bd0:	0151      	lsls	r1, r2, #5
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	440a      	add	r2, r1
 8003bd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003be2:	6013      	str	r3, [r2, #0]
 8003be4:	e036      	b.n	8003c54 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bec:	69da      	ldr	r2, [r3, #28]
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	f003 030f 	and.w	r3, r3, #15
 8003bf6:	2101      	movs	r1, #1
 8003bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8003bfc:	041b      	lsls	r3, r3, #16
 8003bfe:	68f9      	ldr	r1, [r7, #12]
 8003c00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c04:	4313      	orrs	r3, r2
 8003c06:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	015a      	lsls	r2, r3, #5
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	4413      	add	r3, r2
 8003c10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d11a      	bne.n	8003c54 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	015a      	lsls	r2, r3, #5
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	4413      	add	r3, r2
 8003c26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	791b      	ldrb	r3, [r3, #4]
 8003c38:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003c3a:	430b      	orrs	r3, r1
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	68ba      	ldr	r2, [r7, #8]
 8003c40:	0151      	lsls	r1, r2, #5
 8003c42:	68fa      	ldr	r2, [r7, #12]
 8003c44:	440a      	add	r2, r1
 8003c46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c52:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3714      	adds	r7, #20
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
	...

08003c64 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	785b      	ldrb	r3, [r3, #1]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d161      	bne.n	8003d44 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	015a      	lsls	r2, r3, #5
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	4413      	add	r3, r2
 8003c88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c96:	d11f      	bne.n	8003cd8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	015a      	lsls	r2, r3, #5
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68ba      	ldr	r2, [r7, #8]
 8003ca8:	0151      	lsls	r1, r2, #5
 8003caa:	68fa      	ldr	r2, [r7, #12]
 8003cac:	440a      	add	r2, r1
 8003cae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cb2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003cb6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	015a      	lsls	r2, r3, #5
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	4413      	add	r3, r2
 8003cc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	68ba      	ldr	r2, [r7, #8]
 8003cc8:	0151      	lsls	r1, r2, #5
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	440a      	add	r2, r1
 8003cce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cd2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003cd6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	f003 030f 	and.w	r3, r3, #15
 8003ce8:	2101      	movs	r1, #1
 8003cea:	fa01 f303 	lsl.w	r3, r1, r3
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	43db      	mvns	r3, r3
 8003cf2:	68f9      	ldr	r1, [r7, #12]
 8003cf4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d02:	69da      	ldr	r2, [r3, #28]
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	f003 030f 	and.w	r3, r3, #15
 8003d0c:	2101      	movs	r1, #1
 8003d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	43db      	mvns	r3, r3
 8003d16:	68f9      	ldr	r1, [r7, #12]
 8003d18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	015a      	lsls	r2, r3, #5
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	4413      	add	r3, r2
 8003d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	0159      	lsls	r1, r3, #5
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	440b      	add	r3, r1
 8003d36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	4b35      	ldr	r3, [pc, #212]	; (8003e14 <USB_DeactivateEndpoint+0x1b0>)
 8003d3e:	4013      	ands	r3, r2
 8003d40:	600b      	str	r3, [r1, #0]
 8003d42:	e060      	b.n	8003e06 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	015a      	lsls	r2, r3, #5
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	4413      	add	r3, r2
 8003d4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d5a:	d11f      	bne.n	8003d9c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	015a      	lsls	r2, r3, #5
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	4413      	add	r3, r2
 8003d64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68ba      	ldr	r2, [r7, #8]
 8003d6c:	0151      	lsls	r1, r2, #5
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	440a      	add	r2, r1
 8003d72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d76:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003d7a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	015a      	lsls	r2, r3, #5
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	4413      	add	r3, r2
 8003d84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68ba      	ldr	r2, [r7, #8]
 8003d8c:	0151      	lsls	r1, r2, #5
 8003d8e:	68fa      	ldr	r2, [r7, #12]
 8003d90:	440a      	add	r2, r1
 8003d92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d96:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d9a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003da2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	f003 030f 	and.w	r3, r3, #15
 8003dac:	2101      	movs	r1, #1
 8003dae:	fa01 f303 	lsl.w	r3, r1, r3
 8003db2:	041b      	lsls	r3, r3, #16
 8003db4:	43db      	mvns	r3, r3
 8003db6:	68f9      	ldr	r1, [r7, #12]
 8003db8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dc6:	69da      	ldr	r2, [r3, #28]
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	f003 030f 	and.w	r3, r3, #15
 8003dd0:	2101      	movs	r1, #1
 8003dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8003dd6:	041b      	lsls	r3, r3, #16
 8003dd8:	43db      	mvns	r3, r3
 8003dda:	68f9      	ldr	r1, [r7, #12]
 8003ddc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003de0:	4013      	ands	r3, r2
 8003de2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	015a      	lsls	r2, r3, #5
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	4413      	add	r3, r2
 8003dec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	0159      	lsls	r1, r3, #5
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	440b      	add	r3, r1
 8003dfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dfe:	4619      	mov	r1, r3
 8003e00:	4b05      	ldr	r3, [pc, #20]	; (8003e18 <USB_DeactivateEndpoint+0x1b4>)
 8003e02:	4013      	ands	r3, r2
 8003e04:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003e06:	2300      	movs	r3, #0
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3714      	adds	r7, #20
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr
 8003e14:	ec337800 	.word	0xec337800
 8003e18:	eff37800 	.word	0xeff37800

08003e1c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b08a      	sub	sp, #40	; 0x28
 8003e20:	af02      	add	r7, sp, #8
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	4613      	mov	r3, r2
 8003e28:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	785b      	ldrb	r3, [r3, #1]
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	f040 815c 	bne.w	80040f6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d132      	bne.n	8003eac <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	015a      	lsls	r2, r3, #5
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	4413      	add	r3, r2
 8003e4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e52:	691b      	ldr	r3, [r3, #16]
 8003e54:	69ba      	ldr	r2, [r7, #24]
 8003e56:	0151      	lsls	r1, r2, #5
 8003e58:	69fa      	ldr	r2, [r7, #28]
 8003e5a:	440a      	add	r2, r1
 8003e5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e60:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003e64:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003e68:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	015a      	lsls	r2, r3, #5
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	4413      	add	r3, r2
 8003e72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e76:	691b      	ldr	r3, [r3, #16]
 8003e78:	69ba      	ldr	r2, [r7, #24]
 8003e7a:	0151      	lsls	r1, r2, #5
 8003e7c:	69fa      	ldr	r2, [r7, #28]
 8003e7e:	440a      	add	r2, r1
 8003e80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e84:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003e88:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003e8a:	69bb      	ldr	r3, [r7, #24]
 8003e8c:	015a      	lsls	r2, r3, #5
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	4413      	add	r3, r2
 8003e92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e96:	691b      	ldr	r3, [r3, #16]
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	0151      	lsls	r1, r2, #5
 8003e9c:	69fa      	ldr	r2, [r7, #28]
 8003e9e:	440a      	add	r2, r1
 8003ea0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ea4:	0cdb      	lsrs	r3, r3, #19
 8003ea6:	04db      	lsls	r3, r3, #19
 8003ea8:	6113      	str	r3, [r2, #16]
 8003eaa:	e074      	b.n	8003f96 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	015a      	lsls	r2, r3, #5
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	4413      	add	r3, r2
 8003eb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	69ba      	ldr	r2, [r7, #24]
 8003ebc:	0151      	lsls	r1, r2, #5
 8003ebe:	69fa      	ldr	r2, [r7, #28]
 8003ec0:	440a      	add	r2, r1
 8003ec2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ec6:	0cdb      	lsrs	r3, r3, #19
 8003ec8:	04db      	lsls	r3, r3, #19
 8003eca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	015a      	lsls	r2, r3, #5
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	69ba      	ldr	r2, [r7, #24]
 8003edc:	0151      	lsls	r1, r2, #5
 8003ede:	69fa      	ldr	r2, [r7, #28]
 8003ee0:	440a      	add	r2, r1
 8003ee2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ee6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003eea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003eee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	015a      	lsls	r2, r3, #5
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	4413      	add	r3, r2
 8003ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003efc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	6999      	ldr	r1, [r3, #24]
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	440b      	add	r3, r1
 8003f08:	1e59      	subs	r1, r3, #1
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f12:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003f14:	4b9d      	ldr	r3, [pc, #628]	; (800418c <USB_EPStartXfer+0x370>)
 8003f16:	400b      	ands	r3, r1
 8003f18:	69b9      	ldr	r1, [r7, #24]
 8003f1a:	0148      	lsls	r0, r1, #5
 8003f1c:	69f9      	ldr	r1, [r7, #28]
 8003f1e:	4401      	add	r1, r0
 8003f20:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003f24:	4313      	orrs	r3, r2
 8003f26:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	015a      	lsls	r2, r3, #5
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	4413      	add	r3, r2
 8003f30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f34:	691a      	ldr	r2, [r3, #16]
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f3e:	69b9      	ldr	r1, [r7, #24]
 8003f40:	0148      	lsls	r0, r1, #5
 8003f42:	69f9      	ldr	r1, [r7, #28]
 8003f44:	4401      	add	r1, r0
 8003f46:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	791b      	ldrb	r3, [r3, #4]
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d11f      	bne.n	8003f96 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	015a      	lsls	r2, r3, #5
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	4413      	add	r3, r2
 8003f5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f62:	691b      	ldr	r3, [r3, #16]
 8003f64:	69ba      	ldr	r2, [r7, #24]
 8003f66:	0151      	lsls	r1, r2, #5
 8003f68:	69fa      	ldr	r2, [r7, #28]
 8003f6a:	440a      	add	r2, r1
 8003f6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f70:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003f74:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003f76:	69bb      	ldr	r3, [r7, #24]
 8003f78:	015a      	lsls	r2, r3, #5
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	69ba      	ldr	r2, [r7, #24]
 8003f86:	0151      	lsls	r1, r2, #5
 8003f88:	69fa      	ldr	r2, [r7, #28]
 8003f8a:	440a      	add	r2, r1
 8003f8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f90:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003f94:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003f96:	79fb      	ldrb	r3, [r7, #7]
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d14b      	bne.n	8004034 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	695b      	ldr	r3, [r3, #20]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d009      	beq.n	8003fb8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	015a      	lsls	r2, r3, #5
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	4413      	add	r3, r2
 8003fac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	791b      	ldrb	r3, [r3, #4]
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d128      	bne.n	8004012 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d110      	bne.n	8003ff2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	015a      	lsls	r2, r3, #5
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	4413      	add	r3, r2
 8003fd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	69ba      	ldr	r2, [r7, #24]
 8003fe0:	0151      	lsls	r1, r2, #5
 8003fe2:	69fa      	ldr	r2, [r7, #28]
 8003fe4:	440a      	add	r2, r1
 8003fe6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003fee:	6013      	str	r3, [r2, #0]
 8003ff0:	e00f      	b.n	8004012 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	015a      	lsls	r2, r3, #5
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	69ba      	ldr	r2, [r7, #24]
 8004002:	0151      	lsls	r1, r2, #5
 8004004:	69fa      	ldr	r2, [r7, #28]
 8004006:	440a      	add	r2, r1
 8004008:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800400c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004010:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	015a      	lsls	r2, r3, #5
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	4413      	add	r3, r2
 800401a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	69ba      	ldr	r2, [r7, #24]
 8004022:	0151      	lsls	r1, r2, #5
 8004024:	69fa      	ldr	r2, [r7, #28]
 8004026:	440a      	add	r2, r1
 8004028:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800402c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004030:	6013      	str	r3, [r2, #0]
 8004032:	e133      	b.n	800429c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	015a      	lsls	r2, r3, #5
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	4413      	add	r3, r2
 800403c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	69ba      	ldr	r2, [r7, #24]
 8004044:	0151      	lsls	r1, r2, #5
 8004046:	69fa      	ldr	r2, [r7, #28]
 8004048:	440a      	add	r2, r1
 800404a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800404e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004052:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	791b      	ldrb	r3, [r3, #4]
 8004058:	2b01      	cmp	r3, #1
 800405a:	d015      	beq.n	8004088 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	2b00      	cmp	r3, #0
 8004062:	f000 811b 	beq.w	800429c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800406c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	f003 030f 	and.w	r3, r3, #15
 8004076:	2101      	movs	r1, #1
 8004078:	fa01 f303 	lsl.w	r3, r1, r3
 800407c:	69f9      	ldr	r1, [r7, #28]
 800407e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004082:	4313      	orrs	r3, r2
 8004084:	634b      	str	r3, [r1, #52]	; 0x34
 8004086:	e109      	b.n	800429c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004094:	2b00      	cmp	r3, #0
 8004096:	d110      	bne.n	80040ba <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004098:	69bb      	ldr	r3, [r7, #24]
 800409a:	015a      	lsls	r2, r3, #5
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	4413      	add	r3, r2
 80040a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	69ba      	ldr	r2, [r7, #24]
 80040a8:	0151      	lsls	r1, r2, #5
 80040aa:	69fa      	ldr	r2, [r7, #28]
 80040ac:	440a      	add	r2, r1
 80040ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80040b6:	6013      	str	r3, [r2, #0]
 80040b8:	e00f      	b.n	80040da <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80040ba:	69bb      	ldr	r3, [r7, #24]
 80040bc:	015a      	lsls	r2, r3, #5
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	4413      	add	r3, r2
 80040c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	69ba      	ldr	r2, [r7, #24]
 80040ca:	0151      	lsls	r1, r2, #5
 80040cc:	69fa      	ldr	r2, [r7, #28]
 80040ce:	440a      	add	r2, r1
 80040d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040d8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	6919      	ldr	r1, [r3, #16]
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	781a      	ldrb	r2, [r3, #0]
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	699b      	ldr	r3, [r3, #24]
 80040e6:	b298      	uxth	r0, r3
 80040e8:	79fb      	ldrb	r3, [r7, #7]
 80040ea:	9300      	str	r3, [sp, #0]
 80040ec:	4603      	mov	r3, r0
 80040ee:	68f8      	ldr	r0, [r7, #12]
 80040f0:	f000 fade 	bl	80046b0 <USB_WritePacket>
 80040f4:	e0d2      	b.n	800429c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	015a      	lsls	r2, r3, #5
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	4413      	add	r3, r2
 80040fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004102:	691b      	ldr	r3, [r3, #16]
 8004104:	69ba      	ldr	r2, [r7, #24]
 8004106:	0151      	lsls	r1, r2, #5
 8004108:	69fa      	ldr	r2, [r7, #28]
 800410a:	440a      	add	r2, r1
 800410c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004110:	0cdb      	lsrs	r3, r3, #19
 8004112:	04db      	lsls	r3, r3, #19
 8004114:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	015a      	lsls	r2, r3, #5
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	4413      	add	r3, r2
 800411e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004122:	691b      	ldr	r3, [r3, #16]
 8004124:	69ba      	ldr	r2, [r7, #24]
 8004126:	0151      	lsls	r1, r2, #5
 8004128:	69fa      	ldr	r2, [r7, #28]
 800412a:	440a      	add	r2, r1
 800412c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004130:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004134:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004138:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	699b      	ldr	r3, [r3, #24]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d126      	bne.n	8004190 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	015a      	lsls	r2, r3, #5
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	4413      	add	r3, r2
 800414a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800414e:	691a      	ldr	r2, [r3, #16]
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004158:	69b9      	ldr	r1, [r7, #24]
 800415a:	0148      	lsls	r0, r1, #5
 800415c:	69f9      	ldr	r1, [r7, #28]
 800415e:	4401      	add	r1, r0
 8004160:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004164:	4313      	orrs	r3, r2
 8004166:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	015a      	lsls	r2, r3, #5
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	4413      	add	r3, r2
 8004170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	69ba      	ldr	r2, [r7, #24]
 8004178:	0151      	lsls	r1, r2, #5
 800417a:	69fa      	ldr	r2, [r7, #28]
 800417c:	440a      	add	r2, r1
 800417e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004182:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004186:	6113      	str	r3, [r2, #16]
 8004188:	e03a      	b.n	8004200 <USB_EPStartXfer+0x3e4>
 800418a:	bf00      	nop
 800418c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	699a      	ldr	r2, [r3, #24]
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	4413      	add	r3, r2
 800419a:	1e5a      	subs	r2, r3, #1
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	8afa      	ldrh	r2, [r7, #22]
 80041ac:	fb03 f202 	mul.w	r2, r3, r2
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	015a      	lsls	r2, r3, #5
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	4413      	add	r3, r2
 80041bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041c0:	691a      	ldr	r2, [r3, #16]
 80041c2:	8afb      	ldrh	r3, [r7, #22]
 80041c4:	04d9      	lsls	r1, r3, #19
 80041c6:	4b38      	ldr	r3, [pc, #224]	; (80042a8 <USB_EPStartXfer+0x48c>)
 80041c8:	400b      	ands	r3, r1
 80041ca:	69b9      	ldr	r1, [r7, #24]
 80041cc:	0148      	lsls	r0, r1, #5
 80041ce:	69f9      	ldr	r1, [r7, #28]
 80041d0:	4401      	add	r1, r0
 80041d2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80041d6:	4313      	orrs	r3, r2
 80041d8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	015a      	lsls	r2, r3, #5
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	4413      	add	r3, r2
 80041e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041e6:	691a      	ldr	r2, [r3, #16]
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	69db      	ldr	r3, [r3, #28]
 80041ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041f0:	69b9      	ldr	r1, [r7, #24]
 80041f2:	0148      	lsls	r0, r1, #5
 80041f4:	69f9      	ldr	r1, [r7, #28]
 80041f6:	4401      	add	r1, r0
 80041f8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80041fc:	4313      	orrs	r3, r2
 80041fe:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004200:	79fb      	ldrb	r3, [r7, #7]
 8004202:	2b01      	cmp	r3, #1
 8004204:	d10d      	bne.n	8004222 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d009      	beq.n	8004222 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	6919      	ldr	r1, [r3, #16]
 8004212:	69bb      	ldr	r3, [r7, #24]
 8004214:	015a      	lsls	r2, r3, #5
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	4413      	add	r3, r2
 800421a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800421e:	460a      	mov	r2, r1
 8004220:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	791b      	ldrb	r3, [r3, #4]
 8004226:	2b01      	cmp	r3, #1
 8004228:	d128      	bne.n	800427c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004236:	2b00      	cmp	r3, #0
 8004238:	d110      	bne.n	800425c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	015a      	lsls	r2, r3, #5
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	4413      	add	r3, r2
 8004242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	69ba      	ldr	r2, [r7, #24]
 800424a:	0151      	lsls	r1, r2, #5
 800424c:	69fa      	ldr	r2, [r7, #28]
 800424e:	440a      	add	r2, r1
 8004250:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004254:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004258:	6013      	str	r3, [r2, #0]
 800425a:	e00f      	b.n	800427c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	015a      	lsls	r2, r3, #5
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	4413      	add	r3, r2
 8004264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	69ba      	ldr	r2, [r7, #24]
 800426c:	0151      	lsls	r1, r2, #5
 800426e:	69fa      	ldr	r2, [r7, #28]
 8004270:	440a      	add	r2, r1
 8004272:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004276:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800427a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	015a      	lsls	r2, r3, #5
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	4413      	add	r3, r2
 8004284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	69ba      	ldr	r2, [r7, #24]
 800428c:	0151      	lsls	r1, r2, #5
 800428e:	69fa      	ldr	r2, [r7, #28]
 8004290:	440a      	add	r2, r1
 8004292:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004296:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800429a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3720      	adds	r7, #32
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	1ff80000 	.word	0x1ff80000

080042ac <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b087      	sub	sp, #28
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	4613      	mov	r3, r2
 80042b8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	785b      	ldrb	r3, [r3, #1]
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	f040 80ce 	bne.w	800446a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	699b      	ldr	r3, [r3, #24]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d132      	bne.n	800433c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	015a      	lsls	r2, r3, #5
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	4413      	add	r3, r2
 80042de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042e2:	691b      	ldr	r3, [r3, #16]
 80042e4:	693a      	ldr	r2, [r7, #16]
 80042e6:	0151      	lsls	r1, r2, #5
 80042e8:	697a      	ldr	r2, [r7, #20]
 80042ea:	440a      	add	r2, r1
 80042ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042f0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80042f4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80042f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	015a      	lsls	r2, r3, #5
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	4413      	add	r3, r2
 8004302:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004306:	691b      	ldr	r3, [r3, #16]
 8004308:	693a      	ldr	r2, [r7, #16]
 800430a:	0151      	lsls	r1, r2, #5
 800430c:	697a      	ldr	r2, [r7, #20]
 800430e:	440a      	add	r2, r1
 8004310:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004314:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004318:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	015a      	lsls	r2, r3, #5
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	4413      	add	r3, r2
 8004322:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004326:	691b      	ldr	r3, [r3, #16]
 8004328:	693a      	ldr	r2, [r7, #16]
 800432a:	0151      	lsls	r1, r2, #5
 800432c:	697a      	ldr	r2, [r7, #20]
 800432e:	440a      	add	r2, r1
 8004330:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004334:	0cdb      	lsrs	r3, r3, #19
 8004336:	04db      	lsls	r3, r3, #19
 8004338:	6113      	str	r3, [r2, #16]
 800433a:	e04e      	b.n	80043da <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	015a      	lsls	r2, r3, #5
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	4413      	add	r3, r2
 8004344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	693a      	ldr	r2, [r7, #16]
 800434c:	0151      	lsls	r1, r2, #5
 800434e:	697a      	ldr	r2, [r7, #20]
 8004350:	440a      	add	r2, r1
 8004352:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004356:	0cdb      	lsrs	r3, r3, #19
 8004358:	04db      	lsls	r3, r3, #19
 800435a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	015a      	lsls	r2, r3, #5
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	4413      	add	r3, r2
 8004364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	693a      	ldr	r2, [r7, #16]
 800436c:	0151      	lsls	r1, r2, #5
 800436e:	697a      	ldr	r2, [r7, #20]
 8004370:	440a      	add	r2, r1
 8004372:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004376:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800437a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800437e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	699a      	ldr	r2, [r3, #24]
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	429a      	cmp	r2, r3
 800438a:	d903      	bls.n	8004394 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	68da      	ldr	r2, [r3, #12]
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	015a      	lsls	r2, r3, #5
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	4413      	add	r3, r2
 800439c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	693a      	ldr	r2, [r7, #16]
 80043a4:	0151      	lsls	r1, r2, #5
 80043a6:	697a      	ldr	r2, [r7, #20]
 80043a8:	440a      	add	r2, r1
 80043aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80043b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	015a      	lsls	r2, r3, #5
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	4413      	add	r3, r2
 80043bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043c0:	691a      	ldr	r2, [r3, #16]
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043ca:	6939      	ldr	r1, [r7, #16]
 80043cc:	0148      	lsls	r0, r1, #5
 80043ce:	6979      	ldr	r1, [r7, #20]
 80043d0:	4401      	add	r1, r0
 80043d2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80043d6:	4313      	orrs	r3, r2
 80043d8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80043da:	79fb      	ldrb	r3, [r7, #7]
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d11e      	bne.n	800441e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	695b      	ldr	r3, [r3, #20]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d009      	beq.n	80043fc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	015a      	lsls	r2, r3, #5
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	4413      	add	r3, r2
 80043f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043f4:	461a      	mov	r2, r3
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	015a      	lsls	r2, r3, #5
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	4413      	add	r3, r2
 8004404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	693a      	ldr	r2, [r7, #16]
 800440c:	0151      	lsls	r1, r2, #5
 800440e:	697a      	ldr	r2, [r7, #20]
 8004410:	440a      	add	r2, r1
 8004412:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004416:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800441a:	6013      	str	r3, [r2, #0]
 800441c:	e097      	b.n	800454e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	015a      	lsls	r2, r3, #5
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	4413      	add	r3, r2
 8004426:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	693a      	ldr	r2, [r7, #16]
 800442e:	0151      	lsls	r1, r2, #5
 8004430:	697a      	ldr	r2, [r7, #20]
 8004432:	440a      	add	r2, r1
 8004434:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004438:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800443c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	699b      	ldr	r3, [r3, #24]
 8004442:	2b00      	cmp	r3, #0
 8004444:	f000 8083 	beq.w	800454e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800444e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	f003 030f 	and.w	r3, r3, #15
 8004458:	2101      	movs	r1, #1
 800445a:	fa01 f303 	lsl.w	r3, r1, r3
 800445e:	6979      	ldr	r1, [r7, #20]
 8004460:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004464:	4313      	orrs	r3, r2
 8004466:	634b      	str	r3, [r1, #52]	; 0x34
 8004468:	e071      	b.n	800454e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	015a      	lsls	r2, r3, #5
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	4413      	add	r3, r2
 8004472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004476:	691b      	ldr	r3, [r3, #16]
 8004478:	693a      	ldr	r2, [r7, #16]
 800447a:	0151      	lsls	r1, r2, #5
 800447c:	697a      	ldr	r2, [r7, #20]
 800447e:	440a      	add	r2, r1
 8004480:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004484:	0cdb      	lsrs	r3, r3, #19
 8004486:	04db      	lsls	r3, r3, #19
 8004488:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	015a      	lsls	r2, r3, #5
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	4413      	add	r3, r2
 8004492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004496:	691b      	ldr	r3, [r3, #16]
 8004498:	693a      	ldr	r2, [r7, #16]
 800449a:	0151      	lsls	r1, r2, #5
 800449c:	697a      	ldr	r2, [r7, #20]
 800449e:	440a      	add	r2, r1
 80044a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80044a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80044ac:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d003      	beq.n	80044be <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	68da      	ldr	r2, [r3, #12]
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	68da      	ldr	r2, [r3, #12]
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	015a      	lsls	r2, r3, #5
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	4413      	add	r3, r2
 80044ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	693a      	ldr	r2, [r7, #16]
 80044d6:	0151      	lsls	r1, r2, #5
 80044d8:	697a      	ldr	r2, [r7, #20]
 80044da:	440a      	add	r2, r1
 80044dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80044e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	015a      	lsls	r2, r3, #5
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	4413      	add	r3, r2
 80044ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044f2:	691a      	ldr	r2, [r3, #16]
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	69db      	ldr	r3, [r3, #28]
 80044f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044fc:	6939      	ldr	r1, [r7, #16]
 80044fe:	0148      	lsls	r0, r1, #5
 8004500:	6979      	ldr	r1, [r7, #20]
 8004502:	4401      	add	r1, r0
 8004504:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004508:	4313      	orrs	r3, r2
 800450a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800450c:	79fb      	ldrb	r3, [r7, #7]
 800450e:	2b01      	cmp	r3, #1
 8004510:	d10d      	bne.n	800452e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d009      	beq.n	800452e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	6919      	ldr	r1, [r3, #16]
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	015a      	lsls	r2, r3, #5
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	4413      	add	r3, r2
 8004526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800452a:	460a      	mov	r2, r1
 800452c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	015a      	lsls	r2, r3, #5
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	4413      	add	r3, r2
 8004536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	693a      	ldr	r2, [r7, #16]
 800453e:	0151      	lsls	r1, r2, #5
 8004540:	697a      	ldr	r2, [r7, #20]
 8004542:	440a      	add	r2, r1
 8004544:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004548:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800454c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	371c      	adds	r7, #28
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800455c:	b480      	push	{r7}
 800455e:	b087      	sub	sp, #28
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004566:	2300      	movs	r3, #0
 8004568:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800456a:	2300      	movs	r3, #0
 800456c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	785b      	ldrb	r3, [r3, #1]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d14a      	bne.n	8004610 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	015a      	lsls	r2, r3, #5
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	4413      	add	r3, r2
 8004584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800458e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004592:	f040 8086 	bne.w	80046a2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	015a      	lsls	r2, r3, #5
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	4413      	add	r3, r2
 80045a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	683a      	ldr	r2, [r7, #0]
 80045a8:	7812      	ldrb	r2, [r2, #0]
 80045aa:	0151      	lsls	r1, r2, #5
 80045ac:	693a      	ldr	r2, [r7, #16]
 80045ae:	440a      	add	r2, r1
 80045b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045b4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80045b8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	015a      	lsls	r2, r3, #5
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	4413      	add	r3, r2
 80045c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	683a      	ldr	r2, [r7, #0]
 80045cc:	7812      	ldrb	r2, [r2, #0]
 80045ce:	0151      	lsls	r1, r2, #5
 80045d0:	693a      	ldr	r2, [r7, #16]
 80045d2:	440a      	add	r2, r1
 80045d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80045dc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	3301      	adds	r3, #1
 80045e2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f242 7210 	movw	r2, #10000	; 0x2710
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d902      	bls.n	80045f4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	75fb      	strb	r3, [r7, #23]
          break;
 80045f2:	e056      	b.n	80046a2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	015a      	lsls	r2, r3, #5
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	4413      	add	r3, r2
 80045fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004608:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800460c:	d0e7      	beq.n	80045de <USB_EPStopXfer+0x82>
 800460e:	e048      	b.n	80046a2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	015a      	lsls	r2, r3, #5
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	4413      	add	r3, r2
 800461a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004624:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004628:	d13b      	bne.n	80046a2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	015a      	lsls	r2, r3, #5
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	4413      	add	r3, r2
 8004634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	683a      	ldr	r2, [r7, #0]
 800463c:	7812      	ldrb	r2, [r2, #0]
 800463e:	0151      	lsls	r1, r2, #5
 8004640:	693a      	ldr	r2, [r7, #16]
 8004642:	440a      	add	r2, r1
 8004644:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004648:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800464c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	015a      	lsls	r2, r3, #5
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	4413      	add	r3, r2
 8004658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	683a      	ldr	r2, [r7, #0]
 8004660:	7812      	ldrb	r2, [r2, #0]
 8004662:	0151      	lsls	r1, r2, #5
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	440a      	add	r2, r1
 8004668:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800466c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004670:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	3301      	adds	r3, #1
 8004676:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f242 7210 	movw	r2, #10000	; 0x2710
 800467e:	4293      	cmp	r3, r2
 8004680:	d902      	bls.n	8004688 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	75fb      	strb	r3, [r7, #23]
          break;
 8004686:	e00c      	b.n	80046a2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	015a      	lsls	r2, r3, #5
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	4413      	add	r3, r2
 8004692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800469c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046a0:	d0e7      	beq.n	8004672 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80046a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	371c      	adds	r7, #28
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b089      	sub	sp, #36	; 0x24
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	4611      	mov	r1, r2
 80046bc:	461a      	mov	r2, r3
 80046be:	460b      	mov	r3, r1
 80046c0:	71fb      	strb	r3, [r7, #7]
 80046c2:	4613      	mov	r3, r2
 80046c4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80046ce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d123      	bne.n	800471e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80046d6:	88bb      	ldrh	r3, [r7, #4]
 80046d8:	3303      	adds	r3, #3
 80046da:	089b      	lsrs	r3, r3, #2
 80046dc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80046de:	2300      	movs	r3, #0
 80046e0:	61bb      	str	r3, [r7, #24]
 80046e2:	e018      	b.n	8004716 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80046e4:	79fb      	ldrb	r3, [r7, #7]
 80046e6:	031a      	lsls	r2, r3, #12
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	4413      	add	r3, r2
 80046ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046f0:	461a      	mov	r2, r3
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	3301      	adds	r3, #1
 80046fc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	3301      	adds	r3, #1
 8004702:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	3301      	adds	r3, #1
 8004708:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	3301      	adds	r3, #1
 800470e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	3301      	adds	r3, #1
 8004714:	61bb      	str	r3, [r7, #24]
 8004716:	69ba      	ldr	r2, [r7, #24]
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	429a      	cmp	r2, r3
 800471c:	d3e2      	bcc.n	80046e4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800471e:	2300      	movs	r3, #0
}
 8004720:	4618      	mov	r0, r3
 8004722:	3724      	adds	r7, #36	; 0x24
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr

0800472c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800472c:	b480      	push	{r7}
 800472e:	b08b      	sub	sp, #44	; 0x2c
 8004730:	af00      	add	r7, sp, #0
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	60b9      	str	r1, [r7, #8]
 8004736:	4613      	mov	r3, r2
 8004738:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004742:	88fb      	ldrh	r3, [r7, #6]
 8004744:	089b      	lsrs	r3, r3, #2
 8004746:	b29b      	uxth	r3, r3
 8004748:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800474a:	88fb      	ldrh	r3, [r7, #6]
 800474c:	f003 0303 	and.w	r3, r3, #3
 8004750:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004752:	2300      	movs	r3, #0
 8004754:	623b      	str	r3, [r7, #32]
 8004756:	e014      	b.n	8004782 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004762:	601a      	str	r2, [r3, #0]
    pDest++;
 8004764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004766:	3301      	adds	r3, #1
 8004768:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800476a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476c:	3301      	adds	r3, #1
 800476e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004772:	3301      	adds	r3, #1
 8004774:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004778:	3301      	adds	r3, #1
 800477a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800477c:	6a3b      	ldr	r3, [r7, #32]
 800477e:	3301      	adds	r3, #1
 8004780:	623b      	str	r3, [r7, #32]
 8004782:	6a3a      	ldr	r2, [r7, #32]
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	429a      	cmp	r2, r3
 8004788:	d3e6      	bcc.n	8004758 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800478a:	8bfb      	ldrh	r3, [r7, #30]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d01e      	beq.n	80047ce <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004790:	2300      	movs	r3, #0
 8004792:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800479a:	461a      	mov	r2, r3
 800479c:	f107 0310 	add.w	r3, r7, #16
 80047a0:	6812      	ldr	r2, [r2, #0]
 80047a2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80047a4:	693a      	ldr	r2, [r7, #16]
 80047a6:	6a3b      	ldr	r3, [r7, #32]
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	00db      	lsls	r3, r3, #3
 80047ac:	fa22 f303 	lsr.w	r3, r2, r3
 80047b0:	b2da      	uxtb	r2, r3
 80047b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b4:	701a      	strb	r2, [r3, #0]
      i++;
 80047b6:	6a3b      	ldr	r3, [r7, #32]
 80047b8:	3301      	adds	r3, #1
 80047ba:	623b      	str	r3, [r7, #32]
      pDest++;
 80047bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047be:	3301      	adds	r3, #1
 80047c0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80047c2:	8bfb      	ldrh	r3, [r7, #30]
 80047c4:	3b01      	subs	r3, #1
 80047c6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80047c8:	8bfb      	ldrh	r3, [r7, #30]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d1ea      	bne.n	80047a4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80047ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	372c      	adds	r7, #44	; 0x2c
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr

080047dc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80047dc:	b480      	push	{r7}
 80047de:	b085      	sub	sp, #20
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	785b      	ldrb	r3, [r3, #1]
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d12c      	bne.n	8004852 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	015a      	lsls	r2, r3, #5
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	4413      	add	r3, r2
 8004800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	db12      	blt.n	8004830 <USB_EPSetStall+0x54>
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d00f      	beq.n	8004830 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	015a      	lsls	r2, r3, #5
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	4413      	add	r3, r2
 8004818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	68ba      	ldr	r2, [r7, #8]
 8004820:	0151      	lsls	r1, r2, #5
 8004822:	68fa      	ldr	r2, [r7, #12]
 8004824:	440a      	add	r2, r1
 8004826:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800482a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800482e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	015a      	lsls	r2, r3, #5
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	4413      	add	r3, r2
 8004838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	68ba      	ldr	r2, [r7, #8]
 8004840:	0151      	lsls	r1, r2, #5
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	440a      	add	r2, r1
 8004846:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800484a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800484e:	6013      	str	r3, [r2, #0]
 8004850:	e02b      	b.n	80048aa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	015a      	lsls	r2, r3, #5
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	4413      	add	r3, r2
 800485a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	db12      	blt.n	800488a <USB_EPSetStall+0xae>
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d00f      	beq.n	800488a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	015a      	lsls	r2, r3, #5
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	4413      	add	r3, r2
 8004872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68ba      	ldr	r2, [r7, #8]
 800487a:	0151      	lsls	r1, r2, #5
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	440a      	add	r2, r1
 8004880:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004884:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004888:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	015a      	lsls	r2, r3, #5
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	4413      	add	r3, r2
 8004892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	68ba      	ldr	r2, [r7, #8]
 800489a:	0151      	lsls	r1, r2, #5
 800489c:	68fa      	ldr	r2, [r7, #12]
 800489e:	440a      	add	r2, r1
 80048a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80048a8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80048aa:	2300      	movs	r3, #0
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3714      	adds	r7, #20
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr

080048b8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b085      	sub	sp, #20
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	785b      	ldrb	r3, [r3, #1]
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d128      	bne.n	8004926 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	015a      	lsls	r2, r3, #5
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	4413      	add	r3, r2
 80048dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	68ba      	ldr	r2, [r7, #8]
 80048e4:	0151      	lsls	r1, r2, #5
 80048e6:	68fa      	ldr	r2, [r7, #12]
 80048e8:	440a      	add	r2, r1
 80048ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80048f2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	791b      	ldrb	r3, [r3, #4]
 80048f8:	2b03      	cmp	r3, #3
 80048fa:	d003      	beq.n	8004904 <USB_EPClearStall+0x4c>
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	791b      	ldrb	r3, [r3, #4]
 8004900:	2b02      	cmp	r3, #2
 8004902:	d138      	bne.n	8004976 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	015a      	lsls	r2, r3, #5
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	4413      	add	r3, r2
 800490c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68ba      	ldr	r2, [r7, #8]
 8004914:	0151      	lsls	r1, r2, #5
 8004916:	68fa      	ldr	r2, [r7, #12]
 8004918:	440a      	add	r2, r1
 800491a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800491e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004922:	6013      	str	r3, [r2, #0]
 8004924:	e027      	b.n	8004976 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	015a      	lsls	r2, r3, #5
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	4413      	add	r3, r2
 800492e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68ba      	ldr	r2, [r7, #8]
 8004936:	0151      	lsls	r1, r2, #5
 8004938:	68fa      	ldr	r2, [r7, #12]
 800493a:	440a      	add	r2, r1
 800493c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004940:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004944:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	791b      	ldrb	r3, [r3, #4]
 800494a:	2b03      	cmp	r3, #3
 800494c:	d003      	beq.n	8004956 <USB_EPClearStall+0x9e>
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	791b      	ldrb	r3, [r3, #4]
 8004952:	2b02      	cmp	r3, #2
 8004954:	d10f      	bne.n	8004976 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	015a      	lsls	r2, r3, #5
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	4413      	add	r3, r2
 800495e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	68ba      	ldr	r2, [r7, #8]
 8004966:	0151      	lsls	r1, r2, #5
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	440a      	add	r2, r1
 800496c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004970:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004974:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004976:	2300      	movs	r3, #0
}
 8004978:	4618      	mov	r0, r3
 800497a:	3714      	adds	r7, #20
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr

08004984 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004984:	b480      	push	{r7}
 8004986:	b085      	sub	sp, #20
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	460b      	mov	r3, r1
 800498e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68fa      	ldr	r2, [r7, #12]
 800499e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049a2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80049a6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	78fb      	ldrb	r3, [r7, #3]
 80049b2:	011b      	lsls	r3, r3, #4
 80049b4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80049b8:	68f9      	ldr	r1, [r7, #12]
 80049ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049be:	4313      	orrs	r3, r2
 80049c0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3714      	adds	r7, #20
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr

080049d0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b085      	sub	sp, #20
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80049ea:	f023 0303 	bic.w	r3, r3, #3
 80049ee:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	68fa      	ldr	r2, [r7, #12]
 80049fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049fe:	f023 0302 	bic.w	r3, r3, #2
 8004a02:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3714      	adds	r7, #20
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr

08004a12 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004a12:	b480      	push	{r7}
 8004a14:	b085      	sub	sp, #20
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68fa      	ldr	r2, [r7, #12]
 8004a28:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004a2c:	f023 0303 	bic.w	r3, r3, #3
 8004a30:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	68fa      	ldr	r2, [r7, #12]
 8004a3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a40:	f043 0302 	orr.w	r3, r3, #2
 8004a44:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004a46:	2300      	movs	r3, #0
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3714      	adds	r7, #20
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b085      	sub	sp, #20
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	695b      	ldr	r3, [r3, #20]
 8004a60:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	699b      	ldr	r3, [r3, #24]
 8004a66:	68fa      	ldr	r2, [r7, #12]
 8004a68:	4013      	ands	r3, r2
 8004a6a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3714      	adds	r7, #20
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr

08004a7a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004a7a:	b480      	push	{r7}
 8004a7c:	b085      	sub	sp, #20
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a8c:	699b      	ldr	r3, [r3, #24]
 8004a8e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a96:	69db      	ldr	r3, [r3, #28]
 8004a98:	68ba      	ldr	r2, [r7, #8]
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	0c1b      	lsrs	r3, r3, #16
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3714      	adds	r7, #20
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr

08004aae <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004aae:	b480      	push	{r7}
 8004ab0:	b085      	sub	sp, #20
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ac0:	699b      	ldr	r3, [r3, #24]
 8004ac2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aca:	69db      	ldr	r3, [r3, #28]
 8004acc:	68ba      	ldr	r2, [r7, #8]
 8004ace:	4013      	ands	r3, r2
 8004ad0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	b29b      	uxth	r3, r3
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3714      	adds	r7, #20
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr

08004ae2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004ae2:	b480      	push	{r7}
 8004ae4:	b085      	sub	sp, #20
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
 8004aea:	460b      	mov	r3, r1
 8004aec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004af2:	78fb      	ldrb	r3, [r7, #3]
 8004af4:	015a      	lsls	r2, r3, #5
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	4413      	add	r3, r2
 8004afa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b08:	695b      	ldr	r3, [r3, #20]
 8004b0a:	68ba      	ldr	r2, [r7, #8]
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004b10:	68bb      	ldr	r3, [r7, #8]
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3714      	adds	r7, #20
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr

08004b1e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004b1e:	b480      	push	{r7}
 8004b20:	b087      	sub	sp, #28
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
 8004b26:	460b      	mov	r3, r1
 8004b28:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b40:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004b42:	78fb      	ldrb	r3, [r7, #3]
 8004b44:	f003 030f 	and.w	r3, r3, #15
 8004b48:	68fa      	ldr	r2, [r7, #12]
 8004b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b4e:	01db      	lsls	r3, r3, #7
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	693a      	ldr	r2, [r7, #16]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004b58:	78fb      	ldrb	r3, [r7, #3]
 8004b5a:	015a      	lsls	r2, r3, #5
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	4413      	add	r3, r2
 8004b60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	693a      	ldr	r2, [r7, #16]
 8004b68:	4013      	ands	r3, r2
 8004b6a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004b6c:	68bb      	ldr	r3, [r7, #8]
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	371c      	adds	r7, #28
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr

08004b7a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004b7a:	b480      	push	{r7}
 8004b7c:	b083      	sub	sp, #12
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	695b      	ldr	r3, [r3, #20]
 8004b86:	f003 0301 	and.w	r3, r3, #1
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	370c      	adds	r7, #12
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr

08004b96 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004b96:	b480      	push	{r7}
 8004b98:	b085      	sub	sp, #20
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	68fa      	ldr	r2, [r7, #12]
 8004bac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bb0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004bb4:	f023 0307 	bic.w	r3, r3, #7
 8004bb8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	68fa      	ldr	r2, [r7, #12]
 8004bc4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bcc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004bce:	2300      	movs	r3, #0
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3714      	adds	r7, #20
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr

08004bdc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b087      	sub	sp, #28
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	460b      	mov	r3, r1
 8004be6:	607a      	str	r2, [r7, #4]
 8004be8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	333c      	adds	r3, #60	; 0x3c
 8004bf2:	3304      	adds	r3, #4
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	4a26      	ldr	r2, [pc, #152]	; (8004c94 <USB_EP0_OutStart+0xb8>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d90a      	bls.n	8004c16 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c10:	d101      	bne.n	8004c16 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004c12:	2300      	movs	r3, #0
 8004c14:	e037      	b.n	8004c86 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	2300      	movs	r3, #0
 8004c20:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	697a      	ldr	r2, [r7, #20]
 8004c2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c34:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	697a      	ldr	r2, [r7, #20]
 8004c40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c44:	f043 0318 	orr.w	r3, r3, #24
 8004c48:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	697a      	ldr	r2, [r7, #20]
 8004c54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c58:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004c5c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004c5e:	7afb      	ldrb	r3, [r7, #11]
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d10f      	bne.n	8004c84 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	697a      	ldr	r2, [r7, #20]
 8004c7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c7e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004c82:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004c84:	2300      	movs	r3, #0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	371c      	adds	r7, #28
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr
 8004c92:	bf00      	nop
 8004c94:	4f54300a 	.word	0x4f54300a

08004c98 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b085      	sub	sp, #20
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	4a13      	ldr	r2, [pc, #76]	; (8004cfc <USB_CoreReset+0x64>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d901      	bls.n	8004cb6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e01b      	b.n	8004cee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	daf2      	bge.n	8004ca4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	f043 0201 	orr.w	r2, r3, #1
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	4a09      	ldr	r2, [pc, #36]	; (8004cfc <USB_CoreReset+0x64>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d901      	bls.n	8004ce0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004cdc:	2303      	movs	r3, #3
 8004cde:	e006      	b.n	8004cee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	691b      	ldr	r3, [r3, #16]
 8004ce4:	f003 0301 	and.w	r3, r3, #1
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d0f0      	beq.n	8004cce <USB_CoreReset+0x36>

  return HAL_OK;
 8004cec:	2300      	movs	r3, #0
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3714      	adds	r7, #20
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr
 8004cfa:	bf00      	nop
 8004cfc:	00030d40 	.word	0x00030d40

08004d00 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	460b      	mov	r3, r1
 8004d0a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004d0c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004d10:	f005 fa52 	bl	800a1b8 <USBD_static_malloc>
 8004d14:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d109      	bne.n	8004d30 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	32b0      	adds	r2, #176	; 0xb0
 8004d26:	2100      	movs	r1, #0
 8004d28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004d2c:	2302      	movs	r3, #2
 8004d2e:	e0d4      	b.n	8004eda <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004d30:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004d34:	2100      	movs	r1, #0
 8004d36:	68f8      	ldr	r0, [r7, #12]
 8004d38:	f005 fb66 	bl	800a408 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	32b0      	adds	r2, #176	; 0xb0
 8004d46:	68f9      	ldr	r1, [r7, #12]
 8004d48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	32b0      	adds	r2, #176	; 0xb0
 8004d56:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	7c1b      	ldrb	r3, [r3, #16]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d138      	bne.n	8004dda <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004d68:	4b5e      	ldr	r3, [pc, #376]	; (8004ee4 <USBD_CDC_Init+0x1e4>)
 8004d6a:	7819      	ldrb	r1, [r3, #0]
 8004d6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d70:	2202      	movs	r2, #2
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f005 f8fd 	bl	8009f72 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004d78:	4b5a      	ldr	r3, [pc, #360]	; (8004ee4 <USBD_CDC_Init+0x1e4>)
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	f003 020f 	and.w	r2, r3, #15
 8004d80:	6879      	ldr	r1, [r7, #4]
 8004d82:	4613      	mov	r3, r2
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	4413      	add	r3, r2
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	440b      	add	r3, r1
 8004d8c:	3324      	adds	r3, #36	; 0x24
 8004d8e:	2201      	movs	r2, #1
 8004d90:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004d92:	4b55      	ldr	r3, [pc, #340]	; (8004ee8 <USBD_CDC_Init+0x1e8>)
 8004d94:	7819      	ldrb	r1, [r3, #0]
 8004d96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d9a:	2202      	movs	r2, #2
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f005 f8e8 	bl	8009f72 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004da2:	4b51      	ldr	r3, [pc, #324]	; (8004ee8 <USBD_CDC_Init+0x1e8>)
 8004da4:	781b      	ldrb	r3, [r3, #0]
 8004da6:	f003 020f 	and.w	r2, r3, #15
 8004daa:	6879      	ldr	r1, [r7, #4]
 8004dac:	4613      	mov	r3, r2
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	4413      	add	r3, r2
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	440b      	add	r3, r1
 8004db6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004dba:	2201      	movs	r2, #1
 8004dbc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004dbe:	4b4b      	ldr	r3, [pc, #300]	; (8004eec <USBD_CDC_Init+0x1ec>)
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	f003 020f 	and.w	r2, r3, #15
 8004dc6:	6879      	ldr	r1, [r7, #4]
 8004dc8:	4613      	mov	r3, r2
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	4413      	add	r3, r2
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	440b      	add	r3, r1
 8004dd2:	3326      	adds	r3, #38	; 0x26
 8004dd4:	2210      	movs	r2, #16
 8004dd6:	801a      	strh	r2, [r3, #0]
 8004dd8:	e035      	b.n	8004e46 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004dda:	4b42      	ldr	r3, [pc, #264]	; (8004ee4 <USBD_CDC_Init+0x1e4>)
 8004ddc:	7819      	ldrb	r1, [r3, #0]
 8004dde:	2340      	movs	r3, #64	; 0x40
 8004de0:	2202      	movs	r2, #2
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f005 f8c5 	bl	8009f72 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004de8:	4b3e      	ldr	r3, [pc, #248]	; (8004ee4 <USBD_CDC_Init+0x1e4>)
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	f003 020f 	and.w	r2, r3, #15
 8004df0:	6879      	ldr	r1, [r7, #4]
 8004df2:	4613      	mov	r3, r2
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	4413      	add	r3, r2
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	440b      	add	r3, r1
 8004dfc:	3324      	adds	r3, #36	; 0x24
 8004dfe:	2201      	movs	r2, #1
 8004e00:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004e02:	4b39      	ldr	r3, [pc, #228]	; (8004ee8 <USBD_CDC_Init+0x1e8>)
 8004e04:	7819      	ldrb	r1, [r3, #0]
 8004e06:	2340      	movs	r3, #64	; 0x40
 8004e08:	2202      	movs	r2, #2
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f005 f8b1 	bl	8009f72 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004e10:	4b35      	ldr	r3, [pc, #212]	; (8004ee8 <USBD_CDC_Init+0x1e8>)
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	f003 020f 	and.w	r2, r3, #15
 8004e18:	6879      	ldr	r1, [r7, #4]
 8004e1a:	4613      	mov	r3, r2
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	4413      	add	r3, r2
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	440b      	add	r3, r1
 8004e24:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004e28:	2201      	movs	r2, #1
 8004e2a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004e2c:	4b2f      	ldr	r3, [pc, #188]	; (8004eec <USBD_CDC_Init+0x1ec>)
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	f003 020f 	and.w	r2, r3, #15
 8004e34:	6879      	ldr	r1, [r7, #4]
 8004e36:	4613      	mov	r3, r2
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	4413      	add	r3, r2
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	440b      	add	r3, r1
 8004e40:	3326      	adds	r3, #38	; 0x26
 8004e42:	2210      	movs	r2, #16
 8004e44:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004e46:	4b29      	ldr	r3, [pc, #164]	; (8004eec <USBD_CDC_Init+0x1ec>)
 8004e48:	7819      	ldrb	r1, [r3, #0]
 8004e4a:	2308      	movs	r3, #8
 8004e4c:	2203      	movs	r2, #3
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f005 f88f 	bl	8009f72 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004e54:	4b25      	ldr	r3, [pc, #148]	; (8004eec <USBD_CDC_Init+0x1ec>)
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	f003 020f 	and.w	r2, r3, #15
 8004e5c:	6879      	ldr	r1, [r7, #4]
 8004e5e:	4613      	mov	r3, r2
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	4413      	add	r3, r2
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	440b      	add	r3, r1
 8004e68:	3324      	adds	r3, #36	; 0x24
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	33b0      	adds	r3, #176	; 0xb0
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	4413      	add	r3, r2
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d101      	bne.n	8004ea8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8004ea4:	2302      	movs	r3, #2
 8004ea6:	e018      	b.n	8004eda <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	7c1b      	ldrb	r3, [r3, #16]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d10a      	bne.n	8004ec6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004eb0:	4b0d      	ldr	r3, [pc, #52]	; (8004ee8 <USBD_CDC_Init+0x1e8>)
 8004eb2:	7819      	ldrb	r1, [r3, #0]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004eba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f005 f946 	bl	800a150 <USBD_LL_PrepareReceive>
 8004ec4:	e008      	b.n	8004ed8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004ec6:	4b08      	ldr	r3, [pc, #32]	; (8004ee8 <USBD_CDC_Init+0x1e8>)
 8004ec8:	7819      	ldrb	r1, [r3, #0]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004ed0:	2340      	movs	r3, #64	; 0x40
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f005 f93c 	bl	800a150 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3710      	adds	r7, #16
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	20000093 	.word	0x20000093
 8004ee8:	20000094 	.word	0x20000094
 8004eec:	20000095 	.word	0x20000095

08004ef0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b082      	sub	sp, #8
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	460b      	mov	r3, r1
 8004efa:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8004efc:	4b3a      	ldr	r3, [pc, #232]	; (8004fe8 <USBD_CDC_DeInit+0xf8>)
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	4619      	mov	r1, r3
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f005 f85b 	bl	8009fbe <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8004f08:	4b37      	ldr	r3, [pc, #220]	; (8004fe8 <USBD_CDC_DeInit+0xf8>)
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	f003 020f 	and.w	r2, r3, #15
 8004f10:	6879      	ldr	r1, [r7, #4]
 8004f12:	4613      	mov	r3, r2
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	4413      	add	r3, r2
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	440b      	add	r3, r1
 8004f1c:	3324      	adds	r3, #36	; 0x24
 8004f1e:	2200      	movs	r2, #0
 8004f20:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8004f22:	4b32      	ldr	r3, [pc, #200]	; (8004fec <USBD_CDC_DeInit+0xfc>)
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	4619      	mov	r1, r3
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f005 f848 	bl	8009fbe <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8004f2e:	4b2f      	ldr	r3, [pc, #188]	; (8004fec <USBD_CDC_DeInit+0xfc>)
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	f003 020f 	and.w	r2, r3, #15
 8004f36:	6879      	ldr	r1, [r7, #4]
 8004f38:	4613      	mov	r3, r2
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	4413      	add	r3, r2
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	440b      	add	r3, r1
 8004f42:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004f46:	2200      	movs	r2, #0
 8004f48:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8004f4a:	4b29      	ldr	r3, [pc, #164]	; (8004ff0 <USBD_CDC_DeInit+0x100>)
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	4619      	mov	r1, r3
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f005 f834 	bl	8009fbe <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8004f56:	4b26      	ldr	r3, [pc, #152]	; (8004ff0 <USBD_CDC_DeInit+0x100>)
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	f003 020f 	and.w	r2, r3, #15
 8004f5e:	6879      	ldr	r1, [r7, #4]
 8004f60:	4613      	mov	r3, r2
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	4413      	add	r3, r2
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	440b      	add	r3, r1
 8004f6a:	3324      	adds	r3, #36	; 0x24
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8004f70:	4b1f      	ldr	r3, [pc, #124]	; (8004ff0 <USBD_CDC_DeInit+0x100>)
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	f003 020f 	and.w	r2, r3, #15
 8004f78:	6879      	ldr	r1, [r7, #4]
 8004f7a:	4613      	mov	r3, r2
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	4413      	add	r3, r2
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	440b      	add	r3, r1
 8004f84:	3326      	adds	r3, #38	; 0x26
 8004f86:	2200      	movs	r2, #0
 8004f88:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	32b0      	adds	r2, #176	; 0xb0
 8004f94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d01f      	beq.n	8004fdc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	33b0      	adds	r3, #176	; 0xb0
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	4413      	add	r3, r2
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	32b0      	adds	r2, #176	; 0xb0
 8004fba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f005 f908 	bl	800a1d4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	32b0      	adds	r2, #176	; 0xb0
 8004fce:	2100      	movs	r1, #0
 8004fd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3708      	adds	r7, #8
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	20000093 	.word	0x20000093
 8004fec:	20000094 	.word	0x20000094
 8004ff0:	20000095 	.word	0x20000095

08004ff4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b086      	sub	sp, #24
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	32b0      	adds	r2, #176	; 0xb0
 8005008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800500c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800500e:	2300      	movs	r3, #0
 8005010:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005012:	2300      	movs	r3, #0
 8005014:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005016:	2300      	movs	r3, #0
 8005018:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d101      	bne.n	8005024 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005020:	2303      	movs	r3, #3
 8005022:	e0bf      	b.n	80051a4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800502c:	2b00      	cmp	r3, #0
 800502e:	d050      	beq.n	80050d2 <USBD_CDC_Setup+0xde>
 8005030:	2b20      	cmp	r3, #32
 8005032:	f040 80af 	bne.w	8005194 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	88db      	ldrh	r3, [r3, #6]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d03a      	beq.n	80050b4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	b25b      	sxtb	r3, r3
 8005044:	2b00      	cmp	r3, #0
 8005046:	da1b      	bge.n	8005080 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	33b0      	adds	r3, #176	; 0xb0
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	4413      	add	r3, r2
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	683a      	ldr	r2, [r7, #0]
 800505c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800505e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005060:	683a      	ldr	r2, [r7, #0]
 8005062:	88d2      	ldrh	r2, [r2, #6]
 8005064:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	88db      	ldrh	r3, [r3, #6]
 800506a:	2b07      	cmp	r3, #7
 800506c:	bf28      	it	cs
 800506e:	2307      	movcs	r3, #7
 8005070:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	89fa      	ldrh	r2, [r7, #14]
 8005076:	4619      	mov	r1, r3
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f001 fd89 	bl	8006b90 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800507e:	e090      	b.n	80051a2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	785a      	ldrb	r2, [r3, #1]
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	88db      	ldrh	r3, [r3, #6]
 800508e:	2b3f      	cmp	r3, #63	; 0x3f
 8005090:	d803      	bhi.n	800509a <USBD_CDC_Setup+0xa6>
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	88db      	ldrh	r3, [r3, #6]
 8005096:	b2da      	uxtb	r2, r3
 8005098:	e000      	b.n	800509c <USBD_CDC_Setup+0xa8>
 800509a:	2240      	movs	r2, #64	; 0x40
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80050a2:	6939      	ldr	r1, [r7, #16]
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80050aa:	461a      	mov	r2, r3
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f001 fd9b 	bl	8006be8 <USBD_CtlPrepareRx>
      break;
 80050b2:	e076      	b.n	80051a2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	33b0      	adds	r3, #176	; 0xb0
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	4413      	add	r3, r2
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	683a      	ldr	r2, [r7, #0]
 80050c8:	7850      	ldrb	r0, [r2, #1]
 80050ca:	2200      	movs	r2, #0
 80050cc:	6839      	ldr	r1, [r7, #0]
 80050ce:	4798      	blx	r3
      break;
 80050d0:	e067      	b.n	80051a2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	785b      	ldrb	r3, [r3, #1]
 80050d6:	2b0b      	cmp	r3, #11
 80050d8:	d851      	bhi.n	800517e <USBD_CDC_Setup+0x18a>
 80050da:	a201      	add	r2, pc, #4	; (adr r2, 80050e0 <USBD_CDC_Setup+0xec>)
 80050dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050e0:	08005111 	.word	0x08005111
 80050e4:	0800518d 	.word	0x0800518d
 80050e8:	0800517f 	.word	0x0800517f
 80050ec:	0800517f 	.word	0x0800517f
 80050f0:	0800517f 	.word	0x0800517f
 80050f4:	0800517f 	.word	0x0800517f
 80050f8:	0800517f 	.word	0x0800517f
 80050fc:	0800517f 	.word	0x0800517f
 8005100:	0800517f 	.word	0x0800517f
 8005104:	0800517f 	.word	0x0800517f
 8005108:	0800513b 	.word	0x0800513b
 800510c:	08005165 	.word	0x08005165
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005116:	b2db      	uxtb	r3, r3
 8005118:	2b03      	cmp	r3, #3
 800511a:	d107      	bne.n	800512c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800511c:	f107 030a 	add.w	r3, r7, #10
 8005120:	2202      	movs	r2, #2
 8005122:	4619      	mov	r1, r3
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f001 fd33 	bl	8006b90 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800512a:	e032      	b.n	8005192 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800512c:	6839      	ldr	r1, [r7, #0]
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f001 fcbd 	bl	8006aae <USBD_CtlError>
            ret = USBD_FAIL;
 8005134:	2303      	movs	r3, #3
 8005136:	75fb      	strb	r3, [r7, #23]
          break;
 8005138:	e02b      	b.n	8005192 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005140:	b2db      	uxtb	r3, r3
 8005142:	2b03      	cmp	r3, #3
 8005144:	d107      	bne.n	8005156 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005146:	f107 030d 	add.w	r3, r7, #13
 800514a:	2201      	movs	r2, #1
 800514c:	4619      	mov	r1, r3
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f001 fd1e 	bl	8006b90 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005154:	e01d      	b.n	8005192 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005156:	6839      	ldr	r1, [r7, #0]
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f001 fca8 	bl	8006aae <USBD_CtlError>
            ret = USBD_FAIL;
 800515e:	2303      	movs	r3, #3
 8005160:	75fb      	strb	r3, [r7, #23]
          break;
 8005162:	e016      	b.n	8005192 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800516a:	b2db      	uxtb	r3, r3
 800516c:	2b03      	cmp	r3, #3
 800516e:	d00f      	beq.n	8005190 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005170:	6839      	ldr	r1, [r7, #0]
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f001 fc9b 	bl	8006aae <USBD_CtlError>
            ret = USBD_FAIL;
 8005178:	2303      	movs	r3, #3
 800517a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800517c:	e008      	b.n	8005190 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800517e:	6839      	ldr	r1, [r7, #0]
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f001 fc94 	bl	8006aae <USBD_CtlError>
          ret = USBD_FAIL;
 8005186:	2303      	movs	r3, #3
 8005188:	75fb      	strb	r3, [r7, #23]
          break;
 800518a:	e002      	b.n	8005192 <USBD_CDC_Setup+0x19e>
          break;
 800518c:	bf00      	nop
 800518e:	e008      	b.n	80051a2 <USBD_CDC_Setup+0x1ae>
          break;
 8005190:	bf00      	nop
      }
      break;
 8005192:	e006      	b.n	80051a2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005194:	6839      	ldr	r1, [r7, #0]
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f001 fc89 	bl	8006aae <USBD_CtlError>
      ret = USBD_FAIL;
 800519c:	2303      	movs	r3, #3
 800519e:	75fb      	strb	r3, [r7, #23]
      break;
 80051a0:	bf00      	nop
  }

  return (uint8_t)ret;
 80051a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3718      	adds	r7, #24
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}

080051ac <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	460b      	mov	r3, r1
 80051b6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80051be:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	32b0      	adds	r2, #176	; 0xb0
 80051ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d101      	bne.n	80051d6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80051d2:	2303      	movs	r3, #3
 80051d4:	e065      	b.n	80052a2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	32b0      	adds	r2, #176	; 0xb0
 80051e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051e4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80051e6:	78fb      	ldrb	r3, [r7, #3]
 80051e8:	f003 020f 	and.w	r2, r3, #15
 80051ec:	6879      	ldr	r1, [r7, #4]
 80051ee:	4613      	mov	r3, r2
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	4413      	add	r3, r2
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	440b      	add	r3, r1
 80051f8:	3318      	adds	r3, #24
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d02f      	beq.n	8005260 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005200:	78fb      	ldrb	r3, [r7, #3]
 8005202:	f003 020f 	and.w	r2, r3, #15
 8005206:	6879      	ldr	r1, [r7, #4]
 8005208:	4613      	mov	r3, r2
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	4413      	add	r3, r2
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	440b      	add	r3, r1
 8005212:	3318      	adds	r3, #24
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	78fb      	ldrb	r3, [r7, #3]
 8005218:	f003 010f 	and.w	r1, r3, #15
 800521c:	68f8      	ldr	r0, [r7, #12]
 800521e:	460b      	mov	r3, r1
 8005220:	00db      	lsls	r3, r3, #3
 8005222:	440b      	add	r3, r1
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	4403      	add	r3, r0
 8005228:	3348      	adds	r3, #72	; 0x48
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	fbb2 f1f3 	udiv	r1, r2, r3
 8005230:	fb01 f303 	mul.w	r3, r1, r3
 8005234:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005236:	2b00      	cmp	r3, #0
 8005238:	d112      	bne.n	8005260 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800523a:	78fb      	ldrb	r3, [r7, #3]
 800523c:	f003 020f 	and.w	r2, r3, #15
 8005240:	6879      	ldr	r1, [r7, #4]
 8005242:	4613      	mov	r3, r2
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	4413      	add	r3, r2
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	440b      	add	r3, r1
 800524c:	3318      	adds	r3, #24
 800524e:	2200      	movs	r2, #0
 8005250:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005252:	78f9      	ldrb	r1, [r7, #3]
 8005254:	2300      	movs	r3, #0
 8005256:	2200      	movs	r2, #0
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f004 ff58 	bl	800a10e <USBD_LL_Transmit>
 800525e:	e01f      	b.n	80052a0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	2200      	movs	r2, #0
 8005264:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	33b0      	adds	r3, #176	; 0xb0
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	4413      	add	r3, r2
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d010      	beq.n	80052a0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	33b0      	adds	r3, #176	; 0xb0
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	4413      	add	r3, r2
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	691b      	ldr	r3, [r3, #16]
 8005290:	68ba      	ldr	r2, [r7, #8]
 8005292:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005296:	68ba      	ldr	r2, [r7, #8]
 8005298:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800529c:	78fa      	ldrb	r2, [r7, #3]
 800529e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3710      	adds	r7, #16
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}

080052aa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80052aa:	b580      	push	{r7, lr}
 80052ac:	b084      	sub	sp, #16
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
 80052b2:	460b      	mov	r3, r1
 80052b4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	32b0      	adds	r2, #176	; 0xb0
 80052c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052c4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	32b0      	adds	r2, #176	; 0xb0
 80052d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d101      	bne.n	80052dc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80052d8:	2303      	movs	r3, #3
 80052da:	e01a      	b.n	8005312 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80052dc:	78fb      	ldrb	r3, [r7, #3]
 80052de:	4619      	mov	r1, r3
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f004 ff56 	bl	800a192 <USBD_LL_GetRxDataSize>
 80052e6:	4602      	mov	r2, r0
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	33b0      	adds	r3, #176	; 0xb0
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	4413      	add	r3, r2
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005306:	68fa      	ldr	r2, [r7, #12]
 8005308:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800530c:	4611      	mov	r1, r2
 800530e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005310:	2300      	movs	r3, #0
}
 8005312:	4618      	mov	r0, r3
 8005314:	3710      	adds	r7, #16
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}

0800531a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800531a:	b580      	push	{r7, lr}
 800531c:	b084      	sub	sp, #16
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	32b0      	adds	r2, #176	; 0xb0
 800532c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005330:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d101      	bne.n	800533c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005338:	2303      	movs	r3, #3
 800533a:	e025      	b.n	8005388 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	33b0      	adds	r3, #176	; 0xb0
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	4413      	add	r3, r2
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d01a      	beq.n	8005386 <USBD_CDC_EP0_RxReady+0x6c>
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005356:	2bff      	cmp	r3, #255	; 0xff
 8005358:	d015      	beq.n	8005386 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	33b0      	adds	r3, #176	; 0xb0
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	4413      	add	r3, r2
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8005372:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005374:	68fa      	ldr	r2, [r7, #12]
 8005376:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800537a:	b292      	uxth	r2, r2
 800537c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	22ff      	movs	r2, #255	; 0xff
 8005382:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005386:	2300      	movs	r3, #0
}
 8005388:	4618      	mov	r0, r3
 800538a:	3710      	adds	r7, #16
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b086      	sub	sp, #24
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005398:	2182      	movs	r1, #130	; 0x82
 800539a:	4818      	ldr	r0, [pc, #96]	; (80053fc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800539c:	f000 fd4f 	bl	8005e3e <USBD_GetEpDesc>
 80053a0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80053a2:	2101      	movs	r1, #1
 80053a4:	4815      	ldr	r0, [pc, #84]	; (80053fc <USBD_CDC_GetFSCfgDesc+0x6c>)
 80053a6:	f000 fd4a 	bl	8005e3e <USBD_GetEpDesc>
 80053aa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80053ac:	2181      	movs	r1, #129	; 0x81
 80053ae:	4813      	ldr	r0, [pc, #76]	; (80053fc <USBD_CDC_GetFSCfgDesc+0x6c>)
 80053b0:	f000 fd45 	bl	8005e3e <USBD_GetEpDesc>
 80053b4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d002      	beq.n	80053c2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	2210      	movs	r2, #16
 80053c0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d006      	beq.n	80053d6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	2200      	movs	r2, #0
 80053cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053d0:	711a      	strb	r2, [r3, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d006      	beq.n	80053ea <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2200      	movs	r2, #0
 80053e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053e4:	711a      	strb	r2, [r3, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2243      	movs	r2, #67	; 0x43
 80053ee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80053f0:	4b02      	ldr	r3, [pc, #8]	; (80053fc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3718      	adds	r7, #24
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	20000050 	.word	0x20000050

08005400 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b086      	sub	sp, #24
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005408:	2182      	movs	r1, #130	; 0x82
 800540a:	4818      	ldr	r0, [pc, #96]	; (800546c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800540c:	f000 fd17 	bl	8005e3e <USBD_GetEpDesc>
 8005410:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005412:	2101      	movs	r1, #1
 8005414:	4815      	ldr	r0, [pc, #84]	; (800546c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005416:	f000 fd12 	bl	8005e3e <USBD_GetEpDesc>
 800541a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800541c:	2181      	movs	r1, #129	; 0x81
 800541e:	4813      	ldr	r0, [pc, #76]	; (800546c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005420:	f000 fd0d 	bl	8005e3e <USBD_GetEpDesc>
 8005424:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d002      	beq.n	8005432 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	2210      	movs	r2, #16
 8005430:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d006      	beq.n	8005446 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	2200      	movs	r2, #0
 800543c:	711a      	strb	r2, [r3, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	f042 0202 	orr.w	r2, r2, #2
 8005444:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d006      	beq.n	800545a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2200      	movs	r2, #0
 8005450:	711a      	strb	r2, [r3, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	f042 0202 	orr.w	r2, r2, #2
 8005458:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2243      	movs	r2, #67	; 0x43
 800545e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005460:	4b02      	ldr	r3, [pc, #8]	; (800546c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005462:	4618      	mov	r0, r3
 8005464:	3718      	adds	r7, #24
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
 800546a:	bf00      	nop
 800546c:	20000050 	.word	0x20000050

08005470 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b086      	sub	sp, #24
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005478:	2182      	movs	r1, #130	; 0x82
 800547a:	4818      	ldr	r0, [pc, #96]	; (80054dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800547c:	f000 fcdf 	bl	8005e3e <USBD_GetEpDesc>
 8005480:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005482:	2101      	movs	r1, #1
 8005484:	4815      	ldr	r0, [pc, #84]	; (80054dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005486:	f000 fcda 	bl	8005e3e <USBD_GetEpDesc>
 800548a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800548c:	2181      	movs	r1, #129	; 0x81
 800548e:	4813      	ldr	r0, [pc, #76]	; (80054dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005490:	f000 fcd5 	bl	8005e3e <USBD_GetEpDesc>
 8005494:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d002      	beq.n	80054a2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	2210      	movs	r2, #16
 80054a0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d006      	beq.n	80054b6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	2200      	movs	r2, #0
 80054ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054b0:	711a      	strb	r2, [r3, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d006      	beq.n	80054ca <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2200      	movs	r2, #0
 80054c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054c4:	711a      	strb	r2, [r3, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2243      	movs	r2, #67	; 0x43
 80054ce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80054d0:	4b02      	ldr	r3, [pc, #8]	; (80054dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3718      	adds	r7, #24
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop
 80054dc:	20000050 	.word	0x20000050

080054e0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b083      	sub	sp, #12
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	220a      	movs	r2, #10
 80054ec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80054ee:	4b03      	ldr	r3, [pc, #12]	; (80054fc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	370c      	adds	r7, #12
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr
 80054fc:	2000000c 	.word	0x2000000c

08005500 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d101      	bne.n	8005514 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005510:	2303      	movs	r3, #3
 8005512:	e009      	b.n	8005528 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	33b0      	adds	r3, #176	; 0xb0
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	4413      	add	r3, r2
 8005522:	683a      	ldr	r2, [r7, #0]
 8005524:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005526:	2300      	movs	r3, #0
}
 8005528:	4618      	mov	r0, r3
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005534:	b480      	push	{r7}
 8005536:	b087      	sub	sp, #28
 8005538:	af00      	add	r7, sp, #0
 800553a:	60f8      	str	r0, [r7, #12]
 800553c:	60b9      	str	r1, [r7, #8]
 800553e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	32b0      	adds	r2, #176	; 0xb0
 800554a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800554e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d101      	bne.n	800555a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005556:	2303      	movs	r3, #3
 8005558:	e008      	b.n	800556c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	68ba      	ldr	r2, [r7, #8]
 800555e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800556a:	2300      	movs	r3, #0
}
 800556c:	4618      	mov	r0, r3
 800556e:	371c      	adds	r7, #28
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005578:	b480      	push	{r7}
 800557a:	b085      	sub	sp, #20
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	32b0      	adds	r2, #176	; 0xb0
 800558c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005590:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d101      	bne.n	800559c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005598:	2303      	movs	r3, #3
 800559a:	e004      	b.n	80055a6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	683a      	ldr	r2, [r7, #0]
 80055a0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3714      	adds	r7, #20
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr
	...

080055b4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b084      	sub	sp, #16
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	32b0      	adds	r2, #176	; 0xb0
 80055c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055ca:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80055cc:	2301      	movs	r3, #1
 80055ce:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	32b0      	adds	r2, #176	; 0xb0
 80055da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d101      	bne.n	80055e6 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80055e2:	2303      	movs	r3, #3
 80055e4:	e025      	b.n	8005632 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d11f      	bne.n	8005630 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80055f8:	4b10      	ldr	r3, [pc, #64]	; (800563c <USBD_CDC_TransmitPacket+0x88>)
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	f003 020f 	and.w	r2, r3, #15
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	4613      	mov	r3, r2
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	4413      	add	r3, r2
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	4403      	add	r3, r0
 8005612:	3318      	adds	r3, #24
 8005614:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005616:	4b09      	ldr	r3, [pc, #36]	; (800563c <USBD_CDC_TransmitPacket+0x88>)
 8005618:	7819      	ldrb	r1, [r3, #0]
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f004 fd71 	bl	800a10e <USBD_LL_Transmit>

    ret = USBD_OK;
 800562c:	2300      	movs	r3, #0
 800562e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005630:	7bfb      	ldrb	r3, [r7, #15]
}
 8005632:	4618      	mov	r0, r3
 8005634:	3710      	adds	r7, #16
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	20000093 	.word	0x20000093

08005640 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b084      	sub	sp, #16
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	32b0      	adds	r2, #176	; 0xb0
 8005652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005656:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	32b0      	adds	r2, #176	; 0xb0
 8005662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d101      	bne.n	800566e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800566a:	2303      	movs	r3, #3
 800566c:	e018      	b.n	80056a0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	7c1b      	ldrb	r3, [r3, #16]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d10a      	bne.n	800568c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005676:	4b0c      	ldr	r3, [pc, #48]	; (80056a8 <USBD_CDC_ReceivePacket+0x68>)
 8005678:	7819      	ldrb	r1, [r3, #0]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005680:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f004 fd63 	bl	800a150 <USBD_LL_PrepareReceive>
 800568a:	e008      	b.n	800569e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800568c:	4b06      	ldr	r3, [pc, #24]	; (80056a8 <USBD_CDC_ReceivePacket+0x68>)
 800568e:	7819      	ldrb	r1, [r3, #0]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005696:	2340      	movs	r3, #64	; 0x40
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f004 fd59 	bl	800a150 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800569e:	2300      	movs	r3, #0
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3710      	adds	r7, #16
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	20000094 	.word	0x20000094

080056ac <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b086      	sub	sp, #24
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	60b9      	str	r1, [r7, #8]
 80056b6:	4613      	mov	r3, r2
 80056b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d101      	bne.n	80056c4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80056c0:	2303      	movs	r3, #3
 80056c2:	e01f      	b.n	8005704 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2200      	movs	r2, #0
 80056d0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d003      	beq.n	80056ea <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	68ba      	ldr	r2, [r7, #8]
 80056e6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2201      	movs	r2, #1
 80056ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	79fa      	ldrb	r2, [r7, #7]
 80056f6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80056f8:	68f8      	ldr	r0, [r7, #12]
 80056fa:	f004 fbd3 	bl	8009ea4 <USBD_LL_Init>
 80056fe:	4603      	mov	r3, r0
 8005700:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005702:	7dfb      	ldrb	r3, [r7, #23]
}
 8005704:	4618      	mov	r0, r3
 8005706:	3718      	adds	r7, #24
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}

0800570c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005716:	2300      	movs	r3, #0
 8005718:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d101      	bne.n	8005724 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005720:	2303      	movs	r3, #3
 8005722:	e025      	b.n	8005770 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	683a      	ldr	r2, [r7, #0]
 8005728:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	32ae      	adds	r2, #174	; 0xae
 8005736:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800573a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800573c:	2b00      	cmp	r3, #0
 800573e:	d00f      	beq.n	8005760 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	32ae      	adds	r2, #174	; 0xae
 800574a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800574e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005750:	f107 020e 	add.w	r2, r7, #14
 8005754:	4610      	mov	r0, r2
 8005756:	4798      	blx	r3
 8005758:	4602      	mov	r2, r0
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005766:	1c5a      	adds	r2, r3, #1
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800576e:	2300      	movs	r3, #0
}
 8005770:	4618      	mov	r0, r3
 8005772:	3710      	adds	r7, #16
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b082      	sub	sp, #8
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f004 fbdb 	bl	8009f3c <USBD_LL_Start>
 8005786:	4603      	mov	r3, r0
}
 8005788:	4618      	mov	r0, r3
 800578a:	3708      	adds	r7, #8
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005790:	b480      	push	{r7}
 8005792:	b083      	sub	sp, #12
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005798:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800579a:	4618      	mov	r0, r3
 800579c:	370c      	adds	r7, #12
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr

080057a6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80057a6:	b580      	push	{r7, lr}
 80057a8:	b084      	sub	sp, #16
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
 80057ae:	460b      	mov	r3, r1
 80057b0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80057b2:	2300      	movs	r3, #0
 80057b4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d009      	beq.n	80057d4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	78fa      	ldrb	r2, [r7, #3]
 80057ca:	4611      	mov	r1, r2
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	4798      	blx	r3
 80057d0:	4603      	mov	r3, r0
 80057d2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80057d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3710      	adds	r7, #16
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}

080057de <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80057de:	b580      	push	{r7, lr}
 80057e0:	b084      	sub	sp, #16
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
 80057e6:	460b      	mov	r3, r1
 80057e8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80057ea:	2300      	movs	r3, #0
 80057ec:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	78fa      	ldrb	r2, [r7, #3]
 80057f8:	4611      	mov	r1, r2
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	4798      	blx	r3
 80057fe:	4603      	mov	r3, r0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d001      	beq.n	8005808 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005804:	2303      	movs	r3, #3
 8005806:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005808:	7bfb      	ldrb	r3, [r7, #15]
}
 800580a:	4618      	mov	r0, r3
 800580c:	3710      	adds	r7, #16
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}

08005812 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005812:	b580      	push	{r7, lr}
 8005814:	b084      	sub	sp, #16
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
 800581a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005822:	6839      	ldr	r1, [r7, #0]
 8005824:	4618      	mov	r0, r3
 8005826:	f001 f908 	bl	8006a3a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2201      	movs	r2, #1
 800582e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005838:	461a      	mov	r2, r3
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005846:	f003 031f 	and.w	r3, r3, #31
 800584a:	2b02      	cmp	r3, #2
 800584c:	d01a      	beq.n	8005884 <USBD_LL_SetupStage+0x72>
 800584e:	2b02      	cmp	r3, #2
 8005850:	d822      	bhi.n	8005898 <USBD_LL_SetupStage+0x86>
 8005852:	2b00      	cmp	r3, #0
 8005854:	d002      	beq.n	800585c <USBD_LL_SetupStage+0x4a>
 8005856:	2b01      	cmp	r3, #1
 8005858:	d00a      	beq.n	8005870 <USBD_LL_SetupStage+0x5e>
 800585a:	e01d      	b.n	8005898 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005862:	4619      	mov	r1, r3
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f000 fb5f 	bl	8005f28 <USBD_StdDevReq>
 800586a:	4603      	mov	r3, r0
 800586c:	73fb      	strb	r3, [r7, #15]
      break;
 800586e:	e020      	b.n	80058b2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005876:	4619      	mov	r1, r3
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f000 fbc7 	bl	800600c <USBD_StdItfReq>
 800587e:	4603      	mov	r3, r0
 8005880:	73fb      	strb	r3, [r7, #15]
      break;
 8005882:	e016      	b.n	80058b2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800588a:	4619      	mov	r1, r3
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f000 fc29 	bl	80060e4 <USBD_StdEPReq>
 8005892:	4603      	mov	r3, r0
 8005894:	73fb      	strb	r3, [r7, #15]
      break;
 8005896:	e00c      	b.n	80058b2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800589e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	4619      	mov	r1, r3
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f004 fba8 	bl	8009ffc <USBD_LL_StallEP>
 80058ac:	4603      	mov	r3, r0
 80058ae:	73fb      	strb	r3, [r7, #15]
      break;
 80058b0:	bf00      	nop
  }

  return ret;
 80058b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3710      	adds	r7, #16
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b086      	sub	sp, #24
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	460b      	mov	r3, r1
 80058c6:	607a      	str	r2, [r7, #4]
 80058c8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80058ca:	2300      	movs	r3, #0
 80058cc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80058ce:	7afb      	ldrb	r3, [r7, #11]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d16e      	bne.n	80059b2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80058da:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80058e2:	2b03      	cmp	r3, #3
 80058e4:	f040 8098 	bne.w	8005a18 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	689a      	ldr	r2, [r3, #8]
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d913      	bls.n	800591c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	689a      	ldr	r2, [r3, #8]
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	1ad2      	subs	r2, r2, r3
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	68da      	ldr	r2, [r3, #12]
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	4293      	cmp	r3, r2
 800590c:	bf28      	it	cs
 800590e:	4613      	movcs	r3, r2
 8005910:	461a      	mov	r2, r3
 8005912:	6879      	ldr	r1, [r7, #4]
 8005914:	68f8      	ldr	r0, [r7, #12]
 8005916:	f001 f984 	bl	8006c22 <USBD_CtlContinueRx>
 800591a:	e07d      	b.n	8005a18 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005922:	f003 031f 	and.w	r3, r3, #31
 8005926:	2b02      	cmp	r3, #2
 8005928:	d014      	beq.n	8005954 <USBD_LL_DataOutStage+0x98>
 800592a:	2b02      	cmp	r3, #2
 800592c:	d81d      	bhi.n	800596a <USBD_LL_DataOutStage+0xae>
 800592e:	2b00      	cmp	r3, #0
 8005930:	d002      	beq.n	8005938 <USBD_LL_DataOutStage+0x7c>
 8005932:	2b01      	cmp	r3, #1
 8005934:	d003      	beq.n	800593e <USBD_LL_DataOutStage+0x82>
 8005936:	e018      	b.n	800596a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005938:	2300      	movs	r3, #0
 800593a:	75bb      	strb	r3, [r7, #22]
            break;
 800593c:	e018      	b.n	8005970 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005944:	b2db      	uxtb	r3, r3
 8005946:	4619      	mov	r1, r3
 8005948:	68f8      	ldr	r0, [r7, #12]
 800594a:	f000 fa5e 	bl	8005e0a <USBD_CoreFindIF>
 800594e:	4603      	mov	r3, r0
 8005950:	75bb      	strb	r3, [r7, #22]
            break;
 8005952:	e00d      	b.n	8005970 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800595a:	b2db      	uxtb	r3, r3
 800595c:	4619      	mov	r1, r3
 800595e:	68f8      	ldr	r0, [r7, #12]
 8005960:	f000 fa60 	bl	8005e24 <USBD_CoreFindEP>
 8005964:	4603      	mov	r3, r0
 8005966:	75bb      	strb	r3, [r7, #22]
            break;
 8005968:	e002      	b.n	8005970 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800596a:	2300      	movs	r3, #0
 800596c:	75bb      	strb	r3, [r7, #22]
            break;
 800596e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005970:	7dbb      	ldrb	r3, [r7, #22]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d119      	bne.n	80059aa <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800597c:	b2db      	uxtb	r3, r3
 800597e:	2b03      	cmp	r3, #3
 8005980:	d113      	bne.n	80059aa <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005982:	7dba      	ldrb	r2, [r7, #22]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	32ae      	adds	r2, #174	; 0xae
 8005988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800598c:	691b      	ldr	r3, [r3, #16]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d00b      	beq.n	80059aa <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005992:	7dba      	ldrb	r2, [r7, #22]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800599a:	7dba      	ldrb	r2, [r7, #22]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	32ae      	adds	r2, #174	; 0xae
 80059a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	68f8      	ldr	r0, [r7, #12]
 80059a8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80059aa:	68f8      	ldr	r0, [r7, #12]
 80059ac:	f001 f94a 	bl	8006c44 <USBD_CtlSendStatus>
 80059b0:	e032      	b.n	8005a18 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80059b2:	7afb      	ldrb	r3, [r7, #11]
 80059b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	4619      	mov	r1, r3
 80059bc:	68f8      	ldr	r0, [r7, #12]
 80059be:	f000 fa31 	bl	8005e24 <USBD_CoreFindEP>
 80059c2:	4603      	mov	r3, r0
 80059c4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80059c6:	7dbb      	ldrb	r3, [r7, #22]
 80059c8:	2bff      	cmp	r3, #255	; 0xff
 80059ca:	d025      	beq.n	8005a18 <USBD_LL_DataOutStage+0x15c>
 80059cc:	7dbb      	ldrb	r3, [r7, #22]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d122      	bne.n	8005a18 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	2b03      	cmp	r3, #3
 80059dc:	d117      	bne.n	8005a0e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80059de:	7dba      	ldrb	r2, [r7, #22]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	32ae      	adds	r2, #174	; 0xae
 80059e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059e8:	699b      	ldr	r3, [r3, #24]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d00f      	beq.n	8005a0e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80059ee:	7dba      	ldrb	r2, [r7, #22]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80059f6:	7dba      	ldrb	r2, [r7, #22]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	32ae      	adds	r2, #174	; 0xae
 80059fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a00:	699b      	ldr	r3, [r3, #24]
 8005a02:	7afa      	ldrb	r2, [r7, #11]
 8005a04:	4611      	mov	r1, r2
 8005a06:	68f8      	ldr	r0, [r7, #12]
 8005a08:	4798      	blx	r3
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005a0e:	7dfb      	ldrb	r3, [r7, #23]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d001      	beq.n	8005a18 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005a14:	7dfb      	ldrb	r3, [r7, #23]
 8005a16:	e000      	b.n	8005a1a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005a18:	2300      	movs	r3, #0
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3718      	adds	r7, #24
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}

08005a22 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005a22:	b580      	push	{r7, lr}
 8005a24:	b086      	sub	sp, #24
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	60f8      	str	r0, [r7, #12]
 8005a2a:	460b      	mov	r3, r1
 8005a2c:	607a      	str	r2, [r7, #4]
 8005a2e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005a30:	7afb      	ldrb	r3, [r7, #11]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d16f      	bne.n	8005b16 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	3314      	adds	r3, #20
 8005a3a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005a42:	2b02      	cmp	r3, #2
 8005a44:	d15a      	bne.n	8005afc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	689a      	ldr	r2, [r3, #8]
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d914      	bls.n	8005a7c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	689a      	ldr	r2, [r3, #8]
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	1ad2      	subs	r2, r2, r3
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	461a      	mov	r2, r3
 8005a66:	6879      	ldr	r1, [r7, #4]
 8005a68:	68f8      	ldr	r0, [r7, #12]
 8005a6a:	f001 f8ac 	bl	8006bc6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005a6e:	2300      	movs	r3, #0
 8005a70:	2200      	movs	r2, #0
 8005a72:	2100      	movs	r1, #0
 8005a74:	68f8      	ldr	r0, [r7, #12]
 8005a76:	f004 fb6b 	bl	800a150 <USBD_LL_PrepareReceive>
 8005a7a:	e03f      	b.n	8005afc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	68da      	ldr	r2, [r3, #12]
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d11c      	bne.n	8005ac2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	685a      	ldr	r2, [r3, #4]
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d316      	bcc.n	8005ac2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	685a      	ldr	r2, [r3, #4]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d20f      	bcs.n	8005ac2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	2100      	movs	r1, #0
 8005aa6:	68f8      	ldr	r0, [r7, #12]
 8005aa8:	f001 f88d 	bl	8006bc6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	2100      	movs	r1, #0
 8005aba:	68f8      	ldr	r0, [r7, #12]
 8005abc:	f004 fb48 	bl	800a150 <USBD_LL_PrepareReceive>
 8005ac0:	e01c      	b.n	8005afc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	2b03      	cmp	r3, #3
 8005acc:	d10f      	bne.n	8005aee <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ad4:	68db      	ldr	r3, [r3, #12]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d009      	beq.n	8005aee <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2200      	movs	r2, #0
 8005ade:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ae8:	68db      	ldr	r3, [r3, #12]
 8005aea:	68f8      	ldr	r0, [r7, #12]
 8005aec:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005aee:	2180      	movs	r1, #128	; 0x80
 8005af0:	68f8      	ldr	r0, [r7, #12]
 8005af2:	f004 fa83 	bl	8009ffc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005af6:	68f8      	ldr	r0, [r7, #12]
 8005af8:	f001 f8b7 	bl	8006c6a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d03a      	beq.n	8005b7c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005b06:	68f8      	ldr	r0, [r7, #12]
 8005b08:	f7ff fe42 	bl	8005790 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005b14:	e032      	b.n	8005b7c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005b16:	7afb      	ldrb	r3, [r7, #11]
 8005b18:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	4619      	mov	r1, r3
 8005b20:	68f8      	ldr	r0, [r7, #12]
 8005b22:	f000 f97f 	bl	8005e24 <USBD_CoreFindEP>
 8005b26:	4603      	mov	r3, r0
 8005b28:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005b2a:	7dfb      	ldrb	r3, [r7, #23]
 8005b2c:	2bff      	cmp	r3, #255	; 0xff
 8005b2e:	d025      	beq.n	8005b7c <USBD_LL_DataInStage+0x15a>
 8005b30:	7dfb      	ldrb	r3, [r7, #23]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d122      	bne.n	8005b7c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	2b03      	cmp	r3, #3
 8005b40:	d11c      	bne.n	8005b7c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005b42:	7dfa      	ldrb	r2, [r7, #23]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	32ae      	adds	r2, #174	; 0xae
 8005b48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b4c:	695b      	ldr	r3, [r3, #20]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d014      	beq.n	8005b7c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005b52:	7dfa      	ldrb	r2, [r7, #23]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005b5a:	7dfa      	ldrb	r2, [r7, #23]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	32ae      	adds	r2, #174	; 0xae
 8005b60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b64:	695b      	ldr	r3, [r3, #20]
 8005b66:	7afa      	ldrb	r2, [r7, #11]
 8005b68:	4611      	mov	r1, r2
 8005b6a:	68f8      	ldr	r0, [r7, #12]
 8005b6c:	4798      	blx	r3
 8005b6e:	4603      	mov	r3, r0
 8005b70:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005b72:	7dbb      	ldrb	r3, [r7, #22]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d001      	beq.n	8005b7c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005b78:	7dbb      	ldrb	r3, [r7, #22]
 8005b7a:	e000      	b.n	8005b7e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005b7c:	2300      	movs	r3, #0
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3718      	adds	r7, #24
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}

08005b86 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005b86:	b580      	push	{r7, lr}
 8005b88:	b084      	sub	sp, #16
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2201      	movs	r2, #1
 8005b96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d014      	beq.n	8005bec <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d00e      	beq.n	8005bec <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	6852      	ldr	r2, [r2, #4]
 8005bda:	b2d2      	uxtb	r2, r2
 8005bdc:	4611      	mov	r1, r2
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	4798      	blx	r3
 8005be2:	4603      	mov	r3, r0
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d001      	beq.n	8005bec <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005be8:	2303      	movs	r3, #3
 8005bea:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005bec:	2340      	movs	r3, #64	; 0x40
 8005bee:	2200      	movs	r2, #0
 8005bf0:	2100      	movs	r1, #0
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f004 f9bd 	bl	8009f72 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2240      	movs	r2, #64	; 0x40
 8005c04:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005c08:	2340      	movs	r3, #64	; 0x40
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	2180      	movs	r1, #128	; 0x80
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f004 f9af 	bl	8009f72 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2201      	movs	r2, #1
 8005c18:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2240      	movs	r2, #64	; 0x40
 8005c1e:	621a      	str	r2, [r3, #32]

  return ret;
 8005c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3710      	adds	r7, #16
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}

08005c2a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005c2a:	b480      	push	{r7}
 8005c2c:	b083      	sub	sp, #12
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]
 8005c32:	460b      	mov	r3, r1
 8005c34:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	78fa      	ldrb	r2, [r7, #3]
 8005c3a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005c3c:	2300      	movs	r3, #0
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	370c      	adds	r7, #12
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr

08005c4a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005c4a:	b480      	push	{r7}
 8005c4c:	b083      	sub	sp, #12
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c58:	b2da      	uxtb	r2, r3
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2204      	movs	r2, #4
 8005c64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	370c      	adds	r7, #12
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr

08005c76 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005c76:	b480      	push	{r7}
 8005c78:	b083      	sub	sp, #12
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	2b04      	cmp	r3, #4
 8005c88:	d106      	bne.n	8005c98 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005c90:	b2da      	uxtb	r2, r3
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005c98:	2300      	movs	r3, #0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	370c      	adds	r7, #12
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr

08005ca6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005ca6:	b580      	push	{r7, lr}
 8005ca8:	b082      	sub	sp, #8
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	2b03      	cmp	r3, #3
 8005cb8:	d110      	bne.n	8005cdc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d00b      	beq.n	8005cdc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cca:	69db      	ldr	r3, [r3, #28]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d005      	beq.n	8005cdc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cd6:	69db      	ldr	r3, [r3, #28]
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005cdc:	2300      	movs	r3, #0
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3708      	adds	r7, #8
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}

08005ce6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005ce6:	b580      	push	{r7, lr}
 8005ce8:	b082      	sub	sp, #8
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	6078      	str	r0, [r7, #4]
 8005cee:	460b      	mov	r3, r1
 8005cf0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	32ae      	adds	r2, #174	; 0xae
 8005cfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d101      	bne.n	8005d08 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005d04:	2303      	movs	r3, #3
 8005d06:	e01c      	b.n	8005d42 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d0e:	b2db      	uxtb	r3, r3
 8005d10:	2b03      	cmp	r3, #3
 8005d12:	d115      	bne.n	8005d40 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	32ae      	adds	r2, #174	; 0xae
 8005d1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d22:	6a1b      	ldr	r3, [r3, #32]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d00b      	beq.n	8005d40 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	32ae      	adds	r2, #174	; 0xae
 8005d32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d36:	6a1b      	ldr	r3, [r3, #32]
 8005d38:	78fa      	ldrb	r2, [r7, #3]
 8005d3a:	4611      	mov	r1, r2
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005d40:	2300      	movs	r3, #0
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3708      	adds	r7, #8
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}

08005d4a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005d4a:	b580      	push	{r7, lr}
 8005d4c:	b082      	sub	sp, #8
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	6078      	str	r0, [r7, #4]
 8005d52:	460b      	mov	r3, r1
 8005d54:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	32ae      	adds	r2, #174	; 0xae
 8005d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d101      	bne.n	8005d6c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005d68:	2303      	movs	r3, #3
 8005d6a:	e01c      	b.n	8005da6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	2b03      	cmp	r3, #3
 8005d76:	d115      	bne.n	8005da4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	32ae      	adds	r2, #174	; 0xae
 8005d82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d00b      	beq.n	8005da4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	32ae      	adds	r2, #174	; 0xae
 8005d96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9c:	78fa      	ldrb	r2, [r7, #3]
 8005d9e:	4611      	mov	r1, r2
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005da4:	2300      	movs	r3, #0
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3708      	adds	r7, #8
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}

08005dae <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005dae:	b480      	push	{r7}
 8005db0:	b083      	sub	sp, #12
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005db6:	2300      	movs	r3, #0
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	370c      	adds	r7, #12
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d00e      	beq.n	8005e00 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	6852      	ldr	r2, [r2, #4]
 8005dee:	b2d2      	uxtb	r2, r2
 8005df0:	4611      	mov	r1, r2
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	4798      	blx	r3
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d001      	beq.n	8005e00 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005dfc:	2303      	movs	r3, #3
 8005dfe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3710      	adds	r7, #16
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}

08005e0a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005e0a:	b480      	push	{r7}
 8005e0c:	b083      	sub	sp, #12
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	6078      	str	r0, [r7, #4]
 8005e12:	460b      	mov	r3, r1
 8005e14:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005e16:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	370c      	adds	r7, #12
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr

08005e24 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	460b      	mov	r3, r1
 8005e2e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005e30:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	370c      	adds	r7, #12
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr

08005e3e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005e3e:	b580      	push	{r7, lr}
 8005e40:	b086      	sub	sp, #24
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
 8005e46:	460b      	mov	r3, r1
 8005e48:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005e52:	2300      	movs	r3, #0
 8005e54:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	885b      	ldrh	r3, [r3, #2]
 8005e5a:	b29a      	uxth	r2, r3
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d920      	bls.n	8005ea8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005e6e:	e013      	b.n	8005e98 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005e70:	f107 030a 	add.w	r3, r7, #10
 8005e74:	4619      	mov	r1, r3
 8005e76:	6978      	ldr	r0, [r7, #20]
 8005e78:	f000 f81b 	bl	8005eb2 <USBD_GetNextDesc>
 8005e7c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	785b      	ldrb	r3, [r3, #1]
 8005e82:	2b05      	cmp	r3, #5
 8005e84:	d108      	bne.n	8005e98 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	789b      	ldrb	r3, [r3, #2]
 8005e8e:	78fa      	ldrb	r2, [r7, #3]
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d008      	beq.n	8005ea6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005e94:	2300      	movs	r3, #0
 8005e96:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	885b      	ldrh	r3, [r3, #2]
 8005e9c:	b29a      	uxth	r2, r3
 8005e9e:	897b      	ldrh	r3, [r7, #10]
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d8e5      	bhi.n	8005e70 <USBD_GetEpDesc+0x32>
 8005ea4:	e000      	b.n	8005ea8 <USBD_GetEpDesc+0x6a>
          break;
 8005ea6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005ea8:	693b      	ldr	r3, [r7, #16]
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3718      	adds	r7, #24
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}

08005eb2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005eb2:	b480      	push	{r7}
 8005eb4:	b085      	sub	sp, #20
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
 8005eba:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	881a      	ldrh	r2, [r3, #0]
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	4413      	add	r3, r2
 8005ecc:	b29a      	uxth	r2, r3
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	4413      	add	r3, r2
 8005edc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005ede:	68fb      	ldr	r3, [r7, #12]
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3714      	adds	r7, #20
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b087      	sub	sp, #28
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	3301      	adds	r3, #1
 8005f02:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005f0a:	8a3b      	ldrh	r3, [r7, #16]
 8005f0c:	021b      	lsls	r3, r3, #8
 8005f0e:	b21a      	sxth	r2, r3
 8005f10:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005f14:	4313      	orrs	r3, r2
 8005f16:	b21b      	sxth	r3, r3
 8005f18:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005f1a:	89fb      	ldrh	r3, [r7, #14]
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	371c      	adds	r7, #28
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b084      	sub	sp, #16
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f32:	2300      	movs	r3, #0
 8005f34:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005f3e:	2b40      	cmp	r3, #64	; 0x40
 8005f40:	d005      	beq.n	8005f4e <USBD_StdDevReq+0x26>
 8005f42:	2b40      	cmp	r3, #64	; 0x40
 8005f44:	d857      	bhi.n	8005ff6 <USBD_StdDevReq+0xce>
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d00f      	beq.n	8005f6a <USBD_StdDevReq+0x42>
 8005f4a:	2b20      	cmp	r3, #32
 8005f4c:	d153      	bne.n	8005ff6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	32ae      	adds	r2, #174	; 0xae
 8005f58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	6839      	ldr	r1, [r7, #0]
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	4798      	blx	r3
 8005f64:	4603      	mov	r3, r0
 8005f66:	73fb      	strb	r3, [r7, #15]
      break;
 8005f68:	e04a      	b.n	8006000 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	785b      	ldrb	r3, [r3, #1]
 8005f6e:	2b09      	cmp	r3, #9
 8005f70:	d83b      	bhi.n	8005fea <USBD_StdDevReq+0xc2>
 8005f72:	a201      	add	r2, pc, #4	; (adr r2, 8005f78 <USBD_StdDevReq+0x50>)
 8005f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f78:	08005fcd 	.word	0x08005fcd
 8005f7c:	08005fe1 	.word	0x08005fe1
 8005f80:	08005feb 	.word	0x08005feb
 8005f84:	08005fd7 	.word	0x08005fd7
 8005f88:	08005feb 	.word	0x08005feb
 8005f8c:	08005fab 	.word	0x08005fab
 8005f90:	08005fa1 	.word	0x08005fa1
 8005f94:	08005feb 	.word	0x08005feb
 8005f98:	08005fc3 	.word	0x08005fc3
 8005f9c:	08005fb5 	.word	0x08005fb5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005fa0:	6839      	ldr	r1, [r7, #0]
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 fa3c 	bl	8006420 <USBD_GetDescriptor>
          break;
 8005fa8:	e024      	b.n	8005ff4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005faa:	6839      	ldr	r1, [r7, #0]
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f000 fba1 	bl	80066f4 <USBD_SetAddress>
          break;
 8005fb2:	e01f      	b.n	8005ff4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005fb4:	6839      	ldr	r1, [r7, #0]
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f000 fbe0 	bl	800677c <USBD_SetConfig>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	73fb      	strb	r3, [r7, #15]
          break;
 8005fc0:	e018      	b.n	8005ff4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005fc2:	6839      	ldr	r1, [r7, #0]
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f000 fc83 	bl	80068d0 <USBD_GetConfig>
          break;
 8005fca:	e013      	b.n	8005ff4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005fcc:	6839      	ldr	r1, [r7, #0]
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 fcb4 	bl	800693c <USBD_GetStatus>
          break;
 8005fd4:	e00e      	b.n	8005ff4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005fd6:	6839      	ldr	r1, [r7, #0]
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f000 fce3 	bl	80069a4 <USBD_SetFeature>
          break;
 8005fde:	e009      	b.n	8005ff4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005fe0:	6839      	ldr	r1, [r7, #0]
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 fd07 	bl	80069f6 <USBD_ClrFeature>
          break;
 8005fe8:	e004      	b.n	8005ff4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005fea:	6839      	ldr	r1, [r7, #0]
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f000 fd5e 	bl	8006aae <USBD_CtlError>
          break;
 8005ff2:	bf00      	nop
      }
      break;
 8005ff4:	e004      	b.n	8006000 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005ff6:	6839      	ldr	r1, [r7, #0]
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f000 fd58 	bl	8006aae <USBD_CtlError>
      break;
 8005ffe:	bf00      	nop
  }

  return ret;
 8006000:	7bfb      	ldrb	r3, [r7, #15]
}
 8006002:	4618      	mov	r0, r3
 8006004:	3710      	adds	r7, #16
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
 800600a:	bf00      	nop

0800600c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b084      	sub	sp, #16
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006016:	2300      	movs	r3, #0
 8006018:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006022:	2b40      	cmp	r3, #64	; 0x40
 8006024:	d005      	beq.n	8006032 <USBD_StdItfReq+0x26>
 8006026:	2b40      	cmp	r3, #64	; 0x40
 8006028:	d852      	bhi.n	80060d0 <USBD_StdItfReq+0xc4>
 800602a:	2b00      	cmp	r3, #0
 800602c:	d001      	beq.n	8006032 <USBD_StdItfReq+0x26>
 800602e:	2b20      	cmp	r3, #32
 8006030:	d14e      	bne.n	80060d0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006038:	b2db      	uxtb	r3, r3
 800603a:	3b01      	subs	r3, #1
 800603c:	2b02      	cmp	r3, #2
 800603e:	d840      	bhi.n	80060c2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	889b      	ldrh	r3, [r3, #4]
 8006044:	b2db      	uxtb	r3, r3
 8006046:	2b01      	cmp	r3, #1
 8006048:	d836      	bhi.n	80060b8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	889b      	ldrh	r3, [r3, #4]
 800604e:	b2db      	uxtb	r3, r3
 8006050:	4619      	mov	r1, r3
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f7ff fed9 	bl	8005e0a <USBD_CoreFindIF>
 8006058:	4603      	mov	r3, r0
 800605a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800605c:	7bbb      	ldrb	r3, [r7, #14]
 800605e:	2bff      	cmp	r3, #255	; 0xff
 8006060:	d01d      	beq.n	800609e <USBD_StdItfReq+0x92>
 8006062:	7bbb      	ldrb	r3, [r7, #14]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d11a      	bne.n	800609e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006068:	7bba      	ldrb	r2, [r7, #14]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	32ae      	adds	r2, #174	; 0xae
 800606e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d00f      	beq.n	8006098 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006078:	7bba      	ldrb	r2, [r7, #14]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006080:	7bba      	ldrb	r2, [r7, #14]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	32ae      	adds	r2, #174	; 0xae
 8006086:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	6839      	ldr	r1, [r7, #0]
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	4798      	blx	r3
 8006092:	4603      	mov	r3, r0
 8006094:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006096:	e004      	b.n	80060a2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006098:	2303      	movs	r3, #3
 800609a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800609c:	e001      	b.n	80060a2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800609e:	2303      	movs	r3, #3
 80060a0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	88db      	ldrh	r3, [r3, #6]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d110      	bne.n	80060cc <USBD_StdItfReq+0xc0>
 80060aa:	7bfb      	ldrb	r3, [r7, #15]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d10d      	bne.n	80060cc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f000 fdc7 	bl	8006c44 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80060b6:	e009      	b.n	80060cc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80060b8:	6839      	ldr	r1, [r7, #0]
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 fcf7 	bl	8006aae <USBD_CtlError>
          break;
 80060c0:	e004      	b.n	80060cc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80060c2:	6839      	ldr	r1, [r7, #0]
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f000 fcf2 	bl	8006aae <USBD_CtlError>
          break;
 80060ca:	e000      	b.n	80060ce <USBD_StdItfReq+0xc2>
          break;
 80060cc:	bf00      	nop
      }
      break;
 80060ce:	e004      	b.n	80060da <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80060d0:	6839      	ldr	r1, [r7, #0]
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 fceb 	bl	8006aae <USBD_CtlError>
      break;
 80060d8:	bf00      	nop
  }

  return ret;
 80060da:	7bfb      	ldrb	r3, [r7, #15]
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3710      	adds	r7, #16
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b084      	sub	sp, #16
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80060ee:	2300      	movs	r3, #0
 80060f0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	889b      	ldrh	r3, [r3, #4]
 80060f6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006100:	2b40      	cmp	r3, #64	; 0x40
 8006102:	d007      	beq.n	8006114 <USBD_StdEPReq+0x30>
 8006104:	2b40      	cmp	r3, #64	; 0x40
 8006106:	f200 817f 	bhi.w	8006408 <USBD_StdEPReq+0x324>
 800610a:	2b00      	cmp	r3, #0
 800610c:	d02a      	beq.n	8006164 <USBD_StdEPReq+0x80>
 800610e:	2b20      	cmp	r3, #32
 8006110:	f040 817a 	bne.w	8006408 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006114:	7bbb      	ldrb	r3, [r7, #14]
 8006116:	4619      	mov	r1, r3
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f7ff fe83 	bl	8005e24 <USBD_CoreFindEP>
 800611e:	4603      	mov	r3, r0
 8006120:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006122:	7b7b      	ldrb	r3, [r7, #13]
 8006124:	2bff      	cmp	r3, #255	; 0xff
 8006126:	f000 8174 	beq.w	8006412 <USBD_StdEPReq+0x32e>
 800612a:	7b7b      	ldrb	r3, [r7, #13]
 800612c:	2b00      	cmp	r3, #0
 800612e:	f040 8170 	bne.w	8006412 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006132:	7b7a      	ldrb	r2, [r7, #13]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800613a:	7b7a      	ldrb	r2, [r7, #13]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	32ae      	adds	r2, #174	; 0xae
 8006140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	2b00      	cmp	r3, #0
 8006148:	f000 8163 	beq.w	8006412 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800614c:	7b7a      	ldrb	r2, [r7, #13]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	32ae      	adds	r2, #174	; 0xae
 8006152:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	6839      	ldr	r1, [r7, #0]
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	4798      	blx	r3
 800615e:	4603      	mov	r3, r0
 8006160:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006162:	e156      	b.n	8006412 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	785b      	ldrb	r3, [r3, #1]
 8006168:	2b03      	cmp	r3, #3
 800616a:	d008      	beq.n	800617e <USBD_StdEPReq+0x9a>
 800616c:	2b03      	cmp	r3, #3
 800616e:	f300 8145 	bgt.w	80063fc <USBD_StdEPReq+0x318>
 8006172:	2b00      	cmp	r3, #0
 8006174:	f000 809b 	beq.w	80062ae <USBD_StdEPReq+0x1ca>
 8006178:	2b01      	cmp	r3, #1
 800617a:	d03c      	beq.n	80061f6 <USBD_StdEPReq+0x112>
 800617c:	e13e      	b.n	80063fc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006184:	b2db      	uxtb	r3, r3
 8006186:	2b02      	cmp	r3, #2
 8006188:	d002      	beq.n	8006190 <USBD_StdEPReq+0xac>
 800618a:	2b03      	cmp	r3, #3
 800618c:	d016      	beq.n	80061bc <USBD_StdEPReq+0xd8>
 800618e:	e02c      	b.n	80061ea <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006190:	7bbb      	ldrb	r3, [r7, #14]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d00d      	beq.n	80061b2 <USBD_StdEPReq+0xce>
 8006196:	7bbb      	ldrb	r3, [r7, #14]
 8006198:	2b80      	cmp	r3, #128	; 0x80
 800619a:	d00a      	beq.n	80061b2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800619c:	7bbb      	ldrb	r3, [r7, #14]
 800619e:	4619      	mov	r1, r3
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f003 ff2b 	bl	8009ffc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80061a6:	2180      	movs	r1, #128	; 0x80
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f003 ff27 	bl	8009ffc <USBD_LL_StallEP>
 80061ae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80061b0:	e020      	b.n	80061f4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80061b2:	6839      	ldr	r1, [r7, #0]
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f000 fc7a 	bl	8006aae <USBD_CtlError>
              break;
 80061ba:	e01b      	b.n	80061f4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	885b      	ldrh	r3, [r3, #2]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d10e      	bne.n	80061e2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80061c4:	7bbb      	ldrb	r3, [r7, #14]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d00b      	beq.n	80061e2 <USBD_StdEPReq+0xfe>
 80061ca:	7bbb      	ldrb	r3, [r7, #14]
 80061cc:	2b80      	cmp	r3, #128	; 0x80
 80061ce:	d008      	beq.n	80061e2 <USBD_StdEPReq+0xfe>
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	88db      	ldrh	r3, [r3, #6]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d104      	bne.n	80061e2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80061d8:	7bbb      	ldrb	r3, [r7, #14]
 80061da:	4619      	mov	r1, r3
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f003 ff0d 	bl	8009ffc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 fd2e 	bl	8006c44 <USBD_CtlSendStatus>

              break;
 80061e8:	e004      	b.n	80061f4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80061ea:	6839      	ldr	r1, [r7, #0]
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f000 fc5e 	bl	8006aae <USBD_CtlError>
              break;
 80061f2:	bf00      	nop
          }
          break;
 80061f4:	e107      	b.n	8006406 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	2b02      	cmp	r3, #2
 8006200:	d002      	beq.n	8006208 <USBD_StdEPReq+0x124>
 8006202:	2b03      	cmp	r3, #3
 8006204:	d016      	beq.n	8006234 <USBD_StdEPReq+0x150>
 8006206:	e04b      	b.n	80062a0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006208:	7bbb      	ldrb	r3, [r7, #14]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d00d      	beq.n	800622a <USBD_StdEPReq+0x146>
 800620e:	7bbb      	ldrb	r3, [r7, #14]
 8006210:	2b80      	cmp	r3, #128	; 0x80
 8006212:	d00a      	beq.n	800622a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006214:	7bbb      	ldrb	r3, [r7, #14]
 8006216:	4619      	mov	r1, r3
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f003 feef 	bl	8009ffc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800621e:	2180      	movs	r1, #128	; 0x80
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f003 feeb 	bl	8009ffc <USBD_LL_StallEP>
 8006226:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006228:	e040      	b.n	80062ac <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800622a:	6839      	ldr	r1, [r7, #0]
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f000 fc3e 	bl	8006aae <USBD_CtlError>
              break;
 8006232:	e03b      	b.n	80062ac <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	885b      	ldrh	r3, [r3, #2]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d136      	bne.n	80062aa <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800623c:	7bbb      	ldrb	r3, [r7, #14]
 800623e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006242:	2b00      	cmp	r3, #0
 8006244:	d004      	beq.n	8006250 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006246:	7bbb      	ldrb	r3, [r7, #14]
 8006248:	4619      	mov	r1, r3
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f003 fef5 	bl	800a03a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f000 fcf7 	bl	8006c44 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006256:	7bbb      	ldrb	r3, [r7, #14]
 8006258:	4619      	mov	r1, r3
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f7ff fde2 	bl	8005e24 <USBD_CoreFindEP>
 8006260:	4603      	mov	r3, r0
 8006262:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006264:	7b7b      	ldrb	r3, [r7, #13]
 8006266:	2bff      	cmp	r3, #255	; 0xff
 8006268:	d01f      	beq.n	80062aa <USBD_StdEPReq+0x1c6>
 800626a:	7b7b      	ldrb	r3, [r7, #13]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d11c      	bne.n	80062aa <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006270:	7b7a      	ldrb	r2, [r7, #13]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006278:	7b7a      	ldrb	r2, [r7, #13]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	32ae      	adds	r2, #174	; 0xae
 800627e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d010      	beq.n	80062aa <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006288:	7b7a      	ldrb	r2, [r7, #13]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	32ae      	adds	r2, #174	; 0xae
 800628e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	6839      	ldr	r1, [r7, #0]
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	4798      	blx	r3
 800629a:	4603      	mov	r3, r0
 800629c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800629e:	e004      	b.n	80062aa <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80062a0:	6839      	ldr	r1, [r7, #0]
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 fc03 	bl	8006aae <USBD_CtlError>
              break;
 80062a8:	e000      	b.n	80062ac <USBD_StdEPReq+0x1c8>
              break;
 80062aa:	bf00      	nop
          }
          break;
 80062ac:	e0ab      	b.n	8006406 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	2b02      	cmp	r3, #2
 80062b8:	d002      	beq.n	80062c0 <USBD_StdEPReq+0x1dc>
 80062ba:	2b03      	cmp	r3, #3
 80062bc:	d032      	beq.n	8006324 <USBD_StdEPReq+0x240>
 80062be:	e097      	b.n	80063f0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80062c0:	7bbb      	ldrb	r3, [r7, #14]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d007      	beq.n	80062d6 <USBD_StdEPReq+0x1f2>
 80062c6:	7bbb      	ldrb	r3, [r7, #14]
 80062c8:	2b80      	cmp	r3, #128	; 0x80
 80062ca:	d004      	beq.n	80062d6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80062cc:	6839      	ldr	r1, [r7, #0]
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 fbed 	bl	8006aae <USBD_CtlError>
                break;
 80062d4:	e091      	b.n	80063fa <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80062d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	da0b      	bge.n	80062f6 <USBD_StdEPReq+0x212>
 80062de:	7bbb      	ldrb	r3, [r7, #14]
 80062e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80062e4:	4613      	mov	r3, r2
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	4413      	add	r3, r2
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	3310      	adds	r3, #16
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	4413      	add	r3, r2
 80062f2:	3304      	adds	r3, #4
 80062f4:	e00b      	b.n	800630e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80062f6:	7bbb      	ldrb	r3, [r7, #14]
 80062f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80062fc:	4613      	mov	r3, r2
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	4413      	add	r3, r2
 8006302:	009b      	lsls	r3, r3, #2
 8006304:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	4413      	add	r3, r2
 800630c:	3304      	adds	r3, #4
 800630e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	2200      	movs	r2, #0
 8006314:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	2202      	movs	r2, #2
 800631a:	4619      	mov	r1, r3
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f000 fc37 	bl	8006b90 <USBD_CtlSendData>
              break;
 8006322:	e06a      	b.n	80063fa <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006324:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006328:	2b00      	cmp	r3, #0
 800632a:	da11      	bge.n	8006350 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800632c:	7bbb      	ldrb	r3, [r7, #14]
 800632e:	f003 020f 	and.w	r2, r3, #15
 8006332:	6879      	ldr	r1, [r7, #4]
 8006334:	4613      	mov	r3, r2
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	4413      	add	r3, r2
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	440b      	add	r3, r1
 800633e:	3324      	adds	r3, #36	; 0x24
 8006340:	881b      	ldrh	r3, [r3, #0]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d117      	bne.n	8006376 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006346:	6839      	ldr	r1, [r7, #0]
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f000 fbb0 	bl	8006aae <USBD_CtlError>
                  break;
 800634e:	e054      	b.n	80063fa <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006350:	7bbb      	ldrb	r3, [r7, #14]
 8006352:	f003 020f 	and.w	r2, r3, #15
 8006356:	6879      	ldr	r1, [r7, #4]
 8006358:	4613      	mov	r3, r2
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	4413      	add	r3, r2
 800635e:	009b      	lsls	r3, r3, #2
 8006360:	440b      	add	r3, r1
 8006362:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006366:	881b      	ldrh	r3, [r3, #0]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d104      	bne.n	8006376 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800636c:	6839      	ldr	r1, [r7, #0]
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 fb9d 	bl	8006aae <USBD_CtlError>
                  break;
 8006374:	e041      	b.n	80063fa <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006376:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800637a:	2b00      	cmp	r3, #0
 800637c:	da0b      	bge.n	8006396 <USBD_StdEPReq+0x2b2>
 800637e:	7bbb      	ldrb	r3, [r7, #14]
 8006380:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006384:	4613      	mov	r3, r2
 8006386:	009b      	lsls	r3, r3, #2
 8006388:	4413      	add	r3, r2
 800638a:	009b      	lsls	r3, r3, #2
 800638c:	3310      	adds	r3, #16
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	4413      	add	r3, r2
 8006392:	3304      	adds	r3, #4
 8006394:	e00b      	b.n	80063ae <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006396:	7bbb      	ldrb	r3, [r7, #14]
 8006398:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800639c:	4613      	mov	r3, r2
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	4413      	add	r3, r2
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	4413      	add	r3, r2
 80063ac:	3304      	adds	r3, #4
 80063ae:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80063b0:	7bbb      	ldrb	r3, [r7, #14]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d002      	beq.n	80063bc <USBD_StdEPReq+0x2d8>
 80063b6:	7bbb      	ldrb	r3, [r7, #14]
 80063b8:	2b80      	cmp	r3, #128	; 0x80
 80063ba:	d103      	bne.n	80063c4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	2200      	movs	r2, #0
 80063c0:	601a      	str	r2, [r3, #0]
 80063c2:	e00e      	b.n	80063e2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80063c4:	7bbb      	ldrb	r3, [r7, #14]
 80063c6:	4619      	mov	r1, r3
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f003 fe55 	bl	800a078 <USBD_LL_IsStallEP>
 80063ce:	4603      	mov	r3, r0
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d003      	beq.n	80063dc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	2201      	movs	r2, #1
 80063d8:	601a      	str	r2, [r3, #0]
 80063da:	e002      	b.n	80063e2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	2200      	movs	r2, #0
 80063e0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	2202      	movs	r2, #2
 80063e6:	4619      	mov	r1, r3
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f000 fbd1 	bl	8006b90 <USBD_CtlSendData>
              break;
 80063ee:	e004      	b.n	80063fa <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80063f0:	6839      	ldr	r1, [r7, #0]
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 fb5b 	bl	8006aae <USBD_CtlError>
              break;
 80063f8:	bf00      	nop
          }
          break;
 80063fa:	e004      	b.n	8006406 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80063fc:	6839      	ldr	r1, [r7, #0]
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f000 fb55 	bl	8006aae <USBD_CtlError>
          break;
 8006404:	bf00      	nop
      }
      break;
 8006406:	e005      	b.n	8006414 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006408:	6839      	ldr	r1, [r7, #0]
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f000 fb4f 	bl	8006aae <USBD_CtlError>
      break;
 8006410:	e000      	b.n	8006414 <USBD_StdEPReq+0x330>
      break;
 8006412:	bf00      	nop
  }

  return ret;
 8006414:	7bfb      	ldrb	r3, [r7, #15]
}
 8006416:	4618      	mov	r0, r3
 8006418:	3710      	adds	r7, #16
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
	...

08006420 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b084      	sub	sp, #16
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800642a:	2300      	movs	r3, #0
 800642c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800642e:	2300      	movs	r3, #0
 8006430:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006432:	2300      	movs	r3, #0
 8006434:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	885b      	ldrh	r3, [r3, #2]
 800643a:	0a1b      	lsrs	r3, r3, #8
 800643c:	b29b      	uxth	r3, r3
 800643e:	3b01      	subs	r3, #1
 8006440:	2b06      	cmp	r3, #6
 8006442:	f200 8128 	bhi.w	8006696 <USBD_GetDescriptor+0x276>
 8006446:	a201      	add	r2, pc, #4	; (adr r2, 800644c <USBD_GetDescriptor+0x2c>)
 8006448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800644c:	08006469 	.word	0x08006469
 8006450:	08006481 	.word	0x08006481
 8006454:	080064c1 	.word	0x080064c1
 8006458:	08006697 	.word	0x08006697
 800645c:	08006697 	.word	0x08006697
 8006460:	08006637 	.word	0x08006637
 8006464:	08006663 	.word	0x08006663
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	7c12      	ldrb	r2, [r2, #16]
 8006474:	f107 0108 	add.w	r1, r7, #8
 8006478:	4610      	mov	r0, r2
 800647a:	4798      	blx	r3
 800647c:	60f8      	str	r0, [r7, #12]
      break;
 800647e:	e112      	b.n	80066a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	7c1b      	ldrb	r3, [r3, #16]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d10d      	bne.n	80064a4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800648e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006490:	f107 0208 	add.w	r2, r7, #8
 8006494:	4610      	mov	r0, r2
 8006496:	4798      	blx	r3
 8006498:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	3301      	adds	r3, #1
 800649e:	2202      	movs	r2, #2
 80064a0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80064a2:	e100      	b.n	80066a6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ac:	f107 0208 	add.w	r2, r7, #8
 80064b0:	4610      	mov	r0, r2
 80064b2:	4798      	blx	r3
 80064b4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	3301      	adds	r3, #1
 80064ba:	2202      	movs	r2, #2
 80064bc:	701a      	strb	r2, [r3, #0]
      break;
 80064be:	e0f2      	b.n	80066a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	885b      	ldrh	r3, [r3, #2]
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	2b05      	cmp	r3, #5
 80064c8:	f200 80ac 	bhi.w	8006624 <USBD_GetDescriptor+0x204>
 80064cc:	a201      	add	r2, pc, #4	; (adr r2, 80064d4 <USBD_GetDescriptor+0xb4>)
 80064ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064d2:	bf00      	nop
 80064d4:	080064ed 	.word	0x080064ed
 80064d8:	08006521 	.word	0x08006521
 80064dc:	08006555 	.word	0x08006555
 80064e0:	08006589 	.word	0x08006589
 80064e4:	080065bd 	.word	0x080065bd
 80064e8:	080065f1 	.word	0x080065f1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d00b      	beq.n	8006510 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	7c12      	ldrb	r2, [r2, #16]
 8006504:	f107 0108 	add.w	r1, r7, #8
 8006508:	4610      	mov	r0, r2
 800650a:	4798      	blx	r3
 800650c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800650e:	e091      	b.n	8006634 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006510:	6839      	ldr	r1, [r7, #0]
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f000 facb 	bl	8006aae <USBD_CtlError>
            err++;
 8006518:	7afb      	ldrb	r3, [r7, #11]
 800651a:	3301      	adds	r3, #1
 800651c:	72fb      	strb	r3, [r7, #11]
          break;
 800651e:	e089      	b.n	8006634 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d00b      	beq.n	8006544 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006532:	689b      	ldr	r3, [r3, #8]
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	7c12      	ldrb	r2, [r2, #16]
 8006538:	f107 0108 	add.w	r1, r7, #8
 800653c:	4610      	mov	r0, r2
 800653e:	4798      	blx	r3
 8006540:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006542:	e077      	b.n	8006634 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006544:	6839      	ldr	r1, [r7, #0]
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f000 fab1 	bl	8006aae <USBD_CtlError>
            err++;
 800654c:	7afb      	ldrb	r3, [r7, #11]
 800654e:	3301      	adds	r3, #1
 8006550:	72fb      	strb	r3, [r7, #11]
          break;
 8006552:	e06f      	b.n	8006634 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800655a:	68db      	ldr	r3, [r3, #12]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d00b      	beq.n	8006578 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006566:	68db      	ldr	r3, [r3, #12]
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	7c12      	ldrb	r2, [r2, #16]
 800656c:	f107 0108 	add.w	r1, r7, #8
 8006570:	4610      	mov	r0, r2
 8006572:	4798      	blx	r3
 8006574:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006576:	e05d      	b.n	8006634 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006578:	6839      	ldr	r1, [r7, #0]
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f000 fa97 	bl	8006aae <USBD_CtlError>
            err++;
 8006580:	7afb      	ldrb	r3, [r7, #11]
 8006582:	3301      	adds	r3, #1
 8006584:	72fb      	strb	r3, [r7, #11]
          break;
 8006586:	e055      	b.n	8006634 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800658e:	691b      	ldr	r3, [r3, #16]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d00b      	beq.n	80065ac <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800659a:	691b      	ldr	r3, [r3, #16]
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	7c12      	ldrb	r2, [r2, #16]
 80065a0:	f107 0108 	add.w	r1, r7, #8
 80065a4:	4610      	mov	r0, r2
 80065a6:	4798      	blx	r3
 80065a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80065aa:	e043      	b.n	8006634 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80065ac:	6839      	ldr	r1, [r7, #0]
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 fa7d 	bl	8006aae <USBD_CtlError>
            err++;
 80065b4:	7afb      	ldrb	r3, [r7, #11]
 80065b6:	3301      	adds	r3, #1
 80065b8:	72fb      	strb	r3, [r7, #11]
          break;
 80065ba:	e03b      	b.n	8006634 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065c2:	695b      	ldr	r3, [r3, #20]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d00b      	beq.n	80065e0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065ce:	695b      	ldr	r3, [r3, #20]
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	7c12      	ldrb	r2, [r2, #16]
 80065d4:	f107 0108 	add.w	r1, r7, #8
 80065d8:	4610      	mov	r0, r2
 80065da:	4798      	blx	r3
 80065dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80065de:	e029      	b.n	8006634 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80065e0:	6839      	ldr	r1, [r7, #0]
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f000 fa63 	bl	8006aae <USBD_CtlError>
            err++;
 80065e8:	7afb      	ldrb	r3, [r7, #11]
 80065ea:	3301      	adds	r3, #1
 80065ec:	72fb      	strb	r3, [r7, #11]
          break;
 80065ee:	e021      	b.n	8006634 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065f6:	699b      	ldr	r3, [r3, #24]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d00b      	beq.n	8006614 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006602:	699b      	ldr	r3, [r3, #24]
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	7c12      	ldrb	r2, [r2, #16]
 8006608:	f107 0108 	add.w	r1, r7, #8
 800660c:	4610      	mov	r0, r2
 800660e:	4798      	blx	r3
 8006610:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006612:	e00f      	b.n	8006634 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006614:	6839      	ldr	r1, [r7, #0]
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 fa49 	bl	8006aae <USBD_CtlError>
            err++;
 800661c:	7afb      	ldrb	r3, [r7, #11]
 800661e:	3301      	adds	r3, #1
 8006620:	72fb      	strb	r3, [r7, #11]
          break;
 8006622:	e007      	b.n	8006634 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006624:	6839      	ldr	r1, [r7, #0]
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 fa41 	bl	8006aae <USBD_CtlError>
          err++;
 800662c:	7afb      	ldrb	r3, [r7, #11]
 800662e:	3301      	adds	r3, #1
 8006630:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006632:	bf00      	nop
      }
      break;
 8006634:	e037      	b.n	80066a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	7c1b      	ldrb	r3, [r3, #16]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d109      	bne.n	8006652 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006646:	f107 0208 	add.w	r2, r7, #8
 800664a:	4610      	mov	r0, r2
 800664c:	4798      	blx	r3
 800664e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006650:	e029      	b.n	80066a6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006652:	6839      	ldr	r1, [r7, #0]
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f000 fa2a 	bl	8006aae <USBD_CtlError>
        err++;
 800665a:	7afb      	ldrb	r3, [r7, #11]
 800665c:	3301      	adds	r3, #1
 800665e:	72fb      	strb	r3, [r7, #11]
      break;
 8006660:	e021      	b.n	80066a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	7c1b      	ldrb	r3, [r3, #16]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d10d      	bne.n	8006686 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006672:	f107 0208 	add.w	r2, r7, #8
 8006676:	4610      	mov	r0, r2
 8006678:	4798      	blx	r3
 800667a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	3301      	adds	r3, #1
 8006680:	2207      	movs	r2, #7
 8006682:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006684:	e00f      	b.n	80066a6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006686:	6839      	ldr	r1, [r7, #0]
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f000 fa10 	bl	8006aae <USBD_CtlError>
        err++;
 800668e:	7afb      	ldrb	r3, [r7, #11]
 8006690:	3301      	adds	r3, #1
 8006692:	72fb      	strb	r3, [r7, #11]
      break;
 8006694:	e007      	b.n	80066a6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006696:	6839      	ldr	r1, [r7, #0]
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f000 fa08 	bl	8006aae <USBD_CtlError>
      err++;
 800669e:	7afb      	ldrb	r3, [r7, #11]
 80066a0:	3301      	adds	r3, #1
 80066a2:	72fb      	strb	r3, [r7, #11]
      break;
 80066a4:	bf00      	nop
  }

  if (err != 0U)
 80066a6:	7afb      	ldrb	r3, [r7, #11]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d11e      	bne.n	80066ea <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	88db      	ldrh	r3, [r3, #6]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d016      	beq.n	80066e2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80066b4:	893b      	ldrh	r3, [r7, #8]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d00e      	beq.n	80066d8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	88da      	ldrh	r2, [r3, #6]
 80066be:	893b      	ldrh	r3, [r7, #8]
 80066c0:	4293      	cmp	r3, r2
 80066c2:	bf28      	it	cs
 80066c4:	4613      	movcs	r3, r2
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80066ca:	893b      	ldrh	r3, [r7, #8]
 80066cc:	461a      	mov	r2, r3
 80066ce:	68f9      	ldr	r1, [r7, #12]
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f000 fa5d 	bl	8006b90 <USBD_CtlSendData>
 80066d6:	e009      	b.n	80066ec <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80066d8:	6839      	ldr	r1, [r7, #0]
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 f9e7 	bl	8006aae <USBD_CtlError>
 80066e0:	e004      	b.n	80066ec <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f000 faae 	bl	8006c44 <USBD_CtlSendStatus>
 80066e8:	e000      	b.n	80066ec <USBD_GetDescriptor+0x2cc>
    return;
 80066ea:	bf00      	nop
  }
}
 80066ec:	3710      	adds	r7, #16
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}
 80066f2:	bf00      	nop

080066f4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b084      	sub	sp, #16
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	889b      	ldrh	r3, [r3, #4]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d131      	bne.n	800676a <USBD_SetAddress+0x76>
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	88db      	ldrh	r3, [r3, #6]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d12d      	bne.n	800676a <USBD_SetAddress+0x76>
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	885b      	ldrh	r3, [r3, #2]
 8006712:	2b7f      	cmp	r3, #127	; 0x7f
 8006714:	d829      	bhi.n	800676a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	885b      	ldrh	r3, [r3, #2]
 800671a:	b2db      	uxtb	r3, r3
 800671c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006720:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006728:	b2db      	uxtb	r3, r3
 800672a:	2b03      	cmp	r3, #3
 800672c:	d104      	bne.n	8006738 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800672e:	6839      	ldr	r1, [r7, #0]
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f000 f9bc 	bl	8006aae <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006736:	e01d      	b.n	8006774 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	7bfa      	ldrb	r2, [r7, #15]
 800673c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006740:	7bfb      	ldrb	r3, [r7, #15]
 8006742:	4619      	mov	r1, r3
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f003 fcc3 	bl	800a0d0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 fa7a 	bl	8006c44 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006750:	7bfb      	ldrb	r3, [r7, #15]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d004      	beq.n	8006760 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2202      	movs	r2, #2
 800675a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800675e:	e009      	b.n	8006774 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006768:	e004      	b.n	8006774 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800676a:	6839      	ldr	r1, [r7, #0]
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f000 f99e 	bl	8006aae <USBD_CtlError>
  }
}
 8006772:	bf00      	nop
 8006774:	bf00      	nop
 8006776:	3710      	adds	r7, #16
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}

0800677c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b084      	sub	sp, #16
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006786:	2300      	movs	r3, #0
 8006788:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	885b      	ldrh	r3, [r3, #2]
 800678e:	b2da      	uxtb	r2, r3
 8006790:	4b4e      	ldr	r3, [pc, #312]	; (80068cc <USBD_SetConfig+0x150>)
 8006792:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006794:	4b4d      	ldr	r3, [pc, #308]	; (80068cc <USBD_SetConfig+0x150>)
 8006796:	781b      	ldrb	r3, [r3, #0]
 8006798:	2b01      	cmp	r3, #1
 800679a:	d905      	bls.n	80067a8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800679c:	6839      	ldr	r1, [r7, #0]
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f000 f985 	bl	8006aae <USBD_CtlError>
    return USBD_FAIL;
 80067a4:	2303      	movs	r3, #3
 80067a6:	e08c      	b.n	80068c2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067ae:	b2db      	uxtb	r3, r3
 80067b0:	2b02      	cmp	r3, #2
 80067b2:	d002      	beq.n	80067ba <USBD_SetConfig+0x3e>
 80067b4:	2b03      	cmp	r3, #3
 80067b6:	d029      	beq.n	800680c <USBD_SetConfig+0x90>
 80067b8:	e075      	b.n	80068a6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80067ba:	4b44      	ldr	r3, [pc, #272]	; (80068cc <USBD_SetConfig+0x150>)
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d020      	beq.n	8006804 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80067c2:	4b42      	ldr	r3, [pc, #264]	; (80068cc <USBD_SetConfig+0x150>)
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	461a      	mov	r2, r3
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80067cc:	4b3f      	ldr	r3, [pc, #252]	; (80068cc <USBD_SetConfig+0x150>)
 80067ce:	781b      	ldrb	r3, [r3, #0]
 80067d0:	4619      	mov	r1, r3
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f7fe ffe7 	bl	80057a6 <USBD_SetClassConfig>
 80067d8:	4603      	mov	r3, r0
 80067da:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80067dc:	7bfb      	ldrb	r3, [r7, #15]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d008      	beq.n	80067f4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80067e2:	6839      	ldr	r1, [r7, #0]
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f000 f962 	bl	8006aae <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2202      	movs	r2, #2
 80067ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80067f2:	e065      	b.n	80068c0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f000 fa25 	bl	8006c44 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2203      	movs	r2, #3
 80067fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006802:	e05d      	b.n	80068c0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f000 fa1d 	bl	8006c44 <USBD_CtlSendStatus>
      break;
 800680a:	e059      	b.n	80068c0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800680c:	4b2f      	ldr	r3, [pc, #188]	; (80068cc <USBD_SetConfig+0x150>)
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d112      	bne.n	800683a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2202      	movs	r2, #2
 8006818:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800681c:	4b2b      	ldr	r3, [pc, #172]	; (80068cc <USBD_SetConfig+0x150>)
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	461a      	mov	r2, r3
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006826:	4b29      	ldr	r3, [pc, #164]	; (80068cc <USBD_SetConfig+0x150>)
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	4619      	mov	r1, r3
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f7fe ffd6 	bl	80057de <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 fa06 	bl	8006c44 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006838:	e042      	b.n	80068c0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800683a:	4b24      	ldr	r3, [pc, #144]	; (80068cc <USBD_SetConfig+0x150>)
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	461a      	mov	r2, r3
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	429a      	cmp	r2, r3
 8006846:	d02a      	beq.n	800689e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	b2db      	uxtb	r3, r3
 800684e:	4619      	mov	r1, r3
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f7fe ffc4 	bl	80057de <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006856:	4b1d      	ldr	r3, [pc, #116]	; (80068cc <USBD_SetConfig+0x150>)
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	461a      	mov	r2, r3
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006860:	4b1a      	ldr	r3, [pc, #104]	; (80068cc <USBD_SetConfig+0x150>)
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	4619      	mov	r1, r3
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f7fe ff9d 	bl	80057a6 <USBD_SetClassConfig>
 800686c:	4603      	mov	r3, r0
 800686e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006870:	7bfb      	ldrb	r3, [r7, #15]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d00f      	beq.n	8006896 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006876:	6839      	ldr	r1, [r7, #0]
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f000 f918 	bl	8006aae <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	b2db      	uxtb	r3, r3
 8006884:	4619      	mov	r1, r3
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f7fe ffa9 	bl	80057de <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2202      	movs	r2, #2
 8006890:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006894:	e014      	b.n	80068c0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f000 f9d4 	bl	8006c44 <USBD_CtlSendStatus>
      break;
 800689c:	e010      	b.n	80068c0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f000 f9d0 	bl	8006c44 <USBD_CtlSendStatus>
      break;
 80068a4:	e00c      	b.n	80068c0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80068a6:	6839      	ldr	r1, [r7, #0]
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f000 f900 	bl	8006aae <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80068ae:	4b07      	ldr	r3, [pc, #28]	; (80068cc <USBD_SetConfig+0x150>)
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	4619      	mov	r1, r3
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f7fe ff92 	bl	80057de <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80068ba:	2303      	movs	r3, #3
 80068bc:	73fb      	strb	r3, [r7, #15]
      break;
 80068be:	bf00      	nop
  }

  return ret;
 80068c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3710      	adds	r7, #16
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	bf00      	nop
 80068cc:	200001dc 	.word	0x200001dc

080068d0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b082      	sub	sp, #8
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	88db      	ldrh	r3, [r3, #6]
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d004      	beq.n	80068ec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80068e2:	6839      	ldr	r1, [r7, #0]
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f000 f8e2 	bl	8006aae <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80068ea:	e023      	b.n	8006934 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	2b02      	cmp	r3, #2
 80068f6:	dc02      	bgt.n	80068fe <USBD_GetConfig+0x2e>
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	dc03      	bgt.n	8006904 <USBD_GetConfig+0x34>
 80068fc:	e015      	b.n	800692a <USBD_GetConfig+0x5a>
 80068fe:	2b03      	cmp	r3, #3
 8006900:	d00b      	beq.n	800691a <USBD_GetConfig+0x4a>
 8006902:	e012      	b.n	800692a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2200      	movs	r2, #0
 8006908:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	3308      	adds	r3, #8
 800690e:	2201      	movs	r2, #1
 8006910:	4619      	mov	r1, r3
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 f93c 	bl	8006b90 <USBD_CtlSendData>
        break;
 8006918:	e00c      	b.n	8006934 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	3304      	adds	r3, #4
 800691e:	2201      	movs	r2, #1
 8006920:	4619      	mov	r1, r3
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 f934 	bl	8006b90 <USBD_CtlSendData>
        break;
 8006928:	e004      	b.n	8006934 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800692a:	6839      	ldr	r1, [r7, #0]
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f000 f8be 	bl	8006aae <USBD_CtlError>
        break;
 8006932:	bf00      	nop
}
 8006934:	bf00      	nop
 8006936:	3708      	adds	r7, #8
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}

0800693c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b082      	sub	sp, #8
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800694c:	b2db      	uxtb	r3, r3
 800694e:	3b01      	subs	r3, #1
 8006950:	2b02      	cmp	r3, #2
 8006952:	d81e      	bhi.n	8006992 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	88db      	ldrh	r3, [r3, #6]
 8006958:	2b02      	cmp	r3, #2
 800695a:	d004      	beq.n	8006966 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800695c:	6839      	ldr	r1, [r7, #0]
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 f8a5 	bl	8006aae <USBD_CtlError>
        break;
 8006964:	e01a      	b.n	800699c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2201      	movs	r2, #1
 800696a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006972:	2b00      	cmp	r3, #0
 8006974:	d005      	beq.n	8006982 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	68db      	ldr	r3, [r3, #12]
 800697a:	f043 0202 	orr.w	r2, r3, #2
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	330c      	adds	r3, #12
 8006986:	2202      	movs	r2, #2
 8006988:	4619      	mov	r1, r3
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 f900 	bl	8006b90 <USBD_CtlSendData>
      break;
 8006990:	e004      	b.n	800699c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006992:	6839      	ldr	r1, [r7, #0]
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f000 f88a 	bl	8006aae <USBD_CtlError>
      break;
 800699a:	bf00      	nop
  }
}
 800699c:	bf00      	nop
 800699e:	3708      	adds	r7, #8
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}

080069a4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b082      	sub	sp, #8
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	885b      	ldrh	r3, [r3, #2]
 80069b2:	2b01      	cmp	r3, #1
 80069b4:	d107      	bne.n	80069c6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2201      	movs	r2, #1
 80069ba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f000 f940 	bl	8006c44 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80069c4:	e013      	b.n	80069ee <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	885b      	ldrh	r3, [r3, #2]
 80069ca:	2b02      	cmp	r3, #2
 80069cc:	d10b      	bne.n	80069e6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	889b      	ldrh	r3, [r3, #4]
 80069d2:	0a1b      	lsrs	r3, r3, #8
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	b2da      	uxtb	r2, r3
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 f930 	bl	8006c44 <USBD_CtlSendStatus>
}
 80069e4:	e003      	b.n	80069ee <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80069e6:	6839      	ldr	r1, [r7, #0]
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f000 f860 	bl	8006aae <USBD_CtlError>
}
 80069ee:	bf00      	nop
 80069f0:	3708      	adds	r7, #8
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}

080069f6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069f6:	b580      	push	{r7, lr}
 80069f8:	b082      	sub	sp, #8
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	6078      	str	r0, [r7, #4]
 80069fe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	3b01      	subs	r3, #1
 8006a0a:	2b02      	cmp	r3, #2
 8006a0c:	d80b      	bhi.n	8006a26 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	885b      	ldrh	r3, [r3, #2]
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	d10c      	bne.n	8006a30 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 f910 	bl	8006c44 <USBD_CtlSendStatus>
      }
      break;
 8006a24:	e004      	b.n	8006a30 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006a26:	6839      	ldr	r1, [r7, #0]
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f000 f840 	bl	8006aae <USBD_CtlError>
      break;
 8006a2e:	e000      	b.n	8006a32 <USBD_ClrFeature+0x3c>
      break;
 8006a30:	bf00      	nop
  }
}
 8006a32:	bf00      	nop
 8006a34:	3708      	adds	r7, #8
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}

08006a3a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006a3a:	b580      	push	{r7, lr}
 8006a3c:	b084      	sub	sp, #16
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	6078      	str	r0, [r7, #4]
 8006a42:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	781a      	ldrb	r2, [r3, #0]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	3301      	adds	r3, #1
 8006a54:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	781a      	ldrb	r2, [r3, #0]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	3301      	adds	r3, #1
 8006a62:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006a64:	68f8      	ldr	r0, [r7, #12]
 8006a66:	f7ff fa41 	bl	8005eec <SWAPBYTE>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	3301      	adds	r3, #1
 8006a76:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	3301      	adds	r3, #1
 8006a7c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006a7e:	68f8      	ldr	r0, [r7, #12]
 8006a80:	f7ff fa34 	bl	8005eec <SWAPBYTE>
 8006a84:	4603      	mov	r3, r0
 8006a86:	461a      	mov	r2, r3
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	3301      	adds	r3, #1
 8006a90:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	3301      	adds	r3, #1
 8006a96:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006a98:	68f8      	ldr	r0, [r7, #12]
 8006a9a:	f7ff fa27 	bl	8005eec <SWAPBYTE>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	80da      	strh	r2, [r3, #6]
}
 8006aa6:	bf00      	nop
 8006aa8:	3710      	adds	r7, #16
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}

08006aae <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006aae:	b580      	push	{r7, lr}
 8006ab0:	b082      	sub	sp, #8
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	6078      	str	r0, [r7, #4]
 8006ab6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006ab8:	2180      	movs	r1, #128	; 0x80
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f003 fa9e 	bl	8009ffc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006ac0:	2100      	movs	r1, #0
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f003 fa9a 	bl	8009ffc <USBD_LL_StallEP>
}
 8006ac8:	bf00      	nop
 8006aca:	3708      	adds	r7, #8
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b086      	sub	sp, #24
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	60f8      	str	r0, [r7, #12]
 8006ad8:	60b9      	str	r1, [r7, #8]
 8006ada:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006adc:	2300      	movs	r3, #0
 8006ade:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d036      	beq.n	8006b54 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006aea:	6938      	ldr	r0, [r7, #16]
 8006aec:	f000 f836 	bl	8006b5c <USBD_GetLen>
 8006af0:	4603      	mov	r3, r0
 8006af2:	3301      	adds	r3, #1
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	005b      	lsls	r3, r3, #1
 8006af8:	b29a      	uxth	r2, r3
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006afe:	7dfb      	ldrb	r3, [r7, #23]
 8006b00:	68ba      	ldr	r2, [r7, #8]
 8006b02:	4413      	add	r3, r2
 8006b04:	687a      	ldr	r2, [r7, #4]
 8006b06:	7812      	ldrb	r2, [r2, #0]
 8006b08:	701a      	strb	r2, [r3, #0]
  idx++;
 8006b0a:	7dfb      	ldrb	r3, [r7, #23]
 8006b0c:	3301      	adds	r3, #1
 8006b0e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006b10:	7dfb      	ldrb	r3, [r7, #23]
 8006b12:	68ba      	ldr	r2, [r7, #8]
 8006b14:	4413      	add	r3, r2
 8006b16:	2203      	movs	r2, #3
 8006b18:	701a      	strb	r2, [r3, #0]
  idx++;
 8006b1a:	7dfb      	ldrb	r3, [r7, #23]
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006b20:	e013      	b.n	8006b4a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006b22:	7dfb      	ldrb	r3, [r7, #23]
 8006b24:	68ba      	ldr	r2, [r7, #8]
 8006b26:	4413      	add	r3, r2
 8006b28:	693a      	ldr	r2, [r7, #16]
 8006b2a:	7812      	ldrb	r2, [r2, #0]
 8006b2c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	3301      	adds	r3, #1
 8006b32:	613b      	str	r3, [r7, #16]
    idx++;
 8006b34:	7dfb      	ldrb	r3, [r7, #23]
 8006b36:	3301      	adds	r3, #1
 8006b38:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006b3a:	7dfb      	ldrb	r3, [r7, #23]
 8006b3c:	68ba      	ldr	r2, [r7, #8]
 8006b3e:	4413      	add	r3, r2
 8006b40:	2200      	movs	r2, #0
 8006b42:	701a      	strb	r2, [r3, #0]
    idx++;
 8006b44:	7dfb      	ldrb	r3, [r7, #23]
 8006b46:	3301      	adds	r3, #1
 8006b48:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d1e7      	bne.n	8006b22 <USBD_GetString+0x52>
 8006b52:	e000      	b.n	8006b56 <USBD_GetString+0x86>
    return;
 8006b54:	bf00      	nop
  }
}
 8006b56:	3718      	adds	r7, #24
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}

08006b5c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b085      	sub	sp, #20
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006b64:	2300      	movs	r3, #0
 8006b66:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006b6c:	e005      	b.n	8006b7a <USBD_GetLen+0x1e>
  {
    len++;
 8006b6e:	7bfb      	ldrb	r3, [r7, #15]
 8006b70:	3301      	adds	r3, #1
 8006b72:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	3301      	adds	r3, #1
 8006b78:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	781b      	ldrb	r3, [r3, #0]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d1f5      	bne.n	8006b6e <USBD_GetLen+0x12>
  }

  return len;
 8006b82:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3714      	adds	r7, #20
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr

08006b90 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b084      	sub	sp, #16
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	60f8      	str	r0, [r7, #12]
 8006b98:	60b9      	str	r1, [r7, #8]
 8006b9a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2202      	movs	r2, #2
 8006ba0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	687a      	ldr	r2, [r7, #4]
 8006bae:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	68ba      	ldr	r2, [r7, #8]
 8006bb4:	2100      	movs	r1, #0
 8006bb6:	68f8      	ldr	r0, [r7, #12]
 8006bb8:	f003 faa9 	bl	800a10e <USBD_LL_Transmit>

  return USBD_OK;
 8006bbc:	2300      	movs	r3, #0
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3710      	adds	r7, #16
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}

08006bc6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006bc6:	b580      	push	{r7, lr}
 8006bc8:	b084      	sub	sp, #16
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	60f8      	str	r0, [r7, #12]
 8006bce:	60b9      	str	r1, [r7, #8]
 8006bd0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	68ba      	ldr	r2, [r7, #8]
 8006bd6:	2100      	movs	r1, #0
 8006bd8:	68f8      	ldr	r0, [r7, #12]
 8006bda:	f003 fa98 	bl	800a10e <USBD_LL_Transmit>

  return USBD_OK;
 8006bde:	2300      	movs	r3, #0
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3710      	adds	r7, #16
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b084      	sub	sp, #16
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	60f8      	str	r0, [r7, #12]
 8006bf0:	60b9      	str	r1, [r7, #8]
 8006bf2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2203      	movs	r2, #3
 8006bf8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	687a      	ldr	r2, [r7, #4]
 8006c00:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	687a      	ldr	r2, [r7, #4]
 8006c08:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	68ba      	ldr	r2, [r7, #8]
 8006c10:	2100      	movs	r1, #0
 8006c12:	68f8      	ldr	r0, [r7, #12]
 8006c14:	f003 fa9c 	bl	800a150 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006c18:	2300      	movs	r3, #0
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3710      	adds	r7, #16
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}

08006c22 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006c22:	b580      	push	{r7, lr}
 8006c24:	b084      	sub	sp, #16
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	60f8      	str	r0, [r7, #12]
 8006c2a:	60b9      	str	r1, [r7, #8]
 8006c2c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	68ba      	ldr	r2, [r7, #8]
 8006c32:	2100      	movs	r1, #0
 8006c34:	68f8      	ldr	r0, [r7, #12]
 8006c36:	f003 fa8b 	bl	800a150 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006c3a:	2300      	movs	r3, #0
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3710      	adds	r7, #16
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}

08006c44 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b082      	sub	sp, #8
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2204      	movs	r2, #4
 8006c50:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006c54:	2300      	movs	r3, #0
 8006c56:	2200      	movs	r2, #0
 8006c58:	2100      	movs	r1, #0
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f003 fa57 	bl	800a10e <USBD_LL_Transmit>

  return USBD_OK;
 8006c60:	2300      	movs	r3, #0
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3708      	adds	r7, #8
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}

08006c6a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006c6a:	b580      	push	{r7, lr}
 8006c6c:	b082      	sub	sp, #8
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2205      	movs	r2, #5
 8006c76:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	2100      	movs	r1, #0
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f003 fa65 	bl	800a150 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006c86:	2300      	movs	r3, #0
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3708      	adds	r7, #8
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}

08006c90 <__NVIC_SetPriority>:
{
 8006c90:	b480      	push	{r7}
 8006c92:	b083      	sub	sp, #12
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	4603      	mov	r3, r0
 8006c98:	6039      	str	r1, [r7, #0]
 8006c9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	db0a      	blt.n	8006cba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	b2da      	uxtb	r2, r3
 8006ca8:	490c      	ldr	r1, [pc, #48]	; (8006cdc <__NVIC_SetPriority+0x4c>)
 8006caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cae:	0112      	lsls	r2, r2, #4
 8006cb0:	b2d2      	uxtb	r2, r2
 8006cb2:	440b      	add	r3, r1
 8006cb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006cb8:	e00a      	b.n	8006cd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	b2da      	uxtb	r2, r3
 8006cbe:	4908      	ldr	r1, [pc, #32]	; (8006ce0 <__NVIC_SetPriority+0x50>)
 8006cc0:	79fb      	ldrb	r3, [r7, #7]
 8006cc2:	f003 030f 	and.w	r3, r3, #15
 8006cc6:	3b04      	subs	r3, #4
 8006cc8:	0112      	lsls	r2, r2, #4
 8006cca:	b2d2      	uxtb	r2, r2
 8006ccc:	440b      	add	r3, r1
 8006cce:	761a      	strb	r2, [r3, #24]
}
 8006cd0:	bf00      	nop
 8006cd2:	370c      	adds	r7, #12
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr
 8006cdc:	e000e100 	.word	0xe000e100
 8006ce0:	e000ed00 	.word	0xe000ed00

08006ce4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006ce8:	4b05      	ldr	r3, [pc, #20]	; (8006d00 <SysTick_Handler+0x1c>)
 8006cea:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006cec:	f001 fd28 	bl	8008740 <xTaskGetSchedulerState>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d001      	beq.n	8006cfa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006cf6:	f002 fb0f 	bl	8009318 <xPortSysTickHandler>
  }
}
 8006cfa:	bf00      	nop
 8006cfc:	bd80      	pop	{r7, pc}
 8006cfe:	bf00      	nop
 8006d00:	e000e010 	.word	0xe000e010

08006d04 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006d04:	b580      	push	{r7, lr}
 8006d06:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006d08:	2100      	movs	r1, #0
 8006d0a:	f06f 0004 	mvn.w	r0, #4
 8006d0e:	f7ff ffbf 	bl	8006c90 <__NVIC_SetPriority>
#endif
}
 8006d12:	bf00      	nop
 8006d14:	bd80      	pop	{r7, pc}
	...

08006d18 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006d18:	b480      	push	{r7}
 8006d1a:	b083      	sub	sp, #12
 8006d1c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d1e:	f3ef 8305 	mrs	r3, IPSR
 8006d22:	603b      	str	r3, [r7, #0]
  return(result);
 8006d24:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d003      	beq.n	8006d32 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006d2a:	f06f 0305 	mvn.w	r3, #5
 8006d2e:	607b      	str	r3, [r7, #4]
 8006d30:	e00c      	b.n	8006d4c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006d32:	4b0a      	ldr	r3, [pc, #40]	; (8006d5c <osKernelInitialize+0x44>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d105      	bne.n	8006d46 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006d3a:	4b08      	ldr	r3, [pc, #32]	; (8006d5c <osKernelInitialize+0x44>)
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006d40:	2300      	movs	r3, #0
 8006d42:	607b      	str	r3, [r7, #4]
 8006d44:	e002      	b.n	8006d4c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006d46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d4a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006d4c:	687b      	ldr	r3, [r7, #4]
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	370c      	adds	r7, #12
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr
 8006d5a:	bf00      	nop
 8006d5c:	200001e0 	.word	0x200001e0

08006d60 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b082      	sub	sp, #8
 8006d64:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d66:	f3ef 8305 	mrs	r3, IPSR
 8006d6a:	603b      	str	r3, [r7, #0]
  return(result);
 8006d6c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d003      	beq.n	8006d7a <osKernelStart+0x1a>
    stat = osErrorISR;
 8006d72:	f06f 0305 	mvn.w	r3, #5
 8006d76:	607b      	str	r3, [r7, #4]
 8006d78:	e010      	b.n	8006d9c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006d7a:	4b0b      	ldr	r3, [pc, #44]	; (8006da8 <osKernelStart+0x48>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d109      	bne.n	8006d96 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006d82:	f7ff ffbf 	bl	8006d04 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006d86:	4b08      	ldr	r3, [pc, #32]	; (8006da8 <osKernelStart+0x48>)
 8006d88:	2202      	movs	r2, #2
 8006d8a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006d8c:	f001 f87c 	bl	8007e88 <vTaskStartScheduler>
      stat = osOK;
 8006d90:	2300      	movs	r3, #0
 8006d92:	607b      	str	r3, [r7, #4]
 8006d94:	e002      	b.n	8006d9c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006d96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d9a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006d9c:	687b      	ldr	r3, [r7, #4]
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3708      	adds	r7, #8
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}
 8006da6:	bf00      	nop
 8006da8:	200001e0 	.word	0x200001e0

08006dac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b08e      	sub	sp, #56	; 0x38
 8006db0:	af04      	add	r7, sp, #16
 8006db2:	60f8      	str	r0, [r7, #12]
 8006db4:	60b9      	str	r1, [r7, #8]
 8006db6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006db8:	2300      	movs	r3, #0
 8006dba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006dbc:	f3ef 8305 	mrs	r3, IPSR
 8006dc0:	617b      	str	r3, [r7, #20]
  return(result);
 8006dc2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d17e      	bne.n	8006ec6 <osThreadNew+0x11a>
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d07b      	beq.n	8006ec6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006dce:	2380      	movs	r3, #128	; 0x80
 8006dd0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006dd2:	2318      	movs	r3, #24
 8006dd4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006dda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006dde:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d045      	beq.n	8006e72 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d002      	beq.n	8006df4 <osThreadNew+0x48>
        name = attr->name;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	699b      	ldr	r3, [r3, #24]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d002      	beq.n	8006e02 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	699b      	ldr	r3, [r3, #24]
 8006e00:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006e02:	69fb      	ldr	r3, [r7, #28]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d008      	beq.n	8006e1a <osThreadNew+0x6e>
 8006e08:	69fb      	ldr	r3, [r7, #28]
 8006e0a:	2b38      	cmp	r3, #56	; 0x38
 8006e0c:	d805      	bhi.n	8006e1a <osThreadNew+0x6e>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	f003 0301 	and.w	r3, r3, #1
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d001      	beq.n	8006e1e <osThreadNew+0x72>
        return (NULL);
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	e054      	b.n	8006ec8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	695b      	ldr	r3, [r3, #20]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d003      	beq.n	8006e2e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	695b      	ldr	r3, [r3, #20]
 8006e2a:	089b      	lsrs	r3, r3, #2
 8006e2c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d00e      	beq.n	8006e54 <osThreadNew+0xa8>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	68db      	ldr	r3, [r3, #12]
 8006e3a:	2bbb      	cmp	r3, #187	; 0xbb
 8006e3c:	d90a      	bls.n	8006e54 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d006      	beq.n	8006e54 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	695b      	ldr	r3, [r3, #20]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d002      	beq.n	8006e54 <osThreadNew+0xa8>
        mem = 1;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	61bb      	str	r3, [r7, #24]
 8006e52:	e010      	b.n	8006e76 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d10c      	bne.n	8006e76 <osThreadNew+0xca>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	68db      	ldr	r3, [r3, #12]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d108      	bne.n	8006e76 <osThreadNew+0xca>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	691b      	ldr	r3, [r3, #16]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d104      	bne.n	8006e76 <osThreadNew+0xca>
          mem = 0;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	61bb      	str	r3, [r7, #24]
 8006e70:	e001      	b.n	8006e76 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006e72:	2300      	movs	r3, #0
 8006e74:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006e76:	69bb      	ldr	r3, [r7, #24]
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d110      	bne.n	8006e9e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006e84:	9202      	str	r2, [sp, #8]
 8006e86:	9301      	str	r3, [sp, #4]
 8006e88:	69fb      	ldr	r3, [r7, #28]
 8006e8a:	9300      	str	r3, [sp, #0]
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	6a3a      	ldr	r2, [r7, #32]
 8006e90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006e92:	68f8      	ldr	r0, [r7, #12]
 8006e94:	f000 fe0c 	bl	8007ab0 <xTaskCreateStatic>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	613b      	str	r3, [r7, #16]
 8006e9c:	e013      	b.n	8006ec6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006e9e:	69bb      	ldr	r3, [r7, #24]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d110      	bne.n	8006ec6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006ea4:	6a3b      	ldr	r3, [r7, #32]
 8006ea6:	b29a      	uxth	r2, r3
 8006ea8:	f107 0310 	add.w	r3, r7, #16
 8006eac:	9301      	str	r3, [sp, #4]
 8006eae:	69fb      	ldr	r3, [r7, #28]
 8006eb0:	9300      	str	r3, [sp, #0]
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006eb6:	68f8      	ldr	r0, [r7, #12]
 8006eb8:	f000 fe57 	bl	8007b6a <xTaskCreate>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d001      	beq.n	8006ec6 <osThreadNew+0x11a>
            hTask = NULL;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006ec6:	693b      	ldr	r3, [r7, #16]
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3728      	adds	r7, #40	; 0x28
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}

08006ed0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ed8:	f3ef 8305 	mrs	r3, IPSR
 8006edc:	60bb      	str	r3, [r7, #8]
  return(result);
 8006ede:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d003      	beq.n	8006eec <osDelay+0x1c>
    stat = osErrorISR;
 8006ee4:	f06f 0305 	mvn.w	r3, #5
 8006ee8:	60fb      	str	r3, [r7, #12]
 8006eea:	e007      	b.n	8006efc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006eec:	2300      	movs	r3, #0
 8006eee:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d002      	beq.n	8006efc <osDelay+0x2c>
      vTaskDelay(ticks);
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 ff92 	bl	8007e20 <vTaskDelay>
    }
  }

  return (stat);
 8006efc:	68fb      	ldr	r3, [r7, #12]
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3710      	adds	r7, #16
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
	...

08006f08 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006f08:	b480      	push	{r7}
 8006f0a:	b085      	sub	sp, #20
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	60f8      	str	r0, [r7, #12]
 8006f10:	60b9      	str	r1, [r7, #8]
 8006f12:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	4a07      	ldr	r2, [pc, #28]	; (8006f34 <vApplicationGetIdleTaskMemory+0x2c>)
 8006f18:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	4a06      	ldr	r2, [pc, #24]	; (8006f38 <vApplicationGetIdleTaskMemory+0x30>)
 8006f1e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2280      	movs	r2, #128	; 0x80
 8006f24:	601a      	str	r2, [r3, #0]
}
 8006f26:	bf00      	nop
 8006f28:	3714      	adds	r7, #20
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr
 8006f32:	bf00      	nop
 8006f34:	200001e4 	.word	0x200001e4
 8006f38:	200002a0 	.word	0x200002a0

08006f3c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006f3c:	b480      	push	{r7}
 8006f3e:	b085      	sub	sp, #20
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	60f8      	str	r0, [r7, #12]
 8006f44:	60b9      	str	r1, [r7, #8]
 8006f46:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	4a07      	ldr	r2, [pc, #28]	; (8006f68 <vApplicationGetTimerTaskMemory+0x2c>)
 8006f4c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	4a06      	ldr	r2, [pc, #24]	; (8006f6c <vApplicationGetTimerTaskMemory+0x30>)
 8006f52:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006f5a:	601a      	str	r2, [r3, #0]
}
 8006f5c:	bf00      	nop
 8006f5e:	3714      	adds	r7, #20
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr
 8006f68:	200004a0 	.word	0x200004a0
 8006f6c:	2000055c 	.word	0x2000055c

08006f70 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006f70:	b480      	push	{r7}
 8006f72:	b083      	sub	sp, #12
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f103 0208 	add.w	r2, r3, #8
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f88:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f103 0208 	add.w	r2, r3, #8
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f103 0208 	add.w	r2, r3, #8
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006fa4:	bf00      	nop
 8006fa6:	370c      	adds	r7, #12
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr

08006fb0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b083      	sub	sp, #12
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006fbe:	bf00      	nop
 8006fc0:	370c      	adds	r7, #12
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr

08006fca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006fca:	b480      	push	{r7}
 8006fcc:	b085      	sub	sp, #20
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6078      	str	r0, [r7, #4]
 8006fd2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	68fa      	ldr	r2, [r7, #12]
 8006fde:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	689a      	ldr	r2, [r3, #8]
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	683a      	ldr	r2, [r7, #0]
 8006fee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	683a      	ldr	r2, [r7, #0]
 8006ff4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	1c5a      	adds	r2, r3, #1
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	601a      	str	r2, [r3, #0]
}
 8007006:	bf00      	nop
 8007008:	3714      	adds	r7, #20
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr

08007012 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007012:	b480      	push	{r7}
 8007014:	b085      	sub	sp, #20
 8007016:	af00      	add	r7, sp, #0
 8007018:	6078      	str	r0, [r7, #4]
 800701a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007028:	d103      	bne.n	8007032 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	691b      	ldr	r3, [r3, #16]
 800702e:	60fb      	str	r3, [r7, #12]
 8007030:	e00c      	b.n	800704c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	3308      	adds	r3, #8
 8007036:	60fb      	str	r3, [r7, #12]
 8007038:	e002      	b.n	8007040 <vListInsert+0x2e>
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	60fb      	str	r3, [r7, #12]
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	68ba      	ldr	r2, [r7, #8]
 8007048:	429a      	cmp	r2, r3
 800704a:	d2f6      	bcs.n	800703a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	685a      	ldr	r2, [r3, #4]
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	683a      	ldr	r2, [r7, #0]
 800705a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	68fa      	ldr	r2, [r7, #12]
 8007060:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	683a      	ldr	r2, [r7, #0]
 8007066:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	687a      	ldr	r2, [r7, #4]
 800706c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	1c5a      	adds	r2, r3, #1
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	601a      	str	r2, [r3, #0]
}
 8007078:	bf00      	nop
 800707a:	3714      	adds	r7, #20
 800707c:	46bd      	mov	sp, r7
 800707e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007082:	4770      	bx	lr

08007084 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007084:	b480      	push	{r7}
 8007086:	b085      	sub	sp, #20
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	691b      	ldr	r3, [r3, #16]
 8007090:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	687a      	ldr	r2, [r7, #4]
 8007098:	6892      	ldr	r2, [r2, #8]
 800709a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	689b      	ldr	r3, [r3, #8]
 80070a0:	687a      	ldr	r2, [r7, #4]
 80070a2:	6852      	ldr	r2, [r2, #4]
 80070a4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d103      	bne.n	80070b8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	689a      	ldr	r2, [r3, #8]
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2200      	movs	r2, #0
 80070bc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	1e5a      	subs	r2, r3, #1
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3714      	adds	r7, #20
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr

080070d8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b084      	sub	sp, #16
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d10a      	bne.n	8007102 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80070ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f0:	f383 8811 	msr	BASEPRI, r3
 80070f4:	f3bf 8f6f 	isb	sy
 80070f8:	f3bf 8f4f 	dsb	sy
 80070fc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80070fe:	bf00      	nop
 8007100:	e7fe      	b.n	8007100 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007102:	f002 f877 	bl	80091f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681a      	ldr	r2, [r3, #0]
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800710e:	68f9      	ldr	r1, [r7, #12]
 8007110:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007112:	fb01 f303 	mul.w	r3, r1, r3
 8007116:	441a      	add	r2, r3
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2200      	movs	r2, #0
 8007120:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007132:	3b01      	subs	r3, #1
 8007134:	68f9      	ldr	r1, [r7, #12]
 8007136:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007138:	fb01 f303 	mul.w	r3, r1, r3
 800713c:	441a      	add	r2, r3
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	22ff      	movs	r2, #255	; 0xff
 8007146:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	22ff      	movs	r2, #255	; 0xff
 800714e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d114      	bne.n	8007182 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	691b      	ldr	r3, [r3, #16]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d01a      	beq.n	8007196 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	3310      	adds	r3, #16
 8007164:	4618      	mov	r0, r3
 8007166:	f001 f929 	bl	80083bc <xTaskRemoveFromEventList>
 800716a:	4603      	mov	r3, r0
 800716c:	2b00      	cmp	r3, #0
 800716e:	d012      	beq.n	8007196 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007170:	4b0c      	ldr	r3, [pc, #48]	; (80071a4 <xQueueGenericReset+0xcc>)
 8007172:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007176:	601a      	str	r2, [r3, #0]
 8007178:	f3bf 8f4f 	dsb	sy
 800717c:	f3bf 8f6f 	isb	sy
 8007180:	e009      	b.n	8007196 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	3310      	adds	r3, #16
 8007186:	4618      	mov	r0, r3
 8007188:	f7ff fef2 	bl	8006f70 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	3324      	adds	r3, #36	; 0x24
 8007190:	4618      	mov	r0, r3
 8007192:	f7ff feed 	bl	8006f70 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007196:	f002 f85d 	bl	8009254 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800719a:	2301      	movs	r3, #1
}
 800719c:	4618      	mov	r0, r3
 800719e:	3710      	adds	r7, #16
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}
 80071a4:	e000ed04 	.word	0xe000ed04

080071a8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b08e      	sub	sp, #56	; 0x38
 80071ac:	af02      	add	r7, sp, #8
 80071ae:	60f8      	str	r0, [r7, #12]
 80071b0:	60b9      	str	r1, [r7, #8]
 80071b2:	607a      	str	r2, [r7, #4]
 80071b4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d10a      	bne.n	80071d2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80071bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c0:	f383 8811 	msr	BASEPRI, r3
 80071c4:	f3bf 8f6f 	isb	sy
 80071c8:	f3bf 8f4f 	dsb	sy
 80071cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80071ce:	bf00      	nop
 80071d0:	e7fe      	b.n	80071d0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d10a      	bne.n	80071ee <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80071d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071dc:	f383 8811 	msr	BASEPRI, r3
 80071e0:	f3bf 8f6f 	isb	sy
 80071e4:	f3bf 8f4f 	dsb	sy
 80071e8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80071ea:	bf00      	nop
 80071ec:	e7fe      	b.n	80071ec <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d002      	beq.n	80071fa <xQueueGenericCreateStatic+0x52>
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d001      	beq.n	80071fe <xQueueGenericCreateStatic+0x56>
 80071fa:	2301      	movs	r3, #1
 80071fc:	e000      	b.n	8007200 <xQueueGenericCreateStatic+0x58>
 80071fe:	2300      	movs	r3, #0
 8007200:	2b00      	cmp	r3, #0
 8007202:	d10a      	bne.n	800721a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007208:	f383 8811 	msr	BASEPRI, r3
 800720c:	f3bf 8f6f 	isb	sy
 8007210:	f3bf 8f4f 	dsb	sy
 8007214:	623b      	str	r3, [r7, #32]
}
 8007216:	bf00      	nop
 8007218:	e7fe      	b.n	8007218 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d102      	bne.n	8007226 <xQueueGenericCreateStatic+0x7e>
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d101      	bne.n	800722a <xQueueGenericCreateStatic+0x82>
 8007226:	2301      	movs	r3, #1
 8007228:	e000      	b.n	800722c <xQueueGenericCreateStatic+0x84>
 800722a:	2300      	movs	r3, #0
 800722c:	2b00      	cmp	r3, #0
 800722e:	d10a      	bne.n	8007246 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007234:	f383 8811 	msr	BASEPRI, r3
 8007238:	f3bf 8f6f 	isb	sy
 800723c:	f3bf 8f4f 	dsb	sy
 8007240:	61fb      	str	r3, [r7, #28]
}
 8007242:	bf00      	nop
 8007244:	e7fe      	b.n	8007244 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007246:	2350      	movs	r3, #80	; 0x50
 8007248:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	2b50      	cmp	r3, #80	; 0x50
 800724e:	d00a      	beq.n	8007266 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007254:	f383 8811 	msr	BASEPRI, r3
 8007258:	f3bf 8f6f 	isb	sy
 800725c:	f3bf 8f4f 	dsb	sy
 8007260:	61bb      	str	r3, [r7, #24]
}
 8007262:	bf00      	nop
 8007264:	e7fe      	b.n	8007264 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007266:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800726c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800726e:	2b00      	cmp	r3, #0
 8007270:	d00d      	beq.n	800728e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007274:	2201      	movs	r2, #1
 8007276:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800727a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800727e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007280:	9300      	str	r3, [sp, #0]
 8007282:	4613      	mov	r3, r2
 8007284:	687a      	ldr	r2, [r7, #4]
 8007286:	68b9      	ldr	r1, [r7, #8]
 8007288:	68f8      	ldr	r0, [r7, #12]
 800728a:	f000 f805 	bl	8007298 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800728e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007290:	4618      	mov	r0, r3
 8007292:	3730      	adds	r7, #48	; 0x30
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}

08007298 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b084      	sub	sp, #16
 800729c:	af00      	add	r7, sp, #0
 800729e:	60f8      	str	r0, [r7, #12]
 80072a0:	60b9      	str	r1, [r7, #8]
 80072a2:	607a      	str	r2, [r7, #4]
 80072a4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d103      	bne.n	80072b4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80072ac:	69bb      	ldr	r3, [r7, #24]
 80072ae:	69ba      	ldr	r2, [r7, #24]
 80072b0:	601a      	str	r2, [r3, #0]
 80072b2:	e002      	b.n	80072ba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80072b4:	69bb      	ldr	r3, [r7, #24]
 80072b6:	687a      	ldr	r2, [r7, #4]
 80072b8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80072ba:	69bb      	ldr	r3, [r7, #24]
 80072bc:	68fa      	ldr	r2, [r7, #12]
 80072be:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80072c0:	69bb      	ldr	r3, [r7, #24]
 80072c2:	68ba      	ldr	r2, [r7, #8]
 80072c4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80072c6:	2101      	movs	r1, #1
 80072c8:	69b8      	ldr	r0, [r7, #24]
 80072ca:	f7ff ff05 	bl	80070d8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80072ce:	69bb      	ldr	r3, [r7, #24]
 80072d0:	78fa      	ldrb	r2, [r7, #3]
 80072d2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80072d6:	bf00      	nop
 80072d8:	3710      	adds	r7, #16
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}
	...

080072e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b08e      	sub	sp, #56	; 0x38
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	60f8      	str	r0, [r7, #12]
 80072e8:	60b9      	str	r1, [r7, #8]
 80072ea:	607a      	str	r2, [r7, #4]
 80072ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80072ee:	2300      	movs	r3, #0
 80072f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80072f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d10a      	bne.n	8007312 <xQueueGenericSend+0x32>
	__asm volatile
 80072fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007300:	f383 8811 	msr	BASEPRI, r3
 8007304:	f3bf 8f6f 	isb	sy
 8007308:	f3bf 8f4f 	dsb	sy
 800730c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800730e:	bf00      	nop
 8007310:	e7fe      	b.n	8007310 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d103      	bne.n	8007320 <xQueueGenericSend+0x40>
 8007318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800731a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800731c:	2b00      	cmp	r3, #0
 800731e:	d101      	bne.n	8007324 <xQueueGenericSend+0x44>
 8007320:	2301      	movs	r3, #1
 8007322:	e000      	b.n	8007326 <xQueueGenericSend+0x46>
 8007324:	2300      	movs	r3, #0
 8007326:	2b00      	cmp	r3, #0
 8007328:	d10a      	bne.n	8007340 <xQueueGenericSend+0x60>
	__asm volatile
 800732a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800732e:	f383 8811 	msr	BASEPRI, r3
 8007332:	f3bf 8f6f 	isb	sy
 8007336:	f3bf 8f4f 	dsb	sy
 800733a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800733c:	bf00      	nop
 800733e:	e7fe      	b.n	800733e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	2b02      	cmp	r3, #2
 8007344:	d103      	bne.n	800734e <xQueueGenericSend+0x6e>
 8007346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800734a:	2b01      	cmp	r3, #1
 800734c:	d101      	bne.n	8007352 <xQueueGenericSend+0x72>
 800734e:	2301      	movs	r3, #1
 8007350:	e000      	b.n	8007354 <xQueueGenericSend+0x74>
 8007352:	2300      	movs	r3, #0
 8007354:	2b00      	cmp	r3, #0
 8007356:	d10a      	bne.n	800736e <xQueueGenericSend+0x8e>
	__asm volatile
 8007358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800735c:	f383 8811 	msr	BASEPRI, r3
 8007360:	f3bf 8f6f 	isb	sy
 8007364:	f3bf 8f4f 	dsb	sy
 8007368:	623b      	str	r3, [r7, #32]
}
 800736a:	bf00      	nop
 800736c:	e7fe      	b.n	800736c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800736e:	f001 f9e7 	bl	8008740 <xTaskGetSchedulerState>
 8007372:	4603      	mov	r3, r0
 8007374:	2b00      	cmp	r3, #0
 8007376:	d102      	bne.n	800737e <xQueueGenericSend+0x9e>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d101      	bne.n	8007382 <xQueueGenericSend+0xa2>
 800737e:	2301      	movs	r3, #1
 8007380:	e000      	b.n	8007384 <xQueueGenericSend+0xa4>
 8007382:	2300      	movs	r3, #0
 8007384:	2b00      	cmp	r3, #0
 8007386:	d10a      	bne.n	800739e <xQueueGenericSend+0xbe>
	__asm volatile
 8007388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800738c:	f383 8811 	msr	BASEPRI, r3
 8007390:	f3bf 8f6f 	isb	sy
 8007394:	f3bf 8f4f 	dsb	sy
 8007398:	61fb      	str	r3, [r7, #28]
}
 800739a:	bf00      	nop
 800739c:	e7fe      	b.n	800739c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800739e:	f001 ff29 	bl	80091f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80073a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d302      	bcc.n	80073b4 <xQueueGenericSend+0xd4>
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	2b02      	cmp	r3, #2
 80073b2:	d129      	bne.n	8007408 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80073b4:	683a      	ldr	r2, [r7, #0]
 80073b6:	68b9      	ldr	r1, [r7, #8]
 80073b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80073ba:	f000 fa0b 	bl	80077d4 <prvCopyDataToQueue>
 80073be:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80073c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d010      	beq.n	80073ea <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80073c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ca:	3324      	adds	r3, #36	; 0x24
 80073cc:	4618      	mov	r0, r3
 80073ce:	f000 fff5 	bl	80083bc <xTaskRemoveFromEventList>
 80073d2:	4603      	mov	r3, r0
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d013      	beq.n	8007400 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80073d8:	4b3f      	ldr	r3, [pc, #252]	; (80074d8 <xQueueGenericSend+0x1f8>)
 80073da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073de:	601a      	str	r2, [r3, #0]
 80073e0:	f3bf 8f4f 	dsb	sy
 80073e4:	f3bf 8f6f 	isb	sy
 80073e8:	e00a      	b.n	8007400 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80073ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d007      	beq.n	8007400 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80073f0:	4b39      	ldr	r3, [pc, #228]	; (80074d8 <xQueueGenericSend+0x1f8>)
 80073f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073f6:	601a      	str	r2, [r3, #0]
 80073f8:	f3bf 8f4f 	dsb	sy
 80073fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007400:	f001 ff28 	bl	8009254 <vPortExitCritical>
				return pdPASS;
 8007404:	2301      	movs	r3, #1
 8007406:	e063      	b.n	80074d0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d103      	bne.n	8007416 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800740e:	f001 ff21 	bl	8009254 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007412:	2300      	movs	r3, #0
 8007414:	e05c      	b.n	80074d0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007418:	2b00      	cmp	r3, #0
 800741a:	d106      	bne.n	800742a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800741c:	f107 0314 	add.w	r3, r7, #20
 8007420:	4618      	mov	r0, r3
 8007422:	f001 f82f 	bl	8008484 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007426:	2301      	movs	r3, #1
 8007428:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800742a:	f001 ff13 	bl	8009254 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800742e:	f000 fd9b 	bl	8007f68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007432:	f001 fedf 	bl	80091f4 <vPortEnterCritical>
 8007436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007438:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800743c:	b25b      	sxtb	r3, r3
 800743e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007442:	d103      	bne.n	800744c <xQueueGenericSend+0x16c>
 8007444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007446:	2200      	movs	r2, #0
 8007448:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800744c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800744e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007452:	b25b      	sxtb	r3, r3
 8007454:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007458:	d103      	bne.n	8007462 <xQueueGenericSend+0x182>
 800745a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800745c:	2200      	movs	r2, #0
 800745e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007462:	f001 fef7 	bl	8009254 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007466:	1d3a      	adds	r2, r7, #4
 8007468:	f107 0314 	add.w	r3, r7, #20
 800746c:	4611      	mov	r1, r2
 800746e:	4618      	mov	r0, r3
 8007470:	f001 f81e 	bl	80084b0 <xTaskCheckForTimeOut>
 8007474:	4603      	mov	r3, r0
 8007476:	2b00      	cmp	r3, #0
 8007478:	d124      	bne.n	80074c4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800747a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800747c:	f000 faa2 	bl	80079c4 <prvIsQueueFull>
 8007480:	4603      	mov	r3, r0
 8007482:	2b00      	cmp	r3, #0
 8007484:	d018      	beq.n	80074b8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007488:	3310      	adds	r3, #16
 800748a:	687a      	ldr	r2, [r7, #4]
 800748c:	4611      	mov	r1, r2
 800748e:	4618      	mov	r0, r3
 8007490:	f000 ff44 	bl	800831c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007494:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007496:	f000 fa2d 	bl	80078f4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800749a:	f000 fd73 	bl	8007f84 <xTaskResumeAll>
 800749e:	4603      	mov	r3, r0
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	f47f af7c 	bne.w	800739e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80074a6:	4b0c      	ldr	r3, [pc, #48]	; (80074d8 <xQueueGenericSend+0x1f8>)
 80074a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074ac:	601a      	str	r2, [r3, #0]
 80074ae:	f3bf 8f4f 	dsb	sy
 80074b2:	f3bf 8f6f 	isb	sy
 80074b6:	e772      	b.n	800739e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80074b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80074ba:	f000 fa1b 	bl	80078f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80074be:	f000 fd61 	bl	8007f84 <xTaskResumeAll>
 80074c2:	e76c      	b.n	800739e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80074c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80074c6:	f000 fa15 	bl	80078f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80074ca:	f000 fd5b 	bl	8007f84 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80074ce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3738      	adds	r7, #56	; 0x38
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}
 80074d8:	e000ed04 	.word	0xe000ed04

080074dc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b090      	sub	sp, #64	; 0x40
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	60f8      	str	r0, [r7, #12]
 80074e4:	60b9      	str	r1, [r7, #8]
 80074e6:	607a      	str	r2, [r7, #4]
 80074e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80074ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d10a      	bne.n	800750a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80074f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f8:	f383 8811 	msr	BASEPRI, r3
 80074fc:	f3bf 8f6f 	isb	sy
 8007500:	f3bf 8f4f 	dsb	sy
 8007504:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007506:	bf00      	nop
 8007508:	e7fe      	b.n	8007508 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d103      	bne.n	8007518 <xQueueGenericSendFromISR+0x3c>
 8007510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007514:	2b00      	cmp	r3, #0
 8007516:	d101      	bne.n	800751c <xQueueGenericSendFromISR+0x40>
 8007518:	2301      	movs	r3, #1
 800751a:	e000      	b.n	800751e <xQueueGenericSendFromISR+0x42>
 800751c:	2300      	movs	r3, #0
 800751e:	2b00      	cmp	r3, #0
 8007520:	d10a      	bne.n	8007538 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007526:	f383 8811 	msr	BASEPRI, r3
 800752a:	f3bf 8f6f 	isb	sy
 800752e:	f3bf 8f4f 	dsb	sy
 8007532:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007534:	bf00      	nop
 8007536:	e7fe      	b.n	8007536 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	2b02      	cmp	r3, #2
 800753c:	d103      	bne.n	8007546 <xQueueGenericSendFromISR+0x6a>
 800753e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007542:	2b01      	cmp	r3, #1
 8007544:	d101      	bne.n	800754a <xQueueGenericSendFromISR+0x6e>
 8007546:	2301      	movs	r3, #1
 8007548:	e000      	b.n	800754c <xQueueGenericSendFromISR+0x70>
 800754a:	2300      	movs	r3, #0
 800754c:	2b00      	cmp	r3, #0
 800754e:	d10a      	bne.n	8007566 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007554:	f383 8811 	msr	BASEPRI, r3
 8007558:	f3bf 8f6f 	isb	sy
 800755c:	f3bf 8f4f 	dsb	sy
 8007560:	623b      	str	r3, [r7, #32]
}
 8007562:	bf00      	nop
 8007564:	e7fe      	b.n	8007564 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007566:	f001 ff27 	bl	80093b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800756a:	f3ef 8211 	mrs	r2, BASEPRI
 800756e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007572:	f383 8811 	msr	BASEPRI, r3
 8007576:	f3bf 8f6f 	isb	sy
 800757a:	f3bf 8f4f 	dsb	sy
 800757e:	61fa      	str	r2, [r7, #28]
 8007580:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007582:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007584:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007588:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800758a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800758c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800758e:	429a      	cmp	r2, r3
 8007590:	d302      	bcc.n	8007598 <xQueueGenericSendFromISR+0xbc>
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	2b02      	cmp	r3, #2
 8007596:	d12f      	bne.n	80075f8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800759a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800759e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80075a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075a6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80075a8:	683a      	ldr	r2, [r7, #0]
 80075aa:	68b9      	ldr	r1, [r7, #8]
 80075ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80075ae:	f000 f911 	bl	80077d4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80075b2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80075b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075ba:	d112      	bne.n	80075e2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80075bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d016      	beq.n	80075f2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80075c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c6:	3324      	adds	r3, #36	; 0x24
 80075c8:	4618      	mov	r0, r3
 80075ca:	f000 fef7 	bl	80083bc <xTaskRemoveFromEventList>
 80075ce:	4603      	mov	r3, r0
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d00e      	beq.n	80075f2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d00b      	beq.n	80075f2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2201      	movs	r2, #1
 80075de:	601a      	str	r2, [r3, #0]
 80075e0:	e007      	b.n	80075f2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80075e2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80075e6:	3301      	adds	r3, #1
 80075e8:	b2db      	uxtb	r3, r3
 80075ea:	b25a      	sxtb	r2, r3
 80075ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80075f2:	2301      	movs	r3, #1
 80075f4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80075f6:	e001      	b.n	80075fc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80075f8:	2300      	movs	r3, #0
 80075fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80075fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075fe:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007606:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800760a:	4618      	mov	r0, r3
 800760c:	3740      	adds	r7, #64	; 0x40
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
	...

08007614 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b08c      	sub	sp, #48	; 0x30
 8007618:	af00      	add	r7, sp, #0
 800761a:	60f8      	str	r0, [r7, #12]
 800761c:	60b9      	str	r1, [r7, #8]
 800761e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007620:	2300      	movs	r3, #0
 8007622:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800762a:	2b00      	cmp	r3, #0
 800762c:	d10a      	bne.n	8007644 <xQueueReceive+0x30>
	__asm volatile
 800762e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007632:	f383 8811 	msr	BASEPRI, r3
 8007636:	f3bf 8f6f 	isb	sy
 800763a:	f3bf 8f4f 	dsb	sy
 800763e:	623b      	str	r3, [r7, #32]
}
 8007640:	bf00      	nop
 8007642:	e7fe      	b.n	8007642 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d103      	bne.n	8007652 <xQueueReceive+0x3e>
 800764a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800764c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800764e:	2b00      	cmp	r3, #0
 8007650:	d101      	bne.n	8007656 <xQueueReceive+0x42>
 8007652:	2301      	movs	r3, #1
 8007654:	e000      	b.n	8007658 <xQueueReceive+0x44>
 8007656:	2300      	movs	r3, #0
 8007658:	2b00      	cmp	r3, #0
 800765a:	d10a      	bne.n	8007672 <xQueueReceive+0x5e>
	__asm volatile
 800765c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007660:	f383 8811 	msr	BASEPRI, r3
 8007664:	f3bf 8f6f 	isb	sy
 8007668:	f3bf 8f4f 	dsb	sy
 800766c:	61fb      	str	r3, [r7, #28]
}
 800766e:	bf00      	nop
 8007670:	e7fe      	b.n	8007670 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007672:	f001 f865 	bl	8008740 <xTaskGetSchedulerState>
 8007676:	4603      	mov	r3, r0
 8007678:	2b00      	cmp	r3, #0
 800767a:	d102      	bne.n	8007682 <xQueueReceive+0x6e>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d101      	bne.n	8007686 <xQueueReceive+0x72>
 8007682:	2301      	movs	r3, #1
 8007684:	e000      	b.n	8007688 <xQueueReceive+0x74>
 8007686:	2300      	movs	r3, #0
 8007688:	2b00      	cmp	r3, #0
 800768a:	d10a      	bne.n	80076a2 <xQueueReceive+0x8e>
	__asm volatile
 800768c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007690:	f383 8811 	msr	BASEPRI, r3
 8007694:	f3bf 8f6f 	isb	sy
 8007698:	f3bf 8f4f 	dsb	sy
 800769c:	61bb      	str	r3, [r7, #24]
}
 800769e:	bf00      	nop
 80076a0:	e7fe      	b.n	80076a0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80076a2:	f001 fda7 	bl	80091f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80076a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076aa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80076ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d01f      	beq.n	80076f2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80076b2:	68b9      	ldr	r1, [r7, #8]
 80076b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076b6:	f000 f8f7 	bl	80078a8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80076ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076bc:	1e5a      	subs	r2, r3, #1
 80076be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80076c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c4:	691b      	ldr	r3, [r3, #16]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d00f      	beq.n	80076ea <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80076ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076cc:	3310      	adds	r3, #16
 80076ce:	4618      	mov	r0, r3
 80076d0:	f000 fe74 	bl	80083bc <xTaskRemoveFromEventList>
 80076d4:	4603      	mov	r3, r0
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d007      	beq.n	80076ea <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80076da:	4b3d      	ldr	r3, [pc, #244]	; (80077d0 <xQueueReceive+0x1bc>)
 80076dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076e0:	601a      	str	r2, [r3, #0]
 80076e2:	f3bf 8f4f 	dsb	sy
 80076e6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80076ea:	f001 fdb3 	bl	8009254 <vPortExitCritical>
				return pdPASS;
 80076ee:	2301      	movs	r3, #1
 80076f0:	e069      	b.n	80077c6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d103      	bne.n	8007700 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80076f8:	f001 fdac 	bl	8009254 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80076fc:	2300      	movs	r3, #0
 80076fe:	e062      	b.n	80077c6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007702:	2b00      	cmp	r3, #0
 8007704:	d106      	bne.n	8007714 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007706:	f107 0310 	add.w	r3, r7, #16
 800770a:	4618      	mov	r0, r3
 800770c:	f000 feba 	bl	8008484 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007710:	2301      	movs	r3, #1
 8007712:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007714:	f001 fd9e 	bl	8009254 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007718:	f000 fc26 	bl	8007f68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800771c:	f001 fd6a 	bl	80091f4 <vPortEnterCritical>
 8007720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007722:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007726:	b25b      	sxtb	r3, r3
 8007728:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800772c:	d103      	bne.n	8007736 <xQueueReceive+0x122>
 800772e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007730:	2200      	movs	r2, #0
 8007732:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007738:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800773c:	b25b      	sxtb	r3, r3
 800773e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007742:	d103      	bne.n	800774c <xQueueReceive+0x138>
 8007744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007746:	2200      	movs	r2, #0
 8007748:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800774c:	f001 fd82 	bl	8009254 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007750:	1d3a      	adds	r2, r7, #4
 8007752:	f107 0310 	add.w	r3, r7, #16
 8007756:	4611      	mov	r1, r2
 8007758:	4618      	mov	r0, r3
 800775a:	f000 fea9 	bl	80084b0 <xTaskCheckForTimeOut>
 800775e:	4603      	mov	r3, r0
 8007760:	2b00      	cmp	r3, #0
 8007762:	d123      	bne.n	80077ac <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007764:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007766:	f000 f917 	bl	8007998 <prvIsQueueEmpty>
 800776a:	4603      	mov	r3, r0
 800776c:	2b00      	cmp	r3, #0
 800776e:	d017      	beq.n	80077a0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007772:	3324      	adds	r3, #36	; 0x24
 8007774:	687a      	ldr	r2, [r7, #4]
 8007776:	4611      	mov	r1, r2
 8007778:	4618      	mov	r0, r3
 800777a:	f000 fdcf 	bl	800831c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800777e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007780:	f000 f8b8 	bl	80078f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007784:	f000 fbfe 	bl	8007f84 <xTaskResumeAll>
 8007788:	4603      	mov	r3, r0
 800778a:	2b00      	cmp	r3, #0
 800778c:	d189      	bne.n	80076a2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800778e:	4b10      	ldr	r3, [pc, #64]	; (80077d0 <xQueueReceive+0x1bc>)
 8007790:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007794:	601a      	str	r2, [r3, #0]
 8007796:	f3bf 8f4f 	dsb	sy
 800779a:	f3bf 8f6f 	isb	sy
 800779e:	e780      	b.n	80076a2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80077a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077a2:	f000 f8a7 	bl	80078f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80077a6:	f000 fbed 	bl	8007f84 <xTaskResumeAll>
 80077aa:	e77a      	b.n	80076a2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80077ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077ae:	f000 f8a1 	bl	80078f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80077b2:	f000 fbe7 	bl	8007f84 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80077b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077b8:	f000 f8ee 	bl	8007998 <prvIsQueueEmpty>
 80077bc:	4603      	mov	r3, r0
 80077be:	2b00      	cmp	r3, #0
 80077c0:	f43f af6f 	beq.w	80076a2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80077c4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3730      	adds	r7, #48	; 0x30
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}
 80077ce:	bf00      	nop
 80077d0:	e000ed04 	.word	0xe000ed04

080077d4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b086      	sub	sp, #24
 80077d8:	af00      	add	r7, sp, #0
 80077da:	60f8      	str	r0, [r7, #12]
 80077dc:	60b9      	str	r1, [r7, #8]
 80077de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80077e0:	2300      	movs	r3, #0
 80077e2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077e8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d10d      	bne.n	800780e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d14d      	bne.n	8007896 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	689b      	ldr	r3, [r3, #8]
 80077fe:	4618      	mov	r0, r3
 8007800:	f000 ffbc 	bl	800877c <xTaskPriorityDisinherit>
 8007804:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2200      	movs	r2, #0
 800780a:	609a      	str	r2, [r3, #8]
 800780c:	e043      	b.n	8007896 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d119      	bne.n	8007848 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	6858      	ldr	r0, [r3, #4]
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800781c:	461a      	mov	r2, r3
 800781e:	68b9      	ldr	r1, [r7, #8]
 8007820:	f002 fde4 	bl	800a3ec <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	685a      	ldr	r2, [r3, #4]
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800782c:	441a      	add	r2, r3
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	685a      	ldr	r2, [r3, #4]
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	689b      	ldr	r3, [r3, #8]
 800783a:	429a      	cmp	r2, r3
 800783c:	d32b      	bcc.n	8007896 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681a      	ldr	r2, [r3, #0]
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	605a      	str	r2, [r3, #4]
 8007846:	e026      	b.n	8007896 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	68d8      	ldr	r0, [r3, #12]
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007850:	461a      	mov	r2, r3
 8007852:	68b9      	ldr	r1, [r7, #8]
 8007854:	f002 fdca 	bl	800a3ec <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	68da      	ldr	r2, [r3, #12]
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007860:	425b      	negs	r3, r3
 8007862:	441a      	add	r2, r3
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	68da      	ldr	r2, [r3, #12]
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	429a      	cmp	r2, r3
 8007872:	d207      	bcs.n	8007884 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	689a      	ldr	r2, [r3, #8]
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800787c:	425b      	negs	r3, r3
 800787e:	441a      	add	r2, r3
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2b02      	cmp	r3, #2
 8007888:	d105      	bne.n	8007896 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d002      	beq.n	8007896 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	3b01      	subs	r3, #1
 8007894:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	1c5a      	adds	r2, r3, #1
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800789e:	697b      	ldr	r3, [r7, #20]
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3718      	adds	r7, #24
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}

080078a8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b082      	sub	sp, #8
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
 80078b0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d018      	beq.n	80078ec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	68da      	ldr	r2, [r3, #12]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078c2:	441a      	add	r2, r3
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	68da      	ldr	r2, [r3, #12]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	689b      	ldr	r3, [r3, #8]
 80078d0:	429a      	cmp	r2, r3
 80078d2:	d303      	bcc.n	80078dc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681a      	ldr	r2, [r3, #0]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	68d9      	ldr	r1, [r3, #12]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078e4:	461a      	mov	r2, r3
 80078e6:	6838      	ldr	r0, [r7, #0]
 80078e8:	f002 fd80 	bl	800a3ec <memcpy>
	}
}
 80078ec:	bf00      	nop
 80078ee:	3708      	adds	r7, #8
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}

080078f4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b084      	sub	sp, #16
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80078fc:	f001 fc7a 	bl	80091f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007906:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007908:	e011      	b.n	800792e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800790e:	2b00      	cmp	r3, #0
 8007910:	d012      	beq.n	8007938 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	3324      	adds	r3, #36	; 0x24
 8007916:	4618      	mov	r0, r3
 8007918:	f000 fd50 	bl	80083bc <xTaskRemoveFromEventList>
 800791c:	4603      	mov	r3, r0
 800791e:	2b00      	cmp	r3, #0
 8007920:	d001      	beq.n	8007926 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007922:	f000 fe27 	bl	8008574 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007926:	7bfb      	ldrb	r3, [r7, #15]
 8007928:	3b01      	subs	r3, #1
 800792a:	b2db      	uxtb	r3, r3
 800792c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800792e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007932:	2b00      	cmp	r3, #0
 8007934:	dce9      	bgt.n	800790a <prvUnlockQueue+0x16>
 8007936:	e000      	b.n	800793a <prvUnlockQueue+0x46>
					break;
 8007938:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	22ff      	movs	r2, #255	; 0xff
 800793e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007942:	f001 fc87 	bl	8009254 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007946:	f001 fc55 	bl	80091f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007950:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007952:	e011      	b.n	8007978 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	691b      	ldr	r3, [r3, #16]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d012      	beq.n	8007982 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	3310      	adds	r3, #16
 8007960:	4618      	mov	r0, r3
 8007962:	f000 fd2b 	bl	80083bc <xTaskRemoveFromEventList>
 8007966:	4603      	mov	r3, r0
 8007968:	2b00      	cmp	r3, #0
 800796a:	d001      	beq.n	8007970 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800796c:	f000 fe02 	bl	8008574 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007970:	7bbb      	ldrb	r3, [r7, #14]
 8007972:	3b01      	subs	r3, #1
 8007974:	b2db      	uxtb	r3, r3
 8007976:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007978:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800797c:	2b00      	cmp	r3, #0
 800797e:	dce9      	bgt.n	8007954 <prvUnlockQueue+0x60>
 8007980:	e000      	b.n	8007984 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007982:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	22ff      	movs	r2, #255	; 0xff
 8007988:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800798c:	f001 fc62 	bl	8009254 <vPortExitCritical>
}
 8007990:	bf00      	nop
 8007992:	3710      	adds	r7, #16
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}

08007998 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b084      	sub	sp, #16
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80079a0:	f001 fc28 	bl	80091f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d102      	bne.n	80079b2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80079ac:	2301      	movs	r3, #1
 80079ae:	60fb      	str	r3, [r7, #12]
 80079b0:	e001      	b.n	80079b6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80079b2:	2300      	movs	r3, #0
 80079b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80079b6:	f001 fc4d 	bl	8009254 <vPortExitCritical>

	return xReturn;
 80079ba:	68fb      	ldr	r3, [r7, #12]
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3710      	adds	r7, #16
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80079cc:	f001 fc12 	bl	80091f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079d8:	429a      	cmp	r2, r3
 80079da:	d102      	bne.n	80079e2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80079dc:	2301      	movs	r3, #1
 80079de:	60fb      	str	r3, [r7, #12]
 80079e0:	e001      	b.n	80079e6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80079e2:	2300      	movs	r3, #0
 80079e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80079e6:	f001 fc35 	bl	8009254 <vPortExitCritical>

	return xReturn;
 80079ea:	68fb      	ldr	r3, [r7, #12]
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3710      	adds	r7, #16
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}

080079f4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80079f4:	b480      	push	{r7}
 80079f6:	b085      	sub	sp, #20
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80079fe:	2300      	movs	r3, #0
 8007a00:	60fb      	str	r3, [r7, #12]
 8007a02:	e014      	b.n	8007a2e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007a04:	4a0f      	ldr	r2, [pc, #60]	; (8007a44 <vQueueAddToRegistry+0x50>)
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d10b      	bne.n	8007a28 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007a10:	490c      	ldr	r1, [pc, #48]	; (8007a44 <vQueueAddToRegistry+0x50>)
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	683a      	ldr	r2, [r7, #0]
 8007a16:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007a1a:	4a0a      	ldr	r2, [pc, #40]	; (8007a44 <vQueueAddToRegistry+0x50>)
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	00db      	lsls	r3, r3, #3
 8007a20:	4413      	add	r3, r2
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007a26:	e006      	b.n	8007a36 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	60fb      	str	r3, [r7, #12]
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	2b07      	cmp	r3, #7
 8007a32:	d9e7      	bls.n	8007a04 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007a34:	bf00      	nop
 8007a36:	bf00      	nop
 8007a38:	3714      	adds	r7, #20
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a40:	4770      	bx	lr
 8007a42:	bf00      	nop
 8007a44:	2000095c 	.word	0x2000095c

08007a48 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b086      	sub	sp, #24
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	60f8      	str	r0, [r7, #12]
 8007a50:	60b9      	str	r1, [r7, #8]
 8007a52:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007a58:	f001 fbcc 	bl	80091f4 <vPortEnterCritical>
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007a62:	b25b      	sxtb	r3, r3
 8007a64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a68:	d103      	bne.n	8007a72 <vQueueWaitForMessageRestricted+0x2a>
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a78:	b25b      	sxtb	r3, r3
 8007a7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a7e:	d103      	bne.n	8007a88 <vQueueWaitForMessageRestricted+0x40>
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	2200      	movs	r2, #0
 8007a84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a88:	f001 fbe4 	bl	8009254 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d106      	bne.n	8007aa2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	3324      	adds	r3, #36	; 0x24
 8007a98:	687a      	ldr	r2, [r7, #4]
 8007a9a:	68b9      	ldr	r1, [r7, #8]
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f000 fc61 	bl	8008364 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007aa2:	6978      	ldr	r0, [r7, #20]
 8007aa4:	f7ff ff26 	bl	80078f4 <prvUnlockQueue>
	}
 8007aa8:	bf00      	nop
 8007aaa:	3718      	adds	r7, #24
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b08e      	sub	sp, #56	; 0x38
 8007ab4:	af04      	add	r7, sp, #16
 8007ab6:	60f8      	str	r0, [r7, #12]
 8007ab8:	60b9      	str	r1, [r7, #8]
 8007aba:	607a      	str	r2, [r7, #4]
 8007abc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007abe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d10a      	bne.n	8007ada <xTaskCreateStatic+0x2a>
	__asm volatile
 8007ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac8:	f383 8811 	msr	BASEPRI, r3
 8007acc:	f3bf 8f6f 	isb	sy
 8007ad0:	f3bf 8f4f 	dsb	sy
 8007ad4:	623b      	str	r3, [r7, #32]
}
 8007ad6:	bf00      	nop
 8007ad8:	e7fe      	b.n	8007ad8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d10a      	bne.n	8007af6 <xTaskCreateStatic+0x46>
	__asm volatile
 8007ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae4:	f383 8811 	msr	BASEPRI, r3
 8007ae8:	f3bf 8f6f 	isb	sy
 8007aec:	f3bf 8f4f 	dsb	sy
 8007af0:	61fb      	str	r3, [r7, #28]
}
 8007af2:	bf00      	nop
 8007af4:	e7fe      	b.n	8007af4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007af6:	23bc      	movs	r3, #188	; 0xbc
 8007af8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	2bbc      	cmp	r3, #188	; 0xbc
 8007afe:	d00a      	beq.n	8007b16 <xTaskCreateStatic+0x66>
	__asm volatile
 8007b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b04:	f383 8811 	msr	BASEPRI, r3
 8007b08:	f3bf 8f6f 	isb	sy
 8007b0c:	f3bf 8f4f 	dsb	sy
 8007b10:	61bb      	str	r3, [r7, #24]
}
 8007b12:	bf00      	nop
 8007b14:	e7fe      	b.n	8007b14 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007b16:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d01e      	beq.n	8007b5c <xTaskCreateStatic+0xac>
 8007b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d01b      	beq.n	8007b5c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b26:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b2c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b30:	2202      	movs	r2, #2
 8007b32:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007b36:	2300      	movs	r3, #0
 8007b38:	9303      	str	r3, [sp, #12]
 8007b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b3c:	9302      	str	r3, [sp, #8]
 8007b3e:	f107 0314 	add.w	r3, r7, #20
 8007b42:	9301      	str	r3, [sp, #4]
 8007b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b46:	9300      	str	r3, [sp, #0]
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	687a      	ldr	r2, [r7, #4]
 8007b4c:	68b9      	ldr	r1, [r7, #8]
 8007b4e:	68f8      	ldr	r0, [r7, #12]
 8007b50:	f000 f850 	bl	8007bf4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007b54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007b56:	f000 f8f3 	bl	8007d40 <prvAddNewTaskToReadyList>
 8007b5a:	e001      	b.n	8007b60 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007b60:	697b      	ldr	r3, [r7, #20]
	}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3728      	adds	r7, #40	; 0x28
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}

08007b6a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007b6a:	b580      	push	{r7, lr}
 8007b6c:	b08c      	sub	sp, #48	; 0x30
 8007b6e:	af04      	add	r7, sp, #16
 8007b70:	60f8      	str	r0, [r7, #12]
 8007b72:	60b9      	str	r1, [r7, #8]
 8007b74:	603b      	str	r3, [r7, #0]
 8007b76:	4613      	mov	r3, r2
 8007b78:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007b7a:	88fb      	ldrh	r3, [r7, #6]
 8007b7c:	009b      	lsls	r3, r3, #2
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f001 fc5a 	bl	8009438 <pvPortMalloc>
 8007b84:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d00e      	beq.n	8007baa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007b8c:	20bc      	movs	r0, #188	; 0xbc
 8007b8e:	f001 fc53 	bl	8009438 <pvPortMalloc>
 8007b92:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007b94:	69fb      	ldr	r3, [r7, #28]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d003      	beq.n	8007ba2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007b9a:	69fb      	ldr	r3, [r7, #28]
 8007b9c:	697a      	ldr	r2, [r7, #20]
 8007b9e:	631a      	str	r2, [r3, #48]	; 0x30
 8007ba0:	e005      	b.n	8007bae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007ba2:	6978      	ldr	r0, [r7, #20]
 8007ba4:	f001 fd14 	bl	80095d0 <vPortFree>
 8007ba8:	e001      	b.n	8007bae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007baa:	2300      	movs	r3, #0
 8007bac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007bae:	69fb      	ldr	r3, [r7, #28]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d017      	beq.n	8007be4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007bb4:	69fb      	ldr	r3, [r7, #28]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007bbc:	88fa      	ldrh	r2, [r7, #6]
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	9303      	str	r3, [sp, #12]
 8007bc2:	69fb      	ldr	r3, [r7, #28]
 8007bc4:	9302      	str	r3, [sp, #8]
 8007bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bc8:	9301      	str	r3, [sp, #4]
 8007bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bcc:	9300      	str	r3, [sp, #0]
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	68b9      	ldr	r1, [r7, #8]
 8007bd2:	68f8      	ldr	r0, [r7, #12]
 8007bd4:	f000 f80e 	bl	8007bf4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007bd8:	69f8      	ldr	r0, [r7, #28]
 8007bda:	f000 f8b1 	bl	8007d40 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007bde:	2301      	movs	r3, #1
 8007be0:	61bb      	str	r3, [r7, #24]
 8007be2:	e002      	b.n	8007bea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007be4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007be8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007bea:	69bb      	ldr	r3, [r7, #24]
	}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3720      	adds	r7, #32
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}

08007bf4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b088      	sub	sp, #32
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	60f8      	str	r0, [r7, #12]
 8007bfc:	60b9      	str	r1, [r7, #8]
 8007bfe:	607a      	str	r2, [r7, #4]
 8007c00:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c04:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	009b      	lsls	r3, r3, #2
 8007c0a:	461a      	mov	r2, r3
 8007c0c:	21a5      	movs	r1, #165	; 0xa5
 8007c0e:	f002 fbfb 	bl	800a408 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007c1c:	3b01      	subs	r3, #1
 8007c1e:	009b      	lsls	r3, r3, #2
 8007c20:	4413      	add	r3, r2
 8007c22:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007c24:	69bb      	ldr	r3, [r7, #24]
 8007c26:	f023 0307 	bic.w	r3, r3, #7
 8007c2a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007c2c:	69bb      	ldr	r3, [r7, #24]
 8007c2e:	f003 0307 	and.w	r3, r3, #7
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d00a      	beq.n	8007c4c <prvInitialiseNewTask+0x58>
	__asm volatile
 8007c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c3a:	f383 8811 	msr	BASEPRI, r3
 8007c3e:	f3bf 8f6f 	isb	sy
 8007c42:	f3bf 8f4f 	dsb	sy
 8007c46:	617b      	str	r3, [r7, #20]
}
 8007c48:	bf00      	nop
 8007c4a:	e7fe      	b.n	8007c4a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d01f      	beq.n	8007c92 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007c52:	2300      	movs	r3, #0
 8007c54:	61fb      	str	r3, [r7, #28]
 8007c56:	e012      	b.n	8007c7e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007c58:	68ba      	ldr	r2, [r7, #8]
 8007c5a:	69fb      	ldr	r3, [r7, #28]
 8007c5c:	4413      	add	r3, r2
 8007c5e:	7819      	ldrb	r1, [r3, #0]
 8007c60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c62:	69fb      	ldr	r3, [r7, #28]
 8007c64:	4413      	add	r3, r2
 8007c66:	3334      	adds	r3, #52	; 0x34
 8007c68:	460a      	mov	r2, r1
 8007c6a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007c6c:	68ba      	ldr	r2, [r7, #8]
 8007c6e:	69fb      	ldr	r3, [r7, #28]
 8007c70:	4413      	add	r3, r2
 8007c72:	781b      	ldrb	r3, [r3, #0]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d006      	beq.n	8007c86 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007c78:	69fb      	ldr	r3, [r7, #28]
 8007c7a:	3301      	adds	r3, #1
 8007c7c:	61fb      	str	r3, [r7, #28]
 8007c7e:	69fb      	ldr	r3, [r7, #28]
 8007c80:	2b0f      	cmp	r3, #15
 8007c82:	d9e9      	bls.n	8007c58 <prvInitialiseNewTask+0x64>
 8007c84:	e000      	b.n	8007c88 <prvInitialiseNewTask+0x94>
			{
				break;
 8007c86:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007c90:	e003      	b.n	8007c9a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c94:	2200      	movs	r2, #0
 8007c96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c9c:	2b37      	cmp	r3, #55	; 0x37
 8007c9e:	d901      	bls.n	8007ca4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007ca0:	2337      	movs	r3, #55	; 0x37
 8007ca2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ca6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ca8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007cae:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cb8:	3304      	adds	r3, #4
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f7ff f978 	bl	8006fb0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cc2:	3318      	adds	r3, #24
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	f7ff f973 	bl	8006fb0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ccc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cd2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cde:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cea:	2200      	movs	r2, #0
 8007cec:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf2:	3354      	adds	r3, #84	; 0x54
 8007cf4:	2260      	movs	r2, #96	; 0x60
 8007cf6:	2100      	movs	r1, #0
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f002 fb85 	bl	800a408 <memset>
 8007cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d00:	4a0c      	ldr	r2, [pc, #48]	; (8007d34 <prvInitialiseNewTask+0x140>)
 8007d02:	659a      	str	r2, [r3, #88]	; 0x58
 8007d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d06:	4a0c      	ldr	r2, [pc, #48]	; (8007d38 <prvInitialiseNewTask+0x144>)
 8007d08:	65da      	str	r2, [r3, #92]	; 0x5c
 8007d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d0c:	4a0b      	ldr	r2, [pc, #44]	; (8007d3c <prvInitialiseNewTask+0x148>)
 8007d0e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007d10:	683a      	ldr	r2, [r7, #0]
 8007d12:	68f9      	ldr	r1, [r7, #12]
 8007d14:	69b8      	ldr	r0, [r7, #24]
 8007d16:	f001 f941 	bl	8008f9c <pxPortInitialiseStack>
 8007d1a:	4602      	mov	r2, r0
 8007d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d1e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d002      	beq.n	8007d2c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d2a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d2c:	bf00      	nop
 8007d2e:	3720      	adds	r7, #32
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}
 8007d34:	0800a900 	.word	0x0800a900
 8007d38:	0800a920 	.word	0x0800a920
 8007d3c:	0800a8e0 	.word	0x0800a8e0

08007d40 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b082      	sub	sp, #8
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007d48:	f001 fa54 	bl	80091f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007d4c:	4b2d      	ldr	r3, [pc, #180]	; (8007e04 <prvAddNewTaskToReadyList+0xc4>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	3301      	adds	r3, #1
 8007d52:	4a2c      	ldr	r2, [pc, #176]	; (8007e04 <prvAddNewTaskToReadyList+0xc4>)
 8007d54:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007d56:	4b2c      	ldr	r3, [pc, #176]	; (8007e08 <prvAddNewTaskToReadyList+0xc8>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d109      	bne.n	8007d72 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007d5e:	4a2a      	ldr	r2, [pc, #168]	; (8007e08 <prvAddNewTaskToReadyList+0xc8>)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007d64:	4b27      	ldr	r3, [pc, #156]	; (8007e04 <prvAddNewTaskToReadyList+0xc4>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	d110      	bne.n	8007d8e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007d6c:	f000 fc26 	bl	80085bc <prvInitialiseTaskLists>
 8007d70:	e00d      	b.n	8007d8e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007d72:	4b26      	ldr	r3, [pc, #152]	; (8007e0c <prvAddNewTaskToReadyList+0xcc>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d109      	bne.n	8007d8e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007d7a:	4b23      	ldr	r3, [pc, #140]	; (8007e08 <prvAddNewTaskToReadyList+0xc8>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d802      	bhi.n	8007d8e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007d88:	4a1f      	ldr	r2, [pc, #124]	; (8007e08 <prvAddNewTaskToReadyList+0xc8>)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007d8e:	4b20      	ldr	r3, [pc, #128]	; (8007e10 <prvAddNewTaskToReadyList+0xd0>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	3301      	adds	r3, #1
 8007d94:	4a1e      	ldr	r2, [pc, #120]	; (8007e10 <prvAddNewTaskToReadyList+0xd0>)
 8007d96:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007d98:	4b1d      	ldr	r3, [pc, #116]	; (8007e10 <prvAddNewTaskToReadyList+0xd0>)
 8007d9a:	681a      	ldr	r2, [r3, #0]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007da4:	4b1b      	ldr	r3, [pc, #108]	; (8007e14 <prvAddNewTaskToReadyList+0xd4>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	429a      	cmp	r2, r3
 8007daa:	d903      	bls.n	8007db4 <prvAddNewTaskToReadyList+0x74>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007db0:	4a18      	ldr	r2, [pc, #96]	; (8007e14 <prvAddNewTaskToReadyList+0xd4>)
 8007db2:	6013      	str	r3, [r2, #0]
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007db8:	4613      	mov	r3, r2
 8007dba:	009b      	lsls	r3, r3, #2
 8007dbc:	4413      	add	r3, r2
 8007dbe:	009b      	lsls	r3, r3, #2
 8007dc0:	4a15      	ldr	r2, [pc, #84]	; (8007e18 <prvAddNewTaskToReadyList+0xd8>)
 8007dc2:	441a      	add	r2, r3
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	3304      	adds	r3, #4
 8007dc8:	4619      	mov	r1, r3
 8007dca:	4610      	mov	r0, r2
 8007dcc:	f7ff f8fd 	bl	8006fca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007dd0:	f001 fa40 	bl	8009254 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007dd4:	4b0d      	ldr	r3, [pc, #52]	; (8007e0c <prvAddNewTaskToReadyList+0xcc>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d00e      	beq.n	8007dfa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007ddc:	4b0a      	ldr	r3, [pc, #40]	; (8007e08 <prvAddNewTaskToReadyList+0xc8>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007de6:	429a      	cmp	r2, r3
 8007de8:	d207      	bcs.n	8007dfa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007dea:	4b0c      	ldr	r3, [pc, #48]	; (8007e1c <prvAddNewTaskToReadyList+0xdc>)
 8007dec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007df0:	601a      	str	r2, [r3, #0]
 8007df2:	f3bf 8f4f 	dsb	sy
 8007df6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007dfa:	bf00      	nop
 8007dfc:	3708      	adds	r7, #8
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}
 8007e02:	bf00      	nop
 8007e04:	20000e70 	.word	0x20000e70
 8007e08:	2000099c 	.word	0x2000099c
 8007e0c:	20000e7c 	.word	0x20000e7c
 8007e10:	20000e8c 	.word	0x20000e8c
 8007e14:	20000e78 	.word	0x20000e78
 8007e18:	200009a0 	.word	0x200009a0
 8007e1c:	e000ed04 	.word	0xe000ed04

08007e20 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b084      	sub	sp, #16
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d017      	beq.n	8007e62 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007e32:	4b13      	ldr	r3, [pc, #76]	; (8007e80 <vTaskDelay+0x60>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d00a      	beq.n	8007e50 <vTaskDelay+0x30>
	__asm volatile
 8007e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e3e:	f383 8811 	msr	BASEPRI, r3
 8007e42:	f3bf 8f6f 	isb	sy
 8007e46:	f3bf 8f4f 	dsb	sy
 8007e4a:	60bb      	str	r3, [r7, #8]
}
 8007e4c:	bf00      	nop
 8007e4e:	e7fe      	b.n	8007e4e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007e50:	f000 f88a 	bl	8007f68 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007e54:	2100      	movs	r1, #0
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f000 fcfe 	bl	8008858 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007e5c:	f000 f892 	bl	8007f84 <xTaskResumeAll>
 8007e60:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d107      	bne.n	8007e78 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007e68:	4b06      	ldr	r3, [pc, #24]	; (8007e84 <vTaskDelay+0x64>)
 8007e6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e6e:	601a      	str	r2, [r3, #0]
 8007e70:	f3bf 8f4f 	dsb	sy
 8007e74:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007e78:	bf00      	nop
 8007e7a:	3710      	adds	r7, #16
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}
 8007e80:	20000e98 	.word	0x20000e98
 8007e84:	e000ed04 	.word	0xe000ed04

08007e88 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b08a      	sub	sp, #40	; 0x28
 8007e8c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007e92:	2300      	movs	r3, #0
 8007e94:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007e96:	463a      	mov	r2, r7
 8007e98:	1d39      	adds	r1, r7, #4
 8007e9a:	f107 0308 	add.w	r3, r7, #8
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f7ff f832 	bl	8006f08 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007ea4:	6839      	ldr	r1, [r7, #0]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	68ba      	ldr	r2, [r7, #8]
 8007eaa:	9202      	str	r2, [sp, #8]
 8007eac:	9301      	str	r3, [sp, #4]
 8007eae:	2300      	movs	r3, #0
 8007eb0:	9300      	str	r3, [sp, #0]
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	460a      	mov	r2, r1
 8007eb6:	4924      	ldr	r1, [pc, #144]	; (8007f48 <vTaskStartScheduler+0xc0>)
 8007eb8:	4824      	ldr	r0, [pc, #144]	; (8007f4c <vTaskStartScheduler+0xc4>)
 8007eba:	f7ff fdf9 	bl	8007ab0 <xTaskCreateStatic>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	4a23      	ldr	r2, [pc, #140]	; (8007f50 <vTaskStartScheduler+0xc8>)
 8007ec2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007ec4:	4b22      	ldr	r3, [pc, #136]	; (8007f50 <vTaskStartScheduler+0xc8>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d002      	beq.n	8007ed2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007ecc:	2301      	movs	r3, #1
 8007ece:	617b      	str	r3, [r7, #20]
 8007ed0:	e001      	b.n	8007ed6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	2b01      	cmp	r3, #1
 8007eda:	d102      	bne.n	8007ee2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007edc:	f000 fd10 	bl	8008900 <xTimerCreateTimerTask>
 8007ee0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d11b      	bne.n	8007f20 <vTaskStartScheduler+0x98>
	__asm volatile
 8007ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eec:	f383 8811 	msr	BASEPRI, r3
 8007ef0:	f3bf 8f6f 	isb	sy
 8007ef4:	f3bf 8f4f 	dsb	sy
 8007ef8:	613b      	str	r3, [r7, #16]
}
 8007efa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007efc:	4b15      	ldr	r3, [pc, #84]	; (8007f54 <vTaskStartScheduler+0xcc>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	3354      	adds	r3, #84	; 0x54
 8007f02:	4a15      	ldr	r2, [pc, #84]	; (8007f58 <vTaskStartScheduler+0xd0>)
 8007f04:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007f06:	4b15      	ldr	r3, [pc, #84]	; (8007f5c <vTaskStartScheduler+0xd4>)
 8007f08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007f0c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007f0e:	4b14      	ldr	r3, [pc, #80]	; (8007f60 <vTaskStartScheduler+0xd8>)
 8007f10:	2201      	movs	r2, #1
 8007f12:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007f14:	4b13      	ldr	r3, [pc, #76]	; (8007f64 <vTaskStartScheduler+0xdc>)
 8007f16:	2200      	movs	r2, #0
 8007f18:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007f1a:	f001 f8c9 	bl	80090b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007f1e:	e00e      	b.n	8007f3e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f26:	d10a      	bne.n	8007f3e <vTaskStartScheduler+0xb6>
	__asm volatile
 8007f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f2c:	f383 8811 	msr	BASEPRI, r3
 8007f30:	f3bf 8f6f 	isb	sy
 8007f34:	f3bf 8f4f 	dsb	sy
 8007f38:	60fb      	str	r3, [r7, #12]
}
 8007f3a:	bf00      	nop
 8007f3c:	e7fe      	b.n	8007f3c <vTaskStartScheduler+0xb4>
}
 8007f3e:	bf00      	nop
 8007f40:	3718      	adds	r7, #24
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}
 8007f46:	bf00      	nop
 8007f48:	0800a7c4 	.word	0x0800a7c4
 8007f4c:	0800858d 	.word	0x0800858d
 8007f50:	20000e94 	.word	0x20000e94
 8007f54:	2000099c 	.word	0x2000099c
 8007f58:	20000100 	.word	0x20000100
 8007f5c:	20000e90 	.word	0x20000e90
 8007f60:	20000e7c 	.word	0x20000e7c
 8007f64:	20000e74 	.word	0x20000e74

08007f68 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007f68:	b480      	push	{r7}
 8007f6a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007f6c:	4b04      	ldr	r3, [pc, #16]	; (8007f80 <vTaskSuspendAll+0x18>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	3301      	adds	r3, #1
 8007f72:	4a03      	ldr	r2, [pc, #12]	; (8007f80 <vTaskSuspendAll+0x18>)
 8007f74:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007f76:	bf00      	nop
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr
 8007f80:	20000e98 	.word	0x20000e98

08007f84 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b084      	sub	sp, #16
 8007f88:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007f92:	4b42      	ldr	r3, [pc, #264]	; (800809c <xTaskResumeAll+0x118>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d10a      	bne.n	8007fb0 <xTaskResumeAll+0x2c>
	__asm volatile
 8007f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f9e:	f383 8811 	msr	BASEPRI, r3
 8007fa2:	f3bf 8f6f 	isb	sy
 8007fa6:	f3bf 8f4f 	dsb	sy
 8007faa:	603b      	str	r3, [r7, #0]
}
 8007fac:	bf00      	nop
 8007fae:	e7fe      	b.n	8007fae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007fb0:	f001 f920 	bl	80091f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007fb4:	4b39      	ldr	r3, [pc, #228]	; (800809c <xTaskResumeAll+0x118>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	3b01      	subs	r3, #1
 8007fba:	4a38      	ldr	r2, [pc, #224]	; (800809c <xTaskResumeAll+0x118>)
 8007fbc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007fbe:	4b37      	ldr	r3, [pc, #220]	; (800809c <xTaskResumeAll+0x118>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d162      	bne.n	800808c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007fc6:	4b36      	ldr	r3, [pc, #216]	; (80080a0 <xTaskResumeAll+0x11c>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d05e      	beq.n	800808c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007fce:	e02f      	b.n	8008030 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fd0:	4b34      	ldr	r3, [pc, #208]	; (80080a4 <xTaskResumeAll+0x120>)
 8007fd2:	68db      	ldr	r3, [r3, #12]
 8007fd4:	68db      	ldr	r3, [r3, #12]
 8007fd6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	3318      	adds	r3, #24
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f7ff f851 	bl	8007084 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	3304      	adds	r3, #4
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f7ff f84c 	bl	8007084 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ff0:	4b2d      	ldr	r3, [pc, #180]	; (80080a8 <xTaskResumeAll+0x124>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	d903      	bls.n	8008000 <xTaskResumeAll+0x7c>
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ffc:	4a2a      	ldr	r2, [pc, #168]	; (80080a8 <xTaskResumeAll+0x124>)
 8007ffe:	6013      	str	r3, [r2, #0]
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008004:	4613      	mov	r3, r2
 8008006:	009b      	lsls	r3, r3, #2
 8008008:	4413      	add	r3, r2
 800800a:	009b      	lsls	r3, r3, #2
 800800c:	4a27      	ldr	r2, [pc, #156]	; (80080ac <xTaskResumeAll+0x128>)
 800800e:	441a      	add	r2, r3
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	3304      	adds	r3, #4
 8008014:	4619      	mov	r1, r3
 8008016:	4610      	mov	r0, r2
 8008018:	f7fe ffd7 	bl	8006fca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008020:	4b23      	ldr	r3, [pc, #140]	; (80080b0 <xTaskResumeAll+0x12c>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008026:	429a      	cmp	r2, r3
 8008028:	d302      	bcc.n	8008030 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800802a:	4b22      	ldr	r3, [pc, #136]	; (80080b4 <xTaskResumeAll+0x130>)
 800802c:	2201      	movs	r2, #1
 800802e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008030:	4b1c      	ldr	r3, [pc, #112]	; (80080a4 <xTaskResumeAll+0x120>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d1cb      	bne.n	8007fd0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d001      	beq.n	8008042 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800803e:	f000 fb5f 	bl	8008700 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008042:	4b1d      	ldr	r3, [pc, #116]	; (80080b8 <xTaskResumeAll+0x134>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d010      	beq.n	8008070 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800804e:	f000 f847 	bl	80080e0 <xTaskIncrementTick>
 8008052:	4603      	mov	r3, r0
 8008054:	2b00      	cmp	r3, #0
 8008056:	d002      	beq.n	800805e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008058:	4b16      	ldr	r3, [pc, #88]	; (80080b4 <xTaskResumeAll+0x130>)
 800805a:	2201      	movs	r2, #1
 800805c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	3b01      	subs	r3, #1
 8008062:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d1f1      	bne.n	800804e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800806a:	4b13      	ldr	r3, [pc, #76]	; (80080b8 <xTaskResumeAll+0x134>)
 800806c:	2200      	movs	r2, #0
 800806e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008070:	4b10      	ldr	r3, [pc, #64]	; (80080b4 <xTaskResumeAll+0x130>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d009      	beq.n	800808c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008078:	2301      	movs	r3, #1
 800807a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800807c:	4b0f      	ldr	r3, [pc, #60]	; (80080bc <xTaskResumeAll+0x138>)
 800807e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008082:	601a      	str	r2, [r3, #0]
 8008084:	f3bf 8f4f 	dsb	sy
 8008088:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800808c:	f001 f8e2 	bl	8009254 <vPortExitCritical>

	return xAlreadyYielded;
 8008090:	68bb      	ldr	r3, [r7, #8]
}
 8008092:	4618      	mov	r0, r3
 8008094:	3710      	adds	r7, #16
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}
 800809a:	bf00      	nop
 800809c:	20000e98 	.word	0x20000e98
 80080a0:	20000e70 	.word	0x20000e70
 80080a4:	20000e30 	.word	0x20000e30
 80080a8:	20000e78 	.word	0x20000e78
 80080ac:	200009a0 	.word	0x200009a0
 80080b0:	2000099c 	.word	0x2000099c
 80080b4:	20000e84 	.word	0x20000e84
 80080b8:	20000e80 	.word	0x20000e80
 80080bc:	e000ed04 	.word	0xe000ed04

080080c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80080c0:	b480      	push	{r7}
 80080c2:	b083      	sub	sp, #12
 80080c4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80080c6:	4b05      	ldr	r3, [pc, #20]	; (80080dc <xTaskGetTickCount+0x1c>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80080cc:	687b      	ldr	r3, [r7, #4]
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	370c      	adds	r7, #12
 80080d2:	46bd      	mov	sp, r7
 80080d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d8:	4770      	bx	lr
 80080da:	bf00      	nop
 80080dc:	20000e74 	.word	0x20000e74

080080e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b086      	sub	sp, #24
 80080e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80080e6:	2300      	movs	r3, #0
 80080e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080ea:	4b4f      	ldr	r3, [pc, #316]	; (8008228 <xTaskIncrementTick+0x148>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	f040 808f 	bne.w	8008212 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80080f4:	4b4d      	ldr	r3, [pc, #308]	; (800822c <xTaskIncrementTick+0x14c>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	3301      	adds	r3, #1
 80080fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80080fc:	4a4b      	ldr	r2, [pc, #300]	; (800822c <xTaskIncrementTick+0x14c>)
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d120      	bne.n	800814a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008108:	4b49      	ldr	r3, [pc, #292]	; (8008230 <xTaskIncrementTick+0x150>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d00a      	beq.n	8008128 <xTaskIncrementTick+0x48>
	__asm volatile
 8008112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008116:	f383 8811 	msr	BASEPRI, r3
 800811a:	f3bf 8f6f 	isb	sy
 800811e:	f3bf 8f4f 	dsb	sy
 8008122:	603b      	str	r3, [r7, #0]
}
 8008124:	bf00      	nop
 8008126:	e7fe      	b.n	8008126 <xTaskIncrementTick+0x46>
 8008128:	4b41      	ldr	r3, [pc, #260]	; (8008230 <xTaskIncrementTick+0x150>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	60fb      	str	r3, [r7, #12]
 800812e:	4b41      	ldr	r3, [pc, #260]	; (8008234 <xTaskIncrementTick+0x154>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a3f      	ldr	r2, [pc, #252]	; (8008230 <xTaskIncrementTick+0x150>)
 8008134:	6013      	str	r3, [r2, #0]
 8008136:	4a3f      	ldr	r2, [pc, #252]	; (8008234 <xTaskIncrementTick+0x154>)
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	6013      	str	r3, [r2, #0]
 800813c:	4b3e      	ldr	r3, [pc, #248]	; (8008238 <xTaskIncrementTick+0x158>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	3301      	adds	r3, #1
 8008142:	4a3d      	ldr	r2, [pc, #244]	; (8008238 <xTaskIncrementTick+0x158>)
 8008144:	6013      	str	r3, [r2, #0]
 8008146:	f000 fadb 	bl	8008700 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800814a:	4b3c      	ldr	r3, [pc, #240]	; (800823c <xTaskIncrementTick+0x15c>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	693a      	ldr	r2, [r7, #16]
 8008150:	429a      	cmp	r2, r3
 8008152:	d349      	bcc.n	80081e8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008154:	4b36      	ldr	r3, [pc, #216]	; (8008230 <xTaskIncrementTick+0x150>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d104      	bne.n	8008168 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800815e:	4b37      	ldr	r3, [pc, #220]	; (800823c <xTaskIncrementTick+0x15c>)
 8008160:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008164:	601a      	str	r2, [r3, #0]
					break;
 8008166:	e03f      	b.n	80081e8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008168:	4b31      	ldr	r3, [pc, #196]	; (8008230 <xTaskIncrementTick+0x150>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	68db      	ldr	r3, [r3, #12]
 800816e:	68db      	ldr	r3, [r3, #12]
 8008170:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008178:	693a      	ldr	r2, [r7, #16]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	429a      	cmp	r2, r3
 800817e:	d203      	bcs.n	8008188 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008180:	4a2e      	ldr	r2, [pc, #184]	; (800823c <xTaskIncrementTick+0x15c>)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008186:	e02f      	b.n	80081e8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	3304      	adds	r3, #4
 800818c:	4618      	mov	r0, r3
 800818e:	f7fe ff79 	bl	8007084 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008196:	2b00      	cmp	r3, #0
 8008198:	d004      	beq.n	80081a4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	3318      	adds	r3, #24
 800819e:	4618      	mov	r0, r3
 80081a0:	f7fe ff70 	bl	8007084 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081a8:	4b25      	ldr	r3, [pc, #148]	; (8008240 <xTaskIncrementTick+0x160>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	429a      	cmp	r2, r3
 80081ae:	d903      	bls.n	80081b8 <xTaskIncrementTick+0xd8>
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081b4:	4a22      	ldr	r2, [pc, #136]	; (8008240 <xTaskIncrementTick+0x160>)
 80081b6:	6013      	str	r3, [r2, #0]
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081bc:	4613      	mov	r3, r2
 80081be:	009b      	lsls	r3, r3, #2
 80081c0:	4413      	add	r3, r2
 80081c2:	009b      	lsls	r3, r3, #2
 80081c4:	4a1f      	ldr	r2, [pc, #124]	; (8008244 <xTaskIncrementTick+0x164>)
 80081c6:	441a      	add	r2, r3
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	3304      	adds	r3, #4
 80081cc:	4619      	mov	r1, r3
 80081ce:	4610      	mov	r0, r2
 80081d0:	f7fe fefb 	bl	8006fca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081d8:	4b1b      	ldr	r3, [pc, #108]	; (8008248 <xTaskIncrementTick+0x168>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081de:	429a      	cmp	r2, r3
 80081e0:	d3b8      	bcc.n	8008154 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80081e2:	2301      	movs	r3, #1
 80081e4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80081e6:	e7b5      	b.n	8008154 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80081e8:	4b17      	ldr	r3, [pc, #92]	; (8008248 <xTaskIncrementTick+0x168>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081ee:	4915      	ldr	r1, [pc, #84]	; (8008244 <xTaskIncrementTick+0x164>)
 80081f0:	4613      	mov	r3, r2
 80081f2:	009b      	lsls	r3, r3, #2
 80081f4:	4413      	add	r3, r2
 80081f6:	009b      	lsls	r3, r3, #2
 80081f8:	440b      	add	r3, r1
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	d901      	bls.n	8008204 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008200:	2301      	movs	r3, #1
 8008202:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008204:	4b11      	ldr	r3, [pc, #68]	; (800824c <xTaskIncrementTick+0x16c>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d007      	beq.n	800821c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800820c:	2301      	movs	r3, #1
 800820e:	617b      	str	r3, [r7, #20]
 8008210:	e004      	b.n	800821c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008212:	4b0f      	ldr	r3, [pc, #60]	; (8008250 <xTaskIncrementTick+0x170>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	3301      	adds	r3, #1
 8008218:	4a0d      	ldr	r2, [pc, #52]	; (8008250 <xTaskIncrementTick+0x170>)
 800821a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800821c:	697b      	ldr	r3, [r7, #20]
}
 800821e:	4618      	mov	r0, r3
 8008220:	3718      	adds	r7, #24
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}
 8008226:	bf00      	nop
 8008228:	20000e98 	.word	0x20000e98
 800822c:	20000e74 	.word	0x20000e74
 8008230:	20000e28 	.word	0x20000e28
 8008234:	20000e2c 	.word	0x20000e2c
 8008238:	20000e88 	.word	0x20000e88
 800823c:	20000e90 	.word	0x20000e90
 8008240:	20000e78 	.word	0x20000e78
 8008244:	200009a0 	.word	0x200009a0
 8008248:	2000099c 	.word	0x2000099c
 800824c:	20000e84 	.word	0x20000e84
 8008250:	20000e80 	.word	0x20000e80

08008254 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008254:	b480      	push	{r7}
 8008256:	b085      	sub	sp, #20
 8008258:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800825a:	4b2a      	ldr	r3, [pc, #168]	; (8008304 <vTaskSwitchContext+0xb0>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d003      	beq.n	800826a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008262:	4b29      	ldr	r3, [pc, #164]	; (8008308 <vTaskSwitchContext+0xb4>)
 8008264:	2201      	movs	r2, #1
 8008266:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008268:	e046      	b.n	80082f8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800826a:	4b27      	ldr	r3, [pc, #156]	; (8008308 <vTaskSwitchContext+0xb4>)
 800826c:	2200      	movs	r2, #0
 800826e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008270:	4b26      	ldr	r3, [pc, #152]	; (800830c <vTaskSwitchContext+0xb8>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	60fb      	str	r3, [r7, #12]
 8008276:	e010      	b.n	800829a <vTaskSwitchContext+0x46>
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d10a      	bne.n	8008294 <vTaskSwitchContext+0x40>
	__asm volatile
 800827e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008282:	f383 8811 	msr	BASEPRI, r3
 8008286:	f3bf 8f6f 	isb	sy
 800828a:	f3bf 8f4f 	dsb	sy
 800828e:	607b      	str	r3, [r7, #4]
}
 8008290:	bf00      	nop
 8008292:	e7fe      	b.n	8008292 <vTaskSwitchContext+0x3e>
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	3b01      	subs	r3, #1
 8008298:	60fb      	str	r3, [r7, #12]
 800829a:	491d      	ldr	r1, [pc, #116]	; (8008310 <vTaskSwitchContext+0xbc>)
 800829c:	68fa      	ldr	r2, [r7, #12]
 800829e:	4613      	mov	r3, r2
 80082a0:	009b      	lsls	r3, r3, #2
 80082a2:	4413      	add	r3, r2
 80082a4:	009b      	lsls	r3, r3, #2
 80082a6:	440b      	add	r3, r1
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d0e4      	beq.n	8008278 <vTaskSwitchContext+0x24>
 80082ae:	68fa      	ldr	r2, [r7, #12]
 80082b0:	4613      	mov	r3, r2
 80082b2:	009b      	lsls	r3, r3, #2
 80082b4:	4413      	add	r3, r2
 80082b6:	009b      	lsls	r3, r3, #2
 80082b8:	4a15      	ldr	r2, [pc, #84]	; (8008310 <vTaskSwitchContext+0xbc>)
 80082ba:	4413      	add	r3, r2
 80082bc:	60bb      	str	r3, [r7, #8]
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	685b      	ldr	r3, [r3, #4]
 80082c2:	685a      	ldr	r2, [r3, #4]
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	605a      	str	r2, [r3, #4]
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	685a      	ldr	r2, [r3, #4]
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	3308      	adds	r3, #8
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d104      	bne.n	80082de <vTaskSwitchContext+0x8a>
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	685b      	ldr	r3, [r3, #4]
 80082d8:	685a      	ldr	r2, [r3, #4]
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	605a      	str	r2, [r3, #4]
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	68db      	ldr	r3, [r3, #12]
 80082e4:	4a0b      	ldr	r2, [pc, #44]	; (8008314 <vTaskSwitchContext+0xc0>)
 80082e6:	6013      	str	r3, [r2, #0]
 80082e8:	4a08      	ldr	r2, [pc, #32]	; (800830c <vTaskSwitchContext+0xb8>)
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80082ee:	4b09      	ldr	r3, [pc, #36]	; (8008314 <vTaskSwitchContext+0xc0>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	3354      	adds	r3, #84	; 0x54
 80082f4:	4a08      	ldr	r2, [pc, #32]	; (8008318 <vTaskSwitchContext+0xc4>)
 80082f6:	6013      	str	r3, [r2, #0]
}
 80082f8:	bf00      	nop
 80082fa:	3714      	adds	r7, #20
 80082fc:	46bd      	mov	sp, r7
 80082fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008302:	4770      	bx	lr
 8008304:	20000e98 	.word	0x20000e98
 8008308:	20000e84 	.word	0x20000e84
 800830c:	20000e78 	.word	0x20000e78
 8008310:	200009a0 	.word	0x200009a0
 8008314:	2000099c 	.word	0x2000099c
 8008318:	20000100 	.word	0x20000100

0800831c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b084      	sub	sp, #16
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d10a      	bne.n	8008342 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800832c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008330:	f383 8811 	msr	BASEPRI, r3
 8008334:	f3bf 8f6f 	isb	sy
 8008338:	f3bf 8f4f 	dsb	sy
 800833c:	60fb      	str	r3, [r7, #12]
}
 800833e:	bf00      	nop
 8008340:	e7fe      	b.n	8008340 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008342:	4b07      	ldr	r3, [pc, #28]	; (8008360 <vTaskPlaceOnEventList+0x44>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	3318      	adds	r3, #24
 8008348:	4619      	mov	r1, r3
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f7fe fe61 	bl	8007012 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008350:	2101      	movs	r1, #1
 8008352:	6838      	ldr	r0, [r7, #0]
 8008354:	f000 fa80 	bl	8008858 <prvAddCurrentTaskToDelayedList>
}
 8008358:	bf00      	nop
 800835a:	3710      	adds	r7, #16
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}
 8008360:	2000099c 	.word	0x2000099c

08008364 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008364:	b580      	push	{r7, lr}
 8008366:	b086      	sub	sp, #24
 8008368:	af00      	add	r7, sp, #0
 800836a:	60f8      	str	r0, [r7, #12]
 800836c:	60b9      	str	r1, [r7, #8]
 800836e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d10a      	bne.n	800838c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800837a:	f383 8811 	msr	BASEPRI, r3
 800837e:	f3bf 8f6f 	isb	sy
 8008382:	f3bf 8f4f 	dsb	sy
 8008386:	617b      	str	r3, [r7, #20]
}
 8008388:	bf00      	nop
 800838a:	e7fe      	b.n	800838a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800838c:	4b0a      	ldr	r3, [pc, #40]	; (80083b8 <vTaskPlaceOnEventListRestricted+0x54>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	3318      	adds	r3, #24
 8008392:	4619      	mov	r1, r3
 8008394:	68f8      	ldr	r0, [r7, #12]
 8008396:	f7fe fe18 	bl	8006fca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d002      	beq.n	80083a6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80083a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80083a4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80083a6:	6879      	ldr	r1, [r7, #4]
 80083a8:	68b8      	ldr	r0, [r7, #8]
 80083aa:	f000 fa55 	bl	8008858 <prvAddCurrentTaskToDelayedList>
	}
 80083ae:	bf00      	nop
 80083b0:	3718      	adds	r7, #24
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}
 80083b6:	bf00      	nop
 80083b8:	2000099c 	.word	0x2000099c

080083bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b086      	sub	sp, #24
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	68db      	ldr	r3, [r3, #12]
 80083c8:	68db      	ldr	r3, [r3, #12]
 80083ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d10a      	bne.n	80083e8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80083d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d6:	f383 8811 	msr	BASEPRI, r3
 80083da:	f3bf 8f6f 	isb	sy
 80083de:	f3bf 8f4f 	dsb	sy
 80083e2:	60fb      	str	r3, [r7, #12]
}
 80083e4:	bf00      	nop
 80083e6:	e7fe      	b.n	80083e6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80083e8:	693b      	ldr	r3, [r7, #16]
 80083ea:	3318      	adds	r3, #24
 80083ec:	4618      	mov	r0, r3
 80083ee:	f7fe fe49 	bl	8007084 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083f2:	4b1e      	ldr	r3, [pc, #120]	; (800846c <xTaskRemoveFromEventList+0xb0>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d11d      	bne.n	8008436 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80083fa:	693b      	ldr	r3, [r7, #16]
 80083fc:	3304      	adds	r3, #4
 80083fe:	4618      	mov	r0, r3
 8008400:	f7fe fe40 	bl	8007084 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008404:	693b      	ldr	r3, [r7, #16]
 8008406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008408:	4b19      	ldr	r3, [pc, #100]	; (8008470 <xTaskRemoveFromEventList+0xb4>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	429a      	cmp	r2, r3
 800840e:	d903      	bls.n	8008418 <xTaskRemoveFromEventList+0x5c>
 8008410:	693b      	ldr	r3, [r7, #16]
 8008412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008414:	4a16      	ldr	r2, [pc, #88]	; (8008470 <xTaskRemoveFromEventList+0xb4>)
 8008416:	6013      	str	r3, [r2, #0]
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800841c:	4613      	mov	r3, r2
 800841e:	009b      	lsls	r3, r3, #2
 8008420:	4413      	add	r3, r2
 8008422:	009b      	lsls	r3, r3, #2
 8008424:	4a13      	ldr	r2, [pc, #76]	; (8008474 <xTaskRemoveFromEventList+0xb8>)
 8008426:	441a      	add	r2, r3
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	3304      	adds	r3, #4
 800842c:	4619      	mov	r1, r3
 800842e:	4610      	mov	r0, r2
 8008430:	f7fe fdcb 	bl	8006fca <vListInsertEnd>
 8008434:	e005      	b.n	8008442 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008436:	693b      	ldr	r3, [r7, #16]
 8008438:	3318      	adds	r3, #24
 800843a:	4619      	mov	r1, r3
 800843c:	480e      	ldr	r0, [pc, #56]	; (8008478 <xTaskRemoveFromEventList+0xbc>)
 800843e:	f7fe fdc4 	bl	8006fca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008446:	4b0d      	ldr	r3, [pc, #52]	; (800847c <xTaskRemoveFromEventList+0xc0>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800844c:	429a      	cmp	r2, r3
 800844e:	d905      	bls.n	800845c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008450:	2301      	movs	r3, #1
 8008452:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008454:	4b0a      	ldr	r3, [pc, #40]	; (8008480 <xTaskRemoveFromEventList+0xc4>)
 8008456:	2201      	movs	r2, #1
 8008458:	601a      	str	r2, [r3, #0]
 800845a:	e001      	b.n	8008460 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800845c:	2300      	movs	r3, #0
 800845e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008460:	697b      	ldr	r3, [r7, #20]
}
 8008462:	4618      	mov	r0, r3
 8008464:	3718      	adds	r7, #24
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}
 800846a:	bf00      	nop
 800846c:	20000e98 	.word	0x20000e98
 8008470:	20000e78 	.word	0x20000e78
 8008474:	200009a0 	.word	0x200009a0
 8008478:	20000e30 	.word	0x20000e30
 800847c:	2000099c 	.word	0x2000099c
 8008480:	20000e84 	.word	0x20000e84

08008484 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008484:	b480      	push	{r7}
 8008486:	b083      	sub	sp, #12
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800848c:	4b06      	ldr	r3, [pc, #24]	; (80084a8 <vTaskInternalSetTimeOutState+0x24>)
 800848e:	681a      	ldr	r2, [r3, #0]
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008494:	4b05      	ldr	r3, [pc, #20]	; (80084ac <vTaskInternalSetTimeOutState+0x28>)
 8008496:	681a      	ldr	r2, [r3, #0]
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	605a      	str	r2, [r3, #4]
}
 800849c:	bf00      	nop
 800849e:	370c      	adds	r7, #12
 80084a0:	46bd      	mov	sp, r7
 80084a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a6:	4770      	bx	lr
 80084a8:	20000e88 	.word	0x20000e88
 80084ac:	20000e74 	.word	0x20000e74

080084b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b088      	sub	sp, #32
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d10a      	bne.n	80084d6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80084c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084c4:	f383 8811 	msr	BASEPRI, r3
 80084c8:	f3bf 8f6f 	isb	sy
 80084cc:	f3bf 8f4f 	dsb	sy
 80084d0:	613b      	str	r3, [r7, #16]
}
 80084d2:	bf00      	nop
 80084d4:	e7fe      	b.n	80084d4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d10a      	bne.n	80084f2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80084dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e0:	f383 8811 	msr	BASEPRI, r3
 80084e4:	f3bf 8f6f 	isb	sy
 80084e8:	f3bf 8f4f 	dsb	sy
 80084ec:	60fb      	str	r3, [r7, #12]
}
 80084ee:	bf00      	nop
 80084f0:	e7fe      	b.n	80084f0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80084f2:	f000 fe7f 	bl	80091f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80084f6:	4b1d      	ldr	r3, [pc, #116]	; (800856c <xTaskCheckForTimeOut+0xbc>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	69ba      	ldr	r2, [r7, #24]
 8008502:	1ad3      	subs	r3, r2, r3
 8008504:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800850e:	d102      	bne.n	8008516 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008510:	2300      	movs	r3, #0
 8008512:	61fb      	str	r3, [r7, #28]
 8008514:	e023      	b.n	800855e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681a      	ldr	r2, [r3, #0]
 800851a:	4b15      	ldr	r3, [pc, #84]	; (8008570 <xTaskCheckForTimeOut+0xc0>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	429a      	cmp	r2, r3
 8008520:	d007      	beq.n	8008532 <xTaskCheckForTimeOut+0x82>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	685b      	ldr	r3, [r3, #4]
 8008526:	69ba      	ldr	r2, [r7, #24]
 8008528:	429a      	cmp	r2, r3
 800852a:	d302      	bcc.n	8008532 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800852c:	2301      	movs	r3, #1
 800852e:	61fb      	str	r3, [r7, #28]
 8008530:	e015      	b.n	800855e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	697a      	ldr	r2, [r7, #20]
 8008538:	429a      	cmp	r2, r3
 800853a:	d20b      	bcs.n	8008554 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	681a      	ldr	r2, [r3, #0]
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	1ad2      	subs	r2, r2, r3
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f7ff ff9b 	bl	8008484 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800854e:	2300      	movs	r3, #0
 8008550:	61fb      	str	r3, [r7, #28]
 8008552:	e004      	b.n	800855e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	2200      	movs	r2, #0
 8008558:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800855a:	2301      	movs	r3, #1
 800855c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800855e:	f000 fe79 	bl	8009254 <vPortExitCritical>

	return xReturn;
 8008562:	69fb      	ldr	r3, [r7, #28]
}
 8008564:	4618      	mov	r0, r3
 8008566:	3720      	adds	r7, #32
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}
 800856c:	20000e74 	.word	0x20000e74
 8008570:	20000e88 	.word	0x20000e88

08008574 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008574:	b480      	push	{r7}
 8008576:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008578:	4b03      	ldr	r3, [pc, #12]	; (8008588 <vTaskMissedYield+0x14>)
 800857a:	2201      	movs	r2, #1
 800857c:	601a      	str	r2, [r3, #0]
}
 800857e:	bf00      	nop
 8008580:	46bd      	mov	sp, r7
 8008582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008586:	4770      	bx	lr
 8008588:	20000e84 	.word	0x20000e84

0800858c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b082      	sub	sp, #8
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008594:	f000 f852 	bl	800863c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008598:	4b06      	ldr	r3, [pc, #24]	; (80085b4 <prvIdleTask+0x28>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	2b01      	cmp	r3, #1
 800859e:	d9f9      	bls.n	8008594 <prvIdleTask+0x8>
			{
				taskYIELD();
 80085a0:	4b05      	ldr	r3, [pc, #20]	; (80085b8 <prvIdleTask+0x2c>)
 80085a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085a6:	601a      	str	r2, [r3, #0]
 80085a8:	f3bf 8f4f 	dsb	sy
 80085ac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80085b0:	e7f0      	b.n	8008594 <prvIdleTask+0x8>
 80085b2:	bf00      	nop
 80085b4:	200009a0 	.word	0x200009a0
 80085b8:	e000ed04 	.word	0xe000ed04

080085bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b082      	sub	sp, #8
 80085c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80085c2:	2300      	movs	r3, #0
 80085c4:	607b      	str	r3, [r7, #4]
 80085c6:	e00c      	b.n	80085e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80085c8:	687a      	ldr	r2, [r7, #4]
 80085ca:	4613      	mov	r3, r2
 80085cc:	009b      	lsls	r3, r3, #2
 80085ce:	4413      	add	r3, r2
 80085d0:	009b      	lsls	r3, r3, #2
 80085d2:	4a12      	ldr	r2, [pc, #72]	; (800861c <prvInitialiseTaskLists+0x60>)
 80085d4:	4413      	add	r3, r2
 80085d6:	4618      	mov	r0, r3
 80085d8:	f7fe fcca 	bl	8006f70 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	3301      	adds	r3, #1
 80085e0:	607b      	str	r3, [r7, #4]
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2b37      	cmp	r3, #55	; 0x37
 80085e6:	d9ef      	bls.n	80085c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80085e8:	480d      	ldr	r0, [pc, #52]	; (8008620 <prvInitialiseTaskLists+0x64>)
 80085ea:	f7fe fcc1 	bl	8006f70 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80085ee:	480d      	ldr	r0, [pc, #52]	; (8008624 <prvInitialiseTaskLists+0x68>)
 80085f0:	f7fe fcbe 	bl	8006f70 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80085f4:	480c      	ldr	r0, [pc, #48]	; (8008628 <prvInitialiseTaskLists+0x6c>)
 80085f6:	f7fe fcbb 	bl	8006f70 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80085fa:	480c      	ldr	r0, [pc, #48]	; (800862c <prvInitialiseTaskLists+0x70>)
 80085fc:	f7fe fcb8 	bl	8006f70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008600:	480b      	ldr	r0, [pc, #44]	; (8008630 <prvInitialiseTaskLists+0x74>)
 8008602:	f7fe fcb5 	bl	8006f70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008606:	4b0b      	ldr	r3, [pc, #44]	; (8008634 <prvInitialiseTaskLists+0x78>)
 8008608:	4a05      	ldr	r2, [pc, #20]	; (8008620 <prvInitialiseTaskLists+0x64>)
 800860a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800860c:	4b0a      	ldr	r3, [pc, #40]	; (8008638 <prvInitialiseTaskLists+0x7c>)
 800860e:	4a05      	ldr	r2, [pc, #20]	; (8008624 <prvInitialiseTaskLists+0x68>)
 8008610:	601a      	str	r2, [r3, #0]
}
 8008612:	bf00      	nop
 8008614:	3708      	adds	r7, #8
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}
 800861a:	bf00      	nop
 800861c:	200009a0 	.word	0x200009a0
 8008620:	20000e00 	.word	0x20000e00
 8008624:	20000e14 	.word	0x20000e14
 8008628:	20000e30 	.word	0x20000e30
 800862c:	20000e44 	.word	0x20000e44
 8008630:	20000e5c 	.word	0x20000e5c
 8008634:	20000e28 	.word	0x20000e28
 8008638:	20000e2c 	.word	0x20000e2c

0800863c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b082      	sub	sp, #8
 8008640:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008642:	e019      	b.n	8008678 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008644:	f000 fdd6 	bl	80091f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008648:	4b10      	ldr	r3, [pc, #64]	; (800868c <prvCheckTasksWaitingTermination+0x50>)
 800864a:	68db      	ldr	r3, [r3, #12]
 800864c:	68db      	ldr	r3, [r3, #12]
 800864e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	3304      	adds	r3, #4
 8008654:	4618      	mov	r0, r3
 8008656:	f7fe fd15 	bl	8007084 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800865a:	4b0d      	ldr	r3, [pc, #52]	; (8008690 <prvCheckTasksWaitingTermination+0x54>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	3b01      	subs	r3, #1
 8008660:	4a0b      	ldr	r2, [pc, #44]	; (8008690 <prvCheckTasksWaitingTermination+0x54>)
 8008662:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008664:	4b0b      	ldr	r3, [pc, #44]	; (8008694 <prvCheckTasksWaitingTermination+0x58>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	3b01      	subs	r3, #1
 800866a:	4a0a      	ldr	r2, [pc, #40]	; (8008694 <prvCheckTasksWaitingTermination+0x58>)
 800866c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800866e:	f000 fdf1 	bl	8009254 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f000 f810 	bl	8008698 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008678:	4b06      	ldr	r3, [pc, #24]	; (8008694 <prvCheckTasksWaitingTermination+0x58>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d1e1      	bne.n	8008644 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008680:	bf00      	nop
 8008682:	bf00      	nop
 8008684:	3708      	adds	r7, #8
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}
 800868a:	bf00      	nop
 800868c:	20000e44 	.word	0x20000e44
 8008690:	20000e70 	.word	0x20000e70
 8008694:	20000e58 	.word	0x20000e58

08008698 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008698:	b580      	push	{r7, lr}
 800869a:	b084      	sub	sp, #16
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	3354      	adds	r3, #84	; 0x54
 80086a4:	4618      	mov	r0, r3
 80086a6:	f001 ffa5 	bl	800a5f4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d108      	bne.n	80086c6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086b8:	4618      	mov	r0, r3
 80086ba:	f000 ff89 	bl	80095d0 <vPortFree>
				vPortFree( pxTCB );
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f000 ff86 	bl	80095d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80086c4:	e018      	b.n	80086f8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80086cc:	2b01      	cmp	r3, #1
 80086ce:	d103      	bne.n	80086d8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f000 ff7d 	bl	80095d0 <vPortFree>
	}
 80086d6:	e00f      	b.n	80086f8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80086de:	2b02      	cmp	r3, #2
 80086e0:	d00a      	beq.n	80086f8 <prvDeleteTCB+0x60>
	__asm volatile
 80086e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e6:	f383 8811 	msr	BASEPRI, r3
 80086ea:	f3bf 8f6f 	isb	sy
 80086ee:	f3bf 8f4f 	dsb	sy
 80086f2:	60fb      	str	r3, [r7, #12]
}
 80086f4:	bf00      	nop
 80086f6:	e7fe      	b.n	80086f6 <prvDeleteTCB+0x5e>
	}
 80086f8:	bf00      	nop
 80086fa:	3710      	adds	r7, #16
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}

08008700 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008700:	b480      	push	{r7}
 8008702:	b083      	sub	sp, #12
 8008704:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008706:	4b0c      	ldr	r3, [pc, #48]	; (8008738 <prvResetNextTaskUnblockTime+0x38>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d104      	bne.n	800871a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008710:	4b0a      	ldr	r3, [pc, #40]	; (800873c <prvResetNextTaskUnblockTime+0x3c>)
 8008712:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008716:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008718:	e008      	b.n	800872c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800871a:	4b07      	ldr	r3, [pc, #28]	; (8008738 <prvResetNextTaskUnblockTime+0x38>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	68db      	ldr	r3, [r3, #12]
 8008720:	68db      	ldr	r3, [r3, #12]
 8008722:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	685b      	ldr	r3, [r3, #4]
 8008728:	4a04      	ldr	r2, [pc, #16]	; (800873c <prvResetNextTaskUnblockTime+0x3c>)
 800872a:	6013      	str	r3, [r2, #0]
}
 800872c:	bf00      	nop
 800872e:	370c      	adds	r7, #12
 8008730:	46bd      	mov	sp, r7
 8008732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008736:	4770      	bx	lr
 8008738:	20000e28 	.word	0x20000e28
 800873c:	20000e90 	.word	0x20000e90

08008740 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008740:	b480      	push	{r7}
 8008742:	b083      	sub	sp, #12
 8008744:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008746:	4b0b      	ldr	r3, [pc, #44]	; (8008774 <xTaskGetSchedulerState+0x34>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d102      	bne.n	8008754 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800874e:	2301      	movs	r3, #1
 8008750:	607b      	str	r3, [r7, #4]
 8008752:	e008      	b.n	8008766 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008754:	4b08      	ldr	r3, [pc, #32]	; (8008778 <xTaskGetSchedulerState+0x38>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d102      	bne.n	8008762 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800875c:	2302      	movs	r3, #2
 800875e:	607b      	str	r3, [r7, #4]
 8008760:	e001      	b.n	8008766 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008762:	2300      	movs	r3, #0
 8008764:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008766:	687b      	ldr	r3, [r7, #4]
	}
 8008768:	4618      	mov	r0, r3
 800876a:	370c      	adds	r7, #12
 800876c:	46bd      	mov	sp, r7
 800876e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008772:	4770      	bx	lr
 8008774:	20000e7c 	.word	0x20000e7c
 8008778:	20000e98 	.word	0x20000e98

0800877c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800877c:	b580      	push	{r7, lr}
 800877e:	b086      	sub	sp, #24
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008788:	2300      	movs	r3, #0
 800878a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d056      	beq.n	8008840 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008792:	4b2e      	ldr	r3, [pc, #184]	; (800884c <xTaskPriorityDisinherit+0xd0>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	693a      	ldr	r2, [r7, #16]
 8008798:	429a      	cmp	r2, r3
 800879a:	d00a      	beq.n	80087b2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800879c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a0:	f383 8811 	msr	BASEPRI, r3
 80087a4:	f3bf 8f6f 	isb	sy
 80087a8:	f3bf 8f4f 	dsb	sy
 80087ac:	60fb      	str	r3, [r7, #12]
}
 80087ae:	bf00      	nop
 80087b0:	e7fe      	b.n	80087b0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d10a      	bne.n	80087d0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80087ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087be:	f383 8811 	msr	BASEPRI, r3
 80087c2:	f3bf 8f6f 	isb	sy
 80087c6:	f3bf 8f4f 	dsb	sy
 80087ca:	60bb      	str	r3, [r7, #8]
}
 80087cc:	bf00      	nop
 80087ce:	e7fe      	b.n	80087ce <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80087d0:	693b      	ldr	r3, [r7, #16]
 80087d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087d4:	1e5a      	subs	r2, r3, #1
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087de:	693b      	ldr	r3, [r7, #16]
 80087e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087e2:	429a      	cmp	r2, r3
 80087e4:	d02c      	beq.n	8008840 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d128      	bne.n	8008840 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80087ee:	693b      	ldr	r3, [r7, #16]
 80087f0:	3304      	adds	r3, #4
 80087f2:	4618      	mov	r0, r3
 80087f4:	f7fe fc46 	bl	8007084 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80087f8:	693b      	ldr	r3, [r7, #16]
 80087fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008800:	693b      	ldr	r3, [r7, #16]
 8008802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008804:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008810:	4b0f      	ldr	r3, [pc, #60]	; (8008850 <xTaskPriorityDisinherit+0xd4>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	429a      	cmp	r2, r3
 8008816:	d903      	bls.n	8008820 <xTaskPriorityDisinherit+0xa4>
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800881c:	4a0c      	ldr	r2, [pc, #48]	; (8008850 <xTaskPriorityDisinherit+0xd4>)
 800881e:	6013      	str	r3, [r2, #0]
 8008820:	693b      	ldr	r3, [r7, #16]
 8008822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008824:	4613      	mov	r3, r2
 8008826:	009b      	lsls	r3, r3, #2
 8008828:	4413      	add	r3, r2
 800882a:	009b      	lsls	r3, r3, #2
 800882c:	4a09      	ldr	r2, [pc, #36]	; (8008854 <xTaskPriorityDisinherit+0xd8>)
 800882e:	441a      	add	r2, r3
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	3304      	adds	r3, #4
 8008834:	4619      	mov	r1, r3
 8008836:	4610      	mov	r0, r2
 8008838:	f7fe fbc7 	bl	8006fca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800883c:	2301      	movs	r3, #1
 800883e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008840:	697b      	ldr	r3, [r7, #20]
	}
 8008842:	4618      	mov	r0, r3
 8008844:	3718      	adds	r7, #24
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}
 800884a:	bf00      	nop
 800884c:	2000099c 	.word	0x2000099c
 8008850:	20000e78 	.word	0x20000e78
 8008854:	200009a0 	.word	0x200009a0

08008858 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b084      	sub	sp, #16
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
 8008860:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008862:	4b21      	ldr	r3, [pc, #132]	; (80088e8 <prvAddCurrentTaskToDelayedList+0x90>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008868:	4b20      	ldr	r3, [pc, #128]	; (80088ec <prvAddCurrentTaskToDelayedList+0x94>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	3304      	adds	r3, #4
 800886e:	4618      	mov	r0, r3
 8008870:	f7fe fc08 	bl	8007084 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800887a:	d10a      	bne.n	8008892 <prvAddCurrentTaskToDelayedList+0x3a>
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d007      	beq.n	8008892 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008882:	4b1a      	ldr	r3, [pc, #104]	; (80088ec <prvAddCurrentTaskToDelayedList+0x94>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	3304      	adds	r3, #4
 8008888:	4619      	mov	r1, r3
 800888a:	4819      	ldr	r0, [pc, #100]	; (80088f0 <prvAddCurrentTaskToDelayedList+0x98>)
 800888c:	f7fe fb9d 	bl	8006fca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008890:	e026      	b.n	80088e0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008892:	68fa      	ldr	r2, [r7, #12]
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	4413      	add	r3, r2
 8008898:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800889a:	4b14      	ldr	r3, [pc, #80]	; (80088ec <prvAddCurrentTaskToDelayedList+0x94>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	68ba      	ldr	r2, [r7, #8]
 80088a0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80088a2:	68ba      	ldr	r2, [r7, #8]
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	429a      	cmp	r2, r3
 80088a8:	d209      	bcs.n	80088be <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80088aa:	4b12      	ldr	r3, [pc, #72]	; (80088f4 <prvAddCurrentTaskToDelayedList+0x9c>)
 80088ac:	681a      	ldr	r2, [r3, #0]
 80088ae:	4b0f      	ldr	r3, [pc, #60]	; (80088ec <prvAddCurrentTaskToDelayedList+0x94>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	3304      	adds	r3, #4
 80088b4:	4619      	mov	r1, r3
 80088b6:	4610      	mov	r0, r2
 80088b8:	f7fe fbab 	bl	8007012 <vListInsert>
}
 80088bc:	e010      	b.n	80088e0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80088be:	4b0e      	ldr	r3, [pc, #56]	; (80088f8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80088c0:	681a      	ldr	r2, [r3, #0]
 80088c2:	4b0a      	ldr	r3, [pc, #40]	; (80088ec <prvAddCurrentTaskToDelayedList+0x94>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	3304      	adds	r3, #4
 80088c8:	4619      	mov	r1, r3
 80088ca:	4610      	mov	r0, r2
 80088cc:	f7fe fba1 	bl	8007012 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80088d0:	4b0a      	ldr	r3, [pc, #40]	; (80088fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	68ba      	ldr	r2, [r7, #8]
 80088d6:	429a      	cmp	r2, r3
 80088d8:	d202      	bcs.n	80088e0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80088da:	4a08      	ldr	r2, [pc, #32]	; (80088fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	6013      	str	r3, [r2, #0]
}
 80088e0:	bf00      	nop
 80088e2:	3710      	adds	r7, #16
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}
 80088e8:	20000e74 	.word	0x20000e74
 80088ec:	2000099c 	.word	0x2000099c
 80088f0:	20000e5c 	.word	0x20000e5c
 80088f4:	20000e2c 	.word	0x20000e2c
 80088f8:	20000e28 	.word	0x20000e28
 80088fc:	20000e90 	.word	0x20000e90

08008900 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b08a      	sub	sp, #40	; 0x28
 8008904:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008906:	2300      	movs	r3, #0
 8008908:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800890a:	f000 fb07 	bl	8008f1c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800890e:	4b1c      	ldr	r3, [pc, #112]	; (8008980 <xTimerCreateTimerTask+0x80>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d021      	beq.n	800895a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008916:	2300      	movs	r3, #0
 8008918:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800891a:	2300      	movs	r3, #0
 800891c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800891e:	1d3a      	adds	r2, r7, #4
 8008920:	f107 0108 	add.w	r1, r7, #8
 8008924:	f107 030c 	add.w	r3, r7, #12
 8008928:	4618      	mov	r0, r3
 800892a:	f7fe fb07 	bl	8006f3c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800892e:	6879      	ldr	r1, [r7, #4]
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	68fa      	ldr	r2, [r7, #12]
 8008934:	9202      	str	r2, [sp, #8]
 8008936:	9301      	str	r3, [sp, #4]
 8008938:	2302      	movs	r3, #2
 800893a:	9300      	str	r3, [sp, #0]
 800893c:	2300      	movs	r3, #0
 800893e:	460a      	mov	r2, r1
 8008940:	4910      	ldr	r1, [pc, #64]	; (8008984 <xTimerCreateTimerTask+0x84>)
 8008942:	4811      	ldr	r0, [pc, #68]	; (8008988 <xTimerCreateTimerTask+0x88>)
 8008944:	f7ff f8b4 	bl	8007ab0 <xTaskCreateStatic>
 8008948:	4603      	mov	r3, r0
 800894a:	4a10      	ldr	r2, [pc, #64]	; (800898c <xTimerCreateTimerTask+0x8c>)
 800894c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800894e:	4b0f      	ldr	r3, [pc, #60]	; (800898c <xTimerCreateTimerTask+0x8c>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d001      	beq.n	800895a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008956:	2301      	movs	r3, #1
 8008958:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d10a      	bne.n	8008976 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008964:	f383 8811 	msr	BASEPRI, r3
 8008968:	f3bf 8f6f 	isb	sy
 800896c:	f3bf 8f4f 	dsb	sy
 8008970:	613b      	str	r3, [r7, #16]
}
 8008972:	bf00      	nop
 8008974:	e7fe      	b.n	8008974 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008976:	697b      	ldr	r3, [r7, #20]
}
 8008978:	4618      	mov	r0, r3
 800897a:	3718      	adds	r7, #24
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}
 8008980:	20000ecc 	.word	0x20000ecc
 8008984:	0800a7cc 	.word	0x0800a7cc
 8008988:	08008ac5 	.word	0x08008ac5
 800898c:	20000ed0 	.word	0x20000ed0

08008990 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b08a      	sub	sp, #40	; 0x28
 8008994:	af00      	add	r7, sp, #0
 8008996:	60f8      	str	r0, [r7, #12]
 8008998:	60b9      	str	r1, [r7, #8]
 800899a:	607a      	str	r2, [r7, #4]
 800899c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800899e:	2300      	movs	r3, #0
 80089a0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d10a      	bne.n	80089be <xTimerGenericCommand+0x2e>
	__asm volatile
 80089a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ac:	f383 8811 	msr	BASEPRI, r3
 80089b0:	f3bf 8f6f 	isb	sy
 80089b4:	f3bf 8f4f 	dsb	sy
 80089b8:	623b      	str	r3, [r7, #32]
}
 80089ba:	bf00      	nop
 80089bc:	e7fe      	b.n	80089bc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80089be:	4b1a      	ldr	r3, [pc, #104]	; (8008a28 <xTimerGenericCommand+0x98>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d02a      	beq.n	8008a1c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	2b05      	cmp	r3, #5
 80089d6:	dc18      	bgt.n	8008a0a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80089d8:	f7ff feb2 	bl	8008740 <xTaskGetSchedulerState>
 80089dc:	4603      	mov	r3, r0
 80089de:	2b02      	cmp	r3, #2
 80089e0:	d109      	bne.n	80089f6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80089e2:	4b11      	ldr	r3, [pc, #68]	; (8008a28 <xTimerGenericCommand+0x98>)
 80089e4:	6818      	ldr	r0, [r3, #0]
 80089e6:	f107 0110 	add.w	r1, r7, #16
 80089ea:	2300      	movs	r3, #0
 80089ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089ee:	f7fe fc77 	bl	80072e0 <xQueueGenericSend>
 80089f2:	6278      	str	r0, [r7, #36]	; 0x24
 80089f4:	e012      	b.n	8008a1c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80089f6:	4b0c      	ldr	r3, [pc, #48]	; (8008a28 <xTimerGenericCommand+0x98>)
 80089f8:	6818      	ldr	r0, [r3, #0]
 80089fa:	f107 0110 	add.w	r1, r7, #16
 80089fe:	2300      	movs	r3, #0
 8008a00:	2200      	movs	r2, #0
 8008a02:	f7fe fc6d 	bl	80072e0 <xQueueGenericSend>
 8008a06:	6278      	str	r0, [r7, #36]	; 0x24
 8008a08:	e008      	b.n	8008a1c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008a0a:	4b07      	ldr	r3, [pc, #28]	; (8008a28 <xTimerGenericCommand+0x98>)
 8008a0c:	6818      	ldr	r0, [r3, #0]
 8008a0e:	f107 0110 	add.w	r1, r7, #16
 8008a12:	2300      	movs	r3, #0
 8008a14:	683a      	ldr	r2, [r7, #0]
 8008a16:	f7fe fd61 	bl	80074dc <xQueueGenericSendFromISR>
 8008a1a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	3728      	adds	r7, #40	; 0x28
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}
 8008a26:	bf00      	nop
 8008a28:	20000ecc 	.word	0x20000ecc

08008a2c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b088      	sub	sp, #32
 8008a30:	af02      	add	r7, sp, #8
 8008a32:	6078      	str	r0, [r7, #4]
 8008a34:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a36:	4b22      	ldr	r3, [pc, #136]	; (8008ac0 <prvProcessExpiredTimer+0x94>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	68db      	ldr	r3, [r3, #12]
 8008a3c:	68db      	ldr	r3, [r3, #12]
 8008a3e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	3304      	adds	r3, #4
 8008a44:	4618      	mov	r0, r3
 8008a46:	f7fe fb1d 	bl	8007084 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a50:	f003 0304 	and.w	r3, r3, #4
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d022      	beq.n	8008a9e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008a58:	697b      	ldr	r3, [r7, #20]
 8008a5a:	699a      	ldr	r2, [r3, #24]
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	18d1      	adds	r1, r2, r3
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	683a      	ldr	r2, [r7, #0]
 8008a64:	6978      	ldr	r0, [r7, #20]
 8008a66:	f000 f8d1 	bl	8008c0c <prvInsertTimerInActiveList>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d01f      	beq.n	8008ab0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008a70:	2300      	movs	r3, #0
 8008a72:	9300      	str	r3, [sp, #0]
 8008a74:	2300      	movs	r3, #0
 8008a76:	687a      	ldr	r2, [r7, #4]
 8008a78:	2100      	movs	r1, #0
 8008a7a:	6978      	ldr	r0, [r7, #20]
 8008a7c:	f7ff ff88 	bl	8008990 <xTimerGenericCommand>
 8008a80:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d113      	bne.n	8008ab0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a8c:	f383 8811 	msr	BASEPRI, r3
 8008a90:	f3bf 8f6f 	isb	sy
 8008a94:	f3bf 8f4f 	dsb	sy
 8008a98:	60fb      	str	r3, [r7, #12]
}
 8008a9a:	bf00      	nop
 8008a9c:	e7fe      	b.n	8008a9c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008a9e:	697b      	ldr	r3, [r7, #20]
 8008aa0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008aa4:	f023 0301 	bic.w	r3, r3, #1
 8008aa8:	b2da      	uxtb	r2, r3
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	6a1b      	ldr	r3, [r3, #32]
 8008ab4:	6978      	ldr	r0, [r7, #20]
 8008ab6:	4798      	blx	r3
}
 8008ab8:	bf00      	nop
 8008aba:	3718      	adds	r7, #24
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bd80      	pop	{r7, pc}
 8008ac0:	20000ec4 	.word	0x20000ec4

08008ac4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b084      	sub	sp, #16
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008acc:	f107 0308 	add.w	r3, r7, #8
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f000 f857 	bl	8008b84 <prvGetNextExpireTime>
 8008ad6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	4619      	mov	r1, r3
 8008adc:	68f8      	ldr	r0, [r7, #12]
 8008ade:	f000 f803 	bl	8008ae8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008ae2:	f000 f8d5 	bl	8008c90 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008ae6:	e7f1      	b.n	8008acc <prvTimerTask+0x8>

08008ae8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b084      	sub	sp, #16
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
 8008af0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008af2:	f7ff fa39 	bl	8007f68 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008af6:	f107 0308 	add.w	r3, r7, #8
 8008afa:	4618      	mov	r0, r3
 8008afc:	f000 f866 	bl	8008bcc <prvSampleTimeNow>
 8008b00:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d130      	bne.n	8008b6a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d10a      	bne.n	8008b24 <prvProcessTimerOrBlockTask+0x3c>
 8008b0e:	687a      	ldr	r2, [r7, #4]
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	429a      	cmp	r2, r3
 8008b14:	d806      	bhi.n	8008b24 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008b16:	f7ff fa35 	bl	8007f84 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008b1a:	68f9      	ldr	r1, [r7, #12]
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f7ff ff85 	bl	8008a2c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008b22:	e024      	b.n	8008b6e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d008      	beq.n	8008b3c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008b2a:	4b13      	ldr	r3, [pc, #76]	; (8008b78 <prvProcessTimerOrBlockTask+0x90>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d101      	bne.n	8008b38 <prvProcessTimerOrBlockTask+0x50>
 8008b34:	2301      	movs	r3, #1
 8008b36:	e000      	b.n	8008b3a <prvProcessTimerOrBlockTask+0x52>
 8008b38:	2300      	movs	r3, #0
 8008b3a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008b3c:	4b0f      	ldr	r3, [pc, #60]	; (8008b7c <prvProcessTimerOrBlockTask+0x94>)
 8008b3e:	6818      	ldr	r0, [r3, #0]
 8008b40:	687a      	ldr	r2, [r7, #4]
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	1ad3      	subs	r3, r2, r3
 8008b46:	683a      	ldr	r2, [r7, #0]
 8008b48:	4619      	mov	r1, r3
 8008b4a:	f7fe ff7d 	bl	8007a48 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008b4e:	f7ff fa19 	bl	8007f84 <xTaskResumeAll>
 8008b52:	4603      	mov	r3, r0
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d10a      	bne.n	8008b6e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008b58:	4b09      	ldr	r3, [pc, #36]	; (8008b80 <prvProcessTimerOrBlockTask+0x98>)
 8008b5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b5e:	601a      	str	r2, [r3, #0]
 8008b60:	f3bf 8f4f 	dsb	sy
 8008b64:	f3bf 8f6f 	isb	sy
}
 8008b68:	e001      	b.n	8008b6e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008b6a:	f7ff fa0b 	bl	8007f84 <xTaskResumeAll>
}
 8008b6e:	bf00      	nop
 8008b70:	3710      	adds	r7, #16
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}
 8008b76:	bf00      	nop
 8008b78:	20000ec8 	.word	0x20000ec8
 8008b7c:	20000ecc 	.word	0x20000ecc
 8008b80:	e000ed04 	.word	0xe000ed04

08008b84 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008b84:	b480      	push	{r7}
 8008b86:	b085      	sub	sp, #20
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008b8c:	4b0e      	ldr	r3, [pc, #56]	; (8008bc8 <prvGetNextExpireTime+0x44>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d101      	bne.n	8008b9a <prvGetNextExpireTime+0x16>
 8008b96:	2201      	movs	r2, #1
 8008b98:	e000      	b.n	8008b9c <prvGetNextExpireTime+0x18>
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d105      	bne.n	8008bb4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008ba8:	4b07      	ldr	r3, [pc, #28]	; (8008bc8 <prvGetNextExpireTime+0x44>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	68db      	ldr	r3, [r3, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	60fb      	str	r3, [r7, #12]
 8008bb2:	e001      	b.n	8008bb8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3714      	adds	r7, #20
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc4:	4770      	bx	lr
 8008bc6:	bf00      	nop
 8008bc8:	20000ec4 	.word	0x20000ec4

08008bcc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b084      	sub	sp, #16
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008bd4:	f7ff fa74 	bl	80080c0 <xTaskGetTickCount>
 8008bd8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008bda:	4b0b      	ldr	r3, [pc, #44]	; (8008c08 <prvSampleTimeNow+0x3c>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	68fa      	ldr	r2, [r7, #12]
 8008be0:	429a      	cmp	r2, r3
 8008be2:	d205      	bcs.n	8008bf0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008be4:	f000 f936 	bl	8008e54 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2201      	movs	r2, #1
 8008bec:	601a      	str	r2, [r3, #0]
 8008bee:	e002      	b.n	8008bf6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008bf6:	4a04      	ldr	r2, [pc, #16]	; (8008c08 <prvSampleTimeNow+0x3c>)
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	3710      	adds	r7, #16
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}
 8008c06:	bf00      	nop
 8008c08:	20000ed4 	.word	0x20000ed4

08008c0c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b086      	sub	sp, #24
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	60f8      	str	r0, [r7, #12]
 8008c14:	60b9      	str	r1, [r7, #8]
 8008c16:	607a      	str	r2, [r7, #4]
 8008c18:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	68ba      	ldr	r2, [r7, #8]
 8008c22:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	68fa      	ldr	r2, [r7, #12]
 8008c28:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008c2a:	68ba      	ldr	r2, [r7, #8]
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	429a      	cmp	r2, r3
 8008c30:	d812      	bhi.n	8008c58 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c32:	687a      	ldr	r2, [r7, #4]
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	1ad2      	subs	r2, r2, r3
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	699b      	ldr	r3, [r3, #24]
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	d302      	bcc.n	8008c46 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008c40:	2301      	movs	r3, #1
 8008c42:	617b      	str	r3, [r7, #20]
 8008c44:	e01b      	b.n	8008c7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008c46:	4b10      	ldr	r3, [pc, #64]	; (8008c88 <prvInsertTimerInActiveList+0x7c>)
 8008c48:	681a      	ldr	r2, [r3, #0]
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	3304      	adds	r3, #4
 8008c4e:	4619      	mov	r1, r3
 8008c50:	4610      	mov	r0, r2
 8008c52:	f7fe f9de 	bl	8007012 <vListInsert>
 8008c56:	e012      	b.n	8008c7e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008c58:	687a      	ldr	r2, [r7, #4]
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	429a      	cmp	r2, r3
 8008c5e:	d206      	bcs.n	8008c6e <prvInsertTimerInActiveList+0x62>
 8008c60:	68ba      	ldr	r2, [r7, #8]
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	429a      	cmp	r2, r3
 8008c66:	d302      	bcc.n	8008c6e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008c68:	2301      	movs	r3, #1
 8008c6a:	617b      	str	r3, [r7, #20]
 8008c6c:	e007      	b.n	8008c7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008c6e:	4b07      	ldr	r3, [pc, #28]	; (8008c8c <prvInsertTimerInActiveList+0x80>)
 8008c70:	681a      	ldr	r2, [r3, #0]
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	3304      	adds	r3, #4
 8008c76:	4619      	mov	r1, r3
 8008c78:	4610      	mov	r0, r2
 8008c7a:	f7fe f9ca 	bl	8007012 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008c7e:	697b      	ldr	r3, [r7, #20]
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	3718      	adds	r7, #24
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}
 8008c88:	20000ec8 	.word	0x20000ec8
 8008c8c:	20000ec4 	.word	0x20000ec4

08008c90 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b08e      	sub	sp, #56	; 0x38
 8008c94:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008c96:	e0ca      	b.n	8008e2e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	da18      	bge.n	8008cd0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008c9e:	1d3b      	adds	r3, r7, #4
 8008ca0:	3304      	adds	r3, #4
 8008ca2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d10a      	bne.n	8008cc0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cae:	f383 8811 	msr	BASEPRI, r3
 8008cb2:	f3bf 8f6f 	isb	sy
 8008cb6:	f3bf 8f4f 	dsb	sy
 8008cba:	61fb      	str	r3, [r7, #28]
}
 8008cbc:	bf00      	nop
 8008cbe:	e7fe      	b.n	8008cbe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008cc6:	6850      	ldr	r0, [r2, #4]
 8008cc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008cca:	6892      	ldr	r2, [r2, #8]
 8008ccc:	4611      	mov	r1, r2
 8008cce:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	f2c0 80aa 	blt.w	8008e2c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cde:	695b      	ldr	r3, [r3, #20]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d004      	beq.n	8008cee <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ce6:	3304      	adds	r3, #4
 8008ce8:	4618      	mov	r0, r3
 8008cea:	f7fe f9cb 	bl	8007084 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008cee:	463b      	mov	r3, r7
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f7ff ff6b 	bl	8008bcc <prvSampleTimeNow>
 8008cf6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2b09      	cmp	r3, #9
 8008cfc:	f200 8097 	bhi.w	8008e2e <prvProcessReceivedCommands+0x19e>
 8008d00:	a201      	add	r2, pc, #4	; (adr r2, 8008d08 <prvProcessReceivedCommands+0x78>)
 8008d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d06:	bf00      	nop
 8008d08:	08008d31 	.word	0x08008d31
 8008d0c:	08008d31 	.word	0x08008d31
 8008d10:	08008d31 	.word	0x08008d31
 8008d14:	08008da5 	.word	0x08008da5
 8008d18:	08008db9 	.word	0x08008db9
 8008d1c:	08008e03 	.word	0x08008e03
 8008d20:	08008d31 	.word	0x08008d31
 8008d24:	08008d31 	.word	0x08008d31
 8008d28:	08008da5 	.word	0x08008da5
 8008d2c:	08008db9 	.word	0x08008db9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d36:	f043 0301 	orr.w	r3, r3, #1
 8008d3a:	b2da      	uxtb	r2, r3
 8008d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008d42:	68ba      	ldr	r2, [r7, #8]
 8008d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d46:	699b      	ldr	r3, [r3, #24]
 8008d48:	18d1      	adds	r1, r2, r3
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d50:	f7ff ff5c 	bl	8008c0c <prvInsertTimerInActiveList>
 8008d54:	4603      	mov	r3, r0
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d069      	beq.n	8008e2e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d5c:	6a1b      	ldr	r3, [r3, #32]
 8008d5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d60:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d68:	f003 0304 	and.w	r3, r3, #4
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d05e      	beq.n	8008e2e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008d70:	68ba      	ldr	r2, [r7, #8]
 8008d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d74:	699b      	ldr	r3, [r3, #24]
 8008d76:	441a      	add	r2, r3
 8008d78:	2300      	movs	r3, #0
 8008d7a:	9300      	str	r3, [sp, #0]
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	2100      	movs	r1, #0
 8008d80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d82:	f7ff fe05 	bl	8008990 <xTimerGenericCommand>
 8008d86:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008d88:	6a3b      	ldr	r3, [r7, #32]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d14f      	bne.n	8008e2e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d92:	f383 8811 	msr	BASEPRI, r3
 8008d96:	f3bf 8f6f 	isb	sy
 8008d9a:	f3bf 8f4f 	dsb	sy
 8008d9e:	61bb      	str	r3, [r7, #24]
}
 8008da0:	bf00      	nop
 8008da2:	e7fe      	b.n	8008da2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008da6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008daa:	f023 0301 	bic.w	r3, r3, #1
 8008dae:	b2da      	uxtb	r2, r3
 8008db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008db2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008db6:	e03a      	b.n	8008e2e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008dbe:	f043 0301 	orr.w	r3, r3, #1
 8008dc2:	b2da      	uxtb	r2, r3
 8008dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dc6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008dca:	68ba      	ldr	r2, [r7, #8]
 8008dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dce:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dd2:	699b      	ldr	r3, [r3, #24]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d10a      	bne.n	8008dee <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ddc:	f383 8811 	msr	BASEPRI, r3
 8008de0:	f3bf 8f6f 	isb	sy
 8008de4:	f3bf 8f4f 	dsb	sy
 8008de8:	617b      	str	r3, [r7, #20]
}
 8008dea:	bf00      	nop
 8008dec:	e7fe      	b.n	8008dec <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008df0:	699a      	ldr	r2, [r3, #24]
 8008df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df4:	18d1      	adds	r1, r2, r3
 8008df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dfa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008dfc:	f7ff ff06 	bl	8008c0c <prvInsertTimerInActiveList>
					break;
 8008e00:	e015      	b.n	8008e2e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008e08:	f003 0302 	and.w	r3, r3, #2
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d103      	bne.n	8008e18 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008e10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e12:	f000 fbdd 	bl	80095d0 <vPortFree>
 8008e16:	e00a      	b.n	8008e2e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008e1e:	f023 0301 	bic.w	r3, r3, #1
 8008e22:	b2da      	uxtb	r2, r3
 8008e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008e2a:	e000      	b.n	8008e2e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008e2c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008e2e:	4b08      	ldr	r3, [pc, #32]	; (8008e50 <prvProcessReceivedCommands+0x1c0>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	1d39      	adds	r1, r7, #4
 8008e34:	2200      	movs	r2, #0
 8008e36:	4618      	mov	r0, r3
 8008e38:	f7fe fbec 	bl	8007614 <xQueueReceive>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	f47f af2a 	bne.w	8008c98 <prvProcessReceivedCommands+0x8>
	}
}
 8008e44:	bf00      	nop
 8008e46:	bf00      	nop
 8008e48:	3730      	adds	r7, #48	; 0x30
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}
 8008e4e:	bf00      	nop
 8008e50:	20000ecc 	.word	0x20000ecc

08008e54 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b088      	sub	sp, #32
 8008e58:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008e5a:	e048      	b.n	8008eee <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008e5c:	4b2d      	ldr	r3, [pc, #180]	; (8008f14 <prvSwitchTimerLists+0xc0>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	68db      	ldr	r3, [r3, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e66:	4b2b      	ldr	r3, [pc, #172]	; (8008f14 <prvSwitchTimerLists+0xc0>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	68db      	ldr	r3, [r3, #12]
 8008e6c:	68db      	ldr	r3, [r3, #12]
 8008e6e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	3304      	adds	r3, #4
 8008e74:	4618      	mov	r0, r3
 8008e76:	f7fe f905 	bl	8007084 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	6a1b      	ldr	r3, [r3, #32]
 8008e7e:	68f8      	ldr	r0, [r7, #12]
 8008e80:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008e88:	f003 0304 	and.w	r3, r3, #4
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d02e      	beq.n	8008eee <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	699b      	ldr	r3, [r3, #24]
 8008e94:	693a      	ldr	r2, [r7, #16]
 8008e96:	4413      	add	r3, r2
 8008e98:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008e9a:	68ba      	ldr	r2, [r7, #8]
 8008e9c:	693b      	ldr	r3, [r7, #16]
 8008e9e:	429a      	cmp	r2, r3
 8008ea0:	d90e      	bls.n	8008ec0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	68ba      	ldr	r2, [r7, #8]
 8008ea6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	68fa      	ldr	r2, [r7, #12]
 8008eac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008eae:	4b19      	ldr	r3, [pc, #100]	; (8008f14 <prvSwitchTimerLists+0xc0>)
 8008eb0:	681a      	ldr	r2, [r3, #0]
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	3304      	adds	r3, #4
 8008eb6:	4619      	mov	r1, r3
 8008eb8:	4610      	mov	r0, r2
 8008eba:	f7fe f8aa 	bl	8007012 <vListInsert>
 8008ebe:	e016      	b.n	8008eee <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	9300      	str	r3, [sp, #0]
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	693a      	ldr	r2, [r7, #16]
 8008ec8:	2100      	movs	r1, #0
 8008eca:	68f8      	ldr	r0, [r7, #12]
 8008ecc:	f7ff fd60 	bl	8008990 <xTimerGenericCommand>
 8008ed0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d10a      	bne.n	8008eee <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008edc:	f383 8811 	msr	BASEPRI, r3
 8008ee0:	f3bf 8f6f 	isb	sy
 8008ee4:	f3bf 8f4f 	dsb	sy
 8008ee8:	603b      	str	r3, [r7, #0]
}
 8008eea:	bf00      	nop
 8008eec:	e7fe      	b.n	8008eec <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008eee:	4b09      	ldr	r3, [pc, #36]	; (8008f14 <prvSwitchTimerLists+0xc0>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d1b1      	bne.n	8008e5c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008ef8:	4b06      	ldr	r3, [pc, #24]	; (8008f14 <prvSwitchTimerLists+0xc0>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008efe:	4b06      	ldr	r3, [pc, #24]	; (8008f18 <prvSwitchTimerLists+0xc4>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	4a04      	ldr	r2, [pc, #16]	; (8008f14 <prvSwitchTimerLists+0xc0>)
 8008f04:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008f06:	4a04      	ldr	r2, [pc, #16]	; (8008f18 <prvSwitchTimerLists+0xc4>)
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	6013      	str	r3, [r2, #0]
}
 8008f0c:	bf00      	nop
 8008f0e:	3718      	adds	r7, #24
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}
 8008f14:	20000ec4 	.word	0x20000ec4
 8008f18:	20000ec8 	.word	0x20000ec8

08008f1c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b082      	sub	sp, #8
 8008f20:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008f22:	f000 f967 	bl	80091f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008f26:	4b15      	ldr	r3, [pc, #84]	; (8008f7c <prvCheckForValidListAndQueue+0x60>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d120      	bne.n	8008f70 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008f2e:	4814      	ldr	r0, [pc, #80]	; (8008f80 <prvCheckForValidListAndQueue+0x64>)
 8008f30:	f7fe f81e 	bl	8006f70 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008f34:	4813      	ldr	r0, [pc, #76]	; (8008f84 <prvCheckForValidListAndQueue+0x68>)
 8008f36:	f7fe f81b 	bl	8006f70 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008f3a:	4b13      	ldr	r3, [pc, #76]	; (8008f88 <prvCheckForValidListAndQueue+0x6c>)
 8008f3c:	4a10      	ldr	r2, [pc, #64]	; (8008f80 <prvCheckForValidListAndQueue+0x64>)
 8008f3e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008f40:	4b12      	ldr	r3, [pc, #72]	; (8008f8c <prvCheckForValidListAndQueue+0x70>)
 8008f42:	4a10      	ldr	r2, [pc, #64]	; (8008f84 <prvCheckForValidListAndQueue+0x68>)
 8008f44:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008f46:	2300      	movs	r3, #0
 8008f48:	9300      	str	r3, [sp, #0]
 8008f4a:	4b11      	ldr	r3, [pc, #68]	; (8008f90 <prvCheckForValidListAndQueue+0x74>)
 8008f4c:	4a11      	ldr	r2, [pc, #68]	; (8008f94 <prvCheckForValidListAndQueue+0x78>)
 8008f4e:	2110      	movs	r1, #16
 8008f50:	200a      	movs	r0, #10
 8008f52:	f7fe f929 	bl	80071a8 <xQueueGenericCreateStatic>
 8008f56:	4603      	mov	r3, r0
 8008f58:	4a08      	ldr	r2, [pc, #32]	; (8008f7c <prvCheckForValidListAndQueue+0x60>)
 8008f5a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008f5c:	4b07      	ldr	r3, [pc, #28]	; (8008f7c <prvCheckForValidListAndQueue+0x60>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d005      	beq.n	8008f70 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008f64:	4b05      	ldr	r3, [pc, #20]	; (8008f7c <prvCheckForValidListAndQueue+0x60>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	490b      	ldr	r1, [pc, #44]	; (8008f98 <prvCheckForValidListAndQueue+0x7c>)
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f7fe fd42 	bl	80079f4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008f70:	f000 f970 	bl	8009254 <vPortExitCritical>
}
 8008f74:	bf00      	nop
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}
 8008f7a:	bf00      	nop
 8008f7c:	20000ecc 	.word	0x20000ecc
 8008f80:	20000e9c 	.word	0x20000e9c
 8008f84:	20000eb0 	.word	0x20000eb0
 8008f88:	20000ec4 	.word	0x20000ec4
 8008f8c:	20000ec8 	.word	0x20000ec8
 8008f90:	20000f78 	.word	0x20000f78
 8008f94:	20000ed8 	.word	0x20000ed8
 8008f98:	0800a7d4 	.word	0x0800a7d4

08008f9c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b085      	sub	sp, #20
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	60f8      	str	r0, [r7, #12]
 8008fa4:	60b9      	str	r1, [r7, #8]
 8008fa6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	3b04      	subs	r3, #4
 8008fac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008fb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	3b04      	subs	r3, #4
 8008fba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	f023 0201 	bic.w	r2, r3, #1
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	3b04      	subs	r3, #4
 8008fca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008fcc:	4a0c      	ldr	r2, [pc, #48]	; (8009000 <pxPortInitialiseStack+0x64>)
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	3b14      	subs	r3, #20
 8008fd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008fd8:	687a      	ldr	r2, [r7, #4]
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	3b04      	subs	r3, #4
 8008fe2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	f06f 0202 	mvn.w	r2, #2
 8008fea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	3b20      	subs	r3, #32
 8008ff0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	3714      	adds	r7, #20
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffe:	4770      	bx	lr
 8009000:	08009005 	.word	0x08009005

08009004 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009004:	b480      	push	{r7}
 8009006:	b085      	sub	sp, #20
 8009008:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800900a:	2300      	movs	r3, #0
 800900c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800900e:	4b12      	ldr	r3, [pc, #72]	; (8009058 <prvTaskExitError+0x54>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009016:	d00a      	beq.n	800902e <prvTaskExitError+0x2a>
	__asm volatile
 8009018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800901c:	f383 8811 	msr	BASEPRI, r3
 8009020:	f3bf 8f6f 	isb	sy
 8009024:	f3bf 8f4f 	dsb	sy
 8009028:	60fb      	str	r3, [r7, #12]
}
 800902a:	bf00      	nop
 800902c:	e7fe      	b.n	800902c <prvTaskExitError+0x28>
	__asm volatile
 800902e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009032:	f383 8811 	msr	BASEPRI, r3
 8009036:	f3bf 8f6f 	isb	sy
 800903a:	f3bf 8f4f 	dsb	sy
 800903e:	60bb      	str	r3, [r7, #8]
}
 8009040:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009042:	bf00      	nop
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d0fc      	beq.n	8009044 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800904a:	bf00      	nop
 800904c:	bf00      	nop
 800904e:	3714      	adds	r7, #20
 8009050:	46bd      	mov	sp, r7
 8009052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009056:	4770      	bx	lr
 8009058:	20000098 	.word	0x20000098
 800905c:	00000000 	.word	0x00000000

08009060 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009060:	4b07      	ldr	r3, [pc, #28]	; (8009080 <pxCurrentTCBConst2>)
 8009062:	6819      	ldr	r1, [r3, #0]
 8009064:	6808      	ldr	r0, [r1, #0]
 8009066:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800906a:	f380 8809 	msr	PSP, r0
 800906e:	f3bf 8f6f 	isb	sy
 8009072:	f04f 0000 	mov.w	r0, #0
 8009076:	f380 8811 	msr	BASEPRI, r0
 800907a:	4770      	bx	lr
 800907c:	f3af 8000 	nop.w

08009080 <pxCurrentTCBConst2>:
 8009080:	2000099c 	.word	0x2000099c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009084:	bf00      	nop
 8009086:	bf00      	nop

08009088 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009088:	4808      	ldr	r0, [pc, #32]	; (80090ac <prvPortStartFirstTask+0x24>)
 800908a:	6800      	ldr	r0, [r0, #0]
 800908c:	6800      	ldr	r0, [r0, #0]
 800908e:	f380 8808 	msr	MSP, r0
 8009092:	f04f 0000 	mov.w	r0, #0
 8009096:	f380 8814 	msr	CONTROL, r0
 800909a:	b662      	cpsie	i
 800909c:	b661      	cpsie	f
 800909e:	f3bf 8f4f 	dsb	sy
 80090a2:	f3bf 8f6f 	isb	sy
 80090a6:	df00      	svc	0
 80090a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80090aa:	bf00      	nop
 80090ac:	e000ed08 	.word	0xe000ed08

080090b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b086      	sub	sp, #24
 80090b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80090b6:	4b46      	ldr	r3, [pc, #280]	; (80091d0 <xPortStartScheduler+0x120>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	4a46      	ldr	r2, [pc, #280]	; (80091d4 <xPortStartScheduler+0x124>)
 80090bc:	4293      	cmp	r3, r2
 80090be:	d10a      	bne.n	80090d6 <xPortStartScheduler+0x26>
	__asm volatile
 80090c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090c4:	f383 8811 	msr	BASEPRI, r3
 80090c8:	f3bf 8f6f 	isb	sy
 80090cc:	f3bf 8f4f 	dsb	sy
 80090d0:	613b      	str	r3, [r7, #16]
}
 80090d2:	bf00      	nop
 80090d4:	e7fe      	b.n	80090d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80090d6:	4b3e      	ldr	r3, [pc, #248]	; (80091d0 <xPortStartScheduler+0x120>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	4a3f      	ldr	r2, [pc, #252]	; (80091d8 <xPortStartScheduler+0x128>)
 80090dc:	4293      	cmp	r3, r2
 80090de:	d10a      	bne.n	80090f6 <xPortStartScheduler+0x46>
	__asm volatile
 80090e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090e4:	f383 8811 	msr	BASEPRI, r3
 80090e8:	f3bf 8f6f 	isb	sy
 80090ec:	f3bf 8f4f 	dsb	sy
 80090f0:	60fb      	str	r3, [r7, #12]
}
 80090f2:	bf00      	nop
 80090f4:	e7fe      	b.n	80090f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80090f6:	4b39      	ldr	r3, [pc, #228]	; (80091dc <xPortStartScheduler+0x12c>)
 80090f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	781b      	ldrb	r3, [r3, #0]
 80090fe:	b2db      	uxtb	r3, r3
 8009100:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009102:	697b      	ldr	r3, [r7, #20]
 8009104:	22ff      	movs	r2, #255	; 0xff
 8009106:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009108:	697b      	ldr	r3, [r7, #20]
 800910a:	781b      	ldrb	r3, [r3, #0]
 800910c:	b2db      	uxtb	r3, r3
 800910e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009110:	78fb      	ldrb	r3, [r7, #3]
 8009112:	b2db      	uxtb	r3, r3
 8009114:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009118:	b2da      	uxtb	r2, r3
 800911a:	4b31      	ldr	r3, [pc, #196]	; (80091e0 <xPortStartScheduler+0x130>)
 800911c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800911e:	4b31      	ldr	r3, [pc, #196]	; (80091e4 <xPortStartScheduler+0x134>)
 8009120:	2207      	movs	r2, #7
 8009122:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009124:	e009      	b.n	800913a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009126:	4b2f      	ldr	r3, [pc, #188]	; (80091e4 <xPortStartScheduler+0x134>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	3b01      	subs	r3, #1
 800912c:	4a2d      	ldr	r2, [pc, #180]	; (80091e4 <xPortStartScheduler+0x134>)
 800912e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009130:	78fb      	ldrb	r3, [r7, #3]
 8009132:	b2db      	uxtb	r3, r3
 8009134:	005b      	lsls	r3, r3, #1
 8009136:	b2db      	uxtb	r3, r3
 8009138:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800913a:	78fb      	ldrb	r3, [r7, #3]
 800913c:	b2db      	uxtb	r3, r3
 800913e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009142:	2b80      	cmp	r3, #128	; 0x80
 8009144:	d0ef      	beq.n	8009126 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009146:	4b27      	ldr	r3, [pc, #156]	; (80091e4 <xPortStartScheduler+0x134>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f1c3 0307 	rsb	r3, r3, #7
 800914e:	2b04      	cmp	r3, #4
 8009150:	d00a      	beq.n	8009168 <xPortStartScheduler+0xb8>
	__asm volatile
 8009152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009156:	f383 8811 	msr	BASEPRI, r3
 800915a:	f3bf 8f6f 	isb	sy
 800915e:	f3bf 8f4f 	dsb	sy
 8009162:	60bb      	str	r3, [r7, #8]
}
 8009164:	bf00      	nop
 8009166:	e7fe      	b.n	8009166 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009168:	4b1e      	ldr	r3, [pc, #120]	; (80091e4 <xPortStartScheduler+0x134>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	021b      	lsls	r3, r3, #8
 800916e:	4a1d      	ldr	r2, [pc, #116]	; (80091e4 <xPortStartScheduler+0x134>)
 8009170:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009172:	4b1c      	ldr	r3, [pc, #112]	; (80091e4 <xPortStartScheduler+0x134>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800917a:	4a1a      	ldr	r2, [pc, #104]	; (80091e4 <xPortStartScheduler+0x134>)
 800917c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	b2da      	uxtb	r2, r3
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009186:	4b18      	ldr	r3, [pc, #96]	; (80091e8 <xPortStartScheduler+0x138>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	4a17      	ldr	r2, [pc, #92]	; (80091e8 <xPortStartScheduler+0x138>)
 800918c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009190:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009192:	4b15      	ldr	r3, [pc, #84]	; (80091e8 <xPortStartScheduler+0x138>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	4a14      	ldr	r2, [pc, #80]	; (80091e8 <xPortStartScheduler+0x138>)
 8009198:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800919c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800919e:	f000 f8dd 	bl	800935c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80091a2:	4b12      	ldr	r3, [pc, #72]	; (80091ec <xPortStartScheduler+0x13c>)
 80091a4:	2200      	movs	r2, #0
 80091a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80091a8:	f000 f8fc 	bl	80093a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80091ac:	4b10      	ldr	r3, [pc, #64]	; (80091f0 <xPortStartScheduler+0x140>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	4a0f      	ldr	r2, [pc, #60]	; (80091f0 <xPortStartScheduler+0x140>)
 80091b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80091b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80091b8:	f7ff ff66 	bl	8009088 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80091bc:	f7ff f84a 	bl	8008254 <vTaskSwitchContext>
	prvTaskExitError();
 80091c0:	f7ff ff20 	bl	8009004 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80091c4:	2300      	movs	r3, #0
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	3718      	adds	r7, #24
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}
 80091ce:	bf00      	nop
 80091d0:	e000ed00 	.word	0xe000ed00
 80091d4:	410fc271 	.word	0x410fc271
 80091d8:	410fc270 	.word	0x410fc270
 80091dc:	e000e400 	.word	0xe000e400
 80091e0:	20000fc8 	.word	0x20000fc8
 80091e4:	20000fcc 	.word	0x20000fcc
 80091e8:	e000ed20 	.word	0xe000ed20
 80091ec:	20000098 	.word	0x20000098
 80091f0:	e000ef34 	.word	0xe000ef34

080091f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80091f4:	b480      	push	{r7}
 80091f6:	b083      	sub	sp, #12
 80091f8:	af00      	add	r7, sp, #0
	__asm volatile
 80091fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091fe:	f383 8811 	msr	BASEPRI, r3
 8009202:	f3bf 8f6f 	isb	sy
 8009206:	f3bf 8f4f 	dsb	sy
 800920a:	607b      	str	r3, [r7, #4]
}
 800920c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800920e:	4b0f      	ldr	r3, [pc, #60]	; (800924c <vPortEnterCritical+0x58>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	3301      	adds	r3, #1
 8009214:	4a0d      	ldr	r2, [pc, #52]	; (800924c <vPortEnterCritical+0x58>)
 8009216:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009218:	4b0c      	ldr	r3, [pc, #48]	; (800924c <vPortEnterCritical+0x58>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	2b01      	cmp	r3, #1
 800921e:	d10f      	bne.n	8009240 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009220:	4b0b      	ldr	r3, [pc, #44]	; (8009250 <vPortEnterCritical+0x5c>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	b2db      	uxtb	r3, r3
 8009226:	2b00      	cmp	r3, #0
 8009228:	d00a      	beq.n	8009240 <vPortEnterCritical+0x4c>
	__asm volatile
 800922a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800922e:	f383 8811 	msr	BASEPRI, r3
 8009232:	f3bf 8f6f 	isb	sy
 8009236:	f3bf 8f4f 	dsb	sy
 800923a:	603b      	str	r3, [r7, #0]
}
 800923c:	bf00      	nop
 800923e:	e7fe      	b.n	800923e <vPortEnterCritical+0x4a>
	}
}
 8009240:	bf00      	nop
 8009242:	370c      	adds	r7, #12
 8009244:	46bd      	mov	sp, r7
 8009246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924a:	4770      	bx	lr
 800924c:	20000098 	.word	0x20000098
 8009250:	e000ed04 	.word	0xe000ed04

08009254 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009254:	b480      	push	{r7}
 8009256:	b083      	sub	sp, #12
 8009258:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800925a:	4b12      	ldr	r3, [pc, #72]	; (80092a4 <vPortExitCritical+0x50>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d10a      	bne.n	8009278 <vPortExitCritical+0x24>
	__asm volatile
 8009262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009266:	f383 8811 	msr	BASEPRI, r3
 800926a:	f3bf 8f6f 	isb	sy
 800926e:	f3bf 8f4f 	dsb	sy
 8009272:	607b      	str	r3, [r7, #4]
}
 8009274:	bf00      	nop
 8009276:	e7fe      	b.n	8009276 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009278:	4b0a      	ldr	r3, [pc, #40]	; (80092a4 <vPortExitCritical+0x50>)
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	3b01      	subs	r3, #1
 800927e:	4a09      	ldr	r2, [pc, #36]	; (80092a4 <vPortExitCritical+0x50>)
 8009280:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009282:	4b08      	ldr	r3, [pc, #32]	; (80092a4 <vPortExitCritical+0x50>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d105      	bne.n	8009296 <vPortExitCritical+0x42>
 800928a:	2300      	movs	r3, #0
 800928c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	f383 8811 	msr	BASEPRI, r3
}
 8009294:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009296:	bf00      	nop
 8009298:	370c      	adds	r7, #12
 800929a:	46bd      	mov	sp, r7
 800929c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a0:	4770      	bx	lr
 80092a2:	bf00      	nop
 80092a4:	20000098 	.word	0x20000098
	...

080092b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80092b0:	f3ef 8009 	mrs	r0, PSP
 80092b4:	f3bf 8f6f 	isb	sy
 80092b8:	4b15      	ldr	r3, [pc, #84]	; (8009310 <pxCurrentTCBConst>)
 80092ba:	681a      	ldr	r2, [r3, #0]
 80092bc:	f01e 0f10 	tst.w	lr, #16
 80092c0:	bf08      	it	eq
 80092c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80092c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092ca:	6010      	str	r0, [r2, #0]
 80092cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80092d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80092d4:	f380 8811 	msr	BASEPRI, r0
 80092d8:	f3bf 8f4f 	dsb	sy
 80092dc:	f3bf 8f6f 	isb	sy
 80092e0:	f7fe ffb8 	bl	8008254 <vTaskSwitchContext>
 80092e4:	f04f 0000 	mov.w	r0, #0
 80092e8:	f380 8811 	msr	BASEPRI, r0
 80092ec:	bc09      	pop	{r0, r3}
 80092ee:	6819      	ldr	r1, [r3, #0]
 80092f0:	6808      	ldr	r0, [r1, #0]
 80092f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092f6:	f01e 0f10 	tst.w	lr, #16
 80092fa:	bf08      	it	eq
 80092fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009300:	f380 8809 	msr	PSP, r0
 8009304:	f3bf 8f6f 	isb	sy
 8009308:	4770      	bx	lr
 800930a:	bf00      	nop
 800930c:	f3af 8000 	nop.w

08009310 <pxCurrentTCBConst>:
 8009310:	2000099c 	.word	0x2000099c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009314:	bf00      	nop
 8009316:	bf00      	nop

08009318 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b082      	sub	sp, #8
 800931c:	af00      	add	r7, sp, #0
	__asm volatile
 800931e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009322:	f383 8811 	msr	BASEPRI, r3
 8009326:	f3bf 8f6f 	isb	sy
 800932a:	f3bf 8f4f 	dsb	sy
 800932e:	607b      	str	r3, [r7, #4]
}
 8009330:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009332:	f7fe fed5 	bl	80080e0 <xTaskIncrementTick>
 8009336:	4603      	mov	r3, r0
 8009338:	2b00      	cmp	r3, #0
 800933a:	d003      	beq.n	8009344 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800933c:	4b06      	ldr	r3, [pc, #24]	; (8009358 <xPortSysTickHandler+0x40>)
 800933e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009342:	601a      	str	r2, [r3, #0]
 8009344:	2300      	movs	r3, #0
 8009346:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	f383 8811 	msr	BASEPRI, r3
}
 800934e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009350:	bf00      	nop
 8009352:	3708      	adds	r7, #8
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}
 8009358:	e000ed04 	.word	0xe000ed04

0800935c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800935c:	b480      	push	{r7}
 800935e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009360:	4b0b      	ldr	r3, [pc, #44]	; (8009390 <vPortSetupTimerInterrupt+0x34>)
 8009362:	2200      	movs	r2, #0
 8009364:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009366:	4b0b      	ldr	r3, [pc, #44]	; (8009394 <vPortSetupTimerInterrupt+0x38>)
 8009368:	2200      	movs	r2, #0
 800936a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800936c:	4b0a      	ldr	r3, [pc, #40]	; (8009398 <vPortSetupTimerInterrupt+0x3c>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	4a0a      	ldr	r2, [pc, #40]	; (800939c <vPortSetupTimerInterrupt+0x40>)
 8009372:	fba2 2303 	umull	r2, r3, r2, r3
 8009376:	099b      	lsrs	r3, r3, #6
 8009378:	4a09      	ldr	r2, [pc, #36]	; (80093a0 <vPortSetupTimerInterrupt+0x44>)
 800937a:	3b01      	subs	r3, #1
 800937c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800937e:	4b04      	ldr	r3, [pc, #16]	; (8009390 <vPortSetupTimerInterrupt+0x34>)
 8009380:	2207      	movs	r2, #7
 8009382:	601a      	str	r2, [r3, #0]
}
 8009384:	bf00      	nop
 8009386:	46bd      	mov	sp, r7
 8009388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938c:	4770      	bx	lr
 800938e:	bf00      	nop
 8009390:	e000e010 	.word	0xe000e010
 8009394:	e000e018 	.word	0xe000e018
 8009398:	20000000 	.word	0x20000000
 800939c:	10624dd3 	.word	0x10624dd3
 80093a0:	e000e014 	.word	0xe000e014

080093a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80093a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80093b4 <vPortEnableVFP+0x10>
 80093a8:	6801      	ldr	r1, [r0, #0]
 80093aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80093ae:	6001      	str	r1, [r0, #0]
 80093b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80093b2:	bf00      	nop
 80093b4:	e000ed88 	.word	0xe000ed88

080093b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80093b8:	b480      	push	{r7}
 80093ba:	b085      	sub	sp, #20
 80093bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80093be:	f3ef 8305 	mrs	r3, IPSR
 80093c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	2b0f      	cmp	r3, #15
 80093c8:	d914      	bls.n	80093f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80093ca:	4a17      	ldr	r2, [pc, #92]	; (8009428 <vPortValidateInterruptPriority+0x70>)
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	4413      	add	r3, r2
 80093d0:	781b      	ldrb	r3, [r3, #0]
 80093d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80093d4:	4b15      	ldr	r3, [pc, #84]	; (800942c <vPortValidateInterruptPriority+0x74>)
 80093d6:	781b      	ldrb	r3, [r3, #0]
 80093d8:	7afa      	ldrb	r2, [r7, #11]
 80093da:	429a      	cmp	r2, r3
 80093dc:	d20a      	bcs.n	80093f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80093de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093e2:	f383 8811 	msr	BASEPRI, r3
 80093e6:	f3bf 8f6f 	isb	sy
 80093ea:	f3bf 8f4f 	dsb	sy
 80093ee:	607b      	str	r3, [r7, #4]
}
 80093f0:	bf00      	nop
 80093f2:	e7fe      	b.n	80093f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80093f4:	4b0e      	ldr	r3, [pc, #56]	; (8009430 <vPortValidateInterruptPriority+0x78>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80093fc:	4b0d      	ldr	r3, [pc, #52]	; (8009434 <vPortValidateInterruptPriority+0x7c>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	429a      	cmp	r2, r3
 8009402:	d90a      	bls.n	800941a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009408:	f383 8811 	msr	BASEPRI, r3
 800940c:	f3bf 8f6f 	isb	sy
 8009410:	f3bf 8f4f 	dsb	sy
 8009414:	603b      	str	r3, [r7, #0]
}
 8009416:	bf00      	nop
 8009418:	e7fe      	b.n	8009418 <vPortValidateInterruptPriority+0x60>
	}
 800941a:	bf00      	nop
 800941c:	3714      	adds	r7, #20
 800941e:	46bd      	mov	sp, r7
 8009420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009424:	4770      	bx	lr
 8009426:	bf00      	nop
 8009428:	e000e3f0 	.word	0xe000e3f0
 800942c:	20000fc8 	.word	0x20000fc8
 8009430:	e000ed0c 	.word	0xe000ed0c
 8009434:	20000fcc 	.word	0x20000fcc

08009438 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b08a      	sub	sp, #40	; 0x28
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009440:	2300      	movs	r3, #0
 8009442:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009444:	f7fe fd90 	bl	8007f68 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009448:	4b5b      	ldr	r3, [pc, #364]	; (80095b8 <pvPortMalloc+0x180>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d101      	bne.n	8009454 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009450:	f000 f920 	bl	8009694 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009454:	4b59      	ldr	r3, [pc, #356]	; (80095bc <pvPortMalloc+0x184>)
 8009456:	681a      	ldr	r2, [r3, #0]
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	4013      	ands	r3, r2
 800945c:	2b00      	cmp	r3, #0
 800945e:	f040 8093 	bne.w	8009588 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d01d      	beq.n	80094a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009468:	2208      	movs	r2, #8
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	4413      	add	r3, r2
 800946e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f003 0307 	and.w	r3, r3, #7
 8009476:	2b00      	cmp	r3, #0
 8009478:	d014      	beq.n	80094a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f023 0307 	bic.w	r3, r3, #7
 8009480:	3308      	adds	r3, #8
 8009482:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f003 0307 	and.w	r3, r3, #7
 800948a:	2b00      	cmp	r3, #0
 800948c:	d00a      	beq.n	80094a4 <pvPortMalloc+0x6c>
	__asm volatile
 800948e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009492:	f383 8811 	msr	BASEPRI, r3
 8009496:	f3bf 8f6f 	isb	sy
 800949a:	f3bf 8f4f 	dsb	sy
 800949e:	617b      	str	r3, [r7, #20]
}
 80094a0:	bf00      	nop
 80094a2:	e7fe      	b.n	80094a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d06e      	beq.n	8009588 <pvPortMalloc+0x150>
 80094aa:	4b45      	ldr	r3, [pc, #276]	; (80095c0 <pvPortMalloc+0x188>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	687a      	ldr	r2, [r7, #4]
 80094b0:	429a      	cmp	r2, r3
 80094b2:	d869      	bhi.n	8009588 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80094b4:	4b43      	ldr	r3, [pc, #268]	; (80095c4 <pvPortMalloc+0x18c>)
 80094b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80094b8:	4b42      	ldr	r3, [pc, #264]	; (80095c4 <pvPortMalloc+0x18c>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80094be:	e004      	b.n	80094ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80094c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80094c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80094ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094cc:	685b      	ldr	r3, [r3, #4]
 80094ce:	687a      	ldr	r2, [r7, #4]
 80094d0:	429a      	cmp	r2, r3
 80094d2:	d903      	bls.n	80094dc <pvPortMalloc+0xa4>
 80094d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d1f1      	bne.n	80094c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80094dc:	4b36      	ldr	r3, [pc, #216]	; (80095b8 <pvPortMalloc+0x180>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094e2:	429a      	cmp	r2, r3
 80094e4:	d050      	beq.n	8009588 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80094e6:	6a3b      	ldr	r3, [r7, #32]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	2208      	movs	r2, #8
 80094ec:	4413      	add	r3, r2
 80094ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80094f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094f2:	681a      	ldr	r2, [r3, #0]
 80094f4:	6a3b      	ldr	r3, [r7, #32]
 80094f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80094f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094fa:	685a      	ldr	r2, [r3, #4]
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	1ad2      	subs	r2, r2, r3
 8009500:	2308      	movs	r3, #8
 8009502:	005b      	lsls	r3, r3, #1
 8009504:	429a      	cmp	r2, r3
 8009506:	d91f      	bls.n	8009548 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	4413      	add	r3, r2
 800950e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009510:	69bb      	ldr	r3, [r7, #24]
 8009512:	f003 0307 	and.w	r3, r3, #7
 8009516:	2b00      	cmp	r3, #0
 8009518:	d00a      	beq.n	8009530 <pvPortMalloc+0xf8>
	__asm volatile
 800951a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800951e:	f383 8811 	msr	BASEPRI, r3
 8009522:	f3bf 8f6f 	isb	sy
 8009526:	f3bf 8f4f 	dsb	sy
 800952a:	613b      	str	r3, [r7, #16]
}
 800952c:	bf00      	nop
 800952e:	e7fe      	b.n	800952e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009532:	685a      	ldr	r2, [r3, #4]
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	1ad2      	subs	r2, r2, r3
 8009538:	69bb      	ldr	r3, [r7, #24]
 800953a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800953c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800953e:	687a      	ldr	r2, [r7, #4]
 8009540:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009542:	69b8      	ldr	r0, [r7, #24]
 8009544:	f000 f908 	bl	8009758 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009548:	4b1d      	ldr	r3, [pc, #116]	; (80095c0 <pvPortMalloc+0x188>)
 800954a:	681a      	ldr	r2, [r3, #0]
 800954c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800954e:	685b      	ldr	r3, [r3, #4]
 8009550:	1ad3      	subs	r3, r2, r3
 8009552:	4a1b      	ldr	r2, [pc, #108]	; (80095c0 <pvPortMalloc+0x188>)
 8009554:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009556:	4b1a      	ldr	r3, [pc, #104]	; (80095c0 <pvPortMalloc+0x188>)
 8009558:	681a      	ldr	r2, [r3, #0]
 800955a:	4b1b      	ldr	r3, [pc, #108]	; (80095c8 <pvPortMalloc+0x190>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	429a      	cmp	r2, r3
 8009560:	d203      	bcs.n	800956a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009562:	4b17      	ldr	r3, [pc, #92]	; (80095c0 <pvPortMalloc+0x188>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	4a18      	ldr	r2, [pc, #96]	; (80095c8 <pvPortMalloc+0x190>)
 8009568:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800956a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800956c:	685a      	ldr	r2, [r3, #4]
 800956e:	4b13      	ldr	r3, [pc, #76]	; (80095bc <pvPortMalloc+0x184>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	431a      	orrs	r2, r3
 8009574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009576:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800957a:	2200      	movs	r2, #0
 800957c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800957e:	4b13      	ldr	r3, [pc, #76]	; (80095cc <pvPortMalloc+0x194>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	3301      	adds	r3, #1
 8009584:	4a11      	ldr	r2, [pc, #68]	; (80095cc <pvPortMalloc+0x194>)
 8009586:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009588:	f7fe fcfc 	bl	8007f84 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800958c:	69fb      	ldr	r3, [r7, #28]
 800958e:	f003 0307 	and.w	r3, r3, #7
 8009592:	2b00      	cmp	r3, #0
 8009594:	d00a      	beq.n	80095ac <pvPortMalloc+0x174>
	__asm volatile
 8009596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800959a:	f383 8811 	msr	BASEPRI, r3
 800959e:	f3bf 8f6f 	isb	sy
 80095a2:	f3bf 8f4f 	dsb	sy
 80095a6:	60fb      	str	r3, [r7, #12]
}
 80095a8:	bf00      	nop
 80095aa:	e7fe      	b.n	80095aa <pvPortMalloc+0x172>
	return pvReturn;
 80095ac:	69fb      	ldr	r3, [r7, #28]
}
 80095ae:	4618      	mov	r0, r3
 80095b0:	3728      	adds	r7, #40	; 0x28
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}
 80095b6:	bf00      	nop
 80095b8:	20004bd8 	.word	0x20004bd8
 80095bc:	20004bec 	.word	0x20004bec
 80095c0:	20004bdc 	.word	0x20004bdc
 80095c4:	20004bd0 	.word	0x20004bd0
 80095c8:	20004be0 	.word	0x20004be0
 80095cc:	20004be4 	.word	0x20004be4

080095d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b086      	sub	sp, #24
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d04d      	beq.n	800967e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80095e2:	2308      	movs	r3, #8
 80095e4:	425b      	negs	r3, r3
 80095e6:	697a      	ldr	r2, [r7, #20]
 80095e8:	4413      	add	r3, r2
 80095ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80095ec:	697b      	ldr	r3, [r7, #20]
 80095ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80095f0:	693b      	ldr	r3, [r7, #16]
 80095f2:	685a      	ldr	r2, [r3, #4]
 80095f4:	4b24      	ldr	r3, [pc, #144]	; (8009688 <vPortFree+0xb8>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	4013      	ands	r3, r2
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d10a      	bne.n	8009614 <vPortFree+0x44>
	__asm volatile
 80095fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009602:	f383 8811 	msr	BASEPRI, r3
 8009606:	f3bf 8f6f 	isb	sy
 800960a:	f3bf 8f4f 	dsb	sy
 800960e:	60fb      	str	r3, [r7, #12]
}
 8009610:	bf00      	nop
 8009612:	e7fe      	b.n	8009612 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009614:	693b      	ldr	r3, [r7, #16]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d00a      	beq.n	8009632 <vPortFree+0x62>
	__asm volatile
 800961c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009620:	f383 8811 	msr	BASEPRI, r3
 8009624:	f3bf 8f6f 	isb	sy
 8009628:	f3bf 8f4f 	dsb	sy
 800962c:	60bb      	str	r3, [r7, #8]
}
 800962e:	bf00      	nop
 8009630:	e7fe      	b.n	8009630 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009632:	693b      	ldr	r3, [r7, #16]
 8009634:	685a      	ldr	r2, [r3, #4]
 8009636:	4b14      	ldr	r3, [pc, #80]	; (8009688 <vPortFree+0xb8>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	4013      	ands	r3, r2
 800963c:	2b00      	cmp	r3, #0
 800963e:	d01e      	beq.n	800967e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009640:	693b      	ldr	r3, [r7, #16]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d11a      	bne.n	800967e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009648:	693b      	ldr	r3, [r7, #16]
 800964a:	685a      	ldr	r2, [r3, #4]
 800964c:	4b0e      	ldr	r3, [pc, #56]	; (8009688 <vPortFree+0xb8>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	43db      	mvns	r3, r3
 8009652:	401a      	ands	r2, r3
 8009654:	693b      	ldr	r3, [r7, #16]
 8009656:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009658:	f7fe fc86 	bl	8007f68 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	685a      	ldr	r2, [r3, #4]
 8009660:	4b0a      	ldr	r3, [pc, #40]	; (800968c <vPortFree+0xbc>)
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	4413      	add	r3, r2
 8009666:	4a09      	ldr	r2, [pc, #36]	; (800968c <vPortFree+0xbc>)
 8009668:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800966a:	6938      	ldr	r0, [r7, #16]
 800966c:	f000 f874 	bl	8009758 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009670:	4b07      	ldr	r3, [pc, #28]	; (8009690 <vPortFree+0xc0>)
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	3301      	adds	r3, #1
 8009676:	4a06      	ldr	r2, [pc, #24]	; (8009690 <vPortFree+0xc0>)
 8009678:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800967a:	f7fe fc83 	bl	8007f84 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800967e:	bf00      	nop
 8009680:	3718      	adds	r7, #24
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}
 8009686:	bf00      	nop
 8009688:	20004bec 	.word	0x20004bec
 800968c:	20004bdc 	.word	0x20004bdc
 8009690:	20004be8 	.word	0x20004be8

08009694 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009694:	b480      	push	{r7}
 8009696:	b085      	sub	sp, #20
 8009698:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800969a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800969e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80096a0:	4b27      	ldr	r3, [pc, #156]	; (8009740 <prvHeapInit+0xac>)
 80096a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	f003 0307 	and.w	r3, r3, #7
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d00c      	beq.n	80096c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	3307      	adds	r3, #7
 80096b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	f023 0307 	bic.w	r3, r3, #7
 80096ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80096bc:	68ba      	ldr	r2, [r7, #8]
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	1ad3      	subs	r3, r2, r3
 80096c2:	4a1f      	ldr	r2, [pc, #124]	; (8009740 <prvHeapInit+0xac>)
 80096c4:	4413      	add	r3, r2
 80096c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80096cc:	4a1d      	ldr	r2, [pc, #116]	; (8009744 <prvHeapInit+0xb0>)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80096d2:	4b1c      	ldr	r3, [pc, #112]	; (8009744 <prvHeapInit+0xb0>)
 80096d4:	2200      	movs	r2, #0
 80096d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	68ba      	ldr	r2, [r7, #8]
 80096dc:	4413      	add	r3, r2
 80096de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80096e0:	2208      	movs	r2, #8
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	1a9b      	subs	r3, r3, r2
 80096e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	f023 0307 	bic.w	r3, r3, #7
 80096ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	4a15      	ldr	r2, [pc, #84]	; (8009748 <prvHeapInit+0xb4>)
 80096f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80096f6:	4b14      	ldr	r3, [pc, #80]	; (8009748 <prvHeapInit+0xb4>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	2200      	movs	r2, #0
 80096fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80096fe:	4b12      	ldr	r3, [pc, #72]	; (8009748 <prvHeapInit+0xb4>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	2200      	movs	r2, #0
 8009704:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	68fa      	ldr	r2, [r7, #12]
 800970e:	1ad2      	subs	r2, r2, r3
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009714:	4b0c      	ldr	r3, [pc, #48]	; (8009748 <prvHeapInit+0xb4>)
 8009716:	681a      	ldr	r2, [r3, #0]
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	685b      	ldr	r3, [r3, #4]
 8009720:	4a0a      	ldr	r2, [pc, #40]	; (800974c <prvHeapInit+0xb8>)
 8009722:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	685b      	ldr	r3, [r3, #4]
 8009728:	4a09      	ldr	r2, [pc, #36]	; (8009750 <prvHeapInit+0xbc>)
 800972a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800972c:	4b09      	ldr	r3, [pc, #36]	; (8009754 <prvHeapInit+0xc0>)
 800972e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009732:	601a      	str	r2, [r3, #0]
}
 8009734:	bf00      	nop
 8009736:	3714      	adds	r7, #20
 8009738:	46bd      	mov	sp, r7
 800973a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973e:	4770      	bx	lr
 8009740:	20000fd0 	.word	0x20000fd0
 8009744:	20004bd0 	.word	0x20004bd0
 8009748:	20004bd8 	.word	0x20004bd8
 800974c:	20004be0 	.word	0x20004be0
 8009750:	20004bdc 	.word	0x20004bdc
 8009754:	20004bec 	.word	0x20004bec

08009758 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009758:	b480      	push	{r7}
 800975a:	b085      	sub	sp, #20
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009760:	4b28      	ldr	r3, [pc, #160]	; (8009804 <prvInsertBlockIntoFreeList+0xac>)
 8009762:	60fb      	str	r3, [r7, #12]
 8009764:	e002      	b.n	800976c <prvInsertBlockIntoFreeList+0x14>
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	60fb      	str	r3, [r7, #12]
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	687a      	ldr	r2, [r7, #4]
 8009772:	429a      	cmp	r2, r3
 8009774:	d8f7      	bhi.n	8009766 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	685b      	ldr	r3, [r3, #4]
 800977e:	68ba      	ldr	r2, [r7, #8]
 8009780:	4413      	add	r3, r2
 8009782:	687a      	ldr	r2, [r7, #4]
 8009784:	429a      	cmp	r2, r3
 8009786:	d108      	bne.n	800979a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	685a      	ldr	r2, [r3, #4]
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	685b      	ldr	r3, [r3, #4]
 8009790:	441a      	add	r2, r3
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	685b      	ldr	r3, [r3, #4]
 80097a2:	68ba      	ldr	r2, [r7, #8]
 80097a4:	441a      	add	r2, r3
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	429a      	cmp	r2, r3
 80097ac:	d118      	bne.n	80097e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	681a      	ldr	r2, [r3, #0]
 80097b2:	4b15      	ldr	r3, [pc, #84]	; (8009808 <prvInsertBlockIntoFreeList+0xb0>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	429a      	cmp	r2, r3
 80097b8:	d00d      	beq.n	80097d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	685a      	ldr	r2, [r3, #4]
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	685b      	ldr	r3, [r3, #4]
 80097c4:	441a      	add	r2, r3
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	681a      	ldr	r2, [r3, #0]
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	601a      	str	r2, [r3, #0]
 80097d4:	e008      	b.n	80097e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80097d6:	4b0c      	ldr	r3, [pc, #48]	; (8009808 <prvInsertBlockIntoFreeList+0xb0>)
 80097d8:	681a      	ldr	r2, [r3, #0]
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	601a      	str	r2, [r3, #0]
 80097de:	e003      	b.n	80097e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	681a      	ldr	r2, [r3, #0]
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80097e8:	68fa      	ldr	r2, [r7, #12]
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	429a      	cmp	r2, r3
 80097ee:	d002      	beq.n	80097f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	687a      	ldr	r2, [r7, #4]
 80097f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80097f6:	bf00      	nop
 80097f8:	3714      	adds	r7, #20
 80097fa:	46bd      	mov	sp, r7
 80097fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009800:	4770      	bx	lr
 8009802:	bf00      	nop
 8009804:	20004bd0 	.word	0x20004bd0
 8009808:	20004bd8 	.word	0x20004bd8

0800980c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009810:	2200      	movs	r2, #0
 8009812:	4912      	ldr	r1, [pc, #72]	; (800985c <MX_USB_DEVICE_Init+0x50>)
 8009814:	4812      	ldr	r0, [pc, #72]	; (8009860 <MX_USB_DEVICE_Init+0x54>)
 8009816:	f7fb ff49 	bl	80056ac <USBD_Init>
 800981a:	4603      	mov	r3, r0
 800981c:	2b00      	cmp	r3, #0
 800981e:	d001      	beq.n	8009824 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009820:	f7f6 ffbc 	bl	800079c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009824:	490f      	ldr	r1, [pc, #60]	; (8009864 <MX_USB_DEVICE_Init+0x58>)
 8009826:	480e      	ldr	r0, [pc, #56]	; (8009860 <MX_USB_DEVICE_Init+0x54>)
 8009828:	f7fb ff70 	bl	800570c <USBD_RegisterClass>
 800982c:	4603      	mov	r3, r0
 800982e:	2b00      	cmp	r3, #0
 8009830:	d001      	beq.n	8009836 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009832:	f7f6 ffb3 	bl	800079c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009836:	490c      	ldr	r1, [pc, #48]	; (8009868 <MX_USB_DEVICE_Init+0x5c>)
 8009838:	4809      	ldr	r0, [pc, #36]	; (8009860 <MX_USB_DEVICE_Init+0x54>)
 800983a:	f7fb fe61 	bl	8005500 <USBD_CDC_RegisterInterface>
 800983e:	4603      	mov	r3, r0
 8009840:	2b00      	cmp	r3, #0
 8009842:	d001      	beq.n	8009848 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009844:	f7f6 ffaa 	bl	800079c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009848:	4805      	ldr	r0, [pc, #20]	; (8009860 <MX_USB_DEVICE_Init+0x54>)
 800984a:	f7fb ff95 	bl	8005778 <USBD_Start>
 800984e:	4603      	mov	r3, r0
 8009850:	2b00      	cmp	r3, #0
 8009852:	d001      	beq.n	8009858 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009854:	f7f6 ffa2 	bl	800079c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009858:	bf00      	nop
 800985a:	bd80      	pop	{r7, pc}
 800985c:	200000b0 	.word	0x200000b0
 8009860:	20004bf0 	.word	0x20004bf0
 8009864:	20000018 	.word	0x20000018
 8009868:	2000009c 	.word	0x2000009c

0800986c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009870:	2200      	movs	r2, #0
 8009872:	4905      	ldr	r1, [pc, #20]	; (8009888 <CDC_Init_FS+0x1c>)
 8009874:	4805      	ldr	r0, [pc, #20]	; (800988c <CDC_Init_FS+0x20>)
 8009876:	f7fb fe5d 	bl	8005534 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800987a:	4905      	ldr	r1, [pc, #20]	; (8009890 <CDC_Init_FS+0x24>)
 800987c:	4803      	ldr	r0, [pc, #12]	; (800988c <CDC_Init_FS+0x20>)
 800987e:	f7fb fe7b 	bl	8005578 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009882:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009884:	4618      	mov	r0, r3
 8009886:	bd80      	pop	{r7, pc}
 8009888:	200056cc 	.word	0x200056cc
 800988c:	20004bf0 	.word	0x20004bf0
 8009890:	20004ecc 	.word	0x20004ecc

08009894 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009894:	b480      	push	{r7}
 8009896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009898:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800989a:	4618      	mov	r0, r3
 800989c:	46bd      	mov	sp, r7
 800989e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a2:	4770      	bx	lr

080098a4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80098a4:	b480      	push	{r7}
 80098a6:	b083      	sub	sp, #12
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	4603      	mov	r3, r0
 80098ac:	6039      	str	r1, [r7, #0]
 80098ae:	71fb      	strb	r3, [r7, #7]
 80098b0:	4613      	mov	r3, r2
 80098b2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80098b4:	79fb      	ldrb	r3, [r7, #7]
 80098b6:	2b23      	cmp	r3, #35	; 0x23
 80098b8:	d84a      	bhi.n	8009950 <CDC_Control_FS+0xac>
 80098ba:	a201      	add	r2, pc, #4	; (adr r2, 80098c0 <CDC_Control_FS+0x1c>)
 80098bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098c0:	08009951 	.word	0x08009951
 80098c4:	08009951 	.word	0x08009951
 80098c8:	08009951 	.word	0x08009951
 80098cc:	08009951 	.word	0x08009951
 80098d0:	08009951 	.word	0x08009951
 80098d4:	08009951 	.word	0x08009951
 80098d8:	08009951 	.word	0x08009951
 80098dc:	08009951 	.word	0x08009951
 80098e0:	08009951 	.word	0x08009951
 80098e4:	08009951 	.word	0x08009951
 80098e8:	08009951 	.word	0x08009951
 80098ec:	08009951 	.word	0x08009951
 80098f0:	08009951 	.word	0x08009951
 80098f4:	08009951 	.word	0x08009951
 80098f8:	08009951 	.word	0x08009951
 80098fc:	08009951 	.word	0x08009951
 8009900:	08009951 	.word	0x08009951
 8009904:	08009951 	.word	0x08009951
 8009908:	08009951 	.word	0x08009951
 800990c:	08009951 	.word	0x08009951
 8009910:	08009951 	.word	0x08009951
 8009914:	08009951 	.word	0x08009951
 8009918:	08009951 	.word	0x08009951
 800991c:	08009951 	.word	0x08009951
 8009920:	08009951 	.word	0x08009951
 8009924:	08009951 	.word	0x08009951
 8009928:	08009951 	.word	0x08009951
 800992c:	08009951 	.word	0x08009951
 8009930:	08009951 	.word	0x08009951
 8009934:	08009951 	.word	0x08009951
 8009938:	08009951 	.word	0x08009951
 800993c:	08009951 	.word	0x08009951
 8009940:	08009951 	.word	0x08009951
 8009944:	08009951 	.word	0x08009951
 8009948:	08009951 	.word	0x08009951
 800994c:	08009951 	.word	0x08009951
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009950:	bf00      	nop
  }

  return (USBD_OK);
 8009952:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009954:	4618      	mov	r0, r3
 8009956:	370c      	adds	r7, #12
 8009958:	46bd      	mov	sp, r7
 800995a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995e:	4770      	bx	lr

08009960 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b082      	sub	sp, #8
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
 8009968:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800996a:	6879      	ldr	r1, [r7, #4]
 800996c:	4805      	ldr	r0, [pc, #20]	; (8009984 <CDC_Receive_FS+0x24>)
 800996e:	f7fb fe03 	bl	8005578 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009972:	4804      	ldr	r0, [pc, #16]	; (8009984 <CDC_Receive_FS+0x24>)
 8009974:	f7fb fe64 	bl	8005640 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009978:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800997a:	4618      	mov	r0, r3
 800997c:	3708      	adds	r7, #8
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}
 8009982:	bf00      	nop
 8009984:	20004bf0 	.word	0x20004bf0

08009988 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b084      	sub	sp, #16
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
 8009990:	460b      	mov	r3, r1
 8009992:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009994:	2300      	movs	r3, #0
 8009996:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009998:	4b0d      	ldr	r3, [pc, #52]	; (80099d0 <CDC_Transmit_FS+0x48>)
 800999a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800999e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d001      	beq.n	80099ae <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80099aa:	2301      	movs	r3, #1
 80099ac:	e00b      	b.n	80099c6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80099ae:	887b      	ldrh	r3, [r7, #2]
 80099b0:	461a      	mov	r2, r3
 80099b2:	6879      	ldr	r1, [r7, #4]
 80099b4:	4806      	ldr	r0, [pc, #24]	; (80099d0 <CDC_Transmit_FS+0x48>)
 80099b6:	f7fb fdbd 	bl	8005534 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80099ba:	4805      	ldr	r0, [pc, #20]	; (80099d0 <CDC_Transmit_FS+0x48>)
 80099bc:	f7fb fdfa 	bl	80055b4 <USBD_CDC_TransmitPacket>
 80099c0:	4603      	mov	r3, r0
 80099c2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80099c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	3710      	adds	r7, #16
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}
 80099ce:	bf00      	nop
 80099d0:	20004bf0 	.word	0x20004bf0

080099d4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80099d4:	b480      	push	{r7}
 80099d6:	b087      	sub	sp, #28
 80099d8:	af00      	add	r7, sp, #0
 80099da:	60f8      	str	r0, [r7, #12]
 80099dc:	60b9      	str	r1, [r7, #8]
 80099de:	4613      	mov	r3, r2
 80099e0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80099e2:	2300      	movs	r3, #0
 80099e4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80099e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	371c      	adds	r7, #28
 80099ee:	46bd      	mov	sp, r7
 80099f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f4:	4770      	bx	lr
	...

080099f8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099f8:	b480      	push	{r7}
 80099fa:	b083      	sub	sp, #12
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	4603      	mov	r3, r0
 8009a00:	6039      	str	r1, [r7, #0]
 8009a02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	2212      	movs	r2, #18
 8009a08:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009a0a:	4b03      	ldr	r3, [pc, #12]	; (8009a18 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	370c      	adds	r7, #12
 8009a10:	46bd      	mov	sp, r7
 8009a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a16:	4770      	bx	lr
 8009a18:	200000cc 	.word	0x200000cc

08009a1c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b083      	sub	sp, #12
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	4603      	mov	r3, r0
 8009a24:	6039      	str	r1, [r7, #0]
 8009a26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	2204      	movs	r2, #4
 8009a2c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009a2e:	4b03      	ldr	r3, [pc, #12]	; (8009a3c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009a30:	4618      	mov	r0, r3
 8009a32:	370c      	adds	r7, #12
 8009a34:	46bd      	mov	sp, r7
 8009a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3a:	4770      	bx	lr
 8009a3c:	200000e0 	.word	0x200000e0

08009a40 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b082      	sub	sp, #8
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	4603      	mov	r3, r0
 8009a48:	6039      	str	r1, [r7, #0]
 8009a4a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009a4c:	79fb      	ldrb	r3, [r7, #7]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d105      	bne.n	8009a5e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009a52:	683a      	ldr	r2, [r7, #0]
 8009a54:	4907      	ldr	r1, [pc, #28]	; (8009a74 <USBD_FS_ProductStrDescriptor+0x34>)
 8009a56:	4808      	ldr	r0, [pc, #32]	; (8009a78 <USBD_FS_ProductStrDescriptor+0x38>)
 8009a58:	f7fd f83a 	bl	8006ad0 <USBD_GetString>
 8009a5c:	e004      	b.n	8009a68 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009a5e:	683a      	ldr	r2, [r7, #0]
 8009a60:	4904      	ldr	r1, [pc, #16]	; (8009a74 <USBD_FS_ProductStrDescriptor+0x34>)
 8009a62:	4805      	ldr	r0, [pc, #20]	; (8009a78 <USBD_FS_ProductStrDescriptor+0x38>)
 8009a64:	f7fd f834 	bl	8006ad0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009a68:	4b02      	ldr	r3, [pc, #8]	; (8009a74 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	3708      	adds	r7, #8
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bd80      	pop	{r7, pc}
 8009a72:	bf00      	nop
 8009a74:	20005ecc 	.word	0x20005ecc
 8009a78:	0800a7dc 	.word	0x0800a7dc

08009a7c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b082      	sub	sp, #8
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	4603      	mov	r3, r0
 8009a84:	6039      	str	r1, [r7, #0]
 8009a86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009a88:	683a      	ldr	r2, [r7, #0]
 8009a8a:	4904      	ldr	r1, [pc, #16]	; (8009a9c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009a8c:	4804      	ldr	r0, [pc, #16]	; (8009aa0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009a8e:	f7fd f81f 	bl	8006ad0 <USBD_GetString>
  return USBD_StrDesc;
 8009a92:	4b02      	ldr	r3, [pc, #8]	; (8009a9c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3708      	adds	r7, #8
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}
 8009a9c:	20005ecc 	.word	0x20005ecc
 8009aa0:	0800a7e8 	.word	0x0800a7e8

08009aa4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b082      	sub	sp, #8
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	4603      	mov	r3, r0
 8009aac:	6039      	str	r1, [r7, #0]
 8009aae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	221a      	movs	r2, #26
 8009ab4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009ab6:	f000 f843 	bl	8009b40 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009aba:	4b02      	ldr	r3, [pc, #8]	; (8009ac4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009abc:	4618      	mov	r0, r3
 8009abe:	3708      	adds	r7, #8
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}
 8009ac4:	200000e4 	.word	0x200000e4

08009ac8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b082      	sub	sp, #8
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	4603      	mov	r3, r0
 8009ad0:	6039      	str	r1, [r7, #0]
 8009ad2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009ad4:	79fb      	ldrb	r3, [r7, #7]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d105      	bne.n	8009ae6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009ada:	683a      	ldr	r2, [r7, #0]
 8009adc:	4907      	ldr	r1, [pc, #28]	; (8009afc <USBD_FS_ConfigStrDescriptor+0x34>)
 8009ade:	4808      	ldr	r0, [pc, #32]	; (8009b00 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009ae0:	f7fc fff6 	bl	8006ad0 <USBD_GetString>
 8009ae4:	e004      	b.n	8009af0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009ae6:	683a      	ldr	r2, [r7, #0]
 8009ae8:	4904      	ldr	r1, [pc, #16]	; (8009afc <USBD_FS_ConfigStrDescriptor+0x34>)
 8009aea:	4805      	ldr	r0, [pc, #20]	; (8009b00 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009aec:	f7fc fff0 	bl	8006ad0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009af0:	4b02      	ldr	r3, [pc, #8]	; (8009afc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009af2:	4618      	mov	r0, r3
 8009af4:	3708      	adds	r7, #8
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd80      	pop	{r7, pc}
 8009afa:	bf00      	nop
 8009afc:	20005ecc 	.word	0x20005ecc
 8009b00:	0800a7fc 	.word	0x0800a7fc

08009b04 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b082      	sub	sp, #8
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	6039      	str	r1, [r7, #0]
 8009b0e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009b10:	79fb      	ldrb	r3, [r7, #7]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d105      	bne.n	8009b22 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009b16:	683a      	ldr	r2, [r7, #0]
 8009b18:	4907      	ldr	r1, [pc, #28]	; (8009b38 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009b1a:	4808      	ldr	r0, [pc, #32]	; (8009b3c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009b1c:	f7fc ffd8 	bl	8006ad0 <USBD_GetString>
 8009b20:	e004      	b.n	8009b2c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009b22:	683a      	ldr	r2, [r7, #0]
 8009b24:	4904      	ldr	r1, [pc, #16]	; (8009b38 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009b26:	4805      	ldr	r0, [pc, #20]	; (8009b3c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009b28:	f7fc ffd2 	bl	8006ad0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009b2c:	4b02      	ldr	r3, [pc, #8]	; (8009b38 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	3708      	adds	r7, #8
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}
 8009b36:	bf00      	nop
 8009b38:	20005ecc 	.word	0x20005ecc
 8009b3c:	0800a808 	.word	0x0800a808

08009b40 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b084      	sub	sp, #16
 8009b44:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009b46:	4b0f      	ldr	r3, [pc, #60]	; (8009b84 <Get_SerialNum+0x44>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009b4c:	4b0e      	ldr	r3, [pc, #56]	; (8009b88 <Get_SerialNum+0x48>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009b52:	4b0e      	ldr	r3, [pc, #56]	; (8009b8c <Get_SerialNum+0x4c>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009b58:	68fa      	ldr	r2, [r7, #12]
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	4413      	add	r3, r2
 8009b5e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d009      	beq.n	8009b7a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009b66:	2208      	movs	r2, #8
 8009b68:	4909      	ldr	r1, [pc, #36]	; (8009b90 <Get_SerialNum+0x50>)
 8009b6a:	68f8      	ldr	r0, [r7, #12]
 8009b6c:	f000 f814 	bl	8009b98 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009b70:	2204      	movs	r2, #4
 8009b72:	4908      	ldr	r1, [pc, #32]	; (8009b94 <Get_SerialNum+0x54>)
 8009b74:	68b8      	ldr	r0, [r7, #8]
 8009b76:	f000 f80f 	bl	8009b98 <IntToUnicode>
  }
}
 8009b7a:	bf00      	nop
 8009b7c:	3710      	adds	r7, #16
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}
 8009b82:	bf00      	nop
 8009b84:	1fff7a10 	.word	0x1fff7a10
 8009b88:	1fff7a14 	.word	0x1fff7a14
 8009b8c:	1fff7a18 	.word	0x1fff7a18
 8009b90:	200000e6 	.word	0x200000e6
 8009b94:	200000f6 	.word	0x200000f6

08009b98 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b087      	sub	sp, #28
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	60f8      	str	r0, [r7, #12]
 8009ba0:	60b9      	str	r1, [r7, #8]
 8009ba2:	4613      	mov	r3, r2
 8009ba4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009baa:	2300      	movs	r3, #0
 8009bac:	75fb      	strb	r3, [r7, #23]
 8009bae:	e027      	b.n	8009c00 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	0f1b      	lsrs	r3, r3, #28
 8009bb4:	2b09      	cmp	r3, #9
 8009bb6:	d80b      	bhi.n	8009bd0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	0f1b      	lsrs	r3, r3, #28
 8009bbc:	b2da      	uxtb	r2, r3
 8009bbe:	7dfb      	ldrb	r3, [r7, #23]
 8009bc0:	005b      	lsls	r3, r3, #1
 8009bc2:	4619      	mov	r1, r3
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	440b      	add	r3, r1
 8009bc8:	3230      	adds	r2, #48	; 0x30
 8009bca:	b2d2      	uxtb	r2, r2
 8009bcc:	701a      	strb	r2, [r3, #0]
 8009bce:	e00a      	b.n	8009be6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	0f1b      	lsrs	r3, r3, #28
 8009bd4:	b2da      	uxtb	r2, r3
 8009bd6:	7dfb      	ldrb	r3, [r7, #23]
 8009bd8:	005b      	lsls	r3, r3, #1
 8009bda:	4619      	mov	r1, r3
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	440b      	add	r3, r1
 8009be0:	3237      	adds	r2, #55	; 0x37
 8009be2:	b2d2      	uxtb	r2, r2
 8009be4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	011b      	lsls	r3, r3, #4
 8009bea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009bec:	7dfb      	ldrb	r3, [r7, #23]
 8009bee:	005b      	lsls	r3, r3, #1
 8009bf0:	3301      	adds	r3, #1
 8009bf2:	68ba      	ldr	r2, [r7, #8]
 8009bf4:	4413      	add	r3, r2
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009bfa:	7dfb      	ldrb	r3, [r7, #23]
 8009bfc:	3301      	adds	r3, #1
 8009bfe:	75fb      	strb	r3, [r7, #23]
 8009c00:	7dfa      	ldrb	r2, [r7, #23]
 8009c02:	79fb      	ldrb	r3, [r7, #7]
 8009c04:	429a      	cmp	r2, r3
 8009c06:	d3d3      	bcc.n	8009bb0 <IntToUnicode+0x18>
  }
}
 8009c08:	bf00      	nop
 8009c0a:	bf00      	nop
 8009c0c:	371c      	adds	r7, #28
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c14:	4770      	bx	lr
	...

08009c18 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b08a      	sub	sp, #40	; 0x28
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009c20:	f107 0314 	add.w	r3, r7, #20
 8009c24:	2200      	movs	r2, #0
 8009c26:	601a      	str	r2, [r3, #0]
 8009c28:	605a      	str	r2, [r3, #4]
 8009c2a:	609a      	str	r2, [r3, #8]
 8009c2c:	60da      	str	r2, [r3, #12]
 8009c2e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009c38:	d13a      	bne.n	8009cb0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	613b      	str	r3, [r7, #16]
 8009c3e:	4b1e      	ldr	r3, [pc, #120]	; (8009cb8 <HAL_PCD_MspInit+0xa0>)
 8009c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c42:	4a1d      	ldr	r2, [pc, #116]	; (8009cb8 <HAL_PCD_MspInit+0xa0>)
 8009c44:	f043 0301 	orr.w	r3, r3, #1
 8009c48:	6313      	str	r3, [r2, #48]	; 0x30
 8009c4a:	4b1b      	ldr	r3, [pc, #108]	; (8009cb8 <HAL_PCD_MspInit+0xa0>)
 8009c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c4e:	f003 0301 	and.w	r3, r3, #1
 8009c52:	613b      	str	r3, [r7, #16]
 8009c54:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009c56:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009c5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c5c:	2302      	movs	r3, #2
 8009c5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c60:	2300      	movs	r3, #0
 8009c62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009c64:	2303      	movs	r3, #3
 8009c66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009c68:	230a      	movs	r3, #10
 8009c6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009c6c:	f107 0314 	add.w	r3, r7, #20
 8009c70:	4619      	mov	r1, r3
 8009c72:	4812      	ldr	r0, [pc, #72]	; (8009cbc <HAL_PCD_MspInit+0xa4>)
 8009c74:	f7f7 f846 	bl	8000d04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009c78:	4b0f      	ldr	r3, [pc, #60]	; (8009cb8 <HAL_PCD_MspInit+0xa0>)
 8009c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c7c:	4a0e      	ldr	r2, [pc, #56]	; (8009cb8 <HAL_PCD_MspInit+0xa0>)
 8009c7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c82:	6353      	str	r3, [r2, #52]	; 0x34
 8009c84:	2300      	movs	r3, #0
 8009c86:	60fb      	str	r3, [r7, #12]
 8009c88:	4b0b      	ldr	r3, [pc, #44]	; (8009cb8 <HAL_PCD_MspInit+0xa0>)
 8009c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c8c:	4a0a      	ldr	r2, [pc, #40]	; (8009cb8 <HAL_PCD_MspInit+0xa0>)
 8009c8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009c92:	6453      	str	r3, [r2, #68]	; 0x44
 8009c94:	4b08      	ldr	r3, [pc, #32]	; (8009cb8 <HAL_PCD_MspInit+0xa0>)
 8009c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c9c:	60fb      	str	r3, [r7, #12]
 8009c9e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	2105      	movs	r1, #5
 8009ca4:	2043      	movs	r0, #67	; 0x43
 8009ca6:	f7f7 f803 	bl	8000cb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009caa:	2043      	movs	r0, #67	; 0x43
 8009cac:	f7f7 f81c 	bl	8000ce8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009cb0:	bf00      	nop
 8009cb2:	3728      	adds	r7, #40	; 0x28
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}
 8009cb8:	40023800 	.word	0x40023800
 8009cbc:	40020000 	.word	0x40020000

08009cc0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b082      	sub	sp, #8
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009cd4:	4619      	mov	r1, r3
 8009cd6:	4610      	mov	r0, r2
 8009cd8:	f7fb fd9b 	bl	8005812 <USBD_LL_SetupStage>
}
 8009cdc:	bf00      	nop
 8009cde:	3708      	adds	r7, #8
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd80      	pop	{r7, pc}

08009ce4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b082      	sub	sp, #8
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
 8009cec:	460b      	mov	r3, r1
 8009cee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009cf6:	78fa      	ldrb	r2, [r7, #3]
 8009cf8:	6879      	ldr	r1, [r7, #4]
 8009cfa:	4613      	mov	r3, r2
 8009cfc:	00db      	lsls	r3, r3, #3
 8009cfe:	4413      	add	r3, r2
 8009d00:	009b      	lsls	r3, r3, #2
 8009d02:	440b      	add	r3, r1
 8009d04:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009d08:	681a      	ldr	r2, [r3, #0]
 8009d0a:	78fb      	ldrb	r3, [r7, #3]
 8009d0c:	4619      	mov	r1, r3
 8009d0e:	f7fb fdd5 	bl	80058bc <USBD_LL_DataOutStage>
}
 8009d12:	bf00      	nop
 8009d14:	3708      	adds	r7, #8
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}

08009d1a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d1a:	b580      	push	{r7, lr}
 8009d1c:	b082      	sub	sp, #8
 8009d1e:	af00      	add	r7, sp, #0
 8009d20:	6078      	str	r0, [r7, #4]
 8009d22:	460b      	mov	r3, r1
 8009d24:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009d2c:	78fa      	ldrb	r2, [r7, #3]
 8009d2e:	6879      	ldr	r1, [r7, #4]
 8009d30:	4613      	mov	r3, r2
 8009d32:	00db      	lsls	r3, r3, #3
 8009d34:	4413      	add	r3, r2
 8009d36:	009b      	lsls	r3, r3, #2
 8009d38:	440b      	add	r3, r1
 8009d3a:	334c      	adds	r3, #76	; 0x4c
 8009d3c:	681a      	ldr	r2, [r3, #0]
 8009d3e:	78fb      	ldrb	r3, [r7, #3]
 8009d40:	4619      	mov	r1, r3
 8009d42:	f7fb fe6e 	bl	8005a22 <USBD_LL_DataInStage>
}
 8009d46:	bf00      	nop
 8009d48:	3708      	adds	r7, #8
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}

08009d4e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d4e:	b580      	push	{r7, lr}
 8009d50:	b082      	sub	sp, #8
 8009d52:	af00      	add	r7, sp, #0
 8009d54:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	f7fb ffa2 	bl	8005ca6 <USBD_LL_SOF>
}
 8009d62:	bf00      	nop
 8009d64:	3708      	adds	r7, #8
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd80      	pop	{r7, pc}

08009d6a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d6a:	b580      	push	{r7, lr}
 8009d6c:	b084      	sub	sp, #16
 8009d6e:	af00      	add	r7, sp, #0
 8009d70:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009d72:	2301      	movs	r3, #1
 8009d74:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	68db      	ldr	r3, [r3, #12]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d102      	bne.n	8009d84 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009d7e:	2300      	movs	r3, #0
 8009d80:	73fb      	strb	r3, [r7, #15]
 8009d82:	e008      	b.n	8009d96 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	68db      	ldr	r3, [r3, #12]
 8009d88:	2b02      	cmp	r3, #2
 8009d8a:	d102      	bne.n	8009d92 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	73fb      	strb	r3, [r7, #15]
 8009d90:	e001      	b.n	8009d96 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009d92:	f7f6 fd03 	bl	800079c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009d9c:	7bfa      	ldrb	r2, [r7, #15]
 8009d9e:	4611      	mov	r1, r2
 8009da0:	4618      	mov	r0, r3
 8009da2:	f7fb ff42 	bl	8005c2a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009dac:	4618      	mov	r0, r3
 8009dae:	f7fb feea 	bl	8005b86 <USBD_LL_Reset>
}
 8009db2:	bf00      	nop
 8009db4:	3710      	adds	r7, #16
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}
	...

08009dbc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b082      	sub	sp, #8
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f7fb ff3d 	bl	8005c4a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	687a      	ldr	r2, [r7, #4]
 8009ddc:	6812      	ldr	r2, [r2, #0]
 8009dde:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009de2:	f043 0301 	orr.w	r3, r3, #1
 8009de6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6a1b      	ldr	r3, [r3, #32]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d005      	beq.n	8009dfc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009df0:	4b04      	ldr	r3, [pc, #16]	; (8009e04 <HAL_PCD_SuspendCallback+0x48>)
 8009df2:	691b      	ldr	r3, [r3, #16]
 8009df4:	4a03      	ldr	r2, [pc, #12]	; (8009e04 <HAL_PCD_SuspendCallback+0x48>)
 8009df6:	f043 0306 	orr.w	r3, r3, #6
 8009dfa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009dfc:	bf00      	nop
 8009dfe:	3708      	adds	r7, #8
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bd80      	pop	{r7, pc}
 8009e04:	e000ed00 	.word	0xe000ed00

08009e08 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b082      	sub	sp, #8
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009e16:	4618      	mov	r0, r3
 8009e18:	f7fb ff2d 	bl	8005c76 <USBD_LL_Resume>
}
 8009e1c:	bf00      	nop
 8009e1e:	3708      	adds	r7, #8
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bd80      	pop	{r7, pc}

08009e24 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b082      	sub	sp, #8
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
 8009e2c:	460b      	mov	r3, r1
 8009e2e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009e36:	78fa      	ldrb	r2, [r7, #3]
 8009e38:	4611      	mov	r1, r2
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	f7fb ff85 	bl	8005d4a <USBD_LL_IsoOUTIncomplete>
}
 8009e40:	bf00      	nop
 8009e42:	3708      	adds	r7, #8
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bd80      	pop	{r7, pc}

08009e48 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b082      	sub	sp, #8
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
 8009e50:	460b      	mov	r3, r1
 8009e52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009e5a:	78fa      	ldrb	r2, [r7, #3]
 8009e5c:	4611      	mov	r1, r2
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f7fb ff41 	bl	8005ce6 <USBD_LL_IsoINIncomplete>
}
 8009e64:	bf00      	nop
 8009e66:	3708      	adds	r7, #8
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bd80      	pop	{r7, pc}

08009e6c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b082      	sub	sp, #8
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f7fb ff97 	bl	8005dae <USBD_LL_DevConnected>
}
 8009e80:	bf00      	nop
 8009e82:	3708      	adds	r7, #8
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}

08009e88 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b082      	sub	sp, #8
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009e96:	4618      	mov	r0, r3
 8009e98:	f7fb ff94 	bl	8005dc4 <USBD_LL_DevDisconnected>
}
 8009e9c:	bf00      	nop
 8009e9e:	3708      	adds	r7, #8
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	bd80      	pop	{r7, pc}

08009ea4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b082      	sub	sp, #8
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	781b      	ldrb	r3, [r3, #0]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d13c      	bne.n	8009f2e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009eb4:	4a20      	ldr	r2, [pc, #128]	; (8009f38 <USBD_LL_Init+0x94>)
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	4a1e      	ldr	r2, [pc, #120]	; (8009f38 <USBD_LL_Init+0x94>)
 8009ec0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009ec4:	4b1c      	ldr	r3, [pc, #112]	; (8009f38 <USBD_LL_Init+0x94>)
 8009ec6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009eca:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009ecc:	4b1a      	ldr	r3, [pc, #104]	; (8009f38 <USBD_LL_Init+0x94>)
 8009ece:	2204      	movs	r2, #4
 8009ed0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009ed2:	4b19      	ldr	r3, [pc, #100]	; (8009f38 <USBD_LL_Init+0x94>)
 8009ed4:	2202      	movs	r2, #2
 8009ed6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009ed8:	4b17      	ldr	r3, [pc, #92]	; (8009f38 <USBD_LL_Init+0x94>)
 8009eda:	2200      	movs	r2, #0
 8009edc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009ede:	4b16      	ldr	r3, [pc, #88]	; (8009f38 <USBD_LL_Init+0x94>)
 8009ee0:	2202      	movs	r2, #2
 8009ee2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009ee4:	4b14      	ldr	r3, [pc, #80]	; (8009f38 <USBD_LL_Init+0x94>)
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009eea:	4b13      	ldr	r3, [pc, #76]	; (8009f38 <USBD_LL_Init+0x94>)
 8009eec:	2200      	movs	r2, #0
 8009eee:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009ef0:	4b11      	ldr	r3, [pc, #68]	; (8009f38 <USBD_LL_Init+0x94>)
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009ef6:	4b10      	ldr	r3, [pc, #64]	; (8009f38 <USBD_LL_Init+0x94>)
 8009ef8:	2200      	movs	r2, #0
 8009efa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009efc:	4b0e      	ldr	r3, [pc, #56]	; (8009f38 <USBD_LL_Init+0x94>)
 8009efe:	2200      	movs	r2, #0
 8009f00:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009f02:	480d      	ldr	r0, [pc, #52]	; (8009f38 <USBD_LL_Init+0x94>)
 8009f04:	f7f7 f8cd 	bl	80010a2 <HAL_PCD_Init>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d001      	beq.n	8009f12 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009f0e:	f7f6 fc45 	bl	800079c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009f12:	2180      	movs	r1, #128	; 0x80
 8009f14:	4808      	ldr	r0, [pc, #32]	; (8009f38 <USBD_LL_Init+0x94>)
 8009f16:	f7f8 fb24 	bl	8002562 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009f1a:	2240      	movs	r2, #64	; 0x40
 8009f1c:	2100      	movs	r1, #0
 8009f1e:	4806      	ldr	r0, [pc, #24]	; (8009f38 <USBD_LL_Init+0x94>)
 8009f20:	f7f8 fad8 	bl	80024d4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009f24:	2280      	movs	r2, #128	; 0x80
 8009f26:	2101      	movs	r1, #1
 8009f28:	4803      	ldr	r0, [pc, #12]	; (8009f38 <USBD_LL_Init+0x94>)
 8009f2a:	f7f8 fad3 	bl	80024d4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009f2e:	2300      	movs	r3, #0
}
 8009f30:	4618      	mov	r0, r3
 8009f32:	3708      	adds	r7, #8
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd80      	pop	{r7, pc}
 8009f38:	200060cc 	.word	0x200060cc

08009f3c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b084      	sub	sp, #16
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f44:	2300      	movs	r3, #0
 8009f46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f48:	2300      	movs	r3, #0
 8009f4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009f52:	4618      	mov	r0, r3
 8009f54:	f7f7 f9c2 	bl	80012dc <HAL_PCD_Start>
 8009f58:	4603      	mov	r3, r0
 8009f5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f5c:	7bfb      	ldrb	r3, [r7, #15]
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f000 f942 	bl	800a1e8 <USBD_Get_USB_Status>
 8009f64:	4603      	mov	r3, r0
 8009f66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f68:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	3710      	adds	r7, #16
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bd80      	pop	{r7, pc}

08009f72 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009f72:	b580      	push	{r7, lr}
 8009f74:	b084      	sub	sp, #16
 8009f76:	af00      	add	r7, sp, #0
 8009f78:	6078      	str	r0, [r7, #4]
 8009f7a:	4608      	mov	r0, r1
 8009f7c:	4611      	mov	r1, r2
 8009f7e:	461a      	mov	r2, r3
 8009f80:	4603      	mov	r3, r0
 8009f82:	70fb      	strb	r3, [r7, #3]
 8009f84:	460b      	mov	r3, r1
 8009f86:	70bb      	strb	r3, [r7, #2]
 8009f88:	4613      	mov	r3, r2
 8009f8a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f90:	2300      	movs	r3, #0
 8009f92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009f9a:	78bb      	ldrb	r3, [r7, #2]
 8009f9c:	883a      	ldrh	r2, [r7, #0]
 8009f9e:	78f9      	ldrb	r1, [r7, #3]
 8009fa0:	f7f7 fe93 	bl	8001cca <HAL_PCD_EP_Open>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fa8:	7bfb      	ldrb	r3, [r7, #15]
 8009faa:	4618      	mov	r0, r3
 8009fac:	f000 f91c 	bl	800a1e8 <USBD_Get_USB_Status>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009fb4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	3710      	adds	r7, #16
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}

08009fbe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009fbe:	b580      	push	{r7, lr}
 8009fc0:	b084      	sub	sp, #16
 8009fc2:	af00      	add	r7, sp, #0
 8009fc4:	6078      	str	r0, [r7, #4]
 8009fc6:	460b      	mov	r3, r1
 8009fc8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fca:	2300      	movs	r3, #0
 8009fcc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fce:	2300      	movs	r3, #0
 8009fd0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009fd8:	78fa      	ldrb	r2, [r7, #3]
 8009fda:	4611      	mov	r1, r2
 8009fdc:	4618      	mov	r0, r3
 8009fde:	f7f7 fedc 	bl	8001d9a <HAL_PCD_EP_Close>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fe6:	7bfb      	ldrb	r3, [r7, #15]
 8009fe8:	4618      	mov	r0, r3
 8009fea:	f000 f8fd 	bl	800a1e8 <USBD_Get_USB_Status>
 8009fee:	4603      	mov	r3, r0
 8009ff0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ff2:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3710      	adds	r7, #16
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}

08009ffc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b084      	sub	sp, #16
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
 800a004:	460b      	mov	r3, r1
 800a006:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a008:	2300      	movs	r3, #0
 800a00a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a00c:	2300      	movs	r3, #0
 800a00e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a016:	78fa      	ldrb	r2, [r7, #3]
 800a018:	4611      	mov	r1, r2
 800a01a:	4618      	mov	r0, r3
 800a01c:	f7f7 ffb4 	bl	8001f88 <HAL_PCD_EP_SetStall>
 800a020:	4603      	mov	r3, r0
 800a022:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a024:	7bfb      	ldrb	r3, [r7, #15]
 800a026:	4618      	mov	r0, r3
 800a028:	f000 f8de 	bl	800a1e8 <USBD_Get_USB_Status>
 800a02c:	4603      	mov	r3, r0
 800a02e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a030:	7bbb      	ldrb	r3, [r7, #14]
}
 800a032:	4618      	mov	r0, r3
 800a034:	3710      	adds	r7, #16
 800a036:	46bd      	mov	sp, r7
 800a038:	bd80      	pop	{r7, pc}

0800a03a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a03a:	b580      	push	{r7, lr}
 800a03c:	b084      	sub	sp, #16
 800a03e:	af00      	add	r7, sp, #0
 800a040:	6078      	str	r0, [r7, #4]
 800a042:	460b      	mov	r3, r1
 800a044:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a046:	2300      	movs	r3, #0
 800a048:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a04a:	2300      	movs	r3, #0
 800a04c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a054:	78fa      	ldrb	r2, [r7, #3]
 800a056:	4611      	mov	r1, r2
 800a058:	4618      	mov	r0, r3
 800a05a:	f7f7 fff9 	bl	8002050 <HAL_PCD_EP_ClrStall>
 800a05e:	4603      	mov	r3, r0
 800a060:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a062:	7bfb      	ldrb	r3, [r7, #15]
 800a064:	4618      	mov	r0, r3
 800a066:	f000 f8bf 	bl	800a1e8 <USBD_Get_USB_Status>
 800a06a:	4603      	mov	r3, r0
 800a06c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a06e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a070:	4618      	mov	r0, r3
 800a072:	3710      	adds	r7, #16
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}

0800a078 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a078:	b480      	push	{r7}
 800a07a:	b085      	sub	sp, #20
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
 800a080:	460b      	mov	r3, r1
 800a082:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a08a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a08c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a090:	2b00      	cmp	r3, #0
 800a092:	da0b      	bge.n	800a0ac <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a094:	78fb      	ldrb	r3, [r7, #3]
 800a096:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a09a:	68f9      	ldr	r1, [r7, #12]
 800a09c:	4613      	mov	r3, r2
 800a09e:	00db      	lsls	r3, r3, #3
 800a0a0:	4413      	add	r3, r2
 800a0a2:	009b      	lsls	r3, r3, #2
 800a0a4:	440b      	add	r3, r1
 800a0a6:	333e      	adds	r3, #62	; 0x3e
 800a0a8:	781b      	ldrb	r3, [r3, #0]
 800a0aa:	e00b      	b.n	800a0c4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a0ac:	78fb      	ldrb	r3, [r7, #3]
 800a0ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a0b2:	68f9      	ldr	r1, [r7, #12]
 800a0b4:	4613      	mov	r3, r2
 800a0b6:	00db      	lsls	r3, r3, #3
 800a0b8:	4413      	add	r3, r2
 800a0ba:	009b      	lsls	r3, r3, #2
 800a0bc:	440b      	add	r3, r1
 800a0be:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800a0c2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	3714      	adds	r7, #20
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ce:	4770      	bx	lr

0800a0d0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b084      	sub	sp, #16
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
 800a0d8:	460b      	mov	r3, r1
 800a0da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0dc:	2300      	movs	r3, #0
 800a0de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a0ea:	78fa      	ldrb	r2, [r7, #3]
 800a0ec:	4611      	mov	r1, r2
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	f7f7 fdc6 	bl	8001c80 <HAL_PCD_SetAddress>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0f8:	7bfb      	ldrb	r3, [r7, #15]
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	f000 f874 	bl	800a1e8 <USBD_Get_USB_Status>
 800a100:	4603      	mov	r3, r0
 800a102:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a104:	7bbb      	ldrb	r3, [r7, #14]
}
 800a106:	4618      	mov	r0, r3
 800a108:	3710      	adds	r7, #16
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}

0800a10e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a10e:	b580      	push	{r7, lr}
 800a110:	b086      	sub	sp, #24
 800a112:	af00      	add	r7, sp, #0
 800a114:	60f8      	str	r0, [r7, #12]
 800a116:	607a      	str	r2, [r7, #4]
 800a118:	603b      	str	r3, [r7, #0]
 800a11a:	460b      	mov	r3, r1
 800a11c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a11e:	2300      	movs	r3, #0
 800a120:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a122:	2300      	movs	r3, #0
 800a124:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a12c:	7af9      	ldrb	r1, [r7, #11]
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	687a      	ldr	r2, [r7, #4]
 800a132:	f7f7 fedf 	bl	8001ef4 <HAL_PCD_EP_Transmit>
 800a136:	4603      	mov	r3, r0
 800a138:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a13a:	7dfb      	ldrb	r3, [r7, #23]
 800a13c:	4618      	mov	r0, r3
 800a13e:	f000 f853 	bl	800a1e8 <USBD_Get_USB_Status>
 800a142:	4603      	mov	r3, r0
 800a144:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a146:	7dbb      	ldrb	r3, [r7, #22]
}
 800a148:	4618      	mov	r0, r3
 800a14a:	3718      	adds	r7, #24
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd80      	pop	{r7, pc}

0800a150 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b086      	sub	sp, #24
 800a154:	af00      	add	r7, sp, #0
 800a156:	60f8      	str	r0, [r7, #12]
 800a158:	607a      	str	r2, [r7, #4]
 800a15a:	603b      	str	r3, [r7, #0]
 800a15c:	460b      	mov	r3, r1
 800a15e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a160:	2300      	movs	r3, #0
 800a162:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a164:	2300      	movs	r3, #0
 800a166:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a16e:	7af9      	ldrb	r1, [r7, #11]
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	687a      	ldr	r2, [r7, #4]
 800a174:	f7f7 fe5b 	bl	8001e2e <HAL_PCD_EP_Receive>
 800a178:	4603      	mov	r3, r0
 800a17a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a17c:	7dfb      	ldrb	r3, [r7, #23]
 800a17e:	4618      	mov	r0, r3
 800a180:	f000 f832 	bl	800a1e8 <USBD_Get_USB_Status>
 800a184:	4603      	mov	r3, r0
 800a186:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a188:	7dbb      	ldrb	r3, [r7, #22]
}
 800a18a:	4618      	mov	r0, r3
 800a18c:	3718      	adds	r7, #24
 800a18e:	46bd      	mov	sp, r7
 800a190:	bd80      	pop	{r7, pc}

0800a192 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a192:	b580      	push	{r7, lr}
 800a194:	b082      	sub	sp, #8
 800a196:	af00      	add	r7, sp, #0
 800a198:	6078      	str	r0, [r7, #4]
 800a19a:	460b      	mov	r3, r1
 800a19c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a1a4:	78fa      	ldrb	r2, [r7, #3]
 800a1a6:	4611      	mov	r1, r2
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	f7f7 fe8b 	bl	8001ec4 <HAL_PCD_EP_GetRxCount>
 800a1ae:	4603      	mov	r3, r0
}
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	3708      	adds	r7, #8
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bd80      	pop	{r7, pc}

0800a1b8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a1b8:	b480      	push	{r7}
 800a1ba:	b083      	sub	sp, #12
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a1c0:	4b03      	ldr	r3, [pc, #12]	; (800a1d0 <USBD_static_malloc+0x18>)
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	370c      	adds	r7, #12
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1cc:	4770      	bx	lr
 800a1ce:	bf00      	nop
 800a1d0:	200065d8 	.word	0x200065d8

0800a1d4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	b083      	sub	sp, #12
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]

}
 800a1dc:	bf00      	nop
 800a1de:	370c      	adds	r7, #12
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e6:	4770      	bx	lr

0800a1e8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	b085      	sub	sp, #20
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a1f6:	79fb      	ldrb	r3, [r7, #7]
 800a1f8:	2b03      	cmp	r3, #3
 800a1fa:	d817      	bhi.n	800a22c <USBD_Get_USB_Status+0x44>
 800a1fc:	a201      	add	r2, pc, #4	; (adr r2, 800a204 <USBD_Get_USB_Status+0x1c>)
 800a1fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a202:	bf00      	nop
 800a204:	0800a215 	.word	0x0800a215
 800a208:	0800a21b 	.word	0x0800a21b
 800a20c:	0800a221 	.word	0x0800a221
 800a210:	0800a227 	.word	0x0800a227
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a214:	2300      	movs	r3, #0
 800a216:	73fb      	strb	r3, [r7, #15]
    break;
 800a218:	e00b      	b.n	800a232 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a21a:	2303      	movs	r3, #3
 800a21c:	73fb      	strb	r3, [r7, #15]
    break;
 800a21e:	e008      	b.n	800a232 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a220:	2301      	movs	r3, #1
 800a222:	73fb      	strb	r3, [r7, #15]
    break;
 800a224:	e005      	b.n	800a232 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a226:	2303      	movs	r3, #3
 800a228:	73fb      	strb	r3, [r7, #15]
    break;
 800a22a:	e002      	b.n	800a232 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a22c:	2303      	movs	r3, #3
 800a22e:	73fb      	strb	r3, [r7, #15]
    break;
 800a230:	bf00      	nop
  }
  return usb_status;
 800a232:	7bfb      	ldrb	r3, [r7, #15]
}
 800a234:	4618      	mov	r0, r3
 800a236:	3714      	adds	r7, #20
 800a238:	46bd      	mov	sp, r7
 800a23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23e:	4770      	bx	lr

0800a240 <_ZNSaIcEC1Ev>:
 800a240:	4770      	bx	lr

0800a242 <_ZNSaIcED1Ev>:
 800a242:	4770      	bx	lr

0800a244 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 800a244:	b10a      	cbz	r2, 800a24a <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 800a246:	f000 b8d1 	b.w	800a3ec <memcpy>
 800a24a:	4770      	bx	lr

0800a24c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 800a24c:	b508      	push	{r3, lr}
 800a24e:	680b      	ldr	r3, [r1, #0]
 800a250:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a254:	d302      	bcc.n	800a25c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 800a256:	480d      	ldr	r0, [pc, #52]	; (800a28c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 800a258:	f000 f880 	bl	800a35c <_ZSt20__throw_length_errorPKc>
 800a25c:	4293      	cmp	r3, r2
 800a25e:	d90b      	bls.n	800a278 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800a260:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 800a264:	ea4f 0042 	mov.w	r0, r2, lsl #1
 800a268:	d206      	bcs.n	800a278 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800a26a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800a26e:	bf2a      	itet	cs
 800a270:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 800a274:	6008      	strcc	r0, [r1, #0]
 800a276:	600b      	strcs	r3, [r1, #0]
 800a278:	6808      	ldr	r0, [r1, #0]
 800a27a:	3001      	adds	r0, #1
 800a27c:	d501      	bpl.n	800a282 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 800a27e:	f000 f867 	bl	800a350 <_ZSt17__throw_bad_allocv>
 800a282:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a286:	f000 b852 	b.w	800a32e <_Znwj>
 800a28a:	bf00      	nop
 800a28c:	0800a89c 	.word	0x0800a89c

0800a290 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 800a290:	2a01      	cmp	r2, #1
 800a292:	b410      	push	{r4}
 800a294:	d104      	bne.n	800a2a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 800a296:	780a      	ldrb	r2, [r1, #0]
 800a298:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a29c:	7002      	strb	r2, [r0, #0]
 800a29e:	4770      	bx	lr
 800a2a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2a4:	f7ff bfce 	b.w	800a244 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

0800a2a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 800a2a8:	b508      	push	{r3, lr}
 800a2aa:	1a52      	subs	r2, r2, r1
 800a2ac:	f7ff fff0 	bl	800a290 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800a2b0:	bd08      	pop	{r3, pc}

0800a2b2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
 800a2b2:	6840      	ldr	r0, [r0, #4]
 800a2b4:	4770      	bx	lr

0800a2b6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 800a2b6:	6800      	ldr	r0, [r0, #0]
 800a2b8:	4770      	bx	lr
	...

0800a2bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 800a2bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a2be:	4604      	mov	r4, r0
 800a2c0:	4616      	mov	r6, r2
 800a2c2:	460d      	mov	r5, r1
 800a2c4:	b919      	cbnz	r1, 800a2ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800a2c6:	b112      	cbz	r2, 800a2ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800a2c8:	480d      	ldr	r0, [pc, #52]	; (800a300 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 800a2ca:	f000 f844 	bl	800a356 <_ZSt19__throw_logic_errorPKc>
 800a2ce:	1b73      	subs	r3, r6, r5
 800a2d0:	2b0f      	cmp	r3, #15
 800a2d2:	9301      	str	r3, [sp, #4]
 800a2d4:	d907      	bls.n	800a2e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	a901      	add	r1, sp, #4
 800a2da:	4620      	mov	r0, r4
 800a2dc:	f7ff ffb6 	bl	800a24c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800a2e0:	9b01      	ldr	r3, [sp, #4]
 800a2e2:	6020      	str	r0, [r4, #0]
 800a2e4:	60a3      	str	r3, [r4, #8]
 800a2e6:	4632      	mov	r2, r6
 800a2e8:	4629      	mov	r1, r5
 800a2ea:	6820      	ldr	r0, [r4, #0]
 800a2ec:	f7ff ffdc 	bl	800a2a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 800a2f0:	9b01      	ldr	r3, [sp, #4]
 800a2f2:	6822      	ldr	r2, [r4, #0]
 800a2f4:	6063      	str	r3, [r4, #4]
 800a2f6:	2100      	movs	r1, #0
 800a2f8:	54d1      	strb	r1, [r2, r3]
 800a2fa:	b002      	add	sp, #8
 800a2fc:	bd70      	pop	{r4, r5, r6, pc}
 800a2fe:	bf00      	nop
 800a300:	0800a8b4 	.word	0x0800a8b4

0800a304 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 800a304:	b538      	push	{r3, r4, r5, lr}
 800a306:	f100 0308 	add.w	r3, r0, #8
 800a30a:	4604      	mov	r4, r0
 800a30c:	6003      	str	r3, [r0, #0]
 800a30e:	460d      	mov	r5, r1
 800a310:	b159      	cbz	r1, 800a32a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 800a312:	4608      	mov	r0, r1
 800a314:	f7f5 ff5c 	bl	80001d0 <strlen>
 800a318:	182a      	adds	r2, r5, r0
 800a31a:	4620      	mov	r0, r4
 800a31c:	f04f 0300 	mov.w	r3, #0
 800a320:	4629      	mov	r1, r5
 800a322:	f7ff ffcb 	bl	800a2bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 800a326:	4620      	mov	r0, r4
 800a328:	bd38      	pop	{r3, r4, r5, pc}
 800a32a:	2201      	movs	r2, #1
 800a32c:	e7f5      	b.n	800a31a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

0800a32e <_Znwj>:
 800a32e:	2801      	cmp	r0, #1
 800a330:	bf38      	it	cc
 800a332:	2001      	movcc	r0, #1
 800a334:	b510      	push	{r4, lr}
 800a336:	4604      	mov	r4, r0
 800a338:	4620      	mov	r0, r4
 800a33a:	f000 f84f 	bl	800a3dc <malloc>
 800a33e:	b930      	cbnz	r0, 800a34e <_Znwj+0x20>
 800a340:	f000 f810 	bl	800a364 <_ZSt15get_new_handlerv>
 800a344:	b908      	cbnz	r0, 800a34a <_Znwj+0x1c>
 800a346:	f000 f815 	bl	800a374 <abort>
 800a34a:	4780      	blx	r0
 800a34c:	e7f4      	b.n	800a338 <_Znwj+0xa>
 800a34e:	bd10      	pop	{r4, pc}

0800a350 <_ZSt17__throw_bad_allocv>:
 800a350:	b508      	push	{r3, lr}
 800a352:	f000 f80f 	bl	800a374 <abort>

0800a356 <_ZSt19__throw_logic_errorPKc>:
 800a356:	b508      	push	{r3, lr}
 800a358:	f000 f80c 	bl	800a374 <abort>

0800a35c <_ZSt20__throw_length_errorPKc>:
 800a35c:	b508      	push	{r3, lr}
 800a35e:	f000 f809 	bl	800a374 <abort>
	...

0800a364 <_ZSt15get_new_handlerv>:
 800a364:	4b02      	ldr	r3, [pc, #8]	; (800a370 <_ZSt15get_new_handlerv+0xc>)
 800a366:	6818      	ldr	r0, [r3, #0]
 800a368:	f3bf 8f5b 	dmb	ish
 800a36c:	4770      	bx	lr
 800a36e:	bf00      	nop
 800a370:	200067f8 	.word	0x200067f8

0800a374 <abort>:
 800a374:	b508      	push	{r3, lr}
 800a376:	2006      	movs	r0, #6
 800a378:	f000 f9d0 	bl	800a71c <raise>
 800a37c:	2001      	movs	r0, #1
 800a37e:	f7f6 fafd 	bl	800097c <_exit>
	...

0800a384 <__errno>:
 800a384:	4b01      	ldr	r3, [pc, #4]	; (800a38c <__errno+0x8>)
 800a386:	6818      	ldr	r0, [r3, #0]
 800a388:	4770      	bx	lr
 800a38a:	bf00      	nop
 800a38c:	20000100 	.word	0x20000100

0800a390 <__libc_init_array>:
 800a390:	b570      	push	{r4, r5, r6, lr}
 800a392:	4d0d      	ldr	r5, [pc, #52]	; (800a3c8 <__libc_init_array+0x38>)
 800a394:	4c0d      	ldr	r4, [pc, #52]	; (800a3cc <__libc_init_array+0x3c>)
 800a396:	1b64      	subs	r4, r4, r5
 800a398:	10a4      	asrs	r4, r4, #2
 800a39a:	2600      	movs	r6, #0
 800a39c:	42a6      	cmp	r6, r4
 800a39e:	d109      	bne.n	800a3b4 <__libc_init_array+0x24>
 800a3a0:	4d0b      	ldr	r5, [pc, #44]	; (800a3d0 <__libc_init_array+0x40>)
 800a3a2:	4c0c      	ldr	r4, [pc, #48]	; (800a3d4 <__libc_init_array+0x44>)
 800a3a4:	f000 f9e2 	bl	800a76c <_init>
 800a3a8:	1b64      	subs	r4, r4, r5
 800a3aa:	10a4      	asrs	r4, r4, #2
 800a3ac:	2600      	movs	r6, #0
 800a3ae:	42a6      	cmp	r6, r4
 800a3b0:	d105      	bne.n	800a3be <__libc_init_array+0x2e>
 800a3b2:	bd70      	pop	{r4, r5, r6, pc}
 800a3b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3b8:	4798      	blx	r3
 800a3ba:	3601      	adds	r6, #1
 800a3bc:	e7ee      	b.n	800a39c <__libc_init_array+0xc>
 800a3be:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3c2:	4798      	blx	r3
 800a3c4:	3601      	adds	r6, #1
 800a3c6:	e7f2      	b.n	800a3ae <__libc_init_array+0x1e>
 800a3c8:	0800a948 	.word	0x0800a948
 800a3cc:	0800a948 	.word	0x0800a948
 800a3d0:	0800a948 	.word	0x0800a948
 800a3d4:	0800a94c 	.word	0x0800a94c

0800a3d8 <__retarget_lock_acquire_recursive>:
 800a3d8:	4770      	bx	lr

0800a3da <__retarget_lock_release_recursive>:
 800a3da:	4770      	bx	lr

0800a3dc <malloc>:
 800a3dc:	4b02      	ldr	r3, [pc, #8]	; (800a3e8 <malloc+0xc>)
 800a3de:	4601      	mov	r1, r0
 800a3e0:	6818      	ldr	r0, [r3, #0]
 800a3e2:	f000 b885 	b.w	800a4f0 <_malloc_r>
 800a3e6:	bf00      	nop
 800a3e8:	20000100 	.word	0x20000100

0800a3ec <memcpy>:
 800a3ec:	440a      	add	r2, r1
 800a3ee:	4291      	cmp	r1, r2
 800a3f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a3f4:	d100      	bne.n	800a3f8 <memcpy+0xc>
 800a3f6:	4770      	bx	lr
 800a3f8:	b510      	push	{r4, lr}
 800a3fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a3fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a402:	4291      	cmp	r1, r2
 800a404:	d1f9      	bne.n	800a3fa <memcpy+0xe>
 800a406:	bd10      	pop	{r4, pc}

0800a408 <memset>:
 800a408:	4402      	add	r2, r0
 800a40a:	4603      	mov	r3, r0
 800a40c:	4293      	cmp	r3, r2
 800a40e:	d100      	bne.n	800a412 <memset+0xa>
 800a410:	4770      	bx	lr
 800a412:	f803 1b01 	strb.w	r1, [r3], #1
 800a416:	e7f9      	b.n	800a40c <memset+0x4>

0800a418 <_free_r>:
 800a418:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a41a:	2900      	cmp	r1, #0
 800a41c:	d044      	beq.n	800a4a8 <_free_r+0x90>
 800a41e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a422:	9001      	str	r0, [sp, #4]
 800a424:	2b00      	cmp	r3, #0
 800a426:	f1a1 0404 	sub.w	r4, r1, #4
 800a42a:	bfb8      	it	lt
 800a42c:	18e4      	addlt	r4, r4, r3
 800a42e:	f000 f991 	bl	800a754 <__malloc_lock>
 800a432:	4a1e      	ldr	r2, [pc, #120]	; (800a4ac <_free_r+0x94>)
 800a434:	9801      	ldr	r0, [sp, #4]
 800a436:	6813      	ldr	r3, [r2, #0]
 800a438:	b933      	cbnz	r3, 800a448 <_free_r+0x30>
 800a43a:	6063      	str	r3, [r4, #4]
 800a43c:	6014      	str	r4, [r2, #0]
 800a43e:	b003      	add	sp, #12
 800a440:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a444:	f000 b98c 	b.w	800a760 <__malloc_unlock>
 800a448:	42a3      	cmp	r3, r4
 800a44a:	d908      	bls.n	800a45e <_free_r+0x46>
 800a44c:	6825      	ldr	r5, [r4, #0]
 800a44e:	1961      	adds	r1, r4, r5
 800a450:	428b      	cmp	r3, r1
 800a452:	bf01      	itttt	eq
 800a454:	6819      	ldreq	r1, [r3, #0]
 800a456:	685b      	ldreq	r3, [r3, #4]
 800a458:	1949      	addeq	r1, r1, r5
 800a45a:	6021      	streq	r1, [r4, #0]
 800a45c:	e7ed      	b.n	800a43a <_free_r+0x22>
 800a45e:	461a      	mov	r2, r3
 800a460:	685b      	ldr	r3, [r3, #4]
 800a462:	b10b      	cbz	r3, 800a468 <_free_r+0x50>
 800a464:	42a3      	cmp	r3, r4
 800a466:	d9fa      	bls.n	800a45e <_free_r+0x46>
 800a468:	6811      	ldr	r1, [r2, #0]
 800a46a:	1855      	adds	r5, r2, r1
 800a46c:	42a5      	cmp	r5, r4
 800a46e:	d10b      	bne.n	800a488 <_free_r+0x70>
 800a470:	6824      	ldr	r4, [r4, #0]
 800a472:	4421      	add	r1, r4
 800a474:	1854      	adds	r4, r2, r1
 800a476:	42a3      	cmp	r3, r4
 800a478:	6011      	str	r1, [r2, #0]
 800a47a:	d1e0      	bne.n	800a43e <_free_r+0x26>
 800a47c:	681c      	ldr	r4, [r3, #0]
 800a47e:	685b      	ldr	r3, [r3, #4]
 800a480:	6053      	str	r3, [r2, #4]
 800a482:	4421      	add	r1, r4
 800a484:	6011      	str	r1, [r2, #0]
 800a486:	e7da      	b.n	800a43e <_free_r+0x26>
 800a488:	d902      	bls.n	800a490 <_free_r+0x78>
 800a48a:	230c      	movs	r3, #12
 800a48c:	6003      	str	r3, [r0, #0]
 800a48e:	e7d6      	b.n	800a43e <_free_r+0x26>
 800a490:	6825      	ldr	r5, [r4, #0]
 800a492:	1961      	adds	r1, r4, r5
 800a494:	428b      	cmp	r3, r1
 800a496:	bf04      	itt	eq
 800a498:	6819      	ldreq	r1, [r3, #0]
 800a49a:	685b      	ldreq	r3, [r3, #4]
 800a49c:	6063      	str	r3, [r4, #4]
 800a49e:	bf04      	itt	eq
 800a4a0:	1949      	addeq	r1, r1, r5
 800a4a2:	6021      	streq	r1, [r4, #0]
 800a4a4:	6054      	str	r4, [r2, #4]
 800a4a6:	e7ca      	b.n	800a43e <_free_r+0x26>
 800a4a8:	b003      	add	sp, #12
 800a4aa:	bd30      	pop	{r4, r5, pc}
 800a4ac:	20006800 	.word	0x20006800

0800a4b0 <sbrk_aligned>:
 800a4b0:	b570      	push	{r4, r5, r6, lr}
 800a4b2:	4e0e      	ldr	r6, [pc, #56]	; (800a4ec <sbrk_aligned+0x3c>)
 800a4b4:	460c      	mov	r4, r1
 800a4b6:	6831      	ldr	r1, [r6, #0]
 800a4b8:	4605      	mov	r5, r0
 800a4ba:	b911      	cbnz	r1, 800a4c2 <sbrk_aligned+0x12>
 800a4bc:	f000 f8f6 	bl	800a6ac <_sbrk_r>
 800a4c0:	6030      	str	r0, [r6, #0]
 800a4c2:	4621      	mov	r1, r4
 800a4c4:	4628      	mov	r0, r5
 800a4c6:	f000 f8f1 	bl	800a6ac <_sbrk_r>
 800a4ca:	1c43      	adds	r3, r0, #1
 800a4cc:	d00a      	beq.n	800a4e4 <sbrk_aligned+0x34>
 800a4ce:	1cc4      	adds	r4, r0, #3
 800a4d0:	f024 0403 	bic.w	r4, r4, #3
 800a4d4:	42a0      	cmp	r0, r4
 800a4d6:	d007      	beq.n	800a4e8 <sbrk_aligned+0x38>
 800a4d8:	1a21      	subs	r1, r4, r0
 800a4da:	4628      	mov	r0, r5
 800a4dc:	f000 f8e6 	bl	800a6ac <_sbrk_r>
 800a4e0:	3001      	adds	r0, #1
 800a4e2:	d101      	bne.n	800a4e8 <sbrk_aligned+0x38>
 800a4e4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a4e8:	4620      	mov	r0, r4
 800a4ea:	bd70      	pop	{r4, r5, r6, pc}
 800a4ec:	20006804 	.word	0x20006804

0800a4f0 <_malloc_r>:
 800a4f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4f4:	1ccd      	adds	r5, r1, #3
 800a4f6:	f025 0503 	bic.w	r5, r5, #3
 800a4fa:	3508      	adds	r5, #8
 800a4fc:	2d0c      	cmp	r5, #12
 800a4fe:	bf38      	it	cc
 800a500:	250c      	movcc	r5, #12
 800a502:	2d00      	cmp	r5, #0
 800a504:	4607      	mov	r7, r0
 800a506:	db01      	blt.n	800a50c <_malloc_r+0x1c>
 800a508:	42a9      	cmp	r1, r5
 800a50a:	d905      	bls.n	800a518 <_malloc_r+0x28>
 800a50c:	230c      	movs	r3, #12
 800a50e:	603b      	str	r3, [r7, #0]
 800a510:	2600      	movs	r6, #0
 800a512:	4630      	mov	r0, r6
 800a514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a518:	4e2e      	ldr	r6, [pc, #184]	; (800a5d4 <_malloc_r+0xe4>)
 800a51a:	f000 f91b 	bl	800a754 <__malloc_lock>
 800a51e:	6833      	ldr	r3, [r6, #0]
 800a520:	461c      	mov	r4, r3
 800a522:	bb34      	cbnz	r4, 800a572 <_malloc_r+0x82>
 800a524:	4629      	mov	r1, r5
 800a526:	4638      	mov	r0, r7
 800a528:	f7ff ffc2 	bl	800a4b0 <sbrk_aligned>
 800a52c:	1c43      	adds	r3, r0, #1
 800a52e:	4604      	mov	r4, r0
 800a530:	d14d      	bne.n	800a5ce <_malloc_r+0xde>
 800a532:	6834      	ldr	r4, [r6, #0]
 800a534:	4626      	mov	r6, r4
 800a536:	2e00      	cmp	r6, #0
 800a538:	d140      	bne.n	800a5bc <_malloc_r+0xcc>
 800a53a:	6823      	ldr	r3, [r4, #0]
 800a53c:	4631      	mov	r1, r6
 800a53e:	4638      	mov	r0, r7
 800a540:	eb04 0803 	add.w	r8, r4, r3
 800a544:	f000 f8b2 	bl	800a6ac <_sbrk_r>
 800a548:	4580      	cmp	r8, r0
 800a54a:	d13a      	bne.n	800a5c2 <_malloc_r+0xd2>
 800a54c:	6821      	ldr	r1, [r4, #0]
 800a54e:	3503      	adds	r5, #3
 800a550:	1a6d      	subs	r5, r5, r1
 800a552:	f025 0503 	bic.w	r5, r5, #3
 800a556:	3508      	adds	r5, #8
 800a558:	2d0c      	cmp	r5, #12
 800a55a:	bf38      	it	cc
 800a55c:	250c      	movcc	r5, #12
 800a55e:	4629      	mov	r1, r5
 800a560:	4638      	mov	r0, r7
 800a562:	f7ff ffa5 	bl	800a4b0 <sbrk_aligned>
 800a566:	3001      	adds	r0, #1
 800a568:	d02b      	beq.n	800a5c2 <_malloc_r+0xd2>
 800a56a:	6823      	ldr	r3, [r4, #0]
 800a56c:	442b      	add	r3, r5
 800a56e:	6023      	str	r3, [r4, #0]
 800a570:	e00e      	b.n	800a590 <_malloc_r+0xa0>
 800a572:	6822      	ldr	r2, [r4, #0]
 800a574:	1b52      	subs	r2, r2, r5
 800a576:	d41e      	bmi.n	800a5b6 <_malloc_r+0xc6>
 800a578:	2a0b      	cmp	r2, #11
 800a57a:	d916      	bls.n	800a5aa <_malloc_r+0xba>
 800a57c:	1961      	adds	r1, r4, r5
 800a57e:	42a3      	cmp	r3, r4
 800a580:	6025      	str	r5, [r4, #0]
 800a582:	bf18      	it	ne
 800a584:	6059      	strne	r1, [r3, #4]
 800a586:	6863      	ldr	r3, [r4, #4]
 800a588:	bf08      	it	eq
 800a58a:	6031      	streq	r1, [r6, #0]
 800a58c:	5162      	str	r2, [r4, r5]
 800a58e:	604b      	str	r3, [r1, #4]
 800a590:	4638      	mov	r0, r7
 800a592:	f104 060b 	add.w	r6, r4, #11
 800a596:	f000 f8e3 	bl	800a760 <__malloc_unlock>
 800a59a:	f026 0607 	bic.w	r6, r6, #7
 800a59e:	1d23      	adds	r3, r4, #4
 800a5a0:	1af2      	subs	r2, r6, r3
 800a5a2:	d0b6      	beq.n	800a512 <_malloc_r+0x22>
 800a5a4:	1b9b      	subs	r3, r3, r6
 800a5a6:	50a3      	str	r3, [r4, r2]
 800a5a8:	e7b3      	b.n	800a512 <_malloc_r+0x22>
 800a5aa:	6862      	ldr	r2, [r4, #4]
 800a5ac:	42a3      	cmp	r3, r4
 800a5ae:	bf0c      	ite	eq
 800a5b0:	6032      	streq	r2, [r6, #0]
 800a5b2:	605a      	strne	r2, [r3, #4]
 800a5b4:	e7ec      	b.n	800a590 <_malloc_r+0xa0>
 800a5b6:	4623      	mov	r3, r4
 800a5b8:	6864      	ldr	r4, [r4, #4]
 800a5ba:	e7b2      	b.n	800a522 <_malloc_r+0x32>
 800a5bc:	4634      	mov	r4, r6
 800a5be:	6876      	ldr	r6, [r6, #4]
 800a5c0:	e7b9      	b.n	800a536 <_malloc_r+0x46>
 800a5c2:	230c      	movs	r3, #12
 800a5c4:	603b      	str	r3, [r7, #0]
 800a5c6:	4638      	mov	r0, r7
 800a5c8:	f000 f8ca 	bl	800a760 <__malloc_unlock>
 800a5cc:	e7a1      	b.n	800a512 <_malloc_r+0x22>
 800a5ce:	6025      	str	r5, [r4, #0]
 800a5d0:	e7de      	b.n	800a590 <_malloc_r+0xa0>
 800a5d2:	bf00      	nop
 800a5d4:	20006800 	.word	0x20006800

0800a5d8 <cleanup_glue>:
 800a5d8:	b538      	push	{r3, r4, r5, lr}
 800a5da:	460c      	mov	r4, r1
 800a5dc:	6809      	ldr	r1, [r1, #0]
 800a5de:	4605      	mov	r5, r0
 800a5e0:	b109      	cbz	r1, 800a5e6 <cleanup_glue+0xe>
 800a5e2:	f7ff fff9 	bl	800a5d8 <cleanup_glue>
 800a5e6:	4621      	mov	r1, r4
 800a5e8:	4628      	mov	r0, r5
 800a5ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a5ee:	f7ff bf13 	b.w	800a418 <_free_r>
	...

0800a5f4 <_reclaim_reent>:
 800a5f4:	4b2c      	ldr	r3, [pc, #176]	; (800a6a8 <_reclaim_reent+0xb4>)
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	4283      	cmp	r3, r0
 800a5fa:	b570      	push	{r4, r5, r6, lr}
 800a5fc:	4604      	mov	r4, r0
 800a5fe:	d051      	beq.n	800a6a4 <_reclaim_reent+0xb0>
 800a600:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a602:	b143      	cbz	r3, 800a616 <_reclaim_reent+0x22>
 800a604:	68db      	ldr	r3, [r3, #12]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d14a      	bne.n	800a6a0 <_reclaim_reent+0xac>
 800a60a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a60c:	6819      	ldr	r1, [r3, #0]
 800a60e:	b111      	cbz	r1, 800a616 <_reclaim_reent+0x22>
 800a610:	4620      	mov	r0, r4
 800a612:	f7ff ff01 	bl	800a418 <_free_r>
 800a616:	6961      	ldr	r1, [r4, #20]
 800a618:	b111      	cbz	r1, 800a620 <_reclaim_reent+0x2c>
 800a61a:	4620      	mov	r0, r4
 800a61c:	f7ff fefc 	bl	800a418 <_free_r>
 800a620:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a622:	b111      	cbz	r1, 800a62a <_reclaim_reent+0x36>
 800a624:	4620      	mov	r0, r4
 800a626:	f7ff fef7 	bl	800a418 <_free_r>
 800a62a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a62c:	b111      	cbz	r1, 800a634 <_reclaim_reent+0x40>
 800a62e:	4620      	mov	r0, r4
 800a630:	f7ff fef2 	bl	800a418 <_free_r>
 800a634:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a636:	b111      	cbz	r1, 800a63e <_reclaim_reent+0x4a>
 800a638:	4620      	mov	r0, r4
 800a63a:	f7ff feed 	bl	800a418 <_free_r>
 800a63e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a640:	b111      	cbz	r1, 800a648 <_reclaim_reent+0x54>
 800a642:	4620      	mov	r0, r4
 800a644:	f7ff fee8 	bl	800a418 <_free_r>
 800a648:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a64a:	b111      	cbz	r1, 800a652 <_reclaim_reent+0x5e>
 800a64c:	4620      	mov	r0, r4
 800a64e:	f7ff fee3 	bl	800a418 <_free_r>
 800a652:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a654:	b111      	cbz	r1, 800a65c <_reclaim_reent+0x68>
 800a656:	4620      	mov	r0, r4
 800a658:	f7ff fede 	bl	800a418 <_free_r>
 800a65c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a65e:	b111      	cbz	r1, 800a666 <_reclaim_reent+0x72>
 800a660:	4620      	mov	r0, r4
 800a662:	f7ff fed9 	bl	800a418 <_free_r>
 800a666:	69a3      	ldr	r3, [r4, #24]
 800a668:	b1e3      	cbz	r3, 800a6a4 <_reclaim_reent+0xb0>
 800a66a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a66c:	4620      	mov	r0, r4
 800a66e:	4798      	blx	r3
 800a670:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a672:	b1b9      	cbz	r1, 800a6a4 <_reclaim_reent+0xb0>
 800a674:	4620      	mov	r0, r4
 800a676:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a67a:	f7ff bfad 	b.w	800a5d8 <cleanup_glue>
 800a67e:	5949      	ldr	r1, [r1, r5]
 800a680:	b941      	cbnz	r1, 800a694 <_reclaim_reent+0xa0>
 800a682:	3504      	adds	r5, #4
 800a684:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a686:	2d80      	cmp	r5, #128	; 0x80
 800a688:	68d9      	ldr	r1, [r3, #12]
 800a68a:	d1f8      	bne.n	800a67e <_reclaim_reent+0x8a>
 800a68c:	4620      	mov	r0, r4
 800a68e:	f7ff fec3 	bl	800a418 <_free_r>
 800a692:	e7ba      	b.n	800a60a <_reclaim_reent+0x16>
 800a694:	680e      	ldr	r6, [r1, #0]
 800a696:	4620      	mov	r0, r4
 800a698:	f7ff febe 	bl	800a418 <_free_r>
 800a69c:	4631      	mov	r1, r6
 800a69e:	e7ef      	b.n	800a680 <_reclaim_reent+0x8c>
 800a6a0:	2500      	movs	r5, #0
 800a6a2:	e7ef      	b.n	800a684 <_reclaim_reent+0x90>
 800a6a4:	bd70      	pop	{r4, r5, r6, pc}
 800a6a6:	bf00      	nop
 800a6a8:	20000100 	.word	0x20000100

0800a6ac <_sbrk_r>:
 800a6ac:	b538      	push	{r3, r4, r5, lr}
 800a6ae:	4d06      	ldr	r5, [pc, #24]	; (800a6c8 <_sbrk_r+0x1c>)
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	4604      	mov	r4, r0
 800a6b4:	4608      	mov	r0, r1
 800a6b6:	602b      	str	r3, [r5, #0]
 800a6b8:	f7f6 f96a 	bl	8000990 <_sbrk>
 800a6bc:	1c43      	adds	r3, r0, #1
 800a6be:	d102      	bne.n	800a6c6 <_sbrk_r+0x1a>
 800a6c0:	682b      	ldr	r3, [r5, #0]
 800a6c2:	b103      	cbz	r3, 800a6c6 <_sbrk_r+0x1a>
 800a6c4:	6023      	str	r3, [r4, #0]
 800a6c6:	bd38      	pop	{r3, r4, r5, pc}
 800a6c8:	20006808 	.word	0x20006808

0800a6cc <_raise_r>:
 800a6cc:	291f      	cmp	r1, #31
 800a6ce:	b538      	push	{r3, r4, r5, lr}
 800a6d0:	4604      	mov	r4, r0
 800a6d2:	460d      	mov	r5, r1
 800a6d4:	d904      	bls.n	800a6e0 <_raise_r+0x14>
 800a6d6:	2316      	movs	r3, #22
 800a6d8:	6003      	str	r3, [r0, #0]
 800a6da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a6de:	bd38      	pop	{r3, r4, r5, pc}
 800a6e0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a6e2:	b112      	cbz	r2, 800a6ea <_raise_r+0x1e>
 800a6e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a6e8:	b94b      	cbnz	r3, 800a6fe <_raise_r+0x32>
 800a6ea:	4620      	mov	r0, r4
 800a6ec:	f000 f830 	bl	800a750 <_getpid_r>
 800a6f0:	462a      	mov	r2, r5
 800a6f2:	4601      	mov	r1, r0
 800a6f4:	4620      	mov	r0, r4
 800a6f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a6fa:	f000 b817 	b.w	800a72c <_kill_r>
 800a6fe:	2b01      	cmp	r3, #1
 800a700:	d00a      	beq.n	800a718 <_raise_r+0x4c>
 800a702:	1c59      	adds	r1, r3, #1
 800a704:	d103      	bne.n	800a70e <_raise_r+0x42>
 800a706:	2316      	movs	r3, #22
 800a708:	6003      	str	r3, [r0, #0]
 800a70a:	2001      	movs	r0, #1
 800a70c:	e7e7      	b.n	800a6de <_raise_r+0x12>
 800a70e:	2400      	movs	r4, #0
 800a710:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a714:	4628      	mov	r0, r5
 800a716:	4798      	blx	r3
 800a718:	2000      	movs	r0, #0
 800a71a:	e7e0      	b.n	800a6de <_raise_r+0x12>

0800a71c <raise>:
 800a71c:	4b02      	ldr	r3, [pc, #8]	; (800a728 <raise+0xc>)
 800a71e:	4601      	mov	r1, r0
 800a720:	6818      	ldr	r0, [r3, #0]
 800a722:	f7ff bfd3 	b.w	800a6cc <_raise_r>
 800a726:	bf00      	nop
 800a728:	20000100 	.word	0x20000100

0800a72c <_kill_r>:
 800a72c:	b538      	push	{r3, r4, r5, lr}
 800a72e:	4d07      	ldr	r5, [pc, #28]	; (800a74c <_kill_r+0x20>)
 800a730:	2300      	movs	r3, #0
 800a732:	4604      	mov	r4, r0
 800a734:	4608      	mov	r0, r1
 800a736:	4611      	mov	r1, r2
 800a738:	602b      	str	r3, [r5, #0]
 800a73a:	f7f6 f90f 	bl	800095c <_kill>
 800a73e:	1c43      	adds	r3, r0, #1
 800a740:	d102      	bne.n	800a748 <_kill_r+0x1c>
 800a742:	682b      	ldr	r3, [r5, #0]
 800a744:	b103      	cbz	r3, 800a748 <_kill_r+0x1c>
 800a746:	6023      	str	r3, [r4, #0]
 800a748:	bd38      	pop	{r3, r4, r5, pc}
 800a74a:	bf00      	nop
 800a74c:	20006808 	.word	0x20006808

0800a750 <_getpid_r>:
 800a750:	f7f6 b8fc 	b.w	800094c <_getpid>

0800a754 <__malloc_lock>:
 800a754:	4801      	ldr	r0, [pc, #4]	; (800a75c <__malloc_lock+0x8>)
 800a756:	f7ff be3f 	b.w	800a3d8 <__retarget_lock_acquire_recursive>
 800a75a:	bf00      	nop
 800a75c:	200067fc 	.word	0x200067fc

0800a760 <__malloc_unlock>:
 800a760:	4801      	ldr	r0, [pc, #4]	; (800a768 <__malloc_unlock+0x8>)
 800a762:	f7ff be3a 	b.w	800a3da <__retarget_lock_release_recursive>
 800a766:	bf00      	nop
 800a768:	200067fc 	.word	0x200067fc

0800a76c <_init>:
 800a76c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a76e:	bf00      	nop
 800a770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a772:	bc08      	pop	{r3}
 800a774:	469e      	mov	lr, r3
 800a776:	4770      	bx	lr

0800a778 <_fini>:
 800a778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a77a:	bf00      	nop
 800a77c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a77e:	bc08      	pop	{r3}
 800a780:	469e      	mov	lr, r3
 800a782:	4770      	bx	lr
